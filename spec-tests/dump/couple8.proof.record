==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x12 $x6)))
 (let (($x17 (and $x8 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x12 $x6)))
 (let (($x17 (and $x8 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv3120919143 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3763329255 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x195 (= true false)))
 (let (($x196 (= $x195 true)))
 (let (($x188 (forall ((input.ind-%var49X (_ BitVec 32)) )(let ((?x182 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var49X)))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var49X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var49X)))
 (=> $x118 (= ?x133 ?x182))))))
 ))
 (let (($x177 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var48X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var48X)))
 (= $x118 $x173))))
 ))
 (let (($x189 (and $x177 $x188)))
 (let (($x190 (= $x189 true)))
 (let (($x165 (forall ((input.ind-%var41X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var41X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x156))))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var41X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var41X)))
 (=> $x118 (= ?x133 ?x162))))))))
 ))
 (let (($x128 (forall ((input.ind-%var40X (_ BitVec 32)) )(let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var40X)))
 (= $x118 (and (bvule (_ bv0 32) input.ind-%var40X) (bvult input.ind-%var40X input.dst.llvm-%n)))))
 ))
 (let (($x166 (and $x128 $x165)))
 (let (($x167 (= $x166 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x107 (concat ?x104 (concat ?x101 ?x99)))))
 (let (($x110 (= ?x108 input.dst.llvm-%n)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x58 (concat ?x74 ?x14)))))
 (let (($x94 (= ?x92 input.dst.llvm-%x)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x28)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x84)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x62)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x50 $x80)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x72 $x71)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (and $x68 $x81)))
 (let (($x46 (not $x67)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x76 $x85)))
 (let (($x56 (and (not $x22) $x46)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x38 $x52)))
 (let (($x63 (not $x15)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x12 $x37)))
 (let (($x31 (and (not $x19) $x63)))
 (let (($x47 (and (and (and (and (and (and $x31 $x56) $x45) $x42) $x32) $x73) $x11)))
 (let (($x20 (and $x47 $x65)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x23 (or false (or false (and (and true (or $x33 $x21)) (or $x79 $x86))))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x16 (and $x54 $x20)))
 (let (($x26 (= $x16 true)))
 (let (($x7 (= $x26 true)))
 (let (($x75 (= $x7 true)))
 (let (($x97 (and $x75 $x96)))
 (let (($x113 (and $x97 $x112)))
 (let (($x168 (and $x113 $x167)))
 (let (($x191 (and $x168 $x190)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x192 (and $x6 $x191)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x193 (and $x5 $x192)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x194 (and $x25 $x193)))
 (let (($x197 (=> $x194 $x196)))
 (not $x197))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x195 (= true false)))
 (let (($x196 (= $x195 true)))
 (let (($x188 (forall ((input.ind-%var49X (_ BitVec 32)) )(let ((?x182 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var49X)))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var49X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var49X)))
 (=> $x118 (= ?x133 ?x182))))))
 ))
 (let (($x177 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var48X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var48X)))
 (= $x118 $x173))))
 ))
 (let (($x189 (and $x177 $x188)))
 (let (($x190 (= $x189 true)))
 (let (($x165 (forall ((input.ind-%var41X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var41X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x156))))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var41X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var41X)))
 (=> $x118 (= ?x133 ?x162))))))))
 ))
 (let (($x128 (forall ((input.ind-%var40X (_ BitVec 32)) )(let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var40X)))
 (= $x118 (and (bvule (_ bv0 32) input.ind-%var40X) (bvult input.ind-%var40X input.dst.llvm-%n)))))
 ))
 (let (($x166 (and $x128 $x165)))
 (let (($x167 (= $x166 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x107 (concat ?x104 (concat ?x101 ?x99)))))
 (let (($x110 (= ?x108 input.dst.llvm-%n)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x58 (concat ?x74 ?x14)))))
 (let (($x94 (= ?x92 input.dst.llvm-%x)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x28)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x84)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x62)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x50 $x80)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x72 $x71)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (and $x68 $x81)))
 (let (($x46 (not $x67)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x76 $x85)))
 (let (($x56 (and (not $x22) $x46)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x38 $x52)))
 (let (($x63 (not $x15)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x12 $x37)))
 (let (($x31 (and (not $x19) $x63)))
 (let (($x47 (and (and (and (and (and (and $x31 $x56) $x45) $x42) $x32) $x73) $x11)))
 (let (($x20 (and $x47 $x65)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x23 (or false (or false (and (and true (or $x33 $x21)) (or $x79 $x86))))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x16 (and $x54 $x20)))
 (let (($x26 (= $x16 true)))
 (let (($x7 (= $x26 true)))
 (let (($x75 (= $x7 true)))
 (let (($x97 (and $x75 $x96)))
 (let (($x113 (and $x97 $x112)))
 (let (($x168 (and $x113 $x167)))
 (let (($x191 (and $x168 $x190)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x192 (and $x6 $x191)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x193 (and $x5 $x192)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x194 (and $x25 $x193)))
 (let (($x197 (=> $x194 $x196)))
 (not $x197))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x38023200)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000000e0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x38023203)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000000e3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x38023200)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000000e0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x38023203)
                                   (k!0 #x38023202)
                                   (k!0 #x38023201)
                                   (k!0 #x38023200)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x38023203)
                                   (k!0 #x38023202)
                                   (k!0 #x38023201)
                                   (k!0 #x38023200)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x38023203)
                                   (k!0 #x38023202)
                                   (k!0 #x38023201)
                                   (k!0 #x38023200)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x38023203)
                                   (k!0 #x38023202)
                                   (k!0 #x38023201)
                                   (k!0 #x38023200))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x000000e3)
                        (k!0 #x000000e2)
                        (k!0 #x000000e1)
                        (k!0 #x000000e0))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x21548974)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd7646b4c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd7646b4f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x21548977)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd7646b4c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x21548974)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xd7646b4f)
                                   (k!0 #xd7646b4e)
                                   (k!0 #xd7646b4d)
                                   (k!0 #xd7646b4c)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xd7646b4f)
                                   (k!0 #xd7646b4e)
                                   (k!0 #xd7646b4d)
                                   (k!0 #xd7646b4c)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xd7646b4f)
                                   (k!0 #xd7646b4e)
                                   (k!0 #xd7646b4d)
                                   (k!0 #xd7646b4c)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #xd7646b4f)
                                   (k!0 #xd7646b4e)
                                   (k!0 #xd7646b4d)
                                   (k!0 #xd7646b4c))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x28)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x64)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x72 $x95)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x85 $x65)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x59 $x55)))
 (let (($x91 (not $x80)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x91)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x12 $x33)))
 (let (($x44 (not $x77)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x51 $x27)))
 (let (($x45 (and (not $x106) $x44)))
 (let (($x53 (and (and (and (and (and (and $x45 $x97) $x54) $x22) $x20) $x62) $x78)))
 (let (($x93 (and $x53 $x83)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x66 (or false (or false (and (and true (or $x15 $x81)) (or $x39 $x63))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x150 (and $x41 $x93)))
 (let (($x184 (= $x150 true)))
 (let (($x179 (= $x184 true)))
 (let (($x172 (forall ((input.ind-%var77X (_ BitVec 32)) )(let ((?x145 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var77X)))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var77X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var77X)))
 (=> $x136 (= ?x164 ?x145))))))
 ))
 (let (($x144 (forall ((input.ind-%var76X (_ BitVec 32)) )(let (($x138 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var76X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var76X)))
 (= $x136 $x138))))
 ))
 (let (($x181 (and $x144 $x172)))
 (let (($x123 (= $x181 true)))
 (let (($x134 (forall ((input.ind-%var71X (_ BitVec 32)) )(let ((?x196 (bvadd (bvmul input.ind-%var71X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x131))))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var71X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var71X)))
 (=> $x136 (= ?x164 ?x174))))))))
 ))
 (let (($x156 (forall ((input.ind-%var70X (_ BitVec 32)) )(let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var70X)))
 (= $x136 (and (bvule (_ bv0 32) input.ind-%var70X) (bvult input.ind-%var70X input.dst.llvm-%n)))))
 ))
 (let (($x129 (and $x156 $x134)))
 (let (($x132 (= $x129 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x108 (concat ?x99 (concat ?x104 ?x107)))))
 (let (($x110 (= input.dst.llvm-%n ?x109)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x13 (concat ?x84 (concat ?x11 ?x70)))))
 (let (($x73 (= input.dst.llvm-%x ?x82)))
 (let (($x111 (and $x73 $x110)))
 (let (($x14 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x112 (and $x14 $x111)))
 (let (($x118 (and (and (and $x41 true) $x93) $x112)))
 (let (($x125 (= $x118 true)))
 (let (($x124 (= $x125 true)))
 (let (($x126 (= $x124 true)))
 (let (($x114 (and $x126 $x132)))
 (let (($x149 (and $x114 $x123)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x170 (and $x29 $x149)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x175 (and $x6 $x170)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x48 $x175)))
 (let (($x185 (=> $x130 $x179)))
 (not $x185))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x28)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x64)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x72 $x95)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x85 $x65)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x59 $x55)))
 (let (($x91 (not $x80)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x91)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x12 $x33)))
 (let (($x44 (not $x77)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x51 $x27)))
 (let (($x45 (and (not $x106) $x44)))
 (let (($x53 (and (and (and (and (and (and $x45 $x97) $x54) $x22) $x20) $x62) $x78)))
 (let (($x93 (and $x53 $x83)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x66 (or false (or false (and (and true (or $x15 $x81)) (or $x39 $x63))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x150 (and $x41 $x93)))
 (let (($x184 (= $x150 true)))
 (let (($x179 (= $x184 true)))
 (let (($x172 (forall ((input.ind-%var77X (_ BitVec 32)) )(let ((?x145 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var77X)))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var77X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var77X)))
 (=> $x136 (= ?x164 ?x145))))))
 ))
 (let (($x144 (forall ((input.ind-%var76X (_ BitVec 32)) )(let (($x138 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var76X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var76X)))
 (= $x136 $x138))))
 ))
 (let (($x181 (and $x144 $x172)))
 (let (($x123 (= $x181 true)))
 (let (($x134 (forall ((input.ind-%var71X (_ BitVec 32)) )(let ((?x196 (bvadd (bvmul input.ind-%var71X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x131))))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var71X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var71X)))
 (=> $x136 (= ?x164 ?x174))))))))
 ))
 (let (($x156 (forall ((input.ind-%var70X (_ BitVec 32)) )(let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var70X)))
 (= $x136 (and (bvule (_ bv0 32) input.ind-%var70X) (bvult input.ind-%var70X input.dst.llvm-%n)))))
 ))
 (let (($x129 (and $x156 $x134)))
 (let (($x132 (= $x129 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x108 (concat ?x99 (concat ?x104 ?x107)))))
 (let (($x110 (= input.dst.llvm-%n ?x109)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x13 (concat ?x84 (concat ?x11 ?x70)))))
 (let (($x73 (= input.dst.llvm-%x ?x82)))
 (let (($x111 (and $x73 $x110)))
 (let (($x14 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x112 (and $x14 $x111)))
 (let (($x118 (and (and (and $x41 true) $x93) $x112)))
 (let (($x125 (= $x118 true)))
 (let (($x124 (= $x125 true)))
 (let (($x126 (= $x124 true)))
 (let (($x114 (and $x126 $x132)))
 (let (($x149 (and $x114 $x123)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x170 (and $x29 $x149)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x175 (and $x6 $x170)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x48 $x175)))
 (let (($x185 (=> $x130 $x179)))
 (not $x185))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x194 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x116 (= $x194 true)))
 (let (($x161 (forall ((input.ind-%var89X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var89X)))
 (let ((?x174 (input.spec-%var-x-1.1.1 input.ind-%var89X)))
 (let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var89X)))
 (=> $x156 (= ?x174 ?x189))))))
 ))
 (let (($x188 (forall ((input.ind-%var88X (_ BitVec 32)) )(let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var88X)))
 (let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var88X)))
 (= $x156 $x173))))
 ))
 (let (($x142 (and $x188 $x161)))
 (let (($x157 (= $x142 true)))
 (let (($x165 (forall ((input.ind-%var83X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var83X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x185))))
 (let ((?x174 (input.spec-%var-x-1.1.1 input.ind-%var83X)))
 (let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var83X)))
 (=> $x156 (= ?x174 ?x146))))))))
 ))
 (let (($x115 (forall ((input.ind-%var82X (_ BitVec 32)) )(let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var82X)))
 (= $x156 (and (bvule (_ bv0 32) input.ind-%var82X) (bvult input.ind-%var82X input.dst.llvm-%n)))))
 ))
 (let (($x159 (and $x115 $x165)))
 (let (($x163 (= $x159 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x109 (concat ?x107 (concat ?x99 ?x108)))))
 (let (($x111 (= input.dst.llvm-%n ?x110)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x57 (concat ?x11 (concat ?x68 ?x94)))))
 (let (($x73 (= input.dst.llvm-%x ?x82)))
 (let (($x112 (and $x73 $x111)))
 (let (($x49 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x118 (and $x49 $x112)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x47)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x20)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x85)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x22 $x72)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x79 $x7)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x90 $x59)))
 (let (($x80 (not $x55)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x80)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x60 $x12)))
 (let (($x77 (not $x33)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x40 $x24)))
 (let (($x45 (and (not $x106) $x77)))
 (let (($x83 (and (and (and (and (and (and $x45 $x97) $x23) $x50) $x58) $x65) $x88)))
 (let (($x93 (and $x83 $x62)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x81)))
 (let (($x113 (or false (or false (and (and true (or $x86 $x42)) (or $x31 $x76))))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x113)))
 (let (($x126 (and (and (and $x27 true) $x93) $x118)))
 (let (($x133 (= $x126 true)))
 (let (($x136 (= $x133 true)))
 (let (($x154 (= $x136 true)))
 (let (($x127 (and $x154 $x163)))
 (let (($x193 (and $x127 $x157)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x121 (and $x25 $x193)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x147 (and $x36 $x121)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x162 (and $x10 $x147)))
 (let (($x141 (=> $x162 $x116)))
 (not $x141)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x194 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x116 (= $x194 true)))
 (let (($x161 (forall ((input.ind-%var89X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var89X)))
 (let ((?x174 (input.spec-%var-x-1.1.1 input.ind-%var89X)))
 (let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var89X)))
 (=> $x156 (= ?x174 ?x189))))))
 ))
 (let (($x188 (forall ((input.ind-%var88X (_ BitVec 32)) )(let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var88X)))
 (let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var88X)))
 (= $x156 $x173))))
 ))
 (let (($x142 (and $x188 $x161)))
 (let (($x157 (= $x142 true)))
 (let (($x165 (forall ((input.ind-%var83X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var83X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x185))))
 (let ((?x174 (input.spec-%var-x-1.1.1 input.ind-%var83X)))
 (let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var83X)))
 (=> $x156 (= ?x174 ?x146))))))))
 ))
 (let (($x115 (forall ((input.ind-%var82X (_ BitVec 32)) )(let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var82X)))
 (= $x156 (and (bvule (_ bv0 32) input.ind-%var82X) (bvult input.ind-%var82X input.dst.llvm-%n)))))
 ))
 (let (($x159 (and $x115 $x165)))
 (let (($x163 (= $x159 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x109 (concat ?x107 (concat ?x99 ?x108)))))
 (let (($x111 (= input.dst.llvm-%n ?x110)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x57 (concat ?x11 (concat ?x68 ?x94)))))
 (let (($x73 (= input.dst.llvm-%x ?x82)))
 (let (($x112 (and $x73 $x111)))
 (let (($x49 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x118 (and $x49 $x112)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x47)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x20)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x85)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x22 $x72)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x79 $x7)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x90 $x59)))
 (let (($x80 (not $x55)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x80)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x60 $x12)))
 (let (($x77 (not $x33)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x40 $x24)))
 (let (($x45 (and (not $x106) $x77)))
 (let (($x83 (and (and (and (and (and (and $x45 $x97) $x23) $x50) $x58) $x65) $x88)))
 (let (($x93 (and $x83 $x62)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x81)))
 (let (($x113 (or false (or false (and (and true (or $x86 $x42)) (or $x31 $x76))))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x113)))
 (let (($x126 (and (and (and $x27 true) $x93) $x118)))
 (let (($x133 (= $x126 true)))
 (let (($x136 (= $x133 true)))
 (let (($x154 (= $x136 true)))
 (let (($x127 (and $x154 $x163)))
 (let (($x193 (and $x127 $x157)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x121 (and $x25 $x193)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x147 (and $x36 $x121)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x162 (and $x10 $x147)))
 (let (($x141 (=> $x162 $x116)))
 (not $x141)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000e) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000000f)
                        (k!0 #x0000000e)
                        (k!0 #x0000000d)
                        (k!0 #x0000000c))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc982b100)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa9f1ae04)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x6b6b6b01)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xbf6bd700)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa9f1ae07)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc982b103)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa9f1ae04)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc982b100)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xbf6bd701) #x00
    (ite (= x!0 #xc982b100) #x01
    (ite (= x!0 #xbf6bd703) #x00
    (ite (= x!0 #xa9f1ae05) #xd7
    (ite (= x!0 #xbf6bd702) #x00
    (ite (= x!0 #xbf6bd700) #x00
    (ite (= x!0 #xa9f1ae07) #xbf
    (ite (= x!0 #xa9f1ae04) #x00
      #x6b)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x6b6b6b01 x!0)
         (ite (bvule #x6b6b6b02 x!0) #x6b6b6b02 #x6b6b6b01)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 ((_ extract 23 0) input.dst.llvm-%n)))
 (let ((?x200 (bvmul (_ bv256 24) ?x199)))
 (let ((?x120 ((_ extract 23 0) input.dst.llvm-%x)))
 (let ((?x140 (bvmul (_ bv47897 24) ?x120)))
 (let ((?x201 (bvadd ?x140 ?x200)))
 (let (($x202 (= (_ bv0 24) ?x201)))
 (let (($x203 (= $x202 true)))
 (let (($x196 (forall ((input.ind-%var117X (_ BitVec 32)) )(let ((?x123 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var117X)))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var117X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var117X)))
 (=> $x174 (= ?x148 ?x123))))))
 ))
 (let (($x138 (forall ((input.ind-%var116X (_ BitVec 32)) )(let (($x172 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var116X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var116X)))
 (= $x174 $x172))))
 ))
 (let (($x98 (and $x138 $x196)))
 (let (($x149 (= $x98 true)))
 (let (($x197 (forall ((input.ind-%var111X (_ BitVec 32)) )(let ((?x194 (bvadd (bvmul input.ind-%var111X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x119))))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var111X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var111X)))
 (=> $x174 (= ?x148 ?x192))))))))
 ))
 (let (($x150 (forall ((input.ind-%var110X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var110X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var110X) (bvult input.ind-%var110X input.dst.llvm-%n)))))
 ))
 (let (($x35 (and $x150 $x197)))
 (let (($x158 (= $x35 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x112 (concat ?x111 (concat ?x103 (concat ?x101 ?x104)))))
 (let (($x118 (= input.dst.llvm-%n ?x112)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x82 (concat ?x94 (concat ?x17 ?x57)))))
 (let (($x87 (= input.dst.llvm-%x ?x73)))
 (let (($x126 (and $x87 $x118)))
 (let (($x49 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x133 (and $x49 $x126)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x95)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x58)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x50 $x22)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x54 $x18)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x91 $x90)))
 (let (($x55 (not $x59)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x55)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x44 $x60)))
 (let (($x33 (not $x12)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x9 $x51)))
 (let (($x45 (and (not $x106) $x33)))
 (let (($x62 (and (and (and (and (and (and $x45 $x97) $x75) $x64) $x85) $x7) $x53)))
 (let (($x93 (and $x62 $x65)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x42)))
 (let (($x125 (or false (or false (and (and true (or $x32 $x39)) (or $x56 $x66))))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x153 (and (and (and $x24 true) $x93) $x133)))
 (let (($x156 (= $x153 true)))
 (let (($x135 (= $x156 true)))
 (let (($x61 (= $x135 true)))
 (let (($x167 (and $x61 $x158)))
 (let (($x160 (and $x167 $x149)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x96 $x160)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x131 (and $x117 $x191)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x170 (and $x26 $x131)))
 (let (($x204 (=> $x170 $x203)))
 (not $x204))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 ((_ extract 23 0) input.dst.llvm-%n)))
 (let ((?x200 (bvmul (_ bv256 24) ?x199)))
 (let ((?x120 ((_ extract 23 0) input.dst.llvm-%x)))
 (let ((?x140 (bvmul (_ bv47897 24) ?x120)))
 (let ((?x201 (bvadd ?x140 ?x200)))
 (let (($x202 (= (_ bv0 24) ?x201)))
 (let (($x203 (= $x202 true)))
 (let (($x196 (forall ((input.ind-%var117X (_ BitVec 32)) )(let ((?x123 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var117X)))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var117X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var117X)))
 (=> $x174 (= ?x148 ?x123))))))
 ))
 (let (($x138 (forall ((input.ind-%var116X (_ BitVec 32)) )(let (($x172 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var116X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var116X)))
 (= $x174 $x172))))
 ))
 (let (($x98 (and $x138 $x196)))
 (let (($x149 (= $x98 true)))
 (let (($x197 (forall ((input.ind-%var111X (_ BitVec 32)) )(let ((?x194 (bvadd (bvmul input.ind-%var111X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x119))))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var111X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var111X)))
 (=> $x174 (= ?x148 ?x192))))))))
 ))
 (let (($x150 (forall ((input.ind-%var110X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var110X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var110X) (bvult input.ind-%var110X input.dst.llvm-%n)))))
 ))
 (let (($x35 (and $x150 $x197)))
 (let (($x158 (= $x35 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x112 (concat ?x111 (concat ?x103 (concat ?x101 ?x104)))))
 (let (($x118 (= input.dst.llvm-%n ?x112)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x82 (concat ?x94 (concat ?x17 ?x57)))))
 (let (($x87 (= input.dst.llvm-%x ?x73)))
 (let (($x126 (and $x87 $x118)))
 (let (($x49 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x133 (and $x49 $x126)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x95)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x58)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x50 $x22)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x54 $x18)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x91 $x90)))
 (let (($x55 (not $x59)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x55)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x44 $x60)))
 (let (($x33 (not $x12)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x9 $x51)))
 (let (($x45 (and (not $x106) $x33)))
 (let (($x62 (and (and (and (and (and (and $x45 $x97) $x75) $x64) $x85) $x7) $x53)))
 (let (($x93 (and $x62 $x65)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x42)))
 (let (($x125 (or false (or false (and (and true (or $x32 $x39)) (or $x56 $x66))))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x153 (and (and (and $x24 true) $x93) $x133)))
 (let (($x156 (= $x153 true)))
 (let (($x135 (= $x156 true)))
 (let (($x61 (= $x135 true)))
 (let (($x167 (and $x61 $x158)))
 (let (($x160 (and $x167 $x149)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x96 $x160)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x131 (and $x117 $x191)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x170 (and $x26 $x131)))
 (let (($x204 (=> $x170 $x203)))
 (not $x204))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000803)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000800) #x04
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00000007)
                        (k!0 #x00000006)
                        (k!0 #x00000005)
                        (k!0 #x00000004))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80902854)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00402930)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xc5005010)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xc5000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00402933)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80902857)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00402930)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80902854)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80902855) #x50
    (ite (= x!0 #x00402932) #x00
    (ite (= x!0 #x80902854) #x10
    (ite (= x!0 #xc5000013) #x00
    (ite (= x!0 #xc5000011) #x00
    (ite (= x!0 #x80902856) #x00
    (ite (= x!0 #x00402931) #x00
    (ite (= x!0 #xc5000012) #x00
    (ite (= x!0 #xc5000010) #x00
    (ite (= x!0 #x00402930) #x10
      #xc5)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #xc5005010 x!0)
         (ite (bvule #xc5005011 x!0) #xc5005011 #xc5005010)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x19 (= (_ bv0 2) ?x92)))
 (let (($x121 (= $x19 true)))
 (let (($x189 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x157 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var145X)))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var145X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var145X)))
 (=> $x148 (= ?x164 ?x157))))))
 ))
 (let (($x175 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x151 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var144X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var144X)))
 (= $x148 $x151))))
 ))
 (let (($x161 (and $x175 $x189)))
 (let (($x193 (= $x161 true)))
 (let (($x43 (forall ((input.ind-%var139X (_ BitVec 32)) )(let ((?x139 (bvadd (bvmul input.ind-%var139X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem ?x139))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv2 32))) ?x178))))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var139X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var139X)))
 (=> $x148 (= ?x164 ?x204))))))))
 ))
 (let (($x116 (forall ((input.ind-%var138X (_ BitVec 32)) )(let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var138X)))
 (= $x148 (and (bvule (_ bv0 32) input.ind-%var138X) (bvult input.ind-%var138X input.dst.llvm-%n)))))
 ))
 (let (($x166 (and $x116 $x43)))
 (let (($x109 (= $x166 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x118 (concat ?x99 (concat ?x107 ?x108)))))
 (let (($x133 (= input.dst.llvm-%n ?x126)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x73 (concat ?x57 (concat ?x68 ?x82)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x153 (and $x102 $x133)))
 (let (($x49 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x156 (and $x49 $x153)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x72)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x85)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x54)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x64 $x50)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x23 $x78)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x80 $x91)))
 (let (($x59 (not $x90)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x59)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x77 $x44)))
 (let (($x12 (not $x60)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x81 $x40)))
 (let (($x45 (and (not $x106) $x12)))
 (let (($x65 (and (and (and (and (and (and $x45 $x97) $x67) $x20) $x79) $x18) $x83)))
 (let (($x93 (and $x65 $x7)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x39)))
 (let (($x136 (or false (or false (and (and true (or $x89 $x31)) (or $x41 $x113))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x136)))
 (let (($x115 (and (and (and $x51 true) $x93) $x156)))
 (let (($x174 (= $x115 true)))
 (let (($x5 (= $x174 true)))
 (let (($x171 (= $x5 true)))
 (let (($x16 (and $x171 $x109)))
 (let (($x144 (and $x16 $x193)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x195 (and $x25 $x144)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x132 (and $x10 $x195)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x124 $x132)))
 (let (($x129 (=> $x169 $x121)))
 (not $x129))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x19 (= (_ bv0 2) ?x92)))
 (let (($x121 (= $x19 true)))
 (let (($x189 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x157 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var145X)))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var145X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var145X)))
 (=> $x148 (= ?x164 ?x157))))))
 ))
 (let (($x175 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x151 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var144X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var144X)))
 (= $x148 $x151))))
 ))
 (let (($x161 (and $x175 $x189)))
 (let (($x193 (= $x161 true)))
 (let (($x43 (forall ((input.ind-%var139X (_ BitVec 32)) )(let ((?x139 (bvadd (bvmul input.ind-%var139X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem ?x139))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv2 32))) ?x178))))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var139X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var139X)))
 (=> $x148 (= ?x164 ?x204))))))))
 ))
 (let (($x116 (forall ((input.ind-%var138X (_ BitVec 32)) )(let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var138X)))
 (= $x148 (and (bvule (_ bv0 32) input.ind-%var138X) (bvult input.ind-%var138X input.dst.llvm-%n)))))
 ))
 (let (($x166 (and $x116 $x43)))
 (let (($x109 (= $x166 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x118 (concat ?x99 (concat ?x107 ?x108)))))
 (let (($x133 (= input.dst.llvm-%n ?x126)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x73 (concat ?x57 (concat ?x68 ?x82)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x153 (and $x102 $x133)))
 (let (($x49 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x156 (and $x49 $x153)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x72)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x85)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x54)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x64 $x50)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x23 $x78)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x80 $x91)))
 (let (($x59 (not $x90)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x59)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x77 $x44)))
 (let (($x12 (not $x60)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x81 $x40)))
 (let (($x45 (and (not $x106) $x12)))
 (let (($x65 (and (and (and (and (and (and $x45 $x97) $x67) $x20) $x79) $x18) $x83)))
 (let (($x93 (and $x65 $x7)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x39)))
 (let (($x136 (or false (or false (and (and true (or $x89 $x31)) (or $x41 $x113))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x136)))
 (let (($x115 (and (and (and $x51 true) $x93) $x156)))
 (let (($x174 (= $x115 true)))
 (let (($x5 (= $x174 true)))
 (let (($x171 (= $x5 true)))
 (let (($x16 (and $x171 $x109)))
 (let (($x144 (and $x16 $x193)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x195 (and $x25 $x144)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x132 (and $x10 $x195)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x124 $x132)))
 (let (($x129 (=> $x169 $x121)))
 (not $x129))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 116 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x128 (= $x131 true)))
 (let (($x163 (= $x128 true)))
 (let (($x142 (forall ((input.ind-%var157X (_ BitVec 32)) )(let ((?x123 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var157X)))
 (let ((?x204 (input.spec-%var-x-1.1.1 input.ind-%var157X)))
 (let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var157X)))
 (=> $x116 (= ?x204 ?x123))))))
 ))
 (let (($x186 (forall ((input.ind-%var156X (_ BitVec 32)) )(let (($x158 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var156X)))
 (let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var156X)))
 (= $x116 $x158))))
 ))
 (let (($x179 (and $x186 $x142)))
 (let (($x74 (= $x179 true)))
 (let (($x159 (forall ((input.ind-%var151X (_ BitVec 32)) )(let ((?x169 (bvadd (bvmul input.ind-%var151X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x121))))
 (let ((?x204 (input.spec-%var-x-1.1.1 input.ind-%var151X)))
 (let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var151X)))
 (=> $x116 (= ?x204 ?x70))))))))
 ))
 (let (($x140 (forall ((input.ind-%var150X (_ BitVec 32)) )(let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var150X)))
 (= $x116 (and (bvule (_ bv0 32) input.ind-%var150X) (bvult input.ind-%var150X input.dst.llvm-%n)))))
 ))
 (let (($x183 (and $x140 $x159)))
 (let (($x119 (= $x183 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x126 (concat ?x108 (concat ?x99 ?x118)))))
 (let (($x153 (= input.dst.llvm-%n ?x133)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x11 (concat ?x68 (concat ?x84 ?x71)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x156 (and $x102 $x153)))
 (let (($x38 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x115 (and $x38 $x156)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x22)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x79)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x20 $x64)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x75 $x88)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x55 $x80)))
 (let (($x90 (not $x91)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x90)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x33 $x77)))
 (let (($x60 (not $x44)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x42 $x9)))
 (let (($x45 (and (not $x106) $x60)))
 (let (($x7 (and (and (and (and (and (and $x45 $x97) $x28) $x58) $x54) $x78) $x62)))
 (let (($x93 (and $x7 $x18)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x135 (or false (or false (and (and true (or $x63 $x56)) (or $x27 $x125))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x135)))
 (let (($x171 (and (and (and $x40 true) $x93) $x115)))
 (let (($x150 (= $x171 true)))
 (let (($x148 (= $x150 true)))
 (let (($x69 (= $x148 true)))
 (let (($x192 (and $x69 $x119)))
 (let (($x190 (and $x192 $x74)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x117 $x190)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x176 (and $x48 $x191)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x146 (and $x197 $x176)))
 (let (($x187 (=> $x146 $x163)))
 (not $x187))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x128 (= $x131 true)))
 (let (($x163 (= $x128 true)))
 (let (($x142 (forall ((input.ind-%var157X (_ BitVec 32)) )(let ((?x123 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var157X)))
 (let ((?x204 (input.spec-%var-x-1.1.1 input.ind-%var157X)))
 (let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var157X)))
 (=> $x116 (= ?x204 ?x123))))))
 ))
 (let (($x186 (forall ((input.ind-%var156X (_ BitVec 32)) )(let (($x158 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var156X)))
 (let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var156X)))
 (= $x116 $x158))))
 ))
 (let (($x179 (and $x186 $x142)))
 (let (($x74 (= $x179 true)))
 (let (($x159 (forall ((input.ind-%var151X (_ BitVec 32)) )(let ((?x169 (bvadd (bvmul input.ind-%var151X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x121))))
 (let ((?x204 (input.spec-%var-x-1.1.1 input.ind-%var151X)))
 (let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var151X)))
 (=> $x116 (= ?x204 ?x70))))))))
 ))
 (let (($x140 (forall ((input.ind-%var150X (_ BitVec 32)) )(let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var150X)))
 (= $x116 (and (bvule (_ bv0 32) input.ind-%var150X) (bvult input.ind-%var150X input.dst.llvm-%n)))))
 ))
 (let (($x183 (and $x140 $x159)))
 (let (($x119 (= $x183 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x126 (concat ?x108 (concat ?x99 ?x118)))))
 (let (($x153 (= input.dst.llvm-%n ?x133)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x11 (concat ?x68 (concat ?x84 ?x71)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x156 (and $x102 $x153)))
 (let (($x38 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x115 (and $x38 $x156)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x22)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x79)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x20 $x64)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x75 $x88)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x55 $x80)))
 (let (($x90 (not $x91)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x90)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x33 $x77)))
 (let (($x60 (not $x44)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x42 $x9)))
 (let (($x45 (and (not $x106) $x60)))
 (let (($x7 (and (and (and (and (and (and $x45 $x97) $x28) $x58) $x54) $x78) $x62)))
 (let (($x93 (and $x7 $x18)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x135 (or false (or false (and (and true (or $x63 $x56)) (or $x27 $x125))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x135)))
 (let (($x171 (and (and (and $x40 true) $x93) $x115)))
 (let (($x150 (= $x171 true)))
 (let (($x148 (= $x150 true)))
 (let (($x69 (= $x148 true)))
 (let (($x192 (and $x69 $x119)))
 (let (($x190 (and $x192 $x74)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x117 $x190)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x176 (and $x48 $x191)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x146 (and $x197 $x176)))
 (let (($x187 (=> $x146 $x163)))
 (not $x187))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x00
      #xff))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000000f)
                        (k!0 #x0000000e)
                        (k!0 #x0000000d)
                        (k!0 #x0000000c))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd3197c74)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff596d7c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xfdfefe00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff596d7f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd3197c77)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff596d7c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd3197c74)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd3197c75) #xff
    (ite (= x!0 #xd3197c74) #xff
    (ite (= x!0 #xfdfefe03) #x00
    (ite (= x!0 #xd3197c77) #xff
    (ite (= x!0 #xfdfefe01) #x00
    (ite (= x!0 #xd3197c76) #xff
    (ite (= x!0 #xfdfefe02) #x00
    (ite (= x!0 #xfdfefe00) #x00
    (ite (= x!0 #xff596d7f) #xfd
    (ite (= x!0 #xff596d7c) #x00
      #xfe)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x178 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x195 (= $x178 true)))
 (let (($x160 (= $x195 true)))
 (let (($x172 (forall ((input.ind-%var185X (_ BitVec 32)) )(let ((?x175 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var185X)))
 (let ((?x70 (input.spec-%var-x-1.1.1 input.ind-%var185X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var185X)))
 (=> $x140 (= ?x70 ?x175))))))
 ))
 (let (($x157 (forall ((input.ind-%var184X (_ BitVec 32)) )(let (($x166 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var184X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var184X)))
 (= $x140 $x166))))
 ))
 (let (($x141 (and $x157 $x172)))
 (let (($x139 (= $x141 true)))
 (let (($x164 (forall ((input.ind-%var179X (_ BitVec 32)) )(let ((?x146 (bvadd (bvmul input.ind-%var179X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x163))))
 (let ((?x70 (input.spec-%var-x-1.1.1 input.ind-%var179X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var179X)))
 (=> $x140 (= ?x70 ?x14))))))))
 ))
 (let (($x19 (forall ((input.ind-%var178X (_ BitVec 32)) )(let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var178X)))
 (= $x140 (and (bvule (_ bv0 32) input.ind-%var178X) (bvult input.ind-%var178X input.dst.llvm-%n)))))
 ))
 (let (($x205 (and $x19 $x164)))
 (let (($x182 (= $x205 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x153 (concat ?x133 (concat ?x118 (concat ?x108 ?x126)))))
 (let (($x156 (= input.dst.llvm-%n ?x153)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x82 (concat ?x84 (concat ?x57 ?x94)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x115 (and $x102 $x156)))
 (let (($x37 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x171 (and $x37 $x115)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x50)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x54)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x58 $x20)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x67 $x53)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x59 $x55)))
 (let (($x91 (not $x80)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x91)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x12 $x33)))
 (let (($x44 (not $x77)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x39 $x81)))
 (let (($x45 (and (not $x106) $x44)))
 (let (($x18 (and (and (and (and (and (and $x45 $x97) $x47) $x85) $x23) $x88) $x65)))
 (let (($x93 (and $x18 $x78)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x174 (or false (or false (and (and true (or $x76 $x41)) (or $x24 $x136))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x174)))
 (let (($x69 (and (and (and $x9 true) $x93) $x171)))
 (let (($x122 (= $x69 true)))
 (let (($x116 (= $x122 true)))
 (let (($x199 (= $x116 true)))
 (let (($x201 (and $x199 $x182)))
 (let (($x202 (and $x201 $x139)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x144 (and $x10 $x202)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x162 (and $x26 $x144)))
 (let (($x165 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x165 $x162)))
 (let (($x180 (=> $x98 $x160)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x178 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x195 (= $x178 true)))
 (let (($x160 (= $x195 true)))
 (let (($x172 (forall ((input.ind-%var185X (_ BitVec 32)) )(let ((?x175 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var185X)))
 (let ((?x70 (input.spec-%var-x-1.1.1 input.ind-%var185X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var185X)))
 (=> $x140 (= ?x70 ?x175))))))
 ))
 (let (($x157 (forall ((input.ind-%var184X (_ BitVec 32)) )(let (($x166 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var184X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var184X)))
 (= $x140 $x166))))
 ))
 (let (($x141 (and $x157 $x172)))
 (let (($x139 (= $x141 true)))
 (let (($x164 (forall ((input.ind-%var179X (_ BitVec 32)) )(let ((?x146 (bvadd (bvmul input.ind-%var179X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x163))))
 (let ((?x70 (input.spec-%var-x-1.1.1 input.ind-%var179X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var179X)))
 (=> $x140 (= ?x70 ?x14))))))))
 ))
 (let (($x19 (forall ((input.ind-%var178X (_ BitVec 32)) )(let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var178X)))
 (= $x140 (and (bvule (_ bv0 32) input.ind-%var178X) (bvult input.ind-%var178X input.dst.llvm-%n)))))
 ))
 (let (($x205 (and $x19 $x164)))
 (let (($x182 (= $x205 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x153 (concat ?x133 (concat ?x118 (concat ?x108 ?x126)))))
 (let (($x156 (= input.dst.llvm-%n ?x153)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x82 (concat ?x84 (concat ?x57 ?x94)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x115 (and $x102 $x156)))
 (let (($x37 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x171 (and $x37 $x115)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x50)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x54)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x58 $x20)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x67 $x53)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x59 $x55)))
 (let (($x91 (not $x80)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x91)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x12 $x33)))
 (let (($x44 (not $x77)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x39 $x81)))
 (let (($x45 (and (not $x106) $x44)))
 (let (($x18 (and (and (and (and (and (and $x45 $x97) $x47) $x85) $x23) $x88) $x65)))
 (let (($x93 (and $x18 $x78)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x174 (or false (or false (and (and true (or $x76 $x41)) (or $x24 $x136))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x174)))
 (let (($x69 (and (and (and $x9 true) $x93) $x171)))
 (let (($x122 (= $x69 true)))
 (let (($x116 (= $x122 true)))
 (let (($x199 (= $x116 true)))
 (let (($x201 (and $x199 $x182)))
 (let (($x202 (and $x201 $x139)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x144 (and $x10 $x202)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x162 (and $x26 $x144)))
 (let (($x165 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x165 $x162)))
 (let (($x180 (=> $x98 $x160)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x219 (forall ((input.ind-%var203X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var203X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x180))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var203X)))
 (let (($x19 (input.spec-%var-x-1.0.1 input.ind-%var203X)))
 (=> $x19 (= ?x14 ?x109))))))))
 ))
 (let (($x147 (forall ((input.ind-%var202X (_ BitVec 32)) )(let (($x19 (input.spec-%var-x-1.0.1 input.ind-%var202X)))
 (= $x19 (and (bvule (_ bv0 32) input.ind-%var202X) (bvult input.ind-%var202X input.dst.llvm-%n)))))
 ))
 (let (($x220 (and $x147 $x219)))
 (let (($x191 (= true true)))
 (let (($x221 (and $x191 $x220)))
 (let (($x222 (= $x221 true)))
 (let (($x200 (forall ((input.ind-%var197X (_ BitVec 32)) )(let ((?x134 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var197X)))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var197X)))
 (let (($x19 (input.spec-%var-x-1.0.1 input.ind-%var197X)))
 (=> $x19 (= ?x14 ?x134))))))
 ))
 (let (($x181 (forall ((input.ind-%var196X (_ BitVec 32)) )(let (($x119 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var196X)))
 (let (($x19 (input.spec-%var-x-1.0.1 input.ind-%var196X)))
 (= $x19 $x119))))
 ))
 (let (($x169 (and $x181 $x200)))
 (let (($x15 (= $x169 true)))
 (let (($x185 (forall ((input.ind-%var191X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var191X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x180))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var191X)))
 (let (($x19 (input.spec-%var-x-1.0.1 input.ind-%var191X)))
 (=> $x19 (= ?x14 ?x109))))))))
 ))
 (let (($x128 (forall ((input.ind-%var190X (_ BitVec 32)) )(let (($x19 (input.spec-%var-x-1.0.1 input.ind-%var190X)))
 (= $x19 (and (bvule (_ bv0 32) input.ind-%var190X) (bvult input.ind-%var190X input.dst.llvm-%n)))))
 ))
 (let (($x198 (and $x128 $x185)))
 (let (($x96 (= $x198 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x153 (concat ?x126 (concat ?x118 ?x133)))))
 (let (($x115 (= input.dst.llvm-%n ?x156)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x71 (concat ?x57 (concat ?x68 ?x17)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x171 (and $x102 $x115)))
 (let (($x154 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x69 (and $x154 $x171)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x64)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x23)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x67)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x85 $x58)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x28 $x83)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x90 $x59)))
 (let (($x80 (not $x55)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x80)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x60 $x12)))
 (let (($x77 (not $x33)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x31 $x42)))
 (let (($x45 (and (not $x106) $x77)))
 (let (($x78 (and (and (and (and (and (and $x45 $x97) $x95) $x79) $x75) $x53) $x7)))
 (let (($x93 (and $x78 $x88)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x150 (or false (or false (and (and true (or $x66 $x27)) (or $x51 $x135))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x150)))
 (let (($x199 (and (and (and $x81 true) $x93) $x69)))
 (let (($x120 (= $x199 true)))
 (let (($x140 (= $x120 true)))
 (let (($x129 (= $x140 true)))
 (let (($x203 (and $x129 $x96)))
 (let (($x190 (and $x203 $x15)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x35 (and $x48 $x190)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x189 (and $x124 $x35)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x121 (and $x36 $x189)))
 (let (($x223 (=> $x121 $x222)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x219 (forall ((input.ind-%var203X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var203X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x180))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var203X)))
 (let (($x19 (input.spec-%var-x-1.0.1 input.ind-%var203X)))
 (=> $x19 (= ?x14 ?x109))))))))
 ))
 (let (($x147 (forall ((input.ind-%var202X (_ BitVec 32)) )(let (($x19 (input.spec-%var-x-1.0.1 input.ind-%var202X)))
 (= $x19 (and (bvule (_ bv0 32) input.ind-%var202X) (bvult input.ind-%var202X input.dst.llvm-%n)))))
 ))
 (let (($x220 (and $x147 $x219)))
 (let (($x191 (= true true)))
 (let (($x221 (and $x191 $x220)))
 (let (($x222 (= $x221 true)))
 (let (($x200 (forall ((input.ind-%var197X (_ BitVec 32)) )(let ((?x134 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var197X)))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var197X)))
 (let (($x19 (input.spec-%var-x-1.0.1 input.ind-%var197X)))
 (=> $x19 (= ?x14 ?x134))))))
 ))
 (let (($x181 (forall ((input.ind-%var196X (_ BitVec 32)) )(let (($x119 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var196X)))
 (let (($x19 (input.spec-%var-x-1.0.1 input.ind-%var196X)))
 (= $x19 $x119))))
 ))
 (let (($x169 (and $x181 $x200)))
 (let (($x15 (= $x169 true)))
 (let (($x185 (forall ((input.ind-%var191X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var191X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x180))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var191X)))
 (let (($x19 (input.spec-%var-x-1.0.1 input.ind-%var191X)))
 (=> $x19 (= ?x14 ?x109))))))))
 ))
 (let (($x128 (forall ((input.ind-%var190X (_ BitVec 32)) )(let (($x19 (input.spec-%var-x-1.0.1 input.ind-%var190X)))
 (= $x19 (and (bvule (_ bv0 32) input.ind-%var190X) (bvult input.ind-%var190X input.dst.llvm-%n)))))
 ))
 (let (($x198 (and $x128 $x185)))
 (let (($x96 (= $x198 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x153 (concat ?x126 (concat ?x118 ?x133)))))
 (let (($x115 (= input.dst.llvm-%n ?x156)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x71 (concat ?x57 (concat ?x68 ?x17)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x171 (and $x102 $x115)))
 (let (($x154 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x69 (and $x154 $x171)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x64)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x23)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x67)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x85 $x58)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x28 $x83)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x90 $x59)))
 (let (($x80 (not $x55)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x80)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x60 $x12)))
 (let (($x77 (not $x33)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x31 $x42)))
 (let (($x45 (and (not $x106) $x77)))
 (let (($x78 (and (and (and (and (and (and $x45 $x97) $x95) $x79) $x75) $x53) $x7)))
 (let (($x93 (and $x78 $x88)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x150 (or false (or false (and (and true (or $x66 $x27)) (or $x51 $x135))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x150)))
 (let (($x199 (and (and (and $x81 true) $x93) $x69)))
 (let (($x120 (= $x199 true)))
 (let (($x140 (= $x120 true)))
 (let (($x129 (= $x140 true)))
 (let (($x203 (and $x129 $x96)))
 (let (($x190 (and $x203 $x15)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x35 (and $x48 $x190)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x189 (and $x124 $x35)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x121 (and $x36 $x189)))
 (let (($x223 (=> $x121 $x222)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x114 (forall ((input.ind-%var225X (_ BitVec 32)) )(let ((?x121 (bvadd (bvmul input.ind-%var225X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem ?x121))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv2 32))) ?x220))))
 (let ((?x109 (input.spec-%var-x-1.1.1 input.ind-%var225X)))
 (let (($x128 (input.spec-%var-x-1.0.1 input.ind-%var225X)))
 (=> $x128 (= ?x109 ?x89))))))))
 ))
 (let (($x208 (forall ((input.ind-%var224X (_ BitVec 32)) )(let (($x128 (input.spec-%var-x-1.0.1 input.ind-%var224X)))
 (= $x128 (and (bvule (_ bv0 32) input.ind-%var224X) (bvult input.ind-%var224X (_ bv0 32))))))
 ))
 (let (($x218 (and $x208 $x114)))
 (let (($x193 (= true true)))
 (let (($x188 (and $x193 $x218)))
 (let (($x225 (= $x188 true)))
 (let (($x192 (forall ((input.ind-%var219X (_ BitVec 32)) )(let ((?x166 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var219X)))
 (let ((?x109 (input.spec-%var-x-1.1.1 input.ind-%var219X)))
 (let (($x128 (input.spec-%var-x-1.0.1 input.ind-%var219X)))
 (=> $x128 (= ?x109 ?x166))))))
 ))
 (let (($x182 (forall ((input.ind-%var218X (_ BitVec 32)) )(let (($x111 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var218X)))
 (let (($x128 (input.spec-%var-x-1.0.1 input.ind-%var218X)))
 (= $x128 $x111))))
 ))
 (let (($x43 (and $x182 $x192)))
 (let (($x183 (= $x43 true)))
 (let (($x142 (forall ((input.ind-%var213X (_ BitVec 32)) )(let ((?x121 (bvadd (bvmul input.ind-%var213X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem ?x121))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv2 32))) ?x220))))
 (let ((?x109 (input.spec-%var-x-1.1.1 input.ind-%var213X)))
 (let (($x128 (input.spec-%var-x-1.0.1 input.ind-%var213X)))
 (=> $x128 (= ?x109 ?x89))))))))
 ))
 (let (($x160 (forall ((input.ind-%var212X (_ BitVec 32)) )(let (($x128 (input.spec-%var-x-1.0.1 input.ind-%var212X)))
 (= $x128 (and (bvule (_ bv0 32) input.ind-%var212X) (bvult input.ind-%var212X input.dst.llvm-%n)))))
 ))
 (let (($x74 (and $x160 $x142)))
 (let (($x70 (= $x74 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x156 (concat ?x133 (concat ?x126 ?x153)))))
 (let (($x171 (= input.dst.llvm-%n ?x115)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x94 (concat ?x68 (concat ?x84 ?x13)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x69 (and $x102 $x171)))
 (let (($x61 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x199 (and $x61 $x69)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x20)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x75)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x28)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (and $x79 $x85)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x47 $x62)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x91 $x90)))
 (let (($x55 (not $x59)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x55)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x44 $x60)))
 (let (($x33 (not $x12)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x56 $x39)))
 (let (($x45 (and (not $x106) $x33)))
 (let (($x88 (and (and (and (and (and (and $x45 $x97) $x72) $x54) $x67) $x83) $x18)))
 (let (($x93 (and $x88 $x53)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x27)))
 (let (($x122 (or false (or false (and (and true (or $x113 $x24)) (or $x40 $x174))))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x122)))
 (let (($x129 (and (and (and $x42 true) $x93) $x199)))
 (let (($x92 (= $x129 true)))
 (let (($x19 (= $x92 true)))
 (let (($x187 (= $x19 true)))
 (let (($x167 (and $x187 $x70)))
 (let (($x186 (and $x167 $x183)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x168 (and $x26 $x186)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x145 (and $x196 $x168)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x146 (and $x6 $x145)))
 (let (($x226 (=> $x146 $x225)))
 (not $x226)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x114 (forall ((input.ind-%var225X (_ BitVec 32)) )(let ((?x121 (bvadd (bvmul input.ind-%var225X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem ?x121))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv2 32))) ?x220))))
 (let ((?x109 (input.spec-%var-x-1.1.1 input.ind-%var225X)))
 (let (($x128 (input.spec-%var-x-1.0.1 input.ind-%var225X)))
 (=> $x128 (= ?x109 ?x89))))))))
 ))
 (let (($x208 (forall ((input.ind-%var224X (_ BitVec 32)) )(let (($x128 (input.spec-%var-x-1.0.1 input.ind-%var224X)))
 (= $x128 (and (bvule (_ bv0 32) input.ind-%var224X) (bvult input.ind-%var224X (_ bv0 32))))))
 ))
 (let (($x218 (and $x208 $x114)))
 (let (($x193 (= true true)))
 (let (($x188 (and $x193 $x218)))
 (let (($x225 (= $x188 true)))
 (let (($x192 (forall ((input.ind-%var219X (_ BitVec 32)) )(let ((?x166 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var219X)))
 (let ((?x109 (input.spec-%var-x-1.1.1 input.ind-%var219X)))
 (let (($x128 (input.spec-%var-x-1.0.1 input.ind-%var219X)))
 (=> $x128 (= ?x109 ?x166))))))
 ))
 (let (($x182 (forall ((input.ind-%var218X (_ BitVec 32)) )(let (($x111 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var218X)))
 (let (($x128 (input.spec-%var-x-1.0.1 input.ind-%var218X)))
 (= $x128 $x111))))
 ))
 (let (($x43 (and $x182 $x192)))
 (let (($x183 (= $x43 true)))
 (let (($x142 (forall ((input.ind-%var213X (_ BitVec 32)) )(let ((?x121 (bvadd (bvmul input.ind-%var213X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem ?x121))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv2 32))) ?x220))))
 (let ((?x109 (input.spec-%var-x-1.1.1 input.ind-%var213X)))
 (let (($x128 (input.spec-%var-x-1.0.1 input.ind-%var213X)))
 (=> $x128 (= ?x109 ?x89))))))))
 ))
 (let (($x160 (forall ((input.ind-%var212X (_ BitVec 32)) )(let (($x128 (input.spec-%var-x-1.0.1 input.ind-%var212X)))
 (= $x128 (and (bvule (_ bv0 32) input.ind-%var212X) (bvult input.ind-%var212X input.dst.llvm-%n)))))
 ))
 (let (($x74 (and $x160 $x142)))
 (let (($x70 (= $x74 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x156 (concat ?x133 (concat ?x126 ?x153)))))
 (let (($x171 (= input.dst.llvm-%n ?x115)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x94 (concat ?x68 (concat ?x84 ?x13)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x69 (and $x102 $x171)))
 (let (($x61 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x199 (and $x61 $x69)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x20)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x75)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x28)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (and $x79 $x85)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x47 $x62)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x91 $x90)))
 (let (($x55 (not $x59)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x55)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x44 $x60)))
 (let (($x33 (not $x12)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x56 $x39)))
 (let (($x45 (and (not $x106) $x33)))
 (let (($x88 (and (and (and (and (and (and $x45 $x97) $x72) $x54) $x67) $x83) $x18)))
 (let (($x93 (and $x88 $x53)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x27)))
 (let (($x122 (or false (or false (and (and true (or $x113 $x24)) (or $x40 $x174))))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x122)))
 (let (($x129 (and (and (and $x42 true) $x93) $x199)))
 (let (($x92 (= $x129 true)))
 (let (($x19 (= $x92 true)))
 (let (($x187 (= $x19 true)))
 (let (($x167 (and $x187 $x70)))
 (let (($x186 (and $x167 $x183)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x168 (and $x26 $x186)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x145 (and $x196 $x168)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x146 (and $x6 $x145)))
 (let (($x226 (=> $x146 $x225)))
 (not $x226)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var224X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.ind-%var225X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #xfc
    (ite (= x!0 #x0000000b) #x02
    (ite (= x!0 #x0000000a) #xff
    (ite (= x!0 #x00000008) #xc9
    (ite (= x!0 #x00000009) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x0000000b)
                          (k!2 #x0000000a)
                          (k!2 #x00000009)
                          (k!2 #x00000008))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var225X!1 () (_ BitVec 32)
    #x0dcb14c4)
  (define-fun input.ind-%var224X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x07631505)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0c110cc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb6b1007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2dbb0043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2dbb0041) #x15
    (ite (= x!0 #xfb6b1006) #x11
    (ite (= x!0 #x2dbb0040) #x05
    (ite (= x!0 #x2dbb0043) #x07
    (ite (= x!0 #x0c110cc3) #x00
    (ite (= x!0 #x2dbb0042) #x63
    (ite (= x!0 #x0c110cc2) #x00
    (ite (= x!0 #x0c110cc1) #x00
    (ite (= x!0 #x0c110cc0) #x00
    (ite (= x!0 #xfb6b1004) #xc0
      #x0c)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x07631505 x!0)
         (ite (bvule #x07631506 x!0)
              (ite (bvule #x0dcb14c4 x!0) #x0dcb14c4 #x07631506)
              #x07631505)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0dcb14c4) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x141 (forall ((input.ind-%var259X (_ BitVec 32)) )(let ((?x146 (bvadd (bvmul input.ind-%var259X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x212))))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var259X)))
 (let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var259X)))
 (=> $x160 (= ?x89 ?x226))))))))
 ))
 (let (($x30 (forall ((input.ind-%var258X (_ BitVec 32)) )(let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var258X)))
 (= $x160 (and (bvule (_ bv0 32) input.ind-%var258X) (bvult input.ind-%var258X (_ bv0 32))))))
 ))
 (let (($x157 (and $x30 $x141)))
 (let (($x210 (= true true)))
 (let (($x29 (and $x210 $x157)))
 (let (($x207 (= $x29 true)))
 (let (($x181 (forall ((input.ind-%var253X (_ BitVec 32)) )(let ((?x169 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var253X)))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var253X)))
 (let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var253X)))
 (=> $x160 (= ?x89 ?x169))))))
 ))
 (let (($x164 (forall ((input.ind-%var252X (_ BitVec 32)) )(let (($x172 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var252X)))
 (let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var252X)))
 (= $x160 $x172))))
 ))
 (let (($x16 (and $x164 $x181)))
 (let (($x15 (= $x16 true)))
 (let (($x63 (forall ((input.ind-%var247X (_ BitVec 32)) )(let ((?x146 (bvadd (bvmul input.ind-%var247X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x212))))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var247X)))
 (let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var247X)))
 (=> $x160 (= ?x89 ?x226))))))))
 ))
 (let (($x219 (forall ((input.ind-%var246X (_ BitVec 32)) )(let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var246X)))
 (= $x160 (and (bvule (_ bv0 32) input.ind-%var246X) (bvult input.ind-%var246X input.dst.llvm-%n)))))
 ))
 (let (($x103 (and $x219 $x63)))
 (let (($x37 (= $x103 true)))
 (let ((?x156 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x115 (concat ?x153 (concat ?x133 ?x156)))))
 (let (($x69 (= input.dst.llvm-%n ?x171)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x17 (concat ?x84 (concat ?x57 ?x73)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x199 (and $x102 $x69)))
 (let (($x5 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x129 (and $x5 $x199)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x58)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x67)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x54 $x79)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x95 $x65)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x80 $x91)))
 (let (($x59 (not $x90)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x59)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x77 $x44)))
 (let (($x12 (not $x60)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x41 $x31)))
 (let (($x45 (and (not $x106) $x12)))
 (let (($x53 (and (and (and (and (and (and $x45 $x97) $x22) $x23) $x28) $x62) $x78)))
 (let (($x93 (and $x53 $x83)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x120 (or false (or false (and (and true (or $x125 $x51)) (or $x9 $x150))))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x120)))
 (let (($x187 (and (and (and $x39 true) $x93) $x129)))
 (let (($x131 (= $x187 true)))
 (let (($x128 (= $x131 true)))
 (let (($x127 (= $x128 true)))
 (let (($x159 (and $x127 $x37)))
 (let (($x175 (and $x159 $x15)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x158 (and $x124 $x175)))
 (let (($x165 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x25 (and $x165 $x158)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x184 (and $x137 $x25)))
 (let (($x217 (=> $x184 $x207)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x141 (forall ((input.ind-%var259X (_ BitVec 32)) )(let ((?x146 (bvadd (bvmul input.ind-%var259X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x212))))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var259X)))
 (let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var259X)))
 (=> $x160 (= ?x89 ?x226))))))))
 ))
 (let (($x30 (forall ((input.ind-%var258X (_ BitVec 32)) )(let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var258X)))
 (= $x160 (and (bvule (_ bv0 32) input.ind-%var258X) (bvult input.ind-%var258X (_ bv0 32))))))
 ))
 (let (($x157 (and $x30 $x141)))
 (let (($x210 (= true true)))
 (let (($x29 (and $x210 $x157)))
 (let (($x207 (= $x29 true)))
 (let (($x181 (forall ((input.ind-%var253X (_ BitVec 32)) )(let ((?x169 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var253X)))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var253X)))
 (let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var253X)))
 (=> $x160 (= ?x89 ?x169))))))
 ))
 (let (($x164 (forall ((input.ind-%var252X (_ BitVec 32)) )(let (($x172 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var252X)))
 (let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var252X)))
 (= $x160 $x172))))
 ))
 (let (($x16 (and $x164 $x181)))
 (let (($x15 (= $x16 true)))
 (let (($x63 (forall ((input.ind-%var247X (_ BitVec 32)) )(let ((?x146 (bvadd (bvmul input.ind-%var247X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x212))))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var247X)))
 (let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var247X)))
 (=> $x160 (= ?x89 ?x226))))))))
 ))
 (let (($x219 (forall ((input.ind-%var246X (_ BitVec 32)) )(let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var246X)))
 (= $x160 (and (bvule (_ bv0 32) input.ind-%var246X) (bvult input.ind-%var246X input.dst.llvm-%n)))))
 ))
 (let (($x103 (and $x219 $x63)))
 (let (($x37 (= $x103 true)))
 (let ((?x156 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x115 (concat ?x153 (concat ?x133 ?x156)))))
 (let (($x69 (= input.dst.llvm-%n ?x171)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x17 (concat ?x84 (concat ?x57 ?x73)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x199 (and $x102 $x69)))
 (let (($x5 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x129 (and $x5 $x199)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x58)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x67)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x54 $x79)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x95 $x65)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x80 $x91)))
 (let (($x59 (not $x90)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x59)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x77 $x44)))
 (let (($x12 (not $x60)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x41 $x31)))
 (let (($x45 (and (not $x106) $x12)))
 (let (($x53 (and (and (and (and (and (and $x45 $x97) $x22) $x23) $x28) $x62) $x78)))
 (let (($x93 (and $x53 $x83)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x120 (or false (or false (and (and true (or $x125 $x51)) (or $x9 $x150))))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x120)))
 (let (($x187 (and (and (and $x39 true) $x93) $x129)))
 (let (($x131 (= $x187 true)))
 (let (($x128 (= $x131 true)))
 (let (($x127 (= $x128 true)))
 (let (($x159 (and $x127 $x37)))
 (let (($x175 (and $x159 $x15)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x158 (and $x124 $x175)))
 (let (($x165 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x25 (and $x165 $x158)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x184 (and $x137 $x25)))
 (let (($x217 (=> $x184 $x207)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var259X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.ind-%var258X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #xfc
    (ite (= x!0 #x0000000b) #x02
    (ite (= x!0 #x0000000a) #xff
    (ite (= x!0 #x00000008) #xc9
    (ite (= x!0 #x00000009) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x0000000b)
                          (k!2 #x0000000a)
                          (k!2 #x00000009)
                          (k!2 #x00000008))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var258X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.ind-%var259X!1 () (_ BitVec 32)
    #x0dcb14c4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x07631505)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0c110cc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb6b1007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2dbb0043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2dbb0041) #x15
    (ite (= x!0 #xfb6b1006) #x11
    (ite (= x!0 #x2dbb0040) #x05
    (ite (= x!0 #x0c110cc3) #x00
    (ite (= x!0 #x2dbb0043) #x07
    (ite (= x!0 #x0c110cc2) #x00
    (ite (= x!0 #x2dbb0042) #x63
    (ite (= x!0 #x0c110cc1) #x00
    (ite (= x!0 #x0c110cc0) #x00
    (ite (= x!0 #xfb6b1004) #xc0
      #x0c)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x07631505 x!0)
         (ite (bvule #x07631506 x!0)
              (ite (bvule #x0dcb14c4 x!0) #x0dcb14c4 #x07631506)
              #x07631505)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0dcb14c4) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x198 (forall ((input.ind-%var293X (_ BitVec 32)) )(let ((?x184 (bvadd (bvmul input.ind-%var293X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem ?x184))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv2 32))) ?x34))))
 (let ((?x226 (input.spec-%var-x-1.1.1 input.ind-%var293X)))
 (let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var293X)))
 (=> $x219 (= ?x226 ?x217))))))))
 ))
 (let (($x180 (forall ((input.ind-%var292X (_ BitVec 32)) )(let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var292X)))
 (= $x219 (and (bvule (_ bv0 32) input.ind-%var292X) (bvult input.ind-%var292X (_ bv0 32))))))
 ))
 (let (($x119 (and $x180 $x198)))
 (let (($x202 (= true true)))
 (let (($x201 (and $x202 $x119)))
 (let (($x163 (= $x201 true)))
 (let (($x182 (forall ((input.ind-%var287X (_ BitVec 32)) )(let ((?x43 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var287X)))
 (let ((?x226 (input.spec-%var-x-1.1.1 input.ind-%var287X)))
 (let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var287X)))
 (=> $x219 (= ?x226 ?x43))))))
 ))
 (let (($x185 (forall ((input.ind-%var286X (_ BitVec 32)) )(let (($x162 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var286X)))
 (let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var286X)))
 (= $x219 $x162))))
 ))
 (let (($x139 (and $x185 $x182)))
 (let (($x183 (= $x139 true)))
 (let (($x76 (forall ((input.ind-%var281X (_ BitVec 32)) )(let ((?x184 (bvadd (bvmul input.ind-%var281X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem ?x184))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv2 32))) ?x34))))
 (let ((?x226 (input.spec-%var-x-1.1.1 input.ind-%var281X)))
 (let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var281X)))
 (=> $x219 (= ?x226 ?x217))))))))
 ))
 (let (($x211 (forall ((input.ind-%var280X (_ BitVec 32)) )(let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var280X)))
 (= $x219 (and (bvule (_ bv0 32) input.ind-%var280X) (bvult input.ind-%var280X input.dst.llvm-%n)))))
 ))
 (let (($x104 (and $x211 $x76)))
 (let (($x154 (= $x104 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x171 (concat ?x156 (concat ?x153 ?x115)))))
 (let (($x199 (= input.dst.llvm-%n ?x69)))
 (let ((?x11 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x13 (concat ?x57 (concat ?x68 ?x11)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x129 (and $x102 $x199)))
 (let (($x148 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x187 (and $x148 $x129)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x85)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x28)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x23 $x54)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x72 $x7)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x55 $x80)))
 (let (($x90 (not $x91)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x90)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x33 $x77)))
 (let (($x60 (not $x44)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x27 $x56)))
 (let (($x45 (and (not $x106) $x60)))
 (let (($x83 (and (and (and (and (and (and $x45 $x97) $x50) $x75) $x47) $x65) $x88)))
 (let (($x93 (and $x83 $x62)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x92 (or false (or false (and (and true (or $x136 $x40)) (or $x81 $x122))))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x92)))
 (let (($x127 (and (and (and $x31 true) $x93) $x187)))
 (let (($x195 (= $x127 true)))
 (let (($x160 (= $x195 true)))
 (let (($x221 (= $x160 true)))
 (let (($x178 (and $x221 $x154)))
 (let (($x96 (and $x178 $x183)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x161 (and $x196 $x96)))
 (let (($x197 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x173 (and $x197 $x161)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x200 (and $x36 $x173)))
 (let (($x214 (=> $x200 $x163)))
 (not $x214)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x198 (forall ((input.ind-%var293X (_ BitVec 32)) )(let ((?x184 (bvadd (bvmul input.ind-%var293X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem ?x184))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv2 32))) ?x34))))
 (let ((?x226 (input.spec-%var-x-1.1.1 input.ind-%var293X)))
 (let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var293X)))
 (=> $x219 (= ?x226 ?x217))))))))
 ))
 (let (($x180 (forall ((input.ind-%var292X (_ BitVec 32)) )(let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var292X)))
 (= $x219 (and (bvule (_ bv0 32) input.ind-%var292X) (bvult input.ind-%var292X (_ bv0 32))))))
 ))
 (let (($x119 (and $x180 $x198)))
 (let (($x202 (= true true)))
 (let (($x201 (and $x202 $x119)))
 (let (($x163 (= $x201 true)))
 (let (($x182 (forall ((input.ind-%var287X (_ BitVec 32)) )(let ((?x43 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var287X)))
 (let ((?x226 (input.spec-%var-x-1.1.1 input.ind-%var287X)))
 (let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var287X)))
 (=> $x219 (= ?x226 ?x43))))))
 ))
 (let (($x185 (forall ((input.ind-%var286X (_ BitVec 32)) )(let (($x162 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var286X)))
 (let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var286X)))
 (= $x219 $x162))))
 ))
 (let (($x139 (and $x185 $x182)))
 (let (($x183 (= $x139 true)))
 (let (($x76 (forall ((input.ind-%var281X (_ BitVec 32)) )(let ((?x184 (bvadd (bvmul input.ind-%var281X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem ?x184))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv2 32))) ?x34))))
 (let ((?x226 (input.spec-%var-x-1.1.1 input.ind-%var281X)))
 (let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var281X)))
 (=> $x219 (= ?x226 ?x217))))))))
 ))
 (let (($x211 (forall ((input.ind-%var280X (_ BitVec 32)) )(let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var280X)))
 (= $x219 (and (bvule (_ bv0 32) input.ind-%var280X) (bvult input.ind-%var280X input.dst.llvm-%n)))))
 ))
 (let (($x104 (and $x211 $x76)))
 (let (($x154 (= $x104 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x171 (concat ?x156 (concat ?x153 ?x115)))))
 (let (($x199 (= input.dst.llvm-%n ?x69)))
 (let ((?x11 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x13 (concat ?x57 (concat ?x68 ?x11)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x129 (and $x102 $x199)))
 (let (($x148 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x187 (and $x148 $x129)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x85)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x28)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x23 $x54)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x72 $x7)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x55 $x80)))
 (let (($x90 (not $x91)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x90)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x33 $x77)))
 (let (($x60 (not $x44)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x27 $x56)))
 (let (($x45 (and (not $x106) $x60)))
 (let (($x83 (and (and (and (and (and (and $x45 $x97) $x50) $x75) $x47) $x65) $x88)))
 (let (($x93 (and $x83 $x62)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x92 (or false (or false (and (and true (or $x136 $x40)) (or $x81 $x122))))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x92)))
 (let (($x127 (and (and (and $x31 true) $x93) $x187)))
 (let (($x195 (= $x127 true)))
 (let (($x160 (= $x195 true)))
 (let (($x221 (= $x160 true)))
 (let (($x178 (and $x221 $x154)))
 (let (($x96 (and $x178 $x183)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x161 (and $x196 $x96)))
 (let (($x197 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x173 (and $x197 $x161)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x200 (and $x36 $x173)))
 (let (($x214 (=> $x200 $x163)))
 (not $x214)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var292X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var293X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #xfc
    (ite (= x!0 #x0000000b) #x02
    (ite (= x!0 #x0000000a) #xff
    (ite (= x!0 #x00000008) #xc9
    (ite (= x!0 #x00000009) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x0000000b)
                          (k!2 #x0000000a)
                          (k!2 #x00000009)
                          (k!2 #x00000008))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var292X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var293X!1 () (_ BitVec 32)
    #x0dcb14c4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x07631505)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0c110cc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb6b1007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2dbb0043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2dbb0041) #x15
    (ite (= x!0 #xfb6b1006) #x11
    (ite (= x!0 #x2dbb0040) #x05
    (ite (= x!0 #x0c110cc3) #x00
    (ite (= x!0 #x2dbb0043) #x07
    (ite (= x!0 #x2dbb0042) #x63
    (ite (= x!0 #x0c110cc2) #x00
    (ite (= x!0 #x0c110cc1) #x00
    (ite (= x!0 #x0c110cc0) #x00
    (ite (= x!0 #xfb6b1004) #xc0
      #x0c)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x07631505 x!0)
         (ite (bvule #x07631506 x!0)
              (ite (bvule #x0dcb14c4 x!0) #x0dcb14c4 #x07631506)
              #x07631505)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0dcb14c4) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (forall ((input.ind-%var331X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var331X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x206))))
 (let ((?x217 (input.spec-%var-x-1.1.1 input.ind-%var331X)))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var331X)))
 (=> $x211 (= ?x217 ?x214))))))))
 ))
 (let (($x220 (forall ((input.ind-%var330X (_ BitVec 32)) )(let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var330X)))
 (= $x211 (and (bvule (_ bv0 32) input.ind-%var330X) (bvult input.ind-%var330X input.dst.llvm-%x)))))
 ))
 (let (($x111 (and $x220 $x74)))
 (let (($x144 (= true true)))
 (let (($x170 (and $x144 $x111)))
 (let (($x176 (= $x170 true)))
 (let (($x164 (forall ((input.ind-%var325X (_ BitVec 32)) )(let ((?x16 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var325X)))
 (let ((?x217 (input.spec-%var-x-1.1.1 input.ind-%var325X)))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var325X)))
 (=> $x211 (= ?x217 ?x16))))))
 ))
 (let (($x142 (forall ((input.ind-%var324X (_ BitVec 32)) )(let (($x189 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var324X)))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var324X)))
 (= $x211 $x189))))
 ))
 (let (($x203 (and $x142 $x164)))
 (let (($x15 (= $x203 true)))
 (let (($x66 (forall ((input.ind-%var319X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var319X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x206))))
 (let ((?x217 (input.spec-%var-x-1.1.1 input.ind-%var319X)))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var319X)))
 (=> $x211 (= ?x217 ?x214))))))))
 ))
 (let (($x216 (forall ((input.ind-%var318X (_ BitVec 32)) )(let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var318X)))
 (= $x211 (and (bvule (_ bv0 32) input.ind-%var318X) (bvult input.ind-%var318X input.dst.llvm-%n)))))
 ))
 (let (($x107 (and $x216 $x66)))
 (let (($x61 (= $x107 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x199 (concat ?x69 (concat ?x115 (concat ?x156 ?x171)))))
 (let (($x129 (= input.dst.llvm-%n ?x199)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x73 (concat ?x68 (concat ?x84 ?x82)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x187 (and $x102 $x129)))
 (let (($x116 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x127 (and $x116 $x187)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x79)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x47)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x72)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x75 $x23)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x22 $x18)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x59 $x55)))
 (let (($x91 (not $x80)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x91)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x12 $x33)))
 (let (($x44 (not $x77)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x24 $x41)))
 (let (($x45 (and (not $x106) $x44)))
 (let (($x62 (and (and (and (and (and (and $x45 $x97) $x64) $x67) $x95) $x7) $x53)))
 (let (($x93 (and $x62 $x65)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x131 (or false (or false (and (and true (or $x135 $x9)) (or $x42 $x120))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x131)))
 (let (($x221 (and (and (and $x56 true) $x93) $x127)))
 (let (($x147 (= $x221 true)))
 (let (($x219 (= $x147 true)))
 (let (($x208 (= $x219 true)))
 (let (($x191 (and $x208 $x61)))
 (let (($x70 (and $x191 $x15)))
 (let (($x165 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x165 $x70)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x101 (and $x48 $x134)))
 (let (($x204 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x192 (and $x204 $x101)))
 (let (($x105 (=> $x192 $x176)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (forall ((input.ind-%var331X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var331X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x206))))
 (let ((?x217 (input.spec-%var-x-1.1.1 input.ind-%var331X)))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var331X)))
 (=> $x211 (= ?x217 ?x214))))))))
 ))
 (let (($x220 (forall ((input.ind-%var330X (_ BitVec 32)) )(let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var330X)))
 (= $x211 (and (bvule (_ bv0 32) input.ind-%var330X) (bvult input.ind-%var330X input.dst.llvm-%x)))))
 ))
 (let (($x111 (and $x220 $x74)))
 (let (($x144 (= true true)))
 (let (($x170 (and $x144 $x111)))
 (let (($x176 (= $x170 true)))
 (let (($x164 (forall ((input.ind-%var325X (_ BitVec 32)) )(let ((?x16 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var325X)))
 (let ((?x217 (input.spec-%var-x-1.1.1 input.ind-%var325X)))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var325X)))
 (=> $x211 (= ?x217 ?x16))))))
 ))
 (let (($x142 (forall ((input.ind-%var324X (_ BitVec 32)) )(let (($x189 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var324X)))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var324X)))
 (= $x211 $x189))))
 ))
 (let (($x203 (and $x142 $x164)))
 (let (($x15 (= $x203 true)))
 (let (($x66 (forall ((input.ind-%var319X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var319X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x206))))
 (let ((?x217 (input.spec-%var-x-1.1.1 input.ind-%var319X)))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var319X)))
 (=> $x211 (= ?x217 ?x214))))))))
 ))
 (let (($x216 (forall ((input.ind-%var318X (_ BitVec 32)) )(let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var318X)))
 (= $x211 (and (bvule (_ bv0 32) input.ind-%var318X) (bvult input.ind-%var318X input.dst.llvm-%n)))))
 ))
 (let (($x107 (and $x216 $x66)))
 (let (($x61 (= $x107 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x199 (concat ?x69 (concat ?x115 (concat ?x156 ?x171)))))
 (let (($x129 (= input.dst.llvm-%n ?x199)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x73 (concat ?x68 (concat ?x84 ?x82)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x187 (and $x102 $x129)))
 (let (($x116 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x127 (and $x116 $x187)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x79)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x47)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x72)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x75 $x23)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x22 $x18)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x59 $x55)))
 (let (($x91 (not $x80)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x91)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x12 $x33)))
 (let (($x44 (not $x77)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x24 $x41)))
 (let (($x45 (and (not $x106) $x44)))
 (let (($x62 (and (and (and (and (and (and $x45 $x97) $x64) $x67) $x95) $x7) $x53)))
 (let (($x93 (and $x62 $x65)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x131 (or false (or false (and (and true (or $x135 $x9)) (or $x42 $x120))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x131)))
 (let (($x221 (and (and (and $x56 true) $x93) $x127)))
 (let (($x147 (= $x221 true)))
 (let (($x219 (= $x147 true)))
 (let (($x208 (= $x219 true)))
 (let (($x191 (and $x208 $x61)))
 (let (($x70 (and $x191 $x15)))
 (let (($x165 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x165 $x70)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x101 (and $x48 $x134)))
 (let (($x204 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x192 (and $x204 $x101)))
 (let (($x105 (=> $x192 $x176)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00a05340)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var330X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var331X!1 () (_ BitVec 32)
    #x04d22002)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00024344)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x28002820)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00a05343)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00024347)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00a05340)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00024344)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00a05343) #x28
    (ite (= x!0 #x00a05340) #x20
    (ite (= x!0 #x00a05341) #x28
      #x00))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x04d22002) false
      (not (bvule (concat (k!2 #x00024347)
                          (k!2 #x00024346)
                          (k!2 #x00024345)
                          (k!2 #x00024344))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x04d22002) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var331X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9ce8cd24)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf7769a50)
  (define-fun input.ind-%var330X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xf939e178)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf7769a53)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9ce8cd27)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf7769a50)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9ce8cd24)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf7769a52) #x39
    (ite (= x!0 #x9ce8cd25) #x00
    (ite (= x!0 #x9ce8cd24) #x00
    (ite (= x!0 #x9ce8cd27) #x00
    (ite (= x!0 #xf939e179) #x00
    (ite (= x!0 #x9ce8cd26) #x00
    (ite (= x!0 #xf7769a51) #xe1
    (ite (= x!0 #xf939e17b) #x00
    (ite (= x!0 #xf939e17a) #x00
    (ite (= x!0 #xf7769a53) #xf9
    (ite (= x!0 #xf7769a50) #x78
      #x10))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x161 (forall ((input.ind-%var365X (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul input.ind-%var365X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x177))))
 (let ((?x214 (input.spec-%var-x-1.1.1 input.ind-%var365X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var365X)))
 (=> $x216 (= ?x214 ?x105))))))))
 ))
 (let (($x35 (forall ((input.ind-%var364X (_ BitVec 32)) )(let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var364X)))
 (= $x216 (and (bvule (_ bv0 32) input.ind-%var364X) (bvult input.ind-%var364X input.dst.llvm-%n)))))
 ))
 (let (($x123 (and $x35 $x161)))
 (let (($x155 (= true true)))
 (let (($x109 (and $x155 $x123)))
 (let (($x103 (= $x109 true)))
 (let (($x185 (forall ((input.ind-%var359X (_ BitVec 32)) )(let ((?x139 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var359X)))
 (let ((?x214 (input.spec-%var-x-1.1.1 input.ind-%var359X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var359X)))
 (=> $x216 (= ?x214 ?x139))))))
 ))
 (let (($x63 (forall ((input.ind-%var358X (_ BitVec 32)) )(let (($x145 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var358X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var358X)))
 (= $x216 $x145))))
 ))
 (let (($x167 (and $x63 $x185)))
 (let (($x183 (= $x167 true)))
 (let (($x113 (forall ((input.ind-%var353X (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul input.ind-%var353X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x177))))
 (let ((?x214 (input.spec-%var-x-1.1.1 input.ind-%var353X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var353X)))
 (=> $x216 (= ?x214 ?x105))))))))
 ))
 (let (($x86 (forall ((input.ind-%var352X (_ BitVec 32)) )(let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var352X)))
 (= $x216 (and (bvule (_ bv0 32) input.ind-%var352X) (bvult input.ind-%var352X input.dst.llvm-%n)))))
 ))
 (let (($x99 (and $x86 $x113)))
 (let (($x5 (= $x99 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x199 (concat ?x171 (concat ?x115 ?x69)))))
 (let (($x187 (= input.dst.llvm-%n ?x129)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x11 (concat ?x84 (concat ?x57 ?x71)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x127 (and $x102 $x187)))
 (let (($x140 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x221 (and $x140 $x127)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x54)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x95)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x22)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x67 $x75)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x50 $x78)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x90 $x59)))
 (let (($x80 (not $x55)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x80)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x60 $x12)))
 (let (($x77 (not $x33)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x51 $x27)))
 (let (($x45 (and (not $x106) $x77)))
 (let (($x65 (and (and (and (and (and (and $x45 $x97) $x20) $x28) $x72) $x18) $x83)))
 (let (($x93 (and $x65 $x7)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x195 (or false (or false (and (and true (or $x174 $x81)) (or $x39 $x92))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x195)))
 (let (($x208 (and (and (and $x41 true) $x93) $x221)))
 (let (($x215 (= $x208 true)))
 (let (($x211 (= $x215 true)))
 (let (($x30 (= $x211 true)))
 (let (($x193 (and $x30 $x5)))
 (let (($x37 (and $x193 $x183)))
 (let (($x197 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x166 (and $x197 $x37)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x227 (and $x137 $x166)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x181 (and $x38 $x227)))
 (let (($x172 (=> $x181 $x103)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x161 (forall ((input.ind-%var365X (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul input.ind-%var365X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x177))))
 (let ((?x214 (input.spec-%var-x-1.1.1 input.ind-%var365X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var365X)))
 (=> $x216 (= ?x214 ?x105))))))))
 ))
 (let (($x35 (forall ((input.ind-%var364X (_ BitVec 32)) )(let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var364X)))
 (= $x216 (and (bvule (_ bv0 32) input.ind-%var364X) (bvult input.ind-%var364X input.dst.llvm-%n)))))
 ))
 (let (($x123 (and $x35 $x161)))
 (let (($x155 (= true true)))
 (let (($x109 (and $x155 $x123)))
 (let (($x103 (= $x109 true)))
 (let (($x185 (forall ((input.ind-%var359X (_ BitVec 32)) )(let ((?x139 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var359X)))
 (let ((?x214 (input.spec-%var-x-1.1.1 input.ind-%var359X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var359X)))
 (=> $x216 (= ?x214 ?x139))))))
 ))
 (let (($x63 (forall ((input.ind-%var358X (_ BitVec 32)) )(let (($x145 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var358X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var358X)))
 (= $x216 $x145))))
 ))
 (let (($x167 (and $x63 $x185)))
 (let (($x183 (= $x167 true)))
 (let (($x113 (forall ((input.ind-%var353X (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul input.ind-%var353X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x177))))
 (let ((?x214 (input.spec-%var-x-1.1.1 input.ind-%var353X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var353X)))
 (=> $x216 (= ?x214 ?x105))))))))
 ))
 (let (($x86 (forall ((input.ind-%var352X (_ BitVec 32)) )(let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var352X)))
 (= $x216 (and (bvule (_ bv0 32) input.ind-%var352X) (bvult input.ind-%var352X input.dst.llvm-%n)))))
 ))
 (let (($x99 (and $x86 $x113)))
 (let (($x5 (= $x99 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x199 (concat ?x171 (concat ?x115 ?x69)))))
 (let (($x187 (= input.dst.llvm-%n ?x129)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x11 (concat ?x84 (concat ?x57 ?x71)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x127 (and $x102 $x187)))
 (let (($x140 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x221 (and $x140 $x127)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x54)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x95)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x22)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x67 $x75)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x50 $x78)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x90 $x59)))
 (let (($x80 (not $x55)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x80)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x60 $x12)))
 (let (($x77 (not $x33)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x51 $x27)))
 (let (($x45 (and (not $x106) $x77)))
 (let (($x65 (and (and (and (and (and (and $x45 $x97) $x20) $x28) $x72) $x18) $x83)))
 (let (($x93 (and $x65 $x7)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x195 (or false (or false (and (and true (or $x174 $x81)) (or $x39 $x92))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x195)))
 (let (($x208 (and (and (and $x41 true) $x93) $x221)))
 (let (($x215 (= $x208 true)))
 (let (($x211 (= $x215 true)))
 (let (($x30 (= $x211 true)))
 (let (($x193 (and $x30 $x5)))
 (let (($x37 (and $x193 $x183)))
 (let (($x197 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x166 (and $x197 $x37)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x227 (and $x137 $x166)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x181 (and $x38 $x227)))
 (let (($x172 (=> $x181 $x103)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (forall ((input.ind-%var383X (_ BitVec 32)) )(let ((?x181 (bvadd (bvmul input.ind-%var383X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x123))))
 (let ((?x105 (input.spec-%var-x-1.1.1 input.ind-%var383X)))
 (let (($x86 (input.spec-%var-x-1.0.1 input.ind-%var383X)))
 (=> $x86 (= ?x105 ?x125))))))))
 ))
 (let (($x168 (forall ((input.ind-%var382X (_ BitVec 32)) )(let (($x86 (input.spec-%var-x-1.0.1 input.ind-%var382X)))
 (= $x86 (and (bvule (_ bv0 32) input.ind-%var382X) (bvult input.ind-%var382X (_ bv0 32))))))
 ))
 (let (($x34 (and $x168 $x132)))
 (let (($x114 (= true true)))
 (let (($x186 (and $x114 $x34)))
 (let (($x32 (= $x186 true)))
 (let (($x154 (forall ((input.ind-%var377X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var377X)))
 (let ((?x105 (input.spec-%var-x-1.1.1 input.ind-%var377X)))
 (let (($x86 (input.spec-%var-x-1.0.1 input.ind-%var377X)))
 (=> $x86 (= ?x105 ?x189))))))
 ))
 (let (($x61 (forall ((input.ind-%var376X (_ BitVec 32)) )(let (($x207 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var376X)))
 (let (($x86 (input.spec-%var-x-1.0.1 input.ind-%var376X)))
 (= $x86 $x207))))
 ))
 (let (($x169 (and $x61 $x154)))
 (let (($x152 (= $x169 true)))
 (let (($x210 (forall ((input.ind-%var371X (_ BitVec 32)) )(let ((?x181 (bvadd (bvmul input.ind-%var371X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x123))))
 (let ((?x105 (input.spec-%var-x-1.1.1 input.ind-%var371X)))
 (let (($x86 (input.spec-%var-x-1.0.1 input.ind-%var371X)))
 (=> $x86 (= ?x105 ?x125))))))))
 ))
 (let (($x151 (forall ((input.ind-%var370X (_ BitVec 32)) )(let (($x86 (input.spec-%var-x-1.0.1 input.ind-%var370X)))
 (= $x86 (and (bvule (_ bv0 32) input.ind-%var370X) (bvult input.ind-%var370X input.dst.llvm-%n)))))
 ))
 (let (($x43 (and $x151 $x210)))
 (let (($x217 (= $x43 true)))
 (let ((?x199 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x187 (concat ?x129 (concat ?x69 (concat ?x171 ?x199)))))
 (let (($x127 (= input.dst.llvm-%n ?x187)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x82 (concat ?x57 (concat ?x68 ?x94)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x221 (and $x102 $x127)))
 (let (($x19 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x208 (and $x19 $x221)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x23)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x72)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x50)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x28 $x67)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x64 $x88)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x91 $x90)))
 (let (($x55 (not $x59)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x55)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x44 $x60)))
 (let (($x33 (not $x12)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x40 $x24)))
 (let (($x45 (and (not $x106) $x33)))
 (let (($x7 (and (and (and (and (and (and $x45 $x97) $x58) $x47) $x22) $x78) $x62)))
 (let (($x93 (and $x7 $x18)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x81)))
 (let (($x147 (or false (or false (and (and true (or $x150 $x42)) (or $x31 $x131))))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x30 (and (and (and $x27 true) $x93) $x208)))
 (let (($x213 (= $x30 true)))
 (let (($x216 (= $x213 true)))
 (let (($x180 (= $x216 true)))
 (let (($x209 (and $x180 $x217)))
 (let (($x182 (and $x209 $x152)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x212 (and $x48 $x182)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x141 (and $x6 $x212)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x200 (and $x36 $x141)))
 (let (($x14 (=> $x200 $x32)))
 (not $x14)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (forall ((input.ind-%var383X (_ BitVec 32)) )(let ((?x181 (bvadd (bvmul input.ind-%var383X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x123))))
 (let ((?x105 (input.spec-%var-x-1.1.1 input.ind-%var383X)))
 (let (($x86 (input.spec-%var-x-1.0.1 input.ind-%var383X)))
 (=> $x86 (= ?x105 ?x125))))))))
 ))
 (let (($x168 (forall ((input.ind-%var382X (_ BitVec 32)) )(let (($x86 (input.spec-%var-x-1.0.1 input.ind-%var382X)))
 (= $x86 (and (bvule (_ bv0 32) input.ind-%var382X) (bvult input.ind-%var382X (_ bv0 32))))))
 ))
 (let (($x34 (and $x168 $x132)))
 (let (($x114 (= true true)))
 (let (($x186 (and $x114 $x34)))
 (let (($x32 (= $x186 true)))
 (let (($x154 (forall ((input.ind-%var377X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var377X)))
 (let ((?x105 (input.spec-%var-x-1.1.1 input.ind-%var377X)))
 (let (($x86 (input.spec-%var-x-1.0.1 input.ind-%var377X)))
 (=> $x86 (= ?x105 ?x189))))))
 ))
 (let (($x61 (forall ((input.ind-%var376X (_ BitVec 32)) )(let (($x207 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var376X)))
 (let (($x86 (input.spec-%var-x-1.0.1 input.ind-%var376X)))
 (= $x86 $x207))))
 ))
 (let (($x169 (and $x61 $x154)))
 (let (($x152 (= $x169 true)))
 (let (($x210 (forall ((input.ind-%var371X (_ BitVec 32)) )(let ((?x181 (bvadd (bvmul input.ind-%var371X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x123))))
 (let ((?x105 (input.spec-%var-x-1.1.1 input.ind-%var371X)))
 (let (($x86 (input.spec-%var-x-1.0.1 input.ind-%var371X)))
 (=> $x86 (= ?x105 ?x125))))))))
 ))
 (let (($x151 (forall ((input.ind-%var370X (_ BitVec 32)) )(let (($x86 (input.spec-%var-x-1.0.1 input.ind-%var370X)))
 (= $x86 (and (bvule (_ bv0 32) input.ind-%var370X) (bvult input.ind-%var370X input.dst.llvm-%n)))))
 ))
 (let (($x43 (and $x151 $x210)))
 (let (($x217 (= $x43 true)))
 (let ((?x199 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x187 (concat ?x129 (concat ?x69 (concat ?x171 ?x199)))))
 (let (($x127 (= input.dst.llvm-%n ?x187)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x82 (concat ?x57 (concat ?x68 ?x94)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x221 (and $x102 $x127)))
 (let (($x19 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x208 (and $x19 $x221)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x23)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x72)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x50)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x28 $x67)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x64 $x88)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x91 $x90)))
 (let (($x55 (not $x59)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x55)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x44 $x60)))
 (let (($x33 (not $x12)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x40 $x24)))
 (let (($x45 (and (not $x106) $x33)))
 (let (($x7 (and (and (and (and (and (and $x45 $x97) $x58) $x47) $x22) $x78) $x62)))
 (let (($x93 (and $x7 $x18)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x81)))
 (let (($x147 (or false (or false (and (and true (or $x150 $x42)) (or $x31 $x131))))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x30 (and (and (and $x27 true) $x93) $x208)))
 (let (($x213 (= $x30 true)))
 (let (($x216 (= $x213 true)))
 (let (($x180 (= $x216 true)))
 (let (($x209 (and $x180 $x217)))
 (let (($x182 (and $x209 $x152)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x212 (and $x48 $x182)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x141 (and $x6 $x212)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x200 (and $x36 $x141)))
 (let (($x14 (=> $x200 $x32)))
 (not $x14)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var382X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var383X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #xfc
    (ite (= x!0 #x0000000b) #x02
    (ite (= x!0 #x0000000a) #xff
    (ite (= x!0 #x00000008) #xc9
    (ite (= x!0 #x00000009) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x0000000b)
                          (k!2 #x0000000a)
                          (k!2 #x00000009)
                          (k!2 #x00000008))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var382X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.ind-%var383X!1 () (_ BitVec 32)
    #x0dcb14c4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x07631505)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0c110cc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb6b1007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2dbb0043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2dbb0041) #x15
    (ite (= x!0 #xfb6b1006) #x11
    (ite (= x!0 #x2dbb0040) #x05
    (ite (= x!0 #x2dbb0043) #x07
    (ite (= x!0 #x0c110cc1) #x00
    (ite (= x!0 #x0c110cc3) #x00
    (ite (= x!0 #x2dbb0042) #x63
    (ite (= x!0 #x0c110cc2) #x00
    (ite (= x!0 #x0c110cc0) #x00
    (ite (= x!0 #xfb6b1004) #xc0
      #x0c)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x07631505 x!0)
         (ite (bvule #x07631506 x!0)
              (ite (bvule #x0dcb14c4 x!0) #x0dcb14c4 #x07631506)
              #x07631505)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0dcb14c4) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x203 (forall ((input.ind-%var417X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var417X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x158))))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var417X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var417X)))
 (=> $x151 (= ?x125 ?x14))))))))
 ))
 (let (($x89 (forall ((input.ind-%var416X (_ BitVec 32)) )(let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var416X)))
 (= $x151 (and (bvule (_ bv0 32) input.ind-%var416X) (bvult input.ind-%var416X input.dst.llvm-%x)))))
 ))
 (let (($x142 (and $x89 $x203)))
 (let (($x188 (= true true)))
 (let (($x162 (and $x188 $x142)))
 (let (($x98 (= $x162 true)))
 (let (($x63 (forall ((input.ind-%var411X (_ BitVec 32)) )(let ((?x167 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var411X)))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var411X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var411X)))
 (=> $x151 (= ?x125 ?x167))))))
 ))
 (let (($x66 (forall ((input.ind-%var410X (_ BitVec 32)) )(let (($x164 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var410X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var410X)))
 (= $x151 $x164))))
 ))
 (let (($x178 (and $x66 $x63)))
 (let (($x183 (= $x178 true)))
 (let (($x136 (forall ((input.ind-%var405X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var405X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x158))))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var405X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var405X)))
 (=> $x151 (= ?x125 ?x14))))))))
 ))
 (let (($x161 (forall ((input.ind-%var404X (_ BitVec 32)) )(let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var404X)))
 (= $x151 (and (bvule (_ bv0 32) input.ind-%var404X) (bvult input.ind-%var404X input.dst.llvm-%n)))))
 ))
 (let (($x118 (and $x161 $x136)))
 (let (($x116 (= $x118 true)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x187 (concat ?x199 (concat ?x69 ?x129)))))
 (let (($x221 (= input.dst.llvm-%n ?x127)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x71 (concat ?x68 (concat ?x84 ?x17)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x208 (and $x102 $x221)))
 (let (($x128 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x30 (and $x128 $x208)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x75)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x22)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x64)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x47 $x28)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x20 $x53)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x80 $x91)))
 (let (($x59 (not $x90)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x59)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x77 $x44)))
 (let (($x12 (not $x60)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x9 $x51)))
 (let (($x45 (and (not $x106) $x12)))
 (let (($x18 (and (and (and (and (and (and $x45 $x97) $x85) $x95) $x50) $x88) $x65)))
 (let (($x93 (and $x18 $x78)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x42)))
 (let (($x215 (or false (or false (and (and true (or $x122 $x39)) (or $x56 $x195))))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x215)))
 (let (($x180 (and (and (and $x24 true) $x93) $x30)))
 (let (($x179 (= $x180 true)))
 (let (($x86 (= $x179 true)))
 (let (($x220 (= $x86 true)))
 (let (($x76 (and $x220 $x116)))
 (let (($x16 (and $x76 $x183)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x25 (and $x137 $x16)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x119 (and $x204 $x25)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x112 (and $x26 $x119)))
 (let (($x138 (=> $x112 $x98)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x203 (forall ((input.ind-%var417X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var417X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x158))))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var417X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var417X)))
 (=> $x151 (= ?x125 ?x14))))))))
 ))
 (let (($x89 (forall ((input.ind-%var416X (_ BitVec 32)) )(let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var416X)))
 (= $x151 (and (bvule (_ bv0 32) input.ind-%var416X) (bvult input.ind-%var416X input.dst.llvm-%x)))))
 ))
 (let (($x142 (and $x89 $x203)))
 (let (($x188 (= true true)))
 (let (($x162 (and $x188 $x142)))
 (let (($x98 (= $x162 true)))
 (let (($x63 (forall ((input.ind-%var411X (_ BitVec 32)) )(let ((?x167 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var411X)))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var411X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var411X)))
 (=> $x151 (= ?x125 ?x167))))))
 ))
 (let (($x66 (forall ((input.ind-%var410X (_ BitVec 32)) )(let (($x164 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var410X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var410X)))
 (= $x151 $x164))))
 ))
 (let (($x178 (and $x66 $x63)))
 (let (($x183 (= $x178 true)))
 (let (($x136 (forall ((input.ind-%var405X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var405X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x158))))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var405X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var405X)))
 (=> $x151 (= ?x125 ?x14))))))))
 ))
 (let (($x161 (forall ((input.ind-%var404X (_ BitVec 32)) )(let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var404X)))
 (= $x151 (and (bvule (_ bv0 32) input.ind-%var404X) (bvult input.ind-%var404X input.dst.llvm-%n)))))
 ))
 (let (($x118 (and $x161 $x136)))
 (let (($x116 (= $x118 true)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x187 (concat ?x199 (concat ?x69 ?x129)))))
 (let (($x221 (= input.dst.llvm-%n ?x127)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x71 (concat ?x68 (concat ?x84 ?x17)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x208 (and $x102 $x221)))
 (let (($x128 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x30 (and $x128 $x208)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x75)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x22)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x64)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x47 $x28)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x20 $x53)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x80 $x91)))
 (let (($x59 (not $x90)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x59)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x77 $x44)))
 (let (($x12 (not $x60)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x9 $x51)))
 (let (($x45 (and (not $x106) $x12)))
 (let (($x18 (and (and (and (and (and (and $x45 $x97) $x85) $x95) $x50) $x88) $x65)))
 (let (($x93 (and $x18 $x78)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x42)))
 (let (($x215 (or false (or false (and (and true (or $x122 $x39)) (or $x56 $x195))))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x215)))
 (let (($x180 (and (and (and $x24 true) $x93) $x30)))
 (let (($x179 (= $x180 true)))
 (let (($x86 (= $x179 true)))
 (let (($x220 (= $x86 true)))
 (let (($x76 (and $x220 $x116)))
 (let (($x16 (and $x76 $x183)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x25 (and $x137 $x16)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x119 (and $x204 $x25)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x112 (and $x26 $x119)))
 (let (($x138 (=> $x112 $x98)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00a05340)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var417X!1 () (_ BitVec 32)
    #x04d22002)
  (define-fun input.ind-%var416X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00024344)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x28002820)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00a05343)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00024347)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00a05340)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00024344)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00a05343) #x28
    (ite (= x!0 #x00a05340) #x20
    (ite (= x!0 #x00a05341) #x28
      #x00))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x04d22002) false
      (not (bvule (concat (k!2 #x00024347)
                          (k!2 #x00024346)
                          (k!2 #x00024345)
                          (k!2 #x00024344))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x04d22002) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var416X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9ce8cd24)
  (define-fun input.ind-%var417X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf7769a50)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xf939e178)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf7769a53)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9ce8cd27)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf7769a50)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9ce8cd24)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x9ce8cd25) #x00
    (ite (= x!0 #xf7769a52) #x39
    (ite (= x!0 #x9ce8cd24) #x00
    (ite (= x!0 #x9ce8cd27) #x00
    (ite (= x!0 #xf939e179) #x00
    (ite (= x!0 #xf939e17b) #x00
    (ite (= x!0 #x9ce8cd26) #x00
    (ite (= x!0 #xf7769a51) #xe1
    (ite (= x!0 #xf939e17a) #x00
    (ite (= x!0 #xf7769a53) #xf9
    (ite (= x!0 #xf7769a50) #x78
      #x10))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (= false true)))
 (let (($x74 (= $x70 true)))
 (let (($x61 (forall ((input.ind-%var445X (_ BitVec 32)) )(let ((?x169 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var445X)))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var445X)))
 (let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var445X)))
 (=> $x161 (= ?x14 ?x169))))))
 ))
 (let (($x113 (forall ((input.ind-%var444X (_ BitVec 32)) )(let (($x101 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var444X)))
 (let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var444X)))
 (= $x161 $x101))))
 ))
 (let (($x15 (and $x113 $x61)))
 (let (($x152 (= $x15 true)))
 (let (($x135 (forall ((input.ind-%var439X (_ BitVec 32)) )(let ((?x112 (bvadd (bvmul input.ind-%var439X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv1 32))) (select input.dst.llvm-mem ?x112))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv2 32))) ?x205))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var439X)))
 (let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var439X)))
 (=> $x161 (= ?x14 ?x138))))))))
 ))
 (let (($x121 (forall ((input.ind-%var438X (_ BitVec 32)) )(let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var438X)))
 (= $x161 (and (bvule (_ bv0 32) input.ind-%var438X) (bvult input.ind-%var438X input.dst.llvm-%n)))))
 ))
 (let (($x126 (and $x121 $x135)))
 (let (($x140 (= $x126 true)))
 (let ((?x187 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x221 (concat ?x127 (concat ?x129 (concat ?x199 ?x187)))))
 (let (($x208 (= input.dst.llvm-%n ?x221)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x94 (concat ?x84 (concat ?x57 ?x13)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x30 (and $x102 $x208)))
 (let (($x160 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x180 (and $x160 $x30)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x67)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x50)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x20)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x95 $x47)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x58 $x83)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x55 $x80)))
 (let (($x90 (not $x91)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x90)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x33 $x77)))
 (let (($x60 (not $x44)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x81 $x40)))
 (let (($x45 (and (not $x106) $x60)))
 (let (($x78 (and (and (and (and (and (and $x45 $x97) $x79) $x72) $x64) $x53) $x7)))
 (let (($x93 (and $x78 $x88)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x39)))
 (let (($x213 (or false (or false (and (and true (or $x120 $x31)) (or $x41 $x147))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x213)))
 (let (($x220 (and (and (and $x51 true) $x93) $x180)))
 (let (($x149 (= $x220 true)))
 (let (($x151 (= $x149 true)))
 (let (($x109 (= $x151 true)))
 (let (($x144 (and $x109 $x140)))
 (let (($x5 (and $x144 $x152)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x10 (and $x6 $x5)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x130 (and $x38 $x10)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x124 $x130)))
 (let (($x181 (=> $x185 $x74)))
 (not $x181)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (= false true)))
 (let (($x74 (= $x70 true)))
 (let (($x61 (forall ((input.ind-%var445X (_ BitVec 32)) )(let ((?x169 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var445X)))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var445X)))
 (let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var445X)))
 (=> $x161 (= ?x14 ?x169))))))
 ))
 (let (($x113 (forall ((input.ind-%var444X (_ BitVec 32)) )(let (($x101 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var444X)))
 (let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var444X)))
 (= $x161 $x101))))
 ))
 (let (($x15 (and $x113 $x61)))
 (let (($x152 (= $x15 true)))
 (let (($x135 (forall ((input.ind-%var439X (_ BitVec 32)) )(let ((?x112 (bvadd (bvmul input.ind-%var439X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv1 32))) (select input.dst.llvm-mem ?x112))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv2 32))) ?x205))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var439X)))
 (let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var439X)))
 (=> $x161 (= ?x14 ?x138))))))))
 ))
 (let (($x121 (forall ((input.ind-%var438X (_ BitVec 32)) )(let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var438X)))
 (= $x161 (and (bvule (_ bv0 32) input.ind-%var438X) (bvult input.ind-%var438X input.dst.llvm-%n)))))
 ))
 (let (($x126 (and $x121 $x135)))
 (let (($x140 (= $x126 true)))
 (let ((?x187 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x221 (concat ?x127 (concat ?x129 (concat ?x199 ?x187)))))
 (let (($x208 (= input.dst.llvm-%n ?x221)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x94 (concat ?x84 (concat ?x57 ?x13)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x30 (and $x102 $x208)))
 (let (($x160 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x180 (and $x160 $x30)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x67)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x50)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x20)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x95 $x47)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x58 $x83)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x55 $x80)))
 (let (($x90 (not $x91)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x90)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x33 $x77)))
 (let (($x60 (not $x44)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x81 $x40)))
 (let (($x45 (and (not $x106) $x60)))
 (let (($x78 (and (and (and (and (and (and $x45 $x97) $x79) $x72) $x64) $x53) $x7)))
 (let (($x93 (and $x78 $x88)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x39)))
 (let (($x213 (or false (or false (and (and true (or $x120 $x31)) (or $x41 $x147))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x213)))
 (let (($x220 (and (and (and $x51 true) $x93) $x180)))
 (let (($x149 (= $x220 true)))
 (let (($x151 (= $x149 true)))
 (let (($x109 (= $x151 true)))
 (let (($x144 (and $x109 $x140)))
 (let (($x5 (and $x144 $x152)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x10 (and $x6 $x5)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x130 (and $x38 $x10)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x124 $x130)))
 (let (($x181 (=> $x185 $x74)))
 (not $x181)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1d7f81c0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc5111f64)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1d7f81c3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc5111f67)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1d7f81c0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc5111f64)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #xc5111f67)
                        (k!0 #xc5111f66)
                        (k!0 #xc5111f65)
                        (k!0 #xc5111f64))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x69fd1474)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x593251f4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x593251f7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x69fd1477)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x593251f4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x69fd1474)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x28)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x64)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (and $x72 $x95)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x85 $x62)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x59 $x55)))
 (let (($x91 (not $x80)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x91)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x12 $x33)))
 (let (($x44 (not $x77)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x42 $x9)))
 (let (($x45 (and (not $x106) $x44)))
 (let (($x88 (and (and (and (and (and (and $x45 $x97) $x54) $x22) $x20) $x83) $x18)))
 (let (($x93 (and $x88 $x53)))
 (let (($x215 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x179 (or false (or false (and (and true (or $x92 $x56)) (or $x27 $x215))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x179)))
 (let (($x159 (and $x40 $x93)))
 (let (($x43 (= $x159 true)))
 (let (($x207 (= $x43 true)))
 (let (($x200 (forall ((input.ind-%var484X (_ BitVec 32)) )(let ((?x183 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var484X)))
 (let ((?x138 (input.spec-%var-x-1.1.1 input.ind-%var484X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var484X)))
 (=> $x121 (= ?x138 ?x183))))))
 ))
 (let (($x164 (forall ((input.ind-%var483X (_ BitVec 32)) )(let (($x63 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var483X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var483X)))
 (= $x121 $x63))))
 ))
 (let (($x186 (and $x164 $x200)))
 (let (($x16 (= $x186 true)))
 (let (($x114 (forall ((input.ind-%var478X (_ BitVec 32)) )(let ((?x185 (bvadd (bvmul input.ind-%var478X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x198))))
 (let ((?x138 (input.spec-%var-x-1.1.1 input.ind-%var478X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var478X)))
 (=> $x121 (= ?x138 ?x189))))))))
 ))
 (let (($x146 (forall ((input.ind-%var477X (_ BitVec 32)) )(let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var477X)))
 (= $x121 (and (bvule (_ bv0 32) input.ind-%var477X) (bvult input.ind-%var477X input.dst.llvm-%n)))))
 ))
 (let (($x34 (and $x146 $x114)))
 (let (($x165 (= $x34 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x208 (concat ?x221 (concat ?x187 (concat ?x129 ?x127)))))
 (let (($x30 (= input.dst.llvm-%n ?x208)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x17 (concat ?x57 (concat ?x68 ?x73)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x180 (and $x102 $x30)))
 (let (($x219 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x220 (and $x219 $x180)))
 (let (($x109 (and (and (and $x40 true) $x93) $x220)))
 (let (($x35 (= $x109 true)))
 (let (($x161 (= $x35 true)))
 (let (($x168 (= $x161 true)))
 (let (($x210 (and $x168 $x165)))
 (let (($x105 (and $x210 $x16)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x172 (and $x204 $x105)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x158 (and $x36 $x172)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x25 (and $x196 $x158)))
 (let (($x143 (=> $x25 $x207)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x28)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x64)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (and $x72 $x95)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x85 $x62)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x59 $x55)))
 (let (($x91 (not $x80)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x91)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x12 $x33)))
 (let (($x44 (not $x77)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x42 $x9)))
 (let (($x45 (and (not $x106) $x44)))
 (let (($x88 (and (and (and (and (and (and $x45 $x97) $x54) $x22) $x20) $x83) $x18)))
 (let (($x93 (and $x88 $x53)))
 (let (($x215 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x179 (or false (or false (and (and true (or $x92 $x56)) (or $x27 $x215))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x179)))
 (let (($x159 (and $x40 $x93)))
 (let (($x43 (= $x159 true)))
 (let (($x207 (= $x43 true)))
 (let (($x200 (forall ((input.ind-%var484X (_ BitVec 32)) )(let ((?x183 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var484X)))
 (let ((?x138 (input.spec-%var-x-1.1.1 input.ind-%var484X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var484X)))
 (=> $x121 (= ?x138 ?x183))))))
 ))
 (let (($x164 (forall ((input.ind-%var483X (_ BitVec 32)) )(let (($x63 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var483X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var483X)))
 (= $x121 $x63))))
 ))
 (let (($x186 (and $x164 $x200)))
 (let (($x16 (= $x186 true)))
 (let (($x114 (forall ((input.ind-%var478X (_ BitVec 32)) )(let ((?x185 (bvadd (bvmul input.ind-%var478X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x198))))
 (let ((?x138 (input.spec-%var-x-1.1.1 input.ind-%var478X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var478X)))
 (=> $x121 (= ?x138 ?x189))))))))
 ))
 (let (($x146 (forall ((input.ind-%var477X (_ BitVec 32)) )(let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var477X)))
 (= $x121 (and (bvule (_ bv0 32) input.ind-%var477X) (bvult input.ind-%var477X input.dst.llvm-%n)))))
 ))
 (let (($x34 (and $x146 $x114)))
 (let (($x165 (= $x34 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x208 (concat ?x221 (concat ?x187 (concat ?x129 ?x127)))))
 (let (($x30 (= input.dst.llvm-%n ?x208)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x17 (concat ?x57 (concat ?x68 ?x73)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x180 (and $x102 $x30)))
 (let (($x219 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x220 (and $x219 $x180)))
 (let (($x109 (and (and (and $x40 true) $x93) $x220)))
 (let (($x35 (= $x109 true)))
 (let (($x161 (= $x35 true)))
 (let (($x168 (= $x161 true)))
 (let (($x210 (and $x168 $x165)))
 (let (($x105 (and $x210 $x16)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x172 (and $x204 $x105)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x158 (and $x36 $x172)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x25 (and $x196 $x158)))
 (let (($x143 (=> $x25 $x207)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x10 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x139 (= $x10 true)))
 (let (($x132 (forall ((input.ind-%var496X (_ BitVec 32)) )(let ((?x209 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var496X)))
 (let ((?x189 (input.spec-%var-x-1.1.1 input.ind-%var496X)))
 (let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var496X)))
 (=> $x146 (= ?x189 ?x209))))))
 ))
 (let (($x107 (forall ((input.ind-%var495X (_ BitVec 32)) )(let (($x140 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var495X)))
 (let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var495X)))
 (= $x146 $x140))))
 ))
 (let (($x112 (and $x107 $x132)))
 (let (($x162 (= $x112 true)))
 (let (($x100 (forall ((input.ind-%var490X (_ BitVec 32)) )(let ((?x25 (bvadd (bvmul input.ind-%var490X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem ?x25))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv2 32))) ?x143))))
 (let ((?x189 (input.spec-%var-x-1.1.1 input.ind-%var490X)))
 (let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var490X)))
 (=> $x146 (= ?x189 ?x178))))))))
 ))
 (let (($x181 (forall ((input.ind-%var489X (_ BitVec 32)) )(let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var489X)))
 (= $x146 (and (bvule (_ bv0 32) input.ind-%var489X) (bvult input.ind-%var489X input.dst.llvm-%n)))))
 ))
 (let (($x188 (and $x181 $x100)))
 (let (($x142 (= $x188 true)))
 (let ((?x221 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x208 (concat ?x127 (concat ?x187 ?x221)))))
 (let (($x180 (= input.dst.llvm-%n ?x30)))
 (let ((?x11 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x13 (concat ?x68 (concat ?x84 ?x11)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x220 (and $x102 $x180)))
 (let (($x211 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x109 (and $x211 $x220)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x47)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x20)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x85)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x22 $x72)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x79 $x65)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x90 $x59)))
 (let (($x80 (not $x55)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x80)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x60 $x12)))
 (let (($x77 (not $x33)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x39 $x81)))
 (let (($x45 (and (not $x106) $x77)))
 (let (($x53 (and (and (and (and (and (and $x45 $x97) $x23) $x50) $x58) $x62) $x78)))
 (let (($x93 (and $x53 $x83)))
 (let (($x213 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x149 (or false (or false (and (and true (or $x131 $x41)) (or $x24 $x213))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x149)))
 (let (($x168 (and (and (and $x9 true) $x93) $x109)))
 (let (($x218 (= $x168 true)))
 (let (($x121 (= $x218 true)))
 (let (($x89 (= $x121 true)))
 (let (($x32 (and $x89 $x142)))
 (let (($x5 (and $x32 $x162)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x118 (and $x38 $x5)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x167 (and $x26 $x118)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x205 (and $x148 $x167)))
 (let (($x76 (=> $x205 $x139)))
 (not $x76)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x10 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x139 (= $x10 true)))
 (let (($x132 (forall ((input.ind-%var496X (_ BitVec 32)) )(let ((?x209 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var496X)))
 (let ((?x189 (input.spec-%var-x-1.1.1 input.ind-%var496X)))
 (let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var496X)))
 (=> $x146 (= ?x189 ?x209))))))
 ))
 (let (($x107 (forall ((input.ind-%var495X (_ BitVec 32)) )(let (($x140 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var495X)))
 (let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var495X)))
 (= $x146 $x140))))
 ))
 (let (($x112 (and $x107 $x132)))
 (let (($x162 (= $x112 true)))
 (let (($x100 (forall ((input.ind-%var490X (_ BitVec 32)) )(let ((?x25 (bvadd (bvmul input.ind-%var490X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem ?x25))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv2 32))) ?x143))))
 (let ((?x189 (input.spec-%var-x-1.1.1 input.ind-%var490X)))
 (let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var490X)))
 (=> $x146 (= ?x189 ?x178))))))))
 ))
 (let (($x181 (forall ((input.ind-%var489X (_ BitVec 32)) )(let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var489X)))
 (= $x146 (and (bvule (_ bv0 32) input.ind-%var489X) (bvult input.ind-%var489X input.dst.llvm-%n)))))
 ))
 (let (($x188 (and $x181 $x100)))
 (let (($x142 (= $x188 true)))
 (let ((?x221 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x208 (concat ?x127 (concat ?x187 ?x221)))))
 (let (($x180 (= input.dst.llvm-%n ?x30)))
 (let ((?x11 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x13 (concat ?x68 (concat ?x84 ?x11)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x220 (and $x102 $x180)))
 (let (($x211 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x109 (and $x211 $x220)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x47)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x20)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x85)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x22 $x72)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x79 $x65)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x90 $x59)))
 (let (($x80 (not $x55)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x80)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x60 $x12)))
 (let (($x77 (not $x33)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x39 $x81)))
 (let (($x45 (and (not $x106) $x77)))
 (let (($x53 (and (and (and (and (and (and $x45 $x97) $x23) $x50) $x58) $x62) $x78)))
 (let (($x93 (and $x53 $x83)))
 (let (($x213 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x149 (or false (or false (and (and true (or $x131 $x41)) (or $x24 $x213))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x149)))
 (let (($x168 (and (and (and $x9 true) $x93) $x109)))
 (let (($x218 (= $x168 true)))
 (let (($x121 (= $x218 true)))
 (let (($x89 (= $x121 true)))
 (let (($x32 (and $x89 $x142)))
 (let (($x5 (and $x32 $x162)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x118 (and $x38 $x5)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x167 (and $x26 $x118)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x205 (and $x148 $x167)))
 (let (($x76 (=> $x205 $x139)))
 (not $x76)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000e) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000000f)
                        (k!0 #x0000000e)
                        (k!0 #x0000000d)
                        (k!0 #x0000000c))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc982b100)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa9f1ae04)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x6b6b6b01)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xbf6bd700)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa9f1ae07)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc982b103)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa9f1ae04)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc982b100)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xbf6bd701) #x00
    (ite (= x!0 #xc982b100) #x01
    (ite (= x!0 #xbf6bd703) #x00
    (ite (= x!0 #xa9f1ae05) #xd7
    (ite (= x!0 #xbf6bd702) #x00
    (ite (= x!0 #xbf6bd700) #x00
    (ite (= x!0 #xa9f1ae07) #xbf
    (ite (= x!0 #xa9f1ae04) #x00
      #x6b)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x6b6b6b01 x!0)
         (ite (bvule #x6b6b6b02 x!0) #x6b6b6b02 #x6b6b6b01)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x226 ((_ extract 23 0) input.dst.llvm-%n)))
 (let ((?x214 (bvmul (_ bv256 24) ?x226)))
 (let ((?x141 ((_ extract 23 0) input.dst.llvm-%x)))
 (let ((?x163 (bvmul (_ bv47897 24) ?x141)))
 (let ((?x157 (bvadd ?x163 ?x214)))
 (let (($x201 (= (_ bv0 24) ?x157)))
 (let (($x223 (= $x201 true)))
 (let (($x185 (forall ((input.ind-%var524X (_ BitVec 32)) )(let ((?x16 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var524X)))
 (let ((?x178 (input.spec-%var-x-1.1.1 input.ind-%var524X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var524X)))
 (=> $x181 (= ?x178 ?x16))))))
 ))
 (let (($x63 (forall ((input.ind-%var523X (_ BitVec 32)) )(let (($x200 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var523X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var523X)))
 (= $x181 $x200))))
 ))
 (let (($x19 (and $x63 $x185)))
 (let (($x105 (= $x19 true)))
 (let (($x70 (forall ((input.ind-%var518X (_ BitVec 32)) )(let ((?x205 (bvadd (bvmul input.ind-%var518X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x108))))
 (let ((?x178 (input.spec-%var-x-1.1.1 input.ind-%var518X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var518X)))
 (=> $x181 (= ?x178 ?x152))))))))
 ))
 (let (($x207 (forall ((input.ind-%var517X (_ BitVec 32)) )(let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var517X)))
 (= $x181 (and (bvule (_ bv0 32) input.ind-%var517X) (bvult input.ind-%var517X input.dst.llvm-%n)))))
 ))
 (let (($x133 (and $x207 $x70)))
 (let (($x98 (= $x133 true)))
 (let ((?x208 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x180 (concat ?x30 (concat ?x221 (concat ?x127 ?x208)))))
 (let (($x220 (= input.dst.llvm-%n ?x180)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x73 (concat ?x84 (concat ?x57 ?x82)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x109 (and $x102 $x220)))
 (let (($x216 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x168 (and $x216 $x109)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x95)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x58)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x50 $x22)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x54 $x7)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x91 $x90)))
 (let (($x55 (not $x59)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x55)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x44 $x60)))
 (let (($x33 (not $x12)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x31 $x42)))
 (let (($x45 (and (not $x106) $x33)))
 (let (($x83 (and (and (and (and (and (and $x45 $x97) $x75) $x64) $x85) $x65) $x88)))
 (let (($x93 (and $x83 $x62)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x35 (or false (or false (and (and true (or $x195 $x27)) (or $x51 $x179))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x35)))
 (let (($x89 (and (and (and $x81 true) $x93) $x168)))
 (let (($x29 (= $x89 true)))
 (let (($x146 (= $x29 true)))
 (let (($x137 (= $x146 true)))
 (let (($x135 (and $x137 $x98)))
 (let (($x119 (and $x135 $x105)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x15 (and $x36 $x119)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x198 (and $x124 $x15)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x197 $x198)))
 (let (($x177 (=> $x172 $x223)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x226 ((_ extract 23 0) input.dst.llvm-%n)))
 (let ((?x214 (bvmul (_ bv256 24) ?x226)))
 (let ((?x141 ((_ extract 23 0) input.dst.llvm-%x)))
 (let ((?x163 (bvmul (_ bv47897 24) ?x141)))
 (let ((?x157 (bvadd ?x163 ?x214)))
 (let (($x201 (= (_ bv0 24) ?x157)))
 (let (($x223 (= $x201 true)))
 (let (($x185 (forall ((input.ind-%var524X (_ BitVec 32)) )(let ((?x16 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var524X)))
 (let ((?x178 (input.spec-%var-x-1.1.1 input.ind-%var524X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var524X)))
 (=> $x181 (= ?x178 ?x16))))))
 ))
 (let (($x63 (forall ((input.ind-%var523X (_ BitVec 32)) )(let (($x200 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var523X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var523X)))
 (= $x181 $x200))))
 ))
 (let (($x19 (and $x63 $x185)))
 (let (($x105 (= $x19 true)))
 (let (($x70 (forall ((input.ind-%var518X (_ BitVec 32)) )(let ((?x205 (bvadd (bvmul input.ind-%var518X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x108))))
 (let ((?x178 (input.spec-%var-x-1.1.1 input.ind-%var518X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var518X)))
 (=> $x181 (= ?x178 ?x152))))))))
 ))
 (let (($x207 (forall ((input.ind-%var517X (_ BitVec 32)) )(let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var517X)))
 (= $x181 (and (bvule (_ bv0 32) input.ind-%var517X) (bvult input.ind-%var517X input.dst.llvm-%n)))))
 ))
 (let (($x133 (and $x207 $x70)))
 (let (($x98 (= $x133 true)))
 (let ((?x208 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x180 (concat ?x30 (concat ?x221 (concat ?x127 ?x208)))))
 (let (($x220 (= input.dst.llvm-%n ?x180)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x73 (concat ?x84 (concat ?x57 ?x82)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x109 (and $x102 $x220)))
 (let (($x216 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x168 (and $x216 $x109)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x95)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x58)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x50 $x22)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x54 $x7)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x91 $x90)))
 (let (($x55 (not $x59)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x55)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x44 $x60)))
 (let (($x33 (not $x12)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x31 $x42)))
 (let (($x45 (and (not $x106) $x33)))
 (let (($x83 (and (and (and (and (and (and $x45 $x97) $x75) $x64) $x85) $x65) $x88)))
 (let (($x93 (and $x83 $x62)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x35 (or false (or false (and (and true (or $x195 $x27)) (or $x51 $x179))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x35)))
 (let (($x89 (and (and (and $x81 true) $x93) $x168)))
 (let (($x29 (= $x89 true)))
 (let (($x146 (= $x29 true)))
 (let (($x137 (= $x146 true)))
 (let (($x135 (and $x137 $x98)))
 (let (($x119 (and $x135 $x105)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x15 (and $x36 $x119)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x198 (and $x124 $x15)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x197 $x198)))
 (let (($x177 (=> $x172 $x223)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000803)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000800) #x04
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00000007)
                        (k!0 #x00000006)
                        (k!0 #x00000005)
                        (k!0 #x00000004))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80902854)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00402930)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xc5005010)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xc5000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00402933)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80902857)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00402930)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80902854)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80902855) #x50
    (ite (= x!0 #x00402932) #x00
    (ite (= x!0 #x80902854) #x10
    (ite (= x!0 #xc5000013) #x00
    (ite (= x!0 #xc5000011) #x00
    (ite (= x!0 #x80902856) #x00
    (ite (= x!0 #x00402931) #x00
    (ite (= x!0 #xc5000012) #x00
    (ite (= x!0 #xc5000010) #x00
    (ite (= x!0 #x00402930) #x10
      #xc5)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #xc5005010 x!0)
         (ite (bvule #xc5005011 x!0) #xc5005011 #xc5005010)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x25 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x153 (= (_ bv0 2) ?x25)))
 (let (($x5 (= $x153 true)))
 (let (($x107 (forall ((input.ind-%var552X (_ BitVec 32)) )(let ((?x112 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var552X)))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var552X)))
 (let (($x207 (input.spec-%var-x-1.0.1 input.ind-%var552X)))
 (=> $x207 (= ?x152 ?x112))))))
 ))
 (let (($x114 (forall ((input.ind-%var551X (_ BitVec 32)) )(let (($x217 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var551X)))
 (let (($x207 (input.spec-%var-x-1.0.1 input.ind-%var551X)))
 (= $x207 $x217))))
 ))
 (let (($x193 (and $x114 $x107)))
 (let (($x162 (= $x193 true)))
 (let (($x38 (forall ((input.ind-%var546X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var546X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x163))))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var546X)))
 (let (($x207 (input.spec-%var-x-1.0.1 input.ind-%var546X)))
 (=> $x207 (= ?x152 ?x223))))))))
 ))
 (let (($x76 (forall ((input.ind-%var545X (_ BitVec 32)) )(let (($x207 (input.spec-%var-x-1.0.1 input.ind-%var545X)))
 (= $x207 (and (bvule (_ bv0 32) input.ind-%var545X) (bvult input.ind-%var545X input.dst.llvm-%n)))))
 ))
 (let (($x120 (and $x76 $x38)))
 (let (($x115 (= $x120 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x220 (concat ?x180 (concat ?x208 (concat ?x221 ?x30)))))
 (let (($x109 (= input.dst.llvm-%n ?x220)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x11 (concat ?x57 (concat ?x68 ?x71)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x168 (and $x102 $x109)))
 (let (($x86 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x89 (and $x86 $x168)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x72)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x85)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x54)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x64 $x50)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x23 $x18)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x80 $x91)))
 (let (($x59 (not $x90)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x59)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x77 $x44)))
 (let (($x12 (not $x60)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x56 $x39)))
 (let (($x45 (and (not $x106) $x12)))
 (let (($x62 (and (and (and (and (and (and $x45 $x97) $x67) $x20) $x79) $x7) $x53)))
 (let (($x93 (and $x62 $x65)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x27)))
 (let (($x218 (or false (or false (and (and true (or $x147 $x24)) (or $x40 $x149))))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x218)))
 (let (($x137 (and (and (and $x42 true) $x93) $x89)))
 (let (($x74 (= $x137 true)))
 (let (($x181 (= $x74 true)))
 (let (($x222 (= $x181 true)))
 (let (($x219 (and $x222 $x115)))
 (let (($x164 (and $x219 $x162)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x130 (and $x26 $x164)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x165 (and $x196 $x130)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x103 (and $x48 $x165)))
 (let (($x34 (=> $x103 $x5)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x25 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x153 (= (_ bv0 2) ?x25)))
 (let (($x5 (= $x153 true)))
 (let (($x107 (forall ((input.ind-%var552X (_ BitVec 32)) )(let ((?x112 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var552X)))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var552X)))
 (let (($x207 (input.spec-%var-x-1.0.1 input.ind-%var552X)))
 (=> $x207 (= ?x152 ?x112))))))
 ))
 (let (($x114 (forall ((input.ind-%var551X (_ BitVec 32)) )(let (($x217 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var551X)))
 (let (($x207 (input.spec-%var-x-1.0.1 input.ind-%var551X)))
 (= $x207 $x217))))
 ))
 (let (($x193 (and $x114 $x107)))
 (let (($x162 (= $x193 true)))
 (let (($x38 (forall ((input.ind-%var546X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var546X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x163))))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var546X)))
 (let (($x207 (input.spec-%var-x-1.0.1 input.ind-%var546X)))
 (=> $x207 (= ?x152 ?x223))))))))
 ))
 (let (($x76 (forall ((input.ind-%var545X (_ BitVec 32)) )(let (($x207 (input.spec-%var-x-1.0.1 input.ind-%var545X)))
 (= $x207 (and (bvule (_ bv0 32) input.ind-%var545X) (bvult input.ind-%var545X input.dst.llvm-%n)))))
 ))
 (let (($x120 (and $x76 $x38)))
 (let (($x115 (= $x120 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x220 (concat ?x180 (concat ?x208 (concat ?x221 ?x30)))))
 (let (($x109 (= input.dst.llvm-%n ?x220)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x11 (concat ?x57 (concat ?x68 ?x71)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x168 (and $x102 $x109)))
 (let (($x86 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x89 (and $x86 $x168)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x72)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x85)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x54)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x64 $x50)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x23 $x18)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x80 $x91)))
 (let (($x59 (not $x90)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x59)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x77 $x44)))
 (let (($x12 (not $x60)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x56 $x39)))
 (let (($x45 (and (not $x106) $x12)))
 (let (($x62 (and (and (and (and (and (and $x45 $x97) $x67) $x20) $x79) $x7) $x53)))
 (let (($x93 (and $x62 $x65)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x27)))
 (let (($x218 (or false (or false (and (and true (or $x147 $x24)) (or $x40 $x149))))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x218)))
 (let (($x137 (and (and (and $x42 true) $x93) $x89)))
 (let (($x74 (= $x137 true)))
 (let (($x181 (= $x74 true)))
 (let (($x222 (= $x181 true)))
 (let (($x219 (and $x222 $x115)))
 (let (($x164 (and $x219 $x162)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x130 (and $x26 $x164)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x165 (and $x196 $x130)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x103 (and $x48 $x165)))
 (let (($x34 (=> $x103 $x5)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x15 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x116 (= $x15 true)))
 (let (($x188 (= $x116 true)))
 (let (($x132 (forall ((input.ind-%var564X (_ BitVec 32)) )(let ((?x63 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var564X)))
 (let ((?x223 (input.spec-%var-x-1.1.1 input.ind-%var564X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var564X)))
 (=> $x76 (= ?x223 ?x63))))))
 ))
 (let (($x16 (forall ((input.ind-%var563X (_ BitVec 32)) )(let (($x133 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var563X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var563X)))
 (= $x76 $x133))))
 ))
 (let (($x6 (and $x16 $x132)))
 (let (($x205 (= $x6 true)))
 (let (($x178 (forall ((input.ind-%var558X (_ BitVec 32)) )(let ((?x103 (bvadd (bvmul input.ind-%var558X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x5))))
 (let ((?x223 (input.spec-%var-x-1.1.1 input.ind-%var558X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var558X)))
 (=> $x76 (= ?x223 ?x211))))))))
 ))
 (let (($x141 (forall ((input.ind-%var557X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var557X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var557X) (bvult input.ind-%var557X input.dst.llvm-%n)))))
 ))
 (let (($x138 (and $x141 $x178)))
 (let (($x10 (= $x138 true)))
 (let ((?x180 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x220 (concat ?x30 (concat ?x208 ?x180)))))
 (let (($x168 (= input.dst.llvm-%n ?x109)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x82 (concat ?x68 (concat ?x84 ?x94)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x89 (and $x102 $x168)))
 (let (($x151 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x137 (and $x151 $x89)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x22)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x79)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x20 $x64)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x75 $x78)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x55 $x80)))
 (let (($x90 (not $x91)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x90)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x33 $x77)))
 (let (($x60 (not $x44)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x41 $x31)))
 (let (($x45 (and (not $x106) $x60)))
 (let (($x65 (and (and (and (and (and (and $x45 $x97) $x28) $x58) $x54) $x18) $x83)))
 (let (($x93 (and $x65 $x7)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x29 (or false (or false (and (and true (or $x215 $x51)) (or $x9 $x35))))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x29)))
 (let (($x222 (and (and (and $x39 true) $x93) $x137)))
 (let (($x43 (= $x222 true)))
 (let (($x207 (= $x43 true)))
 (let (($x204 (= $x207 true)))
 (let (($x156 (and $x204 $x10)))
 (let (($x160 (and $x156 $x205)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x124 $x160)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x144 (and $x148 $x119)))
 (let (($x190 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x150 (and $x190 $x144)))
 (let (($x140 (=> $x150 $x188)))
 (not $x140))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x15 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x116 (= $x15 true)))
 (let (($x188 (= $x116 true)))
 (let (($x132 (forall ((input.ind-%var564X (_ BitVec 32)) )(let ((?x63 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var564X)))
 (let ((?x223 (input.spec-%var-x-1.1.1 input.ind-%var564X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var564X)))
 (=> $x76 (= ?x223 ?x63))))))
 ))
 (let (($x16 (forall ((input.ind-%var563X (_ BitVec 32)) )(let (($x133 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var563X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var563X)))
 (= $x76 $x133))))
 ))
 (let (($x6 (and $x16 $x132)))
 (let (($x205 (= $x6 true)))
 (let (($x178 (forall ((input.ind-%var558X (_ BitVec 32)) )(let ((?x103 (bvadd (bvmul input.ind-%var558X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x5))))
 (let ((?x223 (input.spec-%var-x-1.1.1 input.ind-%var558X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var558X)))
 (=> $x76 (= ?x223 ?x211))))))))
 ))
 (let (($x141 (forall ((input.ind-%var557X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var557X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var557X) (bvult input.ind-%var557X input.dst.llvm-%n)))))
 ))
 (let (($x138 (and $x141 $x178)))
 (let (($x10 (= $x138 true)))
 (let ((?x180 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x220 (concat ?x30 (concat ?x208 ?x180)))))
 (let (($x168 (= input.dst.llvm-%n ?x109)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x82 (concat ?x68 (concat ?x84 ?x94)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x89 (and $x102 $x168)))
 (let (($x151 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x137 (and $x151 $x89)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x22)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x79)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x20 $x64)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x75 $x78)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x55 $x80)))
 (let (($x90 (not $x91)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x90)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x33 $x77)))
 (let (($x60 (not $x44)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x41 $x31)))
 (let (($x45 (and (not $x106) $x60)))
 (let (($x65 (and (and (and (and (and (and $x45 $x97) $x28) $x58) $x54) $x18) $x83)))
 (let (($x93 (and $x65 $x7)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x29 (or false (or false (and (and true (or $x215 $x51)) (or $x9 $x35))))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x29)))
 (let (($x222 (and (and (and $x39 true) $x93) $x137)))
 (let (($x43 (= $x222 true)))
 (let (($x207 (= $x43 true)))
 (let (($x204 (= $x207 true)))
 (let (($x156 (and $x204 $x10)))
 (let (($x160 (and $x156 $x205)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x124 $x160)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x144 (and $x148 $x119)))
 (let (($x190 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x150 (and $x190 $x144)))
 (let (($x140 (=> $x150 $x188)))
 (not $x140))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x00
      #xff))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000000f)
                        (k!0 #x0000000e)
                        (k!0 #x0000000d)
                        (k!0 #x0000000c))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd3197c74)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff596d7c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xfdfefe00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff596d7f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd3197c77)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff596d7c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd3197c74)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd3197c75) #xff
    (ite (= x!0 #xd3197c74) #xff
    (ite (= x!0 #xfdfefe03) #x00
    (ite (= x!0 #xd3197c77) #xff
    (ite (= x!0 #xfdfefe01) #x00
    (ite (= x!0 #xd3197c76) #xff
    (ite (= x!0 #xfdfefe02) #x00
    (ite (= x!0 #xfdfefe00) #x00
    (ite (= x!0 #xff596d7f) #xfd
    (ite (= x!0 #xff596d7c) #x00
      #xfe)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x163 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x130 (= $x163 true)))
 (let (($x105 (= $x130 true)))
 (let (($x135 (forall ((input.ind-%var592X (_ BitVec 32)) )(let ((?x114 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var592X)))
 (let ((?x211 (input.spec-%var-x-1.1.1 input.ind-%var592X)))
 (let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var592X)))
 (=> $x141 (= ?x211 ?x114))))))
 ))
 (let (($x112 (forall ((input.ind-%var591X (_ BitVec 32)) )(let (($x120 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var591X)))
 (let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var591X)))
 (= $x141 $x120))))
 ))
 (let (($x122 (and $x112 $x135)))
 (let (($x172 (= $x122 true)))
 (let (($x152 (forall ((input.ind-%var586X (_ BitVec 32)) )(let ((?x150 (bvadd (bvmul input.ind-%var586X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x188))))
 (let ((?x211 (input.spec-%var-x-1.1.1 input.ind-%var586X)))
 (let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var586X)))
 (=> $x141 (= ?x211 ?x216))))))))
 ))
 (let (($x153 (forall ((input.ind-%var585X (_ BitVec 32)) )(let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var585X)))
 (= $x141 (and (bvule (_ bv0 32) input.ind-%var585X) (bvult input.ind-%var585X input.dst.llvm-%n)))))
 ))
 (let (($x177 (and $x153 $x152)))
 (let (($x66 (= $x177 true)))
 (let ((?x220 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x109 (concat ?x180 (concat ?x30 ?x220)))))
 (let (($x89 (= input.dst.llvm-%n ?x168)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x71 (concat ?x84 (concat ?x57 ?x17)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x137 (and $x102 $x89)))
 (let (($x161 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x222 (and $x161 $x137)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x50)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x54)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x58 $x20)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x67 $x88)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x59 $x55)))
 (let (($x91 (not $x80)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x91)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x12 $x33)))
 (let (($x44 (not $x77)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x27 $x56)))
 (let (($x45 (and (not $x106) $x44)))
 (let (($x7 (and (and (and (and (and (and $x45 $x97) $x47) $x85) $x23) $x78) $x62)))
 (let (($x93 (and $x7 $x18)))
 (let (($x218 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x74 (or false (or false (and (and true (or $x213 $x40)) (or $x81 $x218))))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x74)))
 (let (($x204 (and (and (and $x31 true) $x93) $x222)))
 (let (($x139 (= $x204 true)))
 (let (($x76 (= $x139 true)))
 (let (($x227 (= $x76 true)))
 (let (($x214 (and $x227 $x66)))
 (let (($x157 (and $x214 $x172)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x196 $x157)))
 (let (($x197 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x100 (and $x197 $x164)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x14 $x100)))
 (let (($x200 (=> $x185 $x105)))
 (not $x200))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x163 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x130 (= $x163 true)))
 (let (($x105 (= $x130 true)))
 (let (($x135 (forall ((input.ind-%var592X (_ BitVec 32)) )(let ((?x114 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var592X)))
 (let ((?x211 (input.spec-%var-x-1.1.1 input.ind-%var592X)))
 (let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var592X)))
 (=> $x141 (= ?x211 ?x114))))))
 ))
 (let (($x112 (forall ((input.ind-%var591X (_ BitVec 32)) )(let (($x120 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var591X)))
 (let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var591X)))
 (= $x141 $x120))))
 ))
 (let (($x122 (and $x112 $x135)))
 (let (($x172 (= $x122 true)))
 (let (($x152 (forall ((input.ind-%var586X (_ BitVec 32)) )(let ((?x150 (bvadd (bvmul input.ind-%var586X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x188))))
 (let ((?x211 (input.spec-%var-x-1.1.1 input.ind-%var586X)))
 (let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var586X)))
 (=> $x141 (= ?x211 ?x216))))))))
 ))
 (let (($x153 (forall ((input.ind-%var585X (_ BitVec 32)) )(let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var585X)))
 (= $x141 (and (bvule (_ bv0 32) input.ind-%var585X) (bvult input.ind-%var585X input.dst.llvm-%n)))))
 ))
 (let (($x177 (and $x153 $x152)))
 (let (($x66 (= $x177 true)))
 (let ((?x220 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x109 (concat ?x180 (concat ?x30 ?x220)))))
 (let (($x89 (= input.dst.llvm-%n ?x168)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x71 (concat ?x84 (concat ?x57 ?x17)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x137 (and $x102 $x89)))
 (let (($x161 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x222 (and $x161 $x137)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x50)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x54)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x58 $x20)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x67 $x88)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x59 $x55)))
 (let (($x91 (not $x80)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x91)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x12 $x33)))
 (let (($x44 (not $x77)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x27 $x56)))
 (let (($x45 (and (not $x106) $x44)))
 (let (($x7 (and (and (and (and (and (and $x45 $x97) $x47) $x85) $x23) $x78) $x62)))
 (let (($x93 (and $x7 $x18)))
 (let (($x218 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x74 (or false (or false (and (and true (or $x213 $x40)) (or $x81 $x218))))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x74)))
 (let (($x204 (and (and (and $x31 true) $x93) $x222)))
 (let (($x139 (= $x204 true)))
 (let (($x76 (= $x139 true)))
 (let (($x227 (= $x76 true)))
 (let (($x214 (and $x227 $x66)))
 (let (($x157 (and $x214 $x172)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x196 $x157)))
 (let (($x197 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x100 (and $x197 $x164)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x14 $x100)))
 (let (($x200 (=> $x185 $x105)))
 (not $x200))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (forall ((input.ind-%var610X (_ BitVec 32)) )(let ((?x185 (bvadd (bvmul input.ind-%var610X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x200))))
 (let ((?x216 (input.spec-%var-x-1.1.1 input.ind-%var610X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var610X)))
 (=> $x153 (= ?x216 ?x115))))))))
 ))
 (let (($x126 (forall ((input.ind-%var609X (_ BitVec 32)) )(let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var609X)))
 (= $x153 (and (bvule (_ bv0 32) input.ind-%var609X) (bvult input.ind-%var609X (_ bv0 32))))))
 ))
 (let (($x145 (and $x126 $x99)))
 (let (($x119 (= true true)))
 (let (($x191 (and $x119 $x145)))
 (let (($x206 (= $x191 true)))
 (let (($x226 (forall ((input.ind-%var604X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var604X)))
 (let ((?x216 (input.spec-%var-x-1.1.1 input.ind-%var604X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var604X)))
 (=> $x153 (= ?x216 ?x189))))))
 ))
 (let (($x186 (forall ((input.ind-%var603X (_ BitVec 32)) )(let (($x10 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var603X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var603X)))
 (= $x153 $x10))))
 ))
 (let (($x103 (and $x186 $x226)))
 (let (($x92 (= $x103 true)))
 (let (($x159 (forall ((input.ind-%var598X (_ BitVec 32)) )(let ((?x185 (bvadd (bvmul input.ind-%var598X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x200))))
 (let ((?x216 (input.spec-%var-x-1.1.1 input.ind-%var598X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var598X)))
 (=> $x153 (= ?x216 ?x115))))))))
 ))
 (let (($x116 (forall ((input.ind-%var597X (_ BitVec 32)) )(let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var597X)))
 (= $x153 (and (bvule (_ bv0 32) input.ind-%var597X) (bvult input.ind-%var597X input.dst.llvm-%n)))))
 ))
 (let (($x174 (and $x116 $x159)))
 (let (($x36 (= $x174 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x168 (concat ?x220 (concat ?x180 ?x109)))))
 (let (($x137 (= input.dst.llvm-%n ?x89)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x94 (concat ?x57 (concat ?x68 ?x13)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x222 (and $x102 $x137)))
 (let (($x121 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x204 (and $x121 $x222)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x64)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x23)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x67)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x85 $x58)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x28 $x53)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x90 $x59)))
 (let (($x80 (not $x55)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x80)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x60 $x12)))
 (let (($x77 (not $x33)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x24 $x41)))
 (let (($x45 (and (not $x106) $x77)))
 (let (($x18 (and (and (and (and (and (and $x45 $x97) $x95) $x79) $x75) $x88) $x65)))
 (let (($x93 (and $x18 $x78)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x43 (or false (or false (and (and true (or $x179 $x9)) (or $x42 $x29))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x43)))
 (let (($x227 (and (and (and $x56 true) $x93) $x204)))
 (let (($x176 (= $x227 true)))
 (let (($x141 (= $x176 true)))
 (let (($x34 (= $x141 true)))
 (let (($x201 (and $x34 $x36)))
 (let (($x160 (and $x201 $x92)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x70 (and $x148 $x160)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x107 (and $x48 $x70)))
 (let (($x125 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x5 (and $x125 $x107)))
 (let (($x96 (=> $x5 $x206)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (forall ((input.ind-%var610X (_ BitVec 32)) )(let ((?x185 (bvadd (bvmul input.ind-%var610X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x200))))
 (let ((?x216 (input.spec-%var-x-1.1.1 input.ind-%var610X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var610X)))
 (=> $x153 (= ?x216 ?x115))))))))
 ))
 (let (($x126 (forall ((input.ind-%var609X (_ BitVec 32)) )(let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var609X)))
 (= $x153 (and (bvule (_ bv0 32) input.ind-%var609X) (bvult input.ind-%var609X (_ bv0 32))))))
 ))
 (let (($x145 (and $x126 $x99)))
 (let (($x119 (= true true)))
 (let (($x191 (and $x119 $x145)))
 (let (($x206 (= $x191 true)))
 (let (($x226 (forall ((input.ind-%var604X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var604X)))
 (let ((?x216 (input.spec-%var-x-1.1.1 input.ind-%var604X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var604X)))
 (=> $x153 (= ?x216 ?x189))))))
 ))
 (let (($x186 (forall ((input.ind-%var603X (_ BitVec 32)) )(let (($x10 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var603X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var603X)))
 (= $x153 $x10))))
 ))
 (let (($x103 (and $x186 $x226)))
 (let (($x92 (= $x103 true)))
 (let (($x159 (forall ((input.ind-%var598X (_ BitVec 32)) )(let ((?x185 (bvadd (bvmul input.ind-%var598X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x200))))
 (let ((?x216 (input.spec-%var-x-1.1.1 input.ind-%var598X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var598X)))
 (=> $x153 (= ?x216 ?x115))))))))
 ))
 (let (($x116 (forall ((input.ind-%var597X (_ BitVec 32)) )(let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var597X)))
 (= $x153 (and (bvule (_ bv0 32) input.ind-%var597X) (bvult input.ind-%var597X input.dst.llvm-%n)))))
 ))
 (let (($x174 (and $x116 $x159)))
 (let (($x36 (= $x174 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x168 (concat ?x220 (concat ?x180 ?x109)))))
 (let (($x137 (= input.dst.llvm-%n ?x89)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x94 (concat ?x57 (concat ?x68 ?x13)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x222 (and $x102 $x137)))
 (let (($x121 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x204 (and $x121 $x222)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x64)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x23)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x67)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x85 $x58)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x28 $x53)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x90 $x59)))
 (let (($x80 (not $x55)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x80)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x60 $x12)))
 (let (($x77 (not $x33)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x24 $x41)))
 (let (($x45 (and (not $x106) $x77)))
 (let (($x18 (and (and (and (and (and (and $x45 $x97) $x95) $x79) $x75) $x88) $x65)))
 (let (($x93 (and $x18 $x78)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x43 (or false (or false (and (and true (or $x179 $x9)) (or $x42 $x29))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x43)))
 (let (($x227 (and (and (and $x56 true) $x93) $x204)))
 (let (($x176 (= $x227 true)))
 (let (($x141 (= $x176 true)))
 (let (($x34 (= $x141 true)))
 (let (($x201 (and $x34 $x36)))
 (let (($x160 (and $x201 $x92)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x70 (and $x148 $x160)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x107 (and $x48 $x70)))
 (let (($x125 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x5 (and $x125 $x107)))
 (let (($x96 (=> $x5 $x206)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var609X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var610X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #xfc
    (ite (= x!0 #x0000000b) #x02
    (ite (= x!0 #x0000000a) #xff
    (ite (= x!0 #x00000008) #xc9
    (ite (= x!0 #x00000009) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x0000000b)
                          (k!2 #x0000000a)
                          (k!2 #x00000009)
                          (k!2 #x00000008))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var609X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var610X!1 () (_ BitVec 32)
    #x0dcb14c4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x07631505)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0c110cc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb6b1007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2dbb0043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2dbb0041) #x15
    (ite (= x!0 #xfb6b1006) #x11
    (ite (= x!0 #x2dbb0040) #x05
    (ite (= x!0 #x0c110cc3) #x00
    (ite (= x!0 #x2dbb0043) #x07
    (ite (= x!0 #x0c110cc2) #x00
    (ite (= x!0 #x2dbb0042) #x63
    (ite (= x!0 #x0c110cc1) #x00
    (ite (= x!0 #x0c110cc0) #x00
    (ite (= x!0 #xfb6b1004) #xc0
      #x0c)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x07631505 x!0)
         (ite (bvule #x07631506 x!0)
              (ite (bvule #x0dcb14c4 x!0) #x0dcb14c4 #x07631506)
              #x07631505)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0dcb14c4) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x19 (forall ((input.ind-%var644X (_ BitVec 32)) )(let ((?x5 (bvadd (bvmul input.ind-%var644X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x210))))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var644X)))
 (let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var644X)))
 (=> $x116 (= ?x115 ?x96))))))))
 ))
 (let (($x123 (forall ((input.ind-%var643X (_ BitVec 32)) )(let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var643X)))
 (= $x116 (and (bvule (_ bv0 32) input.ind-%var643X) (bvult input.ind-%var643X (_ bv0 32))))))
 ))
 (let (($x61 (and $x123 $x19)))
 (let (($x134 (= true true)))
 (let (($x49 (and $x134 $x61)))
 (let (($x173 (= $x49 true)))
 (let (($x112 (forall ((input.ind-%var638X (_ BitVec 32)) )(let ((?x122 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var638X)))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var638X)))
 (let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var638X)))
 (=> $x116 (= ?x115 ?x122))))))
 ))
 (let (($x178 (forall ((input.ind-%var637X (_ BitVec 32)) )(let (($x133 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var637X)))
 (let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var637X)))
 (= $x116 $x133))))
 ))
 (let (($x167 (and $x178 $x112)))
 (let (($x172 (= $x167 true)))
 (let (($x147 (forall ((input.ind-%var632X (_ BitVec 32)) )(let ((?x5 (bvadd (bvmul input.ind-%var632X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x210))))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var632X)))
 (let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var632X)))
 (=> $x116 (= ?x115 ?x96))))))))
 ))
 (let (($x105 (forall ((input.ind-%var631X (_ BitVec 32)) )(let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var631X)))
 (= $x116 (and (bvule (_ bv0 32) input.ind-%var631X) (bvult input.ind-%var631X input.dst.llvm-%n)))))
 ))
 (let (($x129 (and $x105 $x147)))
 (let (($x151 (= $x129 true)))
 (let ((?x168 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x89 (concat ?x109 (concat ?x220 ?x168)))))
 (let (($x222 (= input.dst.llvm-%n ?x137)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x17 (concat ?x68 (concat ?x84 ?x73)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x204 (and $x102 $x222)))
 (let (($x146 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x227 (and $x146 $x204)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x20)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x75)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x28)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x79 $x85)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x47 $x83)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x91 $x90)))
 (let (($x55 (not $x59)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x55)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x44 $x60)))
 (let (($x33 (not $x12)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x51 $x27)))
 (let (($x45 (and (not $x106) $x33)))
 (let (($x78 (and (and (and (and (and (and $x45 $x97) $x72) $x54) $x67) $x53) $x7)))
 (let (($x93 (and $x78 $x88)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x139 (or false (or false (and (and true (or $x149 $x81)) (or $x39 $x74))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x139)))
 (let (($x34 (and (and (and $x41 true) $x93) $x227)))
 (let (($x25 (= $x34 true)))
 (let (($x153 (= $x25 true)))
 (let (($x140 (= $x153 true)))
 (let (($x132 (and $x140 $x151)))
 (let (($x156 (and $x132 $x172)))
 (let (($x197 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x38 (and $x197 $x156)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x138 (and $x190 $x38)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x16 (and $x37 $x138)))
 (let (($x202 (=> $x16 $x173)))
 (not $x202)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x19 (forall ((input.ind-%var644X (_ BitVec 32)) )(let ((?x5 (bvadd (bvmul input.ind-%var644X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x210))))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var644X)))
 (let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var644X)))
 (=> $x116 (= ?x115 ?x96))))))))
 ))
 (let (($x123 (forall ((input.ind-%var643X (_ BitVec 32)) )(let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var643X)))
 (= $x116 (and (bvule (_ bv0 32) input.ind-%var643X) (bvult input.ind-%var643X (_ bv0 32))))))
 ))
 (let (($x61 (and $x123 $x19)))
 (let (($x134 (= true true)))
 (let (($x49 (and $x134 $x61)))
 (let (($x173 (= $x49 true)))
 (let (($x112 (forall ((input.ind-%var638X (_ BitVec 32)) )(let ((?x122 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var638X)))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var638X)))
 (let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var638X)))
 (=> $x116 (= ?x115 ?x122))))))
 ))
 (let (($x178 (forall ((input.ind-%var637X (_ BitVec 32)) )(let (($x133 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var637X)))
 (let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var637X)))
 (= $x116 $x133))))
 ))
 (let (($x167 (and $x178 $x112)))
 (let (($x172 (= $x167 true)))
 (let (($x147 (forall ((input.ind-%var632X (_ BitVec 32)) )(let ((?x5 (bvadd (bvmul input.ind-%var632X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x210))))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var632X)))
 (let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var632X)))
 (=> $x116 (= ?x115 ?x96))))))))
 ))
 (let (($x105 (forall ((input.ind-%var631X (_ BitVec 32)) )(let (($x116 (input.spec-%var-x-1.0.1 input.ind-%var631X)))
 (= $x116 (and (bvule (_ bv0 32) input.ind-%var631X) (bvult input.ind-%var631X input.dst.llvm-%n)))))
 ))
 (let (($x129 (and $x105 $x147)))
 (let (($x151 (= $x129 true)))
 (let ((?x168 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x89 (concat ?x109 (concat ?x220 ?x168)))))
 (let (($x222 (= input.dst.llvm-%n ?x137)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x17 (concat ?x68 (concat ?x84 ?x73)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x204 (and $x102 $x222)))
 (let (($x146 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x227 (and $x146 $x204)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x20)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x75)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x28)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x79 $x85)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x47 $x83)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x91 $x90)))
 (let (($x55 (not $x59)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x55)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x44 $x60)))
 (let (($x33 (not $x12)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x51 $x27)))
 (let (($x45 (and (not $x106) $x33)))
 (let (($x78 (and (and (and (and (and (and $x45 $x97) $x72) $x54) $x67) $x53) $x7)))
 (let (($x93 (and $x78 $x88)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x139 (or false (or false (and (and true (or $x149 $x81)) (or $x39 $x74))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x139)))
 (let (($x34 (and (and (and $x41 true) $x93) $x227)))
 (let (($x25 (= $x34 true)))
 (let (($x153 (= $x25 true)))
 (let (($x140 (= $x153 true)))
 (let (($x132 (and $x140 $x151)))
 (let (($x156 (and $x132 $x172)))
 (let (($x197 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x38 (and $x197 $x156)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x138 (and $x190 $x38)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x16 (and $x37 $x138)))
 (let (($x202 (=> $x16 $x173)))
 (not $x202)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var643X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var644X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #xfc
    (ite (= x!0 #x0000000b) #x02
    (ite (= x!0 #x0000000a) #xff
    (ite (= x!0 #x00000008) #xc9
    (ite (= x!0 #x00000009) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x0000000b)
                          (k!2 #x0000000a)
                          (k!2 #x00000009)
                          (k!2 #x00000008))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var644X!1 () (_ BitVec 32)
    #x0dcb14c4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.ind-%var643X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x07631505)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0c110cc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb6b1007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2dbb0043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2dbb0041) #x15
    (ite (= x!0 #xfb6b1006) #x11
    (ite (= x!0 #x2dbb0040) #x05
    (ite (= x!0 #x0c110cc3) #x00
    (ite (= x!0 #x2dbb0043) #x07
    (ite (= x!0 #x0c110cc2) #x00
    (ite (= x!0 #x0c110cc1) #x00
    (ite (= x!0 #x2dbb0042) #x63
    (ite (= x!0 #x0c110cc0) #x00
    (ite (= x!0 #xfb6b1004) #xc0
      #x0c)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x07631505 x!0)
         (ite (bvule #x07631506 x!0)
              (ite (bvule #x0dcb14c4 x!0) #x0dcb14c4 #x07631506)
              #x07631505)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0dcb14c4) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x177 (forall ((input.ind-%var678X (_ BitVec 32)) )(let ((?x16 (bvadd (bvmul input.ind-%var678X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x175))))
 (let ((?x96 (input.spec-%var-x-1.1.1 input.ind-%var678X)))
 (let (($x105 (input.spec-%var-x-1.0.1 input.ind-%var678X)))
 (=> $x105 (= ?x96 ?x202))))))))
 ))
 (let (($x188 (forall ((input.ind-%var677X (_ BitVec 32)) )(let (($x105 (input.spec-%var-x-1.0.1 input.ind-%var677X)))
 (= $x105 (and (bvule (_ bv0 32) input.ind-%var677X) (bvult input.ind-%var677X input.dst.llvm-%x)))))
 ))
 (let (($x120 (and $x188 $x177)))
 (let (($x117 (= true true)))
 (let (($x155 (and $x117 $x120)))
 (let (($x111 (= $x155 true)))
 (let (($x186 (forall ((input.ind-%var672X (_ BitVec 32)) )(let ((?x103 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var672X)))
 (let ((?x96 (input.spec-%var-x-1.1.1 input.ind-%var672X)))
 (let (($x105 (input.spec-%var-x-1.0.1 input.ind-%var672X)))
 (=> $x105 (= ?x96 ?x103))))))
 ))
 (let (($x152 (forall ((input.ind-%var671X (_ BitVec 32)) )(let (($x144 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var671X)))
 (let (($x105 (input.spec-%var-x-1.0.1 input.ind-%var671X)))
 (= $x105 $x144))))
 ))
 (let (($x219 (and $x152 $x186)))
 (let (($x92 (= $x219 true)))
 (let (($x215 (forall ((input.ind-%var666X (_ BitVec 32)) )(let ((?x16 (bvadd (bvmul input.ind-%var666X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x175))))
 (let ((?x96 (input.spec-%var-x-1.1.1 input.ind-%var666X)))
 (let (($x105 (input.spec-%var-x-1.0.1 input.ind-%var666X)))
 (=> $x105 (= ?x96 ?x202))))))))
 ))
 (let (($x136 (forall ((input.ind-%var665X (_ BitVec 32)) )(let (($x105 (input.spec-%var-x-1.0.1 input.ind-%var665X)))
 (= $x105 (and (bvule (_ bv0 32) input.ind-%var665X) (bvult input.ind-%var665X input.dst.llvm-%n)))))
 ))
 (let (($x187 (and $x136 $x215)))
 (let (($x161 (= $x187 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x137 (concat ?x168 (concat ?x109 ?x89)))))
 (let (($x204 (= input.dst.llvm-%n ?x222)))
 (let ((?x11 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x13 (concat ?x84 (concat ?x57 ?x11)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x227 (and $x102 $x204)))
 (let (($x181 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x34 (and $x181 $x227)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x58)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x67)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (and $x54 $x79)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x95 $x62)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x80 $x91)))
 (let (($x59 (not $x90)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x59)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x77 $x44)))
 (let (($x12 (not $x60)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x40 $x24)))
 (let (($x45 (and (not $x106) $x12)))
 (let (($x88 (and (and (and (and (and (and $x45 $x97) $x22) $x23) $x28) $x83) $x18)))
 (let (($x93 (and $x88 $x53)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x81)))
 (let (($x176 (or false (or false (and (and true (or $x35 $x42)) (or $x31 $x43))))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x176)))
 (let (($x140 (and (and (and $x27 true) $x93) $x34)))
 (let (($x15 (= $x140 true)))
 (let (($x116 (= $x15 true)))
 (let (($x142 (= $x116 true)))
 (let (($x108 (and $x142 $x161)))
 (let (($x66 (and $x108 $x92)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x205 (and $x48 $x66)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x98 (and $x14 $x205)))
 (let (($x209 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x135 (and $x209 $x98)))
 (let (($x143 (=> $x135 $x111)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x177 (forall ((input.ind-%var678X (_ BitVec 32)) )(let ((?x16 (bvadd (bvmul input.ind-%var678X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x175))))
 (let ((?x96 (input.spec-%var-x-1.1.1 input.ind-%var678X)))
 (let (($x105 (input.spec-%var-x-1.0.1 input.ind-%var678X)))
 (=> $x105 (= ?x96 ?x202))))))))
 ))
 (let (($x188 (forall ((input.ind-%var677X (_ BitVec 32)) )(let (($x105 (input.spec-%var-x-1.0.1 input.ind-%var677X)))
 (= $x105 (and (bvule (_ bv0 32) input.ind-%var677X) (bvult input.ind-%var677X input.dst.llvm-%x)))))
 ))
 (let (($x120 (and $x188 $x177)))
 (let (($x117 (= true true)))
 (let (($x155 (and $x117 $x120)))
 (let (($x111 (= $x155 true)))
 (let (($x186 (forall ((input.ind-%var672X (_ BitVec 32)) )(let ((?x103 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var672X)))
 (let ((?x96 (input.spec-%var-x-1.1.1 input.ind-%var672X)))
 (let (($x105 (input.spec-%var-x-1.0.1 input.ind-%var672X)))
 (=> $x105 (= ?x96 ?x103))))))
 ))
 (let (($x152 (forall ((input.ind-%var671X (_ BitVec 32)) )(let (($x144 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var671X)))
 (let (($x105 (input.spec-%var-x-1.0.1 input.ind-%var671X)))
 (= $x105 $x144))))
 ))
 (let (($x219 (and $x152 $x186)))
 (let (($x92 (= $x219 true)))
 (let (($x215 (forall ((input.ind-%var666X (_ BitVec 32)) )(let ((?x16 (bvadd (bvmul input.ind-%var666X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x175))))
 (let ((?x96 (input.spec-%var-x-1.1.1 input.ind-%var666X)))
 (let (($x105 (input.spec-%var-x-1.0.1 input.ind-%var666X)))
 (=> $x105 (= ?x96 ?x202))))))))
 ))
 (let (($x136 (forall ((input.ind-%var665X (_ BitVec 32)) )(let (($x105 (input.spec-%var-x-1.0.1 input.ind-%var665X)))
 (= $x105 (and (bvule (_ bv0 32) input.ind-%var665X) (bvult input.ind-%var665X input.dst.llvm-%n)))))
 ))
 (let (($x187 (and $x136 $x215)))
 (let (($x161 (= $x187 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x137 (concat ?x168 (concat ?x109 ?x89)))))
 (let (($x204 (= input.dst.llvm-%n ?x222)))
 (let ((?x11 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x13 (concat ?x84 (concat ?x57 ?x11)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x227 (and $x102 $x204)))
 (let (($x181 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x34 (and $x181 $x227)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x58)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x67)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (and $x54 $x79)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x95 $x62)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x80 $x91)))
 (let (($x59 (not $x90)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x59)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x77 $x44)))
 (let (($x12 (not $x60)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x40 $x24)))
 (let (($x45 (and (not $x106) $x12)))
 (let (($x88 (and (and (and (and (and (and $x45 $x97) $x22) $x23) $x28) $x83) $x18)))
 (let (($x93 (and $x88 $x53)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x81)))
 (let (($x176 (or false (or false (and (and true (or $x35 $x42)) (or $x31 $x43))))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x176)))
 (let (($x140 (and (and (and $x27 true) $x93) $x34)))
 (let (($x15 (= $x140 true)))
 (let (($x116 (= $x15 true)))
 (let (($x142 (= $x116 true)))
 (let (($x108 (and $x142 $x161)))
 (let (($x66 (and $x108 $x92)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x205 (and $x48 $x66)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x98 (and $x14 $x205)))
 (let (($x209 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x135 (and $x209 $x98)))
 (let (($x143 (=> $x135 $x111)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00a05340)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var678X!1 () (_ BitVec 32)
    #x04d22002)
  (define-fun input.ind-%var677X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00024344)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x28002820)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00a05343)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00024347)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00a05340)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00024344)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00a05343) #x28
    (ite (= x!0 #x00a05340) #x20
    (ite (= x!0 #x00a05341) #x28
      #x00))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x04d22002) false
      (not (bvule (concat (k!2 #x00024347)
                          (k!2 #x00024346)
                          (k!2 #x00024345)
                          (k!2 #x00024344))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x04d22002) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var678X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9ce8cd24)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf7769a50)
  (define-fun input.ind-%var677X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xf939e178)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf7769a53)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9ce8cd27)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf7769a50)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9ce8cd24)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf7769a50) #x78
    (ite (= x!0 #xf7769a52) #x39
    (ite (= x!0 #x9ce8cd25) #x00
    (ite (= x!0 #xf939e17b) #x00
    (ite (= x!0 #x9ce8cd27) #x00
    (ite (= x!0 #xf939e17a) #x00
    (ite (= x!0 #x9ce8cd24) #x00
    (ite (= x!0 #x9ce8cd26) #x00
    (ite (= x!0 #xf7769a51) #xe1
    (ite (= x!0 #xf939e179) #x00
    (ite (= x!0 #xf7769a53) #xf9
      #x10))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x38 (forall ((input.ind-%var712X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var712X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x158))))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var712X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var712X)))
 (=> $x136 (= ?x202 ?x143))))))))
 ))
 (let (($x212 (forall ((input.ind-%var711X (_ BitVec 32)) )(let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var711X)))
 (= $x136 (and (bvule (_ bv0 32) input.ind-%var711X) (bvult input.ind-%var711X input.dst.llvm-%n)))))
 ))
 (let (($x198 (and $x212 $x38)))
 (let (($x192 (= true true)))
 (let (($x211 (and $x192 $x198)))
 (let (($x174 (= $x211 true)))
 (let (($x178 (forall ((input.ind-%var706X (_ BitVec 32)) )(let ((?x167 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var706X)))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var706X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var706X)))
 (=> $x136 (= ?x202 ?x167))))))
 ))
 (let (($x159 (forall ((input.ind-%var705X (_ BitVec 32)) )(let (($x100 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var705X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var705X)))
 (= $x136 $x100))))
 ))
 (let (($x214 (and $x159 $x178)))
 (let (($x172 (= $x214 true)))
 (let (($x213 (forall ((input.ind-%var700X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var700X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x158))))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var700X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var700X)))
 (=> $x136 (= ?x202 ?x143))))))))
 ))
 (let (($x184 (forall ((input.ind-%var699X (_ BitVec 32)) )(let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var699X)))
 (= $x136 (and (bvule (_ bv0 32) input.ind-%var699X) (bvult input.ind-%var699X input.dst.llvm-%n)))))
 ))
 (let (($x127 (and $x184 $x213)))
 (let (($x121 (= $x127 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x204 (concat ?x222 (concat ?x89 (concat ?x168 ?x137)))))
 (let (($x227 (= input.dst.llvm-%n ?x204)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x73 (concat ?x57 (concat ?x68 ?x82)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x34 (and $x102 $x227)))
 (let (($x207 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x140 (and $x207 $x34)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x85)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x28)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x23 $x54)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x72 $x65)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x55 $x80)))
 (let (($x90 (not $x91)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x90)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x33 $x77)))
 (let (($x60 (not $x44)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x9 $x51)))
 (let (($x45 (and (not $x106) $x60)))
 (let (($x53 (and (and (and (and (and (and $x45 $x97) $x50) $x75) $x47) $x62) $x78)))
 (let (($x93 (and $x53 $x83)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x42)))
 (let (($x25 (or false (or false (and (and true (or $x218 $x39)) (or $x56 $x139))))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x25)))
 (let (($x142 (and (and (and $x24 true) $x93) $x140)))
 (let (($x130 (= $x142 true)))
 (let (($x105 (= $x130 true)))
 (let (($x126 (= $x105 true)))
 (let (($x163 (and $x126 $x121)))
 (let (($x36 (and $x163 $x172)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x114 (and $x190 $x36)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x32 (and $x125 $x114)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x226 (and $x203 $x32)))
 (let (($x10 (=> $x226 $x174)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x38 (forall ((input.ind-%var712X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var712X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x158))))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var712X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var712X)))
 (=> $x136 (= ?x202 ?x143))))))))
 ))
 (let (($x212 (forall ((input.ind-%var711X (_ BitVec 32)) )(let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var711X)))
 (= $x136 (and (bvule (_ bv0 32) input.ind-%var711X) (bvult input.ind-%var711X input.dst.llvm-%n)))))
 ))
 (let (($x198 (and $x212 $x38)))
 (let (($x192 (= true true)))
 (let (($x211 (and $x192 $x198)))
 (let (($x174 (= $x211 true)))
 (let (($x178 (forall ((input.ind-%var706X (_ BitVec 32)) )(let ((?x167 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var706X)))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var706X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var706X)))
 (=> $x136 (= ?x202 ?x167))))))
 ))
 (let (($x159 (forall ((input.ind-%var705X (_ BitVec 32)) )(let (($x100 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var705X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var705X)))
 (= $x136 $x100))))
 ))
 (let (($x214 (and $x159 $x178)))
 (let (($x172 (= $x214 true)))
 (let (($x213 (forall ((input.ind-%var700X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var700X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x158))))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var700X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var700X)))
 (=> $x136 (= ?x202 ?x143))))))))
 ))
 (let (($x184 (forall ((input.ind-%var699X (_ BitVec 32)) )(let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var699X)))
 (= $x136 (and (bvule (_ bv0 32) input.ind-%var699X) (bvult input.ind-%var699X input.dst.llvm-%n)))))
 ))
 (let (($x127 (and $x184 $x213)))
 (let (($x121 (= $x127 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x204 (concat ?x222 (concat ?x89 (concat ?x168 ?x137)))))
 (let (($x227 (= input.dst.llvm-%n ?x204)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x73 (concat ?x57 (concat ?x68 ?x82)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x34 (and $x102 $x227)))
 (let (($x207 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x140 (and $x207 $x34)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x85)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x28)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x23 $x54)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x72 $x65)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x55 $x80)))
 (let (($x90 (not $x91)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x90)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x33 $x77)))
 (let (($x60 (not $x44)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x9 $x51)))
 (let (($x45 (and (not $x106) $x60)))
 (let (($x53 (and (and (and (and (and (and $x45 $x97) $x50) $x75) $x47) $x62) $x78)))
 (let (($x93 (and $x53 $x83)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x42)))
 (let (($x25 (or false (or false (and (and true (or $x218 $x39)) (or $x56 $x139))))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x25)))
 (let (($x142 (and (and (and $x24 true) $x93) $x140)))
 (let (($x130 (= $x142 true)))
 (let (($x105 (= $x130 true)))
 (let (($x126 (= $x105 true)))
 (let (($x163 (and $x126 $x121)))
 (let (($x36 (and $x163 $x172)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x114 (and $x190 $x36)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x32 (and $x125 $x114)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x226 (and $x203 $x32)))
 (let (($x10 (=> $x226 $x174)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (= false true)))
 (let (($x225 (= $x124 true)))
 (let (($x151 (forall ((input.ind-%var724X (_ BitVec 32)) )(let ((?x144 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var724X)))
 (let ((?x143 (input.spec-%var-x-1.1.1 input.ind-%var724X)))
 (let (($x184 (input.spec-%var-x-1.0.1 input.ind-%var724X)))
 (=> $x184 (= ?x143 ?x144))))))
 ))
 (let (($x161 (forall ((input.ind-%var723X (_ BitVec 32)) )(let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var723X)))
 (let (($x184 (input.spec-%var-x-1.0.1 input.ind-%var723X)))
 (= $x184 $x206))))
 ))
 (let (($x189 (and $x161 $x151)))
 (let (($x224 (= $x189 true)))
 (let (($x119 (forall ((input.ind-%var718X (_ BitVec 32)) )(let ((?x226 (bvadd (bvmul input.ind-%var718X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv1 32))) (select input.dst.llvm-mem ?x226))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv2 32))) ?x198))))
 (let ((?x143 (input.spec-%var-x-1.1.1 input.ind-%var718X)))
 (let (($x184 (input.spec-%var-x-1.0.1 input.ind-%var718X)))
 (=> $x184 (= ?x143 ?x179))))))))
 ))
 (let (($x170 (forall ((input.ind-%var717X (_ BitVec 32)) )(let (($x184 (input.spec-%var-x-1.0.1 input.ind-%var717X)))
 (= $x184 (and (bvule (_ bv0 32) input.ind-%var717X) (bvult input.ind-%var717X input.dst.llvm-%n)))))
 ))
 (let (($x122 (and $x170 $x119)))
 (let (($x96 (= $x122 true)))
 (let ((?x222 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x227 (concat ?x204 (concat ?x137 (concat ?x89 ?x222)))))
 (let (($x34 (= input.dst.llvm-%n ?x227)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x11 (concat ?x68 (concat ?x84 ?x71)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x140 (and $x102 $x34)))
 (let (($x76 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x142 (and $x76 $x140)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x79)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x47)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x72)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x75 $x23)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x22 $x7)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x59 $x55)))
 (let (($x91 (not $x80)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x91)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x12 $x33)))
 (let (($x44 (not $x77)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x81 $x40)))
 (let (($x45 (and (not $x106) $x44)))
 (let (($x83 (and (and (and (and (and (and $x45 $x97) $x64) $x67) $x95) $x65) $x88)))
 (let (($x93 (and $x83 $x62)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x39)))
 (let (($x15 (or false (or false (and (and true (or $x29 $x31)) (or $x41 $x176))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x126 (and (and (and $x51 true) $x93) $x142)))
 (let (($x118 (= $x126 true)))
 (let (($x136 (= $x118 true)))
 (let (($x123 (= $x136 true)))
 (let (($x169 (and $x123 $x96)))
 (let (($x112 (and $x169 $x224)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x200 (and $x14 $x112)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x99 (and $x37 $x200)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x16 (and $x223 $x99)))
 (let (($x183 (=> $x16 $x225)))
 (not $x183)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (= false true)))
 (let (($x225 (= $x124 true)))
 (let (($x151 (forall ((input.ind-%var724X (_ BitVec 32)) )(let ((?x144 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var724X)))
 (let ((?x143 (input.spec-%var-x-1.1.1 input.ind-%var724X)))
 (let (($x184 (input.spec-%var-x-1.0.1 input.ind-%var724X)))
 (=> $x184 (= ?x143 ?x144))))))
 ))
 (let (($x161 (forall ((input.ind-%var723X (_ BitVec 32)) )(let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var723X)))
 (let (($x184 (input.spec-%var-x-1.0.1 input.ind-%var723X)))
 (= $x184 $x206))))
 ))
 (let (($x189 (and $x161 $x151)))
 (let (($x224 (= $x189 true)))
 (let (($x119 (forall ((input.ind-%var718X (_ BitVec 32)) )(let ((?x226 (bvadd (bvmul input.ind-%var718X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv1 32))) (select input.dst.llvm-mem ?x226))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv2 32))) ?x198))))
 (let ((?x143 (input.spec-%var-x-1.1.1 input.ind-%var718X)))
 (let (($x184 (input.spec-%var-x-1.0.1 input.ind-%var718X)))
 (=> $x184 (= ?x143 ?x179))))))))
 ))
 (let (($x170 (forall ((input.ind-%var717X (_ BitVec 32)) )(let (($x184 (input.spec-%var-x-1.0.1 input.ind-%var717X)))
 (= $x184 (and (bvule (_ bv0 32) input.ind-%var717X) (bvult input.ind-%var717X input.dst.llvm-%n)))))
 ))
 (let (($x122 (and $x170 $x119)))
 (let (($x96 (= $x122 true)))
 (let ((?x222 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x227 (concat ?x204 (concat ?x137 (concat ?x89 ?x222)))))
 (let (($x34 (= input.dst.llvm-%n ?x227)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x11 (concat ?x68 (concat ?x84 ?x71)))))
 (let (($x102 (= input.dst.llvm-%x ?x87)))
 (let (($x140 (and $x102 $x34)))
 (let (($x76 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x142 (and $x76 $x140)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x79)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x47)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x72)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x75 $x23)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x22 $x7)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x59 $x55)))
 (let (($x91 (not $x80)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x8 $x21)))
 (let (($x97 (and (not $x46) $x91)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x12 $x33)))
 (let (($x44 (not $x77)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x81 $x40)))
 (let (($x45 (and (not $x106) $x44)))
 (let (($x83 (and (and (and (and (and (and $x45 $x97) $x64) $x67) $x95) $x65) $x88)))
 (let (($x93 (and $x83 $x62)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x39)))
 (let (($x15 (or false (or false (and (and true (or $x29 $x31)) (or $x41 $x176))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x126 (and (and (and $x51 true) $x93) $x142)))
 (let (($x118 (= $x126 true)))
 (let (($x136 (= $x118 true)))
 (let (($x123 (= $x136 true)))
 (let (($x169 (and $x123 $x96)))
 (let (($x112 (and $x169 $x224)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x200 (and $x14 $x112)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x99 (and $x37 $x200)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x16 (and $x223 $x99)))
 (let (($x183 (=> $x16 $x225)))
 (not $x183)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1d7f81c0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc5111f64)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1d7f81c3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc5111f67)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1d7f81c0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc5111f64)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #xc5111f67)
                        (k!0 #xc5111f66)
                        (k!0 #xc5111f65)
                        (k!0 #xc5111f64))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x69fd1474)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x593251f4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x593251f7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x69fd1477)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x593251f4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x69fd1474)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x110 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (= $x110 false)))
 (let (($x210 (= $x113 true)))
 (let (($x175 (forall ((input.ind-%var752X (_ BitVec 32)) )(let ((?x185 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var752X)))
 (let ((?x147 (input.spec-%var-x-1.1.1 input.ind-%var752X)))
 (let (($x189 (input.spec-%var-x-1.0.1 input.ind-%var752X)))
 (=> $x189 (= ?x147 ?x185))))))
 ))
 (let (($x164 (forall ((input.ind-%var751X (_ BitVec 32)) )(let (($x156 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var751X)))
 (let (($x189 (input.spec-%var-x-1.0.1 input.ind-%var751X)))
 (= $x189 $x156))))
 ))
 (let (($x205 (and $x164 $x175)))
 (let (($x193 (= $x205 true)))
 (let (($x114 (forall ((input.ind-%var746X (_ BitVec 32)) )(let ((?x132 (bvadd (bvmul input.ind-%var746X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem ?x132))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv2 32))) ?x61))))
 (let ((?x147 (input.spec-%var-x-1.1.1 input.ind-%var746X)))
 (let (($x189 (input.spec-%var-x-1.0.1 input.ind-%var746X)))
 (=> $x189 (= ?x147 ?x134))))))))
 ))
 (let (($x190 (forall ((input.ind-%var745X (_ BitVec 32)) )(let (($x189 (input.spec-%var-x-1.0.1 input.ind-%var745X)))
 (= $x189 (and (bvule (_ bv0 32) input.ind-%var745X) (bvult input.ind-%var745X input.dst.llvm-%n)))))
 ))
 (let (($x108 (and $x190 $x114)))
 (let (($x219 (= $x108 true)))
 (let (($x206 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x206 true)))
 (let (($x161 (= $x187 true)))
 (let (($x146 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (= $x146 true)))
 (let (($x122 (= $x119 true)))
 (let (($x96 (= $x122 true)))
 (let (($x192 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x198 (= $x192 true)))
 (let (($x10 (= $x198 true)))
 (let (($x179 (= $x10 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (= $x48 true)))
 (let (($x174 (= $x211 true)))
 (let (($x212 (= $x174 true)))
 (let (($x143 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x213 (= $x143 true)))
 (let (($x32 (= $x213 true)))
 (let (($x226 (= $x32 true)))
 (let ((?x204 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x168 (bvadd input.dst.llvm-%x ?x204)))
 (let (($x118 (bvugt ?x168 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd ?x168 (_ bv3 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x34 (bvugt ?x168 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x180)))
 (let (($x184 (or false (or false (and (and true (or $x227 $x34)) (or $x126 $x118))))))
 (let (($x111 (=> (bvule ?x168 (bvsub (bvadd ?x168 (_ bv4 32)) (_ bv1 32))) $x184)))
 (let (($x109 (=> (and $x110 (bvule ?x168 (bvsub (bvadd ?x168 (_ bv4 32)) (_ bv1 32)))) $x184)))
 (let (($x89 (= $x109 true)))
 (let (($x177 (= $x89 true)))
 (let (($x166 (= $x177 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x153)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x105)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x65 $x88)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x54 $x83)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x67 $x78)))
 (let (($x75 (not $x22)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x64 $x28)))
 (let (($x72 (and (not $x50) $x75)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x55 $x80)))
 (let (($x97 (not $x91)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x139 $x176)))
 (let (($x20 (and (not $x59) $x97)))
 (let (($x13 (and (and (and (and (and (and $x20 $x72) $x7) $x53) $x79) $x93) $x116)))
 (let (($x68 (and $x13 $x141)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x21 (or false (or false (and (and true (or $x130 $x81)) (or $x33 $x77))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x21)))
 (let (($x73 (and $x90 $x68)))
 (let (($x84 (= $x73 true)))
 (let (($x71 (= $x84 true)))
 (let (($x17 (= $x71 true)))
 (let (($x52 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x31 (= $x52 true)))
 (let (($x74 (= $x31 true)))
 (let ((?x42 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x9 (= (_ bv0 2) ?x42)))
 (let (($x218 (= $x9 true)))
 (let (($x39 (= $x218 true)))
 (let (($x56 (and $x39 $x74)))
 (let (($x82 (and $x56 $x17)))
 (let (($x170 (and $x82 $x166)))
 (let (($x128 (and $x170 $x226)))
 (let (($x38 (and $x128 $x212)))
 (let (($x221 (and $x38 $x179)))
 (let (($x169 (and $x221 $x96)))
 (let (($x144 (and $x169 $x161)))
 (let (($x152 (and $x144 $x219)))
 (let (($x216 (and $x152 $x193)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x129 (and $x125 $x216)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x133 (and $x196 $x129)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x154 (and $x197 $x133)))
 (let (($x157 (=> $x154 $x210)))
 (not $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x110 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (= $x110 false)))
 (let (($x210 (= $x113 true)))
 (let (($x175 (forall ((input.ind-%var752X (_ BitVec 32)) )(let ((?x185 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var752X)))
 (let ((?x147 (input.spec-%var-x-1.1.1 input.ind-%var752X)))
 (let (($x189 (input.spec-%var-x-1.0.1 input.ind-%var752X)))
 (=> $x189 (= ?x147 ?x185))))))
 ))
 (let (($x164 (forall ((input.ind-%var751X (_ BitVec 32)) )(let (($x156 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var751X)))
 (let (($x189 (input.spec-%var-x-1.0.1 input.ind-%var751X)))
 (= $x189 $x156))))
 ))
 (let (($x205 (and $x164 $x175)))
 (let (($x193 (= $x205 true)))
 (let (($x114 (forall ((input.ind-%var746X (_ BitVec 32)) )(let ((?x132 (bvadd (bvmul input.ind-%var746X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem ?x132))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv2 32))) ?x61))))
 (let ((?x147 (input.spec-%var-x-1.1.1 input.ind-%var746X)))
 (let (($x189 (input.spec-%var-x-1.0.1 input.ind-%var746X)))
 (=> $x189 (= ?x147 ?x134))))))))
 ))
 (let (($x190 (forall ((input.ind-%var745X (_ BitVec 32)) )(let (($x189 (input.spec-%var-x-1.0.1 input.ind-%var745X)))
 (= $x189 (and (bvule (_ bv0 32) input.ind-%var745X) (bvult input.ind-%var745X input.dst.llvm-%n)))))
 ))
 (let (($x108 (and $x190 $x114)))
 (let (($x219 (= $x108 true)))
 (let (($x206 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x206 true)))
 (let (($x161 (= $x187 true)))
 (let (($x146 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (= $x146 true)))
 (let (($x122 (= $x119 true)))
 (let (($x96 (= $x122 true)))
 (let (($x192 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x198 (= $x192 true)))
 (let (($x10 (= $x198 true)))
 (let (($x179 (= $x10 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (= $x48 true)))
 (let (($x174 (= $x211 true)))
 (let (($x212 (= $x174 true)))
 (let (($x143 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x213 (= $x143 true)))
 (let (($x32 (= $x213 true)))
 (let (($x226 (= $x32 true)))
 (let ((?x204 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x168 (bvadd input.dst.llvm-%x ?x204)))
 (let (($x118 (bvugt ?x168 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd ?x168 (_ bv3 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x34 (bvugt ?x168 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x180)))
 (let (($x184 (or false (or false (and (and true (or $x227 $x34)) (or $x126 $x118))))))
 (let (($x111 (=> (bvule ?x168 (bvsub (bvadd ?x168 (_ bv4 32)) (_ bv1 32))) $x184)))
 (let (($x109 (=> (and $x110 (bvule ?x168 (bvsub (bvadd ?x168 (_ bv4 32)) (_ bv1 32)))) $x184)))
 (let (($x89 (= $x109 true)))
 (let (($x177 (= $x89 true)))
 (let (($x166 (= $x177 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x153)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x105)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x65 $x88)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x54 $x83)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x67 $x78)))
 (let (($x75 (not $x22)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x64 $x28)))
 (let (($x72 (and (not $x50) $x75)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x55 $x80)))
 (let (($x97 (not $x91)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x139 $x176)))
 (let (($x20 (and (not $x59) $x97)))
 (let (($x13 (and (and (and (and (and (and $x20 $x72) $x7) $x53) $x79) $x93) $x116)))
 (let (($x68 (and $x13 $x141)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x21 (or false (or false (and (and true (or $x130 $x81)) (or $x33 $x77))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x21)))
 (let (($x73 (and $x90 $x68)))
 (let (($x84 (= $x73 true)))
 (let (($x71 (= $x84 true)))
 (let (($x17 (= $x71 true)))
 (let (($x52 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x31 (= $x52 true)))
 (let (($x74 (= $x31 true)))
 (let ((?x42 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x9 (= (_ bv0 2) ?x42)))
 (let (($x218 (= $x9 true)))
 (let (($x39 (= $x218 true)))
 (let (($x56 (and $x39 $x74)))
 (let (($x82 (and $x56 $x17)))
 (let (($x170 (and $x82 $x166)))
 (let (($x128 (and $x170 $x226)))
 (let (($x38 (and $x128 $x212)))
 (let (($x221 (and $x38 $x179)))
 (let (($x169 (and $x221 $x96)))
 (let (($x144 (and $x169 $x161)))
 (let (($x152 (and $x144 $x219)))
 (let (($x216 (and $x152 $x193)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x129 (and $x125 $x216)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x133 (and $x196 $x129)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x154 (and $x197 $x133)))
 (let (($x157 (=> $x154 $x210)))
 (not $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x58600000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0440d548)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2601aa54)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0440d54b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2601aa57)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0440d548)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2601aa54)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x58600003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x58600002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x58600001 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x58600000 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x10000000 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x30c80044)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x83fb1180)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x11fd2890)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x11fd2893)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x30c80047)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x11fd2890)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x30c80044)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!6 (bvadd #x83fb1183 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x83fb1182 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x83fb1181 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x83fb1180 (bvmul #x00000004 x!0))))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000100 x!0)
         (ite (bvule #x00000101 x!0) #x00000101 #x00000100)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x94)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x95)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (and $x78 $x72)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x67 $x76)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x58 $x55)))
 (let (($x91 (not $x80)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x139 $x176)))
 (let (($x20 (and (not $x59) $x91)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x77 $x44)))
 (let (($x8 (not $x45)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x35 $x42)))
 (let (($x90 (and (not $x12) $x8)))
 (let (($x79 (and (and (and (and (and (and $x90 $x20) $x28) $x18) $x23) $x207) $x53)))
 (let (($x11 (and $x79 $x54)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x106 (or false (or false (and (and true (or $x74 $x56)) (or $x51 $x130))))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x106)))
 (let (($x181 (and $x33 $x11)))
 (let (($x201 (= $x181 true)))
 (let (($x112 (= $x201 true)))
 (let (($x43 (forall ((input.ind-%var780X (_ BitVec 32)) )(let ((?x154 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var780X)))
 (let ((?x119 (input.spec-%var-x-1.1.1 input.ind-%var780X)))
 (let (($x32 (input.spec-%var-x-1.0.1 input.ind-%var780X)))
 (=> $x32 (= ?x119 ?x154))))))
 ))
 (let (($x205 (forall ((input.ind-%var779X (_ BitVec 32)) )(let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var779X)))
 (let (($x32 (input.spec-%var-x-1.0.1 input.ind-%var779X)))
 (= $x32 $x185))))
 ))
 (let (($x41 (and $x205 $x43)))
 (let (($x195 (= $x41 true)))
 (let (($x114 (forall ((input.ind-%var774X (_ BitVec 32)) )(let ((?x155 (bvadd (bvmul input.ind-%var774X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x19))))
 (let ((?x119 (input.spec-%var-x-1.1.1 input.ind-%var774X)))
 (let (($x32 (input.spec-%var-x-1.0.1 input.ind-%var774X)))
 (=> $x32 (= ?x119 ?x134))))))))
 ))
 (let (($x10 (forall ((input.ind-%var773X (_ BitVec 32)) )(let (($x32 (input.spec-%var-x-1.0.1 input.ind-%var773X)))
 (= $x32 (and (bvule (_ bv0 32) input.ind-%var773X) (bvult input.ind-%var773X input.dst.llvm-%n)))))
 ))
 (let (($x108 (and $x10 $x114)))
 (let (($x219 (= $x108 true)))
 (let ((?x222 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x126 (concat ?x34 (concat ?x188 ?x222)))))
 (let (($x136 (= input.dst.llvm-%n ?x118)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x102 (concat ?x17 (concat ?x68 ?x153)))))
 (let (($x30 (= input.dst.llvm-%x ?x110)))
 (let (($x123 (and $x30 $x136)))
 (let (($x105 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x104 (and $x105 $x123)))
 (let (($x109 (and (and (and $x33 true) $x11) $x104)))
 (let (($x89 (= $x109 true)))
 (let (($x177 (= $x89 true)))
 (let (($x166 (= $x177 true)))
 (let (($x152 (and $x166 $x219)))
 (let (($x49 (and $x152 $x195)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x224 (and $x37 $x49)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x69 (and $x29 $x224)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x149 (and $x203 $x69)))
 (let (($x200 (=> $x149 $x112)))
 (not $x200))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x94)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x95)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (and $x78 $x72)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x67 $x76)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x58 $x55)))
 (let (($x91 (not $x80)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x139 $x176)))
 (let (($x20 (and (not $x59) $x91)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x77 $x44)))
 (let (($x8 (not $x45)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x35 $x42)))
 (let (($x90 (and (not $x12) $x8)))
 (let (($x79 (and (and (and (and (and (and $x90 $x20) $x28) $x18) $x23) $x207) $x53)))
 (let (($x11 (and $x79 $x54)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x106 (or false (or false (and (and true (or $x74 $x56)) (or $x51 $x130))))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x106)))
 (let (($x181 (and $x33 $x11)))
 (let (($x201 (= $x181 true)))
 (let (($x112 (= $x201 true)))
 (let (($x43 (forall ((input.ind-%var780X (_ BitVec 32)) )(let ((?x154 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var780X)))
 (let ((?x119 (input.spec-%var-x-1.1.1 input.ind-%var780X)))
 (let (($x32 (input.spec-%var-x-1.0.1 input.ind-%var780X)))
 (=> $x32 (= ?x119 ?x154))))))
 ))
 (let (($x205 (forall ((input.ind-%var779X (_ BitVec 32)) )(let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var779X)))
 (let (($x32 (input.spec-%var-x-1.0.1 input.ind-%var779X)))
 (= $x32 $x185))))
 ))
 (let (($x41 (and $x205 $x43)))
 (let (($x195 (= $x41 true)))
 (let (($x114 (forall ((input.ind-%var774X (_ BitVec 32)) )(let ((?x155 (bvadd (bvmul input.ind-%var774X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x19))))
 (let ((?x119 (input.spec-%var-x-1.1.1 input.ind-%var774X)))
 (let (($x32 (input.spec-%var-x-1.0.1 input.ind-%var774X)))
 (=> $x32 (= ?x119 ?x134))))))))
 ))
 (let (($x10 (forall ((input.ind-%var773X (_ BitVec 32)) )(let (($x32 (input.spec-%var-x-1.0.1 input.ind-%var773X)))
 (= $x32 (and (bvule (_ bv0 32) input.ind-%var773X) (bvult input.ind-%var773X input.dst.llvm-%n)))))
 ))
 (let (($x108 (and $x10 $x114)))
 (let (($x219 (= $x108 true)))
 (let ((?x222 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x126 (concat ?x34 (concat ?x188 ?x222)))))
 (let (($x136 (= input.dst.llvm-%n ?x118)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x102 (concat ?x17 (concat ?x68 ?x153)))))
 (let (($x30 (= input.dst.llvm-%x ?x110)))
 (let (($x123 (and $x30 $x136)))
 (let (($x105 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x104 (and $x105 $x123)))
 (let (($x109 (and (and (and $x33 true) $x11) $x104)))
 (let (($x89 (= $x109 true)))
 (let (($x177 (= $x89 true)))
 (let (($x166 (= $x177 true)))
 (let (($x152 (and $x166 $x219)))
 (let (($x49 (and $x152 $x195)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x224 (and $x37 $x49)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x69 (and $x29 $x224)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x149 (and $x203 $x69)))
 (let (($x200 (=> $x149 $x112)))
 (not $x200))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x210 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x216 (= (_ bv0 2) ?x210)))
 (let (($x157 (= $x216 true)))
 (let (($x143 (forall ((input.ind-%var792X (_ BitVec 32)) )(let ((?x183 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var792X)))
 (let ((?x134 (input.spec-%var-x-1.1.1 input.ind-%var792X)))
 (let (($x10 (input.spec-%var-x-1.0.1 input.ind-%var792X)))
 (=> $x10 (= ?x134 ?x183))))))
 ))
 (let (($x124 (forall ((input.ind-%var791X (_ BitVec 32)) )(let (($x187 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var791X)))
 (let (($x10 (input.spec-%var-x-1.0.1 input.ind-%var791X)))
 (= $x10 $x187))))
 ))
 (let (($x211 (and $x124 $x143)))
 (let (($x174 (= $x211 true)))
 (let (($x122 (forall ((input.ind-%var786X (_ BitVec 32)) )(let ((?x149 (bvadd (bvmul input.ind-%var786X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv1 32))) (select input.dst.llvm-mem ?x149))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv2 32))) ?x200))))
 (let ((?x134 (input.spec-%var-x-1.1.1 input.ind-%var786X)))
 (let (($x10 (input.spec-%var-x-1.0.1 input.ind-%var786X)))
 (=> $x10 (= ?x134 ?x5))))))))
 ))
 (let (($x63 (forall ((input.ind-%var785X (_ BitVec 32)) )(let (($x10 (input.spec-%var-x-1.0.1 input.ind-%var785X)))
 (= $x10 (and (bvule (_ bv0 32) input.ind-%var785X) (bvult input.ind-%var785X input.dst.llvm-%n)))))
 ))
 (let (($x179 (and $x63 $x122)))
 (let (($x146 (= $x179 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x118 (concat ?x222 (concat ?x34 ?x126)))))
 (let (($x123 (= input.dst.llvm-%n ?x136)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x82 (concat ?x68 (concat ?x84 ?x87)))))
 (let (($x30 (= input.dst.llvm-%x ?x110)))
 (let (($x104 (and $x30 $x123)))
 (let (($x57 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x109 (and $x57 $x104)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x7)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x23)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x67)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (and $x18 $x78)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x50 $x22)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x97 $x58)))
 (let (($x80 (not $x55)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x139 $x176)))
 (let (($x20 (and (not $x59) $x80)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x21 $x77)))
 (let (($x45 (not $x44)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x218 $x60)))
 (let (($x90 (and (not $x12) $x45)))
 (let (($x54 (and (and (and (and (and (and $x90 $x20) $x64) $x85) $x75) $x76) $x88)))
 (let (($x11 (and $x54 $x207)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x184 (or false (or false (and (and true (or $x27 $x25)) (or $x15 $x81))))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x166 (and (and (and $x42 true) $x11) $x109)))
 (let (($x213 (= $x166 true)))
 (let (($x32 (= $x213 true)))
 (let (($x38 (= $x32 true)))
 (let (($x170 (and $x38 $x146)))
 (let (($x202 (and $x170 $x174)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x70 (and $x209 $x202)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x162 (and $x196 $x70)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x221 (and $x197 $x162)))
 (let (($x131 (=> $x221 $x157)))
 (not $x131))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x210 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x216 (= (_ bv0 2) ?x210)))
 (let (($x157 (= $x216 true)))
 (let (($x143 (forall ((input.ind-%var792X (_ BitVec 32)) )(let ((?x183 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var792X)))
 (let ((?x134 (input.spec-%var-x-1.1.1 input.ind-%var792X)))
 (let (($x10 (input.spec-%var-x-1.0.1 input.ind-%var792X)))
 (=> $x10 (= ?x134 ?x183))))))
 ))
 (let (($x124 (forall ((input.ind-%var791X (_ BitVec 32)) )(let (($x187 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var791X)))
 (let (($x10 (input.spec-%var-x-1.0.1 input.ind-%var791X)))
 (= $x10 $x187))))
 ))
 (let (($x211 (and $x124 $x143)))
 (let (($x174 (= $x211 true)))
 (let (($x122 (forall ((input.ind-%var786X (_ BitVec 32)) )(let ((?x149 (bvadd (bvmul input.ind-%var786X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv1 32))) (select input.dst.llvm-mem ?x149))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv2 32))) ?x200))))
 (let ((?x134 (input.spec-%var-x-1.1.1 input.ind-%var786X)))
 (let (($x10 (input.spec-%var-x-1.0.1 input.ind-%var786X)))
 (=> $x10 (= ?x134 ?x5))))))))
 ))
 (let (($x63 (forall ((input.ind-%var785X (_ BitVec 32)) )(let (($x10 (input.spec-%var-x-1.0.1 input.ind-%var785X)))
 (= $x10 (and (bvule (_ bv0 32) input.ind-%var785X) (bvult input.ind-%var785X input.dst.llvm-%n)))))
 ))
 (let (($x179 (and $x63 $x122)))
 (let (($x146 (= $x179 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x118 (concat ?x222 (concat ?x34 ?x126)))))
 (let (($x123 (= input.dst.llvm-%n ?x136)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x82 (concat ?x68 (concat ?x84 ?x87)))))
 (let (($x30 (= input.dst.llvm-%x ?x110)))
 (let (($x104 (and $x30 $x123)))
 (let (($x57 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x109 (and $x57 $x104)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x7)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x23)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x67)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (and $x18 $x78)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x50 $x22)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x97 $x58)))
 (let (($x80 (not $x55)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x139 $x176)))
 (let (($x20 (and (not $x59) $x80)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x21 $x77)))
 (let (($x45 (not $x44)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x218 $x60)))
 (let (($x90 (and (not $x12) $x45)))
 (let (($x54 (and (and (and (and (and (and $x90 $x20) $x64) $x85) $x75) $x76) $x88)))
 (let (($x11 (and $x54 $x207)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x184 (or false (or false (and (and true (or $x27 $x25)) (or $x15 $x81))))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x166 (and (and (and $x42 true) $x11) $x109)))
 (let (($x213 (= $x166 true)))
 (let (($x32 (= $x213 true)))
 (let (($x38 (= $x32 true)))
 (let (($x170 (and $x38 $x146)))
 (let (($x202 (and $x170 $x174)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x70 (and $x209 $x202)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x162 (and $x196 $x70)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x221 (and $x197 $x162)))
 (let (($x131 (=> $x221 $x157)))
 (not $x131))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x19 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x224 (= $x19 true)))
 (let (($x129 (= $x224 true)))
 (let (($x189 (forall ((input.ind-%var804X (_ BitVec 32)) )(let ((?x205 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var804X)))
 (let ((?x5 (input.spec-%var-x-1.1.1 input.ind-%var804X)))
 (let (($x63 (input.spec-%var-x-1.0.1 input.ind-%var804X)))
 (=> $x63 (= ?x5 ?x205))))))
 ))
 (let (($x154 (forall ((input.ind-%var803X (_ BitVec 32)) )(let (($x108 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var803X)))
 (let (($x63 (input.spec-%var-x-1.0.1 input.ind-%var803X)))
 (= $x63 $x108))))
 ))
 (let (($x192 (and $x154 $x189)))
 (let (($x155 (= $x192 true)))
 (let (($x119 (forall ((input.ind-%var798X (_ BitVec 32)) )(let ((?x221 (bvadd (bvmul input.ind-%var798X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x157))))
 (let ((?x5 (input.spec-%var-x-1.1.1 input.ind-%var798X)))
 (let (($x63 (input.spec-%var-x-1.0.1 input.ind-%var798X)))
 (=> $x63 (= ?x5 ?x116))))))))
 ))
 (let (($x112 (forall ((input.ind-%var797X (_ BitVec 32)) )(let (($x63 (input.spec-%var-x-1.0.1 input.ind-%var797X)))
 (= $x63 (and (bvule (_ bv0 32) input.ind-%var797X) (bvult input.ind-%var797X input.dst.llvm-%n)))))
 ))
 (let (($x138 (and $x112 $x119)))
 (let (($x36 (= $x138 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x136 (concat ?x126 (concat ?x222 ?x118)))))
 (let (($x104 (= input.dst.llvm-%n ?x123)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x153 (concat ?x84 (concat ?x17 ?x73)))))
 (let (($x30 (= input.dst.llvm-%x ?x110)))
 (let (($x109 (and $x30 $x104)))
 (let (($x93 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x166 (and $x93 $x109)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x72)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x75)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x50)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x85 $x18)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x28 $x47)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x91 $x97)))
 (let (($x55 (not $x58)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x139 $x176)))
 (let (($x20 (and (not $x59) $x55)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x8 $x21)))
 (let (($x44 (not $x77)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x31 $x35)))
 (let (($x90 (and (not $x12) $x44)))
 (let (($x207 (and (and (and (and (and (and $x90 $x20) $x65) $x95) $x67) $x22) $x79)))
 (let (($x11 (and $x207 $x76)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x25)))
 (let (($x89 (or false (or false (and (and true (or $x46 $x51)) (or $x40 $x106))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x89)))
 (let (($x38 (and (and (and $x60 true) $x11) $x166)))
 (let (($x198 (= $x38 true)))
 (let (($x10 (= $x198 true)))
 (let (($x103 (= $x10 true)))
 (let (($x172 (and $x103 $x36)))
 (let (($x61 (and $x172 $x155)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x49 (and $x29 $x61)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x48 (and $x148 $x49)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x190 (and $x223 $x48)))
 (let (($x151 (=> $x190 $x129)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x19 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x224 (= $x19 true)))
 (let (($x129 (= $x224 true)))
 (let (($x189 (forall ((input.ind-%var804X (_ BitVec 32)) )(let ((?x205 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var804X)))
 (let ((?x5 (input.spec-%var-x-1.1.1 input.ind-%var804X)))
 (let (($x63 (input.spec-%var-x-1.0.1 input.ind-%var804X)))
 (=> $x63 (= ?x5 ?x205))))))
 ))
 (let (($x154 (forall ((input.ind-%var803X (_ BitVec 32)) )(let (($x108 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var803X)))
 (let (($x63 (input.spec-%var-x-1.0.1 input.ind-%var803X)))
 (= $x63 $x108))))
 ))
 (let (($x192 (and $x154 $x189)))
 (let (($x155 (= $x192 true)))
 (let (($x119 (forall ((input.ind-%var798X (_ BitVec 32)) )(let ((?x221 (bvadd (bvmul input.ind-%var798X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x157))))
 (let ((?x5 (input.spec-%var-x-1.1.1 input.ind-%var798X)))
 (let (($x63 (input.spec-%var-x-1.0.1 input.ind-%var798X)))
 (=> $x63 (= ?x5 ?x116))))))))
 ))
 (let (($x112 (forall ((input.ind-%var797X (_ BitVec 32)) )(let (($x63 (input.spec-%var-x-1.0.1 input.ind-%var797X)))
 (= $x63 (and (bvule (_ bv0 32) input.ind-%var797X) (bvult input.ind-%var797X input.dst.llvm-%n)))))
 ))
 (let (($x138 (and $x112 $x119)))
 (let (($x36 (= $x138 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x136 (concat ?x126 (concat ?x222 ?x118)))))
 (let (($x104 (= input.dst.llvm-%n ?x123)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x153 (concat ?x84 (concat ?x17 ?x73)))))
 (let (($x30 (= input.dst.llvm-%x ?x110)))
 (let (($x109 (and $x30 $x104)))
 (let (($x93 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x166 (and $x93 $x109)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x72)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x75)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x50)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x85 $x18)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x28 $x47)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x91 $x97)))
 (let (($x55 (not $x58)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x139 $x176)))
 (let (($x20 (and (not $x59) $x55)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x8 $x21)))
 (let (($x44 (not $x77)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x31 $x35)))
 (let (($x90 (and (not $x12) $x44)))
 (let (($x207 (and (and (and (and (and (and $x90 $x20) $x65) $x95) $x67) $x22) $x79)))
 (let (($x11 (and $x207 $x76)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x25)))
 (let (($x89 (or false (or false (and (and true (or $x46 $x51)) (or $x40 $x106))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x89)))
 (let (($x38 (and (and (and $x60 true) $x11) $x166)))
 (let (($x198 (= $x38 true)))
 (let (($x10 (= $x198 true)))
 (let (($x103 (= $x10 true)))
 (let (($x172 (and $x103 $x36)))
 (let (($x61 (and $x172 $x155)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x49 (and $x29 $x61)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x48 (and $x148 $x49)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x190 (and $x223 $x48)))
 (let (($x151 (=> $x190 $x129)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (forall ((input.ind-%var822X (_ BitVec 32)) )(let ((?x190 (bvadd (bvmul input.ind-%var822X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem ?x190))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv2 32))) ?x151))))
 (let ((?x116 (input.spec-%var-x-1.1.1 input.ind-%var822X)))
 (let (($x112 (input.spec-%var-x-1.0.1 input.ind-%var822X)))
 (=> $x112 (= ?x116 ?x219))))))))
 ))
 (let (($x171 (forall ((input.ind-%var821X (_ BitVec 32)) )(let (($x112 (input.spec-%var-x-1.0.1 input.ind-%var821X)))
 (= $x112 (and (bvule (_ bv0 32) input.ind-%var821X) (bvult input.ind-%var821X input.dst.llvm-%n)))))
 ))
 (let (($x208 (and $x171 $x150)))
 (let (($x70 (= true true)))
 (let (($x163 (and $x70 $x208)))
 (let (($x66 (= $x163 true)))
 (let (($x107 (forall ((input.ind-%var816X (_ BitVec 32)) )(let ((?x133 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var816X)))
 (let ((?x116 (input.spec-%var-x-1.1.1 input.ind-%var816X)))
 (let (($x112 (input.spec-%var-x-1.0.1 input.ind-%var816X)))
 (=> $x112 (= ?x116 ?x133))))))
 ))
 (let (($x164 (forall ((input.ind-%var815X (_ BitVec 32)) )(let (($x146 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var815X)))
 (let (($x112 (input.spec-%var-x-1.0.1 input.ind-%var815X)))
 (= $x112 $x146))))
 ))
 (let (($x149 (and $x164 $x107)))
 (let (($x168 (= $x149 true)))
 (let (($x113 (forall ((input.ind-%var810X (_ BitVec 32)) )(let ((?x190 (bvadd (bvmul input.ind-%var810X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem ?x190))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv2 32))) ?x151))))
 (let ((?x116 (input.spec-%var-x-1.1.1 input.ind-%var810X)))
 (let (($x112 (input.spec-%var-x-1.0.1 input.ind-%var810X)))
 (=> $x112 (= ?x116 ?x219))))))))
 ))
 (let (($x216 (forall ((input.ind-%var809X (_ BitVec 32)) )(let (($x112 (input.spec-%var-x-1.0.1 input.ind-%var809X)))
 (= $x112 (and (bvule (_ bv0 32) input.ind-%var809X) (bvult input.ind-%var809X input.dst.llvm-%n)))))
 ))
 (let (($x181 (and $x216 $x113)))
 (let (($x14 (= $x181 true)))
 (let ((?x136 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x123 (concat ?x118 (concat ?x126 ?x136)))))
 (let (($x109 (= input.dst.llvm-%n ?x104)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x87 (concat ?x17 (concat ?x68 ?x71)))))
 (let (($x30 (= input.dst.llvm-%x ?x110)))
 (let (($x166 (and $x30 $x109)))
 (let (($x62 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x38 (and $x62 $x166)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x78)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x67)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x28)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x95 $x85)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x64 $x53)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x80 $x91)))
 (let (($x58 (not $x97)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x139 $x176)))
 (let (($x20 (and (not $x59) $x58)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x45 $x8)))
 (let (($x77 (not $x21)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x56 $x218)))
 (let (($x90 (and (not $x12) $x77)))
 (let (($x76 (and (and (and (and (and (and $x90 $x20) $x83) $x23) $x50) $x47) $x54)))
 (let (($x11 (and $x76 $x22)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x213 (or false (or false (and (and true (or $x24 $x15)) (or $x33 $x184))))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x213)))
 (let (($x103 (and (and (and $x35 true) $x11) $x38)))
 (let (($x127 (= $x103 true)))
 (let (($x63 (= $x127 true)))
 (let (($x101 (= $x63 true)))
 (let (($x135 (and $x101 $x14)))
 (let (($x202 (and $x135 $x168)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x196 $x202)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x43 (and $x203 $x169)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x200 (and $x96 $x43)))
 (let (($x217 (=> $x200 $x66)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (forall ((input.ind-%var822X (_ BitVec 32)) )(let ((?x190 (bvadd (bvmul input.ind-%var822X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem ?x190))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv2 32))) ?x151))))
 (let ((?x116 (input.spec-%var-x-1.1.1 input.ind-%var822X)))
 (let (($x112 (input.spec-%var-x-1.0.1 input.ind-%var822X)))
 (=> $x112 (= ?x116 ?x219))))))))
 ))
 (let (($x171 (forall ((input.ind-%var821X (_ BitVec 32)) )(let (($x112 (input.spec-%var-x-1.0.1 input.ind-%var821X)))
 (= $x112 (and (bvule (_ bv0 32) input.ind-%var821X) (bvult input.ind-%var821X input.dst.llvm-%n)))))
 ))
 (let (($x208 (and $x171 $x150)))
 (let (($x70 (= true true)))
 (let (($x163 (and $x70 $x208)))
 (let (($x66 (= $x163 true)))
 (let (($x107 (forall ((input.ind-%var816X (_ BitVec 32)) )(let ((?x133 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var816X)))
 (let ((?x116 (input.spec-%var-x-1.1.1 input.ind-%var816X)))
 (let (($x112 (input.spec-%var-x-1.0.1 input.ind-%var816X)))
 (=> $x112 (= ?x116 ?x133))))))
 ))
 (let (($x164 (forall ((input.ind-%var815X (_ BitVec 32)) )(let (($x146 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var815X)))
 (let (($x112 (input.spec-%var-x-1.0.1 input.ind-%var815X)))
 (= $x112 $x146))))
 ))
 (let (($x149 (and $x164 $x107)))
 (let (($x168 (= $x149 true)))
 (let (($x113 (forall ((input.ind-%var810X (_ BitVec 32)) )(let ((?x190 (bvadd (bvmul input.ind-%var810X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem ?x190))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv2 32))) ?x151))))
 (let ((?x116 (input.spec-%var-x-1.1.1 input.ind-%var810X)))
 (let (($x112 (input.spec-%var-x-1.0.1 input.ind-%var810X)))
 (=> $x112 (= ?x116 ?x219))))))))
 ))
 (let (($x216 (forall ((input.ind-%var809X (_ BitVec 32)) )(let (($x112 (input.spec-%var-x-1.0.1 input.ind-%var809X)))
 (= $x112 (and (bvule (_ bv0 32) input.ind-%var809X) (bvult input.ind-%var809X input.dst.llvm-%n)))))
 ))
 (let (($x181 (and $x216 $x113)))
 (let (($x14 (= $x181 true)))
 (let ((?x136 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x123 (concat ?x118 (concat ?x126 ?x136)))))
 (let (($x109 (= input.dst.llvm-%n ?x104)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x87 (concat ?x17 (concat ?x68 ?x71)))))
 (let (($x30 (= input.dst.llvm-%x ?x110)))
 (let (($x166 (and $x30 $x109)))
 (let (($x62 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x38 (and $x62 $x166)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x78)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x67)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x28)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x95 $x85)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x64 $x53)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x80 $x91)))
 (let (($x58 (not $x97)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x139 $x176)))
 (let (($x20 (and (not $x59) $x58)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x45 $x8)))
 (let (($x77 (not $x21)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x56 $x218)))
 (let (($x90 (and (not $x12) $x77)))
 (let (($x76 (and (and (and (and (and (and $x90 $x20) $x83) $x23) $x50) $x47) $x54)))
 (let (($x11 (and $x76 $x22)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x213 (or false (or false (and (and true (or $x24 $x15)) (or $x33 $x184))))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x213)))
 (let (($x103 (and (and (and $x35 true) $x11) $x38)))
 (let (($x127 (= $x103 true)))
 (let (($x63 (= $x127 true)))
 (let (($x101 (= $x63 true)))
 (let (($x135 (and $x101 $x14)))
 (let (($x202 (and $x135 $x168)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x196 $x202)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x43 (and $x203 $x169)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x200 (and $x96 $x43)))
 (let (($x217 (=> $x200 $x66)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x225 (forall ((input.ind-%var840X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var840X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x208))))
 (let ((?x219 (input.spec-%var-x-1.1.1 input.ind-%var840X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var840X)))
 (=> $x216 (= ?x219 ?x74))))))))
 ))
 (let (($x191 (forall ((input.ind-%var839X (_ BitVec 32)) )(let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var839X)))
 (= $x216 (and (bvule (_ bv0 32) input.ind-%var839X) (bvult input.ind-%var839X input.dst.llvm-%n)))))
 ))
 (let (($x212 (and $x191 $x225)))
 (let (($x195 (= true true)))
 (let (($x86 (and $x195 $x212)))
 (let (($x178 (= $x86 true)))
 (let (($x170 (forall ((input.ind-%var834X (_ BitVec 32)) )(let ((?x108 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var834X)))
 (let ((?x219 (input.spec-%var-x-1.1.1 input.ind-%var834X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var834X)))
 (=> $x216 (= ?x219 ?x108))))))
 ))
 (let (($x36 (forall ((input.ind-%var833X (_ BitVec 32)) )(let (($x13 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var833X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var833X)))
 (= $x216 $x13))))
 ))
 (let (($x114 (and $x36 $x170)))
 (let (($x179 (= $x114 true)))
 (let (($x143 (forall ((input.ind-%var828X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var828X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x208))))
 (let ((?x219 (input.spec-%var-x-1.1.1 input.ind-%var828X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var828X)))
 (=> $x216 (= ?x219 ?x74))))))))
 ))
 (let (($x129 (forall ((input.ind-%var827X (_ BitVec 32)) )(let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var827X)))
 (= $x216 (and (bvule (_ bv0 32) input.ind-%var827X) (bvult input.ind-%var827X input.dst.llvm-%n)))))
 ))
 (let (($x174 (and $x129 $x143)))
 (let (($x5 (= $x174 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x104 (concat ?x136 (concat ?x118 ?x123)))))
 (let (($x166 (= input.dst.llvm-%n ?x109)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x73 (concat ?x68 (concat ?x84 ?x141)))))
 (let (($x30 (= input.dst.llvm-%x ?x110)))
 (let (($x38 (and $x30 $x166)))
 (let (($x111 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x103 (and $x111 $x38)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x18)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x50)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x64)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x23 $x95)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x65 $x88)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x55 $x80)))
 (let (($x97 (not $x91)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x139 $x176)))
 (let (($x20 (and (not $x59) $x97)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x44 $x45)))
 (let (($x21 (not $x8)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x25 $x31)))
 (let (($x90 (and (not $x12) $x21)))
 (let (($x22 (and (and (and (and (and (and $x90 $x20) $x94) $x75) $x28) $x53) $x207)))
 (let (($x11 (and $x22 $x47)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x198 (or false (or false (and (and true (or $x130 $x40)) (or $x42 $x89))))))
 (let (($x218 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x198)))
 (let (($x101 (and (and (and $x218 true) $x11) $x103)))
 (let (($x201 (= $x101 true)))
 (let (($x112 (= $x201 true)))
 (let (($x131 (= $x112 true)))
 (let (($x115 (and $x131 $x5)))
 (let (($x124 (and $x115 $x179)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x173 (and $x148 $x124)))
 (let (($x197 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x125 (and $x197 $x173)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x221 (and $x158 $x125)))
 (let (($x160 (=> $x221 $x178)))
 (not $x160)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x225 (forall ((input.ind-%var840X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var840X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x208))))
 (let ((?x219 (input.spec-%var-x-1.1.1 input.ind-%var840X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var840X)))
 (=> $x216 (= ?x219 ?x74))))))))
 ))
 (let (($x191 (forall ((input.ind-%var839X (_ BitVec 32)) )(let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var839X)))
 (= $x216 (and (bvule (_ bv0 32) input.ind-%var839X) (bvult input.ind-%var839X input.dst.llvm-%n)))))
 ))
 (let (($x212 (and $x191 $x225)))
 (let (($x195 (= true true)))
 (let (($x86 (and $x195 $x212)))
 (let (($x178 (= $x86 true)))
 (let (($x170 (forall ((input.ind-%var834X (_ BitVec 32)) )(let ((?x108 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var834X)))
 (let ((?x219 (input.spec-%var-x-1.1.1 input.ind-%var834X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var834X)))
 (=> $x216 (= ?x219 ?x108))))))
 ))
 (let (($x36 (forall ((input.ind-%var833X (_ BitVec 32)) )(let (($x13 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var833X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var833X)))
 (= $x216 $x13))))
 ))
 (let (($x114 (and $x36 $x170)))
 (let (($x179 (= $x114 true)))
 (let (($x143 (forall ((input.ind-%var828X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var828X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x208))))
 (let ((?x219 (input.spec-%var-x-1.1.1 input.ind-%var828X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var828X)))
 (=> $x216 (= ?x219 ?x74))))))))
 ))
 (let (($x129 (forall ((input.ind-%var827X (_ BitVec 32)) )(let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var827X)))
 (= $x216 (and (bvule (_ bv0 32) input.ind-%var827X) (bvult input.ind-%var827X input.dst.llvm-%n)))))
 ))
 (let (($x174 (and $x129 $x143)))
 (let (($x5 (= $x174 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x104 (concat ?x136 (concat ?x118 ?x123)))))
 (let (($x166 (= input.dst.llvm-%n ?x109)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x73 (concat ?x68 (concat ?x84 ?x141)))))
 (let (($x30 (= input.dst.llvm-%x ?x110)))
 (let (($x38 (and $x30 $x166)))
 (let (($x111 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x103 (and $x111 $x38)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x18)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x50)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x64)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x23 $x95)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x65 $x88)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x55 $x80)))
 (let (($x97 (not $x91)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x139 $x176)))
 (let (($x20 (and (not $x59) $x97)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x44 $x45)))
 (let (($x21 (not $x8)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x25 $x31)))
 (let (($x90 (and (not $x12) $x21)))
 (let (($x22 (and (and (and (and (and (and $x90 $x20) $x94) $x75) $x28) $x53) $x207)))
 (let (($x11 (and $x22 $x47)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x198 (or false (or false (and (and true (or $x130 $x40)) (or $x42 $x89))))))
 (let (($x218 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x198)))
 (let (($x101 (and (and (and $x218 true) $x11) $x103)))
 (let (($x201 (= $x101 true)))
 (let (($x112 (= $x201 true)))
 (let (($x131 (= $x112 true)))
 (let (($x115 (and $x131 $x5)))
 (let (($x124 (and $x115 $x179)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x173 (and $x148 $x124)))
 (let (($x197 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x125 (and $x197 $x173)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x221 (and $x158 $x125)))
 (let (($x160 (=> $x221 $x178)))
 (not $x160)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (= $x219 false)))
 (let (($x279 (= $x278 true)))
 (let (($x271 (forall ((input.ind-%var858X (_ BitVec 32)) )(let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var858X)))
 (let ((?x168 (input.spec-%var-x-1.1.1 input.ind-%var858X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var858X)))
 (=> $x142 (= ?x168 ?x235))))))
 ))
 (let (($x262 (forall ((input.ind-%var857X (_ BitVec 32)) )(let (($x121 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var857X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var857X)))
 (= $x142 $x121))))
 ))
 (let (($x272 (and $x262 $x271)))
 (let (($x273 (= $x272 true)))
 (let (($x253 (forall ((input.ind-%var852X (_ BitVec 32)) )(let ((?x16 (bvadd (bvmul input.ind-%var852X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x49))))
 (let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var852X)))
 (let (($x121 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var852X)))
 (=> $x121 (= ?x235 ?x151))))))))
 ))
 (let (($x231 (forall ((input.ind-%var851X (_ BitVec 32)) )(let (($x132 (and (bvule (_ bv0 32) input.ind-%var851X) (bvult input.ind-%var851X input.dst.llvm-%n))))
 (let (($x121 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var851X)))
 (= $x121 $x132))))
 ))
 (let (($x254 (and $x231 $x253)))
 (let (($x255 (= $x254 true)))
 (let (($x99 (forall ((input.ind-%var846X (_ BitVec 32)) )(let ((?x16 (bvadd (bvmul input.ind-%var846X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x49))))
 (let ((?x168 (input.spec-%var-x-1.1.1 input.ind-%var846X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var846X)))
 (=> $x142 (= ?x168 ?x151))))))))
 ))
 (let (($x183 (forall ((input.ind-%var845X (_ BitVec 32)) )(let (($x132 (and (bvule (_ bv0 32) input.ind-%var845X) (bvult input.ind-%var845X input.dst.llvm-%n))))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var845X)))
 (= $x142 $x132))))
 ))
 (let (($x192 (and $x183 $x99)))
 (let (($x154 (= $x192 true)))
 (let (($x122 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x41 (= $x122 true)))
 (let (($x116 (= $x41 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x196 (= $x6 true)))
 (let (($x27 (= $x196 true)))
 (let (($x220 (= $x27 true)))
 (let (($x225 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x212 (= $x225 true)))
 (let (($x86 (= $x212 true)))
 (let (($x178 (= $x86 true)))
 (let (($x173 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x125 (= $x173 true)))
 (let (($x221 (= $x125 true)))
 (let (($x195 (= $x221 true)))
 (let (($x155 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x170 (= $x155 true)))
 (let (($x114 (= $x170 true)))
 (let (($x179 (= $x114 true)))
 (let ((?x43 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x200 (bvadd input.dst.llvm-%x ?x43)))
 (let (($x57 (bvugt ?x200 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd ?x200 (_ bv3 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x208 (bvugt ?x200 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x150)))
 (let (($x115 (or false (or false (and (and true (or $x70 $x208)) (or $x180 $x57))))))
 (let (($x138 (=> (bvule ?x200 (bvsub (bvadd ?x200 (_ bv4 32)) (_ bv1 32))) $x115)))
 (let (($x29 (=> (and $x219 (bvule ?x200 (bvsub (bvadd ?x200 (_ bv4 32)) (_ bv1 32)))) $x115)))
 (let (($x163 (= $x29 true)))
 (let (($x36 (= $x163 true)))
 (let (($x108 (= $x36 true)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x188)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x123)))
 (let ((?x222 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x222)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x227)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (and $x30 $x104)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x110 $x126)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x102 $x73)))
 (let (($x153 (not $x17)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x177 $x111)))
 (let (($x87 (and (not $x62) $x153)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x18 $x47)))
 (let (($x63 (not $x11)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x20 $x72)))
 (let (($x32 (and (not $x22) $x63)))
 (let (($x112 (and (and (and (and (and (and $x32 $x87) $x141) $x71) $x136) $x118) $x34)))
 (let (($x131 (and $x112 $x109)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x78 (or false (or false (and (and true (or $x54 $x65)) (or $x88 $x28))))))
 (let (($x207 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x78)))
 (let (($x210 (and $x207 $x131)))
 (let (($x216 (= $x210 true)))
 (let (($x156 (= $x216 true)))
 (let (($x105 (= $x156 true)))
 (let (($x59 (= (_ bv0 32) input.spec-%var-ret-0.L3%6%bbentry)))
 (let (($x58 (= $x59 true)))
 (let (($x55 (= $x58 true)))
 (let (($x8 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x21 (= $x8 true)))
 (let (($x90 (= $x21 true)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x77 (= $x12 true)))
 (let (($x44 (= $x77 true)))
 (let (($x35 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x198 (= $x35 true)))
 (let (($x218 (= $x198 true)))
 (let (($x127 (= $x218 true)))
 (let (($x42 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x184 (= $x42 true)))
 (let (($x89 (= $x184 true)))
 (let (($x60 (= $x89 true)))
 (let (($x52 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x40 (= $x52 true)))
 (let (($x81 (= $x40 true)))
 (let (($x33 (= $x81 true)))
 (let ((?x51 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x56 (= (_ bv0 2) ?x51)))
 (let (($x24 (= $x56 true)))
 (let (($x15 (= $x24 true)))
 (let (($x106 (and $x15 $x33)))
 (let (($x213 (and $x106 $x60)))
 (let (($x25 (and $x213 $x127)))
 (let (($x45 (and $x25 $x44)))
 (let (($x139 (and $x45 $x90)))
 (let (($x80 (and $x139 $x55)))
 (let (($x209 (and $x80 $x105)))
 (let (($x206 (and $x209 $x108)))
 (let (($x124 (and $x206 $x179)))
 (let (($x191 (and $x124 $x195)))
 (let (($x160 (and $x191 $x178)))
 (let (($x93 (and $x160 $x220)))
 (let (($x137 (and $x93 $x116)))
 (let (($x175 (and $x137 $x154)))
 (let (($x256 (and $x175 $x255)))
 (let (($x274 (and $x256 $x273)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x203 $x274)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x276 (and $x134 $x275)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x277 (and $x223 $x276)))
 (let (($x280 (=> $x277 $x279)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (= $x219 false)))
 (let (($x279 (= $x278 true)))
 (let (($x271 (forall ((input.ind-%var858X (_ BitVec 32)) )(let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var858X)))
 (let ((?x168 (input.spec-%var-x-1.1.1 input.ind-%var858X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var858X)))
 (=> $x142 (= ?x168 ?x235))))))
 ))
 (let (($x262 (forall ((input.ind-%var857X (_ BitVec 32)) )(let (($x121 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var857X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var857X)))
 (= $x142 $x121))))
 ))
 (let (($x272 (and $x262 $x271)))
 (let (($x273 (= $x272 true)))
 (let (($x253 (forall ((input.ind-%var852X (_ BitVec 32)) )(let ((?x16 (bvadd (bvmul input.ind-%var852X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x49))))
 (let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var852X)))
 (let (($x121 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var852X)))
 (=> $x121 (= ?x235 ?x151))))))))
 ))
 (let (($x231 (forall ((input.ind-%var851X (_ BitVec 32)) )(let (($x132 (and (bvule (_ bv0 32) input.ind-%var851X) (bvult input.ind-%var851X input.dst.llvm-%n))))
 (let (($x121 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var851X)))
 (= $x121 $x132))))
 ))
 (let (($x254 (and $x231 $x253)))
 (let (($x255 (= $x254 true)))
 (let (($x99 (forall ((input.ind-%var846X (_ BitVec 32)) )(let ((?x16 (bvadd (bvmul input.ind-%var846X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x49))))
 (let ((?x168 (input.spec-%var-x-1.1.1 input.ind-%var846X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var846X)))
 (=> $x142 (= ?x168 ?x151))))))))
 ))
 (let (($x183 (forall ((input.ind-%var845X (_ BitVec 32)) )(let (($x132 (and (bvule (_ bv0 32) input.ind-%var845X) (bvult input.ind-%var845X input.dst.llvm-%n))))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var845X)))
 (= $x142 $x132))))
 ))
 (let (($x192 (and $x183 $x99)))
 (let (($x154 (= $x192 true)))
 (let (($x122 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x41 (= $x122 true)))
 (let (($x116 (= $x41 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x196 (= $x6 true)))
 (let (($x27 (= $x196 true)))
 (let (($x220 (= $x27 true)))
 (let (($x225 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x212 (= $x225 true)))
 (let (($x86 (= $x212 true)))
 (let (($x178 (= $x86 true)))
 (let (($x173 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x125 (= $x173 true)))
 (let (($x221 (= $x125 true)))
 (let (($x195 (= $x221 true)))
 (let (($x155 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x170 (= $x155 true)))
 (let (($x114 (= $x170 true)))
 (let (($x179 (= $x114 true)))
 (let ((?x43 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x200 (bvadd input.dst.llvm-%x ?x43)))
 (let (($x57 (bvugt ?x200 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd ?x200 (_ bv3 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x208 (bvugt ?x200 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x150)))
 (let (($x115 (or false (or false (and (and true (or $x70 $x208)) (or $x180 $x57))))))
 (let (($x138 (=> (bvule ?x200 (bvsub (bvadd ?x200 (_ bv4 32)) (_ bv1 32))) $x115)))
 (let (($x29 (=> (and $x219 (bvule ?x200 (bvsub (bvadd ?x200 (_ bv4 32)) (_ bv1 32)))) $x115)))
 (let (($x163 (= $x29 true)))
 (let (($x36 (= $x163 true)))
 (let (($x108 (= $x36 true)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x188)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x123)))
 (let ((?x222 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x222)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x227)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (and $x30 $x104)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x110 $x126)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x102 $x73)))
 (let (($x153 (not $x17)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x177 $x111)))
 (let (($x87 (and (not $x62) $x153)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x18 $x47)))
 (let (($x63 (not $x11)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x20 $x72)))
 (let (($x32 (and (not $x22) $x63)))
 (let (($x112 (and (and (and (and (and (and $x32 $x87) $x141) $x71) $x136) $x118) $x34)))
 (let (($x131 (and $x112 $x109)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x78 (or false (or false (and (and true (or $x54 $x65)) (or $x88 $x28))))))
 (let (($x207 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x78)))
 (let (($x210 (and $x207 $x131)))
 (let (($x216 (= $x210 true)))
 (let (($x156 (= $x216 true)))
 (let (($x105 (= $x156 true)))
 (let (($x59 (= (_ bv0 32) input.spec-%var-ret-0.L3%6%bbentry)))
 (let (($x58 (= $x59 true)))
 (let (($x55 (= $x58 true)))
 (let (($x8 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x21 (= $x8 true)))
 (let (($x90 (= $x21 true)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x77 (= $x12 true)))
 (let (($x44 (= $x77 true)))
 (let (($x35 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x198 (= $x35 true)))
 (let (($x218 (= $x198 true)))
 (let (($x127 (= $x218 true)))
 (let (($x42 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x184 (= $x42 true)))
 (let (($x89 (= $x184 true)))
 (let (($x60 (= $x89 true)))
 (let (($x52 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x40 (= $x52 true)))
 (let (($x81 (= $x40 true)))
 (let (($x33 (= $x81 true)))
 (let ((?x51 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x56 (= (_ bv0 2) ?x51)))
 (let (($x24 (= $x56 true)))
 (let (($x15 (= $x24 true)))
 (let (($x106 (and $x15 $x33)))
 (let (($x213 (and $x106 $x60)))
 (let (($x25 (and $x213 $x127)))
 (let (($x45 (and $x25 $x44)))
 (let (($x139 (and $x45 $x90)))
 (let (($x80 (and $x139 $x55)))
 (let (($x209 (and $x80 $x105)))
 (let (($x206 (and $x209 $x108)))
 (let (($x124 (and $x206 $x179)))
 (let (($x191 (and $x124 $x195)))
 (let (($x160 (and $x191 $x178)))
 (let (($x93 (and $x160 $x220)))
 (let (($x137 (and $x93 $x116)))
 (let (($x175 (and $x137 $x154)))
 (let (($x256 (and $x175 $x255)))
 (let (($x274 (and $x256 $x273)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x203 $x274)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x276 (and $x134 $x275)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x277 (and $x223 $x276)))
 (let (($x280 (=> $x277 $x279)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9d3011c4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xb7315590)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbbeda684)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbbeda687)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9d3011c7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbbeda684)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9d3011c4)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #xb7315593 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xb7315592 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xb7315591 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xb7315590 (bvmul #x00000004 x!0))))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000040 x!0)
         (ite (bvule #x00000041 x!0) #x00000041 #x00000040)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #xb7315593 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xb7315592 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xb7315591 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xb7315590 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00008000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000255c4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00021bc0)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000255c7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00021bc3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000255c4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00021bc0)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x02000000 x!0)
         (ite (bvule #x02000001 x!0) #x02000001 #x02000000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00008003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00008002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00008001 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00008000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x00008003 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00008002 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00008001 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00008000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0) (input.spec-%var-x-1.1.1 x!0) a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x296 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x297 (ite $x296 (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x297 (_ bv1 32))))
 (let (($x147 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x295 (not $x147)))
 (let (($x299 (or $x295 $x298)))
 (let (($x300 (= $x299 true)))
 (let (($x301 (= $x300 true)))
 (let (($x287 (forall ((input.ind-%var1012X (_ BitVec 32)) )(let ((?x238 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1012X)))
 (let ((?x254 (input.spec-%var-x-1.1.1 input.ind-%var1012X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1012X)))
 (=> $x151 (= ?x254 ?x238))))))
 ))
 (let (($x267 (forall ((input.ind-%var1011X (_ BitVec 32)) )(let (($x161 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1011X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1011X)))
 (= $x151 $x161))))
 ))
 (let (($x288 (and $x267 $x287)))
 (let (($x289 (= $x288 true)))
 (let (($x61 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let ((?x97 (bvadd (bvmul input.ind-%var1006X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv1 32))) (select input.dst.llvm-mem ?x97))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv2 32))) ?x205))))
 (let ((?x238 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1006X)))
 (let (($x161 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1006X)))
 (=> $x161 (= ?x238 ?x37))))))))
 ))
 (let (($x182 (forall ((input.ind-%var1005X (_ BitVec 32)) )(let (($x230 (and (bvule (_ bv0 32) input.ind-%var1005X) (bvult input.ind-%var1005X input.dst.llvm-%n))))
 (let (($x161 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1005X)))
 (= $x161 $x230))))
 ))
 (let (($x258 (and $x182 $x61)))
 (let (($x229 (= $x258 true)))
 (let (($x193 (forall ((input.ind-%var1000X (_ BitVec 32)) )(let ((?x97 (bvadd (bvmul input.ind-%var1000X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv1 32))) (select input.dst.llvm-mem ?x97))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv2 32))) ?x205))))
 (let ((?x254 (input.spec-%var-x-1.1.1 input.ind-%var1000X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1000X)))
 (=> $x151 (= ?x254 ?x37))))))))
 ))
 (let (($x235 (forall ((input.ind-%var999X (_ BitVec 32)) )(let (($x230 (and (bvule (_ bv0 32) input.ind-%var999X) (bvult input.ind-%var999X input.dst.llvm-%n))))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var999X)))
 (= $x151 $x230))))
 ))
 (let (($x215 (and $x235 $x193)))
 (let (($x159 (= $x215 true)))
 (let ((?x120 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x120)))
 (let (($x140 (= ?x69 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x202 (= $x140 true)))
 (let (($x9 (= $x202 true)))
 (let (($x168 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x187 (= $x168 true)))
 (let (($x92 (= $x187 true)))
 (let (($x16 (= $x92 true)))
 (let (($x133 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x149 (= $x133 true)))
 (let (($x132 (= $x149 true)))
 (let (($x146 (= $x132 true)))
 (let (($x41 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (= $x41 true)))
 (let (($x137 (= $x116 true)))
 (let (($x39 (= $x137 true)))
 (let (($x196 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x27 (= $x196 true)))
 (let (($x220 (= $x27 true)))
 (let (($x93 (= $x220 true)))
 (let (($x212 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x86 (= $x212 true)))
 (let (($x178 (= $x86 true)))
 (let (($x160 (= $x178 true)))
 (let (($x125 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x221 (= $x125 true)))
 (let (($x195 (= $x221 true)))
 (let (($x191 (= $x195 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x46 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x115 (bvsub ?x46 ?x51)))
 (let (($x36 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x46 ?x115) (bvult ?x46 ?x115))))
 (let (($x143 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x174 (ite $x143 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x74 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x180 (bvmul (_ bv4 64) ?x74)))
 (let ((?x57 ((_ extract 63 32) ?x180)))
 (let (($x5 (= ?x57 ?x174)))
 (let (($x108 (and $x5 $x36)))
 (let (($x208 (= (bvand ?x46 (_ bv4294967292 32)) ?x46)))
 (let (($x206 (and $x208 $x108)))
 (let (($x155 (= true $x206)))
 (let (($x170 (=> $x147 $x155)))
 (let (($x114 (= $x170 true)))
 (let (($x179 (= $x114 true)))
 (let (($x124 (= $x179 true)))
 (let (($x43 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x200 (= $x43 true)))
 (let (($x66 (= $x200 true)))
 (let (($x171 (= $x66 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x123)))
 (let ((?x118 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x118)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x227)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (and $x204 $x104)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x30 $x126)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x153 $x87)))
 (let (($x84 (not $x166)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x102 $x73)))
 (let (($x38 (and (not $x17) $x84)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x63 $x32)))
 (let (($x111 (not $x177)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x23 $x79)))
 (let (($x68 (and (not $x11) $x111)))
 (let (($x216 (and (and (and (and (and (and $x68 $x38) $x71) $x110) $x136) $x222) $x201)))
 (let (($x156 (and $x216 $x34)))
 (let (($x207 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x10 (or false (or false (and (and true (or $x28 $x76)) (or $x78 $x207))))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x10)))
 (let (($x105 (and $x47 $x156)))
 (let (($x209 (= $x105 true)))
 (let (($x224 (= $x209 true)))
 (let (($x129 (= $x224 true)))
 (let ((?x50 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x67 (= (_ bv0 2) ?x50)))
 (let (($x75 (= $x67 true)))
 (let (($x54 (= $x75 true)))
 (let ((?x176 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x176)))
 (let (($x55 (= ?x59 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x55 true)))
 (let (($x7 (= $x80 true)))
 (let (($x83 (and $x7 $x54)))
 (let (($x219 (and $x83 $x129)))
 (let (($x13 (and $x219 $x171)))
 (let (($x173 (and $x13 $x124)))
 (let (($x225 (and $x173 $x191)))
 (let (($x6 (and $x225 $x160)))
 (let (($x122 (and $x6 $x93)))
 (let (($x142 (and $x122 $x39)))
 (let (($x183 (and $x142 $x146)))
 (let (($x144 (and $x183 $x16)))
 (let (($x185 (and $x144 $x9)))
 (let (($x117 (and $x185 $x159)))
 (let (($x164 (and $x117 $x229)))
 (let (($x290 (and $x164 $x289)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x21 $x290)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x292 (and $x45 $x291)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x293 (and $x12 $x292)))
 (let (($x213 (bvugt ?x46 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd ?x46 (_ bv3 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x33 (bvugt ?x46 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x127 (or false (or false (and (and true (or $x81 $x33)) (or $x60 $x213))))))
 (let (($x31 (=> (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32))) $x127)))
 (let (($x145 (=> (and $x147 (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32)))) $x127)))
 (let (($x294 (and $x145 $x293)))
 (let (($x302 (=> $x294 $x301)))
 (not $x302)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x296 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x297 (ite $x296 (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x297 (_ bv1 32))))
 (let (($x147 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x295 (not $x147)))
 (let (($x299 (or $x295 $x298)))
 (let (($x300 (= $x299 true)))
 (let (($x301 (= $x300 true)))
 (let (($x287 (forall ((input.ind-%var1012X (_ BitVec 32)) )(let ((?x238 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1012X)))
 (let ((?x254 (input.spec-%var-x-1.1.1 input.ind-%var1012X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1012X)))
 (=> $x151 (= ?x254 ?x238))))))
 ))
 (let (($x267 (forall ((input.ind-%var1011X (_ BitVec 32)) )(let (($x161 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1011X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1011X)))
 (= $x151 $x161))))
 ))
 (let (($x288 (and $x267 $x287)))
 (let (($x289 (= $x288 true)))
 (let (($x61 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let ((?x97 (bvadd (bvmul input.ind-%var1006X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv1 32))) (select input.dst.llvm-mem ?x97))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv2 32))) ?x205))))
 (let ((?x238 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1006X)))
 (let (($x161 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1006X)))
 (=> $x161 (= ?x238 ?x37))))))))
 ))
 (let (($x182 (forall ((input.ind-%var1005X (_ BitVec 32)) )(let (($x230 (and (bvule (_ bv0 32) input.ind-%var1005X) (bvult input.ind-%var1005X input.dst.llvm-%n))))
 (let (($x161 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1005X)))
 (= $x161 $x230))))
 ))
 (let (($x258 (and $x182 $x61)))
 (let (($x229 (= $x258 true)))
 (let (($x193 (forall ((input.ind-%var1000X (_ BitVec 32)) )(let ((?x97 (bvadd (bvmul input.ind-%var1000X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv1 32))) (select input.dst.llvm-mem ?x97))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv2 32))) ?x205))))
 (let ((?x254 (input.spec-%var-x-1.1.1 input.ind-%var1000X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1000X)))
 (=> $x151 (= ?x254 ?x37))))))))
 ))
 (let (($x235 (forall ((input.ind-%var999X (_ BitVec 32)) )(let (($x230 (and (bvule (_ bv0 32) input.ind-%var999X) (bvult input.ind-%var999X input.dst.llvm-%n))))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var999X)))
 (= $x151 $x230))))
 ))
 (let (($x215 (and $x235 $x193)))
 (let (($x159 (= $x215 true)))
 (let ((?x120 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x120)))
 (let (($x140 (= ?x69 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x202 (= $x140 true)))
 (let (($x9 (= $x202 true)))
 (let (($x168 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x187 (= $x168 true)))
 (let (($x92 (= $x187 true)))
 (let (($x16 (= $x92 true)))
 (let (($x133 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x149 (= $x133 true)))
 (let (($x132 (= $x149 true)))
 (let (($x146 (= $x132 true)))
 (let (($x41 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (= $x41 true)))
 (let (($x137 (= $x116 true)))
 (let (($x39 (= $x137 true)))
 (let (($x196 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x27 (= $x196 true)))
 (let (($x220 (= $x27 true)))
 (let (($x93 (= $x220 true)))
 (let (($x212 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x86 (= $x212 true)))
 (let (($x178 (= $x86 true)))
 (let (($x160 (= $x178 true)))
 (let (($x125 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x221 (= $x125 true)))
 (let (($x195 (= $x221 true)))
 (let (($x191 (= $x195 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x46 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x115 (bvsub ?x46 ?x51)))
 (let (($x36 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x46 ?x115) (bvult ?x46 ?x115))))
 (let (($x143 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x174 (ite $x143 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x74 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x180 (bvmul (_ bv4 64) ?x74)))
 (let ((?x57 ((_ extract 63 32) ?x180)))
 (let (($x5 (= ?x57 ?x174)))
 (let (($x108 (and $x5 $x36)))
 (let (($x208 (= (bvand ?x46 (_ bv4294967292 32)) ?x46)))
 (let (($x206 (and $x208 $x108)))
 (let (($x155 (= true $x206)))
 (let (($x170 (=> $x147 $x155)))
 (let (($x114 (= $x170 true)))
 (let (($x179 (= $x114 true)))
 (let (($x124 (= $x179 true)))
 (let (($x43 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x200 (= $x43 true)))
 (let (($x66 (= $x200 true)))
 (let (($x171 (= $x66 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x123)))
 (let ((?x118 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x118)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x227)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (and $x204 $x104)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x30 $x126)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x153 $x87)))
 (let (($x84 (not $x166)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x102 $x73)))
 (let (($x38 (and (not $x17) $x84)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x63 $x32)))
 (let (($x111 (not $x177)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x23 $x79)))
 (let (($x68 (and (not $x11) $x111)))
 (let (($x216 (and (and (and (and (and (and $x68 $x38) $x71) $x110) $x136) $x222) $x201)))
 (let (($x156 (and $x216 $x34)))
 (let (($x207 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x10 (or false (or false (and (and true (or $x28 $x76)) (or $x78 $x207))))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x10)))
 (let (($x105 (and $x47 $x156)))
 (let (($x209 (= $x105 true)))
 (let (($x224 (= $x209 true)))
 (let (($x129 (= $x224 true)))
 (let ((?x50 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x67 (= (_ bv0 2) ?x50)))
 (let (($x75 (= $x67 true)))
 (let (($x54 (= $x75 true)))
 (let ((?x176 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x176)))
 (let (($x55 (= ?x59 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x55 true)))
 (let (($x7 (= $x80 true)))
 (let (($x83 (and $x7 $x54)))
 (let (($x219 (and $x83 $x129)))
 (let (($x13 (and $x219 $x171)))
 (let (($x173 (and $x13 $x124)))
 (let (($x225 (and $x173 $x191)))
 (let (($x6 (and $x225 $x160)))
 (let (($x122 (and $x6 $x93)))
 (let (($x142 (and $x122 $x39)))
 (let (($x183 (and $x142 $x146)))
 (let (($x144 (and $x183 $x16)))
 (let (($x185 (and $x144 $x9)))
 (let (($x117 (and $x185 $x159)))
 (let (($x164 (and $x117 $x229)))
 (let (($x290 (and $x164 $x289)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x21 $x290)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x292 (and $x45 $x291)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x293 (and $x12 $x292)))
 (let (($x213 (bvugt ?x46 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd ?x46 (_ bv3 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x33 (bvugt ?x46 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x127 (or false (or false (and (and true (or $x81 $x33)) (or $x60 $x213))))))
 (let (($x31 (=> (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32))) $x127)))
 (let (($x145 (=> (and $x147 (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32)))) $x127)))
 (let (($x294 (and $x145 $x293)))
 (let (($x302 (=> $x294 $x301)))
 (not $x302)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 205 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x306 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x263 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x304 (bvmul (_ bv4294967295 32) ?x263)))
 (let ((?x305 (bvneg ?x304)))
 (let (($x307 (= ?x305 ?x306)))
 (let (($x308 (= $x307 true)))
 (let (($x252 (forall ((input.ind-%var1035X (_ BitVec 32)) )(let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1035X)))
 (let ((?x182 (input.spec-%var-x-1.1.1 input.ind-%var1035X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var1035X)))
 (=> $x236 (= ?x182 ?x270))))))
 ))
 (let (($x211 (forall ((input.ind-%var1034X (_ BitVec 32)) )(let (($x58 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1034X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var1034X)))
 (= $x236 $x58))))
 ))
 (let (($x281 (and $x211 $x252)))
 (let (($x266 (= $x281 true)))
 (let (($x245 (forall ((input.ind-%var1029X (_ BitVec 32)) )(let ((?x294 (bvadd (bvmul input.ind-%var1029X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x298))))
 (let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1029X)))
 (let (($x58 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1029X)))
 (=> $x58 (= ?x270 ?x56))))))))
 ))
 (let (($x277 (forall ((input.ind-%var1028X (_ BitVec 32)) )(let (($x193 (and (bvule (_ bv0 32) input.ind-%var1028X) (bvult input.ind-%var1028X input.dst.llvm-%n))))
 (let (($x58 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1028X)))
 (= $x58 $x193))))
 ))
 (let (($x240 (and $x277 $x245)))
 (let (($x241 (= $x240 true)))
 (let (($x100 (forall ((input.ind-%var1023X (_ BitVec 32)) )(let ((?x294 (bvadd (bvmul input.ind-%var1023X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x298))))
 (let ((?x182 (input.spec-%var-x-1.1.1 input.ind-%var1023X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var1023X)))
 (=> $x236 (= ?x182 ?x56))))))))
 ))
 (let (($x159 (forall ((input.ind-%var1022X (_ BitVec 32)) )(let (($x193 (and (bvule (_ bv0 32) input.ind-%var1022X) (bvult input.ind-%var1022X input.dst.llvm-%n))))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var1022X)))
 (= $x236 $x193))))
 ))
 (let (($x246 (and $x159 $x100)))
 (let (($x169 (= $x246 true)))
 (let ((?x256 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x256)))
 (let (($x97 (= ?x91 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x48 (= $x97 true)))
 (let (($x181 (= $x48 true)))
 (let (($x175 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x230 (= $x175 true)))
 (let (($x231 (= $x230 true)))
 (let (($x235 (= $x231 true)))
 (let (($x9 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x9 true)))
 (let (($x162 (= $x185 true)))
 (let (($x151 (= $x162 true)))
 (let (($x144 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (= $x144 true)))
 (let (($x69 (= $x120 true)))
 (let (($x140 (= $x69 true)))
 (let (($x183 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x168 (= $x183 true)))
 (let (($x187 (= $x168 true)))
 (let (($x92 (= $x187 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x133 (= $x142 true)))
 (let (($x149 (= $x133 true)))
 (let (($x132 (= $x149 true)))
 (let (($x122 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x41 (= $x122 true)))
 (let (($x116 (= $x41 true)))
 (let (($x137 (= $x116 true)))
 (let ((?x158 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvadd input.dst.llvm-%x ?x158)))
 (let ((?x221 (bvsub ?x147 ?x158)))
 (let (($x212 (ite (bvsge ?x158 (_ bv0 32)) (bvuge ?x147 ?x221) (bvult ?x147 ?x221))))
 (let (($x124 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x173 (ite $x124 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x170 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvmul (_ bv4 64) ?x170)))
 (let ((?x179 ((_ extract 63 32) ?x114)))
 (let (($x125 (= ?x179 ?x173)))
 (let (($x86 (and $x125 $x212)))
 (let (($x206 (= (bvand ?x147 (_ bv4294967292 32)) ?x147)))
 (let (($x178 (and $x206 $x86)))
 (let (($x160 (= true $x178)))
 (let (($x148 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x6 (=> $x148 $x160)))
 (let (($x196 (= $x6 true)))
 (let (($x27 (= $x196 true)))
 (let (($x220 (= $x27 true)))
 (let (($x5 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x138 (= $x5 true)))
 (let (($x115 (= $x138 true)))
 (let (($x29 (= $x115 true)))
 (let (($x180 (= $x148 true)))
 (let (($x57 (= $x180 true)))
 (let (($x143 (= $x57 true)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x209)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x156)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x210)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (and $x222 $x118)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x101 $x201)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x103 $x110)))
 (let (($x30 (not $x109)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x82 $x71)))
 (let (($x227 (and (not $x188) $x30)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x153 $x87)))
 (let (($x84 (not $x166)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x20 $x72)))
 (let (($x112 (and (not $x141) $x84)))
 (let (($x171 (and (and (and (and (and (and $x112 $x227) $x126) $x131) $x216) $x34) $x105)))
 (let (($x13 (and $x171 $x224)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x102 (or false (or false (and (and true (or $x23 $x79)) (or $x63 $x32))))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x102)))
 (let (($x150 (and $x17 $x13)))
 (let (($x70 (= $x150 true)))
 (let (($x208 (= $x70 true)))
 (let (($x217 (= $x208 true)))
 (let ((?x28 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x76 (= (_ bv0 2) ?x28)))
 (let (($x85 (= $x76 true)))
 (let (($x53 (= $x85 true)))
 (let ((?x75 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x75)))
 (let (($x64 (= ?x54 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x64 true)))
 (let (($x18 (= $x88 true)))
 (let (($x78 (and $x18 $x53)))
 (let (($x74 (and $x78 $x217)))
 (let (($x174 (and $x74 $x143)))
 (let (($x163 (and $x174 $x29)))
 (let (($x93 (and $x163 $x220)))
 (let (($x39 (and $x93 $x137)))
 (let (($x146 (and $x39 $x132)))
 (let (($x16 (and $x146 $x92)))
 (let (($x202 (and $x16 $x140)))
 (let (($x121 (and $x202 $x151)))
 (let (($x254 (and $x121 $x235)))
 (let (($x273 (and $x254 $x181)))
 (let (($x255 (and $x273 $x169)))
 (let (($x244 (and $x255 $x241)))
 (let (($x233 (and $x244 $x266)))
 (let (($x80 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x7 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x7 (_ bv1 32))))
 (let (($x19 (and $x94 $x233)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x107 (and $x139 $x19)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x283 (and $x21 $x107)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x44 $x283)))
 (let (($x218 (bvugt ?x147 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x147 (_ bv3 32))))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x184 (bvugt ?x147 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x197 (or false (or false (and (and true (or $x42 $x184)) (or $x198 $x218))))))
 (let (($x77 (=> (bvule ?x147 (bvsub (bvadd ?x147 (_ bv4 32)) (_ bv1 32))) $x197)))
 (let (($x25 (=> (and $x148 (bvule ?x147 (bvsub (bvadd ?x147 (_ bv4 32)) (_ bv1 32)))) $x197)))
 (let (($x284 (and $x25 $x268)))
 (let (($x309 (=> $x284 $x308)))
 (not $x309))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x306 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x263 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x304 (bvmul (_ bv4294967295 32) ?x263)))
 (let ((?x305 (bvneg ?x304)))
 (let (($x307 (= ?x305 ?x306)))
 (let (($x308 (= $x307 true)))
 (let (($x252 (forall ((input.ind-%var1035X (_ BitVec 32)) )(let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1035X)))
 (let ((?x182 (input.spec-%var-x-1.1.1 input.ind-%var1035X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var1035X)))
 (=> $x236 (= ?x182 ?x270))))))
 ))
 (let (($x211 (forall ((input.ind-%var1034X (_ BitVec 32)) )(let (($x58 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1034X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var1034X)))
 (= $x236 $x58))))
 ))
 (let (($x281 (and $x211 $x252)))
 (let (($x266 (= $x281 true)))
 (let (($x245 (forall ((input.ind-%var1029X (_ BitVec 32)) )(let ((?x294 (bvadd (bvmul input.ind-%var1029X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x298))))
 (let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1029X)))
 (let (($x58 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1029X)))
 (=> $x58 (= ?x270 ?x56))))))))
 ))
 (let (($x277 (forall ((input.ind-%var1028X (_ BitVec 32)) )(let (($x193 (and (bvule (_ bv0 32) input.ind-%var1028X) (bvult input.ind-%var1028X input.dst.llvm-%n))))
 (let (($x58 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1028X)))
 (= $x58 $x193))))
 ))
 (let (($x240 (and $x277 $x245)))
 (let (($x241 (= $x240 true)))
 (let (($x100 (forall ((input.ind-%var1023X (_ BitVec 32)) )(let ((?x294 (bvadd (bvmul input.ind-%var1023X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x298))))
 (let ((?x182 (input.spec-%var-x-1.1.1 input.ind-%var1023X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var1023X)))
 (=> $x236 (= ?x182 ?x56))))))))
 ))
 (let (($x159 (forall ((input.ind-%var1022X (_ BitVec 32)) )(let (($x193 (and (bvule (_ bv0 32) input.ind-%var1022X) (bvult input.ind-%var1022X input.dst.llvm-%n))))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var1022X)))
 (= $x236 $x193))))
 ))
 (let (($x246 (and $x159 $x100)))
 (let (($x169 (= $x246 true)))
 (let ((?x256 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x256)))
 (let (($x97 (= ?x91 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x48 (= $x97 true)))
 (let (($x181 (= $x48 true)))
 (let (($x175 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x230 (= $x175 true)))
 (let (($x231 (= $x230 true)))
 (let (($x235 (= $x231 true)))
 (let (($x9 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x9 true)))
 (let (($x162 (= $x185 true)))
 (let (($x151 (= $x162 true)))
 (let (($x144 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (= $x144 true)))
 (let (($x69 (= $x120 true)))
 (let (($x140 (= $x69 true)))
 (let (($x183 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x168 (= $x183 true)))
 (let (($x187 (= $x168 true)))
 (let (($x92 (= $x187 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x133 (= $x142 true)))
 (let (($x149 (= $x133 true)))
 (let (($x132 (= $x149 true)))
 (let (($x122 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x41 (= $x122 true)))
 (let (($x116 (= $x41 true)))
 (let (($x137 (= $x116 true)))
 (let ((?x158 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvadd input.dst.llvm-%x ?x158)))
 (let ((?x221 (bvsub ?x147 ?x158)))
 (let (($x212 (ite (bvsge ?x158 (_ bv0 32)) (bvuge ?x147 ?x221) (bvult ?x147 ?x221))))
 (let (($x124 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x173 (ite $x124 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x170 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvmul (_ bv4 64) ?x170)))
 (let ((?x179 ((_ extract 63 32) ?x114)))
 (let (($x125 (= ?x179 ?x173)))
 (let (($x86 (and $x125 $x212)))
 (let (($x206 (= (bvand ?x147 (_ bv4294967292 32)) ?x147)))
 (let (($x178 (and $x206 $x86)))
 (let (($x160 (= true $x178)))
 (let (($x148 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x6 (=> $x148 $x160)))
 (let (($x196 (= $x6 true)))
 (let (($x27 (= $x196 true)))
 (let (($x220 (= $x27 true)))
 (let (($x5 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x138 (= $x5 true)))
 (let (($x115 (= $x138 true)))
 (let (($x29 (= $x115 true)))
 (let (($x180 (= $x148 true)))
 (let (($x57 (= $x180 true)))
 (let (($x143 (= $x57 true)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x209)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x156)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x210)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (and $x222 $x118)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x101 $x201)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x103 $x110)))
 (let (($x30 (not $x109)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x82 $x71)))
 (let (($x227 (and (not $x188) $x30)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x153 $x87)))
 (let (($x84 (not $x166)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x20 $x72)))
 (let (($x112 (and (not $x141) $x84)))
 (let (($x171 (and (and (and (and (and (and $x112 $x227) $x126) $x131) $x216) $x34) $x105)))
 (let (($x13 (and $x171 $x224)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x102 (or false (or false (and (and true (or $x23 $x79)) (or $x63 $x32))))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x102)))
 (let (($x150 (and $x17 $x13)))
 (let (($x70 (= $x150 true)))
 (let (($x208 (= $x70 true)))
 (let (($x217 (= $x208 true)))
 (let ((?x28 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x76 (= (_ bv0 2) ?x28)))
 (let (($x85 (= $x76 true)))
 (let (($x53 (= $x85 true)))
 (let ((?x75 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x75)))
 (let (($x64 (= ?x54 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x64 true)))
 (let (($x18 (= $x88 true)))
 (let (($x78 (and $x18 $x53)))
 (let (($x74 (and $x78 $x217)))
 (let (($x174 (and $x74 $x143)))
 (let (($x163 (and $x174 $x29)))
 (let (($x93 (and $x163 $x220)))
 (let (($x39 (and $x93 $x137)))
 (let (($x146 (and $x39 $x132)))
 (let (($x16 (and $x146 $x92)))
 (let (($x202 (and $x16 $x140)))
 (let (($x121 (and $x202 $x151)))
 (let (($x254 (and $x121 $x235)))
 (let (($x273 (and $x254 $x181)))
 (let (($x255 (and $x273 $x169)))
 (let (($x244 (and $x255 $x241)))
 (let (($x233 (and $x244 $x266)))
 (let (($x80 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x7 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x7 (_ bv1 32))))
 (let (($x19 (and $x94 $x233)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x107 (and $x139 $x19)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x283 (and $x21 $x107)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x44 $x283)))
 (let (($x218 (bvugt ?x147 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x147 (_ bv3 32))))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x184 (bvugt ?x147 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x197 (or false (or false (and (and true (or $x42 $x184)) (or $x198 $x218))))))
 (let (($x77 (=> (bvule ?x147 (bvsub (bvadd ?x147 (_ bv4 32)) (_ bv1 32))) $x197)))
 (let (($x25 (=> (and $x148 (bvule ?x147 (bvsub (bvadd ?x147 (_ bv4 32)) (_ bv1 32)))) $x197)))
 (let (($x284 (and $x25 $x268)))
 (let (($x309 (=> $x284 $x308)))
 (not $x309))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x113))))
 (let ((?x316 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x315)))
 (let ((?x243 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x264 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x243)))
 (let ((?x274 (bvmul (_ bv4294967295 32) ?x264)))
 (let ((?x265 (bvneg ?x274)))
 (let (($x317 (= ?x265 ?x316)))
 (let (($x318 (= $x317 true)))
 (let (($x282 (forall ((input.ind-%var1063X (_ BitVec 32)) )(let ((?x186 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1063X)))
 (let ((?x56 (input.spec-%var-x-1.1.1 input.ind-%var1063X)))
 (let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var1063X)))
 (=> $x182 (= ?x56 ?x186))))))
 ))
 (let (($x279 (forall ((input.ind-%var1062X (_ BitVec 32)) )(let (($x94 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1062X)))
 (let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var1062X)))
 (= $x182 $x94))))
 ))
 (let (($x37 (and $x279 $x282)))
 (let (($x253 (= $x37 true)))
 (let (($x172 (forall ((input.ind-%var1057X (_ BitVec 32)) )(let ((?x249 (bvadd (bvmul input.ind-%var1057X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem ?x249))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv2 32))) ?x266))))
 (let ((?x186 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1057X)))
 (let (($x94 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1057X)))
 (=> $x94 (= ?x186 ?x284))))))))
 ))
 (let (($x238 (forall ((input.ind-%var1056X (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) input.ind-%var1056X) (bvult input.ind-%var1056X input.dst.llvm-%n))))
 (let (($x94 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1056X)))
 (= $x94 $x300))))
 ))
 (let (($x269 (and $x238 $x172)))
 (let (($x152 (= $x269 true)))
 (let (($x305 (forall ((input.ind-%var1051X (_ BitVec 32)) )(let ((?x249 (bvadd (bvmul input.ind-%var1051X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem ?x249))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv2 32))) ?x266))))
 (let ((?x56 (input.spec-%var-x-1.1.1 input.ind-%var1051X)))
 (let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var1051X)))
 (=> $x182 (= ?x56 ?x284))))))))
 ))
 (let (($x297 (forall ((input.ind-%var1050X (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) input.ind-%var1050X) (bvult input.ind-%var1050X input.dst.llvm-%n))))
 (let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var1050X)))
 (= $x182 $x300))))
 ))
 (let (($x306 (and $x297 $x305)))
 (let (($x307 (= $x306 true)))
 (let ((?x181 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x181)))
 (let (($x236 (= ?x273 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x236 true)))
 (let (($x128 (= $x98 true)))
 (let ((?x231 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x231)))
 (let (($x254 (= ?x235 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x256 (= $x254 true)))
 (let (($x91 (= $x256 true)))
 (let ((?x162 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x151 (= (_ bv0 2) ?x162)))
 (let (($x121 (= $x151 true)))
 (let (($x175 (= $x121 true)))
 (let (($x120 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x69 (= $x120 true)))
 (let (($x140 (= $x69 true)))
 (let (($x202 (= $x140 true)))
 (let (($x168 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x187 (= $x168 true)))
 (let (($x92 (= $x187 true)))
 (let (($x16 (= $x92 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (= $x133 true)))
 (let (($x132 (= $x149 true)))
 (let (($x146 (= $x132 true)))
 (let (($x41 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x116 (= $x41 true)))
 (let (($x137 (= $x116 true)))
 (let (($x39 (= $x137 true)))
 (let (($x196 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x27 (= $x196 true)))
 (let (($x220 (= $x27 true)))
 (let (($x93 (= $x220 true)))
 (let (($x212 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x86 (= $x212 true)))
 (let (($x178 (= $x86 true)))
 (let (($x160 (= $x178 true)))
 (let (($x114 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 (bvsub ?x203 ?x96)) (bvult ?x203 (bvsub ?x203 ?x96)))))
 (let (($x115 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x163 (ite $x115 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x174 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x5 (bvmul (_ bv4 64) ?x174)))
 (let ((?x138 ((_ extract 63 32) ?x5)))
 (let (($x36 (= ?x138 ?x163)))
 (let (($x179 (and $x36 $x114)))
 (let (($x57 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x124 (and $x57 $x179)))
 (let (($x173 (= true $x124)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x125 (=> $x51 $x173)))
 (let (($x195 (= $x125 true)))
 (let (($x221 (= $x195 true)))
 (let (($x191 (= $x221 true)))
 (let (($x13 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x150 (= $x13 true)))
 (let (($x70 (= $x150 true)))
 (let (($x208 (= $x70 true)))
 (let (($x105 (= $x51 true)))
 (let (($x171 (= $x105 true)))
 (let (($x209 (= $x171 true)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x131)))
 (let ((?x219 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x219)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x109)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (and $x110 $x30)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x103 $x227)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x38 $x153)))
 (let (($x166 (not $x87)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x20 $x72)))
 (let (($x112 (and (not $x141) $x166)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x32 $x177)))
 (let (($x68 (not $x111)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x64 $x88)))
 (let (($x17 (and (not $x63) $x68)))
 (let (($x216 (and (and (and (and (and (and $x17 $x112) $x71) $x204) $x129) $x126) $x136)))
 (let (($x200 (and $x216 $x43)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x79 (or false (or false (and (and true (or $x76 $x85)) (or $x22 $x10))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x123 (and $x62 $x200)))
 (let (($x34 (= $x123 true)))
 (let (($x66 (= $x34 true)))
 (let (($x156 (= $x66 true)))
 (let (($x224 (and $x156 $x209)))
 (let (($x217 (and $x224 $x208)))
 (let (($x225 (and $x217 $x191)))
 (let (($x6 (and $x225 $x160)))
 (let (($x122 (and $x6 $x93)))
 (let (($x142 (and $x122 $x39)))
 (let (($x183 (and $x142 $x146)))
 (let (($x144 (and $x183 $x16)))
 (let (($x9 (and $x144 $x202)))
 (let (($x230 (and $x9 $x175)))
 (let (($x97 (and $x230 $x91)))
 (let (($x193 (and $x97 $x128)))
 (let (($x308 (and $x193 $x307)))
 (let (($x189 (and $x308 $x152)))
 (let (($x99 (and $x189 $x253)))
 (let (($x67 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x75 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x75 (_ bv1 32))))
 (let (($x291 (and $x54 $x99)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x248 (and $x176 $x291)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x261 (and $x90 $x248)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x161 (and $x45 $x261)))
 (let (($x31 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd ?x203 (_ bv3 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x89 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x25 (or false (or false (and (and true (or $x60 $x89)) (or $x127 $x31))))))
 (let (($x44 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x25)))
 (let (($x40 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x25)))
 (let (($x292 (and $x40 $x161)))
 (let (($x319 (=> $x292 $x318)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x113))))
 (let ((?x316 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x315)))
 (let ((?x243 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x264 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x243)))
 (let ((?x274 (bvmul (_ bv4294967295 32) ?x264)))
 (let ((?x265 (bvneg ?x274)))
 (let (($x317 (= ?x265 ?x316)))
 (let (($x318 (= $x317 true)))
 (let (($x282 (forall ((input.ind-%var1063X (_ BitVec 32)) )(let ((?x186 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1063X)))
 (let ((?x56 (input.spec-%var-x-1.1.1 input.ind-%var1063X)))
 (let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var1063X)))
 (=> $x182 (= ?x56 ?x186))))))
 ))
 (let (($x279 (forall ((input.ind-%var1062X (_ BitVec 32)) )(let (($x94 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1062X)))
 (let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var1062X)))
 (= $x182 $x94))))
 ))
 (let (($x37 (and $x279 $x282)))
 (let (($x253 (= $x37 true)))
 (let (($x172 (forall ((input.ind-%var1057X (_ BitVec 32)) )(let ((?x249 (bvadd (bvmul input.ind-%var1057X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem ?x249))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv2 32))) ?x266))))
 (let ((?x186 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1057X)))
 (let (($x94 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1057X)))
 (=> $x94 (= ?x186 ?x284))))))))
 ))
 (let (($x238 (forall ((input.ind-%var1056X (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) input.ind-%var1056X) (bvult input.ind-%var1056X input.dst.llvm-%n))))
 (let (($x94 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1056X)))
 (= $x94 $x300))))
 ))
 (let (($x269 (and $x238 $x172)))
 (let (($x152 (= $x269 true)))
 (let (($x305 (forall ((input.ind-%var1051X (_ BitVec 32)) )(let ((?x249 (bvadd (bvmul input.ind-%var1051X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem ?x249))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv2 32))) ?x266))))
 (let ((?x56 (input.spec-%var-x-1.1.1 input.ind-%var1051X)))
 (let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var1051X)))
 (=> $x182 (= ?x56 ?x284))))))))
 ))
 (let (($x297 (forall ((input.ind-%var1050X (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) input.ind-%var1050X) (bvult input.ind-%var1050X input.dst.llvm-%n))))
 (let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var1050X)))
 (= $x182 $x300))))
 ))
 (let (($x306 (and $x297 $x305)))
 (let (($x307 (= $x306 true)))
 (let ((?x181 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x181)))
 (let (($x236 (= ?x273 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x236 true)))
 (let (($x128 (= $x98 true)))
 (let ((?x231 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x231)))
 (let (($x254 (= ?x235 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x256 (= $x254 true)))
 (let (($x91 (= $x256 true)))
 (let ((?x162 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x151 (= (_ bv0 2) ?x162)))
 (let (($x121 (= $x151 true)))
 (let (($x175 (= $x121 true)))
 (let (($x120 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x69 (= $x120 true)))
 (let (($x140 (= $x69 true)))
 (let (($x202 (= $x140 true)))
 (let (($x168 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x187 (= $x168 true)))
 (let (($x92 (= $x187 true)))
 (let (($x16 (= $x92 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (= $x133 true)))
 (let (($x132 (= $x149 true)))
 (let (($x146 (= $x132 true)))
 (let (($x41 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x116 (= $x41 true)))
 (let (($x137 (= $x116 true)))
 (let (($x39 (= $x137 true)))
 (let (($x196 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x27 (= $x196 true)))
 (let (($x220 (= $x27 true)))
 (let (($x93 (= $x220 true)))
 (let (($x212 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x86 (= $x212 true)))
 (let (($x178 (= $x86 true)))
 (let (($x160 (= $x178 true)))
 (let (($x114 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 (bvsub ?x203 ?x96)) (bvult ?x203 (bvsub ?x203 ?x96)))))
 (let (($x115 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x163 (ite $x115 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x174 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x5 (bvmul (_ bv4 64) ?x174)))
 (let ((?x138 ((_ extract 63 32) ?x5)))
 (let (($x36 (= ?x138 ?x163)))
 (let (($x179 (and $x36 $x114)))
 (let (($x57 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x124 (and $x57 $x179)))
 (let (($x173 (= true $x124)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x125 (=> $x51 $x173)))
 (let (($x195 (= $x125 true)))
 (let (($x221 (= $x195 true)))
 (let (($x191 (= $x221 true)))
 (let (($x13 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x150 (= $x13 true)))
 (let (($x70 (= $x150 true)))
 (let (($x208 (= $x70 true)))
 (let (($x105 (= $x51 true)))
 (let (($x171 (= $x105 true)))
 (let (($x209 (= $x171 true)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x131)))
 (let ((?x219 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x219)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x109)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (and $x110 $x30)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x103 $x227)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x38 $x153)))
 (let (($x166 (not $x87)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x20 $x72)))
 (let (($x112 (and (not $x141) $x166)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x32 $x177)))
 (let (($x68 (not $x111)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x64 $x88)))
 (let (($x17 (and (not $x63) $x68)))
 (let (($x216 (and (and (and (and (and (and $x17 $x112) $x71) $x204) $x129) $x126) $x136)))
 (let (($x200 (and $x216 $x43)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x79 (or false (or false (and (and true (or $x76 $x85)) (or $x22 $x10))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x123 (and $x62 $x200)))
 (let (($x34 (= $x123 true)))
 (let (($x66 (= $x34 true)))
 (let (($x156 (= $x66 true)))
 (let (($x224 (and $x156 $x209)))
 (let (($x217 (and $x224 $x208)))
 (let (($x225 (and $x217 $x191)))
 (let (($x6 (and $x225 $x160)))
 (let (($x122 (and $x6 $x93)))
 (let (($x142 (and $x122 $x39)))
 (let (($x183 (and $x142 $x146)))
 (let (($x144 (and $x183 $x16)))
 (let (($x9 (and $x144 $x202)))
 (let (($x230 (and $x9 $x175)))
 (let (($x97 (and $x230 $x91)))
 (let (($x193 (and $x97 $x128)))
 (let (($x308 (and $x193 $x307)))
 (let (($x189 (and $x308 $x152)))
 (let (($x99 (and $x189 $x253)))
 (let (($x67 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x75 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x75 (_ bv1 32))))
 (let (($x291 (and $x54 $x99)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x248 (and $x176 $x291)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x261 (and $x90 $x248)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x161 (and $x45 $x261)))
 (let (($x31 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd ?x203 (_ bv3 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x89 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x25 (or false (or false (and (and true (or $x60 $x89)) (or $x127 $x31))))))
 (let (($x44 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x25)))
 (let (($x40 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x25)))
 (let (($x292 (and $x40 $x161)))
 (let (($x319 (=> $x292 $x318)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 214 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x232 (bvule ?x49 (_ bv3 32))))
 (let (($x303 (= $x232 true)))
 (let (($x310 (= $x303 true)))
 (let (($x164 (forall ((input.ind-%var1087X (_ BitVec 32)) )(let ((?x158 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1087X)))
 (let ((?x263 (input.spec-%var-x-1.1.1 input.ind-%var1087X)))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1087X)))
 (=> $x65 (= ?x263 ?x158))))))
 ))
 (let (($x223 (forall ((input.ind-%var1086X (_ BitVec 32)) )(let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1086X)))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1086X)))
 (= $x65 $x18))))
 ))
 (let (($x289 (and $x223 $x164)))
 (let (($x285 (= $x289 true)))
 (let (($x255 (forall ((input.ind-%var1081X (_ BitVec 32)) )(let ((?x259 (bvadd (bvmul input.ind-%var1081X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x99))))
 (let ((?x158 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1081X)))
 (let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1081X)))
 (=> $x18 (= ?x158 ?x243))))))))
 ))
 (let (($x317 (forall ((input.ind-%var1080X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var1080X) (bvult input.ind-%var1080X input.dst.llvm-%n))))
 (let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1080X)))
 (= $x18 $x252))))
 ))
 (let (($x58 (and $x317 $x255)))
 (let (($x169 (= $x58 true)))
 (let (($x265 (forall ((input.ind-%var1075X (_ BitVec 32)) )(let ((?x259 (bvadd (bvmul input.ind-%var1075X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x99))))
 (let ((?x263 (input.spec-%var-x-1.1.1 input.ind-%var1075X)))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1075X)))
 (=> $x65 (= ?x263 ?x243))))))))
 ))
 (let (($x26 (forall ((input.ind-%var1074X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var1074X) (bvult input.ind-%var1074X input.dst.llvm-%n))))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1074X)))
 (= $x65 $x252))))
 ))
 (let (($x314 (and $x26 $x265)))
 (let (($x311 (= $x314 true)))
 (let ((?x7 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x7)))
 (let (($x299 (= ?x182 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x59 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x236 (= $x59 true)))
 (let (($x98 (= $x236 true)))
 (let (($x128 (= $x98 true)))
 (let (($x91 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x97 (= $x91 true)))
 (let (($x48 (= $x97 true)))
 (let (($x181 (= $x48 true)))
 (let (($x230 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x231 (= $x230 true)))
 (let (($x235 (= $x231 true)))
 (let (($x254 (= $x235 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x187)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x183)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (and $x137 $x142)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x116 $x133)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x86 $x178)))
 (let (($x6 (not $x160)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (and $x191 $x225)))
 (let (($x27 (and (not $x212) $x6)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x179 $x124)))
 (let (($x125 (not $x173)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x208 $x217)))
 (let (($x221 (and (not $x114) $x125)))
 (let (($x202 (and (and (and (and (and (and $x221 $x27) $x93) $x41) $x149) $x146) $x168)))
 (let (($x9 (and $x202 $x92)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x108 (or false (or false (and (and true (or $x143 $x174)) (or $x115 $x29))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x185 (and $x170 $x9)))
 (let (($x162 (= $x185 true)))
 (let (($x151 (= $x162 true)))
 (let (($x121 (= $x151 true)))
 (let (($x171 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x209 (= $x171 true)))
 (let (($x224 (= $x209 true)))
 (let (($x13 (= $x224 true)))
 (let ((?x123 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x34 (= (_ bv0 2) ?x123)))
 (let (($x66 (= $x34 true)))
 (let (($x156 (= $x66 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x136 (= $x219 true)))
 (let (($x216 (= $x136 true)))
 (let (($x131 (= $x216 true)))
 (let (($x129 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (= $x129 true)))
 (let (($x104 (= $x118 true)))
 (let (($x126 (= $x104 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x110 (= $x103 true)))
 (let (($x109 (= $x110 true)))
 (let (($x30 (= $x109 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x84 (bvsub ?x203 ?x96)))
 (let (($x166 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x84) (bvult ?x203 ?x84))))
 (let (($x20 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x72 (ite $x20 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x111 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x68 (bvmul (_ bv4 64) ?x111)))
 (let ((?x17 ((_ extract 63 32) ?x68)))
 (let (($x141 (= ?x17 ?x72)))
 (let (($x112 (and $x141 $x166)))
 (let (($x32 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x101 (and $x32 $x112)))
 (let (($x82 (= true $x101)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x71 (=> $x51 $x82)))
 (let (($x222 (= $x71 true)))
 (let (($x188 (= $x222 true)))
 (let (($x204 (= $x188 true)))
 (let ((?x73 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x73)))
 (let (($x79 (= ?x47 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x62 (= $x79 true)))
 (let (($x64 (= $x62 true)))
 (let (($x85 (= $x51 true)))
 (let (($x53 (= $x85 true)))
 (let (($x78 (= $x53 true)))
 (let (($x88 (and $x78 $x64)))
 (let (($x210 (and $x88 $x204)))
 (let (($x227 (and $x210 $x30)))
 (let (($x201 (and $x227 $x126)))
 (let (($x43 (and $x201 $x131)))
 (let (($x105 (and $x43 $x156)))
 (let (($x150 (and $x105 $x13)))
 (let (($x175 (and $x150 $x121)))
 (let (($x256 (and $x175 $x254)))
 (let (($x273 (and $x256 $x181)))
 (let (($x193 (and $x273 $x128)))
 (let (($x296 (and $x193 $x300)))
 (let (($x312 (and $x296 $x311)))
 (let (($x262 (and $x312 $x169)))
 (let (($x288 (and $x262 $x285)))
 (let (($x11 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x28 (_ bv1 32))))
 (let (($x286 (and $x76 $x288)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x258 (and $x67 $x286)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x290 (and $x139 $x258)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x14 (and $x8 $x290)))
 (let (($x197 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd ?x203 (_ bv3 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x198 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x89)))
 (let (($x40 (or false (or false (and (and true (or $x213 $x198)) (or $x145 $x197))))))
 (let (($x45 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x40)))
 (let (($x134 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x40)))
 (let (($x272 (and $x134 $x14)))
 (let (($x55 (=> $x272 $x310)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x232 (bvule ?x49 (_ bv3 32))))
 (let (($x303 (= $x232 true)))
 (let (($x310 (= $x303 true)))
 (let (($x164 (forall ((input.ind-%var1087X (_ BitVec 32)) )(let ((?x158 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1087X)))
 (let ((?x263 (input.spec-%var-x-1.1.1 input.ind-%var1087X)))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1087X)))
 (=> $x65 (= ?x263 ?x158))))))
 ))
 (let (($x223 (forall ((input.ind-%var1086X (_ BitVec 32)) )(let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1086X)))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1086X)))
 (= $x65 $x18))))
 ))
 (let (($x289 (and $x223 $x164)))
 (let (($x285 (= $x289 true)))
 (let (($x255 (forall ((input.ind-%var1081X (_ BitVec 32)) )(let ((?x259 (bvadd (bvmul input.ind-%var1081X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x99))))
 (let ((?x158 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1081X)))
 (let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1081X)))
 (=> $x18 (= ?x158 ?x243))))))))
 ))
 (let (($x317 (forall ((input.ind-%var1080X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var1080X) (bvult input.ind-%var1080X input.dst.llvm-%n))))
 (let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1080X)))
 (= $x18 $x252))))
 ))
 (let (($x58 (and $x317 $x255)))
 (let (($x169 (= $x58 true)))
 (let (($x265 (forall ((input.ind-%var1075X (_ BitVec 32)) )(let ((?x259 (bvadd (bvmul input.ind-%var1075X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x99))))
 (let ((?x263 (input.spec-%var-x-1.1.1 input.ind-%var1075X)))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1075X)))
 (=> $x65 (= ?x263 ?x243))))))))
 ))
 (let (($x26 (forall ((input.ind-%var1074X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var1074X) (bvult input.ind-%var1074X input.dst.llvm-%n))))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1074X)))
 (= $x65 $x252))))
 ))
 (let (($x314 (and $x26 $x265)))
 (let (($x311 (= $x314 true)))
 (let ((?x7 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x7)))
 (let (($x299 (= ?x182 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x59 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x236 (= $x59 true)))
 (let (($x98 (= $x236 true)))
 (let (($x128 (= $x98 true)))
 (let (($x91 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x97 (= $x91 true)))
 (let (($x48 (= $x97 true)))
 (let (($x181 (= $x48 true)))
 (let (($x230 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x231 (= $x230 true)))
 (let (($x235 (= $x231 true)))
 (let (($x254 (= $x235 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x187)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x183)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (and $x137 $x142)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x116 $x133)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x86 $x178)))
 (let (($x6 (not $x160)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (and $x191 $x225)))
 (let (($x27 (and (not $x212) $x6)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x179 $x124)))
 (let (($x125 (not $x173)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x208 $x217)))
 (let (($x221 (and (not $x114) $x125)))
 (let (($x202 (and (and (and (and (and (and $x221 $x27) $x93) $x41) $x149) $x146) $x168)))
 (let (($x9 (and $x202 $x92)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x108 (or false (or false (and (and true (or $x143 $x174)) (or $x115 $x29))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x185 (and $x170 $x9)))
 (let (($x162 (= $x185 true)))
 (let (($x151 (= $x162 true)))
 (let (($x121 (= $x151 true)))
 (let (($x171 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x209 (= $x171 true)))
 (let (($x224 (= $x209 true)))
 (let (($x13 (= $x224 true)))
 (let ((?x123 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x34 (= (_ bv0 2) ?x123)))
 (let (($x66 (= $x34 true)))
 (let (($x156 (= $x66 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x136 (= $x219 true)))
 (let (($x216 (= $x136 true)))
 (let (($x131 (= $x216 true)))
 (let (($x129 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (= $x129 true)))
 (let (($x104 (= $x118 true)))
 (let (($x126 (= $x104 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x110 (= $x103 true)))
 (let (($x109 (= $x110 true)))
 (let (($x30 (= $x109 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x84 (bvsub ?x203 ?x96)))
 (let (($x166 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x84) (bvult ?x203 ?x84))))
 (let (($x20 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x72 (ite $x20 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x111 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x68 (bvmul (_ bv4 64) ?x111)))
 (let ((?x17 ((_ extract 63 32) ?x68)))
 (let (($x141 (= ?x17 ?x72)))
 (let (($x112 (and $x141 $x166)))
 (let (($x32 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x101 (and $x32 $x112)))
 (let (($x82 (= true $x101)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x71 (=> $x51 $x82)))
 (let (($x222 (= $x71 true)))
 (let (($x188 (= $x222 true)))
 (let (($x204 (= $x188 true)))
 (let ((?x73 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x73)))
 (let (($x79 (= ?x47 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x62 (= $x79 true)))
 (let (($x64 (= $x62 true)))
 (let (($x85 (= $x51 true)))
 (let (($x53 (= $x85 true)))
 (let (($x78 (= $x53 true)))
 (let (($x88 (and $x78 $x64)))
 (let (($x210 (and $x88 $x204)))
 (let (($x227 (and $x210 $x30)))
 (let (($x201 (and $x227 $x126)))
 (let (($x43 (and $x201 $x131)))
 (let (($x105 (and $x43 $x156)))
 (let (($x150 (and $x105 $x13)))
 (let (($x175 (and $x150 $x121)))
 (let (($x256 (and $x175 $x254)))
 (let (($x273 (and $x256 $x181)))
 (let (($x193 (and $x273 $x128)))
 (let (($x296 (and $x193 $x300)))
 (let (($x312 (and $x296 $x311)))
 (let (($x262 (and $x312 $x169)))
 (let (($x288 (and $x262 $x285)))
 (let (($x11 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x28 (_ bv1 32))))
 (let (($x286 (and $x76 $x288)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x258 (and $x67 $x286)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x290 (and $x139 $x258)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x14 (and $x8 $x290)))
 (let (($x197 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd ?x203 (_ bv3 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x198 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x89)))
 (let (($x40 (or false (or false (and (and true (or $x213 $x198)) (or $x145 $x197))))))
 (let (($x45 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x40)))
 (let (($x134 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x40)))
 (let (($x272 (and $x134 $x14)))
 (let (($x55 (=> $x272 $x310)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000006)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00001003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000006 x!0)
         (ite (bvule #x00000007 x!0) #x00000007 #x00000006)
         #x00000003))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0) (input.spec-%var-x-1.1.1 x!0) a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfd227c00)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x619671c0)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x619671c3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfd227c03)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x619671c0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfd227c00)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x7ffffffb (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffffa (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff9 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff8 (bvmul #x00000004 x!0))))))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000003))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffffb (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffffa (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff9 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x319 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x240 (bvule ?x319 (_ bv4 32))))
 (let (($x61 (= $x240 true)))
 (let (($x228 (= $x61 true)))
 (let (($x280 (forall ((input.ind-%var1150X (_ BitVec 32)) )(let ((?x306 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1150X)))
 (let ((?x243 (input.spec-%var-x-1.1.1 input.ind-%var1150X)))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1150X)))
 (=> $x263 (= ?x243 ?x306))))))
 ))
 (let (($x167 (forall ((input.ind-%var1149X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1149X)))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1149X)))
 (= $x263 $x76))))
 ))
 (let (($x313 (and $x167 $x280)))
 (let (($x157 (= $x313 true)))
 (let (($x56 (forall ((input.ind-%var1144X (_ BitVec 32)) )(let ((?x287 (bvadd (bvmul input.ind-%var1144X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem ?x287))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv2 32))) ?x285))))
 (let ((?x306 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1144X)))
 (let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1144X)))
 (=> $x76 (= ?x306 ?x272))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1143X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var1143X) (bvult input.ind-%var1143X input.dst.llvm-%n))))
 (let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1143X)))
 (= $x76 $x248))))
 ))
 (let (($x268 (and $x284 $x56)))
 (let (($x205 (= $x268 true)))
 (let (($x303 (forall ((input.ind-%var1138X (_ BitVec 32)) )(let ((?x287 (bvadd (bvmul input.ind-%var1138X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem ?x287))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv2 32))) ?x285))))
 (let ((?x243 (input.spec-%var-x-1.1.1 input.ind-%var1138X)))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1138X)))
 (=> $x263 (= ?x243 ?x272))))))))
 ))
 (let (($x253 (forall ((input.ind-%var1137X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var1137X) (bvult input.ind-%var1137X input.dst.llvm-%n))))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1137X)))
 (= $x263 $x248))))
 ))
 (let (($x310 (and $x253 $x303)))
 (let (($x55 (= $x310 true)))
 (let ((?x296 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x296)))
 (let (($x65 (= ?x54 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x65 true)))
 (let (($x233 (= $x19 true)))
 (let (($x7 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x182 (= $x7 true)))
 (let (($x299 (= $x182 true)))
 (let (($x267 (= $x299 true)))
 (let (($x59 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x236 (= $x59 true)))
 (let (($x98 (= $x236 true)))
 (let (($x128 (= $x98 true)))
 (let (($x91 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x97 (= $x91 true)))
 (let (($x48 (= $x97 true)))
 (let (($x181 (= $x48 true)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x202)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x183)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x133)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x142 $x149)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x39 $x69)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x27 $x16)))
 (let (($x93 (not $x220)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x178 $x160)))
 (let (($x122 (and (not $x6) $x93)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x221 $x191)))
 (let (($x212 (not $x225)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x174 $x5)))
 (let (($x86 (and (not $x125) $x212)))
 (let (($x121 (and (and (and (and (and (and $x86 $x122) $x120) $x137) $x132) $x140) $x168)))
 (let (($x175 (and $x121 $x187)))
 (let (($x208 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x29 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x29)))
 (let (($x179 (or false (or false (and (and true (or $x163 $x36)) (or $x170 $x208))))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x179)))
 (let (($x230 (and $x173 $x175)))
 (let (($x231 (= $x230 true)))
 (let (($x235 (= $x231 true)))
 (let (($x254 (= $x235 true)))
 (let ((?x150 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x74 (= (_ bv0 2) ?x150)))
 (let (($x180 (= $x74 true)))
 (let (($x155 (= $x180 true)))
 (let (($x156 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x105 (= $x156 true)))
 (let (($x171 (= $x105 true)))
 (let (($x209 (= $x171 true)))
 (let (($x43 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x200 (= $x43 true)))
 (let (($x123 (= $x200 true)))
 (let (($x34 (= $x123 true)))
 (let (($x201 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x219 (= $x201 true)))
 (let (($x136 (= $x219 true)))
 (let (($x216 (= $x136 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x222 (bvsub ?x203 ?x96)))
 (let (($x103 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x222) (bvult ?x203 ?x222))))
 (let (($x101 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x82 (ite $x101 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x87 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x166 (bvmul (_ bv4 64) ?x87)))
 (let ((?x112 ((_ extract 63 32) ?x166)))
 (let (($x71 (= ?x112 ?x82)))
 (let (($x110 (and $x71 $x103)))
 (let (($x84 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x109 (and $x84 $x110)))
 (let (($x30 (= true $x109)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x227 (=> $x51 $x30)))
 (let (($x129 (= $x227 true)))
 (let (($x118 (= $x129 true)))
 (let (($x104 (= $x118 true)))
 (let ((?x32 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x32)))
 (let (($x68 (= ?x177 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x17 (= $x68 true)))
 (let (($x20 (= $x17 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x79 (= $x23 true)))
 (let (($x62 (= $x79 true)))
 (let (($x64 (= $x62 true)))
 (let (($x10 (= $x51 true)))
 (let (($x73 (= $x10 true)))
 (let (($x47 (= $x73 true)))
 (let (($x88 (and $x47 $x64)))
 (let (($x72 (and $x88 $x20)))
 (let (($x126 (and $x72 $x104)))
 (let (($x131 (and $x126 $x216)))
 (let (($x66 (and $x131 $x34)))
 (let (($x224 (and $x66 $x209)))
 (let (($x57 (and $x224 $x155)))
 (let (($x256 (and $x57 $x254)))
 (let (($x273 (and $x256 $x181)))
 (let (($x193 (and $x273 $x128)))
 (let (($x300 (and $x193 $x267)))
 (let (($x252 (and $x300 $x233)))
 (let (($x244 (and $x252 $x55)))
 (let (($x294 (and $x244 $x205)))
 (let (($x241 (and $x294 $x157)))
 (let (($x53 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x78 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x78 (_ bv1 32))))
 (let (($x315 (and $x22 $x241)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x107 (and $x75 $x315)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x279 (and $x176 $x107)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x245 (and $x21 $x279)))
 (let (($x25 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd ?x203 (_ bv3 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x127 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x198)))
 (let (($x134 (or false (or false (and (and true (or $x35 $x127)) (or $x77 $x25))))))
 (let (($x8 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x134)))
 (let (($x106 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x134)))
 (let (($x135 (and $x106 $x245)))
 (let (($x250 (=> $x135 $x228)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x319 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x240 (bvule ?x319 (_ bv4 32))))
 (let (($x61 (= $x240 true)))
 (let (($x228 (= $x61 true)))
 (let (($x280 (forall ((input.ind-%var1150X (_ BitVec 32)) )(let ((?x306 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1150X)))
 (let ((?x243 (input.spec-%var-x-1.1.1 input.ind-%var1150X)))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1150X)))
 (=> $x263 (= ?x243 ?x306))))))
 ))
 (let (($x167 (forall ((input.ind-%var1149X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1149X)))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1149X)))
 (= $x263 $x76))))
 ))
 (let (($x313 (and $x167 $x280)))
 (let (($x157 (= $x313 true)))
 (let (($x56 (forall ((input.ind-%var1144X (_ BitVec 32)) )(let ((?x287 (bvadd (bvmul input.ind-%var1144X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem ?x287))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv2 32))) ?x285))))
 (let ((?x306 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1144X)))
 (let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1144X)))
 (=> $x76 (= ?x306 ?x272))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1143X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var1143X) (bvult input.ind-%var1143X input.dst.llvm-%n))))
 (let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1143X)))
 (= $x76 $x248))))
 ))
 (let (($x268 (and $x284 $x56)))
 (let (($x205 (= $x268 true)))
 (let (($x303 (forall ((input.ind-%var1138X (_ BitVec 32)) )(let ((?x287 (bvadd (bvmul input.ind-%var1138X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem ?x287))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv2 32))) ?x285))))
 (let ((?x243 (input.spec-%var-x-1.1.1 input.ind-%var1138X)))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1138X)))
 (=> $x263 (= ?x243 ?x272))))))))
 ))
 (let (($x253 (forall ((input.ind-%var1137X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var1137X) (bvult input.ind-%var1137X input.dst.llvm-%n))))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1137X)))
 (= $x263 $x248))))
 ))
 (let (($x310 (and $x253 $x303)))
 (let (($x55 (= $x310 true)))
 (let ((?x296 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x296)))
 (let (($x65 (= ?x54 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x65 true)))
 (let (($x233 (= $x19 true)))
 (let (($x7 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x182 (= $x7 true)))
 (let (($x299 (= $x182 true)))
 (let (($x267 (= $x299 true)))
 (let (($x59 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x236 (= $x59 true)))
 (let (($x98 (= $x236 true)))
 (let (($x128 (= $x98 true)))
 (let (($x91 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x97 (= $x91 true)))
 (let (($x48 (= $x97 true)))
 (let (($x181 (= $x48 true)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x202)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x183)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x133)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x142 $x149)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x39 $x69)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x27 $x16)))
 (let (($x93 (not $x220)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x178 $x160)))
 (let (($x122 (and (not $x6) $x93)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x221 $x191)))
 (let (($x212 (not $x225)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x174 $x5)))
 (let (($x86 (and (not $x125) $x212)))
 (let (($x121 (and (and (and (and (and (and $x86 $x122) $x120) $x137) $x132) $x140) $x168)))
 (let (($x175 (and $x121 $x187)))
 (let (($x208 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x29 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x29)))
 (let (($x179 (or false (or false (and (and true (or $x163 $x36)) (or $x170 $x208))))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x179)))
 (let (($x230 (and $x173 $x175)))
 (let (($x231 (= $x230 true)))
 (let (($x235 (= $x231 true)))
 (let (($x254 (= $x235 true)))
 (let ((?x150 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x74 (= (_ bv0 2) ?x150)))
 (let (($x180 (= $x74 true)))
 (let (($x155 (= $x180 true)))
 (let (($x156 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x105 (= $x156 true)))
 (let (($x171 (= $x105 true)))
 (let (($x209 (= $x171 true)))
 (let (($x43 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x200 (= $x43 true)))
 (let (($x123 (= $x200 true)))
 (let (($x34 (= $x123 true)))
 (let (($x201 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x219 (= $x201 true)))
 (let (($x136 (= $x219 true)))
 (let (($x216 (= $x136 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x222 (bvsub ?x203 ?x96)))
 (let (($x103 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x222) (bvult ?x203 ?x222))))
 (let (($x101 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x82 (ite $x101 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x87 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x166 (bvmul (_ bv4 64) ?x87)))
 (let ((?x112 ((_ extract 63 32) ?x166)))
 (let (($x71 (= ?x112 ?x82)))
 (let (($x110 (and $x71 $x103)))
 (let (($x84 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x109 (and $x84 $x110)))
 (let (($x30 (= true $x109)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x227 (=> $x51 $x30)))
 (let (($x129 (= $x227 true)))
 (let (($x118 (= $x129 true)))
 (let (($x104 (= $x118 true)))
 (let ((?x32 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x32)))
 (let (($x68 (= ?x177 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x17 (= $x68 true)))
 (let (($x20 (= $x17 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x79 (= $x23 true)))
 (let (($x62 (= $x79 true)))
 (let (($x64 (= $x62 true)))
 (let (($x10 (= $x51 true)))
 (let (($x73 (= $x10 true)))
 (let (($x47 (= $x73 true)))
 (let (($x88 (and $x47 $x64)))
 (let (($x72 (and $x88 $x20)))
 (let (($x126 (and $x72 $x104)))
 (let (($x131 (and $x126 $x216)))
 (let (($x66 (and $x131 $x34)))
 (let (($x224 (and $x66 $x209)))
 (let (($x57 (and $x224 $x155)))
 (let (($x256 (and $x57 $x254)))
 (let (($x273 (and $x256 $x181)))
 (let (($x193 (and $x273 $x128)))
 (let (($x300 (and $x193 $x267)))
 (let (($x252 (and $x300 $x233)))
 (let (($x244 (and $x252 $x55)))
 (let (($x294 (and $x244 $x205)))
 (let (($x241 (and $x294 $x157)))
 (let (($x53 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x78 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x78 (_ bv1 32))))
 (let (($x315 (and $x22 $x241)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x107 (and $x75 $x315)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x279 (and $x176 $x107)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x245 (and $x21 $x279)))
 (let (($x25 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd ?x203 (_ bv3 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x127 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x198)))
 (let (($x134 (or false (or false (and (and true (or $x35 $x127)) (or $x77 $x25))))))
 (let (($x8 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x134)))
 (let (($x106 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x134)))
 (let (($x135 (and $x106 $x245)))
 (let (($x250 (=> $x135 $x228)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000104)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000107)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000104)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000005 x!0)
         (ite (bvule #x00000006 x!0) #x00000006 #x00000005)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0) (input.spec-%var-x-1.1.1 x!0) a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc15011a0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4db84000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4db84003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc15011a3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4db84000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc15011a0)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x02000001 x!0)
         (ite (bvule #x02000002 x!0) #x02000002 #x02000001)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x211 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x292 (bvule ?x211 (_ bv4294967294 32))))
 (let (($x262 (= $x292 true)))
 (let (($x301 (= $x262 true)))
 (let (($x251 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let ((?x85 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1219X)))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var1219X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var1219X)))
 (=> $x233 (= ?x14 ?x85))))))
 ))
 (let (($x26 (forall ((input.ind-%var1218X (_ BitVec 32)) )(let (($x22 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1218X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var1218X)))
 (= $x233 $x22))))
 ))
 (let (($x119 (and $x26 $x251)))
 (let (($x172 (= $x119 true)))
 (let (($x316 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1213X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x268))))
 (let ((?x85 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1213X)))
 (let (($x22 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1213X)))
 (=> $x22 (= ?x85 ?x277))))))))
 ))
 (let (($x250 (forall ((input.ind-%var1212X (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) input.ind-%var1212X) (bvult input.ind-%var1212X input.dst.llvm-%n))))
 (let (($x22 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1212X)))
 (= $x22 $x253))))
 ))
 (let (($x257 (and $x250 $x316)))
 (let (($x169 (= $x257 true)))
 (let (($x157 (forall ((input.ind-%var1207X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1207X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x268))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var1207X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var1207X)))
 (=> $x233 (= ?x14 ?x277))))))))
 ))
 (let (($x274 (forall ((input.ind-%var1206X (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) input.ind-%var1206X) (bvult input.ind-%var1206X input.dst.llvm-%n))))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var1206X)))
 (= $x233 $x253))))
 ))
 (let (($x241 (and $x274 $x157)))
 (let (($x315 (= $x241 true)))
 (let ((?x182 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x299 (bvneg ?x182)))
 (let (($x267 (= ?x299 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x300 (= $x267 true)))
 (let (($x296 (= $x300 true)))
 (let (($x236 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x98 (= $x236 true)))
 (let (($x128 (= $x98 true)))
 (let (($x193 (= $x128 true)))
 (let (($x97 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x48 (= $x97 true)))
 (let (($x181 (= $x48 true)))
 (let (($x273 (= $x181 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x140)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x162)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (and $x185 $x142)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x137 $x133)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x27 $x16)))
 (let (($x93 (not $x220)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x160 $x6)))
 (let (($x92 (and (not $x144) $x93)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x221 $x191)))
 (let (($x212 (not $x225)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x115 $x124)))
 (let (($x178 (and (not $x196) $x212)))
 (let (($x175 (and (and (and (and (and (and $x178 $x92) $x120) $x116) $x149) $x132) $x146)))
 (let (($x230 (and $x175 $x151)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x36)))
 (let (($x174 (or false (or false (and (and true (or $x206 $x108)) (or $x217 $x114))))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x174)))
 (let (($x231 (and $x125 $x230)))
 (let (($x235 (= $x231 true)))
 (let (($x254 (= $x235 true)))
 (let (($x256 (= $x254 true)))
 (let (($x150 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x74 (= $x150 true)))
 (let (($x180 (= $x74 true)))
 (let (($x155 (= $x180 true)))
 (let ((?x156 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x105 (= (_ bv0 2) ?x156)))
 (let (($x171 (= $x105 true)))
 (let (($x209 (= $x171 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (= $x131 true)))
 (let (($x200 (= $x43 true)))
 (let (($x123 (= $x200 true)))
 (let (($x126 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x201 (= $x126 true)))
 (let (($x219 (= $x201 true)))
 (let (($x136 (= $x219 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x71 (bvsub ?x203 ?x96)))
 (let (($x210 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x71) (bvult ?x203 ?x71))))
 (let (($x112 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x101 (ite $x112 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x153 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvmul (_ bv4 64) ?x153)))
 (let ((?x166 ((_ extract 63 32) ?x87)))
 (let (($x82 (= ?x166 ?x101)))
 (let (($x103 (and $x82 $x210)))
 (let (($x38 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x110 (and $x38 $x103)))
 (let (($x109 (= true $x110)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x30 (=> $x51 $x109)))
 (let (($x227 (= $x30 true)))
 (let (($x129 (= $x227 true)))
 (let (($x118 (= $x129 true)))
 (let ((?x102 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x102)))
 (let (($x111 (= ?x32 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x111 true)))
 (let (($x17 (= $x68 true)))
 (let (($x79 (= $x51 true)))
 (let (($x62 (= $x79 true)))
 (let (($x64 (= $x62 true)))
 (let (($x20 (and $x64 $x17)))
 (let (($x104 (and $x20 $x118)))
 (let (($x216 (and $x104 $x136)))
 (let (($x34 (and $x216 $x123)))
 (let (($x224 (and $x34 $x209)))
 (let (($x57 (and $x224 $x155)))
 (let (($x91 (and $x57 $x256)))
 (let (($x59 (and $x91 $x273)))
 (let (($x7 (and $x59 $x193)))
 (let (($x54 (and $x7 $x296)))
 (let (($x107 (and $x54 $x315)))
 (let (($x297 (and $x107 $x169)))
 (let (($x320 (and $x297 $x172)))
 (let (($x73 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x47 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x47 (_ bv1 32))))
 (let (($x246 (and $x23 $x320)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x11 $x246)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x215 (and $x67 $x100)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x159 (and $x90 $x215)))
 (let (($x40 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd ?x203 (_ bv3 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x145 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x106 (or false (or false (and (and true (or $x218 $x145)) (or $x44 $x40))))))
 (let (($x21 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x106)))
 (let (($x184 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x106)))
 (let (($x70 (and $x184 $x159)))
 (let (($x304 (=> $x70 $x301)))
 (not $x304))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x211 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x292 (bvule ?x211 (_ bv4294967294 32))))
 (let (($x262 (= $x292 true)))
 (let (($x301 (= $x262 true)))
 (let (($x251 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let ((?x85 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1219X)))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var1219X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var1219X)))
 (=> $x233 (= ?x14 ?x85))))))
 ))
 (let (($x26 (forall ((input.ind-%var1218X (_ BitVec 32)) )(let (($x22 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1218X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var1218X)))
 (= $x233 $x22))))
 ))
 (let (($x119 (and $x26 $x251)))
 (let (($x172 (= $x119 true)))
 (let (($x316 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1213X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x268))))
 (let ((?x85 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1213X)))
 (let (($x22 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1213X)))
 (=> $x22 (= ?x85 ?x277))))))))
 ))
 (let (($x250 (forall ((input.ind-%var1212X (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) input.ind-%var1212X) (bvult input.ind-%var1212X input.dst.llvm-%n))))
 (let (($x22 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1212X)))
 (= $x22 $x253))))
 ))
 (let (($x257 (and $x250 $x316)))
 (let (($x169 (= $x257 true)))
 (let (($x157 (forall ((input.ind-%var1207X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1207X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x268))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var1207X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var1207X)))
 (=> $x233 (= ?x14 ?x277))))))))
 ))
 (let (($x274 (forall ((input.ind-%var1206X (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) input.ind-%var1206X) (bvult input.ind-%var1206X input.dst.llvm-%n))))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var1206X)))
 (= $x233 $x253))))
 ))
 (let (($x241 (and $x274 $x157)))
 (let (($x315 (= $x241 true)))
 (let ((?x182 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x299 (bvneg ?x182)))
 (let (($x267 (= ?x299 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x300 (= $x267 true)))
 (let (($x296 (= $x300 true)))
 (let (($x236 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x98 (= $x236 true)))
 (let (($x128 (= $x98 true)))
 (let (($x193 (= $x128 true)))
 (let (($x97 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x48 (= $x97 true)))
 (let (($x181 (= $x48 true)))
 (let (($x273 (= $x181 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x140)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x162)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (and $x185 $x142)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x137 $x133)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x27 $x16)))
 (let (($x93 (not $x220)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x160 $x6)))
 (let (($x92 (and (not $x144) $x93)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x221 $x191)))
 (let (($x212 (not $x225)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x115 $x124)))
 (let (($x178 (and (not $x196) $x212)))
 (let (($x175 (and (and (and (and (and (and $x178 $x92) $x120) $x116) $x149) $x132) $x146)))
 (let (($x230 (and $x175 $x151)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x36)))
 (let (($x174 (or false (or false (and (and true (or $x206 $x108)) (or $x217 $x114))))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x174)))
 (let (($x231 (and $x125 $x230)))
 (let (($x235 (= $x231 true)))
 (let (($x254 (= $x235 true)))
 (let (($x256 (= $x254 true)))
 (let (($x150 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x74 (= $x150 true)))
 (let (($x180 (= $x74 true)))
 (let (($x155 (= $x180 true)))
 (let ((?x156 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x105 (= (_ bv0 2) ?x156)))
 (let (($x171 (= $x105 true)))
 (let (($x209 (= $x171 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (= $x131 true)))
 (let (($x200 (= $x43 true)))
 (let (($x123 (= $x200 true)))
 (let (($x126 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x201 (= $x126 true)))
 (let (($x219 (= $x201 true)))
 (let (($x136 (= $x219 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x71 (bvsub ?x203 ?x96)))
 (let (($x210 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x71) (bvult ?x203 ?x71))))
 (let (($x112 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x101 (ite $x112 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x153 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvmul (_ bv4 64) ?x153)))
 (let ((?x166 ((_ extract 63 32) ?x87)))
 (let (($x82 (= ?x166 ?x101)))
 (let (($x103 (and $x82 $x210)))
 (let (($x38 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x110 (and $x38 $x103)))
 (let (($x109 (= true $x110)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x30 (=> $x51 $x109)))
 (let (($x227 (= $x30 true)))
 (let (($x129 (= $x227 true)))
 (let (($x118 (= $x129 true)))
 (let ((?x102 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x102)))
 (let (($x111 (= ?x32 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x111 true)))
 (let (($x17 (= $x68 true)))
 (let (($x79 (= $x51 true)))
 (let (($x62 (= $x79 true)))
 (let (($x64 (= $x62 true)))
 (let (($x20 (and $x64 $x17)))
 (let (($x104 (and $x20 $x118)))
 (let (($x216 (and $x104 $x136)))
 (let (($x34 (and $x216 $x123)))
 (let (($x224 (and $x34 $x209)))
 (let (($x57 (and $x224 $x155)))
 (let (($x91 (and $x57 $x256)))
 (let (($x59 (and $x91 $x273)))
 (let (($x7 (and $x59 $x193)))
 (let (($x54 (and $x7 $x296)))
 (let (($x107 (and $x54 $x315)))
 (let (($x297 (and $x107 $x169)))
 (let (($x320 (and $x297 $x172)))
 (let (($x73 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x47 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x47 (_ bv1 32))))
 (let (($x246 (and $x23 $x320)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x11 $x246)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x215 (and $x67 $x100)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x159 (and $x90 $x215)))
 (let (($x40 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd ?x203 (_ bv3 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x145 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x106 (or false (or false (and (and true (or $x218 $x145)) (or $x44 $x40))))))
 (let (($x21 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x106)))
 (let (($x184 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x106)))
 (let (($x70 (and $x184 $x159)))
 (let (($x304 (=> $x70 $x301)))
 (not $x304))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x46 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x312 (bvsge ?x46 (_ bv0 32))))
 (let (($x308 (= $x312 true)))
 (let (($x152 (= $x308 true)))
 (let (($x240 (forall ((input.ind-%var1242X (_ BitVec 32)) )(let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1242X)))
 (let ((?x277 (input.spec-%var-x-1.1.1 input.ind-%var1242X)))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1242X)))
 (=> $x14 (= ?x277 ?x286))))))
 ))
 (let (($x282 (forall ((input.ind-%var1241X (_ BitVec 32)) )(let (($x23 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1241X)))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1241X)))
 (= $x14 $x23))))
 ))
 (let (($x186 (and $x282 $x240)))
 (let (($x76 (= $x186 true)))
 (let (($x19 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let ((?x199 (bvadd (bvmul input.ind-%var1236X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem ?x199))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv2 32))) ?x172))))
 (let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1236X)))
 (let (($x23 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1236X)))
 (=> $x23 (= ?x286 ?x70))))))))
 ))
 (let (($x290 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1235X) (bvult input.ind-%var1235X input.dst.llvm-%n))))
 (let (($x23 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1235X)))
 (= $x23 $x294))))
 ))
 (let (($x291 (and $x290 $x19)))
 (let (($x264 (= $x291 true)))
 (let (($x262 (forall ((input.ind-%var1230X (_ BitVec 32)) )(let ((?x199 (bvadd (bvmul input.ind-%var1230X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem ?x199))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv2 32))) ?x172))))
 (let ((?x277 (input.spec-%var-x-1.1.1 input.ind-%var1230X)))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1230X)))
 (=> $x14 (= ?x277 ?x70))))))))
 ))
 (let (($x56 (forall ((input.ind-%var1229X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1229X) (bvult input.ind-%var1229X input.dst.llvm-%n))))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1229X)))
 (= $x14 $x294))))
 ))
 (let (($x301 (and $x56 $x262)))
 (let (($x304 (= $x301 true)))
 (let ((?x54 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x54)))
 (let (($x233 (= ?x78 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x233 true)))
 (let (($x248 (= $x37 true)))
 (let (($x182 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x299 (= $x182 true)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x236 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x98 (= $x236 true)))
 (let (($x128 (= $x98 true)))
 (let (($x193 (= $x128 true)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x175)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x162)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x133)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (and $x142 $x149)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x39 $x202)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x92 $x183)))
 (let (($x120 (not $x41)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x16 $x220)))
 (let (($x9 (and (not $x93) $x120)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x178 $x160)))
 (let (($x144 (not $x6)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x108 $x170)))
 (let (($x27 (and (not $x212) $x144)))
 (let (($x256 (and (and (and (and (and (and $x27 $x9) $x121) $x185) $x69) $x187) $x146)))
 (let (($x91 (and $x256 $x140)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x114 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x114)))
 (let (($x221 (or false (or false (and (and true (or $x195 $x179)) (or $x125 $x115))))))
 (let (($x225 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x221)))
 (let (($x97 (and $x225 $x91)))
 (let (($x48 (= $x97 true)))
 (let (($x181 (= $x48 true)))
 (let (($x273 (= $x181 true)))
 (let (($x57 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x29 (= $x57 true)))
 (let (($x163 (= $x29 true)))
 (let (($x5 (= $x163 true)))
 (let ((?x224 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x13 (= (_ bv0 2) ?x224)))
 (let (($x150 (= $x13 true)))
 (let (($x74 (= $x150 true)))
 (let (($x34 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (= $x34 true)))
 (let (($x156 (= $x66 true)))
 (let (($x105 (= $x156 true)))
 (let (($x216 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x131 (= $x216 true)))
 (let (($x43 (= $x131 true)))
 (let (($x200 (= $x43 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x210 (bvsub ?x203 ?x96)))
 (let (($x30 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x210) (bvult ?x203 ?x210))))
 (let (($x71 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x222 (ite $x71 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x101 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvmul (_ bv4 64) ?x101)))
 (let ((?x188 ((_ extract 63 32) ?x82)))
 (let (($x204 (= ?x188 ?x222)))
 (let (($x227 (and $x204 $x30)))
 (let (($x166 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x129 (and $x166 $x227)))
 (let (($x118 (= true $x129)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x104 (=> $x51 $x118)))
 (let (($x126 (= $x104 true)))
 (let (($x201 (= $x126 true)))
 (let (($x219 (= $x201 true)))
 (let ((?x68 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x68)))
 (let (($x72 (= ?x17 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x72 true)))
 (let (($x38 (= $x141 true)))
 (let (($x63 (= $x51 true)))
 (let (($x102 (= $x63 true)))
 (let (($x32 (= $x102 true)))
 (let (($x84 (and $x32 $x38)))
 (let (($x136 (and $x84 $x219)))
 (let (($x123 (and $x136 $x200)))
 (let (($x171 (and $x123 $x105)))
 (let (($x180 (and $x171 $x74)))
 (let (($x36 (and $x180 $x5)))
 (let (($x59 (and $x36 $x273)))
 (let (($x7 (and $x59 $x193)))
 (let (($x296 (and $x7 $x300)))
 (let (($x253 (and $x296 $x248)))
 (let (($x99 (and $x253 $x304)))
 (let (($x255 (and $x99 $x264)))
 (let (($x147 (and $x255 $x76)))
 (let (($x62 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x64 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x64 (_ bv1 32))))
 (let (($x61 (and $x88 $x147)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x287 (and $x53 $x61)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x266 (and $x75 $x287)))
 (let (($x139 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x270 (and $x139 $x266)))
 (let (($x134 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x145 (bvadd ?x203 (_ bv3 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x145)))
 (let (($x77 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x145)))
 (let (($x184 (or false (or false (and (and true (or $x31 $x77)) (or $x45 $x134))))))
 (let (($x90 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x184)))
 (let (($x89 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x184)))
 (let (($x83 (and $x89 $x270)))
 (let (($x238 (=> $x83 $x152)))
 (not $x238))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x46 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x312 (bvsge ?x46 (_ bv0 32))))
 (let (($x308 (= $x312 true)))
 (let (($x152 (= $x308 true)))
 (let (($x240 (forall ((input.ind-%var1242X (_ BitVec 32)) )(let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1242X)))
 (let ((?x277 (input.spec-%var-x-1.1.1 input.ind-%var1242X)))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1242X)))
 (=> $x14 (= ?x277 ?x286))))))
 ))
 (let (($x282 (forall ((input.ind-%var1241X (_ BitVec 32)) )(let (($x23 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1241X)))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1241X)))
 (= $x14 $x23))))
 ))
 (let (($x186 (and $x282 $x240)))
 (let (($x76 (= $x186 true)))
 (let (($x19 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let ((?x199 (bvadd (bvmul input.ind-%var1236X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem ?x199))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv2 32))) ?x172))))
 (let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1236X)))
 (let (($x23 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1236X)))
 (=> $x23 (= ?x286 ?x70))))))))
 ))
 (let (($x290 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1235X) (bvult input.ind-%var1235X input.dst.llvm-%n))))
 (let (($x23 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1235X)))
 (= $x23 $x294))))
 ))
 (let (($x291 (and $x290 $x19)))
 (let (($x264 (= $x291 true)))
 (let (($x262 (forall ((input.ind-%var1230X (_ BitVec 32)) )(let ((?x199 (bvadd (bvmul input.ind-%var1230X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem ?x199))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv2 32))) ?x172))))
 (let ((?x277 (input.spec-%var-x-1.1.1 input.ind-%var1230X)))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1230X)))
 (=> $x14 (= ?x277 ?x70))))))))
 ))
 (let (($x56 (forall ((input.ind-%var1229X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1229X) (bvult input.ind-%var1229X input.dst.llvm-%n))))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1229X)))
 (= $x14 $x294))))
 ))
 (let (($x301 (and $x56 $x262)))
 (let (($x304 (= $x301 true)))
 (let ((?x54 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x54)))
 (let (($x233 (= ?x78 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x233 true)))
 (let (($x248 (= $x37 true)))
 (let (($x182 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x299 (= $x182 true)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x236 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x98 (= $x236 true)))
 (let (($x128 (= $x98 true)))
 (let (($x193 (= $x128 true)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x175)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x162)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x133)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (and $x142 $x149)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x39 $x202)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x92 $x183)))
 (let (($x120 (not $x41)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x16 $x220)))
 (let (($x9 (and (not $x93) $x120)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x178 $x160)))
 (let (($x144 (not $x6)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x108 $x170)))
 (let (($x27 (and (not $x212) $x144)))
 (let (($x256 (and (and (and (and (and (and $x27 $x9) $x121) $x185) $x69) $x187) $x146)))
 (let (($x91 (and $x256 $x140)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x114 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x114)))
 (let (($x221 (or false (or false (and (and true (or $x195 $x179)) (or $x125 $x115))))))
 (let (($x225 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x221)))
 (let (($x97 (and $x225 $x91)))
 (let (($x48 (= $x97 true)))
 (let (($x181 (= $x48 true)))
 (let (($x273 (= $x181 true)))
 (let (($x57 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x29 (= $x57 true)))
 (let (($x163 (= $x29 true)))
 (let (($x5 (= $x163 true)))
 (let ((?x224 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x13 (= (_ bv0 2) ?x224)))
 (let (($x150 (= $x13 true)))
 (let (($x74 (= $x150 true)))
 (let (($x34 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (= $x34 true)))
 (let (($x156 (= $x66 true)))
 (let (($x105 (= $x156 true)))
 (let (($x216 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x131 (= $x216 true)))
 (let (($x43 (= $x131 true)))
 (let (($x200 (= $x43 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x210 (bvsub ?x203 ?x96)))
 (let (($x30 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x210) (bvult ?x203 ?x210))))
 (let (($x71 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x222 (ite $x71 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x101 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvmul (_ bv4 64) ?x101)))
 (let ((?x188 ((_ extract 63 32) ?x82)))
 (let (($x204 (= ?x188 ?x222)))
 (let (($x227 (and $x204 $x30)))
 (let (($x166 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x129 (and $x166 $x227)))
 (let (($x118 (= true $x129)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x104 (=> $x51 $x118)))
 (let (($x126 (= $x104 true)))
 (let (($x201 (= $x126 true)))
 (let (($x219 (= $x201 true)))
 (let ((?x68 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x68)))
 (let (($x72 (= ?x17 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x72 true)))
 (let (($x38 (= $x141 true)))
 (let (($x63 (= $x51 true)))
 (let (($x102 (= $x63 true)))
 (let (($x32 (= $x102 true)))
 (let (($x84 (and $x32 $x38)))
 (let (($x136 (and $x84 $x219)))
 (let (($x123 (and $x136 $x200)))
 (let (($x171 (and $x123 $x105)))
 (let (($x180 (and $x171 $x74)))
 (let (($x36 (and $x180 $x5)))
 (let (($x59 (and $x36 $x273)))
 (let (($x7 (and $x59 $x193)))
 (let (($x296 (and $x7 $x300)))
 (let (($x253 (and $x296 $x248)))
 (let (($x99 (and $x253 $x304)))
 (let (($x255 (and $x99 $x264)))
 (let (($x147 (and $x255 $x76)))
 (let (($x62 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x64 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x64 (_ bv1 32))))
 (let (($x61 (and $x88 $x147)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x287 (and $x53 $x61)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x266 (and $x75 $x287)))
 (let (($x139 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x270 (and $x139 $x266)))
 (let (($x134 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x145 (bvadd ?x203 (_ bv3 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x145)))
 (let (($x77 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x145)))
 (let (($x184 (or false (or false (and (and true (or $x31 $x77)) (or $x45 $x134))))))
 (let (($x90 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x184)))
 (let (($x89 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x184)))
 (let (($x83 (and $x89 $x270)))
 (let (($x238 (=> $x83 $x152)))
 (not $x238))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x135 (bvule ?x28 (_ bv4294967294 32))))
 (let (($x283 (= $x135 true)))
 (let (($x314 (= $x283 true)))
 (let (($x138 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let ((?x157 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1265X)))
 (let ((?x70 (input.spec-%var-x-1.1.1 input.ind-%var1265X)))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1265X)))
 (=> $x277 (= ?x70 ?x157))))))
 ))
 (let (($x49 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1264X)))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1264X)))
 (= $x277 $x88))))
 ))
 (let (($x252 (and $x49 $x138)))
 (let (($x297 (= $x252 true)))
 (let (($x274 (forall ((input.ind-%var1259X (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul input.ind-%var1259X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x76))))
 (let ((?x157 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1259X)))
 (let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1259X)))
 (=> $x88 (= ?x157 ?x83))))))))
 ))
 (let (($x237 (forall ((input.ind-%var1258X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var1258X) (bvult input.ind-%var1258X input.dst.llvm-%n))))
 (let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1258X)))
 (= $x88 $x246))))
 ))
 (let (($x167 (and $x237 $x274)))
 (let (($x55 (= $x167 true)))
 (let (($x308 (forall ((input.ind-%var1253X (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul input.ind-%var1253X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x76))))
 (let ((?x70 (input.spec-%var-x-1.1.1 input.ind-%var1253X)))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1253X)))
 (=> $x277 (= ?x70 ?x83))))))))
 ))
 (let (($x119 (forall ((input.ind-%var1252X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var1252X) (bvult input.ind-%var1252X input.dst.llvm-%n))))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1252X)))
 (= $x277 $x246))))
 ))
 (let (($x152 (and $x119 $x308)))
 (let (($x238 (= $x152 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x253)))
 (let (($x14 (= ?x47 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x205 (= $x14 true)))
 (let (($x272 (= $x205 true)))
 (let (($x54 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x78 (= $x54 true)))
 (let (($x233 (= $x78 true)))
 (let (($x37 (= $x233 true)))
 (let (($x182 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x299 (= $x182 true)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x236 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x98 (= $x236 true)))
 (let (($x128 (= $x98 true)))
 (let (($x193 (= $x128 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x187 (bvsub ?x203 ?x96)))
 (let (($x256 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x187) (bvult ?x203 ?x187))))
 (let (($x69 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x235 (ite $x69 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x133 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x149 (bvmul (_ bv4 64) ?x133)))
 (let ((?x202 ((_ extract 63 32) ?x149)))
 (let (($x132 (= ?x202 ?x235)))
 (let (($x175 (and $x132 $x256)))
 (let (($x39 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x140 (and $x39 $x175)))
 (let (($x91 (= true $x140)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (=> $x51 $x91)))
 (let (($x48 (= $x97 true)))
 (let (($x181 (= $x48 true)))
 (let (($x273 (= $x181 true)))
 (let (($x116 (= $x51 true)))
 (let (($x121 (= $x116 true)))
 (let (($x230 (= $x121 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x160)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x122)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (and $x196 $x221)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x124 $x225)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (and $x208 $x217)))
 (let (($x114 (not $x191)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (and $x163 $x5)))
 (let (($x179 (and (not $x36) $x114)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x150 $x74)))
 (let (($x155 (not $x180)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x104 $x126)))
 (let (($x29 (and (not $x13) $x155)))
 (let (($x168 (and (and (and (and (and (and $x29 $x179) $x174) $x115) $x108) $x212) $x178)))
 (let (($x92 (and $x168 $x6)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x171 (or false (or false (and (and true (or $x216 $x131)) (or $x123 $x34))))))
 (let (($x224 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x171)))
 (let (($x183 (and $x224 $x92)))
 (let (($x41 (= $x183 true)))
 (let (($x120 (= $x41 true)))
 (let (($x9 (= $x120 true)))
 (let (($x110 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x109 (= $x110 true)))
 (let (($x30 (= $x109 true)))
 (let (($x227 (= $x30 true)))
 (let ((?x71 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x222 (= (_ bv0 2) ?x71)))
 (let (($x204 (= $x222 true)))
 (let (($x103 (= $x204 true)))
 (let ((?x84 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x84)))
 (let (($x166 (= ?x153 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x112 (= $x166 true)))
 (let (($x101 (= $x112 true)))
 (let (($x68 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x17 (= $x68 true)))
 (let (($x20 (= $x17 true)))
 (let (($x72 (= $x20 true)))
 (let (($x82 (and $x72 $x101)))
 (let (($x210 (and $x82 $x103)))
 (let (($x129 (and $x210 $x227)))
 (let (($x151 (and $x129 $x9)))
 (let (($x137 (and $x151 $x230)))
 (let (($x59 (and $x137 $x273)))
 (let (($x7 (and $x59 $x193)))
 (let (($x296 (and $x7 $x300)))
 (let (($x248 (and $x296 $x37)))
 (let (($x294 (and $x248 $x272)))
 (let (($x295 (and $x294 $x238)))
 (let (($x244 (and $x295 $x55)))
 (let (($x259 (and $x244 $x297)))
 (let (($x102 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x32 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x32 (_ bv1 32))))
 (let (($x317 (and $x177 $x259)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x73 $x317)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x269 (and $x11 $x268)))
 (let (($x176 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x279 (and $x176 $x269)))
 (let (($x106 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x77 (bvadd ?x203 (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x77)))
 (let (($x44 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x77)))
 (let (($x89 (or false (or false (and (and true (or $x197 $x44)) (or $x8 $x106))))))
 (let (($x139 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x89)))
 (let (($x198 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x89)))
 (let (($x261 (and $x198 $x279)))
 (let (($x95 (=> $x261 $x314)))
 (not $x95))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x135 (bvule ?x28 (_ bv4294967294 32))))
 (let (($x283 (= $x135 true)))
 (let (($x314 (= $x283 true)))
 (let (($x138 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let ((?x157 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1265X)))
 (let ((?x70 (input.spec-%var-x-1.1.1 input.ind-%var1265X)))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1265X)))
 (=> $x277 (= ?x70 ?x157))))))
 ))
 (let (($x49 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1264X)))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1264X)))
 (= $x277 $x88))))
 ))
 (let (($x252 (and $x49 $x138)))
 (let (($x297 (= $x252 true)))
 (let (($x274 (forall ((input.ind-%var1259X (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul input.ind-%var1259X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x76))))
 (let ((?x157 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1259X)))
 (let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1259X)))
 (=> $x88 (= ?x157 ?x83))))))))
 ))
 (let (($x237 (forall ((input.ind-%var1258X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var1258X) (bvult input.ind-%var1258X input.dst.llvm-%n))))
 (let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1258X)))
 (= $x88 $x246))))
 ))
 (let (($x167 (and $x237 $x274)))
 (let (($x55 (= $x167 true)))
 (let (($x308 (forall ((input.ind-%var1253X (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul input.ind-%var1253X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x76))))
 (let ((?x70 (input.spec-%var-x-1.1.1 input.ind-%var1253X)))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1253X)))
 (=> $x277 (= ?x70 ?x83))))))))
 ))
 (let (($x119 (forall ((input.ind-%var1252X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var1252X) (bvult input.ind-%var1252X input.dst.llvm-%n))))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1252X)))
 (= $x277 $x246))))
 ))
 (let (($x152 (and $x119 $x308)))
 (let (($x238 (= $x152 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x253)))
 (let (($x14 (= ?x47 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x205 (= $x14 true)))
 (let (($x272 (= $x205 true)))
 (let (($x54 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x78 (= $x54 true)))
 (let (($x233 (= $x78 true)))
 (let (($x37 (= $x233 true)))
 (let (($x182 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x299 (= $x182 true)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x236 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x98 (= $x236 true)))
 (let (($x128 (= $x98 true)))
 (let (($x193 (= $x128 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x187 (bvsub ?x203 ?x96)))
 (let (($x256 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x187) (bvult ?x203 ?x187))))
 (let (($x69 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x235 (ite $x69 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x133 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x149 (bvmul (_ bv4 64) ?x133)))
 (let ((?x202 ((_ extract 63 32) ?x149)))
 (let (($x132 (= ?x202 ?x235)))
 (let (($x175 (and $x132 $x256)))
 (let (($x39 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x140 (and $x39 $x175)))
 (let (($x91 (= true $x140)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (=> $x51 $x91)))
 (let (($x48 (= $x97 true)))
 (let (($x181 (= $x48 true)))
 (let (($x273 (= $x181 true)))
 (let (($x116 (= $x51 true)))
 (let (($x121 (= $x116 true)))
 (let (($x230 (= $x121 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x160)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x122)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (and $x196 $x221)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x124 $x225)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (and $x208 $x217)))
 (let (($x114 (not $x191)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (and $x163 $x5)))
 (let (($x179 (and (not $x36) $x114)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x150 $x74)))
 (let (($x155 (not $x180)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x104 $x126)))
 (let (($x29 (and (not $x13) $x155)))
 (let (($x168 (and (and (and (and (and (and $x29 $x179) $x174) $x115) $x108) $x212) $x178)))
 (let (($x92 (and $x168 $x6)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x171 (or false (or false (and (and true (or $x216 $x131)) (or $x123 $x34))))))
 (let (($x224 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x171)))
 (let (($x183 (and $x224 $x92)))
 (let (($x41 (= $x183 true)))
 (let (($x120 (= $x41 true)))
 (let (($x9 (= $x120 true)))
 (let (($x110 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x109 (= $x110 true)))
 (let (($x30 (= $x109 true)))
 (let (($x227 (= $x30 true)))
 (let ((?x71 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x222 (= (_ bv0 2) ?x71)))
 (let (($x204 (= $x222 true)))
 (let (($x103 (= $x204 true)))
 (let ((?x84 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x84)))
 (let (($x166 (= ?x153 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x112 (= $x166 true)))
 (let (($x101 (= $x112 true)))
 (let (($x68 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x17 (= $x68 true)))
 (let (($x20 (= $x17 true)))
 (let (($x72 (= $x20 true)))
 (let (($x82 (and $x72 $x101)))
 (let (($x210 (and $x82 $x103)))
 (let (($x129 (and $x210 $x227)))
 (let (($x151 (and $x129 $x9)))
 (let (($x137 (and $x151 $x230)))
 (let (($x59 (and $x137 $x273)))
 (let (($x7 (and $x59 $x193)))
 (let (($x296 (and $x7 $x300)))
 (let (($x248 (and $x296 $x37)))
 (let (($x294 (and $x248 $x272)))
 (let (($x295 (and $x294 $x238)))
 (let (($x244 (and $x295 $x55)))
 (let (($x259 (and $x244 $x297)))
 (let (($x102 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x32 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x32 (_ bv1 32))))
 (let (($x317 (and $x177 $x259)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x73 $x317)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x269 (and $x11 $x268)))
 (let (($x176 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x279 (and $x176 $x269)))
 (let (($x106 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x77 (bvadd ?x203 (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x77)))
 (let (($x44 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x77)))
 (let (($x89 (or false (or false (and (and true (or $x197 $x44)) (or $x8 $x106))))))
 (let (($x139 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x89)))
 (let (($x198 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x89)))
 (let (($x261 (and $x198 $x279)))
 (let (($x95 (=> $x261 $x314)))
 (not $x95))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 200 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x284 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x10 (bvsge ?x284 (_ bv0 32))))
 (let (($x58 (= $x10 true)))
 (let (($x303 (= $x58 true)))
 (let (($x206 (forall ((input.ind-%var1288X (_ BitVec 32)) )(let ((?x262 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1288X)))
 (let ((?x83 (input.spec-%var-x-1.1.1 input.ind-%var1288X)))
 (let (($x70 (input.spec-%var-x-1.0.1 input.ind-%var1288X)))
 (=> $x70 (= ?x83 ?x262))))))
 ))
 (let (($x85 (forall ((input.ind-%var1287X (_ BitVec 32)) )(let (($x177 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1287X)))
 (let (($x70 (input.spec-%var-x-1.0.1 input.ind-%var1287X)))
 (= $x70 $x177))))
 ))
 (let (($x288 (and $x85 $x206)))
 (let (($x255 (= $x288 true)))
 (let (($x56 (forall ((input.ind-%var1282X (_ BitVec 32)) )(let ((?x189 (bvadd (bvmul input.ind-%var1282X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x297))))
 (let ((?x262 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1282X)))
 (let (($x177 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1282X)))
 (=> $x177 (= ?x262 ?x261))))))))
 ))
 (let (($x100 (forall ((input.ind-%var1281X (_ BitVec 32)) )(let (($x61 (and (bvule (_ bv0 32) input.ind-%var1281X) (bvult input.ind-%var1281X input.dst.llvm-%n))))
 (let (($x177 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1281X)))
 (= $x177 $x61))))
 ))
 (let (($x215 (and $x100 $x56)))
 (let (($x257 (= $x215 true)))
 (let (($x283 (forall ((input.ind-%var1276X (_ BitVec 32)) )(let ((?x189 (bvadd (bvmul input.ind-%var1276X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x297))))
 (let ((?x83 (input.spec-%var-x-1.1.1 input.ind-%var1276X)))
 (let (($x70 (input.spec-%var-x-1.0.1 input.ind-%var1276X)))
 (=> $x70 (= ?x83 ?x261))))))))
 ))
 (let (($x186 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let (($x61 (and (bvule (_ bv0 32) input.ind-%var1275X) (bvult input.ind-%var1275X input.dst.llvm-%n))))
 (let (($x70 (input.spec-%var-x-1.0.1 input.ind-%var1275X)))
 (= $x70 $x61))))
 ))
 (let (($x314 (and $x186 $x283)))
 (let (($x95 (= $x314 true)))
 (let ((?x294 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x294)))
 (let (($x277 (= ?x64 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x320 (= $x277 true)))
 (let (($x250 (= $x320 true)))
 (let (($x253 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x47 (= $x253 true)))
 (let (($x14 (= $x47 true)))
 (let (($x205 (= $x14 true)))
 (let (($x54 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x54 true)))
 (let (($x233 (= $x78 true)))
 (let (($x37 (= $x233 true)))
 (let (($x182 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x299 (= $x182 true)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x175 (bvsub ?x203 ?x96)))
 (let (($x48 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x175) (bvult ?x203 ?x175))))
 (let (($x162 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x146 (ite $x162 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x132 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x254 (bvmul (_ bv4 64) ?x132)))
 (let ((?x187 ((_ extract 63 32) ?x254)))
 (let (($x256 (= ?x187 ?x146)))
 (let (($x181 (and $x256 $x48)))
 (let (($x69 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x273 (and $x69 $x181)))
 (let (($x59 (= true $x273)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x236 (=> $x51 $x59)))
 (let (($x98 (= $x236 true)))
 (let (($x128 (= $x98 true)))
 (let (($x193 (= $x128 true)))
 (let (($x231 (= $x51 true)))
 (let (($x39 (= $x231 true)))
 (let (($x142 (= $x39 true)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x168)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x122)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let ((?x225 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x225)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x220 (and $x221 $x108)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x86 $x220)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x179 $x144)))
 (let (($x174 (not $x173)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x217 $x191)))
 (let (($x125 (and (not $x114) $x174)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x29 $x163)))
 (let (($x36 (not $x5)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x131 $x43)))
 (let (($x208 (and (not $x155) $x36)))
 (let (($x9 (and (and (and (and (and (and $x208 $x125) $x16) $x196) $x170) $x93) $x178)))
 (let (($x151 (and $x9 $x160)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x34)))
 (let (($x150 (or false (or false (and (and true (or $x66 $x156)) (or $x224 $x104))))))
 (let (($x180 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x150)))
 (let (($x116 (and $x180 $x151)))
 (let (($x121 (= $x116 true)))
 (let (($x230 (= $x121 true)))
 (let (($x137 (= $x230 true)))
 (let (($x129 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x201 (= $x129 true)))
 (let (($x219 (= $x201 true)))
 (let (($x209 (= $x219 true)))
 (let ((?x210 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x110 (= (_ bv0 2) ?x210)))
 (let (($x109 (= $x110 true)))
 (let (($x30 (= $x109 true)))
 (let ((?x112 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x112)))
 (let (($x188 (= ?x101 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x71 (= $x188 true)))
 (let (($x222 (= $x71 true)))
 (let (($x141 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x38 (= $x141 true)))
 (let (($x84 (= $x38 true)))
 (let (($x153 (= $x84 true)))
 (let (($x204 (and $x153 $x222)))
 (let (($x227 (and $x204 $x30)))
 (let (($x136 (and $x227 $x209)))
 (let (($x185 (and $x136 $x137)))
 (let (($x133 (and $x185 $x142)))
 (let (($x7 (and $x133 $x193)))
 (let (($x296 (and $x7 $x300)))
 (let (($x248 (and $x296 $x37)))
 (let (($x272 (and $x248 $x205)))
 (let (($x246 (and $x272 $x250)))
 (let (($x161 (and $x246 $x95)))
 (let (($x169 (and $x161 $x257)))
 (let (($x289 (and $x169 $x255)))
 (let (($x68 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x17 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x17 (_ bv1 32))))
 (let (($x280 (and $x20 $x289)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x172 (and $x62 $x280)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x281 (and $x53 $x172)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x52 (and $x67 $x281)))
 (let (($x184 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd ?x203 (_ bv3 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x45 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x198 (or false (or false (and (and true (or $x25 $x45)) (or $x21 $x184))))))
 (let (($x176 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x198)))
 (let (($x127 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x198)))
 (let (($x232 (and $x127 $x52)))
 (let (($x265 (=> $x232 $x303)))
 (not $x265))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x284 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x10 (bvsge ?x284 (_ bv0 32))))
 (let (($x58 (= $x10 true)))
 (let (($x303 (= $x58 true)))
 (let (($x206 (forall ((input.ind-%var1288X (_ BitVec 32)) )(let ((?x262 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1288X)))
 (let ((?x83 (input.spec-%var-x-1.1.1 input.ind-%var1288X)))
 (let (($x70 (input.spec-%var-x-1.0.1 input.ind-%var1288X)))
 (=> $x70 (= ?x83 ?x262))))))
 ))
 (let (($x85 (forall ((input.ind-%var1287X (_ BitVec 32)) )(let (($x177 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1287X)))
 (let (($x70 (input.spec-%var-x-1.0.1 input.ind-%var1287X)))
 (= $x70 $x177))))
 ))
 (let (($x288 (and $x85 $x206)))
 (let (($x255 (= $x288 true)))
 (let (($x56 (forall ((input.ind-%var1282X (_ BitVec 32)) )(let ((?x189 (bvadd (bvmul input.ind-%var1282X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x297))))
 (let ((?x262 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1282X)))
 (let (($x177 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1282X)))
 (=> $x177 (= ?x262 ?x261))))))))
 ))
 (let (($x100 (forall ((input.ind-%var1281X (_ BitVec 32)) )(let (($x61 (and (bvule (_ bv0 32) input.ind-%var1281X) (bvult input.ind-%var1281X input.dst.llvm-%n))))
 (let (($x177 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1281X)))
 (= $x177 $x61))))
 ))
 (let (($x215 (and $x100 $x56)))
 (let (($x257 (= $x215 true)))
 (let (($x283 (forall ((input.ind-%var1276X (_ BitVec 32)) )(let ((?x189 (bvadd (bvmul input.ind-%var1276X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x297))))
 (let ((?x83 (input.spec-%var-x-1.1.1 input.ind-%var1276X)))
 (let (($x70 (input.spec-%var-x-1.0.1 input.ind-%var1276X)))
 (=> $x70 (= ?x83 ?x261))))))))
 ))
 (let (($x186 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let (($x61 (and (bvule (_ bv0 32) input.ind-%var1275X) (bvult input.ind-%var1275X input.dst.llvm-%n))))
 (let (($x70 (input.spec-%var-x-1.0.1 input.ind-%var1275X)))
 (= $x70 $x61))))
 ))
 (let (($x314 (and $x186 $x283)))
 (let (($x95 (= $x314 true)))
 (let ((?x294 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x294)))
 (let (($x277 (= ?x64 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x320 (= $x277 true)))
 (let (($x250 (= $x320 true)))
 (let (($x253 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x47 (= $x253 true)))
 (let (($x14 (= $x47 true)))
 (let (($x205 (= $x14 true)))
 (let (($x54 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x54 true)))
 (let (($x233 (= $x78 true)))
 (let (($x37 (= $x233 true)))
 (let (($x182 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x299 (= $x182 true)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x175 (bvsub ?x203 ?x96)))
 (let (($x48 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x175) (bvult ?x203 ?x175))))
 (let (($x162 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x146 (ite $x162 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x132 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x254 (bvmul (_ bv4 64) ?x132)))
 (let ((?x187 ((_ extract 63 32) ?x254)))
 (let (($x256 (= ?x187 ?x146)))
 (let (($x181 (and $x256 $x48)))
 (let (($x69 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x273 (and $x69 $x181)))
 (let (($x59 (= true $x273)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x236 (=> $x51 $x59)))
 (let (($x98 (= $x236 true)))
 (let (($x128 (= $x98 true)))
 (let (($x193 (= $x128 true)))
 (let (($x231 (= $x51 true)))
 (let (($x39 (= $x231 true)))
 (let (($x142 (= $x39 true)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x168)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x122)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let ((?x225 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x225)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x220 (and $x221 $x108)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x86 $x220)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x179 $x144)))
 (let (($x174 (not $x173)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x217 $x191)))
 (let (($x125 (and (not $x114) $x174)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x29 $x163)))
 (let (($x36 (not $x5)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x131 $x43)))
 (let (($x208 (and (not $x155) $x36)))
 (let (($x9 (and (and (and (and (and (and $x208 $x125) $x16) $x196) $x170) $x93) $x178)))
 (let (($x151 (and $x9 $x160)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x34)))
 (let (($x150 (or false (or false (and (and true (or $x66 $x156)) (or $x224 $x104))))))
 (let (($x180 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x150)))
 (let (($x116 (and $x180 $x151)))
 (let (($x121 (= $x116 true)))
 (let (($x230 (= $x121 true)))
 (let (($x137 (= $x230 true)))
 (let (($x129 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x201 (= $x129 true)))
 (let (($x219 (= $x201 true)))
 (let (($x209 (= $x219 true)))
 (let ((?x210 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x110 (= (_ bv0 2) ?x210)))
 (let (($x109 (= $x110 true)))
 (let (($x30 (= $x109 true)))
 (let ((?x112 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x112)))
 (let (($x188 (= ?x101 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x71 (= $x188 true)))
 (let (($x222 (= $x71 true)))
 (let (($x141 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x38 (= $x141 true)))
 (let (($x84 (= $x38 true)))
 (let (($x153 (= $x84 true)))
 (let (($x204 (and $x153 $x222)))
 (let (($x227 (and $x204 $x30)))
 (let (($x136 (and $x227 $x209)))
 (let (($x185 (and $x136 $x137)))
 (let (($x133 (and $x185 $x142)))
 (let (($x7 (and $x133 $x193)))
 (let (($x296 (and $x7 $x300)))
 (let (($x248 (and $x296 $x37)))
 (let (($x272 (and $x248 $x205)))
 (let (($x246 (and $x272 $x250)))
 (let (($x161 (and $x246 $x95)))
 (let (($x169 (and $x161 $x257)))
 (let (($x289 (and $x169 $x255)))
 (let (($x68 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x17 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x17 (_ bv1 32))))
 (let (($x280 (and $x20 $x289)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x172 (and $x62 $x280)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x281 (and $x53 $x172)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x52 (and $x67 $x281)))
 (let (($x184 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd ?x203 (_ bv3 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x45 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x198 (or false (or false (and (and true (or $x25 $x45)) (or $x21 $x184))))))
 (let (($x176 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x198)))
 (let (($x127 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x198)))
 (let (($x232 (and $x127 $x52)))
 (let (($x265 (=> $x232 $x303)))
 (not $x265))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 200 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x26 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (bvule ?x26 input.dst.llvm-%n)))
 (let (($x80 (= $x79 true)))
 (let (($x311 (= $x80 true)))
 (let (($x118 (forall ((input.ind-%var1311X (_ BitVec 32)) )(let ((?x308 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1311X)))
 (let ((?x261 (input.spec-%var-x-1.1.1 input.ind-%var1311X)))
 (let (($x83 (input.spec-%var-x-1.0.1 input.ind-%var1311X)))
 (=> $x83 (= ?x261 ?x308))))))
 ))
 (let (($x286 (forall ((input.ind-%var1310X (_ BitVec 32)) )(let (($x20 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1310X)))
 (let (($x83 (input.spec-%var-x-1.0.1 input.ind-%var1310X)))
 (= $x83 $x20))))
 ))
 (let (($x313 (and $x286 $x118)))
 (let (($x244 (= $x313 true)))
 (let (($x119 (forall ((input.ind-%var1305X (_ BitVec 32)) )(let ((?x158 (bvadd (bvmul input.ind-%var1305X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x255))))
 (let ((?x308 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1305X)))
 (let (($x20 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1305X)))
 (=> $x20 (= ?x308 ?x232))))))))
 ))
 (let (($x287 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let (($x317 (and (bvule (_ bv0 32) input.ind-%var1304X) (bvult input.ind-%var1304X input.dst.llvm-%n))))
 (let (($x20 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1304X)))
 (= $x20 $x317))))
 ))
 (let (($x266 (and $x287 $x119)))
 (let (($x291 (= $x266 true)))
 (let (($x58 (forall ((input.ind-%var1299X (_ BitVec 32)) )(let ((?x158 (bvadd (bvmul input.ind-%var1299X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x255))))
 (let ((?x261 (input.spec-%var-x-1.1.1 input.ind-%var1299X)))
 (let (($x83 (input.spec-%var-x-1.0.1 input.ind-%var1299X)))
 (=> $x83 (= ?x261 ?x232))))))))
 ))
 (let (($x252 (forall ((input.ind-%var1298X (_ BitVec 32)) )(let (($x317 (and (bvule (_ bv0 32) input.ind-%var1298X) (bvult input.ind-%var1298X input.dst.llvm-%n))))
 (let (($x83 (input.spec-%var-x-1.0.1 input.ind-%var1298X)))
 (= $x83 $x317))))
 ))
 (let (($x303 (and $x252 $x58)))
 (let (($x265 (= $x303 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x246)))
 (let (($x70 (= ?x32 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x70 true)))
 (let (($x290 (= $x147 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x64 (= $x294 true)))
 (let (($x277 (= $x64 true)))
 (let (($x320 (= $x277 true)))
 (let (($x253 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (= $x253 true)))
 (let (($x14 (= $x47 true)))
 (let (($x205 (= $x14 true)))
 (let (($x54 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x78 (= $x54 true)))
 (let (($x233 (= $x78 true)))
 (let (($x37 (= $x233 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x181 (bvsub ?x203 ?x96)))
 (let (($x98 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x181) (bvult ?x203 ?x181))))
 (let (($x91 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x97 (ite $x91 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x256 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x140 (bvmul (_ bv4 64) ?x256)))
 (let ((?x175 ((_ extract 63 32) ?x140)))
 (let (($x48 (= ?x175 ?x97)))
 (let (($x128 (and $x48 $x98)))
 (let (($x162 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x193 (and $x162 $x128)))
 (let (($x7 (= true $x193)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (=> $x51 $x7)))
 (let (($x299 (= $x182 true)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x202 (= $x51 true)))
 (let (($x69 (= $x202 true)))
 (let (($x235 (= $x69 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x9)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x122)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x220)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (and $x108 $x170)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x225 $x41)))
 (let (($x221 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x125 $x6)))
 (let (($x16 (not $x115)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x144 $x173)))
 (let (($x124 (and (not $x174) $x16)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x208 $x217)))
 (let (($x114 (not $x191)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x156 $x105)))
 (let (($x179 (and (not $x36) $x114)))
 (let (($x137 (and (and (and (and (and (and $x179 $x124) $x183) $x221) $x212) $x120) $x178)))
 (let (($x185 (and $x137 $x168)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x104)))
 (let (($x29 (or false (or false (and (and true (or $x126 $x13)) (or $x180 $x131))))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x29)))
 (let (($x231 (and $x5 $x185)))
 (let (($x39 (= $x231 true)))
 (let (($x142 (= $x39 true)))
 (let (($x133 (= $x142 true)))
 (let (($x136 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x200 (= $x136 true)))
 (let (($x123 (= $x200 true)))
 (let (($x74 (= $x123 true)))
 (let ((?x227 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x129 (= (_ bv0 2) ?x227)))
 (let (($x201 (= $x129 true)))
 (let (($x219 (= $x201 true)))
 (let ((?x71 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x71)))
 (let (($x103 (= ?x222 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x210 (= $x103 true)))
 (let (($x110 (= $x210 true)))
 (let (($x87 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x166 (= $x87 true)))
 (let (($x112 (= $x166 true)))
 (let (($x101 (= $x112 true)))
 (let (($x109 (and $x101 $x110)))
 (let (($x209 (and $x109 $x219)))
 (let (($x34 (and $x209 $x74)))
 (let (($x149 (and $x34 $x133)))
 (let (($x132 (and $x149 $x235)))
 (let (($x296 (and $x132 $x300)))
 (let (($x248 (and $x296 $x37)))
 (let (($x272 (and $x248 $x205)))
 (let (($x250 (and $x272 $x320)))
 (let (($x61 (and $x250 $x290)))
 (let (($x239 (and $x61 $x265)))
 (let (($x264 (and $x239 $x291)))
 (let (($x315 (and $x264 $x244)))
 (let (($x141 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x38 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x38 (_ bv1 32))))
 (let (($x211 (and $x84 $x315)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x76 (and $x102 $x211)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x229 (and $x73 $x76)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x75 $x229)))
 (let (($x89 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd ?x203 (_ bv3 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x8 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x45)))
 (let (($x127 (or false (or false (and (and true (or $x40 $x8)) (or $x90 $x89))))))
 (let (($x67 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x127)))
 (let (($x145 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x127)))
 (let (($x18 (and $x145 $x81)))
 (let (($x258 (=> $x18 $x311)))
 (not $x258))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x26 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (bvule ?x26 input.dst.llvm-%n)))
 (let (($x80 (= $x79 true)))
 (let (($x311 (= $x80 true)))
 (let (($x118 (forall ((input.ind-%var1311X (_ BitVec 32)) )(let ((?x308 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1311X)))
 (let ((?x261 (input.spec-%var-x-1.1.1 input.ind-%var1311X)))
 (let (($x83 (input.spec-%var-x-1.0.1 input.ind-%var1311X)))
 (=> $x83 (= ?x261 ?x308))))))
 ))
 (let (($x286 (forall ((input.ind-%var1310X (_ BitVec 32)) )(let (($x20 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1310X)))
 (let (($x83 (input.spec-%var-x-1.0.1 input.ind-%var1310X)))
 (= $x83 $x20))))
 ))
 (let (($x313 (and $x286 $x118)))
 (let (($x244 (= $x313 true)))
 (let (($x119 (forall ((input.ind-%var1305X (_ BitVec 32)) )(let ((?x158 (bvadd (bvmul input.ind-%var1305X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x255))))
 (let ((?x308 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1305X)))
 (let (($x20 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1305X)))
 (=> $x20 (= ?x308 ?x232))))))))
 ))
 (let (($x287 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let (($x317 (and (bvule (_ bv0 32) input.ind-%var1304X) (bvult input.ind-%var1304X input.dst.llvm-%n))))
 (let (($x20 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1304X)))
 (= $x20 $x317))))
 ))
 (let (($x266 (and $x287 $x119)))
 (let (($x291 (= $x266 true)))
 (let (($x58 (forall ((input.ind-%var1299X (_ BitVec 32)) )(let ((?x158 (bvadd (bvmul input.ind-%var1299X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x255))))
 (let ((?x261 (input.spec-%var-x-1.1.1 input.ind-%var1299X)))
 (let (($x83 (input.spec-%var-x-1.0.1 input.ind-%var1299X)))
 (=> $x83 (= ?x261 ?x232))))))))
 ))
 (let (($x252 (forall ((input.ind-%var1298X (_ BitVec 32)) )(let (($x317 (and (bvule (_ bv0 32) input.ind-%var1298X) (bvult input.ind-%var1298X input.dst.llvm-%n))))
 (let (($x83 (input.spec-%var-x-1.0.1 input.ind-%var1298X)))
 (= $x83 $x317))))
 ))
 (let (($x303 (and $x252 $x58)))
 (let (($x265 (= $x303 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x246)))
 (let (($x70 (= ?x32 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x70 true)))
 (let (($x290 (= $x147 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x64 (= $x294 true)))
 (let (($x277 (= $x64 true)))
 (let (($x320 (= $x277 true)))
 (let (($x253 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (= $x253 true)))
 (let (($x14 (= $x47 true)))
 (let (($x205 (= $x14 true)))
 (let (($x54 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x78 (= $x54 true)))
 (let (($x233 (= $x78 true)))
 (let (($x37 (= $x233 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x181 (bvsub ?x203 ?x96)))
 (let (($x98 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x181) (bvult ?x203 ?x181))))
 (let (($x91 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x97 (ite $x91 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x256 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x140 (bvmul (_ bv4 64) ?x256)))
 (let ((?x175 ((_ extract 63 32) ?x140)))
 (let (($x48 (= ?x175 ?x97)))
 (let (($x128 (and $x48 $x98)))
 (let (($x162 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x193 (and $x162 $x128)))
 (let (($x7 (= true $x193)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (=> $x51 $x7)))
 (let (($x299 (= $x182 true)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x202 (= $x51 true)))
 (let (($x69 (= $x202 true)))
 (let (($x235 (= $x69 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x9)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x122)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x220)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (and $x108 $x170)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x225 $x41)))
 (let (($x221 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x125 $x6)))
 (let (($x16 (not $x115)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x144 $x173)))
 (let (($x124 (and (not $x174) $x16)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x208 $x217)))
 (let (($x114 (not $x191)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x156 $x105)))
 (let (($x179 (and (not $x36) $x114)))
 (let (($x137 (and (and (and (and (and (and $x179 $x124) $x183) $x221) $x212) $x120) $x178)))
 (let (($x185 (and $x137 $x168)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x104)))
 (let (($x29 (or false (or false (and (and true (or $x126 $x13)) (or $x180 $x131))))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x29)))
 (let (($x231 (and $x5 $x185)))
 (let (($x39 (= $x231 true)))
 (let (($x142 (= $x39 true)))
 (let (($x133 (= $x142 true)))
 (let (($x136 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x200 (= $x136 true)))
 (let (($x123 (= $x200 true)))
 (let (($x74 (= $x123 true)))
 (let ((?x227 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x129 (= (_ bv0 2) ?x227)))
 (let (($x201 (= $x129 true)))
 (let (($x219 (= $x201 true)))
 (let ((?x71 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x71)))
 (let (($x103 (= ?x222 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x210 (= $x103 true)))
 (let (($x110 (= $x210 true)))
 (let (($x87 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x166 (= $x87 true)))
 (let (($x112 (= $x166 true)))
 (let (($x101 (= $x112 true)))
 (let (($x109 (and $x101 $x110)))
 (let (($x209 (and $x109 $x219)))
 (let (($x34 (and $x209 $x74)))
 (let (($x149 (and $x34 $x133)))
 (let (($x132 (and $x149 $x235)))
 (let (($x296 (and $x132 $x300)))
 (let (($x248 (and $x296 $x37)))
 (let (($x272 (and $x248 $x205)))
 (let (($x250 (and $x272 $x320)))
 (let (($x61 (and $x250 $x290)))
 (let (($x239 (and $x61 $x265)))
 (let (($x264 (and $x239 $x291)))
 (let (($x315 (and $x264 $x244)))
 (let (($x141 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x38 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x38 (_ bv1 32))))
 (let (($x211 (and $x84 $x315)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x76 (and $x102 $x211)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x229 (and $x73 $x76)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x75 $x229)))
 (let (($x89 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd ?x203 (_ bv3 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x8 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x45)))
 (let (($x127 (or false (or false (and (and true (or $x40 $x8)) (or $x90 $x89))))))
 (let (($x67 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x127)))
 (let (($x145 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x127)))
 (let (($x18 (and $x145 $x81)))
 (let (($x258 (=> $x18 $x311)))
 (not $x258))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x282 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x63 (bvmul (_ bv4294967295 32) ?x282)))
 (let ((?x65 (bvneg ?x63)))
 (let (($x228 (= ?x65 ?x305)))
 (let (($x22 (= $x228 true)))
 (let (($x216 (forall ((input.ind-%var1334X (_ BitVec 32)) )(let ((?x283 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1334X)))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var1334X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1334X)))
 (=> $x261 (= ?x232 ?x283))))))
 ))
 (let (($x157 (forall ((input.ind-%var1333X (_ BitVec 32)) )(let (($x84 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1333X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1333X)))
 (= $x261 $x84))))
 ))
 (let (($x292 (and $x157 $x216)))
 (let (($x169 (= $x292 true)))
 (let (($x186 (forall ((input.ind-%var1328X (_ BitVec 32)) )(let ((?x143 (bvadd (bvmul input.ind-%var1328X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x244))))
 (let ((?x283 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1328X)))
 (let (($x84 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1328X)))
 (=> $x84 (= ?x283 ?x18))))))))
 ))
 (let (($x268 (forall ((input.ind-%var1327X (_ BitVec 32)) )(let (($x280 (and (bvule (_ bv0 32) input.ind-%var1327X) (bvult input.ind-%var1327X input.dst.llvm-%n))))
 (let (($x84 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1327X)))
 (= $x84 $x280))))
 ))
 (let (($x269 (and $x268 $x186)))
 (let (($x167 (= $x269 true)))
 (let (($x80 (forall ((input.ind-%var1322X (_ BitVec 32)) )(let ((?x143 (bvadd (bvmul input.ind-%var1322X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x244))))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var1322X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1322X)))
 (=> $x261 (= ?x232 ?x18))))))))
 ))
 (let (($x288 (forall ((input.ind-%var1321X (_ BitVec 32)) )(let (($x280 (and (bvule (_ bv0 32) input.ind-%var1321X) (bvult input.ind-%var1321X input.dst.llvm-%n))))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1321X)))
 (= $x261 $x280))))
 ))
 (let (($x311 (and $x288 $x80)))
 (let (($x258 (= $x311 true)))
 (let ((?x61 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x61)))
 (let (($x83 (= ?x17 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x259 (= $x83 true)))
 (let (($x237 (= $x259 true)))
 (let (($x246 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x32 (= $x246 true)))
 (let (($x70 (= $x32 true)))
 (let (($x147 (= $x70 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x64 (= $x294 true)))
 (let (($x277 (= $x64 true)))
 (let (($x320 (= $x277 true)))
 (let (($x253 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (= $x253 true)))
 (let (($x14 (= $x47 true)))
 (let (($x205 (= $x14 true)))
 (let (($x54 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x78 (= $x54 true)))
 (let (($x233 (= $x78 true)))
 (let (($x37 (= $x233 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x273 (bvsub ?x203 ?x96)))
 (let (($x98 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x273) (bvult ?x203 ?x273))))
 (let (($x91 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x97 (ite $x91 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x256 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x140 (bvmul (_ bv4 64) ?x256)))
 (let ((?x175 ((_ extract 63 32) ?x140)))
 (let (($x48 (= ?x175 ?x97)))
 (let (($x128 (and $x48 $x98)))
 (let (($x162 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x193 (and $x162 $x128)))
 (let (($x7 (= true $x193)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (=> $x51 $x7)))
 (let (($x299 (= $x182 true)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x149 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x202 (= $x149 true)))
 (let (($x69 (= $x202 true)))
 (let (($x235 (= $x69 true)))
 (let (($x185 (= $x51 true)))
 (let (($x231 (= $x185 true)))
 (let (($x39 (= $x231 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x108)))
 (let ((?x116 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x225 (= (_ bv0 32) ?x116)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x160)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (and $x124 $x196)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x16 $x183)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (and $x191 $x114)))
 (let (($x144 (not $x179)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (and $x27 $x208)))
 (let (($x174 (and (not $x217) $x144)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x195 $x29)))
 (let (($x156 (not $x5)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x209 $x136)))
 (let (($x36 (and (not $x155) $x156)))
 (let (($x120 (and (and (and (and (and (and $x36 $x174) $x125) $x115) $x151) $x221) $x225)))
 (let (($x230 (and $x120 $x220)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x180 (or false (or false (and (and true (or $x34 $x171)) (or $x104 $x126))))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x180)))
 (let (($x122 (and $x43 $x230)))
 (let (($x178 (= $x122 true)))
 (let (($x137 (= $x178 true)))
 (let (($x9 (= $x137 true)))
 (let ((?x109 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x30 (= (_ bv0 2) ?x109)))
 (let (($x227 (= $x30 true)))
 (let (($x129 (= $x227 true)))
 (let ((?x188 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x188)))
 (let (($x204 (= ?x71 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x204 true)))
 (let (($x210 (= $x103 true)))
 (let (($x201 (and $x210 $x129)))
 (let (($x168 (and $x201 $x9)))
 (let (($x142 (and $x168 $x39)))
 (let (($x132 (and $x142 $x235)))
 (let (($x296 (and $x132 $x300)))
 (let (($x248 (and $x296 $x37)))
 (let (($x272 (and $x248 $x205)))
 (let (($x250 (and $x272 $x320)))
 (let (($x290 (and $x250 $x147)))
 (let (($x317 (and $x290 $x237)))
 (let (($x285 (and $x317 $x258)))
 (let (($x55 (and $x285 $x167)))
 (let (($x304 (and $x55 $x169)))
 (let (($x87 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x166 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x166 (_ bv1 32))))
 (let (($x46 (and $x112 $x304)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x297 (and $x68 $x46)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x107 (and $x62 $x297)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x15 (and $x11 $x107)))
 (let (($x198 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x203 (_ bv3 32))))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x21 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x145 (or false (or false (and (and true (or $x134 $x21)) (or $x139 $x198))))))
 (let (($x75 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x145)))
 (let (($x77 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x145)))
 (let (($x319 (and $x77 $x15)))
 (let (($x309 (=> $x319 $x22)))
 (not $x309))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x282 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x63 (bvmul (_ bv4294967295 32) ?x282)))
 (let ((?x65 (bvneg ?x63)))
 (let (($x228 (= ?x65 ?x305)))
 (let (($x22 (= $x228 true)))
 (let (($x216 (forall ((input.ind-%var1334X (_ BitVec 32)) )(let ((?x283 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1334X)))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var1334X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1334X)))
 (=> $x261 (= ?x232 ?x283))))))
 ))
 (let (($x157 (forall ((input.ind-%var1333X (_ BitVec 32)) )(let (($x84 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1333X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1333X)))
 (= $x261 $x84))))
 ))
 (let (($x292 (and $x157 $x216)))
 (let (($x169 (= $x292 true)))
 (let (($x186 (forall ((input.ind-%var1328X (_ BitVec 32)) )(let ((?x143 (bvadd (bvmul input.ind-%var1328X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x244))))
 (let ((?x283 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1328X)))
 (let (($x84 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1328X)))
 (=> $x84 (= ?x283 ?x18))))))))
 ))
 (let (($x268 (forall ((input.ind-%var1327X (_ BitVec 32)) )(let (($x280 (and (bvule (_ bv0 32) input.ind-%var1327X) (bvult input.ind-%var1327X input.dst.llvm-%n))))
 (let (($x84 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1327X)))
 (= $x84 $x280))))
 ))
 (let (($x269 (and $x268 $x186)))
 (let (($x167 (= $x269 true)))
 (let (($x80 (forall ((input.ind-%var1322X (_ BitVec 32)) )(let ((?x143 (bvadd (bvmul input.ind-%var1322X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x244))))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var1322X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1322X)))
 (=> $x261 (= ?x232 ?x18))))))))
 ))
 (let (($x288 (forall ((input.ind-%var1321X (_ BitVec 32)) )(let (($x280 (and (bvule (_ bv0 32) input.ind-%var1321X) (bvult input.ind-%var1321X input.dst.llvm-%n))))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1321X)))
 (= $x261 $x280))))
 ))
 (let (($x311 (and $x288 $x80)))
 (let (($x258 (= $x311 true)))
 (let ((?x61 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x61)))
 (let (($x83 (= ?x17 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x259 (= $x83 true)))
 (let (($x237 (= $x259 true)))
 (let (($x246 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x32 (= $x246 true)))
 (let (($x70 (= $x32 true)))
 (let (($x147 (= $x70 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x64 (= $x294 true)))
 (let (($x277 (= $x64 true)))
 (let (($x320 (= $x277 true)))
 (let (($x253 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (= $x253 true)))
 (let (($x14 (= $x47 true)))
 (let (($x205 (= $x14 true)))
 (let (($x54 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x78 (= $x54 true)))
 (let (($x233 (= $x78 true)))
 (let (($x37 (= $x233 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x273 (bvsub ?x203 ?x96)))
 (let (($x98 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x273) (bvult ?x203 ?x273))))
 (let (($x91 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x97 (ite $x91 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x256 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x140 (bvmul (_ bv4 64) ?x256)))
 (let ((?x175 ((_ extract 63 32) ?x140)))
 (let (($x48 (= ?x175 ?x97)))
 (let (($x128 (and $x48 $x98)))
 (let (($x162 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x193 (and $x162 $x128)))
 (let (($x7 (= true $x193)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (=> $x51 $x7)))
 (let (($x299 (= $x182 true)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x149 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x202 (= $x149 true)))
 (let (($x69 (= $x202 true)))
 (let (($x235 (= $x69 true)))
 (let (($x185 (= $x51 true)))
 (let (($x231 (= $x185 true)))
 (let (($x39 (= $x231 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x108)))
 (let ((?x116 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x225 (= (_ bv0 32) ?x116)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x160)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (and $x124 $x196)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x16 $x183)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (and $x191 $x114)))
 (let (($x144 (not $x179)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (and $x27 $x208)))
 (let (($x174 (and (not $x217) $x144)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x195 $x29)))
 (let (($x156 (not $x5)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x209 $x136)))
 (let (($x36 (and (not $x155) $x156)))
 (let (($x120 (and (and (and (and (and (and $x36 $x174) $x125) $x115) $x151) $x221) $x225)))
 (let (($x230 (and $x120 $x220)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x180 (or false (or false (and (and true (or $x34 $x171)) (or $x104 $x126))))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x180)))
 (let (($x122 (and $x43 $x230)))
 (let (($x178 (= $x122 true)))
 (let (($x137 (= $x178 true)))
 (let (($x9 (= $x137 true)))
 (let ((?x109 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x30 (= (_ bv0 2) ?x109)))
 (let (($x227 (= $x30 true)))
 (let (($x129 (= $x227 true)))
 (let ((?x188 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x188)))
 (let (($x204 (= ?x71 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x204 true)))
 (let (($x210 (= $x103 true)))
 (let (($x201 (and $x210 $x129)))
 (let (($x168 (and $x201 $x9)))
 (let (($x142 (and $x168 $x39)))
 (let (($x132 (and $x142 $x235)))
 (let (($x296 (and $x132 $x300)))
 (let (($x248 (and $x296 $x37)))
 (let (($x272 (and $x248 $x205)))
 (let (($x250 (and $x272 $x320)))
 (let (($x290 (and $x250 $x147)))
 (let (($x317 (and $x290 $x237)))
 (let (($x285 (and $x317 $x258)))
 (let (($x55 (and $x285 $x167)))
 (let (($x304 (and $x55 $x169)))
 (let (($x87 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x166 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x166 (_ bv1 32))))
 (let (($x46 (and $x112 $x304)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x297 (and $x68 $x46)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x107 (and $x62 $x297)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x15 (and $x11 $x107)))
 (let (($x198 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x203 (_ bv3 32))))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x21 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x145 (or false (or false (and (and true (or $x134 $x21)) (or $x139 $x198))))))
 (let (($x75 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x145)))
 (let (($x77 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x145)))
 (let (($x319 (and $x77 $x15)))
 (let (($x309 (=> $x319 $x22)))
 (not $x309))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x23))))
 (let ((?x117 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x293)))
 (let ((?x12 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x307 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x12)))
 (let ((?x49 (bvmul (_ bv4294967295 32) ?x307)))
 (let ((?x111 (bvneg ?x49)))
 (let (($x207 (= ?x111 ?x117)))
 (let (($x247 (= $x207 true)))
 (let (($x306 (forall ((input.ind-%var1357X (_ BitVec 32)) )(let ((?x85 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1357X)))
 (let ((?x18 (input.spec-%var-x-1.1.1 input.ind-%var1357X)))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1357X)))
 (=> $x232 (= ?x18 ?x85))))))
 ))
 (let (($x164 (forall ((input.ind-%var1356X (_ BitVec 32)) )(let (($x112 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1356X)))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1356X)))
 (= $x232 $x112))))
 ))
 (let (($x52 (and $x164 $x306)))
 (let (($x66 (= $x52 true)))
 (let (($x152 (forall ((input.ind-%var1351X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1351X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x169))))
 (let ((?x85 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1351X)))
 (let (($x112 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1351X)))
 (=> $x112 (= ?x85 ?x319))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1350X (_ BitVec 32)) )(let (($x211 (and (bvule (_ bv0 32) input.ind-%var1350X) (bvult input.ind-%var1350X input.dst.llvm-%n))))
 (let (($x112 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1350X)))
 (= $x112 $x211))))
 ))
 (let (($x56 (and $x284 $x152)))
 (let (($x252 (= $x56 true)))
 (let (($x65 (forall ((input.ind-%var1345X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1345X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x169))))
 (let ((?x18 (input.spec-%var-x-1.1.1 input.ind-%var1345X)))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1345X)))
 (=> $x232 (= ?x18 ?x319))))))))
 ))
 (let (($x313 (forall ((input.ind-%var1344X (_ BitVec 32)) )(let (($x211 (and (bvule (_ bv0 32) input.ind-%var1344X) (bvult input.ind-%var1344X input.dst.llvm-%n))))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1344X)))
 (= $x232 $x211))))
 ))
 (let (($x305 (and $x313 $x65)))
 (let (($x228 (= $x305 true)))
 (let ((?x237 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x317 (bvneg ?x237)))
 (let (($x261 (= ?x317 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x261 true)))
 (let (($x100 (= $x289 true)))
 (let ((?x70 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x70)))
 (let (($x290 (= ?x147 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x290 true)))
 (let (($x17 (= $x61 true)))
 (let ((?x277 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x320 (= (_ bv0 2) ?x277)))
 (let (($x250 (= $x320 true)))
 (let (($x246 (= $x250 true)))
 (let (($x47 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x14 (= $x47 true)))
 (let (($x205 (= $x14 true)))
 (let (($x272 (= $x205 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x233 (= $x78 true)))
 (let (($x37 (= $x233 true)))
 (let (($x248 (= $x37 true)))
 (let (($x299 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x296 (= $x300 true)))
 (let (($x98 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x128 (= $x98 true)))
 (let (($x193 (= $x128 true)))
 (let (($x7 (= $x193 true)))
 (let (($x140 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 (bvsub ?x203 ?x96)) (bvult ?x203 (bvsub ?x203 ?x96)))))
 (let (($x69 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x132 (ite $x69 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x133 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x149 (bvmul (_ bv4 64) ?x133)))
 (let ((?x202 ((_ extract 63 32) ?x149)))
 (let (($x254 (= ?x202 ?x132)))
 (let (($x175 (and $x254 $x140)))
 (let (($x39 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x91 (and $x39 $x175)))
 (let (($x97 (= true $x91)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (=> $x51 $x97)))
 (let (($x181 (= $x48 true)))
 (let (($x273 (= $x181 true)))
 (let (($x59 (= $x273 true)))
 (let (($x122 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x122 true)))
 (let (($x137 (= $x178 true)))
 (let (($x9 (= $x137 true)))
 (let (($x225 (= $x51 true)))
 (let (($x120 (= $x225 true)))
 (let (($x108 (= $x120 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x115)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x41)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x179)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x114 $x144)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x191 $x174)))
 (let (($x173 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x105 $x195)))
 (let (($x5 (not $x29)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x209 $x136)))
 (let (($x36 (and (not $x155) $x5)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x126 $x13)))
 (let (($x150 (not $x57)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x204 $x103)))
 (let (($x43 (and (not $x104) $x150)))
 (let (($x151 (and (and (and (and (and (and $x43 $x36) $x208) $x173) $x170) $x125) $x6)))
 (let (($x121 (and $x151 $x212)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x109)))
 (let (($x171 (or false (or false (and (and true (or $x30 $x227)) (or $x200 $x123))))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x171)))
 (let (($x86 (and $x163 $x121)))
 (let (($x221 (= $x86 true)))
 (let (($x93 (= $x221 true)))
 (let (($x116 (= $x93 true)))
 (let (($x220 (and $x116 $x108)))
 (let (($x168 (and $x220 $x9)))
 (let (($x236 (and $x168 $x59)))
 (let (($x182 (and $x236 $x7)))
 (let (($x54 (and $x182 $x296)))
 (let (($x253 (and $x54 $x248)))
 (let (($x294 (and $x253 $x272)))
 (let (($x32 (and $x294 $x246)))
 (let (($x83 (and $x32 $x17)))
 (let (($x280 (and $x83 $x100)))
 (let (($x22 (and $x280 $x228)))
 (let (($x281 (and $x22 $x252)))
 (let (($x312 (and $x281 $x66)))
 (let (($x82 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x188 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x188 (_ bv1 32))))
 (let (($x264 (and $x71 $x312)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x238 (and $x141 $x264)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x28 (and $x102 $x238)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x255 (and $x53 $x28)))
 (let (($x127 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd ?x203 (_ bv3 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x90 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x77 (or false (or false (and (and true (or $x106 $x90)) (or $x176 $x127))))))
 (let (($x11 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x77)))
 (let (($x44 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x77)))
 (let (($x99 (and $x44 $x255)))
 (let (($x271 (=> $x99 $x247)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x23))))
 (let ((?x117 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x293)))
 (let ((?x12 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x307 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x12)))
 (let ((?x49 (bvmul (_ bv4294967295 32) ?x307)))
 (let ((?x111 (bvneg ?x49)))
 (let (($x207 (= ?x111 ?x117)))
 (let (($x247 (= $x207 true)))
 (let (($x306 (forall ((input.ind-%var1357X (_ BitVec 32)) )(let ((?x85 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1357X)))
 (let ((?x18 (input.spec-%var-x-1.1.1 input.ind-%var1357X)))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1357X)))
 (=> $x232 (= ?x18 ?x85))))))
 ))
 (let (($x164 (forall ((input.ind-%var1356X (_ BitVec 32)) )(let (($x112 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1356X)))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1356X)))
 (= $x232 $x112))))
 ))
 (let (($x52 (and $x164 $x306)))
 (let (($x66 (= $x52 true)))
 (let (($x152 (forall ((input.ind-%var1351X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1351X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x169))))
 (let ((?x85 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1351X)))
 (let (($x112 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1351X)))
 (=> $x112 (= ?x85 ?x319))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1350X (_ BitVec 32)) )(let (($x211 (and (bvule (_ bv0 32) input.ind-%var1350X) (bvult input.ind-%var1350X input.dst.llvm-%n))))
 (let (($x112 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1350X)))
 (= $x112 $x211))))
 ))
 (let (($x56 (and $x284 $x152)))
 (let (($x252 (= $x56 true)))
 (let (($x65 (forall ((input.ind-%var1345X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1345X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x169))))
 (let ((?x18 (input.spec-%var-x-1.1.1 input.ind-%var1345X)))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1345X)))
 (=> $x232 (= ?x18 ?x319))))))))
 ))
 (let (($x313 (forall ((input.ind-%var1344X (_ BitVec 32)) )(let (($x211 (and (bvule (_ bv0 32) input.ind-%var1344X) (bvult input.ind-%var1344X input.dst.llvm-%n))))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1344X)))
 (= $x232 $x211))))
 ))
 (let (($x305 (and $x313 $x65)))
 (let (($x228 (= $x305 true)))
 (let ((?x237 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x317 (bvneg ?x237)))
 (let (($x261 (= ?x317 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x261 true)))
 (let (($x100 (= $x289 true)))
 (let ((?x70 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x70)))
 (let (($x290 (= ?x147 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x290 true)))
 (let (($x17 (= $x61 true)))
 (let ((?x277 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x320 (= (_ bv0 2) ?x277)))
 (let (($x250 (= $x320 true)))
 (let (($x246 (= $x250 true)))
 (let (($x47 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x14 (= $x47 true)))
 (let (($x205 (= $x14 true)))
 (let (($x272 (= $x205 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x233 (= $x78 true)))
 (let (($x37 (= $x233 true)))
 (let (($x248 (= $x37 true)))
 (let (($x299 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x296 (= $x300 true)))
 (let (($x98 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x128 (= $x98 true)))
 (let (($x193 (= $x128 true)))
 (let (($x7 (= $x193 true)))
 (let (($x140 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 (bvsub ?x203 ?x96)) (bvult ?x203 (bvsub ?x203 ?x96)))))
 (let (($x69 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x132 (ite $x69 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x133 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x149 (bvmul (_ bv4 64) ?x133)))
 (let ((?x202 ((_ extract 63 32) ?x149)))
 (let (($x254 (= ?x202 ?x132)))
 (let (($x175 (and $x254 $x140)))
 (let (($x39 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x91 (and $x39 $x175)))
 (let (($x97 (= true $x91)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (=> $x51 $x97)))
 (let (($x181 (= $x48 true)))
 (let (($x273 (= $x181 true)))
 (let (($x59 (= $x273 true)))
 (let (($x122 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x122 true)))
 (let (($x137 (= $x178 true)))
 (let (($x9 (= $x137 true)))
 (let (($x225 (= $x51 true)))
 (let (($x120 (= $x225 true)))
 (let (($x108 (= $x120 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x115)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x41)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x179)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x114 $x144)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x191 $x174)))
 (let (($x173 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x105 $x195)))
 (let (($x5 (not $x29)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x209 $x136)))
 (let (($x36 (and (not $x155) $x5)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x126 $x13)))
 (let (($x150 (not $x57)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x204 $x103)))
 (let (($x43 (and (not $x104) $x150)))
 (let (($x151 (and (and (and (and (and (and $x43 $x36) $x208) $x173) $x170) $x125) $x6)))
 (let (($x121 (and $x151 $x212)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x109)))
 (let (($x171 (or false (or false (and (and true (or $x30 $x227)) (or $x200 $x123))))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x171)))
 (let (($x86 (and $x163 $x121)))
 (let (($x221 (= $x86 true)))
 (let (($x93 (= $x221 true)))
 (let (($x116 (= $x93 true)))
 (let (($x220 (and $x116 $x108)))
 (let (($x168 (and $x220 $x9)))
 (let (($x236 (and $x168 $x59)))
 (let (($x182 (and $x236 $x7)))
 (let (($x54 (and $x182 $x296)))
 (let (($x253 (and $x54 $x248)))
 (let (($x294 (and $x253 $x272)))
 (let (($x32 (and $x294 $x246)))
 (let (($x83 (and $x32 $x17)))
 (let (($x280 (and $x83 $x100)))
 (let (($x22 (and $x280 $x228)))
 (let (($x281 (and $x22 $x252)))
 (let (($x312 (and $x281 $x66)))
 (let (($x82 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x188 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x188 (_ bv1 32))))
 (let (($x264 (and $x71 $x312)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x238 (and $x141 $x264)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x28 (and $x102 $x238)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x255 (and $x53 $x28)))
 (let (($x127 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd ?x203 (_ bv3 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x90 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x77 (or false (or false (and (and true (or $x106 $x90)) (or $x176 $x127))))))
 (let (($x11 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x77)))
 (let (($x44 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x77)))
 (let (($x99 (and $x44 $x255)))
 (let (($x271 (=> $x99 $x247)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 204 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x316 (bvule ?x251 (_ bv4294967294 32))))
 (let (($x81 (= $x316 true)))
 (let (($x214 (= $x81 true)))
 (let (($x20 (forall ((input.ind-%var1381X (_ BitVec 32)) )(let ((?x42 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1381X)))
 (let ((?x282 (input.spec-%var-x-1.1.1 input.ind-%var1381X)))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1381X)))
 (=> $x79 (= ?x282 ?x42))))))
 ))
 (let (($x130 (forall ((input.ind-%var1380X (_ BitVec 32)) )(let (($x210 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1380X)))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1380X)))
 (= $x79 $x210))))
 ))
 (let (($x266 (and $x130 $x20)))
 (let (($x308 (= $x266 true)))
 (let (($x285 (forall ((input.ind-%var1375X (_ BitVec 32)) )(let ((?x113 (bvadd (bvmul input.ind-%var1375X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv1 32))) (select input.dst.llvm-mem ?x113))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv2 32))) ?x312))))
 (let ((?x42 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1375X)))
 (let (($x210 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1375X)))
 (=> $x210 (= ?x42 ?x12))))))))
 ))
 (let (($x207 (forall ((input.ind-%var1374X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var1374X) (bvult input.ind-%var1374X input.dst.llvm-%n))))
 (let (($x210 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1374X)))
 (= $x210 $x216))))
 ))
 (let (($x84 (and $x207 $x285)))
 (let (($x258 (= $x84 true)))
 (let (($x111 (forall ((input.ind-%var1369X (_ BitVec 32)) )(let ((?x113 (bvadd (bvmul input.ind-%var1369X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv1 32))) (select input.dst.llvm-mem ?x113))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv2 32))) ?x312))))
 (let ((?x282 (input.spec-%var-x-1.1.1 input.ind-%var1369X)))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1369X)))
 (=> $x79 (= ?x282 ?x12))))))))
 ))
 (let (($x279 (forall ((input.ind-%var1368X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var1368X) (bvult input.ind-%var1368X input.dst.llvm-%n))))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1368X)))
 (= $x79 $x216))))
 ))
 (let (($x242 (and $x279 $x111)))
 (let (($x226 (= $x242 true)))
 (let ((?x166 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x232 (bvneg ?x166)))
 (let (($x315 (= ?x232 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x315 true)))
 (let (($x211 (= $x287 true)))
 (let (($x38 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x261 (= $x38 true)))
 (let (($x289 (= $x261 true)))
 (let (($x100 (= $x289 true)))
 (let (($x17 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x83 (= $x17 true)))
 (let (($x259 (= $x83 true)))
 (let (($x237 (= $x259 true)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x14)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x253)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x296 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x296)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x300 $x54)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (and $x267 $x78)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x181 $x273)))
 (let (($x236 (not $x59)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x91 $x97)))
 (let (($x128 (and (not $x48) $x236)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x162 $x187)))
 (let (($x256 (not $x146)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x220 $x230)))
 (let (($x175 (and (not $x254) $x256)))
 (let (($x250 (and (and (and (and (and (and $x175 $x128) $x7) $x299) $x233) $x248) $x47)))
 (let (($x246 (and $x250 $x205)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x137 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x137)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x137)))
 (let (($x69 (or false (or false (and (and true (or $x9 $x168)) (or $x39 $x142))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x69)))
 (let (($x32 (and $x132 $x246)))
 (let (($x70 (= $x32 true)))
 (let (($x147 (= $x70 true)))
 (let (($x290 (= $x147 true)))
 (let (($x221 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x93 (= $x221 true)))
 (let (($x116 (= $x93 true)))
 (let (($x225 (= $x116 true)))
 (let ((?x6 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x151 (= (_ bv0 2) ?x6)))
 (let (($x115 (= $x151 true)))
 (let (($x212 (= $x115 true)))
 (let (($x170 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x196 (= $x170 true)))
 (let (($x92 (= $x196 true)))
 (let (($x125 (= $x92 true)))
 (let (($x191 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x114 (= $x191 true)))
 (let (($x179 (= $x114 true)))
 (let (($x144 (= $x179 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x156 (bvsub ?x203 ?x96)))
 (let (($x5 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x156) (bvult ?x203 ?x156))))
 (let (($x209 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x136 (ite $x209 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x57 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x150 (bvmul (_ bv4 64) ?x57)))
 (let ((?x43 ((_ extract 63 32) ?x150)))
 (let (($x155 (= ?x43 ?x136)))
 (let (($x36 (and $x155 $x5)))
 (let (($x126 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x16 (and $x126 $x36)))
 (let (($x27 (= true $x16)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (=> $x51 $x27)))
 (let (($x124 (= $x208 true)))
 (let (($x217 (= $x124 true)))
 (let (($x173 (= $x217 true)))
 (let ((?x131 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x131)))
 (let (($x171 (= ?x74 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x163 (= $x171 true)))
 (let (($x204 (= $x163 true)))
 (let (($x227 (= $x51 true)))
 (let (($x129 (= $x227 true)))
 (let (($x201 (= $x129 true)))
 (let (($x103 (and $x201 $x204)))
 (let (($x160 (and $x103 $x173)))
 (let (($x174 (and $x160 $x144)))
 (let (($x183 (and $x174 $x125)))
 (let (($x121 (and $x183 $x212)))
 (let (($x120 (and $x121 $x225)))
 (let (($x61 (and $x120 $x290)))
 (let (($x317 (and $x61 $x237)))
 (let (($x280 (and $x317 $x100)))
 (let (($x118 (and $x280 $x211)))
 (let (($x249 (and $x118 $x226)))
 (let (($x302 (and $x249 $x258)))
 (let (($x119 (and $x302 $x308)))
 (let (($x224 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x109 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x109 (_ bv1 32))))
 (let (($x241 (and $x30 $x119)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x265 (and $x82 $x241)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x291 (and $x68 $x265)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x73 $x291)))
 (let (($x145 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd ?x203 (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x139 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x44 (or false (or false (and (and true (or $x184 $x139)) (or $x67 $x145))))))
 (let (($x53 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x44)))
 (let (($x45 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x44)))
 (let (($x215 (and $x45 $x177)))
 (let (($x153 (=> $x215 $x214)))
 (not $x153))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x316 (bvule ?x251 (_ bv4294967294 32))))
 (let (($x81 (= $x316 true)))
 (let (($x214 (= $x81 true)))
 (let (($x20 (forall ((input.ind-%var1381X (_ BitVec 32)) )(let ((?x42 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1381X)))
 (let ((?x282 (input.spec-%var-x-1.1.1 input.ind-%var1381X)))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1381X)))
 (=> $x79 (= ?x282 ?x42))))))
 ))
 (let (($x130 (forall ((input.ind-%var1380X (_ BitVec 32)) )(let (($x210 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1380X)))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1380X)))
 (= $x79 $x210))))
 ))
 (let (($x266 (and $x130 $x20)))
 (let (($x308 (= $x266 true)))
 (let (($x285 (forall ((input.ind-%var1375X (_ BitVec 32)) )(let ((?x113 (bvadd (bvmul input.ind-%var1375X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv1 32))) (select input.dst.llvm-mem ?x113))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv2 32))) ?x312))))
 (let ((?x42 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1375X)))
 (let (($x210 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1375X)))
 (=> $x210 (= ?x42 ?x12))))))))
 ))
 (let (($x207 (forall ((input.ind-%var1374X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var1374X) (bvult input.ind-%var1374X input.dst.llvm-%n))))
 (let (($x210 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1374X)))
 (= $x210 $x216))))
 ))
 (let (($x84 (and $x207 $x285)))
 (let (($x258 (= $x84 true)))
 (let (($x111 (forall ((input.ind-%var1369X (_ BitVec 32)) )(let ((?x113 (bvadd (bvmul input.ind-%var1369X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv1 32))) (select input.dst.llvm-mem ?x113))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv2 32))) ?x312))))
 (let ((?x282 (input.spec-%var-x-1.1.1 input.ind-%var1369X)))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1369X)))
 (=> $x79 (= ?x282 ?x12))))))))
 ))
 (let (($x279 (forall ((input.ind-%var1368X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var1368X) (bvult input.ind-%var1368X input.dst.llvm-%n))))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1368X)))
 (= $x79 $x216))))
 ))
 (let (($x242 (and $x279 $x111)))
 (let (($x226 (= $x242 true)))
 (let ((?x166 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x232 (bvneg ?x166)))
 (let (($x315 (= ?x232 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x315 true)))
 (let (($x211 (= $x287 true)))
 (let (($x38 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x261 (= $x38 true)))
 (let (($x289 (= $x261 true)))
 (let (($x100 (= $x289 true)))
 (let (($x17 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x83 (= $x17 true)))
 (let (($x259 (= $x83 true)))
 (let (($x237 (= $x259 true)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x14)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x253)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x296 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x296)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x300 $x54)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (and $x267 $x78)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x181 $x273)))
 (let (($x236 (not $x59)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x91 $x97)))
 (let (($x128 (and (not $x48) $x236)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x162 $x187)))
 (let (($x256 (not $x146)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x220 $x230)))
 (let (($x175 (and (not $x254) $x256)))
 (let (($x250 (and (and (and (and (and (and $x175 $x128) $x7) $x299) $x233) $x248) $x47)))
 (let (($x246 (and $x250 $x205)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x137 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x137)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x137)))
 (let (($x69 (or false (or false (and (and true (or $x9 $x168)) (or $x39 $x142))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x69)))
 (let (($x32 (and $x132 $x246)))
 (let (($x70 (= $x32 true)))
 (let (($x147 (= $x70 true)))
 (let (($x290 (= $x147 true)))
 (let (($x221 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x93 (= $x221 true)))
 (let (($x116 (= $x93 true)))
 (let (($x225 (= $x116 true)))
 (let ((?x6 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x151 (= (_ bv0 2) ?x6)))
 (let (($x115 (= $x151 true)))
 (let (($x212 (= $x115 true)))
 (let (($x170 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x196 (= $x170 true)))
 (let (($x92 (= $x196 true)))
 (let (($x125 (= $x92 true)))
 (let (($x191 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x114 (= $x191 true)))
 (let (($x179 (= $x114 true)))
 (let (($x144 (= $x179 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x156 (bvsub ?x203 ?x96)))
 (let (($x5 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x156) (bvult ?x203 ?x156))))
 (let (($x209 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x136 (ite $x209 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x57 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x150 (bvmul (_ bv4 64) ?x57)))
 (let ((?x43 ((_ extract 63 32) ?x150)))
 (let (($x155 (= ?x43 ?x136)))
 (let (($x36 (and $x155 $x5)))
 (let (($x126 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x16 (and $x126 $x36)))
 (let (($x27 (= true $x16)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (=> $x51 $x27)))
 (let (($x124 (= $x208 true)))
 (let (($x217 (= $x124 true)))
 (let (($x173 (= $x217 true)))
 (let ((?x131 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x131)))
 (let (($x171 (= ?x74 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x163 (= $x171 true)))
 (let (($x204 (= $x163 true)))
 (let (($x227 (= $x51 true)))
 (let (($x129 (= $x227 true)))
 (let (($x201 (= $x129 true)))
 (let (($x103 (and $x201 $x204)))
 (let (($x160 (and $x103 $x173)))
 (let (($x174 (and $x160 $x144)))
 (let (($x183 (and $x174 $x125)))
 (let (($x121 (and $x183 $x212)))
 (let (($x120 (and $x121 $x225)))
 (let (($x61 (and $x120 $x290)))
 (let (($x317 (and $x61 $x237)))
 (let (($x280 (and $x317 $x100)))
 (let (($x118 (and $x280 $x211)))
 (let (($x249 (and $x118 $x226)))
 (let (($x302 (and $x249 $x258)))
 (let (($x119 (and $x302 $x308)))
 (let (($x224 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x109 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x109 (_ bv1 32))))
 (let (($x241 (and $x30 $x119)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x265 (and $x82 $x241)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x291 (and $x68 $x265)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x73 $x291)))
 (let (($x145 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd ?x203 (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x139 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x44 (or false (or false (and (and true (or $x184 $x139)) (or $x67 $x145))))))
 (let (($x53 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x44)))
 (let (($x45 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x44)))
 (let (($x215 (and $x45 $x177)))
 (let (($x153 (=> $x215 $x214)))
 (not $x153))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x271 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x269 (bvsge ?x271 (_ bv0 32))))
 (let (($x303 (= $x269 true)))
 (let (($x58 (= $x303 true)))
 (let (($x223 (forall ((input.ind-%var1404X (_ BitVec 32)) )(let ((?x305 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1404X)))
 (let ((?x12 (input.spec-%var-x-1.1.1 input.ind-%var1404X)))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1404X)))
 (=> $x282 (= ?x12 ?x305))))))
 ))
 (let (($x10 (forall ((input.ind-%var1403X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1403X)))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1403X)))
 (= $x282 $x30))))
 ))
 (let (($x154 (and $x10 $x223)))
 (let (($x94 (= $x154 true)))
 (let (($x18 (forall ((input.ind-%var1398X (_ BitVec 32)) )(let ((?x19 (bvadd (bvmul input.ind-%var1398X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem ?x19))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv2 32))) ?x308))))
 (let ((?x305 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1398X)))
 (let (($x30 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1398X)))
 (=> $x30 (= ?x305 ?x215))))))))
 ))
 (let (($x319 (forall ((input.ind-%var1397X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var1397X) (bvult input.ind-%var1397X input.dst.llvm-%n))))
 (let (($x30 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1397X)))
 (= $x30 $x238))))
 ))
 (let (($x15 (and $x319 $x18)))
 (let (($x158 (= $x15 true)))
 (let (($x81 (forall ((input.ind-%var1392X (_ BitVec 32)) )(let ((?x19 (bvadd (bvmul input.ind-%var1392X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem ?x19))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv2 32))) ?x308))))
 (let ((?x12 (input.spec-%var-x-1.1.1 input.ind-%var1392X)))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1392X)))
 (=> $x282 (= ?x12 ?x215))))))))
 ))
 (let (($x66 (forall ((input.ind-%var1391X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var1391X) (bvult input.ind-%var1391X input.dst.llvm-%n))))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1391X)))
 (= $x282 $x238))))
 ))
 (let (($x214 (and $x66 $x81)))
 (let (($x153 (= $x214 true)))
 (let ((?x118 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x118)))
 (let (($x79 (= ?x71 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x46 (= $x79 true)))
 (let (($x304 (= $x46 true)))
 (let (($x166 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x232 (= $x166 true)))
 (let (($x315 (= $x232 true)))
 (let (($x287 (= $x315 true)))
 (let (($x38 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x261 (= $x38 true)))
 (let (($x289 (= $x261 true)))
 (let (($x100 (= $x289 true)))
 (let ((?x250 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x250)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x253)))
 (let ((?x248 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x320 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x248)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x233 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x277 (and $x54 $x233)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x296 $x277)))
 (let (($x300 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x128 $x272)))
 (let (($x7 (not $x193)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x273 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (and $x273 $x59)))
 (let (($x182 (and (not $x236) $x7)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x175 $x91)))
 (let (($x48 (not $x97)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x168 $x185)))
 (let (($x181 (and (not $x256) $x48)))
 (let (($x290 (and (and (and (and (and (and $x181 $x182) $x64) $x300) $x37) $x320) $x47)))
 (let (($x61 (and $x290 $x14)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x162 (or false (or false (and (and true (or $x133 $x149)) (or $x132 $x220))))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x162)))
 (let (($x17 (and $x146 $x61)))
 (let (($x83 (= $x17 true)))
 (let (($x259 (= $x83 true)))
 (let (($x237 (= $x259 true)))
 (let (($x120 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x122 (= $x120 true)))
 (let (($x178 (= $x122 true)))
 (let (($x235 (= $x178 true)))
 (let ((?x121 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x86 (= (_ bv0 2) ?x121)))
 (let (($x221 (= $x86 true)))
 (let (($x93 (= $x221 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x41 (= $x183 true)))
 (let (($x6 (= $x41 true)))
 (let (($x151 (= $x6 true)))
 (let (($x174 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x170 (= $x174 true)))
 (let (($x196 (= $x170 true)))
 (let (($x92 (= $x196 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x5 (bvsub ?x203 ?x96)))
 (let (($x208 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x5) (bvult ?x203 ?x5))))
 (let (($x156 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x195 (ite $x156 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x136 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x155 (bvmul (_ bv4 64) ?x136)))
 (let ((?x105 ((_ extract 63 32) ?x155)))
 (let (($x29 (= ?x105 ?x195)))
 (let (($x124 (and $x29 $x208)))
 (let (($x43 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x217 (and $x43 $x124)))
 (let (($x173 (= true $x217)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (=> $x51 $x173)))
 (let (($x191 (= $x160 true)))
 (let (($x114 (= $x191 true)))
 (let (($x179 (= $x114 true)))
 (let ((?x163 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x204 (bvneg ?x163)))
 (let (($x104 (= ?x204 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x180 (= $x104 true)))
 (let (($x126 (= $x180 true)))
 (let (($x123 (= $x51 true)))
 (let (($x131 (= $x123 true)))
 (let (($x74 (= $x131 true)))
 (let (($x13 (and $x74 $x126)))
 (let (($x144 (and $x13 $x179)))
 (let (($x125 (and $x144 $x92)))
 (let (($x115 (and $x125 $x151)))
 (let (($x116 (and $x115 $x93)))
 (let (($x137 (and $x116 $x235)))
 (let (($x317 (and $x137 $x237)))
 (let (($x280 (and $x317 $x100)))
 (let (($x211 (and $x280 $x287)))
 (let (($x216 (and $x211 $x304)))
 (let (($x55 (and $x216 $x153)))
 (let (($x143 (and $x55 $x158)))
 (let (($x167 (and $x143 $x94)))
 (let (($x129 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x201 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x201 (_ bv1 32))))
 (let (($x293 (and $x200 $x167)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x297 (and $x188 $x293)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x164 (and $x141 $x297)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x186 (and $x62 $x164)))
 (let (($x77 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd ?x203 (_ bv3 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x176 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x139)))
 (let (($x45 (or false (or false (and (and true (or $x89 $x176)) (or $x75 $x77))))))
 (let (($x73 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x45)))
 (let (($x8 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x45)))
 (let (($x138 (and $x8 $x186)))
 (let (($x245 (=> $x138 $x58)))
 (not $x245))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x271 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x269 (bvsge ?x271 (_ bv0 32))))
 (let (($x303 (= $x269 true)))
 (let (($x58 (= $x303 true)))
 (let (($x223 (forall ((input.ind-%var1404X (_ BitVec 32)) )(let ((?x305 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1404X)))
 (let ((?x12 (input.spec-%var-x-1.1.1 input.ind-%var1404X)))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1404X)))
 (=> $x282 (= ?x12 ?x305))))))
 ))
 (let (($x10 (forall ((input.ind-%var1403X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1403X)))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1403X)))
 (= $x282 $x30))))
 ))
 (let (($x154 (and $x10 $x223)))
 (let (($x94 (= $x154 true)))
 (let (($x18 (forall ((input.ind-%var1398X (_ BitVec 32)) )(let ((?x19 (bvadd (bvmul input.ind-%var1398X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem ?x19))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv2 32))) ?x308))))
 (let ((?x305 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1398X)))
 (let (($x30 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1398X)))
 (=> $x30 (= ?x305 ?x215))))))))
 ))
 (let (($x319 (forall ((input.ind-%var1397X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var1397X) (bvult input.ind-%var1397X input.dst.llvm-%n))))
 (let (($x30 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1397X)))
 (= $x30 $x238))))
 ))
 (let (($x15 (and $x319 $x18)))
 (let (($x158 (= $x15 true)))
 (let (($x81 (forall ((input.ind-%var1392X (_ BitVec 32)) )(let ((?x19 (bvadd (bvmul input.ind-%var1392X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem ?x19))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv2 32))) ?x308))))
 (let ((?x12 (input.spec-%var-x-1.1.1 input.ind-%var1392X)))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1392X)))
 (=> $x282 (= ?x12 ?x215))))))))
 ))
 (let (($x66 (forall ((input.ind-%var1391X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var1391X) (bvult input.ind-%var1391X input.dst.llvm-%n))))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1391X)))
 (= $x282 $x238))))
 ))
 (let (($x214 (and $x66 $x81)))
 (let (($x153 (= $x214 true)))
 (let ((?x118 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x118)))
 (let (($x79 (= ?x71 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x46 (= $x79 true)))
 (let (($x304 (= $x46 true)))
 (let (($x166 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x232 (= $x166 true)))
 (let (($x315 (= $x232 true)))
 (let (($x287 (= $x315 true)))
 (let (($x38 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x261 (= $x38 true)))
 (let (($x289 (= $x261 true)))
 (let (($x100 (= $x289 true)))
 (let ((?x250 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x250)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x253)))
 (let ((?x248 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x320 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x248)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x233 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x277 (and $x54 $x233)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x296 $x277)))
 (let (($x300 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x128 $x272)))
 (let (($x7 (not $x193)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x273 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (and $x273 $x59)))
 (let (($x182 (and (not $x236) $x7)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x175 $x91)))
 (let (($x48 (not $x97)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x168 $x185)))
 (let (($x181 (and (not $x256) $x48)))
 (let (($x290 (and (and (and (and (and (and $x181 $x182) $x64) $x300) $x37) $x320) $x47)))
 (let (($x61 (and $x290 $x14)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x162 (or false (or false (and (and true (or $x133 $x149)) (or $x132 $x220))))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x162)))
 (let (($x17 (and $x146 $x61)))
 (let (($x83 (= $x17 true)))
 (let (($x259 (= $x83 true)))
 (let (($x237 (= $x259 true)))
 (let (($x120 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x122 (= $x120 true)))
 (let (($x178 (= $x122 true)))
 (let (($x235 (= $x178 true)))
 (let ((?x121 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x86 (= (_ bv0 2) ?x121)))
 (let (($x221 (= $x86 true)))
 (let (($x93 (= $x221 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x41 (= $x183 true)))
 (let (($x6 (= $x41 true)))
 (let (($x151 (= $x6 true)))
 (let (($x174 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x170 (= $x174 true)))
 (let (($x196 (= $x170 true)))
 (let (($x92 (= $x196 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x5 (bvsub ?x203 ?x96)))
 (let (($x208 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x5) (bvult ?x203 ?x5))))
 (let (($x156 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x195 (ite $x156 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x136 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x155 (bvmul (_ bv4 64) ?x136)))
 (let ((?x105 ((_ extract 63 32) ?x155)))
 (let (($x29 (= ?x105 ?x195)))
 (let (($x124 (and $x29 $x208)))
 (let (($x43 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x217 (and $x43 $x124)))
 (let (($x173 (= true $x217)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (=> $x51 $x173)))
 (let (($x191 (= $x160 true)))
 (let (($x114 (= $x191 true)))
 (let (($x179 (= $x114 true)))
 (let ((?x163 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x204 (bvneg ?x163)))
 (let (($x104 (= ?x204 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x180 (= $x104 true)))
 (let (($x126 (= $x180 true)))
 (let (($x123 (= $x51 true)))
 (let (($x131 (= $x123 true)))
 (let (($x74 (= $x131 true)))
 (let (($x13 (and $x74 $x126)))
 (let (($x144 (and $x13 $x179)))
 (let (($x125 (and $x144 $x92)))
 (let (($x115 (and $x125 $x151)))
 (let (($x116 (and $x115 $x93)))
 (let (($x137 (and $x116 $x235)))
 (let (($x317 (and $x137 $x237)))
 (let (($x280 (and $x317 $x100)))
 (let (($x211 (and $x280 $x287)))
 (let (($x216 (and $x211 $x304)))
 (let (($x55 (and $x216 $x153)))
 (let (($x143 (and $x55 $x158)))
 (let (($x167 (and $x143 $x94)))
 (let (($x129 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x201 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x201 (_ bv1 32))))
 (let (($x293 (and $x200 $x167)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x297 (and $x188 $x293)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x164 (and $x141 $x297)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x186 (and $x62 $x164)))
 (let (($x77 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd ?x203 (_ bv3 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x176 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x139)))
 (let (($x45 (or false (or false (and (and true (or $x89 $x176)) (or $x75 $x77))))))
 (let (($x73 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x45)))
 (let (($x8 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x45)))
 (let (($x138 (and $x8 $x186)))
 (let (($x245 (=> $x138 $x58)))
 (not $x245))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x263 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x243 (bvule ?x263 (_ bv4294967294 32))))
 (let (($x274 (= $x243 true)))
 (let (($x286 (= $x274 true)))
 (let (($x108 (forall ((input.ind-%var1427X (_ BitVec 32)) )(let ((?x111 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1427X)))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var1427X)))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var1427X)))
 (=> $x12 (= ?x215 ?x111))))))
 ))
 (let (($x33 (forall ((input.ind-%var1426X (_ BitVec 32)) )(let (($x200 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1426X)))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var1426X)))
 (= $x12 $x200))))
 ))
 (let (($x157 (and $x33 $x108)))
 (let (($x302 (= $x157 true)))
 (let (($x279 (forall ((input.ind-%var1421X (_ BitVec 32)) )(let ((?x229 (bvadd (bvmul input.ind-%var1421X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem ?x229))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv2 32))) ?x94))))
 (let ((?x111 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1421X)))
 (let (($x200 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1421X)))
 (=> $x200 (= ?x111 ?x138))))))))
 ))
 (let (($x28 (forall ((input.ind-%var1420X (_ BitVec 32)) )(let (($x241 (and (bvule (_ bv0 32) input.ind-%var1420X) (bvult input.ind-%var1420X input.dst.llvm-%n))))
 (let (($x200 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1420X)))
 (= $x200 $x241))))
 ))
 (let (($x255 (and $x28 $x279)))
 (let (($x252 (= $x255 true)))
 (let (($x303 (forall ((input.ind-%var1415X (_ BitVec 32)) )(let ((?x229 (bvadd (bvmul input.ind-%var1415X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem ?x229))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv2 32))) ?x94))))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var1415X)))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var1415X)))
 (=> $x12 (= ?x215 ?x138))))))))
 ))
 (let (($x266 (forall ((input.ind-%var1414X (_ BitVec 32)) )(let (($x241 (and (bvule (_ bv0 32) input.ind-%var1414X) (bvult input.ind-%var1414X input.dst.llvm-%n))))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var1414X)))
 (= $x12 $x241))))
 ))
 (let (($x58 (and $x266 $x303)))
 (let (($x245 (= $x58 true)))
 (let ((?x216 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x216)))
 (let (($x282 (= ?x109 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x264 (= $x282 true)))
 (let (($x85 (= $x264 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x71 (= $x118 true)))
 (let (($x79 (= $x71 true)))
 (let (($x46 (= $x79 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (= $x166 true)))
 (let (($x315 (= $x232 true)))
 (let (($x287 (= $x315 true)))
 (let (($x38 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x261 (= $x38 true)))
 (let (($x289 (= $x261 true)))
 (let (($x100 (= $x289 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x320 (bvsub ?x203 ?x96)))
 (let (($x290 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x320) (bvult ?x203 ?x320))))
 (let (($x37 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x70 (ite $x37 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x78 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvmul (_ bv4 64) ?x78)))
 (let ((?x277 ((_ extract 63 32) ?x233)))
 (let (($x248 (= ?x277 ?x70)))
 (let (($x250 (and $x248 $x290)))
 (let (($x296 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x14 (and $x296 $x250)))
 (let (($x61 (= true $x14)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (=> $x51 $x61)))
 (let (($x83 (= $x17 true)))
 (let (($x259 (= $x83 true)))
 (let (($x237 (= $x259 true)))
 (let (($x299 (= $x51 true)))
 (let (($x64 (= $x299 true)))
 (let (($x246 (= $x64 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x91)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x98)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x185)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x140)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (and $x254 $x162)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (and $x230 $x146)))
 (let (($x220 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x231 $x39)))
 (let (($x142 (not $x187)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x178 $x235)))
 (let (($x149 (and (not $x137) $x142)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x221 $x93)))
 (let (($x225 (not $x116)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x160 $x191)))
 (let (($x122 (and (not $x86) $x225)))
 (let (($x294 (and (and (and (and (and (and $x122 $x149) $x69) $x220) $x168) $x256) $x175)))
 (let (($x128 (and $x294 $x97)))
 (let (($x183 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x115 (or false (or false (and (and true (or $x174 $x170)) (or $x125 $x183))))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x115)))
 (let (($x272 (and $x121 $x128)))
 (let (($x193 (= $x272 true)))
 (let (($x7 (= $x193 true)))
 (let (($x182 (= $x7 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x27 (= $x16 true)))
 (let (($x208 (= $x27 true)))
 (let (($x124 (= $x208 true)))
 (let ((?x156 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x195 (= (_ bv0 2) ?x156)))
 (let (($x29 (= $x195 true)))
 (let (($x36 (= $x29 true)))
 (let ((?x13 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x13)))
 (let (($x43 (= ?x57 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x209 (= $x43 true)))
 (let (($x136 (= $x209 true)))
 (let (($x163 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x204 (= $x163 true)))
 (let (($x103 (= $x204 true)))
 (let (($x104 (= $x103 true)))
 (let (($x155 (and $x104 $x136)))
 (let (($x5 (and $x155 $x36)))
 (let (($x217 (and $x5 $x124)))
 (let (($x205 (and $x217 $x182)))
 (let (($x267 (and $x205 $x246)))
 (let (($x317 (and $x267 $x237)))
 (let (($x280 (and $x317 $x100)))
 (let (($x211 (and $x280 $x287)))
 (let (($x304 (and $x211 $x46)))
 (let (($x238 (and $x304 $x85)))
 (let (($x87 (and $x238 $x245)))
 (let (($x281 (and $x87 $x252)))
 (let (($x76 (and $x281 $x302)))
 (let (($x131 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x74 (ite $x131 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x74 (_ bv1 32))))
 (let (($x63 (and $x34 $x76)))
 (let (($x224 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x224 $x63)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x309 (and $x82 $x312)))
 (let (($x102 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x102 $x309)))
 (let (($x44 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd ?x203 (_ bv3 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x67 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x176)))
 (let (($x8 (or false (or false (and (and true (or $x198 $x67)) (or $x11 $x44))))))
 (let (($x62 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x8)))
 (let (($x21 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x8)))
 (let (($x26 (and $x21 $x310)))
 (let (($x159 (=> $x26 $x286)))
 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x263 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x243 (bvule ?x263 (_ bv4294967294 32))))
 (let (($x274 (= $x243 true)))
 (let (($x286 (= $x274 true)))
 (let (($x108 (forall ((input.ind-%var1427X (_ BitVec 32)) )(let ((?x111 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1427X)))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var1427X)))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var1427X)))
 (=> $x12 (= ?x215 ?x111))))))
 ))
 (let (($x33 (forall ((input.ind-%var1426X (_ BitVec 32)) )(let (($x200 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1426X)))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var1426X)))
 (= $x12 $x200))))
 ))
 (let (($x157 (and $x33 $x108)))
 (let (($x302 (= $x157 true)))
 (let (($x279 (forall ((input.ind-%var1421X (_ BitVec 32)) )(let ((?x229 (bvadd (bvmul input.ind-%var1421X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem ?x229))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv2 32))) ?x94))))
 (let ((?x111 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1421X)))
 (let (($x200 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1421X)))
 (=> $x200 (= ?x111 ?x138))))))))
 ))
 (let (($x28 (forall ((input.ind-%var1420X (_ BitVec 32)) )(let (($x241 (and (bvule (_ bv0 32) input.ind-%var1420X) (bvult input.ind-%var1420X input.dst.llvm-%n))))
 (let (($x200 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1420X)))
 (= $x200 $x241))))
 ))
 (let (($x255 (and $x28 $x279)))
 (let (($x252 (= $x255 true)))
 (let (($x303 (forall ((input.ind-%var1415X (_ BitVec 32)) )(let ((?x229 (bvadd (bvmul input.ind-%var1415X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem ?x229))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv2 32))) ?x94))))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var1415X)))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var1415X)))
 (=> $x12 (= ?x215 ?x138))))))))
 ))
 (let (($x266 (forall ((input.ind-%var1414X (_ BitVec 32)) )(let (($x241 (and (bvule (_ bv0 32) input.ind-%var1414X) (bvult input.ind-%var1414X input.dst.llvm-%n))))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var1414X)))
 (= $x12 $x241))))
 ))
 (let (($x58 (and $x266 $x303)))
 (let (($x245 (= $x58 true)))
 (let ((?x216 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x216)))
 (let (($x282 (= ?x109 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x264 (= $x282 true)))
 (let (($x85 (= $x264 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x71 (= $x118 true)))
 (let (($x79 (= $x71 true)))
 (let (($x46 (= $x79 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (= $x166 true)))
 (let (($x315 (= $x232 true)))
 (let (($x287 (= $x315 true)))
 (let (($x38 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x261 (= $x38 true)))
 (let (($x289 (= $x261 true)))
 (let (($x100 (= $x289 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x320 (bvsub ?x203 ?x96)))
 (let (($x290 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x320) (bvult ?x203 ?x320))))
 (let (($x37 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x70 (ite $x37 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x78 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvmul (_ bv4 64) ?x78)))
 (let ((?x277 ((_ extract 63 32) ?x233)))
 (let (($x248 (= ?x277 ?x70)))
 (let (($x250 (and $x248 $x290)))
 (let (($x296 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x14 (and $x296 $x250)))
 (let (($x61 (= true $x14)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (=> $x51 $x61)))
 (let (($x83 (= $x17 true)))
 (let (($x259 (= $x83 true)))
 (let (($x237 (= $x259 true)))
 (let (($x299 (= $x51 true)))
 (let (($x64 (= $x299 true)))
 (let (($x246 (= $x64 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x91)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x98)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x185)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x140)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (and $x254 $x162)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (and $x230 $x146)))
 (let (($x220 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x231 $x39)))
 (let (($x142 (not $x187)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x178 $x235)))
 (let (($x149 (and (not $x137) $x142)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x221 $x93)))
 (let (($x225 (not $x116)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x160 $x191)))
 (let (($x122 (and (not $x86) $x225)))
 (let (($x294 (and (and (and (and (and (and $x122 $x149) $x69) $x220) $x168) $x256) $x175)))
 (let (($x128 (and $x294 $x97)))
 (let (($x183 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x115 (or false (or false (and (and true (or $x174 $x170)) (or $x125 $x183))))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x115)))
 (let (($x272 (and $x121 $x128)))
 (let (($x193 (= $x272 true)))
 (let (($x7 (= $x193 true)))
 (let (($x182 (= $x7 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x27 (= $x16 true)))
 (let (($x208 (= $x27 true)))
 (let (($x124 (= $x208 true)))
 (let ((?x156 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x195 (= (_ bv0 2) ?x156)))
 (let (($x29 (= $x195 true)))
 (let (($x36 (= $x29 true)))
 (let ((?x13 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x13)))
 (let (($x43 (= ?x57 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x209 (= $x43 true)))
 (let (($x136 (= $x209 true)))
 (let (($x163 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x204 (= $x163 true)))
 (let (($x103 (= $x204 true)))
 (let (($x104 (= $x103 true)))
 (let (($x155 (and $x104 $x136)))
 (let (($x5 (and $x155 $x36)))
 (let (($x217 (and $x5 $x124)))
 (let (($x205 (and $x217 $x182)))
 (let (($x267 (and $x205 $x246)))
 (let (($x317 (and $x267 $x237)))
 (let (($x280 (and $x317 $x100)))
 (let (($x211 (and $x280 $x287)))
 (let (($x304 (and $x211 $x46)))
 (let (($x238 (and $x304 $x85)))
 (let (($x87 (and $x238 $x245)))
 (let (($x281 (and $x87 $x252)))
 (let (($x76 (and $x281 $x302)))
 (let (($x131 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x74 (ite $x131 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x74 (_ bv1 32))))
 (let (($x63 (and $x34 $x76)))
 (let (($x224 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x224 $x63)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x309 (and $x82 $x312)))
 (let (($x102 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x102 $x309)))
 (let (($x44 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd ?x203 (_ bv3 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x67 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x176)))
 (let (($x8 (or false (or false (and (and true (or $x198 $x67)) (or $x11 $x44))))))
 (let (($x62 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x8)))
 (let (($x21 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x8)))
 (let (($x26 (and $x21 $x310)))
 (let (($x159 (=> $x26 $x286)))
 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x50 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (bvsge ?x50 (_ bv0 32))))
 (let (($x80 (= $x110 true)))
 (let (($x152 (= $x80 true)))
 (let (($x9 (forall ((input.ind-%var1450X (_ BitVec 32)) )(let ((?x81 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1450X)))
 (let ((?x138 (input.spec-%var-x-1.1.1 input.ind-%var1450X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var1450X)))
 (=> $x215 (= ?x138 ?x81))))))
 ))
 (let (($x42 (forall ((input.ind-%var1449X (_ BitVec 32)) )(let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1449X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var1449X)))
 (= $x215 $x34))))
 ))
 (let (($x65 (and $x42 $x9)))
 (let (($x143 (= $x65 true)))
 (let (($x66 (forall ((input.ind-%var1444X (_ BitVec 32)) )(let ((?x288 (bvadd (bvmul input.ind-%var1444X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x302))))
 (let ((?x81 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1444X)))
 (let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1444X)))
 (=> $x34 (= ?x81 ?x26))))))))
 ))
 (let (($x265 (forall ((input.ind-%var1443X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var1443X) (bvult input.ind-%var1443X input.dst.llvm-%n))))
 (let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1443X)))
 (= $x34 $x293))))
 ))
 (let (($x291 (and $x265 $x66)))
 (let (($x84 (= $x291 true)))
 (let (($x274 (forall ((input.ind-%var1438X (_ BitVec 32)) )(let ((?x288 (bvadd (bvmul input.ind-%var1438X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x302))))
 (let ((?x138 (input.spec-%var-x-1.1.1 input.ind-%var1438X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var1438X)))
 (=> $x215 (= ?x138 ?x26))))))))
 ))
 (let (($x154 (forall ((input.ind-%var1437X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var1437X) (bvult input.ind-%var1437X input.dst.llvm-%n))))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var1437X)))
 (= $x215 $x293))))
 ))
 (let (($x286 (and $x154 $x274)))
 (let (($x159 (= $x286 true)))
 (let ((?x238 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x201 (bvneg ?x238)))
 (let (($x12 (= ?x201 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x119 (= $x12 true)))
 (let (($x207 (= $x119 true)))
 (let (($x216 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x109 (= $x216 true)))
 (let (($x282 (= $x109 true)))
 (let (($x264 (= $x282 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x71 (= $x118 true)))
 (let (($x79 (= $x71 true)))
 (let (($x46 (= $x79 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x232 (= $x166 true)))
 (let (($x315 (= $x232 true)))
 (let (($x287 (= $x315 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x250 (bvsub ?x203 ?x96)))
 (let (($x83 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x250) (bvult ?x203 ?x250))))
 (let (($x253 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x47 (ite $x253 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x248 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x248)))
 (let ((?x320 ((_ extract 63 32) ?x147)))
 (let (($x290 (= ?x320 ?x47)))
 (let (($x259 (and $x290 $x83)))
 (let (($x37 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x237 (and $x37 $x259)))
 (let (($x317 (= true $x237)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (=> $x51 $x317)))
 (let (($x261 (= $x38 true)))
 (let (($x289 (= $x261 true)))
 (let (($x100 (= $x289 true)))
 (let (($x32 (= $x51 true)))
 (let (($x296 (= $x32 true)))
 (let (($x54 (= $x296 true)))
 (let ((?x294 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x294)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x98)))
 (let ((?x256 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x256)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x146)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (and $x162 $x168)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x140 $x59)))
 (let (($x254 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x273 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (and $x149 $x48)))
 (let (($x69 (not $x202)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (and $x39 $x187)))
 (let (($x132 (and (not $x142) $x69)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x122 $x178)))
 (let (($x137 (not $x235)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x170 $x196)))
 (let (($x231 (and (not $x225) $x137)))
 (let (($x182 (and (and (and (and (and (and $x231 $x132) $x273) $x254) $x185) $x236) $x175)))
 (let (($x205 (and $x182 $x91)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x183 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x183)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x183)))
 (let (($x221 (or false (or false (and (and true (or $x41 $x6)) (or $x121 $x160))))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x221)))
 (let (($x299 (and $x116 $x205)))
 (let (($x64 (= $x299 true)))
 (let (($x246 (= $x64 true)))
 (let (($x267 (= $x246 true)))
 (let (($x217 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x114 (= $x217 true)))
 (let (($x179 (= $x114 true)))
 (let (($x212 (= $x179 true)))
 (let ((?x5 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x16 (= (_ bv0 2) ?x5)))
 (let (($x27 (= $x16 true)))
 (let (($x208 (= $x27 true)))
 (let ((?x209 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x209)))
 (let (($x105 (= ?x136 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x156 (= $x105 true)))
 (let (($x195 (= $x156 true)))
 (let (($x180 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x126 (= $x180 true)))
 (let (($x13 (= $x126 true)))
 (let (($x57 (= $x13 true)))
 (let (($x29 (and $x57 $x195)))
 (let (($x124 (and $x29 $x208)))
 (let (($x144 (and $x124 $x212)))
 (let (($x300 (and $x144 $x267)))
 (let (($x78 (and $x300 $x54)))
 (let (($x280 (and $x78 $x100)))
 (let (($x211 (and $x280 $x287)))
 (let (($x304 (and $x211 $x46)))
 (let (($x85 (and $x304 $x264)))
 (let (($x241 (and $x85 $x207)))
 (let (($x219 (and $x241 $x159)))
 (let (($x258 (and $x219 $x84)))
 (let (($x22 (and $x258 $x143)))
 (let (($x163 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x204 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x204 (_ bv1 32))))
 (let (($x307 (and $x103 $x22)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x308 (and $x129 $x307)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x161 (and $x188 $x308)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x148 (and $x68 $x161)))
 (let (($x45 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd ?x203 (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x75 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x67)))
 (let (($x21 (or false (or false (and (and true (or $x127 $x75)) (or $x53 $x45))))))
 (let (($x102 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x21)))
 (let (($x90 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x21)))
 (let (($x72 (and $x90 $x148)))
 (let (($x206 (=> $x72 $x152)))
 (not $x206))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x50 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (bvsge ?x50 (_ bv0 32))))
 (let (($x80 (= $x110 true)))
 (let (($x152 (= $x80 true)))
 (let (($x9 (forall ((input.ind-%var1450X (_ BitVec 32)) )(let ((?x81 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1450X)))
 (let ((?x138 (input.spec-%var-x-1.1.1 input.ind-%var1450X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var1450X)))
 (=> $x215 (= ?x138 ?x81))))))
 ))
 (let (($x42 (forall ((input.ind-%var1449X (_ BitVec 32)) )(let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1449X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var1449X)))
 (= $x215 $x34))))
 ))
 (let (($x65 (and $x42 $x9)))
 (let (($x143 (= $x65 true)))
 (let (($x66 (forall ((input.ind-%var1444X (_ BitVec 32)) )(let ((?x288 (bvadd (bvmul input.ind-%var1444X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x302))))
 (let ((?x81 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1444X)))
 (let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1444X)))
 (=> $x34 (= ?x81 ?x26))))))))
 ))
 (let (($x265 (forall ((input.ind-%var1443X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var1443X) (bvult input.ind-%var1443X input.dst.llvm-%n))))
 (let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1443X)))
 (= $x34 $x293))))
 ))
 (let (($x291 (and $x265 $x66)))
 (let (($x84 (= $x291 true)))
 (let (($x274 (forall ((input.ind-%var1438X (_ BitVec 32)) )(let ((?x288 (bvadd (bvmul input.ind-%var1438X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x302))))
 (let ((?x138 (input.spec-%var-x-1.1.1 input.ind-%var1438X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var1438X)))
 (=> $x215 (= ?x138 ?x26))))))))
 ))
 (let (($x154 (forall ((input.ind-%var1437X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var1437X) (bvult input.ind-%var1437X input.dst.llvm-%n))))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var1437X)))
 (= $x215 $x293))))
 ))
 (let (($x286 (and $x154 $x274)))
 (let (($x159 (= $x286 true)))
 (let ((?x238 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x201 (bvneg ?x238)))
 (let (($x12 (= ?x201 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x119 (= $x12 true)))
 (let (($x207 (= $x119 true)))
 (let (($x216 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x109 (= $x216 true)))
 (let (($x282 (= $x109 true)))
 (let (($x264 (= $x282 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x71 (= $x118 true)))
 (let (($x79 (= $x71 true)))
 (let (($x46 (= $x79 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x232 (= $x166 true)))
 (let (($x315 (= $x232 true)))
 (let (($x287 (= $x315 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x250 (bvsub ?x203 ?x96)))
 (let (($x83 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x250) (bvult ?x203 ?x250))))
 (let (($x253 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x47 (ite $x253 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x248 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x248)))
 (let ((?x320 ((_ extract 63 32) ?x147)))
 (let (($x290 (= ?x320 ?x47)))
 (let (($x259 (and $x290 $x83)))
 (let (($x37 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x237 (and $x37 $x259)))
 (let (($x317 (= true $x237)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (=> $x51 $x317)))
 (let (($x261 (= $x38 true)))
 (let (($x289 (= $x261 true)))
 (let (($x100 (= $x289 true)))
 (let (($x32 (= $x51 true)))
 (let (($x296 (= $x32 true)))
 (let (($x54 (= $x296 true)))
 (let ((?x294 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x294)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x98)))
 (let ((?x256 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x256)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x146)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (and $x162 $x168)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x140 $x59)))
 (let (($x254 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x273 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (and $x149 $x48)))
 (let (($x69 (not $x202)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (and $x39 $x187)))
 (let (($x132 (and (not $x142) $x69)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x122 $x178)))
 (let (($x137 (not $x235)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x170 $x196)))
 (let (($x231 (and (not $x225) $x137)))
 (let (($x182 (and (and (and (and (and (and $x231 $x132) $x273) $x254) $x185) $x236) $x175)))
 (let (($x205 (and $x182 $x91)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x183 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x183)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x183)))
 (let (($x221 (or false (or false (and (and true (or $x41 $x6)) (or $x121 $x160))))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x221)))
 (let (($x299 (and $x116 $x205)))
 (let (($x64 (= $x299 true)))
 (let (($x246 (= $x64 true)))
 (let (($x267 (= $x246 true)))
 (let (($x217 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x114 (= $x217 true)))
 (let (($x179 (= $x114 true)))
 (let (($x212 (= $x179 true)))
 (let ((?x5 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x16 (= (_ bv0 2) ?x5)))
 (let (($x27 (= $x16 true)))
 (let (($x208 (= $x27 true)))
 (let ((?x209 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x209)))
 (let (($x105 (= ?x136 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x156 (= $x105 true)))
 (let (($x195 (= $x156 true)))
 (let (($x180 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x126 (= $x180 true)))
 (let (($x13 (= $x126 true)))
 (let (($x57 (= $x13 true)))
 (let (($x29 (and $x57 $x195)))
 (let (($x124 (and $x29 $x208)))
 (let (($x144 (and $x124 $x212)))
 (let (($x300 (and $x144 $x267)))
 (let (($x78 (and $x300 $x54)))
 (let (($x280 (and $x78 $x100)))
 (let (($x211 (and $x280 $x287)))
 (let (($x304 (and $x211 $x46)))
 (let (($x85 (and $x304 $x264)))
 (let (($x241 (and $x85 $x207)))
 (let (($x219 (and $x241 $x159)))
 (let (($x258 (and $x219 $x84)))
 (let (($x22 (and $x258 $x143)))
 (let (($x163 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x204 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x204 (_ bv1 32))))
 (let (($x307 (and $x103 $x22)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x308 (and $x129 $x307)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x161 (and $x188 $x308)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x148 (and $x68 $x161)))
 (let (($x45 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd ?x203 (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x75 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x67)))
 (let (($x21 (or false (or false (and (and true (or $x127 $x75)) (or $x53 $x45))))))
 (let (($x102 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x21)))
 (let (($x90 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x21)))
 (let (($x72 (and $x90 $x148)))
 (let (($x206 (=> $x72 $x152)))
 (not $x206))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x130 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x227 (bvule ?x130 input.dst.llvm-%n)))
 (let (($x247 (= $x227 true)))
 (let (($x301 (= $x247 true)))
 (let (($x173 (forall ((input.ind-%var1473X (_ BitVec 32)) )(let ((?x303 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1473X)))
 (let ((?x26 (input.spec-%var-x-1.1.1 input.ind-%var1473X)))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1473X)))
 (=> $x138 (= ?x26 ?x303))))))
 ))
 (let (($x305 (forall ((input.ind-%var1472X (_ BitVec 32)) )(let (($x103 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1472X)))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1472X)))
 (= $x138 $x103))))
 ))
 (let (($x49 (and $x305 $x173)))
 (let (($x281 (= $x49 true)))
 (let (($x266 (forall ((input.ind-%var1467X (_ BitVec 32)) )(let ((?x311 (bvadd (bvmul input.ind-%var1467X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x143))))
 (let ((?x303 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1467X)))
 (let (($x103 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1467X)))
 (=> $x103 (= ?x303 ?x72))))))))
 ))
 (let (($x297 (forall ((input.ind-%var1466X (_ BitVec 32)) )(let (($x63 (and (bvule (_ bv0 32) input.ind-%var1466X) (bvult input.ind-%var1466X input.dst.llvm-%n))))
 (let (($x103 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1466X)))
 (= $x103 $x63))))
 ))
 (let (($x164 (and $x297 $x266)))
 (let (($x15 (= $x164 true)))
 (let (($x80 (forall ((input.ind-%var1461X (_ BitVec 32)) )(let ((?x311 (bvadd (bvmul input.ind-%var1461X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x143))))
 (let ((?x26 (input.spec-%var-x-1.1.1 input.ind-%var1461X)))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1461X)))
 (=> $x138 (= ?x26 ?x72))))))))
 ))
 (let (($x157 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x63 (and (bvule (_ bv0 32) input.ind-%var1460X) (bvult input.ind-%var1460X input.dst.llvm-%n))))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1460X)))
 (= $x138 $x63))))
 ))
 (let (($x152 (and $x157 $x80)))
 (let (($x206 (= $x152 true)))
 (let ((?x241 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x241)))
 (let (($x215 (= ?x74 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x167 (= $x215 true)))
 (let (($x319 (= $x167 true)))
 (let (($x238 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x201 (= $x238 true)))
 (let (($x12 (= $x201 true)))
 (let (($x119 (= $x12 true)))
 (let (($x216 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (= $x216 true)))
 (let (($x282 (= $x109 true)))
 (let (($x264 (= $x282 true)))
 (let (($x118 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x71 (= $x118 true)))
 (let (($x79 (= $x71 true)))
 (let (($x46 (= $x79 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x259 (bvsub ?x203 ?x96)))
 (let (($x261 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x259) (bvult ?x203 ?x259))))
 (let (($x61 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x17 (ite $x61 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x290 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvmul (_ bv4 64) ?x290)))
 (let ((?x250 ((_ extract 63 32) ?x14)))
 (let (($x83 (= ?x250 ?x17)))
 (let (($x289 (and $x83 $x261)))
 (let (($x253 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x100 (and $x253 $x289)))
 (let (($x280 (= true $x100)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (=> $x51 $x280)))
 (let (($x232 (= $x166 true)))
 (let (($x315 (= $x232 true)))
 (let (($x287 (= $x315 true)))
 (let (($x277 (= $x51 true)))
 (let (($x37 (= $x277 true)))
 (let (($x70 (= $x37 true)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x182)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x98)))
 (let ((?x236 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x236)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x59)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (and $x168 $x185)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (and $x146 $x193)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x132 $x97)))
 (let (($x273 (not $x220)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x48 $x202)))
 (let (($x230 (and (not $x69) $x273)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (and $x231 $x39)))
 (let (($x142 (not $x187)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x6 $x151)))
 (let (($x149 (and (not $x137) $x142)))
 (let (($x267 (and (and (and (and (and (and $x149 $x230) $x272) $x162) $x256) $x7) $x175)))
 (let (($x300 (and $x267 $x294)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x160)))
 (let (($x122 (or false (or false (and (and true (or $x191 $x86)) (or $x116 $x170))))))
 (let (($x235 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x122)))
 (let (($x32 (and $x235 $x300)))
 (let (($x296 (= $x32 true)))
 (let (($x54 (= $x296 true)))
 (let (($x78 (= $x54 true)))
 (let (($x144 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x92 (= $x144 true)))
 (let (($x125 (= $x92 true)))
 (let (($x93 (= $x125 true)))
 (let ((?x124 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x217 (= (_ bv0 2) ?x124)))
 (let (($x114 (= $x217 true)))
 (let (($x179 (= $x114 true)))
 (let ((?x156 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x156)))
 (let (($x36 (= ?x195 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x36 true)))
 (let (($x16 (= $x5 true)))
 (let (($x150 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x43 (= $x150 true)))
 (let (($x209 (= $x43 true)))
 (let (($x136 (= $x209 true)))
 (let (($x27 (and $x136 $x16)))
 (let (($x212 (and $x27 $x179)))
 (let (($x183 (and $x212 $x93)))
 (let (($x233 (and $x183 $x78)))
 (let (($x248 (and $x233 $x70)))
 (let (($x211 (and $x248 $x287)))
 (let (($x304 (and $x211 $x46)))
 (let (($x85 (and $x304 $x264)))
 (let (($x207 (and $x85 $x119)))
 (let (($x293 (and $x207 $x319)))
 (let (($x270 (and $x293 $x206)))
 (let (($x158 (and $x270 $x15)))
 (let (($x226 (and $x158 $x281)))
 (let (($x180 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x126 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x126 (_ bv1 32))))
 (let (($x251 (and $x13 $x226)))
 (let (($x131 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x94 (and $x131 $x251)))
 (let (($x224 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x112 (and $x224 $x94)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x141 $x112)))
 (let (($x8 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd ?x203 (_ bv3 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x11 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x90 (or false (or false (and (and true (or $x145 $x11)) (or $x73 $x8))))))
 (let (($x68 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x90)))
 (let (($x139 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x90)))
 (let (($x283 (and $x139 $x24)))
 (let (($x284 (=> $x283 $x301)))
 (not $x284))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x130 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x227 (bvule ?x130 input.dst.llvm-%n)))
 (let (($x247 (= $x227 true)))
 (let (($x301 (= $x247 true)))
 (let (($x173 (forall ((input.ind-%var1473X (_ BitVec 32)) )(let ((?x303 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1473X)))
 (let ((?x26 (input.spec-%var-x-1.1.1 input.ind-%var1473X)))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1473X)))
 (=> $x138 (= ?x26 ?x303))))))
 ))
 (let (($x305 (forall ((input.ind-%var1472X (_ BitVec 32)) )(let (($x103 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1472X)))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1472X)))
 (= $x138 $x103))))
 ))
 (let (($x49 (and $x305 $x173)))
 (let (($x281 (= $x49 true)))
 (let (($x266 (forall ((input.ind-%var1467X (_ BitVec 32)) )(let ((?x311 (bvadd (bvmul input.ind-%var1467X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x143))))
 (let ((?x303 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1467X)))
 (let (($x103 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1467X)))
 (=> $x103 (= ?x303 ?x72))))))))
 ))
 (let (($x297 (forall ((input.ind-%var1466X (_ BitVec 32)) )(let (($x63 (and (bvule (_ bv0 32) input.ind-%var1466X) (bvult input.ind-%var1466X input.dst.llvm-%n))))
 (let (($x103 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1466X)))
 (= $x103 $x63))))
 ))
 (let (($x164 (and $x297 $x266)))
 (let (($x15 (= $x164 true)))
 (let (($x80 (forall ((input.ind-%var1461X (_ BitVec 32)) )(let ((?x311 (bvadd (bvmul input.ind-%var1461X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x143))))
 (let ((?x26 (input.spec-%var-x-1.1.1 input.ind-%var1461X)))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1461X)))
 (=> $x138 (= ?x26 ?x72))))))))
 ))
 (let (($x157 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x63 (and (bvule (_ bv0 32) input.ind-%var1460X) (bvult input.ind-%var1460X input.dst.llvm-%n))))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1460X)))
 (= $x138 $x63))))
 ))
 (let (($x152 (and $x157 $x80)))
 (let (($x206 (= $x152 true)))
 (let ((?x241 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x241)))
 (let (($x215 (= ?x74 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x167 (= $x215 true)))
 (let (($x319 (= $x167 true)))
 (let (($x238 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x201 (= $x238 true)))
 (let (($x12 (= $x201 true)))
 (let (($x119 (= $x12 true)))
 (let (($x216 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (= $x216 true)))
 (let (($x282 (= $x109 true)))
 (let (($x264 (= $x282 true)))
 (let (($x118 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x71 (= $x118 true)))
 (let (($x79 (= $x71 true)))
 (let (($x46 (= $x79 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x259 (bvsub ?x203 ?x96)))
 (let (($x261 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x259) (bvult ?x203 ?x259))))
 (let (($x61 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x17 (ite $x61 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x290 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvmul (_ bv4 64) ?x290)))
 (let ((?x250 ((_ extract 63 32) ?x14)))
 (let (($x83 (= ?x250 ?x17)))
 (let (($x289 (and $x83 $x261)))
 (let (($x253 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x100 (and $x253 $x289)))
 (let (($x280 (= true $x100)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (=> $x51 $x280)))
 (let (($x232 (= $x166 true)))
 (let (($x315 (= $x232 true)))
 (let (($x287 (= $x315 true)))
 (let (($x277 (= $x51 true)))
 (let (($x37 (= $x277 true)))
 (let (($x70 (= $x37 true)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x182)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x98)))
 (let ((?x236 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x236)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x59)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (and $x168 $x185)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (and $x146 $x193)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x132 $x97)))
 (let (($x273 (not $x220)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x48 $x202)))
 (let (($x230 (and (not $x69) $x273)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (and $x231 $x39)))
 (let (($x142 (not $x187)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x6 $x151)))
 (let (($x149 (and (not $x137) $x142)))
 (let (($x267 (and (and (and (and (and (and $x149 $x230) $x272) $x162) $x256) $x7) $x175)))
 (let (($x300 (and $x267 $x294)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x160)))
 (let (($x122 (or false (or false (and (and true (or $x191 $x86)) (or $x116 $x170))))))
 (let (($x235 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x122)))
 (let (($x32 (and $x235 $x300)))
 (let (($x296 (= $x32 true)))
 (let (($x54 (= $x296 true)))
 (let (($x78 (= $x54 true)))
 (let (($x144 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x92 (= $x144 true)))
 (let (($x125 (= $x92 true)))
 (let (($x93 (= $x125 true)))
 (let ((?x124 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x217 (= (_ bv0 2) ?x124)))
 (let (($x114 (= $x217 true)))
 (let (($x179 (= $x114 true)))
 (let ((?x156 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x156)))
 (let (($x36 (= ?x195 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x36 true)))
 (let (($x16 (= $x5 true)))
 (let (($x150 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x43 (= $x150 true)))
 (let (($x209 (= $x43 true)))
 (let (($x136 (= $x209 true)))
 (let (($x27 (and $x136 $x16)))
 (let (($x212 (and $x27 $x179)))
 (let (($x183 (and $x212 $x93)))
 (let (($x233 (and $x183 $x78)))
 (let (($x248 (and $x233 $x70)))
 (let (($x211 (and $x248 $x287)))
 (let (($x304 (and $x211 $x46)))
 (let (($x85 (and $x304 $x264)))
 (let (($x207 (and $x85 $x119)))
 (let (($x293 (and $x207 $x319)))
 (let (($x270 (and $x293 $x206)))
 (let (($x158 (and $x270 $x15)))
 (let (($x226 (and $x158 $x281)))
 (let (($x180 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x126 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x126 (_ bv1 32))))
 (let (($x251 (and $x13 $x226)))
 (let (($x131 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x94 (and $x131 $x251)))
 (let (($x224 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x112 (and $x224 $x94)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x141 $x112)))
 (let (($x8 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd ?x203 (_ bv3 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x11 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x90 (or false (or false (and (and true (or $x145 $x11)) (or $x73 $x8))))))
 (let (($x68 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x90)))
 (let (($x139 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x90)))
 (let (($x283 (and $x139 $x24)))
 (let (($x284 (=> $x283 $x301)))
 (not $x284))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x258 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x153 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x153 (_ bv1 32))))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x316 (not $x51)))
 (let (($x302 (or $x316 $x271)))
 (let (($x249 (= $x302 true)))
 (let (($x60 (= $x249 true)))
 (let (($x56 (forall ((input.ind-%var1496X (_ BitVec 32)) )(let ((?x269 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1496X)))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var1496X)))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1496X)))
 (=> $x319 (= ?x148 ?x269))))))
 ))
 (let (($x255 (forall ((input.ind-%var1495X (_ BitVec 32)) )(let (($x283 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1495X)))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1495X)))
 (= $x319 $x283))))
 ))
 (let (($x19 (and $x255 $x56)))
 (let (($x113 (= $x19 true)))
 (let (($x84 (forall ((input.ind-%var1490X (_ BitVec 32)) )(let ((?x303 (bvadd (bvmul input.ind-%var1490X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x164))))
 (let ((?x269 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1490X)))
 (let (($x283 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1490X)))
 (=> $x283 (= ?x269 ?x186))))))))
 ))
 (let (($x35 (forall ((input.ind-%var1489X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var1489X) (bvult input.ind-%var1489X input.dst.llvm-%n))))
 (let (($x283 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1489X)))
 (= $x283 $x157))))
 ))
 (let (($x20 (and $x35 $x84)))
 (let (($x229 (= $x20 true)))
 (let (($x281 (forall ((input.ind-%var1484X (_ BitVec 32)) )(let ((?x303 (bvadd (bvmul input.ind-%var1484X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x164))))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var1484X)))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1484X)))
 (=> $x319 (= ?x148 ?x186))))))))
 ))
 (let (($x243 (forall ((input.ind-%var1483X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var1483X) (bvult input.ind-%var1483X input.dst.llvm-%n))))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1483X)))
 (= $x319 $x157))))
 ))
 (let (($x226 (and $x243 $x281)))
 (let (($x251 (= $x226 true)))
 (let ((?x238 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x201 (bvneg ?x238)))
 (let (($x12 (= ?x201 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x119 (= $x12 true)))
 (let (($x207 (= $x119 true)))
 (let (($x216 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x109 (= $x216 true)))
 (let (($x282 (= $x109 true)))
 (let (($x264 (= $x282 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x71 (= $x118 true)))
 (let (($x79 (= $x71 true)))
 (let (($x46 (= $x79 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (= $x166 true)))
 (let (($x315 (= $x232 true)))
 (let (($x287 (= $x315 true)))
 (let (($x38 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x261 (= $x38 true)))
 (let (($x289 (= $x261 true)))
 (let (($x100 (= $x289 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x147 (bvsub ?x203 ?x96)))
 (let (($x290 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x147) (bvult ?x203 ?x147))))
 (let (($x37 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x70 (ite $x37 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x78 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvmul (_ bv4 64) ?x78)))
 (let ((?x277 ((_ extract 63 32) ?x233)))
 (let (($x248 (= ?x277 ?x70)))
 (let (($x14 (and $x248 $x290)))
 (let (($x296 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x250 (and $x296 $x14)))
 (let (($x61 (= true $x250)))
 (let (($x17 (=> $x51 $x61)))
 (let (($x83 (= $x17 true)))
 (let (($x237 (= $x83 true)))
 (let (($x259 (= $x237 true)))
 (let (($x98 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x175 (= $x98 true)))
 (let (($x267 (= $x175 true)))
 (let (($x182 (= $x267 true)))
 (let ((?x254 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x272 (= (_ bv0 32) ?x254)))
 (let ((?x230 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x230)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x273 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x220)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x69)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (and $x202 $x128)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x48 $x132)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x235 $x6)))
 (let (($x137 (not $x151)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x225 $x133)))
 (let (($x231 (and (not $x122) $x137)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x86 $x120)))
 (let (($x116 (not $x221)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x16 $x27)))
 (let (($x196 (and (not $x191) $x116)))
 (let (($x168 (and (and (and (and (and (and $x196 $x231) $x187) $x149) $x97) $x273) $x91)))
 (let (($x59 (and $x168 $x272)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x217 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x217)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x217)))
 (let (($x121 (or false (or false (and (and true (or $x114 $x179)) (or $x92 $x125))))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x121)))
 (let (($x185 (and $x160 $x59)))
 (let (($x193 (= $x185 true)))
 (let (($x256 (= $x193 true)))
 (let (($x64 (= $x256 true)))
 (let ((?x105 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x156 (= (_ bv0 2) ?x105)))
 (let (($x195 (= $x156 true)))
 (let (($x29 (= $x195 true)))
 (let ((?x13 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x13)))
 (let (($x43 (= ?x57 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x209 (= $x43 true)))
 (let (($x136 (= $x209 true)))
 (let (($x36 (and $x136 $x29)))
 (let (($x236 (and $x36 $x64)))
 (let (($x294 (and $x236 $x182)))
 (let (($x317 (and $x294 $x259)))
 (let (($x280 (and $x317 $x100)))
 (let (($x211 (and $x280 $x287)))
 (let (($x304 (and $x211 $x46)))
 (let (($x85 (and $x304 $x264)))
 (let (($x241 (and $x85 $x207)))
 (let (($x94 (and $x241 $x251)))
 (let (($x213 (and $x94 $x229)))
 (let (($x292 (and $x213 $x113)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x163 $x292)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x107 (and $x129 $x169)))
 (let (($x82 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x82 $x107)))
 (let (($x21 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd ?x203 (_ bv3 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x53 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x11)))
 (let (($x139 (or false (or false (and (and true (or $x77 $x53)) (or $x62 $x21))))))
 (let (($x141 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x139)))
 (let (($x176 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x139)))
 (let (($x174 (and $x176 $x310)))
 (let (($x23 (=> $x174 $x60)))
 (not $x23)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x258 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x153 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x153 (_ bv1 32))))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x316 (not $x51)))
 (let (($x302 (or $x316 $x271)))
 (let (($x249 (= $x302 true)))
 (let (($x60 (= $x249 true)))
 (let (($x56 (forall ((input.ind-%var1496X (_ BitVec 32)) )(let ((?x269 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1496X)))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var1496X)))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1496X)))
 (=> $x319 (= ?x148 ?x269))))))
 ))
 (let (($x255 (forall ((input.ind-%var1495X (_ BitVec 32)) )(let (($x283 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1495X)))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1495X)))
 (= $x319 $x283))))
 ))
 (let (($x19 (and $x255 $x56)))
 (let (($x113 (= $x19 true)))
 (let (($x84 (forall ((input.ind-%var1490X (_ BitVec 32)) )(let ((?x303 (bvadd (bvmul input.ind-%var1490X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x164))))
 (let ((?x269 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1490X)))
 (let (($x283 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1490X)))
 (=> $x283 (= ?x269 ?x186))))))))
 ))
 (let (($x35 (forall ((input.ind-%var1489X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var1489X) (bvult input.ind-%var1489X input.dst.llvm-%n))))
 (let (($x283 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1489X)))
 (= $x283 $x157))))
 ))
 (let (($x20 (and $x35 $x84)))
 (let (($x229 (= $x20 true)))
 (let (($x281 (forall ((input.ind-%var1484X (_ BitVec 32)) )(let ((?x303 (bvadd (bvmul input.ind-%var1484X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x164))))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var1484X)))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1484X)))
 (=> $x319 (= ?x148 ?x186))))))))
 ))
 (let (($x243 (forall ((input.ind-%var1483X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var1483X) (bvult input.ind-%var1483X input.dst.llvm-%n))))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1483X)))
 (= $x319 $x157))))
 ))
 (let (($x226 (and $x243 $x281)))
 (let (($x251 (= $x226 true)))
 (let ((?x238 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x201 (bvneg ?x238)))
 (let (($x12 (= ?x201 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x119 (= $x12 true)))
 (let (($x207 (= $x119 true)))
 (let (($x216 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x109 (= $x216 true)))
 (let (($x282 (= $x109 true)))
 (let (($x264 (= $x282 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x71 (= $x118 true)))
 (let (($x79 (= $x71 true)))
 (let (($x46 (= $x79 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (= $x166 true)))
 (let (($x315 (= $x232 true)))
 (let (($x287 (= $x315 true)))
 (let (($x38 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x261 (= $x38 true)))
 (let (($x289 (= $x261 true)))
 (let (($x100 (= $x289 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x147 (bvsub ?x203 ?x96)))
 (let (($x290 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x147) (bvult ?x203 ?x147))))
 (let (($x37 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x70 (ite $x37 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x78 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvmul (_ bv4 64) ?x78)))
 (let ((?x277 ((_ extract 63 32) ?x233)))
 (let (($x248 (= ?x277 ?x70)))
 (let (($x14 (and $x248 $x290)))
 (let (($x296 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x250 (and $x296 $x14)))
 (let (($x61 (= true $x250)))
 (let (($x17 (=> $x51 $x61)))
 (let (($x83 (= $x17 true)))
 (let (($x237 (= $x83 true)))
 (let (($x259 (= $x237 true)))
 (let (($x98 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x175 (= $x98 true)))
 (let (($x267 (= $x175 true)))
 (let (($x182 (= $x267 true)))
 (let ((?x254 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x272 (= (_ bv0 32) ?x254)))
 (let ((?x230 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x230)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x273 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x220)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x69)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (and $x202 $x128)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x48 $x132)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x235 $x6)))
 (let (($x137 (not $x151)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x225 $x133)))
 (let (($x231 (and (not $x122) $x137)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x86 $x120)))
 (let (($x116 (not $x221)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x16 $x27)))
 (let (($x196 (and (not $x191) $x116)))
 (let (($x168 (and (and (and (and (and (and $x196 $x231) $x187) $x149) $x97) $x273) $x91)))
 (let (($x59 (and $x168 $x272)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x217 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x217)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x217)))
 (let (($x121 (or false (or false (and (and true (or $x114 $x179)) (or $x92 $x125))))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x121)))
 (let (($x185 (and $x160 $x59)))
 (let (($x193 (= $x185 true)))
 (let (($x256 (= $x193 true)))
 (let (($x64 (= $x256 true)))
 (let ((?x105 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x156 (= (_ bv0 2) ?x105)))
 (let (($x195 (= $x156 true)))
 (let (($x29 (= $x195 true)))
 (let ((?x13 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x13)))
 (let (($x43 (= ?x57 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x209 (= $x43 true)))
 (let (($x136 (= $x209 true)))
 (let (($x36 (and $x136 $x29)))
 (let (($x236 (and $x36 $x64)))
 (let (($x294 (and $x236 $x182)))
 (let (($x317 (and $x294 $x259)))
 (let (($x280 (and $x317 $x100)))
 (let (($x211 (and $x280 $x287)))
 (let (($x304 (and $x211 $x46)))
 (let (($x85 (and $x304 $x264)))
 (let (($x241 (and $x85 $x207)))
 (let (($x94 (and $x241 $x251)))
 (let (($x213 (and $x94 $x229)))
 (let (($x292 (and $x213 $x113)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x163 $x292)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x107 (and $x129 $x169)))
 (let (($x82 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x82 $x107)))
 (let (($x21 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd ?x203 (_ bv3 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x53 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x11)))
 (let (($x139 (or false (or false (and (and true (or $x77 $x53)) (or $x62 $x21))))))
 (let (($x141 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x139)))
 (let (($x176 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x139)))
 (let (($x174 (and $x176 $x310)))
 (let (($x23 (=> $x174 $x60)))
 (not $x23)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 195 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x101 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x30 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x123 (bvmul (_ bv4294967295 32) ?x30)))
 (let ((?x313 (bvneg ?x123)))
 (let (($x117 (= ?x313 ?x101)))
 (let (($x210 (= $x117 true)))
 (let (($x311 (forall ((input.ind-%var1519X (_ BitVec 32)) )(let ((?x110 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1519X)))
 (let ((?x135 (input.spec-%var-x-1.1.1 input.ind-%var1519X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1519X)))
 (=> $x158 (= ?x135 ?x110))))))
 ))
 (let (($x171 (forall ((input.ind-%var1518X (_ BitVec 32)) )(let (($x57 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1518X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1518X)))
 (= $x158 $x57))))
 ))
 (let (($x268 (and $x171 $x311)))
 (let (($x34 (= $x268 true)))
 (let (($x286 (forall ((input.ind-%var1513X (_ BitVec 32)) )(let ((?x310 (bvadd (bvmul input.ind-%var1513X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x153))))
 (let ((?x110 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1513X)))
 (let (($x57 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1513X)))
 (=> $x57 (= ?x110 ?x10))))))))
 ))
 (let (($x9 (forall ((input.ind-%var1512X (_ BitVec 32)) )(let (($x49 (and (bvule (_ bv0 32) input.ind-%var1512X) (bvult input.ind-%var1512X input.dst.llvm-%n))))
 (let (($x57 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1512X)))
 (= $x57 $x49))))
 ))
 (let (($x66 (and $x9 $x286)))
 (let (($x33 (= $x66 true)))
 (let (($x130 (forall ((input.ind-%var1507X (_ BitVec 32)) )(let ((?x310 (bvadd (bvmul input.ind-%var1507X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x153))))
 (let ((?x135 (input.spec-%var-x-1.1.1 input.ind-%var1507X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1507X)))
 (=> $x158 (= ?x135 ?x10))))))))
 ))
 (let (($x226 (forall ((input.ind-%var1506X (_ BitVec 32)) )(let (($x49 (and (bvule (_ bv0 32) input.ind-%var1506X) (bvult input.ind-%var1506X input.dst.llvm-%n))))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1506X)))
 (= $x158 $x49))))
 ))
 (let (($x263 (and $x226 $x130)))
 (let (($x293 (= $x263 true)))
 (let ((?x148 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x148)))
 (let (($x297 (= ?x22 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let (($x108 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x63 (= $x108 true)))
 (let (($x157 (= $x63 true)))
 (let (($x26 (= $x157 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x207 (= $x119 true)))
 (let (($x241 (= $x207 true)))
 (let (($x167 (= $x241 true)))
 (let (($x264 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (= $x264 true)))
 (let (($x238 (= $x85 true)))
 (let (($x201 (= $x238 true)))
 (let (($x46 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x304 (= $x46 true)))
 (let (($x216 (= $x304 true)))
 (let (($x109 (= $x216 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x38 (bvsub ?x203 ?x96)))
 (let (($x280 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x38) (bvult ?x203 ?x38))))
 (let (($x237 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x259 (ite $x237 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x61 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x61)))
 (let ((?x83 ((_ extract 63 32) ?x17)))
 (let (($x317 (= ?x83 ?x259)))
 (let (($x166 (and $x317 $x280)))
 (let (($x14 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x232 (and $x14 $x166)))
 (let (($x315 (= true $x232)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x287 (=> $x51 $x315)))
 (let (($x211 (= $x287 true)))
 (let (($x118 (= $x211 true)))
 (let (($x71 (= $x118 true)))
 (let (($x70 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x248 (= $x70 true)))
 (let (($x320 (= $x248 true)))
 (let (($x147 (= $x320 true)))
 (let (($x54 (= $x51 true)))
 (let (($x78 (= $x54 true)))
 (let (($x233 (= $x78 true)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x185)))
 (let ((?x272 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x272)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let ((?x273 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x273)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x230 (and $x220 $x146)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x299 $x230)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x140 $x142)))
 (let (($x162 (not $x149)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x205 $x39)))
 (let (($x202 (and (not $x187) $x162)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x181 $x235)))
 (let (($x151 (not $x6)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x125 $x93)))
 (let (($x231 (and (not $x122) $x151)))
 (let (($x175 (and (and (and (and (and (and $x231 $x202) $x128) $x97) $x91) $x254) $x59)))
 (let (($x267 (and $x175 $x193)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x121 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x121)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x121)))
 (let (($x196 (or false (or false (and (and true (or $x160 $x16)) (or $x170 $x86))))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x196)))
 (let (($x182 (and $x133 $x267)))
 (let (($x294 (= $x182 true)))
 (let (($x300 (= $x294 true)))
 (let (($x32 (= $x300 true)))
 (let ((?x217 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x114 (= (_ bv0 2) ?x217)))
 (let (($x179 (= $x114 true)))
 (let (($x212 (= $x179 true)))
 (let ((?x156 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x156)))
 (let (($x36 (= ?x195 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x36 true)))
 (let (($x124 (= $x208 true)))
 (let (($x144 (and $x124 $x212)))
 (let (($x296 (and $x144 $x32)))
 (let (($x277 (and $x296 $x233)))
 (let (($x253 (and $x277 $x147)))
 (let (($x79 (and $x253 $x71)))
 (let (($x282 (and $x79 $x109)))
 (let (($x12 (and $x282 $x201)))
 (let (($x319 (and $x12 $x167)))
 (let (($x243 (and $x319 $x26)))
 (let (($x298 (and $x243 $x305)))
 (let (($x265 (and $x298 $x293)))
 (let (($x288 (and $x265 $x33)))
 (let (($x154 (and $x288 $x34)))
 (let (($x43 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x209 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x209 (_ bv1 32))))
 (let (($x104 (and $x136 $x154)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x180 $x104)))
 (let (($x131 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x222 (and $x131 $x159)))
 (let (($x188 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x52 (and $x188 $x222)))
 (let (($x90 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd ?x203 (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x73 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x176 (or false (or false (and (and true (or $x44 $x73)) (or $x102 $x90))))))
 (let (($x82 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x176)))
 (let (($x67 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x176)))
 (let (($x87 (and $x67 $x52)))
 (let (($x257 (=> $x87 $x210)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x101 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x30 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x123 (bvmul (_ bv4294967295 32) ?x30)))
 (let ((?x313 (bvneg ?x123)))
 (let (($x117 (= ?x313 ?x101)))
 (let (($x210 (= $x117 true)))
 (let (($x311 (forall ((input.ind-%var1519X (_ BitVec 32)) )(let ((?x110 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1519X)))
 (let ((?x135 (input.spec-%var-x-1.1.1 input.ind-%var1519X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1519X)))
 (=> $x158 (= ?x135 ?x110))))))
 ))
 (let (($x171 (forall ((input.ind-%var1518X (_ BitVec 32)) )(let (($x57 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1518X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1518X)))
 (= $x158 $x57))))
 ))
 (let (($x268 (and $x171 $x311)))
 (let (($x34 (= $x268 true)))
 (let (($x286 (forall ((input.ind-%var1513X (_ BitVec 32)) )(let ((?x310 (bvadd (bvmul input.ind-%var1513X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x153))))
 (let ((?x110 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1513X)))
 (let (($x57 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1513X)))
 (=> $x57 (= ?x110 ?x10))))))))
 ))
 (let (($x9 (forall ((input.ind-%var1512X (_ BitVec 32)) )(let (($x49 (and (bvule (_ bv0 32) input.ind-%var1512X) (bvult input.ind-%var1512X input.dst.llvm-%n))))
 (let (($x57 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1512X)))
 (= $x57 $x49))))
 ))
 (let (($x66 (and $x9 $x286)))
 (let (($x33 (= $x66 true)))
 (let (($x130 (forall ((input.ind-%var1507X (_ BitVec 32)) )(let ((?x310 (bvadd (bvmul input.ind-%var1507X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x153))))
 (let ((?x135 (input.spec-%var-x-1.1.1 input.ind-%var1507X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1507X)))
 (=> $x158 (= ?x135 ?x10))))))))
 ))
 (let (($x226 (forall ((input.ind-%var1506X (_ BitVec 32)) )(let (($x49 (and (bvule (_ bv0 32) input.ind-%var1506X) (bvult input.ind-%var1506X input.dst.llvm-%n))))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1506X)))
 (= $x158 $x49))))
 ))
 (let (($x263 (and $x226 $x130)))
 (let (($x293 (= $x263 true)))
 (let ((?x148 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x148)))
 (let (($x297 (= ?x22 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let (($x108 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x63 (= $x108 true)))
 (let (($x157 (= $x63 true)))
 (let (($x26 (= $x157 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x207 (= $x119 true)))
 (let (($x241 (= $x207 true)))
 (let (($x167 (= $x241 true)))
 (let (($x264 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (= $x264 true)))
 (let (($x238 (= $x85 true)))
 (let (($x201 (= $x238 true)))
 (let (($x46 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x304 (= $x46 true)))
 (let (($x216 (= $x304 true)))
 (let (($x109 (= $x216 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x38 (bvsub ?x203 ?x96)))
 (let (($x280 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x38) (bvult ?x203 ?x38))))
 (let (($x237 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x259 (ite $x237 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x61 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x61)))
 (let ((?x83 ((_ extract 63 32) ?x17)))
 (let (($x317 (= ?x83 ?x259)))
 (let (($x166 (and $x317 $x280)))
 (let (($x14 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x232 (and $x14 $x166)))
 (let (($x315 (= true $x232)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x287 (=> $x51 $x315)))
 (let (($x211 (= $x287 true)))
 (let (($x118 (= $x211 true)))
 (let (($x71 (= $x118 true)))
 (let (($x70 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x248 (= $x70 true)))
 (let (($x320 (= $x248 true)))
 (let (($x147 (= $x320 true)))
 (let (($x54 (= $x51 true)))
 (let (($x78 (= $x54 true)))
 (let (($x233 (= $x78 true)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x185)))
 (let ((?x272 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x272)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let ((?x273 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x273)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x230 (and $x220 $x146)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x299 $x230)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x140 $x142)))
 (let (($x162 (not $x149)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x205 $x39)))
 (let (($x202 (and (not $x187) $x162)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x181 $x235)))
 (let (($x151 (not $x6)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x125 $x93)))
 (let (($x231 (and (not $x122) $x151)))
 (let (($x175 (and (and (and (and (and (and $x231 $x202) $x128) $x97) $x91) $x254) $x59)))
 (let (($x267 (and $x175 $x193)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x121 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x121)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x121)))
 (let (($x196 (or false (or false (and (and true (or $x160 $x16)) (or $x170 $x86))))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x196)))
 (let (($x182 (and $x133 $x267)))
 (let (($x294 (= $x182 true)))
 (let (($x300 (= $x294 true)))
 (let (($x32 (= $x300 true)))
 (let ((?x217 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x114 (= (_ bv0 2) ?x217)))
 (let (($x179 (= $x114 true)))
 (let (($x212 (= $x179 true)))
 (let ((?x156 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x156)))
 (let (($x36 (= ?x195 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x36 true)))
 (let (($x124 (= $x208 true)))
 (let (($x144 (and $x124 $x212)))
 (let (($x296 (and $x144 $x32)))
 (let (($x277 (and $x296 $x233)))
 (let (($x253 (and $x277 $x147)))
 (let (($x79 (and $x253 $x71)))
 (let (($x282 (and $x79 $x109)))
 (let (($x12 (and $x282 $x201)))
 (let (($x319 (and $x12 $x167)))
 (let (($x243 (and $x319 $x26)))
 (let (($x298 (and $x243 $x305)))
 (let (($x265 (and $x298 $x293)))
 (let (($x288 (and $x265 $x33)))
 (let (($x154 (and $x288 $x34)))
 (let (($x43 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x209 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x209 (_ bv1 32))))
 (let (($x104 (and $x136 $x154)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x180 $x104)))
 (let (($x131 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x222 (and $x131 $x159)))
 (let (($x188 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x52 (and $x188 $x222)))
 (let (($x90 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd ?x203 (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x73 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x176 (or false (or false (and (and true (or $x44 $x73)) (or $x102 $x90))))))
 (let (($x82 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x176)))
 (let (($x67 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x176)))
 (let (($x87 (and $x67 $x52)))
 (let (($x257 (=> $x87 $x210)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x7))))
 (let ((?x189 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x172)))
 (let ((?x76 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x219 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x76)))
 (let ((?x206 (bvmul (_ bv4294967295 32) ?x219)))
 (let ((?x312 (bvneg ?x206)))
 (let (($x318 (= ?x312 ?x189)))
 (let (($x262 (= $x318 true)))
 (let (($x24 (forall ((input.ind-%var1542X (_ BitVec 32)) )(let ((?x266 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1542X)))
 (let ((?x10 (input.spec-%var-x-1.1.1 input.ind-%var1542X)))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1542X)))
 (=> $x135 (= ?x10 ?x266))))))
 ))
 (let (($x80 (forall ((input.ind-%var1541X (_ BitVec 32)) )(let (($x136 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1541X)))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1541X)))
 (= $x135 $x136))))
 ))
 (let (($x55 (and $x80 $x24)))
 (let (($x42 (= $x55 true)))
 (let (($x74 (forall ((input.ind-%var1536X (_ BitVec 32)) )(let ((?x214 (bvadd (bvmul input.ind-%var1536X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x34))))
 (let ((?x266 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1536X)))
 (let (($x136 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1536X)))
 (=> $x136 (= ?x266 ?x87))))))))
 ))
 (let (($x35 (forall ((input.ind-%var1535X (_ BitVec 32)) )(let (($x302 (and (bvule (_ bv0 32) input.ind-%var1535X) (bvult input.ind-%var1535X input.dst.llvm-%n))))
 (let (($x136 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1535X)))
 (= $x136 $x302))))
 ))
 (let (($x143 (and $x35 $x74)))
 (let (($x15 (= $x143 true)))
 (let (($x313 (forall ((input.ind-%var1530X (_ BitVec 32)) )(let ((?x214 (bvadd (bvmul input.ind-%var1530X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x34))))
 (let ((?x10 (input.spec-%var-x-1.1.1 input.ind-%var1530X)))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1530X)))
 (=> $x135 (= ?x10 ?x87))))))))
 ))
 (let (($x258 (forall ((input.ind-%var1529X (_ BitVec 32)) )(let (($x302 (and (bvule (_ bv0 32) input.ind-%var1529X) (bvult input.ind-%var1529X input.dst.llvm-%n))))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1529X)))
 (= $x135 $x302))))
 ))
 (let (($x101 (and $x258 $x313)))
 (let (($x117 (= $x101 true)))
 (let ((?x305 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x305)))
 (let (($x158 (= ?x298 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x173 (= $x158 true)))
 (let (($x186 (= $x173 true)))
 (let ((?x157 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x157)))
 (let (($x243 (= ?x26 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x243 true)))
 (let (($x22 (= $x148 true)))
 (let ((?x241 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x167 (= (_ bv0 2) ?x241)))
 (let (($x319 (= $x167 true)))
 (let (($x108 (= $x319 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x238 (= $x85 true)))
 (let (($x201 (= $x238 true)))
 (let (($x12 (= $x201 true)))
 (let (($x304 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x216 (= $x304 true)))
 (let (($x109 (= $x216 true)))
 (let (($x282 (= $x109 true)))
 (let (($x211 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (= $x211 true)))
 (let (($x71 (= $x118 true)))
 (let (($x79 (= $x71 true)))
 (let (($x280 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x166 (= $x280 true)))
 (let (($x232 (= $x166 true)))
 (let (($x315 (= $x232 true)))
 (let (($x17 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 (bvsub ?x203 ?x96)) (bvult ?x203 (bvsub ?x203 ?x96)))))
 (let (($x320 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x253 (ite $x320 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x37 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x70 (bvmul (_ bv4 64) ?x37)))
 (let ((?x248 ((_ extract 63 32) ?x70)))
 (let (($x47 (= ?x248 ?x253)))
 (let (($x83 (and $x47 $x17)))
 (let (($x233 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x237 (and $x233 $x83)))
 (let (($x259 (= true $x237)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x317 (=> $x51 $x259)))
 (let (($x261 (= $x317 true)))
 (let (($x38 (= $x261 true)))
 (let (($x289 (= $x38 true)))
 (let (($x182 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x294 (= $x182 true)))
 (let (($x300 (= $x294 true)))
 (let (($x32 (= $x300 true)))
 (let (($x59 (= $x51 true)))
 (let (($x175 (= $x59 true)))
 (let (($x185 (= $x175 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x97)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x64)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x149)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (and $x142 $x162)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (and $x140 $x202)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x235 (and $x137 $x181)))
 (let (($x6 (not $x235)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x125 $x93)))
 (let (($x231 (and (not $x122) $x6)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x86 $x120)))
 (let (($x116 (not $x221)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x36 $x208)))
 (let (($x133 (and (not $x170) $x116)))
 (let (($x91 (and (and (and (and (and (and $x133 $x231) $x39) $x48) $x256) $x128) $x132)))
 (let (($x246 (and $x91 $x236)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x217 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x217)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x217)))
 (let (($x16 (or false (or false (and (and true (or $x114 $x179)) (or $x183 $x115))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x16)))
 (let (($x168 (and $x191 $x246)))
 (let (($x254 (= $x168 true)))
 (let (($x98 (= $x254 true)))
 (let (($x272 (= $x98 true)))
 (let (($x193 (and $x272 $x185)))
 (let (($x296 (and $x193 $x32)))
 (let (($x100 (and $x296 $x289)))
 (let (($x287 (and $x100 $x315)))
 (let (($x46 (and $x287 $x79)))
 (let (($x264 (and $x46 $x282)))
 (let (($x119 (and $x264 $x12)))
 (let (($x63 (and $x119 $x108)))
 (let (($x297 (and $x63 $x22)))
 (let (($x49 (and $x297 $x186)))
 (let (($x210 (and $x49 $x117)))
 (let (($x164 (and $x210 $x15)))
 (let (($x204 (and $x164 $x42)))
 (let (($x105 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x156 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x156 (_ bv1 32))))
 (let (($x292 (and $x195 $x204)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x126 $x292)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x138 (and $x163 $x274)))
 (let (($x224 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x94 (and $x224 $x138)))
 (let (($x139 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd ?x203 (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x62 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x67 (or false (or false (and (and true (or $x45 $x62)) (or $x68 $x139))))))
 (let (($x188 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x67)))
 (let (($x75 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x67)))
 (let (($x169 (and $x75 $x94)))
 (let (($x199 (=> $x169 $x262)))
 (not $x199))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x7))))
 (let ((?x189 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x172)))
 (let ((?x76 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x219 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x76)))
 (let ((?x206 (bvmul (_ bv4294967295 32) ?x219)))
 (let ((?x312 (bvneg ?x206)))
 (let (($x318 (= ?x312 ?x189)))
 (let (($x262 (= $x318 true)))
 (let (($x24 (forall ((input.ind-%var1542X (_ BitVec 32)) )(let ((?x266 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1542X)))
 (let ((?x10 (input.spec-%var-x-1.1.1 input.ind-%var1542X)))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1542X)))
 (=> $x135 (= ?x10 ?x266))))))
 ))
 (let (($x80 (forall ((input.ind-%var1541X (_ BitVec 32)) )(let (($x136 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1541X)))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1541X)))
 (= $x135 $x136))))
 ))
 (let (($x55 (and $x80 $x24)))
 (let (($x42 (= $x55 true)))
 (let (($x74 (forall ((input.ind-%var1536X (_ BitVec 32)) )(let ((?x214 (bvadd (bvmul input.ind-%var1536X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x34))))
 (let ((?x266 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1536X)))
 (let (($x136 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1536X)))
 (=> $x136 (= ?x266 ?x87))))))))
 ))
 (let (($x35 (forall ((input.ind-%var1535X (_ BitVec 32)) )(let (($x302 (and (bvule (_ bv0 32) input.ind-%var1535X) (bvult input.ind-%var1535X input.dst.llvm-%n))))
 (let (($x136 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1535X)))
 (= $x136 $x302))))
 ))
 (let (($x143 (and $x35 $x74)))
 (let (($x15 (= $x143 true)))
 (let (($x313 (forall ((input.ind-%var1530X (_ BitVec 32)) )(let ((?x214 (bvadd (bvmul input.ind-%var1530X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x34))))
 (let ((?x10 (input.spec-%var-x-1.1.1 input.ind-%var1530X)))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1530X)))
 (=> $x135 (= ?x10 ?x87))))))))
 ))
 (let (($x258 (forall ((input.ind-%var1529X (_ BitVec 32)) )(let (($x302 (and (bvule (_ bv0 32) input.ind-%var1529X) (bvult input.ind-%var1529X input.dst.llvm-%n))))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1529X)))
 (= $x135 $x302))))
 ))
 (let (($x101 (and $x258 $x313)))
 (let (($x117 (= $x101 true)))
 (let ((?x305 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x305)))
 (let (($x158 (= ?x298 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x173 (= $x158 true)))
 (let (($x186 (= $x173 true)))
 (let ((?x157 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x157)))
 (let (($x243 (= ?x26 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x243 true)))
 (let (($x22 (= $x148 true)))
 (let ((?x241 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x167 (= (_ bv0 2) ?x241)))
 (let (($x319 (= $x167 true)))
 (let (($x108 (= $x319 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x238 (= $x85 true)))
 (let (($x201 (= $x238 true)))
 (let (($x12 (= $x201 true)))
 (let (($x304 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x216 (= $x304 true)))
 (let (($x109 (= $x216 true)))
 (let (($x282 (= $x109 true)))
 (let (($x211 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (= $x211 true)))
 (let (($x71 (= $x118 true)))
 (let (($x79 (= $x71 true)))
 (let (($x280 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x166 (= $x280 true)))
 (let (($x232 (= $x166 true)))
 (let (($x315 (= $x232 true)))
 (let (($x17 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 (bvsub ?x203 ?x96)) (bvult ?x203 (bvsub ?x203 ?x96)))))
 (let (($x320 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x253 (ite $x320 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x37 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x70 (bvmul (_ bv4 64) ?x37)))
 (let ((?x248 ((_ extract 63 32) ?x70)))
 (let (($x47 (= ?x248 ?x253)))
 (let (($x83 (and $x47 $x17)))
 (let (($x233 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x237 (and $x233 $x83)))
 (let (($x259 (= true $x237)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x317 (=> $x51 $x259)))
 (let (($x261 (= $x317 true)))
 (let (($x38 (= $x261 true)))
 (let (($x289 (= $x38 true)))
 (let (($x182 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x294 (= $x182 true)))
 (let (($x300 (= $x294 true)))
 (let (($x32 (= $x300 true)))
 (let (($x59 (= $x51 true)))
 (let (($x175 (= $x59 true)))
 (let (($x185 (= $x175 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x97)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x64)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x149)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (and $x142 $x162)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (and $x140 $x202)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x235 (and $x137 $x181)))
 (let (($x6 (not $x235)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x125 $x93)))
 (let (($x231 (and (not $x122) $x6)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x86 $x120)))
 (let (($x116 (not $x221)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x36 $x208)))
 (let (($x133 (and (not $x170) $x116)))
 (let (($x91 (and (and (and (and (and (and $x133 $x231) $x39) $x48) $x256) $x128) $x132)))
 (let (($x246 (and $x91 $x236)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x217 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x217)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x217)))
 (let (($x16 (or false (or false (and (and true (or $x114 $x179)) (or $x183 $x115))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x16)))
 (let (($x168 (and $x191 $x246)))
 (let (($x254 (= $x168 true)))
 (let (($x98 (= $x254 true)))
 (let (($x272 (= $x98 true)))
 (let (($x193 (and $x272 $x185)))
 (let (($x296 (and $x193 $x32)))
 (let (($x100 (and $x296 $x289)))
 (let (($x287 (and $x100 $x315)))
 (let (($x46 (and $x287 $x79)))
 (let (($x264 (and $x46 $x282)))
 (let (($x119 (and $x264 $x12)))
 (let (($x63 (and $x119 $x108)))
 (let (($x297 (and $x63 $x22)))
 (let (($x49 (and $x297 $x186)))
 (let (($x210 (and $x49 $x117)))
 (let (($x164 (and $x210 $x15)))
 (let (($x204 (and $x164 $x42)))
 (let (($x105 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x156 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x156 (_ bv1 32))))
 (let (($x292 (and $x195 $x204)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x126 $x292)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x138 (and $x163 $x274)))
 (let (($x224 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x94 (and $x224 $x138)))
 (let (($x139 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd ?x203 (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x62 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x67 (or false (or false (and (and true (or $x45 $x62)) (or $x68 $x139))))))
 (let (($x188 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x67)))
 (let (($x75 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x67)))
 (let (($x169 (and $x75 $x94)))
 (let (($x199 (=> $x169 $x262)))
 (not $x199))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 204 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x99 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x227 (bvule ?x99 (_ bv4294967294 32))))
 (let (($x23 (= $x227 true)))
 (let (($x314 (= $x23 true)))
 (let (($x229 (forall ((input.ind-%var1566X (_ BitVec 32)) )(let ((?x197 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1566X)))
 (let ((?x30 (input.spec-%var-x-1.1.1 input.ind-%var1566X)))
 (let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var1566X)))
 (=> $x5 (= ?x30 ?x197))))))
 ))
 (let (($x31 (forall ((input.ind-%var1565X (_ BitVec 32)) )(let (($x124 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1565X)))
 (let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var1565X)))
 (= $x5 $x124))))
 ))
 (let (($x19 (and $x31 $x229)))
 (let (($x255 (= $x19 true)))
 (let (($x265 (forall ((input.ind-%var1560X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1560X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x204))))
 (let ((?x197 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1560X)))
 (let (($x124 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1560X)))
 (=> $x124 (= ?x197 ?x76))))))))
 ))
 (let (($x318 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let (($x311 (and (bvule (_ bv0 32) input.ind-%var1559X) (bvult input.ind-%var1559X input.dst.llvm-%n))))
 (let (($x124 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1559X)))
 (= $x124 $x311))))
 ))
 (let (($x57 (and $x318 $x265)))
 (let (($x293 (= $x57 true)))
 (let (($x312 (forall ((input.ind-%var1554X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1554X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x204))))
 (let ((?x30 (input.spec-%var-x-1.1.1 input.ind-%var1554X)))
 (let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var1554X)))
 (=> $x5 (= ?x30 ?x76))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1553X (_ BitVec 32)) )(let (($x311 (and (bvule (_ bv0 32) input.ind-%var1553X) (bvult input.ind-%var1553X input.dst.llvm-%n))))
 (let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var1553X)))
 (= $x5 $x311))))
 ))
 (let (($x95 (and $x284 $x312)))
 (let (($x244 (= $x95 true)))
 (let ((?x209 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x209)))
 (let (($x271 (= ?x135 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x309 (= $x271 true)))
 (let (($x302 (= $x309 true)))
 (let (($x13 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x158 (= $x13 true)))
 (let (($x173 (= $x158 true)))
 (let (($x186 (= $x173 true)))
 (let (($x22 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x297 (= $x22 true)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let ((?x238 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x238)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x264)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x304 (and $x71 $x46)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x118 $x304)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x315 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x289 (and $x261 $x38)))
 (let (($x100 (not $x289)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x237 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (and $x237 $x259)))
 (let (($x166 (and (not $x317) $x100)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x14 $x290)))
 (let (($x61 (not $x250)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x193 $x267)))
 (let (($x83 (and (not $x47) $x61)))
 (let (($x319 (and (and (and (and (and (and $x83 $x166) $x315) $x211) $x216) $x282) $x85)))
 (let (($x108 (and $x319 $x201)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x300 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x300)))
 (let (($x296 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x300)))
 (let (($x320 (or false (or false (and (and true (or $x32 $x296)) (or $x233 $x277))))))
 (let (($x253 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x320)))
 (let (($x63 (and $x253 $x108)))
 (let (($x157 (= $x63 true)))
 (let (($x26 (= $x157 true)))
 (let (($x243 (= $x26 true)))
 (let (($x254 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x98 (= $x254 true)))
 (let (($x272 (= $x98 true)))
 (let (($x59 (= $x272 true)))
 (let ((?x132 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x91 (= (_ bv0 2) ?x132)))
 (let (($x97 (= $x91 true)))
 (let (($x236 (= $x97 true)))
 (let (($x256 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x146 (= $x256 true)))
 (let (($x69 (= $x146 true)))
 (let (($x128 (= $x69 true)))
 (let (($x140 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x142 (= $x140 true)))
 (let (($x149 (= $x142 true)))
 (let (($x162 (= $x149 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x151 (bvsub ?x203 ?x96)))
 (let (($x6 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x151) (bvult ?x203 ?x151))))
 (let (($x125 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x93 (ite $x125 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x221 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x116 (bvmul (_ bv4 64) ?x221)))
 (let ((?x133 ((_ extract 63 32) ?x116)))
 (let (($x122 (= ?x133 ?x93)))
 (let (($x231 (and $x122 $x6)))
 (let (($x86 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x299 (and $x86 $x231)))
 (let (($x205 (= true $x299)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x39 (=> $x51 $x205)))
 (let (($x220 (= $x39 true)))
 (let (($x187 (= $x220 true)))
 (let (($x48 (= $x187 true)))
 (let ((?x225 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x225)))
 (let (($x16 (= ?x121 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x191 (= $x16 true)))
 (let (($x36 (= $x191 true)))
 (let (($x179 (= $x51 true)))
 (let (($x212 (= $x179 true)))
 (let (($x144 (= $x212 true)))
 (let (($x208 (and $x144 $x36)))
 (let (($x273 (and $x208 $x48)))
 (let (($x202 (and $x273 $x162)))
 (let (($x230 (and $x202 $x128)))
 (let (($x246 (and $x230 $x236)))
 (let (($x175 (and $x246 $x59)))
 (let (($x148 (and $x175 $x243)))
 (let (($x298 (and $x148 $x305)))
 (let (($x49 (and $x298 $x186)))
 (let (($x316 (and $x49 $x302)))
 (let (($x295 (and $x316 $x244)))
 (let (($x307 (and $x295 $x293)))
 (let (($x56 (and $x307 $x255)))
 (let (($x27 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x217 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x217 (_ bv1 32))))
 (let (($x111 (and $x114 $x56)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x84 (and $x105 $x111)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x113 (and $x180 $x84)))
 (let (($x129 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x41 (and $x129 $x113)))
 (let (($x176 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd ?x203 (_ bv3 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x102 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x62)))
 (let (($x75 (or false (or false (and (and true (or $x8 $x102)) (or $x141 $x176))))))
 (let (($x224 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x75)))
 (let (($x11 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x75)))
 (let (($x65 (and $x11 $x41)))
 (let (($x150 (=> $x65 $x314)))
 (not $x150))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x99 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x227 (bvule ?x99 (_ bv4294967294 32))))
 (let (($x23 (= $x227 true)))
 (let (($x314 (= $x23 true)))
 (let (($x229 (forall ((input.ind-%var1566X (_ BitVec 32)) )(let ((?x197 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1566X)))
 (let ((?x30 (input.spec-%var-x-1.1.1 input.ind-%var1566X)))
 (let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var1566X)))
 (=> $x5 (= ?x30 ?x197))))))
 ))
 (let (($x31 (forall ((input.ind-%var1565X (_ BitVec 32)) )(let (($x124 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1565X)))
 (let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var1565X)))
 (= $x5 $x124))))
 ))
 (let (($x19 (and $x31 $x229)))
 (let (($x255 (= $x19 true)))
 (let (($x265 (forall ((input.ind-%var1560X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1560X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x204))))
 (let ((?x197 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1560X)))
 (let (($x124 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1560X)))
 (=> $x124 (= ?x197 ?x76))))))))
 ))
 (let (($x318 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let (($x311 (and (bvule (_ bv0 32) input.ind-%var1559X) (bvult input.ind-%var1559X input.dst.llvm-%n))))
 (let (($x124 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1559X)))
 (= $x124 $x311))))
 ))
 (let (($x57 (and $x318 $x265)))
 (let (($x293 (= $x57 true)))
 (let (($x312 (forall ((input.ind-%var1554X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1554X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x204))))
 (let ((?x30 (input.spec-%var-x-1.1.1 input.ind-%var1554X)))
 (let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var1554X)))
 (=> $x5 (= ?x30 ?x76))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1553X (_ BitVec 32)) )(let (($x311 (and (bvule (_ bv0 32) input.ind-%var1553X) (bvult input.ind-%var1553X input.dst.llvm-%n))))
 (let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var1553X)))
 (= $x5 $x311))))
 ))
 (let (($x95 (and $x284 $x312)))
 (let (($x244 (= $x95 true)))
 (let ((?x209 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x209)))
 (let (($x271 (= ?x135 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x309 (= $x271 true)))
 (let (($x302 (= $x309 true)))
 (let (($x13 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x158 (= $x13 true)))
 (let (($x173 (= $x158 true)))
 (let (($x186 (= $x173 true)))
 (let (($x22 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x297 (= $x22 true)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let ((?x238 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x238)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x264)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x304 (and $x71 $x46)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x118 $x304)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x315 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x289 (and $x261 $x38)))
 (let (($x100 (not $x289)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x237 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (and $x237 $x259)))
 (let (($x166 (and (not $x317) $x100)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x14 $x290)))
 (let (($x61 (not $x250)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x193 $x267)))
 (let (($x83 (and (not $x47) $x61)))
 (let (($x319 (and (and (and (and (and (and $x83 $x166) $x315) $x211) $x216) $x282) $x85)))
 (let (($x108 (and $x319 $x201)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x300 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x300)))
 (let (($x296 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x300)))
 (let (($x320 (or false (or false (and (and true (or $x32 $x296)) (or $x233 $x277))))))
 (let (($x253 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x320)))
 (let (($x63 (and $x253 $x108)))
 (let (($x157 (= $x63 true)))
 (let (($x26 (= $x157 true)))
 (let (($x243 (= $x26 true)))
 (let (($x254 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x98 (= $x254 true)))
 (let (($x272 (= $x98 true)))
 (let (($x59 (= $x272 true)))
 (let ((?x132 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x91 (= (_ bv0 2) ?x132)))
 (let (($x97 (= $x91 true)))
 (let (($x236 (= $x97 true)))
 (let (($x256 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x146 (= $x256 true)))
 (let (($x69 (= $x146 true)))
 (let (($x128 (= $x69 true)))
 (let (($x140 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x142 (= $x140 true)))
 (let (($x149 (= $x142 true)))
 (let (($x162 (= $x149 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x151 (bvsub ?x203 ?x96)))
 (let (($x6 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x151) (bvult ?x203 ?x151))))
 (let (($x125 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x93 (ite $x125 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x221 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x116 (bvmul (_ bv4 64) ?x221)))
 (let ((?x133 ((_ extract 63 32) ?x116)))
 (let (($x122 (= ?x133 ?x93)))
 (let (($x231 (and $x122 $x6)))
 (let (($x86 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x299 (and $x86 $x231)))
 (let (($x205 (= true $x299)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x39 (=> $x51 $x205)))
 (let (($x220 (= $x39 true)))
 (let (($x187 (= $x220 true)))
 (let (($x48 (= $x187 true)))
 (let ((?x225 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x225)))
 (let (($x16 (= ?x121 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x191 (= $x16 true)))
 (let (($x36 (= $x191 true)))
 (let (($x179 (= $x51 true)))
 (let (($x212 (= $x179 true)))
 (let (($x144 (= $x212 true)))
 (let (($x208 (and $x144 $x36)))
 (let (($x273 (and $x208 $x48)))
 (let (($x202 (and $x273 $x162)))
 (let (($x230 (and $x202 $x128)))
 (let (($x246 (and $x230 $x236)))
 (let (($x175 (and $x246 $x59)))
 (let (($x148 (and $x175 $x243)))
 (let (($x298 (and $x148 $x305)))
 (let (($x49 (and $x298 $x186)))
 (let (($x316 (and $x49 $x302)))
 (let (($x295 (and $x316 $x244)))
 (let (($x307 (and $x295 $x293)))
 (let (($x56 (and $x307 $x255)))
 (let (($x27 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x217 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x217 (_ bv1 32))))
 (let (($x111 (and $x114 $x56)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x84 (and $x105 $x111)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x113 (and $x180 $x84)))
 (let (($x129 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x41 (and $x129 $x113)))
 (let (($x176 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd ?x203 (_ bv3 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x102 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x62)))
 (let (($x75 (or false (or false (and (and true (or $x8 $x102)) (or $x141 $x176))))))
 (let (($x224 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x75)))
 (let (($x11 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x75)))
 (let (($x65 (and $x11 $x41)))
 (let (($x150 (=> $x65 $x314)))
 (not $x150))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x66 (bvsge ?x199 (_ bv0 32))))
 (let (($x285 (= $x66 true)))
 (let (($x239 (= $x285 true)))
 (let (($x103 (forall ((input.ind-%var1589X (_ BitVec 32)) )(let ((?x101 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1589X)))
 (let ((?x76 (input.spec-%var-x-1.1.1 input.ind-%var1589X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1589X)))
 (=> $x30 (= ?x76 ?x101))))))
 ))
 (let (($x269 (forall ((input.ind-%var1588X (_ BitVec 32)) )(let (($x114 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1588X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1588X)))
 (= $x30 $x114))))
 ))
 (let (($x240 (and $x269 $x103)))
 (let (($x112 (= $x240 true)))
 (let (($x10 (forall ((input.ind-%var1583X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var1583X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x255))))
 (let ((?x101 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1583X)))
 (let (($x114 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1583X)))
 (=> $x114 (= ?x101 ?x65))))))))
 ))
 (let (($x87 (forall ((input.ind-%var1582X (_ BitVec 32)) )(let (($x274 (and (bvule (_ bv0 32) input.ind-%var1582X) (bvult input.ind-%var1582X input.dst.llvm-%n))))
 (let (($x114 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1582X)))
 (= $x114 $x274))))
 ))
 (let (($x52 (and $x87 $x10)))
 (let (($x242 (= $x52 true)))
 (let (($x23 (forall ((input.ind-%var1577X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var1577X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x255))))
 (let ((?x76 (input.spec-%var-x-1.1.1 input.ind-%var1577X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1577X)))
 (=> $x30 (= ?x76 ?x65))))))))
 ))
 (let (($x42 (forall ((input.ind-%var1576X (_ BitVec 32)) )(let (($x274 (and (bvule (_ bv0 32) input.ind-%var1576X) (bvult input.ind-%var1576X input.dst.llvm-%n))))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1576X)))
 (= $x30 $x274))))
 ))
 (let (($x314 (and $x42 $x23)))
 (let (($x150 (= $x314 true)))
 (let ((?x316 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x316)))
 (let (($x5 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x5 true)))
 (let (($x154 (= $x104 true)))
 (let (($x209 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x135 (= $x209 true)))
 (let (($x271 (= $x135 true)))
 (let (($x309 (= $x271 true)))
 (let (($x13 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x158 (= $x13 true)))
 (let (($x173 (= $x158 true)))
 (let (($x186 (= $x173 true)))
 (let ((?x319 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x319)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x264)))
 (let ((?x282 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x282)))
 (let ((?x304 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x304)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (and $x46 $x216)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x79 $x241)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x232 (and $x166 $x12)))
 (let (($x315 (not $x232)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x38 $x289)))
 (let (($x287 (and (not $x100) $x315)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x83 $x237)))
 (let (($x317 (not $x259)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x296 $x54)))
 (let (($x261 (and (not $x61) $x317)))
 (let (($x243 (and (and (and (and (and (and $x261 $x287) $x207) $x71) $x109) $x167) $x85)))
 (let (($x148 (and $x243 $x238)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x277 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x277)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x277)))
 (let (($x14 (or false (or false (and (and true (or $x37 $x70)) (or $x253 $x193))))))
 (let (($x250 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x14)))
 (let (($x22 (and $x250 $x148)))
 (let (($x297 (= $x22 true)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x182 (= $x175 true)))
 (let (($x294 (= $x182 true)))
 (let (($x147 (= $x294 true)))
 (let ((?x246 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x168 (= (_ bv0 2) ?x246)))
 (let (($x254 (= $x168 true)))
 (let (($x98 (= $x254 true)))
 (let (($x230 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (= $x230 true)))
 (let (($x132 (= $x64 true)))
 (let (($x91 (= $x132 true)))
 (let (($x202 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x256 (= $x202 true)))
 (let (($x146 (= $x256 true)))
 (let (($x69 (= $x146 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x6 (bvsub ?x203 ?x96)))
 (let (($x39 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x6) (bvult ?x203 ?x6))))
 (let (($x151 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x181 (ite $x151 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x93 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x122 (bvmul (_ bv4 64) ?x93)))
 (let ((?x137 ((_ extract 63 32) ?x122)))
 (let (($x235 (= ?x137 ?x181)))
 (let (($x220 (and $x235 $x39)))
 (let (($x133 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x187 (and $x133 $x220)))
 (let (($x48 (= true $x187)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x273 (=> $x51 $x48)))
 (let (($x140 (= $x273 true)))
 (let (($x142 (= $x140 true)))
 (let (($x149 (= $x142 true)))
 (let ((?x191 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x191)))
 (let (($x170 (= ?x36 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x196 (= $x170 true)))
 (let (($x86 (= $x196 true)))
 (let (($x115 (= $x51 true)))
 (let (($x225 (= $x115 true)))
 (let (($x121 (= $x225 true)))
 (let (($x120 (and $x121 $x86)))
 (let (($x162 (and $x120 $x149)))
 (let (($x128 (and $x162 $x69)))
 (let (($x97 (and $x128 $x91)))
 (let (($x272 (and $x97 $x98)))
 (let (($x300 (and $x272 $x147)))
 (let (($x298 (and $x300 $x305)))
 (let (($x49 (and $x298 $x186)))
 (let (($x302 (and $x49 $x309)))
 (let (($x311 (and $x302 $x154)))
 (let (($x288 (and $x311 $x150)))
 (let (($x310 (and $x288 $x242)))
 (let (($x33 (and $x310 $x112)))
 (let (($x212 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x144 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x144 (_ bv1 32))))
 (let (($x172 (and $x183 $x33)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x156 $x172)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x80 (and $x126 $x159)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x286 (and $x131 $x80)))
 (let (($x67 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd ?x203 (_ bv3 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x68 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x11 (or false (or false (and (and true (or $x21 $x68)) (or $x82 $x67))))))
 (let (($x129 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x11)))
 (let (($x53 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x11)))
 (let (($x72 (and $x53 $x286)))
 (let (($x213 (=> $x72 $x239)))
 (not $x213))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x66 (bvsge ?x199 (_ bv0 32))))
 (let (($x285 (= $x66 true)))
 (let (($x239 (= $x285 true)))
 (let (($x103 (forall ((input.ind-%var1589X (_ BitVec 32)) )(let ((?x101 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1589X)))
 (let ((?x76 (input.spec-%var-x-1.1.1 input.ind-%var1589X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1589X)))
 (=> $x30 (= ?x76 ?x101))))))
 ))
 (let (($x269 (forall ((input.ind-%var1588X (_ BitVec 32)) )(let (($x114 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1588X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1588X)))
 (= $x30 $x114))))
 ))
 (let (($x240 (and $x269 $x103)))
 (let (($x112 (= $x240 true)))
 (let (($x10 (forall ((input.ind-%var1583X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var1583X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x255))))
 (let ((?x101 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1583X)))
 (let (($x114 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1583X)))
 (=> $x114 (= ?x101 ?x65))))))))
 ))
 (let (($x87 (forall ((input.ind-%var1582X (_ BitVec 32)) )(let (($x274 (and (bvule (_ bv0 32) input.ind-%var1582X) (bvult input.ind-%var1582X input.dst.llvm-%n))))
 (let (($x114 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1582X)))
 (= $x114 $x274))))
 ))
 (let (($x52 (and $x87 $x10)))
 (let (($x242 (= $x52 true)))
 (let (($x23 (forall ((input.ind-%var1577X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var1577X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x255))))
 (let ((?x76 (input.spec-%var-x-1.1.1 input.ind-%var1577X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1577X)))
 (=> $x30 (= ?x76 ?x65))))))))
 ))
 (let (($x42 (forall ((input.ind-%var1576X (_ BitVec 32)) )(let (($x274 (and (bvule (_ bv0 32) input.ind-%var1576X) (bvult input.ind-%var1576X input.dst.llvm-%n))))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1576X)))
 (= $x30 $x274))))
 ))
 (let (($x314 (and $x42 $x23)))
 (let (($x150 (= $x314 true)))
 (let ((?x316 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x316)))
 (let (($x5 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x5 true)))
 (let (($x154 (= $x104 true)))
 (let (($x209 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x135 (= $x209 true)))
 (let (($x271 (= $x135 true)))
 (let (($x309 (= $x271 true)))
 (let (($x13 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x158 (= $x13 true)))
 (let (($x173 (= $x158 true)))
 (let (($x186 (= $x173 true)))
 (let ((?x319 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x319)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x264)))
 (let ((?x282 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x282)))
 (let ((?x304 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x304)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (and $x46 $x216)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x79 $x241)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x232 (and $x166 $x12)))
 (let (($x315 (not $x232)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x38 $x289)))
 (let (($x287 (and (not $x100) $x315)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x83 $x237)))
 (let (($x317 (not $x259)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x296 $x54)))
 (let (($x261 (and (not $x61) $x317)))
 (let (($x243 (and (and (and (and (and (and $x261 $x287) $x207) $x71) $x109) $x167) $x85)))
 (let (($x148 (and $x243 $x238)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x277 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x277)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x277)))
 (let (($x14 (or false (or false (and (and true (or $x37 $x70)) (or $x253 $x193))))))
 (let (($x250 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x14)))
 (let (($x22 (and $x250 $x148)))
 (let (($x297 (= $x22 true)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x182 (= $x175 true)))
 (let (($x294 (= $x182 true)))
 (let (($x147 (= $x294 true)))
 (let ((?x246 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x168 (= (_ bv0 2) ?x246)))
 (let (($x254 (= $x168 true)))
 (let (($x98 (= $x254 true)))
 (let (($x230 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (= $x230 true)))
 (let (($x132 (= $x64 true)))
 (let (($x91 (= $x132 true)))
 (let (($x202 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x256 (= $x202 true)))
 (let (($x146 (= $x256 true)))
 (let (($x69 (= $x146 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x6 (bvsub ?x203 ?x96)))
 (let (($x39 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x6) (bvult ?x203 ?x6))))
 (let (($x151 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x181 (ite $x151 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x93 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x122 (bvmul (_ bv4 64) ?x93)))
 (let ((?x137 ((_ extract 63 32) ?x122)))
 (let (($x235 (= ?x137 ?x181)))
 (let (($x220 (and $x235 $x39)))
 (let (($x133 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x187 (and $x133 $x220)))
 (let (($x48 (= true $x187)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x273 (=> $x51 $x48)))
 (let (($x140 (= $x273 true)))
 (let (($x142 (= $x140 true)))
 (let (($x149 (= $x142 true)))
 (let ((?x191 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x191)))
 (let (($x170 (= ?x36 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x196 (= $x170 true)))
 (let (($x86 (= $x196 true)))
 (let (($x115 (= $x51 true)))
 (let (($x225 (= $x115 true)))
 (let (($x121 (= $x225 true)))
 (let (($x120 (and $x121 $x86)))
 (let (($x162 (and $x120 $x149)))
 (let (($x128 (and $x162 $x69)))
 (let (($x97 (and $x128 $x91)))
 (let (($x272 (and $x97 $x98)))
 (let (($x300 (and $x272 $x147)))
 (let (($x298 (and $x300 $x305)))
 (let (($x49 (and $x298 $x186)))
 (let (($x302 (and $x49 $x309)))
 (let (($x311 (and $x302 $x154)))
 (let (($x288 (and $x311 $x150)))
 (let (($x310 (and $x288 $x242)))
 (let (($x33 (and $x310 $x112)))
 (let (($x212 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x144 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x144 (_ bv1 32))))
 (let (($x172 (and $x183 $x33)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x156 $x172)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x80 (and $x126 $x159)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x286 (and $x131 $x80)))
 (let (($x67 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd ?x203 (_ bv3 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x68 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x11 (or false (or false (and (and true (or $x21 $x68)) (or $x82 $x67))))))
 (let (($x129 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x11)))
 (let (($x53 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x11)))
 (let (($x72 (and $x53 $x286)))
 (let (($x213 (=> $x72 $x239)))
 (not $x213))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x214 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (bvule ?x214 (_ bv4294967294 32))))
 (let (($x228 (= $x301 true)))
 (let (($x107 (= $x228 true)))
 (let (($x185 (forall ((input.ind-%var1612X (_ BitVec 32)) )(let ((?x312 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1612X)))
 (let ((?x65 (input.spec-%var-x-1.1.1 input.ind-%var1612X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1612X)))
 (=> $x76 (= ?x65 ?x312))))))
 ))
 (let (($x252 (forall ((input.ind-%var1611X (_ BitVec 32)) )(let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1611X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1611X)))
 (= $x76 $x183))))
 ))
 (let (($x171 (and $x252 $x185)))
 (let (($x307 (= $x171 true)))
 (let (($x284 (forall ((input.ind-%var1606X (_ BitVec 32)) )(let ((?x60 (bvadd (bvmul input.ind-%var1606X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem ?x60))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv2 32))) ?x112))))
 (let ((?x312 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1606X)))
 (let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1606X)))
 (=> $x183 (= ?x312 ?x72))))))))
 ))
 (let (($x138 (forall ((input.ind-%var1605X (_ BitVec 32)) )(let (($x111 (and (bvule (_ bv0 32) input.ind-%var1605X) (bvult input.ind-%var1605X input.dst.llvm-%n))))
 (let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1605X)))
 (= $x183 $x111))))
 ))
 (let (($x94 (and $x138 $x284)))
 (let (($x15 (= $x94 true)))
 (let (($x285 (forall ((input.ind-%var1600X (_ BitVec 32)) )(let ((?x60 (bvadd (bvmul input.ind-%var1600X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem ?x60))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv2 32))) ?x112))))
 (let ((?x65 (input.spec-%var-x-1.1.1 input.ind-%var1600X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1600X)))
 (=> $x76 (= ?x65 ?x72))))))))
 ))
 (let (($x19 (forall ((input.ind-%var1599X (_ BitVec 32)) )(let (($x111 (and (bvule (_ bv0 32) input.ind-%var1599X) (bvult input.ind-%var1599X input.dst.llvm-%n))))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1599X)))
 (= $x76 $x111))))
 ))
 (let (($x239 (and $x19 $x285)))
 (let (($x213 (= $x239 true)))
 (let ((?x311 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x217 (bvneg ?x311)))
 (let (($x30 (= ?x217 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x292 (= $x30 true)))
 (let (($x266 (= $x292 true)))
 (let (($x316 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x195 (= $x316 true)))
 (let (($x5 (= $x195 true)))
 (let (($x104 (= $x5 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x135 (= $x209 true)))
 (let (($x271 (= $x135 true)))
 (let (($x309 (= $x271 true)))
 (let (($x13 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x158 (= $x13 true)))
 (let (($x173 (= $x158 true)))
 (let (($x186 (= $x173 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x167 (bvsub ?x203 ?x96)))
 (let (($x243 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x167) (bvult ?x203 ?x167))))
 (let (($x109 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x157 (ite $x109 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x304 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x216 (bvmul (_ bv4 64) ?x304)))
 (let ((?x241 ((_ extract 63 32) ?x216)))
 (let (($x282 (= ?x241 ?x157)))
 (let (($x319 (and $x282 $x243)))
 (let (($x79 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x238 (and $x79 $x319)))
 (let (($x148 (= true $x238)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (=> $x51 $x148)))
 (let (($x297 (= $x22 true)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let (($x211 (= $x51 true)))
 (let (($x207 (= $x211 true)))
 (let (($x108 (= $x207 true)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x237)))
 (let ((?x280 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x280)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (and $x47 $x14)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x267 $x250)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x320 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (and $x78 $x233)))
 (let (($x277 (not $x290)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x300 (and $x294 $x147)))
 (let (($x70 (and (not $x300) $x277)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x254 $x98)))
 (let (($x59 (not $x272)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x273 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x273 $x140)))
 (let (($x182 (and (not $x168) $x59)))
 (let (($x119 (and (and (and (and (and (and $x182 $x70) $x320) $x193) $x296) $x61) $x83)))
 (let (($x166 (and $x119 $x259)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x162)))
 (let (($x97 (or false (or false (and (and true (or $x202 $x256)) (or $x128 $x230))))))
 (let (($x246 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x97)))
 (let (($x12 (and $x246 $x166)))
 (let (($x232 (= $x12 true)))
 (let (($x315 (= $x232 true)))
 (let (($x287 (= $x315 true)))
 (let (($x299 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x205 (= $x299 true)))
 (let (($x39 (= $x205 true)))
 (let (($x220 (= $x39 true)))
 (let ((?x151 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x181 (= (_ bv0 2) ?x151)))
 (let (($x235 (= $x181 true)))
 (let (($x231 (= $x235 true)))
 (let ((?x120 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x221 (bvneg ?x120)))
 (let (($x133 (= ?x221 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x125 (= $x133 true)))
 (let (($x93 (= $x125 true)))
 (let (($x191 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x36 (= $x191 true)))
 (let (($x208 (= $x36 true)))
 (let (($x170 (= $x208 true)))
 (let (($x122 (and $x170 $x93)))
 (let (($x6 (and $x122 $x231)))
 (let (($x187 (and $x6 $x220)))
 (let (($x201 (and $x187 $x287)))
 (let (($x118 (and $x201 $x108)))
 (let (($x298 (and $x118 $x305)))
 (let (($x49 (and $x298 $x186)))
 (let (($x302 (and $x49 $x309)))
 (let (($x154 (and $x302 $x104)))
 (let (($x274 (and $x154 $x266)))
 (let (($x43 (and $x274 $x213)))
 (let (($x164 (and $x43 $x15)))
 (let (($x249 (and $x164 $x307)))
 (let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x121 (ite $x225 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x121 (_ bv1 32))))
 (let (($x123 (and $x160 $x249)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x204 (and $x27 $x123)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x257 (and $x105 $x204)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x306 (and $x163 $x257)))
 (let (($x75 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd ?x203 (_ bv3 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x141 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x53 (or false (or false (and (and true (or $x90 $x141)) (or $x188 $x75))))))
 (let (($x131 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x53)))
 (let (($x73 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x53)))
 (let (($x218 (and $x73 $x306)))
 (let (($x251 (=> $x218 $x107)))
 (not $x251))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x214 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (bvule ?x214 (_ bv4294967294 32))))
 (let (($x228 (= $x301 true)))
 (let (($x107 (= $x228 true)))
 (let (($x185 (forall ((input.ind-%var1612X (_ BitVec 32)) )(let ((?x312 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1612X)))
 (let ((?x65 (input.spec-%var-x-1.1.1 input.ind-%var1612X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1612X)))
 (=> $x76 (= ?x65 ?x312))))))
 ))
 (let (($x252 (forall ((input.ind-%var1611X (_ BitVec 32)) )(let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1611X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1611X)))
 (= $x76 $x183))))
 ))
 (let (($x171 (and $x252 $x185)))
 (let (($x307 (= $x171 true)))
 (let (($x284 (forall ((input.ind-%var1606X (_ BitVec 32)) )(let ((?x60 (bvadd (bvmul input.ind-%var1606X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem ?x60))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv2 32))) ?x112))))
 (let ((?x312 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1606X)))
 (let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1606X)))
 (=> $x183 (= ?x312 ?x72))))))))
 ))
 (let (($x138 (forall ((input.ind-%var1605X (_ BitVec 32)) )(let (($x111 (and (bvule (_ bv0 32) input.ind-%var1605X) (bvult input.ind-%var1605X input.dst.llvm-%n))))
 (let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1605X)))
 (= $x183 $x111))))
 ))
 (let (($x94 (and $x138 $x284)))
 (let (($x15 (= $x94 true)))
 (let (($x285 (forall ((input.ind-%var1600X (_ BitVec 32)) )(let ((?x60 (bvadd (bvmul input.ind-%var1600X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem ?x60))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv2 32))) ?x112))))
 (let ((?x65 (input.spec-%var-x-1.1.1 input.ind-%var1600X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1600X)))
 (=> $x76 (= ?x65 ?x72))))))))
 ))
 (let (($x19 (forall ((input.ind-%var1599X (_ BitVec 32)) )(let (($x111 (and (bvule (_ bv0 32) input.ind-%var1599X) (bvult input.ind-%var1599X input.dst.llvm-%n))))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1599X)))
 (= $x76 $x111))))
 ))
 (let (($x239 (and $x19 $x285)))
 (let (($x213 (= $x239 true)))
 (let ((?x311 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x217 (bvneg ?x311)))
 (let (($x30 (= ?x217 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x292 (= $x30 true)))
 (let (($x266 (= $x292 true)))
 (let (($x316 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x195 (= $x316 true)))
 (let (($x5 (= $x195 true)))
 (let (($x104 (= $x5 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x135 (= $x209 true)))
 (let (($x271 (= $x135 true)))
 (let (($x309 (= $x271 true)))
 (let (($x13 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x158 (= $x13 true)))
 (let (($x173 (= $x158 true)))
 (let (($x186 (= $x173 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x167 (bvsub ?x203 ?x96)))
 (let (($x243 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x167) (bvult ?x203 ?x167))))
 (let (($x109 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x157 (ite $x109 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x304 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x216 (bvmul (_ bv4 64) ?x304)))
 (let ((?x241 ((_ extract 63 32) ?x216)))
 (let (($x282 (= ?x241 ?x157)))
 (let (($x319 (and $x282 $x243)))
 (let (($x79 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x238 (and $x79 $x319)))
 (let (($x148 (= true $x238)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (=> $x51 $x148)))
 (let (($x297 (= $x22 true)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let (($x211 (= $x51 true)))
 (let (($x207 (= $x211 true)))
 (let (($x108 (= $x207 true)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x237)))
 (let ((?x280 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x280)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (and $x47 $x14)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x267 $x250)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x320 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (and $x78 $x233)))
 (let (($x277 (not $x290)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x300 (and $x294 $x147)))
 (let (($x70 (and (not $x300) $x277)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x254 $x98)))
 (let (($x59 (not $x272)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x273 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x273 $x140)))
 (let (($x182 (and (not $x168) $x59)))
 (let (($x119 (and (and (and (and (and (and $x182 $x70) $x320) $x193) $x296) $x61) $x83)))
 (let (($x166 (and $x119 $x259)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x162)))
 (let (($x97 (or false (or false (and (and true (or $x202 $x256)) (or $x128 $x230))))))
 (let (($x246 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x97)))
 (let (($x12 (and $x246 $x166)))
 (let (($x232 (= $x12 true)))
 (let (($x315 (= $x232 true)))
 (let (($x287 (= $x315 true)))
 (let (($x299 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x205 (= $x299 true)))
 (let (($x39 (= $x205 true)))
 (let (($x220 (= $x39 true)))
 (let ((?x151 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x181 (= (_ bv0 2) ?x151)))
 (let (($x235 (= $x181 true)))
 (let (($x231 (= $x235 true)))
 (let ((?x120 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x221 (bvneg ?x120)))
 (let (($x133 (= ?x221 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x125 (= $x133 true)))
 (let (($x93 (= $x125 true)))
 (let (($x191 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x36 (= $x191 true)))
 (let (($x208 (= $x36 true)))
 (let (($x170 (= $x208 true)))
 (let (($x122 (and $x170 $x93)))
 (let (($x6 (and $x122 $x231)))
 (let (($x187 (and $x6 $x220)))
 (let (($x201 (and $x187 $x287)))
 (let (($x118 (and $x201 $x108)))
 (let (($x298 (and $x118 $x305)))
 (let (($x49 (and $x298 $x186)))
 (let (($x302 (and $x49 $x309)))
 (let (($x154 (and $x302 $x104)))
 (let (($x274 (and $x154 $x266)))
 (let (($x43 (and $x274 $x213)))
 (let (($x164 (and $x43 $x15)))
 (let (($x249 (and $x164 $x307)))
 (let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x121 (ite $x225 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x121 (_ bv1 32))))
 (let (($x123 (and $x160 $x249)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x204 (and $x27 $x123)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x257 (and $x105 $x204)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x306 (and $x163 $x257)))
 (let (($x75 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd ?x203 (_ bv3 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x141 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x53 (or false (or false (and (and true (or $x90 $x141)) (or $x188 $x75))))))
 (let (($x131 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x53)))
 (let (($x73 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x53)))
 (let (($x218 (and $x73 $x306)))
 (let (($x251 (=> $x218 $x107)))
 (not $x251))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x223 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x178 (bvsge ?x223 (_ bv0 32))))
 (let (($x130 (= $x178 true)))
 (let (($x74 (= $x130 true)))
 (let (($x32 (forall ((input.ind-%var1635X (_ BitVec 32)) )(let ((?x23 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1635X)))
 (let ((?x72 (input.spec-%var-x-1.1.1 input.ind-%var1635X)))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1635X)))
 (=> $x65 (= ?x72 ?x23))))))
 ))
 (let (($x197 (forall ((input.ind-%var1634X (_ BitVec 32)) )(let (($x160 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1634X)))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1634X)))
 (= $x65 $x160))))
 ))
 (let (($x313 (and $x197 $x32)))
 (let (($x310 (= $x313 true)))
 (let (($x42 (forall ((input.ind-%var1629X (_ BitVec 32)) )(let ((?x226 (bvadd (bvmul input.ind-%var1629X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv1 32))) (select input.dst.llvm-mem ?x226))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv2 32))) ?x307))))
 (let ((?x23 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1629X)))
 (let (($x160 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1629X)))
 (=> $x160 (= ?x23 ?x218))))))))
 ))
 (let (($x84 (forall ((input.ind-%var1628X (_ BitVec 32)) )(let (($x172 (and (bvule (_ bv0 32) input.ind-%var1628X) (bvult input.ind-%var1628X input.dst.llvm-%n))))
 (let (($x160 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1628X)))
 (= $x160 $x172))))
 ))
 (let (($x113 (and $x84 $x42)))
 (let (($x57 (= $x113 true)))
 (let (($x228 (forall ((input.ind-%var1623X (_ BitVec 32)) )(let ((?x226 (bvadd (bvmul input.ind-%var1623X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv1 32))) (select input.dst.llvm-mem ?x226))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv2 32))) ?x307))))
 (let ((?x72 (input.spec-%var-x-1.1.1 input.ind-%var1623X)))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1623X)))
 (=> $x65 (= ?x72 ?x218))))))))
 ))
 (let (($x240 (forall ((input.ind-%var1622X (_ BitVec 32)) )(let (($x172 (and (bvule (_ bv0 32) input.ind-%var1622X) (bvult input.ind-%var1622X input.dst.llvm-%n))))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1622X)))
 (= $x65 $x172))))
 ))
 (let (($x107 (and $x240 $x228)))
 (let (($x251 (= $x107 true)))
 (let ((?x274 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x274)))
 (let (($x76 (= ?x144 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x56 (= $x76 true)))
 (let (($x318 (= $x56 true)))
 (let (($x311 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x217 (= $x311 true)))
 (let (($x30 (= $x217 true)))
 (let (($x292 (= $x30 true)))
 (let (($x316 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (= $x316 true)))
 (let (($x5 (= $x195 true)))
 (let (($x104 (= $x5 true)))
 (let (($x209 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x135 (= $x209 true)))
 (let (($x271 (= $x135 true)))
 (let (($x309 (= $x271 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x319 (bvsub ?x203 ?x96)))
 (let (($x297 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x319) (bvult ?x203 ?x319))))
 (let (($x264 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x85 (ite $x264 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x282 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x26 (bvmul (_ bv4 64) ?x282)))
 (let ((?x167 ((_ extract 63 32) ?x26)))
 (let (($x243 (= ?x167 ?x85)))
 (let (($x303 (and $x243 $x297)))
 (let (($x109 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x305 (and $x109 $x303)))
 (let (($x298 (= true $x305)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x13 (=> $x51 $x298)))
 (let (($x158 (= $x13 true)))
 (let (($x173 (= $x158 true)))
 (let (($x186 (= $x173 true)))
 (let (($x63 (= $x51 true)))
 (let (($x79 (= $x63 true)))
 (let (($x46 (= $x79 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x119)))
 (let ((?x280 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x280)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x250 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x296 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x250)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x289 (and $x14 $x296)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x17 $x289)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x70 $x317)))
 (let (($x320 (not $x248)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x277 (and $x233 $x290)))
 (let (($x253 (and (not $x277) $x320)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x182 $x294)))
 (let (($x300 (not $x147)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x256 $x146)))
 (let (($x78 (and (not $x59) $x300)))
 (let (($x287 (and (and (and (and (and (and $x78 $x253) $x38) $x47) $x54) $x100) $x83)))
 (let (($x201 (and $x287 $x237)))
 (let (($x273 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x230)))
 (let (($x254 (or false (or false (and (and true (or $x64 $x132)) (or $x246 $x273))))))
 (let (($x272 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x254)))
 (let (($x211 (and $x272 $x201)))
 (let (($x207 (= $x211 true)))
 (let (($x108 (= $x207 true)))
 (let (($x118 (= $x108 true)))
 (let (($x187 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x142 (= $x187 true)))
 (let (($x149 (= $x142 true)))
 (let (($x236 (= $x149 true)))
 (let ((?x6 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x299 (= (_ bv0 2) ?x6)))
 (let (($x205 (= $x299 true)))
 (let (($x39 (= $x205 true)))
 (let ((?x125 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x125)))
 (let (($x137 (= ?x93 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x151 (= $x137 true)))
 (let (($x181 (= $x151 true)))
 (let (($x196 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x86 (= $x196 true)))
 (let (($x120 (= $x86 true)))
 (let (($x221 (= $x120 true)))
 (let (($x235 (and $x221 $x181)))
 (let (($x220 (and $x235 $x39)))
 (let (($x162 (and $x220 $x236)))
 (let (($x71 (and $x162 $x118)))
 (let (($x304 (and $x71 $x46)))
 (let (($x49 (and $x304 $x186)))
 (let (($x302 (and $x49 $x309)))
 (let (($x154 (and $x302 $x104)))
 (let (($x266 (and $x154 $x292)))
 (let (($x111 (and $x266 $x318)))
 (let (($x92 (and $x111 $x251)))
 (let (($x293 (and $x92 $x57)))
 (let (($x210 (and $x293 $x310)))
 (let (($x191 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x36 (ite $x191 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x36 (_ bv1 32))))
 (let (($x219 (and $x208 $x210)))
 (let (($x212 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x255 (and $x212 $x219)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x270 (and $x156 $x255)))
 (let (($x180 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x25 (and $x180 $x270)))
 (let (($x11 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd ?x203 (_ bv3 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x82 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x141)))
 (let (($x73 (or false (or false (and (and true (or $x139 $x82)) (or $x224 $x11))))))
 (let (($x163 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x73)))
 (let (($x62 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x73)))
 (let (($x161 (and $x62 $x25)))
 (let (($x281 (=> $x161 $x74)))
 (not $x281))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x223 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x178 (bvsge ?x223 (_ bv0 32))))
 (let (($x130 (= $x178 true)))
 (let (($x74 (= $x130 true)))
 (let (($x32 (forall ((input.ind-%var1635X (_ BitVec 32)) )(let ((?x23 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1635X)))
 (let ((?x72 (input.spec-%var-x-1.1.1 input.ind-%var1635X)))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1635X)))
 (=> $x65 (= ?x72 ?x23))))))
 ))
 (let (($x197 (forall ((input.ind-%var1634X (_ BitVec 32)) )(let (($x160 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1634X)))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1634X)))
 (= $x65 $x160))))
 ))
 (let (($x313 (and $x197 $x32)))
 (let (($x310 (= $x313 true)))
 (let (($x42 (forall ((input.ind-%var1629X (_ BitVec 32)) )(let ((?x226 (bvadd (bvmul input.ind-%var1629X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv1 32))) (select input.dst.llvm-mem ?x226))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv2 32))) ?x307))))
 (let ((?x23 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1629X)))
 (let (($x160 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1629X)))
 (=> $x160 (= ?x23 ?x218))))))))
 ))
 (let (($x84 (forall ((input.ind-%var1628X (_ BitVec 32)) )(let (($x172 (and (bvule (_ bv0 32) input.ind-%var1628X) (bvult input.ind-%var1628X input.dst.llvm-%n))))
 (let (($x160 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1628X)))
 (= $x160 $x172))))
 ))
 (let (($x113 (and $x84 $x42)))
 (let (($x57 (= $x113 true)))
 (let (($x228 (forall ((input.ind-%var1623X (_ BitVec 32)) )(let ((?x226 (bvadd (bvmul input.ind-%var1623X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv1 32))) (select input.dst.llvm-mem ?x226))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv2 32))) ?x307))))
 (let ((?x72 (input.spec-%var-x-1.1.1 input.ind-%var1623X)))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1623X)))
 (=> $x65 (= ?x72 ?x218))))))))
 ))
 (let (($x240 (forall ((input.ind-%var1622X (_ BitVec 32)) )(let (($x172 (and (bvule (_ bv0 32) input.ind-%var1622X) (bvult input.ind-%var1622X input.dst.llvm-%n))))
 (let (($x65 (input.spec-%var-x-1.0.1 input.ind-%var1622X)))
 (= $x65 $x172))))
 ))
 (let (($x107 (and $x240 $x228)))
 (let (($x251 (= $x107 true)))
 (let ((?x274 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x274)))
 (let (($x76 (= ?x144 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x56 (= $x76 true)))
 (let (($x318 (= $x56 true)))
 (let (($x311 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x217 (= $x311 true)))
 (let (($x30 (= $x217 true)))
 (let (($x292 (= $x30 true)))
 (let (($x316 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (= $x316 true)))
 (let (($x5 (= $x195 true)))
 (let (($x104 (= $x5 true)))
 (let (($x209 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x135 (= $x209 true)))
 (let (($x271 (= $x135 true)))
 (let (($x309 (= $x271 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x319 (bvsub ?x203 ?x96)))
 (let (($x297 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x319) (bvult ?x203 ?x319))))
 (let (($x264 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x85 (ite $x264 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x282 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x26 (bvmul (_ bv4 64) ?x282)))
 (let ((?x167 ((_ extract 63 32) ?x26)))
 (let (($x243 (= ?x167 ?x85)))
 (let (($x303 (and $x243 $x297)))
 (let (($x109 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x305 (and $x109 $x303)))
 (let (($x298 (= true $x305)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x13 (=> $x51 $x298)))
 (let (($x158 (= $x13 true)))
 (let (($x173 (= $x158 true)))
 (let (($x186 (= $x173 true)))
 (let (($x63 (= $x51 true)))
 (let (($x79 (= $x63 true)))
 (let (($x46 (= $x79 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x119)))
 (let ((?x280 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x280)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x250 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x296 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x250)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x289 (and $x14 $x296)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x17 $x289)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x70 $x317)))
 (let (($x320 (not $x248)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x277 (and $x233 $x290)))
 (let (($x253 (and (not $x277) $x320)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x182 $x294)))
 (let (($x300 (not $x147)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x256 $x146)))
 (let (($x78 (and (not $x59) $x300)))
 (let (($x287 (and (and (and (and (and (and $x78 $x253) $x38) $x47) $x54) $x100) $x83)))
 (let (($x201 (and $x287 $x237)))
 (let (($x273 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x230)))
 (let (($x254 (or false (or false (and (and true (or $x64 $x132)) (or $x246 $x273))))))
 (let (($x272 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x254)))
 (let (($x211 (and $x272 $x201)))
 (let (($x207 (= $x211 true)))
 (let (($x108 (= $x207 true)))
 (let (($x118 (= $x108 true)))
 (let (($x187 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x142 (= $x187 true)))
 (let (($x149 (= $x142 true)))
 (let (($x236 (= $x149 true)))
 (let ((?x6 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x299 (= (_ bv0 2) ?x6)))
 (let (($x205 (= $x299 true)))
 (let (($x39 (= $x205 true)))
 (let ((?x125 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x125)))
 (let (($x137 (= ?x93 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x151 (= $x137 true)))
 (let (($x181 (= $x151 true)))
 (let (($x196 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x86 (= $x196 true)))
 (let (($x120 (= $x86 true)))
 (let (($x221 (= $x120 true)))
 (let (($x235 (and $x221 $x181)))
 (let (($x220 (and $x235 $x39)))
 (let (($x162 (and $x220 $x236)))
 (let (($x71 (and $x162 $x118)))
 (let (($x304 (and $x71 $x46)))
 (let (($x49 (and $x304 $x186)))
 (let (($x302 (and $x49 $x309)))
 (let (($x154 (and $x302 $x104)))
 (let (($x266 (and $x154 $x292)))
 (let (($x111 (and $x266 $x318)))
 (let (($x92 (and $x111 $x251)))
 (let (($x293 (and $x92 $x57)))
 (let (($x210 (and $x293 $x310)))
 (let (($x191 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x36 (ite $x191 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x36 (_ bv1 32))))
 (let (($x219 (and $x208 $x210)))
 (let (($x212 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x255 (and $x212 $x219)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x270 (and $x156 $x255)))
 (let (($x180 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x25 (and $x180 $x270)))
 (let (($x11 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd ?x203 (_ bv3 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x82 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x141)))
 (let (($x73 (or false (or false (and (and true (or $x139 $x82)) (or $x224 $x11))))))
 (let (($x163 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x73)))
 (let (($x62 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x73)))
 (let (($x161 (and $x62 $x25)))
 (let (($x281 (=> $x161 $x74)))
 (not $x281))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x31 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x179 (bvule ?x31 input.dst.llvm-%n)))
 (let (($x262 (= $x179 true)))
 (let (($x81 (= $x262 true)))
 (let (($x48 (forall ((input.ind-%var1658X (_ BitVec 32)) )(let ((?x285 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1658X)))
 (let ((?x218 (input.spec-%var-x-1.1.1 input.ind-%var1658X)))
 (let (($x72 (input.spec-%var-x-1.0.1 input.ind-%var1658X)))
 (=> $x72 (= ?x218 ?x285))))))
 ))
 (let (($x101 (forall ((input.ind-%var1657X (_ BitVec 32)) )(let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1657X)))
 (let (($x72 (input.spec-%var-x-1.0.1 input.ind-%var1657X)))
 (= $x72 $x208))))
 ))
 (let (($x206 (and $x101 $x48)))
 (let (($x164 (= $x206 true)))
 (let (($x19 (forall ((input.ind-%var1652X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1652X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x310))))
 (let ((?x285 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1652X)))
 (let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1652X)))
 (=> $x208 (= ?x285 ?x161))))))))
 ))
 (let (($x159 (forall ((input.ind-%var1651X (_ BitVec 32)) )(let (($x123 (and (bvule (_ bv0 32) input.ind-%var1651X) (bvult input.ind-%var1651X input.dst.llvm-%n))))
 (let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1651X)))
 (= $x208 $x123))))
 ))
 (let (($x80 (and $x159 $x19)))
 (let (($x52 (= $x80 true)))
 (let (($x130 (forall ((input.ind-%var1646X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1646X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x310))))
 (let ((?x218 (input.spec-%var-x-1.1.1 input.ind-%var1646X)))
 (let (($x72 (input.spec-%var-x-1.0.1 input.ind-%var1646X)))
 (=> $x72 (= ?x218 ?x161))))))))
 ))
 (let (($x171 (forall ((input.ind-%var1645X (_ BitVec 32)) )(let (($x123 (and (bvule (_ bv0 32) input.ind-%var1645X) (bvult input.ind-%var1645X input.dst.llvm-%n))))
 (let (($x72 (input.spec-%var-x-1.0.1 input.ind-%var1645X)))
 (= $x72 $x123))))
 ))
 (let (($x74 (and $x171 $x130)))
 (let (($x281 (= $x74 true)))
 (let ((?x111 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x111)))
 (let (($x65 (= ?x121 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x33 (= $x65 true)))
 (let (($x87 (= $x33 true)))
 (let (($x274 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x274 true)))
 (let (($x76 (= $x144 true)))
 (let (($x56 (= $x76 true)))
 (let (($x311 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x217 (= $x311 true)))
 (let (($x30 (= $x217 true)))
 (let (($x292 (= $x30 true)))
 (let (($x316 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x195 (= $x316 true)))
 (let (($x5 (= $x195 true)))
 (let (($x104 (= $x5 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x303 (bvsub ?x203 ?x96)))
 (let (($x158 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x303) (bvult ?x203 ?x303))))
 (let (($x148 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x22 (ite $x148 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x243 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x238 (bvmul (_ bv4 64) ?x243)))
 (let ((?x319 ((_ extract 63 32) ?x238)))
 (let (($x297 (= ?x319 ?x22)))
 (let (($x173 (and $x297 $x158)))
 (let (($x264 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x186 (and $x264 $x173)))
 (let (($x49 (= true $x186)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x209 (=> $x51 $x49)))
 (let (($x135 (= $x209 true)))
 (let (($x271 (= $x135 true)))
 (let (($x309 (= $x271 true)))
 (let (($x241 (= $x51 true)))
 (let (($x109 (= $x241 true)))
 (let (($x157 (= $x109 true)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x287)))
 (let ((?x280 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x280)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x315 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x289 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x289)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (and $x296 $x54)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x250 $x232)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x253 $x259)))
 (let (($x38 (not $x193)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x317 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x320 (and $x317 $x248)))
 (let (($x267 (and (not $x320) $x38)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x290 (and $x78 $x233)))
 (let (($x277 (not $x290)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (and $x132 $x91)))
 (let (($x70 (and (not $x300) $x277)))
 (let (($x118 (and (and (and (and (and (and $x70 $x267) $x12) $x14) $x61) $x315) $x83)))
 (let (($x71 (and $x118 $x119)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x273 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x273)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x273)))
 (let (($x182 (or false (or false (and (and true (or $x140 $x168)) (or $x272 $x256))))))
 (let (($x147 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x182)))
 (let (($x63 (and $x147 $x71)))
 (let (($x79 (= $x63 true)))
 (let (($x46 (= $x79 true)))
 (let (($x304 (= $x46 true)))
 (let (($x162 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x69 (= $x162 true)))
 (let (($x128 (= $x69 true)))
 (let (($x98 (= $x128 true)))
 (let ((?x220 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x187 (= (_ bv0 2) ?x220)))
 (let (($x142 (= $x187 true)))
 (let (($x149 (= $x142 true)))
 (let ((?x151 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x151)))
 (let (($x231 (= ?x181 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x6 (= $x231 true)))
 (let (($x299 (= $x6 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x133 (= $x116 true)))
 (let (($x125 (= $x133 true)))
 (let (($x93 (= $x125 true)))
 (let (($x205 (and $x93 $x299)))
 (let (($x236 (and $x205 $x149)))
 (let (($x230 (and $x236 $x98)))
 (let (($x216 (and $x230 $x304)))
 (let (($x282 (and $x216 $x157)))
 (let (($x302 (and $x282 $x309)))
 (let (($x154 (and $x302 $x104)))
 (let (($x266 (and $x154 $x292)))
 (let (($x318 (and $x266 $x56)))
 (let (($x172 (and $x318 $x87)))
 (let (($x174 (and $x172 $x281)))
 (let (($x242 (and $x174 $x52)))
 (let (($x244 (and $x242 $x164)))
 (let (($x196 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x86 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x86 (_ bv1 32))))
 (let (($x99 (and $x120 $x244)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x112 (and $x225 $x99)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x136 (and $x27 $x112)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x40 (and $x126 $x136)))
 (let (($x53 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd ?x203 (_ bv3 32))))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x188 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x62 (or false (or false (and (and true (or $x176 $x188)) (or $x129 $x53))))))
 (let (($x180 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x62)))
 (let (($x102 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x62)))
 (let (($x110 (and $x102 $x40)))
 (let (($x35 (=> $x110 $x81)))
 (not $x35))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x31 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x179 (bvule ?x31 input.dst.llvm-%n)))
 (let (($x262 (= $x179 true)))
 (let (($x81 (= $x262 true)))
 (let (($x48 (forall ((input.ind-%var1658X (_ BitVec 32)) )(let ((?x285 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1658X)))
 (let ((?x218 (input.spec-%var-x-1.1.1 input.ind-%var1658X)))
 (let (($x72 (input.spec-%var-x-1.0.1 input.ind-%var1658X)))
 (=> $x72 (= ?x218 ?x285))))))
 ))
 (let (($x101 (forall ((input.ind-%var1657X (_ BitVec 32)) )(let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1657X)))
 (let (($x72 (input.spec-%var-x-1.0.1 input.ind-%var1657X)))
 (= $x72 $x208))))
 ))
 (let (($x206 (and $x101 $x48)))
 (let (($x164 (= $x206 true)))
 (let (($x19 (forall ((input.ind-%var1652X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1652X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x310))))
 (let ((?x285 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1652X)))
 (let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1652X)))
 (=> $x208 (= ?x285 ?x161))))))))
 ))
 (let (($x159 (forall ((input.ind-%var1651X (_ BitVec 32)) )(let (($x123 (and (bvule (_ bv0 32) input.ind-%var1651X) (bvult input.ind-%var1651X input.dst.llvm-%n))))
 (let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1651X)))
 (= $x208 $x123))))
 ))
 (let (($x80 (and $x159 $x19)))
 (let (($x52 (= $x80 true)))
 (let (($x130 (forall ((input.ind-%var1646X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1646X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x310))))
 (let ((?x218 (input.spec-%var-x-1.1.1 input.ind-%var1646X)))
 (let (($x72 (input.spec-%var-x-1.0.1 input.ind-%var1646X)))
 (=> $x72 (= ?x218 ?x161))))))))
 ))
 (let (($x171 (forall ((input.ind-%var1645X (_ BitVec 32)) )(let (($x123 (and (bvule (_ bv0 32) input.ind-%var1645X) (bvult input.ind-%var1645X input.dst.llvm-%n))))
 (let (($x72 (input.spec-%var-x-1.0.1 input.ind-%var1645X)))
 (= $x72 $x123))))
 ))
 (let (($x74 (and $x171 $x130)))
 (let (($x281 (= $x74 true)))
 (let ((?x111 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x111)))
 (let (($x65 (= ?x121 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x33 (= $x65 true)))
 (let (($x87 (= $x33 true)))
 (let (($x274 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x274 true)))
 (let (($x76 (= $x144 true)))
 (let (($x56 (= $x76 true)))
 (let (($x311 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x217 (= $x311 true)))
 (let (($x30 (= $x217 true)))
 (let (($x292 (= $x30 true)))
 (let (($x316 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x195 (= $x316 true)))
 (let (($x5 (= $x195 true)))
 (let (($x104 (= $x5 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let ((?x303 (bvsub ?x203 ?x96)))
 (let (($x158 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x203 ?x303) (bvult ?x203 ?x303))))
 (let (($x148 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x22 (ite $x148 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x243 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x238 (bvmul (_ bv4 64) ?x243)))
 (let ((?x319 ((_ extract 63 32) ?x238)))
 (let (($x297 (= ?x319 ?x22)))
 (let (($x173 (and $x297 $x158)))
 (let (($x264 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x186 (and $x264 $x173)))
 (let (($x49 (= true $x186)))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x209 (=> $x51 $x49)))
 (let (($x135 (= $x209 true)))
 (let (($x271 (= $x135 true)))
 (let (($x309 (= $x271 true)))
 (let (($x241 (= $x51 true)))
 (let (($x109 (= $x241 true)))
 (let (($x157 (= $x109 true)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x287)))
 (let ((?x280 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x280)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x315 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x289 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x289)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (and $x296 $x54)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x250 $x232)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x253 $x259)))
 (let (($x38 (not $x193)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x317 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x320 (and $x317 $x248)))
 (let (($x267 (and (not $x320) $x38)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x290 (and $x78 $x233)))
 (let (($x277 (not $x290)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (and $x132 $x91)))
 (let (($x70 (and (not $x300) $x277)))
 (let (($x118 (and (and (and (and (and (and $x70 $x267) $x12) $x14) $x61) $x315) $x83)))
 (let (($x71 (and $x118 $x119)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x273 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x273)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x273)))
 (let (($x182 (or false (or false (and (and true (or $x140 $x168)) (or $x272 $x256))))))
 (let (($x147 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x182)))
 (let (($x63 (and $x147 $x71)))
 (let (($x79 (= $x63 true)))
 (let (($x46 (= $x79 true)))
 (let (($x304 (= $x46 true)))
 (let (($x162 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x69 (= $x162 true)))
 (let (($x128 (= $x69 true)))
 (let (($x98 (= $x128 true)))
 (let ((?x220 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x187 (= (_ bv0 2) ?x220)))
 (let (($x142 (= $x187 true)))
 (let (($x149 (= $x142 true)))
 (let ((?x151 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x151)))
 (let (($x231 (= ?x181 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x6 (= $x231 true)))
 (let (($x299 (= $x6 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x133 (= $x116 true)))
 (let (($x125 (= $x133 true)))
 (let (($x93 (= $x125 true)))
 (let (($x205 (and $x93 $x299)))
 (let (($x236 (and $x205 $x149)))
 (let (($x230 (and $x236 $x98)))
 (let (($x216 (and $x230 $x304)))
 (let (($x282 (and $x216 $x157)))
 (let (($x302 (and $x282 $x309)))
 (let (($x154 (and $x302 $x104)))
 (let (($x266 (and $x154 $x292)))
 (let (($x318 (and $x266 $x56)))
 (let (($x172 (and $x318 $x87)))
 (let (($x174 (and $x172 $x281)))
 (let (($x242 (and $x174 $x52)))
 (let (($x244 (and $x242 $x164)))
 (let (($x196 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x86 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x86 (_ bv1 32))))
 (let (($x99 (and $x120 $x244)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x112 (and $x225 $x99)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x136 (and $x27 $x112)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x40 (and $x126 $x136)))
 (let (($x53 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd ?x203 (_ bv3 32))))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x188 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x62 (or false (or false (and (and true (or $x176 $x188)) (or $x129 $x53))))))
 (let (($x180 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x62)))
 (let (($x102 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x62)))
 (let (($x110 (and $x102 $x40)))
 (let (($x35 (=> $x110 $x81)))
 (not $x35))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (not $x51)))
 (let (($x16 (= $x106 false)))
 (let (($x314 (= $x16 true)))
 (let (($x92 (forall ((input.ind-%var1681X (_ BitVec 32)) )(let ((?x288 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1681X)))
 (let ((?x274 (input.spec-%var-x-1.1.1 input.ind-%var1681X)))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1681X)))
 (=> $x135 (= ?x274 ?x288))))))
 ))
 (let (($x103 (forall ((input.ind-%var1680X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1680X)))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1680X)))
 (= $x135 $x174))))
 ))
 (let (($x160 (and $x103 $x92)))
 (let (($x251 (= $x160 true)))
 (let (($x18 (forall ((input.ind-%var1675X (_ BitVec 32)) )(let ((?x301 (bvadd (bvmul input.ind-%var1675X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x25))))
 (let ((?x288 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1675X)))
 (let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1675X)))
 (=> $x174 (= ?x288 ?x41))))))))
 ))
 (let (($x19 (forall ((input.ind-%var1674X (_ BitVec 32)) )(let (($x154 (and (bvule (_ bv0 32) input.ind-%var1674X) (bvult input.ind-%var1674X input.dst.llvm-%n))))
 (let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1674X)))
 (= $x174 $x154))))
 ))
 (let (($x184 (and $x19 $x18)))
 (let (($x64 (= $x184 true)))
 (let (($x161 (forall ((input.ind-%var1669X (_ BitVec 32)) )(let ((?x301 (bvadd (bvmul input.ind-%var1669X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x25))))
 (let ((?x274 (input.spec-%var-x-1.1.1 input.ind-%var1669X)))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1669X)))
 (=> $x135 (= ?x274 ?x41))))))))
 ))
 (let (($x217 (forall ((input.ind-%var1668X (_ BitVec 32)) )(let (($x154 (and (bvule (_ bv0 32) input.ind-%var1668X) (bvult input.ind-%var1668X input.dst.llvm-%n))))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1668X)))
 (= $x135 $x154))))
 ))
 (let (($x223 (and $x217 $x161)))
 (let (($x178 (= $x223 true)))
 (let ((?x305 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x303 (bvneg ?x305)))
 (let (($x298 (= ?x303 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x298 true)))
 (let (($x158 (= $x13 true)))
 (let (($x238 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x319 (= $x238 true)))
 (let (($x148 (= $x319 true)))
 (let (($x22 (= $x148 true)))
 (let (($x26 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x167 (= $x26 true)))
 (let (($x264 (= $x167 true)))
 (let (($x85 (= $x264 true)))
 (let (($x216 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x241 (= $x216 true)))
 (let (($x109 (= $x241 true)))
 (let (($x157 (= $x109 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x207)))
 (let ((?x232 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x232)))
 (let ((?x289 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x289)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (and $x17 $x211)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x201 $x250)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x320 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (and $x320 $x166)))
 (let (($x259 (not $x253)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x70 $x317)))
 (let (($x38 (and (not $x248) $x259)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x300 $x261)))
 (let (($x233 (not $x78)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x230 $x97)))
 (let (($x277 (and (not $x91) $x233)))
 (let (($x287 (and (and (and (and (and (and $x277 $x38) $x237) $x12) $x296) $x54) $x61)))
 (let (($x119 (and $x287 $x100)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x273 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x273)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x273)))
 (let (($x182 (or false (or false (and (and true (or $x140 $x168)) (or $x272 $x256))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x182)))
 (let (($x71 (and $x132 $x119)))
 (let (($x63 (= $x71 true)))
 (let (($x79 (= $x63 true)))
 (let (($x46 (= $x79 true)))
 (let (($x149 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x236 (= $x149 true)))
 (let (($x162 (= $x236 true)))
 (let (($x69 (= $x162 true)))
 (let ((?x205 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x39 (= (_ bv0 2) ?x205)))
 (let (($x220 (= $x39 true)))
 (let (($x187 (= $x220 true)))
 (let ((?x122 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x137 (bvneg ?x122)))
 (let (($x181 (= ?x137 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x235 (= $x181 true)))
 (let (($x231 (= $x235 true)))
 (let (($x120 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x221 (= $x120 true)))
 (let (($x116 (= $x221 true)))
 (let (($x133 (= $x116 true)))
 (let (($x6 (and $x133 $x231)))
 (let (($x142 (and $x6 $x187)))
 (let (($x128 (and $x142 $x69)))
 (let (($x304 (and $x128 $x46)))
 (let (($x282 (and $x304 $x157)))
 (let (($x243 (and $x282 $x85)))
 (let (($x297 (and $x243 $x22)))
 (let (($x173 (and $x297 $x158)))
 (let (($x130 (and $x173 $x178)))
 (let (($x170 (and $x130 $x64)))
 (let (($x20 (and $x170 $x251)))
 (let (($x191 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x265 (and $x191 $x20)))
 (let (($x212 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x57 (and $x212 $x265)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x229 (and $x105 $x57)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let (($x73 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd ?x203 (_ bv3 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x224 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x188)))
 (let (($x102 (or false (or false (and (and true (or $x67 $x224)) (or $x131 $x73))))))
 (let (($x126 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x102)))
 (let (($x68 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x102)))
 (let (($x60 (and $x68 $x229)))
 (let (($x284 (=> $x60 $x314)))
 (not $x284))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (not $x51)))
 (let (($x16 (= $x106 false)))
 (let (($x314 (= $x16 true)))
 (let (($x92 (forall ((input.ind-%var1681X (_ BitVec 32)) )(let ((?x288 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1681X)))
 (let ((?x274 (input.spec-%var-x-1.1.1 input.ind-%var1681X)))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1681X)))
 (=> $x135 (= ?x274 ?x288))))))
 ))
 (let (($x103 (forall ((input.ind-%var1680X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1680X)))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1680X)))
 (= $x135 $x174))))
 ))
 (let (($x160 (and $x103 $x92)))
 (let (($x251 (= $x160 true)))
 (let (($x18 (forall ((input.ind-%var1675X (_ BitVec 32)) )(let ((?x301 (bvadd (bvmul input.ind-%var1675X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x25))))
 (let ((?x288 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1675X)))
 (let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1675X)))
 (=> $x174 (= ?x288 ?x41))))))))
 ))
 (let (($x19 (forall ((input.ind-%var1674X (_ BitVec 32)) )(let (($x154 (and (bvule (_ bv0 32) input.ind-%var1674X) (bvult input.ind-%var1674X input.dst.llvm-%n))))
 (let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1674X)))
 (= $x174 $x154))))
 ))
 (let (($x184 (and $x19 $x18)))
 (let (($x64 (= $x184 true)))
 (let (($x161 (forall ((input.ind-%var1669X (_ BitVec 32)) )(let ((?x301 (bvadd (bvmul input.ind-%var1669X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x25))))
 (let ((?x274 (input.spec-%var-x-1.1.1 input.ind-%var1669X)))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1669X)))
 (=> $x135 (= ?x274 ?x41))))))))
 ))
 (let (($x217 (forall ((input.ind-%var1668X (_ BitVec 32)) )(let (($x154 (and (bvule (_ bv0 32) input.ind-%var1668X) (bvult input.ind-%var1668X input.dst.llvm-%n))))
 (let (($x135 (input.spec-%var-x-1.0.1 input.ind-%var1668X)))
 (= $x135 $x154))))
 ))
 (let (($x223 (and $x217 $x161)))
 (let (($x178 (= $x223 true)))
 (let ((?x305 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x303 (bvneg ?x305)))
 (let (($x298 (= ?x303 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x298 true)))
 (let (($x158 (= $x13 true)))
 (let (($x238 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x319 (= $x238 true)))
 (let (($x148 (= $x319 true)))
 (let (($x22 (= $x148 true)))
 (let (($x26 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x167 (= $x26 true)))
 (let (($x264 (= $x167 true)))
 (let (($x85 (= $x264 true)))
 (let (($x216 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x241 (= $x216 true)))
 (let (($x109 (= $x241 true)))
 (let (($x157 (= $x109 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x207)))
 (let ((?x232 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x232)))
 (let ((?x289 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x289)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (and $x17 $x211)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x201 $x250)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x320 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (and $x320 $x166)))
 (let (($x259 (not $x253)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x70 $x317)))
 (let (($x38 (and (not $x248) $x259)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x300 $x261)))
 (let (($x233 (not $x78)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x230 $x97)))
 (let (($x277 (and (not $x91) $x233)))
 (let (($x287 (and (and (and (and (and (and $x277 $x38) $x237) $x12) $x296) $x54) $x61)))
 (let (($x119 (and $x287 $x100)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x273 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x273)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x273)))
 (let (($x182 (or false (or false (and (and true (or $x140 $x168)) (or $x272 $x256))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x182)))
 (let (($x71 (and $x132 $x119)))
 (let (($x63 (= $x71 true)))
 (let (($x79 (= $x63 true)))
 (let (($x46 (= $x79 true)))
 (let (($x149 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x236 (= $x149 true)))
 (let (($x162 (= $x236 true)))
 (let (($x69 (= $x162 true)))
 (let ((?x205 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x39 (= (_ bv0 2) ?x205)))
 (let (($x220 (= $x39 true)))
 (let (($x187 (= $x220 true)))
 (let ((?x122 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x137 (bvneg ?x122)))
 (let (($x181 (= ?x137 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x235 (= $x181 true)))
 (let (($x231 (= $x235 true)))
 (let (($x120 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x221 (= $x120 true)))
 (let (($x116 (= $x221 true)))
 (let (($x133 (= $x116 true)))
 (let (($x6 (and $x133 $x231)))
 (let (($x142 (and $x6 $x187)))
 (let (($x128 (and $x142 $x69)))
 (let (($x304 (and $x128 $x46)))
 (let (($x282 (and $x304 $x157)))
 (let (($x243 (and $x282 $x85)))
 (let (($x297 (and $x243 $x22)))
 (let (($x173 (and $x297 $x158)))
 (let (($x130 (and $x173 $x178)))
 (let (($x170 (and $x130 $x64)))
 (let (($x20 (and $x170 $x251)))
 (let (($x191 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x265 (and $x191 $x20)))
 (let (($x212 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x57 (and $x212 $x265)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x229 (and $x105 $x57)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let (($x73 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd ?x203 (_ bv3 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x224 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x188)))
 (let (($x102 (or false (or false (and (and true (or $x67 $x224)) (or $x131 $x73))))))
 (let (($x126 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x102)))
 (let (($x68 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x102)))
 (let (($x60 (and $x68 $x229)))
 (let (($x284 (=> $x60 $x314)))
 (not $x284))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x6c68937c)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x6c68937c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x66df8d98)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8b12ae9c)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x6c68937c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8b12ae9f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x66df8d9b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8b12ae9c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x66df8d98)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!8 (bvmul #x00000004 x!0)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x6c68937c x!0)
         (ite (bvule #x6c68937d x!0) #x6c68937d #x6c68937c)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!8 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x6146f8e2)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x6146f8e2)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x6146f8e2)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x6146f8e2 x!0)
         (ite (bvule #x6146f8e3 x!0) #x6146f8e3 #x6146f8e2)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!8 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!8 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-1.0.1 x!0) (input.spec-%var-x-1.1.1 x!0) a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x262 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x42 (ite $x262 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (= ?x42 (_ bv0 32))))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (or $x51 $x226)))
 (let (($x114 (= $x113 true)))
 (let (($x257 (= $x114 true)))
 (let (($x185 (forall ((input.ind-%var1732X (_ BitVec 32)) )(let ((?x249 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1732X)))
 (let ((?x25 (input.spec-%var-x-1.1.1 input.ind-%var1732X)))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1732X)))
 (=> $x311 (= ?x25 ?x249))))))
 ))
 (let (($x136 (forall ((input.ind-%var1731X (_ BitVec 32)) )(let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1731X)))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1731X)))
 (= $x311 $x208))))
 ))
 (let (($x66 (and $x136 $x185)))
 (let (($x95 (= $x66 true)))
 (let (($x286 (forall ((input.ind-%var1726X (_ BitVec 32)) )(let ((?x204 (bvadd (bvmul input.ind-%var1726X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem ?x204))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv2 32))) ?x92))))
 (let ((?x249 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1726X)))
 (let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1726X)))
 (=> $x208 (= ?x249 ?x229))))))))
 ))
 (let (($x309 (forall ((input.ind-%var1725X (_ BitVec 32)) )(let (($x87 (and (bvule (_ bv0 32) input.ind-%var1725X) (bvult input.ind-%var1725X input.dst.llvm-%n))))
 (let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1725X)))
 (= $x208 $x87))))
 ))
 (let (($x40 (and $x309 $x286)))
 (let (($x110 (= $x40 true)))
 (let (($x16 (forall ((input.ind-%var1720X (_ BitVec 32)) )(let ((?x204 (bvadd (bvmul input.ind-%var1720X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem ?x204))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv2 32))) ?x92))))
 (let ((?x25 (input.spec-%var-x-1.1.1 input.ind-%var1720X)))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1720X)))
 (=> $x311 (= ?x25 ?x229))))))))
 ))
 (let (($x210 (forall ((input.ind-%var1719X (_ BitVec 32)) )(let (($x87 (and (bvule (_ bv0 32) input.ind-%var1719X) (bvult input.ind-%var1719X input.dst.llvm-%n))))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1719X)))
 (= $x311 $x87))))
 ))
 (let (($x314 (and $x210 $x16)))
 (let (($x284 (= $x314 true)))
 (let ((?x298 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x298)))
 (let (($x158 (= ?x13 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x173 (= $x158 true)))
 (let (($x209 (= $x173 true)))
 (let (($x148 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x22 (= $x148 true)))
 (let (($x297 (= $x22 true)))
 (let (($x305 (= $x297 true)))
 (let (($x264 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x85 (= $x264 true)))
 (let (($x243 (= $x85 true)))
 (let (($x238 (= $x243 true)))
 (let (($x109 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x157 (= $x109 true)))
 (let (($x282 (= $x157 true)))
 (let (($x26 (= $x282 true)))
 (let (($x79 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x46 (= $x79 true)))
 (let (($x304 (= $x46 true)))
 (let (($x216 (= $x304 true)))
 (let (($x207 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x100 (= $x207 true)))
 (let (($x119 (= $x100 true)))
 (let (($x71 (= $x119 true)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x47)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x237)))
 (let ((?x315 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x315)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x166)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (and $x320 $x253)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x193 $x259)))
 (let (($x248 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x300 (and $x91 $x290)))
 (let (($x261 (not $x300)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x132 $x230)))
 (let (($x233 (and (not $x97) $x261)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x272 $x256)))
 (let (($x59 (not $x146)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x205 $x39)))
 (let (($x182 (and (not $x254) $x59)))
 (let (($x250 (and (and (and (and (and (and $x182 $x233) $x70) $x248) $x38) $x267) $x108)))
 (let (($x296 (and $x250 $x12)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x236 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x140 (or false (or false (and (and true (or $x149 $x236)) (or $x128 $x246))))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x140)))
 (let (($x83 (and $x175 $x296)))
 (let (($x289 (= $x83 true)))
 (let (($x54 (= $x289 true)))
 (let (($x118 (= $x54 true)))
 (let ((?x151 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x181 (= (_ bv0 2) ?x151)))
 (let (($x235 (= $x181 true)))
 (let (($x231 (= $x235 true)))
 (let ((?x221 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x221)))
 (let (($x125 (= ?x116 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x125 true)))
 (let (($x122 (= $x93 true)))
 (let (($x6 (and $x122 $x231)))
 (let (($x232 (and $x6 $x118)))
 (let (($x63 (and $x232 $x71)))
 (let (($x241 (and $x63 $x216)))
 (let (($x167 (and $x241 $x26)))
 (let (($x319 (and $x167 $x238)))
 (let (($x303 (and $x319 $x305)))
 (let (($x135 (and $x303 $x209)))
 (let (($x240 (and $x135 $x284)))
 (let (($x99 (and $x240 $x110)))
 (let (($x292 (and $x99 $x95)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x196 $x292)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x179 (and $x225 $x171)))
 (let (($x156 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x156 $x179)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let (($x62 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x224 (bvadd ?x203 (_ bv3 32))))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x224)))
 (let (($x129 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x224)))
 (let (($x68 (or false (or false (and (and true (or $x75 $x129)) (or $x163 $x62))))))
 (let (($x105 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x68)))
 (let (($x141 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x68)))
 (let (($x52 (and $x141 $x169)))
 (let (($x94 (=> $x52 $x257)))
 (not $x94)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x262 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x42 (ite $x262 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (= ?x42 (_ bv0 32))))
 (let (($x51 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (or $x51 $x226)))
 (let (($x114 (= $x113 true)))
 (let (($x257 (= $x114 true)))
 (let (($x185 (forall ((input.ind-%var1732X (_ BitVec 32)) )(let ((?x249 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1732X)))
 (let ((?x25 (input.spec-%var-x-1.1.1 input.ind-%var1732X)))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1732X)))
 (=> $x311 (= ?x25 ?x249))))))
 ))
 (let (($x136 (forall ((input.ind-%var1731X (_ BitVec 32)) )(let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1731X)))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1731X)))
 (= $x311 $x208))))
 ))
 (let (($x66 (and $x136 $x185)))
 (let (($x95 (= $x66 true)))
 (let (($x286 (forall ((input.ind-%var1726X (_ BitVec 32)) )(let ((?x204 (bvadd (bvmul input.ind-%var1726X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem ?x204))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv2 32))) ?x92))))
 (let ((?x249 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1726X)))
 (let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1726X)))
 (=> $x208 (= ?x249 ?x229))))))))
 ))
 (let (($x309 (forall ((input.ind-%var1725X (_ BitVec 32)) )(let (($x87 (and (bvule (_ bv0 32) input.ind-%var1725X) (bvult input.ind-%var1725X input.dst.llvm-%n))))
 (let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1725X)))
 (= $x208 $x87))))
 ))
 (let (($x40 (and $x309 $x286)))
 (let (($x110 (= $x40 true)))
 (let (($x16 (forall ((input.ind-%var1720X (_ BitVec 32)) )(let ((?x204 (bvadd (bvmul input.ind-%var1720X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem ?x204))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv2 32))) ?x92))))
 (let ((?x25 (input.spec-%var-x-1.1.1 input.ind-%var1720X)))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1720X)))
 (=> $x311 (= ?x25 ?x229))))))))
 ))
 (let (($x210 (forall ((input.ind-%var1719X (_ BitVec 32)) )(let (($x87 (and (bvule (_ bv0 32) input.ind-%var1719X) (bvult input.ind-%var1719X input.dst.llvm-%n))))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1719X)))
 (= $x311 $x87))))
 ))
 (let (($x314 (and $x210 $x16)))
 (let (($x284 (= $x314 true)))
 (let ((?x298 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x298)))
 (let (($x158 (= ?x13 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x173 (= $x158 true)))
 (let (($x209 (= $x173 true)))
 (let (($x148 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x22 (= $x148 true)))
 (let (($x297 (= $x22 true)))
 (let (($x305 (= $x297 true)))
 (let (($x264 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x85 (= $x264 true)))
 (let (($x243 (= $x85 true)))
 (let (($x238 (= $x243 true)))
 (let (($x109 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x157 (= $x109 true)))
 (let (($x282 (= $x157 true)))
 (let (($x26 (= $x282 true)))
 (let (($x79 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x46 (= $x79 true)))
 (let (($x304 (= $x46 true)))
 (let (($x216 (= $x304 true)))
 (let (($x207 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x100 (= $x207 true)))
 (let (($x119 (= $x100 true)))
 (let (($x71 (= $x119 true)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x47)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x237)))
 (let ((?x315 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x315)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x166)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (and $x320 $x253)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x193 $x259)))
 (let (($x248 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x300 (and $x91 $x290)))
 (let (($x261 (not $x300)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x132 $x230)))
 (let (($x233 (and (not $x97) $x261)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x272 $x256)))
 (let (($x59 (not $x146)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x205 $x39)))
 (let (($x182 (and (not $x254) $x59)))
 (let (($x250 (and (and (and (and (and (and $x182 $x233) $x70) $x248) $x38) $x267) $x108)))
 (let (($x296 (and $x250 $x12)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x236 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x140 (or false (or false (and (and true (or $x149 $x236)) (or $x128 $x246))))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x140)))
 (let (($x83 (and $x175 $x296)))
 (let (($x289 (= $x83 true)))
 (let (($x54 (= $x289 true)))
 (let (($x118 (= $x54 true)))
 (let ((?x151 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x181 (= (_ bv0 2) ?x151)))
 (let (($x235 (= $x181 true)))
 (let (($x231 (= $x235 true)))
 (let ((?x221 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x221)))
 (let (($x125 (= ?x116 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x125 true)))
 (let (($x122 (= $x93 true)))
 (let (($x6 (and $x122 $x231)))
 (let (($x232 (and $x6 $x118)))
 (let (($x63 (and $x232 $x71)))
 (let (($x241 (and $x63 $x216)))
 (let (($x167 (and $x241 $x26)))
 (let (($x319 (and $x167 $x238)))
 (let (($x303 (and $x319 $x305)))
 (let (($x135 (and $x303 $x209)))
 (let (($x240 (and $x135 $x284)))
 (let (($x99 (and $x240 $x110)))
 (let (($x292 (and $x99 $x95)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x196 $x292)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x179 (and $x225 $x171)))
 (let (($x156 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x156 $x179)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x96)))
 (let (($x62 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x224 (bvadd ?x203 (_ bv3 32))))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x224)))
 (let (($x129 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x224)))
 (let (($x68 (or false (or false (and (and true (or $x75 $x129)) (or $x163 $x62))))))
 (let (($x105 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x68)))
 (let (($x141 (=> (and $x51 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x68)))
 (let (($x52 (and $x141 $x169)))
 (let (($x94 (=> $x52 $x257)))
 (not $x94)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x164 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x214 (= $x164 true)))
 (let (($x301 (= $x214 true)))
 (let (($x65 (forall ((input.ind-%var1755X (_ BitVec 32)) )(let ((?x299 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1755X)))
 (let ((?x265 (input.spec-%var-x-1.1.1 input.ind-%var1755X)))
 (let (($x173 (input.spec-%var-x-1.0.1 input.ind-%var1755X)))
 (=> $x173 (= ?x265 ?x299))))))
 ))
 (let (($x144 (forall ((input.ind-%var1754X (_ BitVec 32)) )(let (($x139 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1754X)))
 (let (($x173 (input.spec-%var-x-1.0.1 input.ind-%var1754X)))
 (= $x173 $x139))))
 ))
 (let (($x111 (and $x144 $x65)))
 (let (($x121 (= $x111 true)))
 (let (($x178 (forall ((input.ind-%var1749X (_ BitVec 32)) )(let ((?x49 (bvadd (bvmul input.ind-%var1749X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x110))))
 (let ((?x299 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1749X)))
 (let (($x139 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1749X)))
 (=> $x139 (= ?x299 ?x185))))))))
 ))
 (let (($x94 (forall ((input.ind-%var1748X (_ BitVec 32)) )(let (($x84 (and (bvule (_ bv0 32) input.ind-%var1748X) (bvult input.ind-%var1748X input.dst.llvm-%n))))
 (let (($x139 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1748X)))
 (= $x139 $x84))))
 ))
 (let (($x161 (and $x94 $x178)))
 (let (($x130 (= $x161 true)))
 (let (($x292 (forall ((input.ind-%var1743X (_ BitVec 32)) )(let ((?x49 (bvadd (bvmul input.ind-%var1743X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x110))))
 (let ((?x265 (input.spec-%var-x-1.1.1 input.ind-%var1743X)))
 (let (($x173 (input.spec-%var-x-1.0.1 input.ind-%var1743X)))
 (=> $x173 (= ?x265 ?x185))))))))
 ))
 (let (($x25 (forall ((input.ind-%var1742X (_ BitVec 32)) )(let (($x84 (and (bvule (_ bv0 32) input.ind-%var1742X) (bvult input.ind-%var1742X input.dst.llvm-%n))))
 (let (($x173 (input.spec-%var-x-1.0.1 input.ind-%var1742X)))
 (= $x173 $x84))))
 ))
 (let (($x171 (and $x25 $x292)))
 (let (($x179 (= $x171 true)))
 (let ((?x319 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x319)))
 (let (($x297 (= ?x148 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x305 (= $x297 true)))
 (let (($x303 (= $x305 true)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x63)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x119)))
 (let ((?x207 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x207)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x54)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (and $x83 $x118)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x287 (and $x296 $x232)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x315 (and $x38 $x14)))
 (let (($x267 (not $x315)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (and $x166 $x253)))
 (let (($x237 (and (not $x259) $x267)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (and $x201 $x317)))
 (let (($x17 (not $x248)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x175 $x205)))
 (let (($x320 (and (not $x70) $x17)))
 (let (($x157 (and (and (and (and (and (and $x320 $x237) $x250) $x12) $x287) $x100) $x71)))
 (let (($x282 (and $x157 $x79)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x256 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x256)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x256)))
 (let (($x233 (or false (or false (and (and true (or $x146 $x59)) (or $x78 $x91))))))
 (let (($x277 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x233)))
 (let (($x26 (and $x277 $x282)))
 (let (($x167 (= $x26 true)))
 (let (($x264 (= $x167 true)))
 (let (($x85 (= $x264 true)))
 (let (($x69 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x128 (= $x69 true)))
 (let (($x246 (= $x128 true)))
 (let (($x294 (= $x246 true)))
 (let (($x168 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x142 (= $x168 true)))
 (let (($x149 (= $x142 true)))
 (let (($x236 (= $x149 true)))
 (let ((?x235 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x231 (= (_ bv0 2) ?x235)))
 (let (($x6 (= $x231 true)))
 (let (($x220 (= $x6 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x125 (= $x133 true)))
 (let (($x93 (= $x125 true)))
 (let (($x122 (= $x93 true)))
 (let (($x191 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x196 (= $x191 true)))
 (let (($x120 (= $x196 true)))
 (let (($x221 (= $x120 true)))
 (let ((?x141 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x141)))
 (let (($x156 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x27 (= $x156 true)))
 (let (($x212 (= $x27 true)))
 (let (($x62 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x180 (= $x62 true)))
 (let (($x102 (= $x180 true)))
 (let (($x126 (= $x102 true)))
 (let (($x129 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x11 (not $x129)))
 (let (($x131 (= $x11 true)))
 (let (($x53 (= $x131 true)))
 (let (($x163 (= $x53 true)))
 (let (($x68 (and $x163 $x126)))
 (let (($x225 (and $x68 $x212)))
 (let (($x116 (and $x225 $x221)))
 (let (($x137 (and $x116 $x122)))
 (let (($x187 (and $x137 $x220)))
 (let (($x162 (and $x187 $x236)))
 (let (($x147 (and $x162 $x294)))
 (let (($x243 (and $x147 $x85)))
 (let (($x298 (and $x243 $x303)))
 (let (($x169 (and $x298 $x179)))
 (let (($x288 (and $x169 $x130)))
 (let (($x33 (and $x288 $x121)))
 (let (($x188 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x176 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x176 (_ bv0 32))))
 (let (($x80 (and $x224 $x33)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x9 (and $x203 $x80)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x239 (and $x145 $x9)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x112 (and $x77 $x239)))
 (let (($x98 (=> $x112 $x301)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x164 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x214 (= $x164 true)))
 (let (($x301 (= $x214 true)))
 (let (($x65 (forall ((input.ind-%var1755X (_ BitVec 32)) )(let ((?x299 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1755X)))
 (let ((?x265 (input.spec-%var-x-1.1.1 input.ind-%var1755X)))
 (let (($x173 (input.spec-%var-x-1.0.1 input.ind-%var1755X)))
 (=> $x173 (= ?x265 ?x299))))))
 ))
 (let (($x144 (forall ((input.ind-%var1754X (_ BitVec 32)) )(let (($x139 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1754X)))
 (let (($x173 (input.spec-%var-x-1.0.1 input.ind-%var1754X)))
 (= $x173 $x139))))
 ))
 (let (($x111 (and $x144 $x65)))
 (let (($x121 (= $x111 true)))
 (let (($x178 (forall ((input.ind-%var1749X (_ BitVec 32)) )(let ((?x49 (bvadd (bvmul input.ind-%var1749X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x110))))
 (let ((?x299 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1749X)))
 (let (($x139 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1749X)))
 (=> $x139 (= ?x299 ?x185))))))))
 ))
 (let (($x94 (forall ((input.ind-%var1748X (_ BitVec 32)) )(let (($x84 (and (bvule (_ bv0 32) input.ind-%var1748X) (bvult input.ind-%var1748X input.dst.llvm-%n))))
 (let (($x139 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1748X)))
 (= $x139 $x84))))
 ))
 (let (($x161 (and $x94 $x178)))
 (let (($x130 (= $x161 true)))
 (let (($x292 (forall ((input.ind-%var1743X (_ BitVec 32)) )(let ((?x49 (bvadd (bvmul input.ind-%var1743X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x110))))
 (let ((?x265 (input.spec-%var-x-1.1.1 input.ind-%var1743X)))
 (let (($x173 (input.spec-%var-x-1.0.1 input.ind-%var1743X)))
 (=> $x173 (= ?x265 ?x185))))))))
 ))
 (let (($x25 (forall ((input.ind-%var1742X (_ BitVec 32)) )(let (($x84 (and (bvule (_ bv0 32) input.ind-%var1742X) (bvult input.ind-%var1742X input.dst.llvm-%n))))
 (let (($x173 (input.spec-%var-x-1.0.1 input.ind-%var1742X)))
 (= $x173 $x84))))
 ))
 (let (($x171 (and $x25 $x292)))
 (let (($x179 (= $x171 true)))
 (let ((?x319 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x319)))
 (let (($x297 (= ?x148 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x305 (= $x297 true)))
 (let (($x303 (= $x305 true)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x63)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x119)))
 (let ((?x207 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x207)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x54)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (and $x83 $x118)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x287 (and $x296 $x232)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x315 (and $x38 $x14)))
 (let (($x267 (not $x315)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (and $x166 $x253)))
 (let (($x237 (and (not $x259) $x267)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (and $x201 $x317)))
 (let (($x17 (not $x248)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x175 $x205)))
 (let (($x320 (and (not $x70) $x17)))
 (let (($x157 (and (and (and (and (and (and $x320 $x237) $x250) $x12) $x287) $x100) $x71)))
 (let (($x282 (and $x157 $x79)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x256 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x256)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x256)))
 (let (($x233 (or false (or false (and (and true (or $x146 $x59)) (or $x78 $x91))))))
 (let (($x277 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x233)))
 (let (($x26 (and $x277 $x282)))
 (let (($x167 (= $x26 true)))
 (let (($x264 (= $x167 true)))
 (let (($x85 (= $x264 true)))
 (let (($x69 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x128 (= $x69 true)))
 (let (($x246 (= $x128 true)))
 (let (($x294 (= $x246 true)))
 (let (($x168 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x142 (= $x168 true)))
 (let (($x149 (= $x142 true)))
 (let (($x236 (= $x149 true)))
 (let ((?x235 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x231 (= (_ bv0 2) ?x235)))
 (let (($x6 (= $x231 true)))
 (let (($x220 (= $x6 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x125 (= $x133 true)))
 (let (($x93 (= $x125 true)))
 (let (($x122 (= $x93 true)))
 (let (($x191 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x196 (= $x191 true)))
 (let (($x120 (= $x196 true)))
 (let (($x221 (= $x120 true)))
 (let ((?x141 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x141)))
 (let (($x156 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x27 (= $x156 true)))
 (let (($x212 (= $x27 true)))
 (let (($x62 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x180 (= $x62 true)))
 (let (($x102 (= $x180 true)))
 (let (($x126 (= $x102 true)))
 (let (($x129 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x11 (not $x129)))
 (let (($x131 (= $x11 true)))
 (let (($x53 (= $x131 true)))
 (let (($x163 (= $x53 true)))
 (let (($x68 (and $x163 $x126)))
 (let (($x225 (and $x68 $x212)))
 (let (($x116 (and $x225 $x221)))
 (let (($x137 (and $x116 $x122)))
 (let (($x187 (and $x137 $x220)))
 (let (($x162 (and $x187 $x236)))
 (let (($x147 (and $x162 $x294)))
 (let (($x243 (and $x147 $x85)))
 (let (($x298 (and $x243 $x303)))
 (let (($x169 (and $x298 $x179)))
 (let (($x288 (and $x169 $x130)))
 (let (($x33 (and $x288 $x121)))
 (let (($x188 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x176 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x176 (_ bv0 32))))
 (let (($x80 (and $x224 $x33)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x9 (and $x203 $x80)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x239 (and $x145 $x9)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x112 (and $x77 $x239)))
 (let (($x98 (=> $x112 $x301)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x77 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (not $x77)))
 (let (($x48 (or $x77 $x159)))
 (let (($x56 (= $x48 true)))
 (let (($x88 (= $x56 true)))
 (let (($x5 (forall ((input.ind-%var1778X (_ BitVec 32)) )(let ((?x15 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1778X)))
 (let ((?x257 (input.spec-%var-x-1.1.1 input.ind-%var1778X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1778X)))
 (=> $x244 (= ?x257 ?x15))))))
 ))
 (let (($x302 (forall ((input.ind-%var1777X (_ BitVec 32)) )(let (($x117 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1777X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1777X)))
 (= $x244 $x117))))
 ))
 (let (($x74 (and $x302 $x5)))
 (let (($x61 (= $x74 true)))
 (let (($x81 (forall ((input.ind-%var1772X (_ BitVec 32)) )(let ((?x239 (bvadd (bvmul input.ind-%var1772X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem ?x239))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv2 32))) ?x301))))
 (let ((?x15 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1772X)))
 (let (($x117 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1772X)))
 (=> $x117 (= ?x15 ?x101))))))))
 ))
 (let (($x103 (forall ((input.ind-%var1771X (_ BitVec 32)) )(let (($x95 (and (bvule (_ bv0 32) input.ind-%var1771X) (bvult input.ind-%var1771X input.dst.llvm-%n))))
 (let (($x117 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1771X)))
 (= $x117 $x95))))
 ))
 (let (($x218 (and $x103 $x81)))
 (let (($x18 (= $x218 true)))
 (let (($x41 (forall ((input.ind-%var1766X (_ BitVec 32)) )(let ((?x239 (bvadd (bvmul input.ind-%var1766X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem ?x239))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv2 32))) ?x301))))
 (let ((?x257 (input.spec-%var-x-1.1.1 input.ind-%var1766X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1766X)))
 (=> $x244 (= ?x257 ?x101))))))))
 ))
 (let (($x171 (forall ((input.ind-%var1765X (_ BitVec 32)) )(let (($x95 (and (bvule (_ bv0 32) input.ind-%var1765X) (bvult input.ind-%var1765X input.dst.llvm-%n))))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1765X)))
 (= $x244 $x95))))
 ))
 (let (($x204 (and $x171 $x41)))
 (let (($x13 (= $x204 true)))
 (let ((?x265 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x265)))
 (let (($x251 (= ?x174 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x249 (= $x251 true)))
 (let (($x49 (= $x249 true)))
 (let (($x87 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x32 (= $x87 true)))
 (let (($x84 (= $x32 true)))
 (let (($x210 (= $x84 true)))
 (let (($x305 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x303 (= $x305 true)))
 (let (($x298 (= $x303 true)))
 (let (($x82 (= $x298 true)))
 (let (($x238 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x319 (= $x238 true)))
 (let (($x148 (= $x319 true)))
 (let (($x22 (= $x148 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x207)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x241 (= (_ bv0 32) ?x287)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x232 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let ((?x296 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x296)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x289 (and $x216 $x83)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x12 $x289)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x315 (and $x38 $x14)))
 (let (($x267 (not $x315)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x211 (and $x253 $x259)))
 (let (($x46 (and (not $x211) $x267)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (and $x201 $x317)))
 (let (($x17 (not $x248)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x146 $x272)))
 (let (($x166 (and (not $x193) $x17)))
 (let (($x79 (and (and (and (and (and (and $x166 $x46) $x250) $x47) $x54) $x232) $x241)))
 (let (($x282 (and $x79 $x100)))
 (let (($x300 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x132)))
 (let (($x175 (or false (or false (and (and true (or $x230 $x78)) (or $x290 $x300))))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x175)))
 (let (($x26 (and $x70 $x282)))
 (let (($x167 (= $x26 true)))
 (let (($x264 (= $x167 true)))
 (let (($x85 (= $x264 true)))
 (let (($x147 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x39 (= $x147 true)))
 (let (($x254 (= $x39 true)))
 (let (($x280 (= $x254 true)))
 (let ((?x162 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x69 (= (_ bv0 2) ?x162)))
 (let (($x128 (= $x69 true)))
 (let (($x246 (= $x128 true)))
 (let ((?x231 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x231)))
 (let (($x187 (= ?x6 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x168 (= $x187 true)))
 (let (($x142 (= $x168 true)))
 (let (($x93 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x122 (= $x93 true)))
 (let (($x137 (= $x122 true)))
 (let (($x151 (= $x137 true)))
 (let (($x149 (and $x151 $x142)))
 (let (($x294 (and $x149 $x246)))
 (let (($x37 (and $x294 $x280)))
 (let (($x243 (and $x37 $x85)))
 (let (($x297 (and $x243 $x22)))
 (let (($x173 (and $x297 $x82)))
 (let (($x25 (and $x173 $x210)))
 (let (($x281 (and $x25 $x49)))
 (let (($x135 (and $x281 $x13)))
 (let (($x318 (and $x135 $x18)))
 (let (($x184 (and $x318 $x61)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x206 (and $x116 $x184)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x266 (and $x120 $x206)))
 (let (($x225 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x270 (and $x225 $x266)))
 (let ((?x145 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd input.dst.llvm-%x ?x145)))
 (let (($x68 (bvugt ?x96 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd ?x96 (_ bv3 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x163 (bvugt ?x96 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x131)))
 (let (($x156 (or false (or false (and (and true (or $x53 $x163)) (or $x126 $x68))))))
 (let (($x212 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) $x156)))
 (let (($x8 (=> (and $x77 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) $x156)))
 (let (($x64 (and $x8 $x270)))
 (let (($x107 (=> $x64 $x88)))
 (not $x107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x77 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (not $x77)))
 (let (($x48 (or $x77 $x159)))
 (let (($x56 (= $x48 true)))
 (let (($x88 (= $x56 true)))
 (let (($x5 (forall ((input.ind-%var1778X (_ BitVec 32)) )(let ((?x15 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1778X)))
 (let ((?x257 (input.spec-%var-x-1.1.1 input.ind-%var1778X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1778X)))
 (=> $x244 (= ?x257 ?x15))))))
 ))
 (let (($x302 (forall ((input.ind-%var1777X (_ BitVec 32)) )(let (($x117 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1777X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1777X)))
 (= $x244 $x117))))
 ))
 (let (($x74 (and $x302 $x5)))
 (let (($x61 (= $x74 true)))
 (let (($x81 (forall ((input.ind-%var1772X (_ BitVec 32)) )(let ((?x239 (bvadd (bvmul input.ind-%var1772X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem ?x239))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv2 32))) ?x301))))
 (let ((?x15 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1772X)))
 (let (($x117 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1772X)))
 (=> $x117 (= ?x15 ?x101))))))))
 ))
 (let (($x103 (forall ((input.ind-%var1771X (_ BitVec 32)) )(let (($x95 (and (bvule (_ bv0 32) input.ind-%var1771X) (bvult input.ind-%var1771X input.dst.llvm-%n))))
 (let (($x117 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1771X)))
 (= $x117 $x95))))
 ))
 (let (($x218 (and $x103 $x81)))
 (let (($x18 (= $x218 true)))
 (let (($x41 (forall ((input.ind-%var1766X (_ BitVec 32)) )(let ((?x239 (bvadd (bvmul input.ind-%var1766X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem ?x239))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv2 32))) ?x301))))
 (let ((?x257 (input.spec-%var-x-1.1.1 input.ind-%var1766X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1766X)))
 (=> $x244 (= ?x257 ?x101))))))))
 ))
 (let (($x171 (forall ((input.ind-%var1765X (_ BitVec 32)) )(let (($x95 (and (bvule (_ bv0 32) input.ind-%var1765X) (bvult input.ind-%var1765X input.dst.llvm-%n))))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1765X)))
 (= $x244 $x95))))
 ))
 (let (($x204 (and $x171 $x41)))
 (let (($x13 (= $x204 true)))
 (let ((?x265 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x265)))
 (let (($x251 (= ?x174 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x249 (= $x251 true)))
 (let (($x49 (= $x249 true)))
 (let (($x87 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x32 (= $x87 true)))
 (let (($x84 (= $x32 true)))
 (let (($x210 (= $x84 true)))
 (let (($x305 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x303 (= $x305 true)))
 (let (($x298 (= $x303 true)))
 (let (($x82 (= $x298 true)))
 (let (($x238 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x319 (= $x238 true)))
 (let (($x148 (= $x319 true)))
 (let (($x22 (= $x148 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x207)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x241 (= (_ bv0 32) ?x287)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x232 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let ((?x296 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x296)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x289 (and $x216 $x83)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x12 $x289)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x315 (and $x38 $x14)))
 (let (($x267 (not $x315)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x211 (and $x253 $x259)))
 (let (($x46 (and (not $x211) $x267)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (and $x201 $x317)))
 (let (($x17 (not $x248)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x146 $x272)))
 (let (($x166 (and (not $x193) $x17)))
 (let (($x79 (and (and (and (and (and (and $x166 $x46) $x250) $x47) $x54) $x232) $x241)))
 (let (($x282 (and $x79 $x100)))
 (let (($x300 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x132)))
 (let (($x175 (or false (or false (and (and true (or $x230 $x78)) (or $x290 $x300))))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x175)))
 (let (($x26 (and $x70 $x282)))
 (let (($x167 (= $x26 true)))
 (let (($x264 (= $x167 true)))
 (let (($x85 (= $x264 true)))
 (let (($x147 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x39 (= $x147 true)))
 (let (($x254 (= $x39 true)))
 (let (($x280 (= $x254 true)))
 (let ((?x162 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x69 (= (_ bv0 2) ?x162)))
 (let (($x128 (= $x69 true)))
 (let (($x246 (= $x128 true)))
 (let ((?x231 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x231)))
 (let (($x187 (= ?x6 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x168 (= $x187 true)))
 (let (($x142 (= $x168 true)))
 (let (($x93 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x122 (= $x93 true)))
 (let (($x137 (= $x122 true)))
 (let (($x151 (= $x137 true)))
 (let (($x149 (and $x151 $x142)))
 (let (($x294 (and $x149 $x246)))
 (let (($x37 (and $x294 $x280)))
 (let (($x243 (and $x37 $x85)))
 (let (($x297 (and $x243 $x22)))
 (let (($x173 (and $x297 $x82)))
 (let (($x25 (and $x173 $x210)))
 (let (($x281 (and $x25 $x49)))
 (let (($x135 (and $x281 $x13)))
 (let (($x318 (and $x135 $x18)))
 (let (($x184 (and $x318 $x61)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x206 (and $x116 $x184)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x266 (and $x120 $x206)))
 (let (($x225 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x270 (and $x225 $x266)))
 (let ((?x145 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd input.dst.llvm-%x ?x145)))
 (let (($x68 (bvugt ?x96 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd ?x96 (_ bv3 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x163 (bvugt ?x96 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x131)))
 (let (($x156 (or false (or false (and (and true (or $x53 $x163)) (or $x126 $x68))))))
 (let (($x212 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) $x156)))
 (let (($x8 (=> (and $x77 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) $x156)))
 (let (($x64 (and $x8 $x270)))
 (let (($x107 (=> $x64 $x88)))
 (not $x107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x37)))
 (let ((?x254 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x280 (= (_ bv0 32) ?x254)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x69)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x246 (and $x236 $x128)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (and $x149 $x246)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x137 $x151)))
 (let (($x235 (not $x181)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x125 $x93)))
 (let (($x6 (and (not $x122) $x235)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x191 $x196)))
 (let (($x221 (not $x120)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x75 $x27)))
 (let (($x133 (and (not $x225) $x221)))
 (let (($x97 (and (and (and (and (and (and $x133 $x6) $x187) $x142) $x294) $x39) $x280)))
 (let (($x91 (and $x97 $x59)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x129)))
 (let (($x212 (or false (or false (and (and true (or $x163 $x73)) (or $x68 $x105))))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x212)))
 (let (($x48 (and $x188 $x91)))
 (let (($x56 (= $x48 true)))
 (let (($x88 (= $x56 true)))
 (let (($x61 (forall ((input.ind-%var1790X (_ BitVec 32)) )(let ((?x186 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1790X)))
 (let ((?x32 (input.spec-%var-x-1.1.1 input.ind-%var1790X)))
 (let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var1790X)))
 (=> $x264 (= ?x32 ?x186))))))
 ))
 (let (($x76 (forall ((input.ind-%var1789X (_ BitVec 32)) )(let (($x20 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1789X)))
 (let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var1789X)))
 (= $x264 $x20))))
 ))
 (let (($x184 (and $x76 $x61)))
 (let (($x206 (= $x184 true)))
 (let (($x209 (forall ((input.ind-%var1784X (_ BitVec 32)) )(let ((?x9 (bvadd (bvmul input.ind-%var1784X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x271))))
 (let ((?x32 (input.spec-%var-x-1.1.1 input.ind-%var1784X)))
 (let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var1784X)))
 (=> $x264 (= ?x32 ?x301))))))))
 ))
 (let (($x298 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var1783X)))
 (= $x264 (and (bvule (_ bv0 32) input.ind-%var1783X) (bvult input.ind-%var1783X input.dst.llvm-%n)))))
 ))
 (let (($x57 (and $x298 $x209)))
 (let (($x41 (= $x57 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x253 (concat ?x166 (concat ?x317 (concat ?x272 ?x70)))))
 (let (($x241 (= ?x253 input.dst.llvm-%x)))
 (let (($x79 (= $x241 true)))
 (let (($x207 (= $x79 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x315 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x304 (concat ?x119 (concat ?x109 (concat ?x315 ?x38)))))
 (let (($x118 (= ?x304 input.dst.llvm-%n)))
 (let (($x232 (= $x118 true)))
 (let (($x63 (= $x232 true)))
 (let (($x47 (= input.dst.llvm-%n ?x304)))
 (let (($x259 (= input.dst.llvm-%x ?x253)))
 (let (($x71 (and $x259 $x47)))
 (let (($x233 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x12 (and $x233 $x71)))
 (let (($x83 (and (and (and $x188 true) $x91) $x12)))
 (let (($x289 (= $x83 true)))
 (let (($x54 (= $x289 true)))
 (let (($x157 (= $x54 true)))
 (let (($x287 (and $x157 $x63)))
 (let (($x100 (and $x287 $x207)))
 (let (($x204 (and $x100 $x41)))
 (let (($x266 (and $x204 $x206)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x270 (and $x96 $x266)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x64 (and $x160 $x270)))
 (let (($x86 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x159 (and $x86 $x64)))
 (let (($x107 (=> $x159 $x88)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x37)))
 (let ((?x254 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x280 (= (_ bv0 32) ?x254)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x69)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x246 (and $x236 $x128)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (and $x149 $x246)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x137 $x151)))
 (let (($x235 (not $x181)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x125 $x93)))
 (let (($x6 (and (not $x122) $x235)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x191 $x196)))
 (let (($x221 (not $x120)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x75 $x27)))
 (let (($x133 (and (not $x225) $x221)))
 (let (($x97 (and (and (and (and (and (and $x133 $x6) $x187) $x142) $x294) $x39) $x280)))
 (let (($x91 (and $x97 $x59)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x129)))
 (let (($x212 (or false (or false (and (and true (or $x163 $x73)) (or $x68 $x105))))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x212)))
 (let (($x48 (and $x188 $x91)))
 (let (($x56 (= $x48 true)))
 (let (($x88 (= $x56 true)))
 (let (($x61 (forall ((input.ind-%var1790X (_ BitVec 32)) )(let ((?x186 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1790X)))
 (let ((?x32 (input.spec-%var-x-1.1.1 input.ind-%var1790X)))
 (let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var1790X)))
 (=> $x264 (= ?x32 ?x186))))))
 ))
 (let (($x76 (forall ((input.ind-%var1789X (_ BitVec 32)) )(let (($x20 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1789X)))
 (let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var1789X)))
 (= $x264 $x20))))
 ))
 (let (($x184 (and $x76 $x61)))
 (let (($x206 (= $x184 true)))
 (let (($x209 (forall ((input.ind-%var1784X (_ BitVec 32)) )(let ((?x9 (bvadd (bvmul input.ind-%var1784X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x271))))
 (let ((?x32 (input.spec-%var-x-1.1.1 input.ind-%var1784X)))
 (let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var1784X)))
 (=> $x264 (= ?x32 ?x301))))))))
 ))
 (let (($x298 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var1783X)))
 (= $x264 (and (bvule (_ bv0 32) input.ind-%var1783X) (bvult input.ind-%var1783X input.dst.llvm-%n)))))
 ))
 (let (($x57 (and $x298 $x209)))
 (let (($x41 (= $x57 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x253 (concat ?x166 (concat ?x317 (concat ?x272 ?x70)))))
 (let (($x241 (= ?x253 input.dst.llvm-%x)))
 (let (($x79 (= $x241 true)))
 (let (($x207 (= $x79 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x315 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x304 (concat ?x119 (concat ?x109 (concat ?x315 ?x38)))))
 (let (($x118 (= ?x304 input.dst.llvm-%n)))
 (let (($x232 (= $x118 true)))
 (let (($x63 (= $x232 true)))
 (let (($x47 (= input.dst.llvm-%n ?x304)))
 (let (($x259 (= input.dst.llvm-%x ?x253)))
 (let (($x71 (and $x259 $x47)))
 (let (($x233 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x12 (and $x233 $x71)))
 (let (($x83 (and (and (and $x188 true) $x91) $x12)))
 (let (($x289 (= $x83 true)))
 (let (($x54 (= $x289 true)))
 (let (($x157 (= $x54 true)))
 (let (($x287 (and $x157 $x63)))
 (let (($x100 (and $x287 $x207)))
 (let (($x204 (and $x100 $x41)))
 (let (($x266 (and $x204 $x206)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x270 (and $x96 $x266)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x64 (and $x160 $x270)))
 (let (($x86 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x159 (and $x86 $x64)))
 (let (($x107 (=> $x159 $x88)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x288 (forall ((input.ind-%var1808X (_ BitVec 32)) )(let ((?x159 (bvadd (bvmul input.ind-%var1808X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x107))))
 (let ((?x301 (input.spec-%var-x-1.1.1 input.ind-%var1808X)))
 (let (($x298 (input.spec-%var-x-1.0.1 input.ind-%var1808X)))
 (=> $x298 (= ?x301 ?x103))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1807X (_ BitVec 32)) )(let (($x298 (input.spec-%var-x-1.0.1 input.ind-%var1807X)))
 (= $x298 (and (bvule (_ bv0 32) input.ind-%var1807X) (bvult input.ind-%var1807X input.dst.llvm-%n)))))
 ))
 (let (($x123 (and $x284 $x288)))
 (let (($x257 (= true true)))
 (let (($x121 (and $x257 $x123)))
 (let (($x229 (= $x121 true)))
 (let (($x26 (forall ((input.ind-%var1802X (_ BitVec 32)) )(let ((?x66 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1802X)))
 (let ((?x301 (input.spec-%var-x-1.1.1 input.ind-%var1802X)))
 (let (($x298 (input.spec-%var-x-1.0.1 input.ind-%var1802X)))
 (=> $x298 (= ?x301 ?x66))))))
 ))
 (let (($x244 (forall ((input.ind-%var1801X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1801X)))
 (let (($x298 (input.spec-%var-x-1.0.1 input.ind-%var1801X)))
 (= $x298 $x174))))
 ))
 (let (($x319 (and $x244 $x26)))
 (let (($x148 (= $x319 true)))
 (let (($x84 (forall ((input.ind-%var1796X (_ BitVec 32)) )(let ((?x159 (bvadd (bvmul input.ind-%var1796X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x107))))
 (let ((?x301 (input.spec-%var-x-1.1.1 input.ind-%var1796X)))
 (let (($x298 (input.spec-%var-x-1.0.1 input.ind-%var1796X)))
 (=> $x298 (= ?x301 ?x103))))))))
 ))
 (let (($x21 (forall ((input.ind-%var1795X (_ BitVec 32)) )(let (($x298 (input.spec-%var-x-1.0.1 input.ind-%var1795X)))
 (= $x298 (and (bvule (_ bv0 32) input.ind-%var1795X) (bvult input.ind-%var1795X input.dst.llvm-%n)))))
 ))
 (let (($x82 (and $x21 $x84)))
 (let (($x87 (= $x82 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x320 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x253 (concat ?x248 (concat ?x272 (concat ?x320 ?x17)))))
 (let (($x100 (= ?x253 input.dst.llvm-%x)))
 (let (($x167 (= $x100 true)))
 (let (($x264 (= $x167 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x304 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x304 (concat ?x38 (concat ?x109 ?x119)))))
 (let (($x287 (= ?x47 input.dst.llvm-%n)))
 (let (($x241 (= $x287 true)))
 (let (($x79 (= $x241 true)))
 (let (($x71 (= input.dst.llvm-%n ?x47)))
 (let (($x259 (= input.dst.llvm-%x ?x253)))
 (let (($x12 (and $x259 $x71)))
 (let (($x261 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x83 (and $x261 $x12)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x147)))
 (let ((?x294 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x230 (= (_ bv0 32) ?x294)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x149)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (and $x142 $x236)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x168 $x162)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x231 $x137)))
 (let (($x181 (not $x151)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x125 $x93)))
 (let (($x6 (and (not $x122) $x181)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x116 $x191)))
 (let (($x120 (not $x196)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x11 $x8)))
 (let (($x133 (and (not $x225) $x120)))
 (let (($x59 (and (and (and (and (and (and $x133 $x6) $x220) $x205) $x69) $x246) $x230)))
 (let (($x91 (and $x59 $x39)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x216 (or false (or false (and (and true (or $x62 $x180)) (or $x141 $x90))))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x216)))
 (let (($x157 (and (and (and $x27 true) $x91) $x83)))
 (let (($x118 (= $x157 true)))
 (let (($x232 (= $x118 true)))
 (let (($x63 (= $x232 true)))
 (let (($x207 (and $x63 $x79)))
 (let (($x297 (and $x207 $x264)))
 (let (($x282 (and $x297 $x87)))
 (let (($x171 (and $x282 $x148)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x135 (and $x145 $x171)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x15 (and $x44 $x135)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x173 (and $x51 $x15)))
 (let (($x208 (=> $x173 $x229)))
 (not $x208)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x288 (forall ((input.ind-%var1808X (_ BitVec 32)) )(let ((?x159 (bvadd (bvmul input.ind-%var1808X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x107))))
 (let ((?x301 (input.spec-%var-x-1.1.1 input.ind-%var1808X)))
 (let (($x298 (input.spec-%var-x-1.0.1 input.ind-%var1808X)))
 (=> $x298 (= ?x301 ?x103))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1807X (_ BitVec 32)) )(let (($x298 (input.spec-%var-x-1.0.1 input.ind-%var1807X)))
 (= $x298 (and (bvule (_ bv0 32) input.ind-%var1807X) (bvult input.ind-%var1807X input.dst.llvm-%n)))))
 ))
 (let (($x123 (and $x284 $x288)))
 (let (($x257 (= true true)))
 (let (($x121 (and $x257 $x123)))
 (let (($x229 (= $x121 true)))
 (let (($x26 (forall ((input.ind-%var1802X (_ BitVec 32)) )(let ((?x66 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1802X)))
 (let ((?x301 (input.spec-%var-x-1.1.1 input.ind-%var1802X)))
 (let (($x298 (input.spec-%var-x-1.0.1 input.ind-%var1802X)))
 (=> $x298 (= ?x301 ?x66))))))
 ))
 (let (($x244 (forall ((input.ind-%var1801X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1801X)))
 (let (($x298 (input.spec-%var-x-1.0.1 input.ind-%var1801X)))
 (= $x298 $x174))))
 ))
 (let (($x319 (and $x244 $x26)))
 (let (($x148 (= $x319 true)))
 (let (($x84 (forall ((input.ind-%var1796X (_ BitVec 32)) )(let ((?x159 (bvadd (bvmul input.ind-%var1796X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x107))))
 (let ((?x301 (input.spec-%var-x-1.1.1 input.ind-%var1796X)))
 (let (($x298 (input.spec-%var-x-1.0.1 input.ind-%var1796X)))
 (=> $x298 (= ?x301 ?x103))))))))
 ))
 (let (($x21 (forall ((input.ind-%var1795X (_ BitVec 32)) )(let (($x298 (input.spec-%var-x-1.0.1 input.ind-%var1795X)))
 (= $x298 (and (bvule (_ bv0 32) input.ind-%var1795X) (bvult input.ind-%var1795X input.dst.llvm-%n)))))
 ))
 (let (($x82 (and $x21 $x84)))
 (let (($x87 (= $x82 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x320 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x253 (concat ?x248 (concat ?x272 (concat ?x320 ?x17)))))
 (let (($x100 (= ?x253 input.dst.llvm-%x)))
 (let (($x167 (= $x100 true)))
 (let (($x264 (= $x167 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x304 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x304 (concat ?x38 (concat ?x109 ?x119)))))
 (let (($x287 (= ?x47 input.dst.llvm-%n)))
 (let (($x241 (= $x287 true)))
 (let (($x79 (= $x241 true)))
 (let (($x71 (= input.dst.llvm-%n ?x47)))
 (let (($x259 (= input.dst.llvm-%x ?x253)))
 (let (($x12 (and $x259 $x71)))
 (let (($x261 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x83 (and $x261 $x12)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x147)))
 (let ((?x294 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x230 (= (_ bv0 32) ?x294)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x149)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (and $x142 $x236)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x168 $x162)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x231 $x137)))
 (let (($x181 (not $x151)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x125 $x93)))
 (let (($x6 (and (not $x122) $x181)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x116 $x191)))
 (let (($x120 (not $x196)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x11 $x8)))
 (let (($x133 (and (not $x225) $x120)))
 (let (($x59 (and (and (and (and (and (and $x133 $x6) $x220) $x205) $x69) $x246) $x230)))
 (let (($x91 (and $x59 $x39)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x216 (or false (or false (and (and true (or $x62 $x180)) (or $x141 $x90))))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x216)))
 (let (($x157 (and (and (and $x27 true) $x91) $x83)))
 (let (($x118 (= $x157 true)))
 (let (($x232 (= $x118 true)))
 (let (($x63 (= $x232 true)))
 (let (($x207 (and $x63 $x79)))
 (let (($x297 (and $x207 $x264)))
 (let (($x282 (and $x297 $x87)))
 (let (($x171 (and $x282 $x148)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x135 (and $x145 $x171)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x15 (and $x44 $x135)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x173 (and $x51 $x15)))
 (let (($x208 (=> $x173 $x229)))
 (not $x208)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x242 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x114 (= (_ bv0 2) ?x242)))
 (let (($x238 (= $x114 true)))
 (let (($x251 (forall ((input.ind-%var1820X (_ BitVec 32)) )(let ((?x20 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1820X)))
 (let ((?x103 (input.spec-%var-x-1.1.1 input.ind-%var1820X)))
 (let (($x21 (input.spec-%var-x-1.0.1 input.ind-%var1820X)))
 (=> $x21 (= ?x103 ?x20))))))
 ))
 (let (($x41 (forall ((input.ind-%var1819X (_ BitVec 32)) )(let (($x22 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1819X)))
 (let (($x21 (input.spec-%var-x-1.0.1 input.ind-%var1819X)))
 (= $x21 $x22))))
 ))
 (let (($x243 (and $x41 $x251)))
 (let (($x265 (= $x243 true)))
 (let (($x185 (forall ((input.ind-%var1814X (_ BitVec 32)) )(let ((?x173 (bvadd (bvmul input.ind-%var1814X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem ?x173))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv2 32))) ?x123))))
 (let ((?x103 (input.spec-%var-x-1.1.1 input.ind-%var1814X)))
 (let (($x21 (input.spec-%var-x-1.0.1 input.ind-%var1814X)))
 (=> $x21 (= ?x103 ?x67))))))))
 ))
 (let (($x88 (forall ((input.ind-%var1813X (_ BitVec 32)) )(let (($x21 (input.spec-%var-x-1.0.1 input.ind-%var1813X)))
 (= $x21 (and (bvule (_ bv0 32) input.ind-%var1813X) (bvult input.ind-%var1813X input.dst.llvm-%n)))))
 ))
 (let (($x292 (and $x88 $x185)))
 (let (($x32 (= $x292 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x12 (concat ?x267 (concat ?x109 ?x38)))))
 (let (($x297 (= ?x83 input.dst.llvm-%x)))
 (let (($x303 (= $x297 true)))
 (let (($x298 (= $x303 true)))
 (let ((?x163 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x90 (concat ?x68 (concat ?x62 ?x163)))))
 (let (($x118 (= input.dst.llvm-%n ?x156)))
 (let (($x157 (= input.dst.llvm-%x ?x83)))
 (let (($x232 (and $x157 $x118)))
 (let (($x304 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x63 (and $x304 $x232)))
 (let ((?x317 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x317)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x193)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x233 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x261)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x296 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x54)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x290 (and $x91 $x296)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (and $x39 $x290)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x69 $x97)))
 (let (($x246 (not $x128)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (and $x149 $x236)))
 (let (($x294 (and (not $x162) $x246)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x280 (and $x187 $x205)))
 (let (($x168 (not $x280)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x11 $x8)))
 (let (($x132 (and (not $x254) $x168)))
 (let (($x70 (and (and (and (and (and (and $x132 $x294) $x230) $x147) $x300) $x233) $x248)))
 (let (($x253 (and $x70 $x146)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x196 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x196)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x196)))
 (let (($x78 (or false (or false (and (and true (or $x120 $x133)) (or $x231 $x137))))))
 (let (($x220 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x78)))
 (let (($x79 (and (and (and $x220 true) $x253) $x63)))
 (let (($x207 (= $x79 true)))
 (let (($x100 (= $x207 true)))
 (let (($x167 (= $x100 true)))
 (let (($x188 (= ?x156 input.dst.llvm-%n)))
 (let (($x216 (= $x188 true)))
 (let (($x27 (= $x216 true)))
 (let (($x264 (and $x27 $x167)))
 (let (($x98 (and $x264 $x298)))
 (let (($x273 (and $x98 $x32)))
 (let (($x281 (and $x273 $x265)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x94 (and $x160 $x281)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x305 (and $x77 $x94)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x9 (and $x203 $x305)))
 (let (($x179 (=> $x9 $x238)))
 (not $x179))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x242 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x114 (= (_ bv0 2) ?x242)))
 (let (($x238 (= $x114 true)))
 (let (($x251 (forall ((input.ind-%var1820X (_ BitVec 32)) )(let ((?x20 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1820X)))
 (let ((?x103 (input.spec-%var-x-1.1.1 input.ind-%var1820X)))
 (let (($x21 (input.spec-%var-x-1.0.1 input.ind-%var1820X)))
 (=> $x21 (= ?x103 ?x20))))))
 ))
 (let (($x41 (forall ((input.ind-%var1819X (_ BitVec 32)) )(let (($x22 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1819X)))
 (let (($x21 (input.spec-%var-x-1.0.1 input.ind-%var1819X)))
 (= $x21 $x22))))
 ))
 (let (($x243 (and $x41 $x251)))
 (let (($x265 (= $x243 true)))
 (let (($x185 (forall ((input.ind-%var1814X (_ BitVec 32)) )(let ((?x173 (bvadd (bvmul input.ind-%var1814X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem ?x173))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv2 32))) ?x123))))
 (let ((?x103 (input.spec-%var-x-1.1.1 input.ind-%var1814X)))
 (let (($x21 (input.spec-%var-x-1.0.1 input.ind-%var1814X)))
 (=> $x21 (= ?x103 ?x67))))))))
 ))
 (let (($x88 (forall ((input.ind-%var1813X (_ BitVec 32)) )(let (($x21 (input.spec-%var-x-1.0.1 input.ind-%var1813X)))
 (= $x21 (and (bvule (_ bv0 32) input.ind-%var1813X) (bvult input.ind-%var1813X input.dst.llvm-%n)))))
 ))
 (let (($x292 (and $x88 $x185)))
 (let (($x32 (= $x292 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x12 (concat ?x267 (concat ?x109 ?x38)))))
 (let (($x297 (= ?x83 input.dst.llvm-%x)))
 (let (($x303 (= $x297 true)))
 (let (($x298 (= $x303 true)))
 (let ((?x163 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x90 (concat ?x68 (concat ?x62 ?x163)))))
 (let (($x118 (= input.dst.llvm-%n ?x156)))
 (let (($x157 (= input.dst.llvm-%x ?x83)))
 (let (($x232 (and $x157 $x118)))
 (let (($x304 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x63 (and $x304 $x232)))
 (let ((?x317 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x317)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x193)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x233 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x261)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x296 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x54)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x290 (and $x91 $x296)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (and $x39 $x290)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x69 $x97)))
 (let (($x246 (not $x128)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (and $x149 $x236)))
 (let (($x294 (and (not $x162) $x246)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x280 (and $x187 $x205)))
 (let (($x168 (not $x280)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x11 $x8)))
 (let (($x132 (and (not $x254) $x168)))
 (let (($x70 (and (and (and (and (and (and $x132 $x294) $x230) $x147) $x300) $x233) $x248)))
 (let (($x253 (and $x70 $x146)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x196 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x196)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x196)))
 (let (($x78 (or false (or false (and (and true (or $x120 $x133)) (or $x231 $x137))))))
 (let (($x220 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x78)))
 (let (($x79 (and (and (and $x220 true) $x253) $x63)))
 (let (($x207 (= $x79 true)))
 (let (($x100 (= $x207 true)))
 (let (($x167 (= $x100 true)))
 (let (($x188 (= ?x156 input.dst.llvm-%n)))
 (let (($x216 (= $x188 true)))
 (let (($x27 (= $x216 true)))
 (let (($x264 (and $x27 $x167)))
 (let (($x98 (and $x264 $x298)))
 (let (($x273 (and $x98 $x32)))
 (let (($x281 (and $x273 $x265)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x94 (and $x160 $x281)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x305 (and $x77 $x94)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x9 (and $x203 $x305)))
 (let (($x179 (=> $x9 $x238)))
 (not $x179))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x135 (= $x107 true)))
 (let (($x204 (= $x135 true)))
 (let (($x5 (forall ((input.ind-%var1832X (_ BitVec 32)) )(let ((?x244 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1832X)))
 (let ((?x67 (input.spec-%var-x-1.1.1 input.ind-%var1832X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var1832X)))
 (=> $x88 (= ?x67 ?x244))))))
 ))
 (let (($x66 (forall ((input.ind-%var1831X (_ BitVec 32)) )(let (($x82 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1831X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var1831X)))
 (= $x88 $x82))))
 ))
 (let (($x30 (and $x66 $x5)))
 (let (($x159 (= $x30 true)))
 (let (($x301 (forall ((input.ind-%var1826X (_ BitVec 32)) )(let ((?x9 (bvadd (bvmul input.ind-%var1826X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x238))))
 (let ((?x67 (input.spec-%var-x-1.1.1 input.ind-%var1826X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var1826X)))
 (=> $x88 (= ?x67 ?x315))))))))
 ))
 (let (($x288 (forall ((input.ind-%var1825X (_ BitVec 32)) )(let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var1825X)))
 (= $x88 (and (bvule (_ bv0 32) input.ind-%var1825X) (bvult input.ind-%var1825X input.dst.llvm-%n)))))
 ))
 (let (($x302 (and $x288 $x301)))
 (let (($x48 (= $x302 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x157 (concat ?x119 (concat ?x46 ?x14)))))
 (let (($x98 (= ?x118 input.dst.llvm-%n)))
 (let (($x140 (= $x98 true)))
 (let (($x21 (= $x140 true)))
 (let (($x232 (= input.dst.llvm-%n ?x118)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x212 (concat ?x156 (concat ?x62 (concat ?x180 ?x105)))))
 (let (($x304 (= input.dst.llvm-%x ?x212)))
 (let (($x63 (and $x304 $x232)))
 (let (($x108 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x79 (and $x108 $x63)))
 (let ((?x233 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x233)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x261 (= (_ bv0 32) ?x17)))
 (let ((?x290 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x300 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x290)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (and $x320 $x91)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x147 $x54)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x69 $x97)))
 (let (($x246 (not $x128)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x236 $x162)))
 (let (($x272 (and (not $x37) $x246)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x280 (and $x187 $x205)))
 (let (($x168 (not $x280)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x182 $x116)))
 (let (($x149 (and (not $x142) $x168)))
 (let (($x253 (and (and (and (and (and (and $x149 $x272) $x166) $x59) $x296) $x300) $x261)))
 (let (($x241 (and $x253 $x201)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x125 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x125)))
 (let (($x11 (or false (or false (and (and true (or $x93 $x122)) (or $x181 $x6))))))
 (let (($x254 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x11)))
 (let (($x167 (and (and (and $x254 true) $x241) $x79)))
 (let (($x264 (= $x167 true)))
 (let (($x297 (= $x264 true)))
 (let (($x303 (= $x297 true)))
 (let (($x216 (= ?x212 input.dst.llvm-%x)))
 (let (($x27 (= $x216 true)))
 (let (($x225 (= $x27 true)))
 (let (($x298 (and $x225 $x303)))
 (let (($x228 (and $x298 $x21)))
 (let (($x224 (and $x228 $x48)))
 (let (($x237 (and $x224 $x159)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x44 $x237)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x239 (and $x86 $x171)))
 (let (($x210 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x299 (and $x210 $x239)))
 (let (($x184 (=> $x299 $x204)))
 (not $x184))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x135 (= $x107 true)))
 (let (($x204 (= $x135 true)))
 (let (($x5 (forall ((input.ind-%var1832X (_ BitVec 32)) )(let ((?x244 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1832X)))
 (let ((?x67 (input.spec-%var-x-1.1.1 input.ind-%var1832X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var1832X)))
 (=> $x88 (= ?x67 ?x244))))))
 ))
 (let (($x66 (forall ((input.ind-%var1831X (_ BitVec 32)) )(let (($x82 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1831X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var1831X)))
 (= $x88 $x82))))
 ))
 (let (($x30 (and $x66 $x5)))
 (let (($x159 (= $x30 true)))
 (let (($x301 (forall ((input.ind-%var1826X (_ BitVec 32)) )(let ((?x9 (bvadd (bvmul input.ind-%var1826X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x238))))
 (let ((?x67 (input.spec-%var-x-1.1.1 input.ind-%var1826X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var1826X)))
 (=> $x88 (= ?x67 ?x315))))))))
 ))
 (let (($x288 (forall ((input.ind-%var1825X (_ BitVec 32)) )(let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var1825X)))
 (= $x88 (and (bvule (_ bv0 32) input.ind-%var1825X) (bvult input.ind-%var1825X input.dst.llvm-%n)))))
 ))
 (let (($x302 (and $x288 $x301)))
 (let (($x48 (= $x302 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x157 (concat ?x119 (concat ?x46 ?x14)))))
 (let (($x98 (= ?x118 input.dst.llvm-%n)))
 (let (($x140 (= $x98 true)))
 (let (($x21 (= $x140 true)))
 (let (($x232 (= input.dst.llvm-%n ?x118)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x212 (concat ?x156 (concat ?x62 (concat ?x180 ?x105)))))
 (let (($x304 (= input.dst.llvm-%x ?x212)))
 (let (($x63 (and $x304 $x232)))
 (let (($x108 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x79 (and $x108 $x63)))
 (let ((?x233 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x233)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x261 (= (_ bv0 32) ?x17)))
 (let ((?x290 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x300 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x290)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (and $x320 $x91)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x147 $x54)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x69 $x97)))
 (let (($x246 (not $x128)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x236 $x162)))
 (let (($x272 (and (not $x37) $x246)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x280 (and $x187 $x205)))
 (let (($x168 (not $x280)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x182 $x116)))
 (let (($x149 (and (not $x142) $x168)))
 (let (($x253 (and (and (and (and (and (and $x149 $x272) $x166) $x59) $x296) $x300) $x261)))
 (let (($x241 (and $x253 $x201)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x125 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x125)))
 (let (($x11 (or false (or false (and (and true (or $x93 $x122)) (or $x181 $x6))))))
 (let (($x254 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x11)))
 (let (($x167 (and (and (and $x254 true) $x241) $x79)))
 (let (($x264 (= $x167 true)))
 (let (($x297 (= $x264 true)))
 (let (($x303 (= $x297 true)))
 (let (($x216 (= ?x212 input.dst.llvm-%x)))
 (let (($x27 (= $x216 true)))
 (let (($x225 (= $x27 true)))
 (let (($x298 (and $x225 $x303)))
 (let (($x228 (and $x298 $x21)))
 (let (($x224 (and $x228 $x48)))
 (let (($x237 (and $x224 $x159)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x44 $x237)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x239 (and $x86 $x171)))
 (let (($x210 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x299 (and $x210 $x239)))
 (let (($x184 (=> $x299 $x204)))
 (not $x184))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x49 (forall ((input.ind-%var1850X (_ BitVec 32)) )(let ((?x299 (bvadd (bvmul input.ind-%var1850X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x184))))
 (let ((?x315 (input.spec-%var-x-1.1.1 input.ind-%var1850X)))
 (let (($x288 (input.spec-%var-x-1.0.1 input.ind-%var1850X)))
 (=> $x288 (= ?x315 ?x87))))))))
 ))
 (let (($x72 (forall ((input.ind-%var1849X (_ BitVec 32)) )(let (($x288 (input.spec-%var-x-1.0.1 input.ind-%var1849X)))
 (= $x288 (and (bvule (_ bv0 32) input.ind-%var1849X) (bvult input.ind-%var1849X input.dst.llvm-%n)))))
 ))
 (let (($x13 (and $x72 $x49)))
 (let (($x94 (= true true)))
 (let (($x130 (and $x94 $x13)))
 (let (($x286 (= $x130 true)))
 (let (($x176 (forall ((input.ind-%var1844X (_ BitVec 32)) )(let ((?x206 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1844X)))
 (let ((?x315 (input.spec-%var-x-1.1.1 input.ind-%var1844X)))
 (let (($x288 (input.spec-%var-x-1.0.1 input.ind-%var1844X)))
 (=> $x288 (= ?x315 ?x206))))))
 ))
 (let (($x74 (forall ((input.ind-%var1843X (_ BitVec 32)) )(let (($x32 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1843X)))
 (let (($x288 (input.spec-%var-x-1.0.1 input.ind-%var1843X)))
 (= $x288 $x32))))
 ))
 (let (($x173 (and $x74 $x176)))
 (let (($x154 (= $x173 true)))
 (let (($x250 (forall ((input.ind-%var1838X (_ BitVec 32)) )(let ((?x299 (bvadd (bvmul input.ind-%var1838X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x184))))
 (let ((?x315 (input.spec-%var-x-1.1.1 input.ind-%var1838X)))
 (let (($x288 (input.spec-%var-x-1.0.1 input.ind-%var1838X)))
 (=> $x288 (= ?x315 ?x87))))))))
 ))
 (let (($x114 (forall ((input.ind-%var1837X (_ BitVec 32)) )(let (($x288 (input.spec-%var-x-1.0.1 input.ind-%var1837X)))
 (= $x288 (and (bvule (_ bv0 32) input.ind-%var1837X) (bvult input.ind-%var1837X input.dst.llvm-%n)))))
 ))
 (let (($x257 (and $x114 $x250)))
 (let (($x208 (= $x257 true)))
 (let ((?x317 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x253 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x241 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x241 (concat ?x253 (concat ?x300 ?x317)))))
 (let (($x228 (= ?x100 input.dst.llvm-%x)))
 (let (($x56 (= $x228 true)))
 (let (($x88 (= $x56 true)))
 (let ((?x304 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x14 (concat ?x119 (concat ?x83 ?x304)))))
 (let (($x298 (= ?x109 input.dst.llvm-%n)))
 (let (($x98 (= $x298 true)))
 (let (($x140 (= $x98 true)))
 (let (($x47 (= input.dst.llvm-%n ?x109)))
 (let (($x259 (= input.dst.llvm-%x ?x100)))
 (let (($x118 (and $x259 $x47)))
 (let (($x91 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x232 (and $x91 $x118)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x246 (= (_ bv0 32) ?x128)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x69)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x294 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x168)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (and $x205 $x149)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (and $x187 $x236)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x287 (and $x78 $x220)))
 (let (($x11 (not $x287)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x181 $x151)))
 (let (($x207 (and (not $x6) $x11)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x93 $x133)))
 (let (($x231 (not $x122)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x141 $x53)))
 (let (($x137 (and (not $x125) $x231)))
 (let (($x59 (and (and (and (and (and (and $x137 $x207) $x116) $x132) $x162) $x294) $x97)))
 (let (($x70 (and $x59 $x246)))
 (let (($x216 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x62)))
 (let (($x120 (or false (or false (and (and true (or $x90 $x180)) (or $x188 $x216))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x120)))
 (let (($x167 (and (and (and $x191 true) $x70) $x232)))
 (let (($x264 (= $x167 true)))
 (let (($x297 (= $x264 true)))
 (let (($x303 (= $x297 true)))
 (let (($x21 (and $x303 $x140)))
 (let (($x121 (and $x21 $x88)))
 (let (($x175 (and $x121 $x208)))
 (let (($x281 (and $x175 $x154)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x209 (and $x77 $x281)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x26 (and $x51 $x209)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x123 (and $x101 $x26)))
 (let (($x178 (=> $x123 $x286)))
 (not $x178)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x49 (forall ((input.ind-%var1850X (_ BitVec 32)) )(let ((?x299 (bvadd (bvmul input.ind-%var1850X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x184))))
 (let ((?x315 (input.spec-%var-x-1.1.1 input.ind-%var1850X)))
 (let (($x288 (input.spec-%var-x-1.0.1 input.ind-%var1850X)))
 (=> $x288 (= ?x315 ?x87))))))))
 ))
 (let (($x72 (forall ((input.ind-%var1849X (_ BitVec 32)) )(let (($x288 (input.spec-%var-x-1.0.1 input.ind-%var1849X)))
 (= $x288 (and (bvule (_ bv0 32) input.ind-%var1849X) (bvult input.ind-%var1849X input.dst.llvm-%n)))))
 ))
 (let (($x13 (and $x72 $x49)))
 (let (($x94 (= true true)))
 (let (($x130 (and $x94 $x13)))
 (let (($x286 (= $x130 true)))
 (let (($x176 (forall ((input.ind-%var1844X (_ BitVec 32)) )(let ((?x206 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1844X)))
 (let ((?x315 (input.spec-%var-x-1.1.1 input.ind-%var1844X)))
 (let (($x288 (input.spec-%var-x-1.0.1 input.ind-%var1844X)))
 (=> $x288 (= ?x315 ?x206))))))
 ))
 (let (($x74 (forall ((input.ind-%var1843X (_ BitVec 32)) )(let (($x32 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1843X)))
 (let (($x288 (input.spec-%var-x-1.0.1 input.ind-%var1843X)))
 (= $x288 $x32))))
 ))
 (let (($x173 (and $x74 $x176)))
 (let (($x154 (= $x173 true)))
 (let (($x250 (forall ((input.ind-%var1838X (_ BitVec 32)) )(let ((?x299 (bvadd (bvmul input.ind-%var1838X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x184))))
 (let ((?x315 (input.spec-%var-x-1.1.1 input.ind-%var1838X)))
 (let (($x288 (input.spec-%var-x-1.0.1 input.ind-%var1838X)))
 (=> $x288 (= ?x315 ?x87))))))))
 ))
 (let (($x114 (forall ((input.ind-%var1837X (_ BitVec 32)) )(let (($x288 (input.spec-%var-x-1.0.1 input.ind-%var1837X)))
 (= $x288 (and (bvule (_ bv0 32) input.ind-%var1837X) (bvult input.ind-%var1837X input.dst.llvm-%n)))))
 ))
 (let (($x257 (and $x114 $x250)))
 (let (($x208 (= $x257 true)))
 (let ((?x317 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x253 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x241 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x241 (concat ?x253 (concat ?x300 ?x317)))))
 (let (($x228 (= ?x100 input.dst.llvm-%x)))
 (let (($x56 (= $x228 true)))
 (let (($x88 (= $x56 true)))
 (let ((?x304 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x14 (concat ?x119 (concat ?x83 ?x304)))))
 (let (($x298 (= ?x109 input.dst.llvm-%n)))
 (let (($x98 (= $x298 true)))
 (let (($x140 (= $x98 true)))
 (let (($x47 (= input.dst.llvm-%n ?x109)))
 (let (($x259 (= input.dst.llvm-%x ?x100)))
 (let (($x118 (and $x259 $x47)))
 (let (($x91 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x232 (and $x91 $x118)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x246 (= (_ bv0 32) ?x128)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x69)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x294 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x168)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (and $x205 $x149)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (and $x187 $x236)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x287 (and $x78 $x220)))
 (let (($x11 (not $x287)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x181 $x151)))
 (let (($x207 (and (not $x6) $x11)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x93 $x133)))
 (let (($x231 (not $x122)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x141 $x53)))
 (let (($x137 (and (not $x125) $x231)))
 (let (($x59 (and (and (and (and (and (and $x137 $x207) $x116) $x132) $x162) $x294) $x97)))
 (let (($x70 (and $x59 $x246)))
 (let (($x216 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x62)))
 (let (($x120 (or false (or false (and (and true (or $x90 $x180)) (or $x188 $x216))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x120)))
 (let (($x167 (and (and (and $x191 true) $x70) $x232)))
 (let (($x264 (= $x167 true)))
 (let (($x297 (= $x264 true)))
 (let (($x303 (= $x297 true)))
 (let (($x21 (and $x303 $x140)))
 (let (($x121 (and $x21 $x88)))
 (let (($x175 (and $x121 $x208)))
 (let (($x281 (and $x175 $x154)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x209 (and $x77 $x281)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x26 (and $x51 $x209)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x123 (and $x101 $x26)))
 (let (($x178 (=> $x123 $x286)))
 (not $x178)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x115 (bvule ?x269 (_ bv4294967294 32))))
 (let (($x258 (= $x115 true)))
 (let (($x155 (= $x258 true)))
 (let (($x202 (forall ((input.ind-%var1868X (_ BitVec 32)) )(let ((?x309 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1868X)))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var1868X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var1868X)))
 (=> $x249 (= ?x148 ?x309))))))
 ))
 (let (($x312 (forall ((input.ind-%var1867X (_ BitVec 32)) )(let (($x6 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1867X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var1867X)))
 (= $x249 $x6))))
 ))
 (let (($x227 (and $x312 $x202)))
 (let (($x293 (= $x227 true)))
 (let (($x45 (forall ((input.ind-%var1862X (_ BitVec 32)) )(let ((?x174 (bvadd (bvmul input.ind-%var1862X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x99))))
 (let ((?x309 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1862X)))
 (let (($x6 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1862X)))
 (=> $x6 (= ?x309 ?x256))))))))
 ))
 (let (($x226 (forall ((input.ind-%var1861X (_ BitVec 32)) )(let (($x84 (and (bvule (_ bv0 32) input.ind-%var1861X) (bvult input.ind-%var1861X input.dst.llvm-%n))))
 (let (($x6 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1861X)))
 (= $x6 $x84))))
 ))
 (let (($x172 (and $x226 $x45)))
 (let (($x195 (= $x172 true)))
 (let (($x106 (forall ((input.ind-%var1856X (_ BitVec 32)) )(let ((?x174 (bvadd (bvmul input.ind-%var1856X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x99))))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var1856X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var1856X)))
 (=> $x249 (= ?x148 ?x256))))))))
 ))
 (let (($x41 (forall ((input.ind-%var1855X (_ BitVec 32)) )(let (($x84 (and (bvule (_ bv0 32) input.ind-%var1855X) (bvult input.ind-%var1855X input.dst.llvm-%n))))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var1855X)))
 (= $x249 $x84))))
 ))
 (let (($x52 (and $x41 $x106)))
 (let (($x60 (= $x52 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x96)))
 (let (($x305 (= ?x185 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x302 (= $x305 true)))
 (let (($x48 (= $x302 true)))
 (let (($x67 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x25 (= $x67 true)))
 (let (($x22 (= $x25 true)))
 (let (($x10 (= $x22 true)))
 (let (($x160 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x108 (= $x160 true)))
 (let (($x296 (= $x108 true)))
 (let (($x251 (= $x296 true)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x281 (= (_ bv0 32) ?x154)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x176)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x32)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x175 $x20)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x208 $x74)))
 (let (($x257 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x135 $x204)))
 (let (($x184 (not $x107)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x75 $x76)))
 (let (($x87 (and (not $x145) $x184)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (and $x114 $x315)))
 (let (($x239 (not $x301)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x167 $x264)))
 (let (($x12 (and (not $x242) $x239)))
 (let (($x49 (and (and (and (and (and (and $x12 $x87) $x103) $x257) $x206) $x282) $x173)))
 (let (($x13 (and $x49 $x281)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x298 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x298)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x298)))
 (let (($x179 (or false (or false (and (and true (or $x98 $x140)) (or $x56 $x88))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x179)))
 (let (($x130 (and $x139 $x13)))
 (let (($x286 (= $x130 true)))
 (let (($x178 (= $x286 true)))
 (let (($x81 (= $x178 true)))
 (let (($x157 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x267 (= $x157 true)))
 (let (($x109 (= $x267 true)))
 (let (($x47 (= $x109 true)))
 (let ((?x14 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x38 (= (_ bv0 2) ?x14)))
 (let (($x119 (= $x38 true)))
 (let (($x71 (= $x119 true)))
 (let (($x146 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (= $x146 true)))
 (let (($x100 (= $x233 true)))
 (let (($x259 (= $x100 true)))
 (let (($x261 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x253 (= $x261 true)))
 (let (($x290 (= $x253 true)))
 (let (($x300 (= $x290 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x59 (bvsub ?x86 ?x51)))
 (let (($x79 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 ?x59) (bvult ?x86 ?x59))))
 (let (($x248 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x69 (ite $x248 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x166 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x37 (bvmul (_ bv4 64) ?x166)))
 (let ((?x294 ((_ extract 63 32) ?x37)))
 (let (($x97 (= ?x294 ?x69)))
 (let (($x147 (and $x97 $x79)))
 (let (($x236 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x320 (and $x236 $x147)))
 (let (($x39 (= true $x320)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (=> $x101 $x39)))
 (let (($x54 (= $x91 true)))
 (let (($x201 (= $x54 true)))
 (let (($x241 (= $x201 true)))
 (let ((?x193 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x193)))
 (let (($x230 (= ?x142 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x230 true)))
 (let (($x205 (= $x187 true)))
 (let (($x11 (= $x101 true)))
 (let (($x207 (= $x11 true)))
 (let (($x272 (= $x207 true)))
 (let (($x280 (and $x272 $x205)))
 (let (($x17 (and $x280 $x241)))
 (let (($x317 (and $x17 $x300)))
 (let (($x211 (and $x317 $x259)))
 (let (($x83 (and $x211 $x71)))
 (let (($x118 (and $x83 $x47)))
 (let (($x44 (and $x118 $x81)))
 (let (($x265 (and $x44 $x251)))
 (let (($x131 (and $x265 $x10)))
 (let (($x5 (and $x131 $x48)))
 (let (($x110 (and $x5 $x60)))
 (let (($x252 (and $x110 $x195)))
 (let (($x150 (and $x252 $x293)))
 (let (($x78 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x220 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x220 (_ bv1 32))))
 (let (($x199 (and $x287 $x150)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x307 (and $x137 $x199)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x295 (and $x122 $x307)))
 (let (($x235 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x134 (and $x235 $x295)))
 (let (($x196 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd ?x86 (_ bv3 32))))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x163 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x105)))
 (let (($x141 (or false (or false (and (and true (or $x126 $x163)) (or $x225 $x196))))))
 (let (($x125 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x141)))
 (let (($x102 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x141)))
 (let (($x7 (and $x102 $x134)))
 (let (($x189 (=> $x7 $x155)))
 (not $x189))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x115 (bvule ?x269 (_ bv4294967294 32))))
 (let (($x258 (= $x115 true)))
 (let (($x155 (= $x258 true)))
 (let (($x202 (forall ((input.ind-%var1868X (_ BitVec 32)) )(let ((?x309 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1868X)))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var1868X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var1868X)))
 (=> $x249 (= ?x148 ?x309))))))
 ))
 (let (($x312 (forall ((input.ind-%var1867X (_ BitVec 32)) )(let (($x6 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1867X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var1867X)))
 (= $x249 $x6))))
 ))
 (let (($x227 (and $x312 $x202)))
 (let (($x293 (= $x227 true)))
 (let (($x45 (forall ((input.ind-%var1862X (_ BitVec 32)) )(let ((?x174 (bvadd (bvmul input.ind-%var1862X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x99))))
 (let ((?x309 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1862X)))
 (let (($x6 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1862X)))
 (=> $x6 (= ?x309 ?x256))))))))
 ))
 (let (($x226 (forall ((input.ind-%var1861X (_ BitVec 32)) )(let (($x84 (and (bvule (_ bv0 32) input.ind-%var1861X) (bvult input.ind-%var1861X input.dst.llvm-%n))))
 (let (($x6 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1861X)))
 (= $x6 $x84))))
 ))
 (let (($x172 (and $x226 $x45)))
 (let (($x195 (= $x172 true)))
 (let (($x106 (forall ((input.ind-%var1856X (_ BitVec 32)) )(let ((?x174 (bvadd (bvmul input.ind-%var1856X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x99))))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var1856X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var1856X)))
 (=> $x249 (= ?x148 ?x256))))))))
 ))
 (let (($x41 (forall ((input.ind-%var1855X (_ BitVec 32)) )(let (($x84 (and (bvule (_ bv0 32) input.ind-%var1855X) (bvult input.ind-%var1855X input.dst.llvm-%n))))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var1855X)))
 (= $x249 $x84))))
 ))
 (let (($x52 (and $x41 $x106)))
 (let (($x60 (= $x52 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x96)))
 (let (($x305 (= ?x185 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x302 (= $x305 true)))
 (let (($x48 (= $x302 true)))
 (let (($x67 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x25 (= $x67 true)))
 (let (($x22 (= $x25 true)))
 (let (($x10 (= $x22 true)))
 (let (($x160 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x108 (= $x160 true)))
 (let (($x296 (= $x108 true)))
 (let (($x251 (= $x296 true)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x281 (= (_ bv0 32) ?x154)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x176)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x32)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x175 $x20)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x208 $x74)))
 (let (($x257 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x135 $x204)))
 (let (($x184 (not $x107)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x75 $x76)))
 (let (($x87 (and (not $x145) $x184)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (and $x114 $x315)))
 (let (($x239 (not $x301)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x167 $x264)))
 (let (($x12 (and (not $x242) $x239)))
 (let (($x49 (and (and (and (and (and (and $x12 $x87) $x103) $x257) $x206) $x282) $x173)))
 (let (($x13 (and $x49 $x281)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x298 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x298)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x298)))
 (let (($x179 (or false (or false (and (and true (or $x98 $x140)) (or $x56 $x88))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x179)))
 (let (($x130 (and $x139 $x13)))
 (let (($x286 (= $x130 true)))
 (let (($x178 (= $x286 true)))
 (let (($x81 (= $x178 true)))
 (let (($x157 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x267 (= $x157 true)))
 (let (($x109 (= $x267 true)))
 (let (($x47 (= $x109 true)))
 (let ((?x14 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x38 (= (_ bv0 2) ?x14)))
 (let (($x119 (= $x38 true)))
 (let (($x71 (= $x119 true)))
 (let (($x146 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (= $x146 true)))
 (let (($x100 (= $x233 true)))
 (let (($x259 (= $x100 true)))
 (let (($x261 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x253 (= $x261 true)))
 (let (($x290 (= $x253 true)))
 (let (($x300 (= $x290 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x59 (bvsub ?x86 ?x51)))
 (let (($x79 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 ?x59) (bvult ?x86 ?x59))))
 (let (($x248 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x69 (ite $x248 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x166 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x37 (bvmul (_ bv4 64) ?x166)))
 (let ((?x294 ((_ extract 63 32) ?x37)))
 (let (($x97 (= ?x294 ?x69)))
 (let (($x147 (and $x97 $x79)))
 (let (($x236 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x320 (and $x236 $x147)))
 (let (($x39 (= true $x320)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (=> $x101 $x39)))
 (let (($x54 (= $x91 true)))
 (let (($x201 (= $x54 true)))
 (let (($x241 (= $x201 true)))
 (let ((?x193 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x193)))
 (let (($x230 (= ?x142 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x230 true)))
 (let (($x205 (= $x187 true)))
 (let (($x11 (= $x101 true)))
 (let (($x207 (= $x11 true)))
 (let (($x272 (= $x207 true)))
 (let (($x280 (and $x272 $x205)))
 (let (($x17 (and $x280 $x241)))
 (let (($x317 (and $x17 $x300)))
 (let (($x211 (and $x317 $x259)))
 (let (($x83 (and $x211 $x71)))
 (let (($x118 (and $x83 $x47)))
 (let (($x44 (and $x118 $x81)))
 (let (($x265 (and $x44 $x251)))
 (let (($x131 (and $x265 $x10)))
 (let (($x5 (and $x131 $x48)))
 (let (($x110 (and $x5 $x60)))
 (let (($x252 (and $x110 $x195)))
 (let (($x150 (and $x252 $x293)))
 (let (($x78 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x220 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x220 (_ bv1 32))))
 (let (($x199 (and $x287 $x150)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x307 (and $x137 $x199)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x295 (and $x122 $x307)))
 (let (($x235 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x134 (and $x235 $x295)))
 (let (($x196 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd ?x86 (_ bv3 32))))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x163 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x105)))
 (let (($x141 (or false (or false (and (and true (or $x126 $x163)) (or $x225 $x196))))))
 (let (($x125 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x141)))
 (let (($x102 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x141)))
 (let (($x7 (and $x102 $x134)))
 (let (($x189 (=> $x7 $x155)))
 (not $x189))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 200 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x255 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x219 (bvmul (_ bv4294967295 32) ?x255)))
 (let ((?x268 (bvneg ?x219)))
 (let (($x34 (= ?x268 ?x143)))
 (let (($x223 (= $x34 true)))
 (let (($x104 (forall ((input.ind-%var1891X (_ BitVec 32)) )(let ((?x15 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1891X)))
 (let ((?x256 (input.spec-%var-x-1.1.1 input.ind-%var1891X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var1891X)))
 (=> $x148 (= ?x256 ?x15))))))
 ))
 (let (($x136 (forall ((input.ind-%var1890X (_ BitVec 32)) )(let (($x287 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1890X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var1890X)))
 (= $x148 $x287))))
 ))
 (let (($x310 (and $x136 $x104)))
 (let (($x289 (= $x310 true)))
 (let (($x244 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let ((?x222 (bvadd (bvmul input.ind-%var1885X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x293))))
 (let ((?x15 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1885X)))
 (let (($x287 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1885X)))
 (=> $x287 (= ?x15 ?x7))))))))
 ))
 (let (($x9 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x57 (and (bvule (_ bv0 32) input.ind-%var1884X) (bvult input.ind-%var1884X input.dst.llvm-%n))))
 (let (($x287 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1884X)))
 (= $x287 $x57))))
 ))
 (let (($x66 (and $x9 $x244)))
 (let (($x35 (= $x66 true)))
 (let (($x258 (forall ((input.ind-%var1879X (_ BitVec 32)) )(let ((?x222 (bvadd (bvmul input.ind-%var1879X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x293))))
 (let ((?x256 (input.spec-%var-x-1.1.1 input.ind-%var1879X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var1879X)))
 (=> $x148 (= ?x256 ?x7))))))))
 ))
 (let (($x171 (forall ((input.ind-%var1878X (_ BitVec 32)) )(let (($x57 (and (bvule (_ bv0 32) input.ind-%var1878X) (bvult input.ind-%var1878X input.dst.llvm-%n))))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var1878X)))
 (= $x148 $x57))))
 ))
 (let (($x155 (and $x171 $x258)))
 (let (($x189 (= $x155 true)))
 (let ((?x5 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x5)))
 (let (($x249 (= ?x151 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x249 true)))
 (let (($x159 (= $x273 true)))
 (let (($x96 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x96 true)))
 (let (($x305 (= $x185 true)))
 (let (($x302 (= $x305 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x25 (= $x67 true)))
 (let (($x22 (= $x25 true)))
 (let (($x10 (= $x22 true)))
 (let (($x160 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x160 true)))
 (let (($x296 (= $x108 true)))
 (let (($x251 (= $x296 true)))
 (let (($x130 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (= $x130 true)))
 (let (($x178 (= $x286 true)))
 (let (($x81 (= $x178 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x20 (bvsub ?x86 ?x51)))
 (let (($x64 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 ?x20) (bvult ?x86 ?x20))))
 (let (($x208 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x175 (ite $x208 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x250 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x257 (bvmul (_ bv4 64) ?x250)))
 (let ((?x123 ((_ extract 63 32) ?x257)))
 (let (($x32 (= ?x123 ?x175)))
 (let (($x282 (and $x32 $x64)))
 (let (($x103 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x72 (and $x103 $x282)))
 (let (($x176 (= true $x72)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (=> $x101 $x176)))
 (let (($x49 (= $x173 true)))
 (let (($x154 (= $x49 true)))
 (let (($x281 (= $x154 true)))
 (let (($x135 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x204 (= $x135 true)))
 (let (($x107 (= $x204 true)))
 (let (($x184 (= $x107 true)))
 (let (($x12 (= $x101 true)))
 (let (($x75 (= $x12 true)))
 (let (($x76 (= $x75 true)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x88)))
 (let ((?x228 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x228)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x303 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x303)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x298 (and $x297 $x129)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x118 $x298)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x14 $x38)))
 (let (($x71 (not $x119)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x259 $x211)))
 (let (($x304 (and (not $x46) $x71)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (and $x290 $x300)))
 (let (($x146 (not $x317)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (and $x248 $x69)))
 (let (($x100 (and (not $x253) $x146)))
 (let (($x264 (and (and (and (and (and (and $x100 $x304) $x267) $x47) $x98) $x21) $x56)))
 (let (($x242 (and $x264 $x121)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x320 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x59)))
 (let (($x241 (or false (or false (and (and true (or $x246 $x70)) (or $x320 $x39))))))
 (let (($x261 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x241)))
 (let (($x299 (and $x261 $x242)))
 (let (($x114 (= $x299 true)))
 (let (($x315 (= $x114 true)))
 (let (($x301 (= $x315 true)))
 (let ((?x149 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x236 (= (_ bv0 2) ?x149)))
 (let (($x162 (= $x236 true)))
 (let (($x166 (= $x162 true)))
 (let ((?x142 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x142)))
 (let (($x187 (= ?x132 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x205 (= $x187 true)))
 (let (($x280 (= $x205 true)))
 (let (($x37 (and $x280 $x166)))
 (let (($x239 (and $x37 $x301)))
 (let (($x145 (and $x239 $x76)))
 (let (($x87 (and $x145 $x184)))
 (let (($x13 (and $x87 $x281)))
 (let (($x44 (and $x13 $x81)))
 (let (($x265 (and $x44 $x251)))
 (let (($x131 (and $x265 $x10)))
 (let (($x48 (and $x131 $x302)))
 (let (($x84 (and $x48 $x159)))
 (let (($x124 (and $x84 $x189)))
 (let (($x80 (and $x124 $x35)))
 (let (($x213 (and $x80 $x289)))
 (let (($x207 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x272 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x272 (_ bv1 32))))
 (let (($x138 (and $x182 $x213)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x229 (and $x181 $x138)))
 (let (($x231 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x237 (and $x231 $x229)))
 (let (($x93 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x314 (and $x93 $x237)))
 (let (($x191 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd ?x86 (_ bv3 32))))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x212 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x163)))
 (let (($x102 (or false (or false (and (and true (or $x188 $x212)) (or $x120 $x191))))))
 (let (($x235 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x102)))
 (let (($x68 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x102)))
 (let (($x29 (and $x68 $x314)))
 (let (($x247 (=> $x29 $x223)))
 (not $x247))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x255 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x219 (bvmul (_ bv4294967295 32) ?x255)))
 (let ((?x268 (bvneg ?x219)))
 (let (($x34 (= ?x268 ?x143)))
 (let (($x223 (= $x34 true)))
 (let (($x104 (forall ((input.ind-%var1891X (_ BitVec 32)) )(let ((?x15 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1891X)))
 (let ((?x256 (input.spec-%var-x-1.1.1 input.ind-%var1891X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var1891X)))
 (=> $x148 (= ?x256 ?x15))))))
 ))
 (let (($x136 (forall ((input.ind-%var1890X (_ BitVec 32)) )(let (($x287 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1890X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var1890X)))
 (= $x148 $x287))))
 ))
 (let (($x310 (and $x136 $x104)))
 (let (($x289 (= $x310 true)))
 (let (($x244 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let ((?x222 (bvadd (bvmul input.ind-%var1885X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x293))))
 (let ((?x15 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1885X)))
 (let (($x287 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1885X)))
 (=> $x287 (= ?x15 ?x7))))))))
 ))
 (let (($x9 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x57 (and (bvule (_ bv0 32) input.ind-%var1884X) (bvult input.ind-%var1884X input.dst.llvm-%n))))
 (let (($x287 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1884X)))
 (= $x287 $x57))))
 ))
 (let (($x66 (and $x9 $x244)))
 (let (($x35 (= $x66 true)))
 (let (($x258 (forall ((input.ind-%var1879X (_ BitVec 32)) )(let ((?x222 (bvadd (bvmul input.ind-%var1879X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x293))))
 (let ((?x256 (input.spec-%var-x-1.1.1 input.ind-%var1879X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var1879X)))
 (=> $x148 (= ?x256 ?x7))))))))
 ))
 (let (($x171 (forall ((input.ind-%var1878X (_ BitVec 32)) )(let (($x57 (and (bvule (_ bv0 32) input.ind-%var1878X) (bvult input.ind-%var1878X input.dst.llvm-%n))))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var1878X)))
 (= $x148 $x57))))
 ))
 (let (($x155 (and $x171 $x258)))
 (let (($x189 (= $x155 true)))
 (let ((?x5 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x5)))
 (let (($x249 (= ?x151 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x249 true)))
 (let (($x159 (= $x273 true)))
 (let (($x96 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x96 true)))
 (let (($x305 (= $x185 true)))
 (let (($x302 (= $x305 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x25 (= $x67 true)))
 (let (($x22 (= $x25 true)))
 (let (($x10 (= $x22 true)))
 (let (($x160 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x160 true)))
 (let (($x296 (= $x108 true)))
 (let (($x251 (= $x296 true)))
 (let (($x130 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (= $x130 true)))
 (let (($x178 (= $x286 true)))
 (let (($x81 (= $x178 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x20 (bvsub ?x86 ?x51)))
 (let (($x64 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 ?x20) (bvult ?x86 ?x20))))
 (let (($x208 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x175 (ite $x208 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x250 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x257 (bvmul (_ bv4 64) ?x250)))
 (let ((?x123 ((_ extract 63 32) ?x257)))
 (let (($x32 (= ?x123 ?x175)))
 (let (($x282 (and $x32 $x64)))
 (let (($x103 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x72 (and $x103 $x282)))
 (let (($x176 (= true $x72)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (=> $x101 $x176)))
 (let (($x49 (= $x173 true)))
 (let (($x154 (= $x49 true)))
 (let (($x281 (= $x154 true)))
 (let (($x135 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x204 (= $x135 true)))
 (let (($x107 (= $x204 true)))
 (let (($x184 (= $x107 true)))
 (let (($x12 (= $x101 true)))
 (let (($x75 (= $x12 true)))
 (let (($x76 (= $x75 true)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x88)))
 (let ((?x228 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x228)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x303 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x303)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x298 (and $x297 $x129)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x118 $x298)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x14 $x38)))
 (let (($x71 (not $x119)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x259 $x211)))
 (let (($x304 (and (not $x46) $x71)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (and $x290 $x300)))
 (let (($x146 (not $x317)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (and $x248 $x69)))
 (let (($x100 (and (not $x253) $x146)))
 (let (($x264 (and (and (and (and (and (and $x100 $x304) $x267) $x47) $x98) $x21) $x56)))
 (let (($x242 (and $x264 $x121)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x320 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x59)))
 (let (($x241 (or false (or false (and (and true (or $x246 $x70)) (or $x320 $x39))))))
 (let (($x261 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x241)))
 (let (($x299 (and $x261 $x242)))
 (let (($x114 (= $x299 true)))
 (let (($x315 (= $x114 true)))
 (let (($x301 (= $x315 true)))
 (let ((?x149 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x236 (= (_ bv0 2) ?x149)))
 (let (($x162 (= $x236 true)))
 (let (($x166 (= $x162 true)))
 (let ((?x142 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x142)))
 (let (($x187 (= ?x132 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x205 (= $x187 true)))
 (let (($x280 (= $x205 true)))
 (let (($x37 (and $x280 $x166)))
 (let (($x239 (and $x37 $x301)))
 (let (($x145 (and $x239 $x76)))
 (let (($x87 (and $x145 $x184)))
 (let (($x13 (and $x87 $x281)))
 (let (($x44 (and $x13 $x81)))
 (let (($x265 (and $x44 $x251)))
 (let (($x131 (and $x265 $x10)))
 (let (($x48 (and $x131 $x302)))
 (let (($x84 (and $x48 $x159)))
 (let (($x124 (and $x84 $x189)))
 (let (($x80 (and $x124 $x35)))
 (let (($x213 (and $x80 $x289)))
 (let (($x207 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x272 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x272 (_ bv1 32))))
 (let (($x138 (and $x182 $x213)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x229 (and $x181 $x138)))
 (let (($x231 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x237 (and $x231 $x229)))
 (let (($x93 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x314 (and $x93 $x237)))
 (let (($x191 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd ?x86 (_ bv3 32))))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x212 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x163)))
 (let (($x102 (or false (or false (and (and true (or $x188 $x212)) (or $x120 $x191))))))
 (let (($x235 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x102)))
 (let (($x68 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x102)))
 (let (($x29 (and $x68 $x314)))
 (let (($x247 (=> $x29 $x223)))
 (not $x247))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x183))))
 (let ((?x50 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x283)))
 (let ((?x42 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x23 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x42)))
 (let ((?x319 (bvmul (_ bv4294967295 32) ?x23)))
 (let ((?x274 (bvneg ?x319)))
 (let (($x215 (= ?x274 ?x50)))
 (let (($x308 (= $x215 true)))
 (let (($x200 (forall ((input.ind-%var1914X (_ BitVec 32)) )(let ((?x243 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1914X)))
 (let ((?x7 (input.spec-%var-x-1.1.1 input.ind-%var1914X)))
 (let (($x256 (input.spec-%var-x-1.0.1 input.ind-%var1914X)))
 (=> $x256 (= ?x7 ?x243))))))
 ))
 (let (($x161 (forall ((input.ind-%var1913X (_ BitVec 32)) )(let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1913X)))
 (let (($x256 (input.spec-%var-x-1.0.1 input.ind-%var1913X)))
 (= $x256 $x182))))
 ))
 (let (($x65 (and $x161 $x200)))
 (let (($x232 (= $x65 true)))
 (let (($x36 (forall ((input.ind-%var1908X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1908X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x289))))
 (let ((?x243 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1908X)))
 (let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1908X)))
 (=> $x182 (= ?x243 ?x29))))))))
 ))
 (let (($x117 (forall ((input.ind-%var1907X (_ BitVec 32)) )(let (($x199 (and (bvule (_ bv0 32) input.ind-%var1907X) (bvult input.ind-%var1907X input.dst.llvm-%n))))
 (let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1907X)))
 (= $x182 $x199))))
 ))
 (let (($x214 (and $x117 $x36)))
 (let (($x41 (= $x214 true)))
 (let (($x268 (forall ((input.ind-%var1902X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1902X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x289))))
 (let ((?x7 (input.spec-%var-x-1.1.1 input.ind-%var1902X)))
 (let (($x256 (input.spec-%var-x-1.0.1 input.ind-%var1902X)))
 (=> $x256 (= ?x7 ?x29))))))))
 ))
 (let (($x227 (forall ((input.ind-%var1901X (_ BitVec 32)) )(let (($x199 (and (bvule (_ bv0 32) input.ind-%var1901X) (bvult input.ind-%var1901X input.dst.llvm-%n))))
 (let (($x256 (input.spec-%var-x-1.0.1 input.ind-%var1901X)))
 (= $x256 $x199))))
 ))
 (let (($x143 (and $x227 $x268)))
 (let (($x34 (= $x143 true)))
 (let ((?x159 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x159)))
 (let (($x148 (= ?x84 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x144 (= $x148 true)))
 (let (($x95 (= $x144 true)))
 (let ((?x305 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x302 (bvneg ?x305)))
 (let (($x48 (= ?x302 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x48 true)))
 (let (($x151 (= $x5 true)))
 (let ((?x22 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x10 (= (_ bv0 2) ?x22)))
 (let (($x131 (= $x10 true)))
 (let (($x96 (= $x131 true)))
 (let (($x108 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x296 (= $x108 true)))
 (let (($x251 (= $x296 true)))
 (let (($x265 (= $x251 true)))
 (let (($x286 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x286 true)))
 (let (($x81 (= $x178 true)))
 (let (($x44 (= $x81 true)))
 (let (($x49 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x154 (= $x49 true)))
 (let (($x281 (= $x154 true)))
 (let (($x13 (= $x281 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x282 (= $x64 true)))
 (let (($x72 (= $x282 true)))
 (let (($x176 (= $x72 true)))
 (let (($x257 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 (bvsub ?x86 ?x51)) (bvult ?x86 (bvsub ?x86 ?x51)))))
 (let (($x107 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x87 (ite $x107 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x221 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvmul (_ bv4 64) ?x221)))
 (let ((?x204 ((_ extract 63 32) ?x135)))
 (let (($x209 (= ?x204 ?x87)))
 (let (($x123 (and $x209 $x257)))
 (let (($x76 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x208 (and $x76 $x123)))
 (let (($x175 (= true $x208)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (=> $x101 $x175)))
 (let (($x74 (= $x32 true)))
 (let (($x20 (= $x74 true)))
 (let (($x206 (= $x20 true)))
 (let (($x299 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x114 (= $x299 true)))
 (let (($x315 (= $x114 true)))
 (let (($x301 (= $x315 true)))
 (let (($x56 (= $x101 true)))
 (let (($x264 (= $x56 true)))
 (let (($x88 (= $x264 true)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x47)))
 (let ((?x288 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x288)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x119)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x304 (and $x38 $x71)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (and $x14 $x304)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x300 (and $x233 $x290)))
 (let (($x317 (not $x300)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (and $x248 $x69)))
 (let (($x100 (and (not $x253) $x317)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x39 $x91)))
 (let (($x201 (not $x54)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x320 (and $x187 $x205)))
 (let (($x261 (and (not $x320) $x201)))
 (let (($x98 (and (and (and (and (and (and $x261 $x100) $x211) $x83) $x284) $x267) $x109)))
 (let (($x139 (and $x98 $x179)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x149 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x149)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x149)))
 (let (($x70 (or false (or false (and (and true (or $x236 $x162)) (or $x97 $x128))))))
 (let (($x147 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x140 (and $x147 $x139)))
 (let (($x21 (= $x140 true)))
 (let (($x167 (= $x21 true)))
 (let (($x228 (= $x167 true)))
 (let (($x121 (and $x228 $x88)))
 (let (($x239 (and $x121 $x301)))
 (let (($x94 (and $x239 $x206)))
 (let (($x173 (and $x94 $x176)))
 (let (($x130 (and $x173 $x13)))
 (let (($x160 (and $x130 $x44)))
 (let (($x67 (and $x160 $x265)))
 (let (($x185 (and $x67 $x96)))
 (let (($x249 (and $x185 $x151)))
 (let (($x57 (and $x249 $x95)))
 (let (($x223 (and $x57 $x34)))
 (let (($x18 (and $x223 $x41)))
 (let (($x82 (and $x18 $x232)))
 (let (($x193 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x142 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x142 (_ bv1 32))))
 (let (($x252 (and $x132 $x82)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x313 (and $x78 $x252)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x186 (and $x137 $x313)))
 (let (($x133 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x133 $x186)))
 (let (($x141 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x212 (bvadd ?x86 (_ bv3 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x212)))
 (let (($x225 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x212)))
 (let (($x68 (or false (or false (and (and true (or $x216 $x225)) (or $x63 $x141))))))
 (let (($x93 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x68)))
 (let (($x90 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x68)))
 (let (($x43 (and $x90 $x99)))
 (let (($x28 (=> $x43 $x308)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x183))))
 (let ((?x50 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x283)))
 (let ((?x42 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x23 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x42)))
 (let ((?x319 (bvmul (_ bv4294967295 32) ?x23)))
 (let ((?x274 (bvneg ?x319)))
 (let (($x215 (= ?x274 ?x50)))
 (let (($x308 (= $x215 true)))
 (let (($x200 (forall ((input.ind-%var1914X (_ BitVec 32)) )(let ((?x243 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1914X)))
 (let ((?x7 (input.spec-%var-x-1.1.1 input.ind-%var1914X)))
 (let (($x256 (input.spec-%var-x-1.0.1 input.ind-%var1914X)))
 (=> $x256 (= ?x7 ?x243))))))
 ))
 (let (($x161 (forall ((input.ind-%var1913X (_ BitVec 32)) )(let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1913X)))
 (let (($x256 (input.spec-%var-x-1.0.1 input.ind-%var1913X)))
 (= $x256 $x182))))
 ))
 (let (($x65 (and $x161 $x200)))
 (let (($x232 (= $x65 true)))
 (let (($x36 (forall ((input.ind-%var1908X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1908X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x289))))
 (let ((?x243 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1908X)))
 (let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1908X)))
 (=> $x182 (= ?x243 ?x29))))))))
 ))
 (let (($x117 (forall ((input.ind-%var1907X (_ BitVec 32)) )(let (($x199 (and (bvule (_ bv0 32) input.ind-%var1907X) (bvult input.ind-%var1907X input.dst.llvm-%n))))
 (let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1907X)))
 (= $x182 $x199))))
 ))
 (let (($x214 (and $x117 $x36)))
 (let (($x41 (= $x214 true)))
 (let (($x268 (forall ((input.ind-%var1902X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1902X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x289))))
 (let ((?x7 (input.spec-%var-x-1.1.1 input.ind-%var1902X)))
 (let (($x256 (input.spec-%var-x-1.0.1 input.ind-%var1902X)))
 (=> $x256 (= ?x7 ?x29))))))))
 ))
 (let (($x227 (forall ((input.ind-%var1901X (_ BitVec 32)) )(let (($x199 (and (bvule (_ bv0 32) input.ind-%var1901X) (bvult input.ind-%var1901X input.dst.llvm-%n))))
 (let (($x256 (input.spec-%var-x-1.0.1 input.ind-%var1901X)))
 (= $x256 $x199))))
 ))
 (let (($x143 (and $x227 $x268)))
 (let (($x34 (= $x143 true)))
 (let ((?x159 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x159)))
 (let (($x148 (= ?x84 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x144 (= $x148 true)))
 (let (($x95 (= $x144 true)))
 (let ((?x305 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x302 (bvneg ?x305)))
 (let (($x48 (= ?x302 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x48 true)))
 (let (($x151 (= $x5 true)))
 (let ((?x22 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x10 (= (_ bv0 2) ?x22)))
 (let (($x131 (= $x10 true)))
 (let (($x96 (= $x131 true)))
 (let (($x108 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x296 (= $x108 true)))
 (let (($x251 (= $x296 true)))
 (let (($x265 (= $x251 true)))
 (let (($x286 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x286 true)))
 (let (($x81 (= $x178 true)))
 (let (($x44 (= $x81 true)))
 (let (($x49 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x154 (= $x49 true)))
 (let (($x281 (= $x154 true)))
 (let (($x13 (= $x281 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x282 (= $x64 true)))
 (let (($x72 (= $x282 true)))
 (let (($x176 (= $x72 true)))
 (let (($x257 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 (bvsub ?x86 ?x51)) (bvult ?x86 (bvsub ?x86 ?x51)))))
 (let (($x107 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x87 (ite $x107 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x221 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvmul (_ bv4 64) ?x221)))
 (let ((?x204 ((_ extract 63 32) ?x135)))
 (let (($x209 (= ?x204 ?x87)))
 (let (($x123 (and $x209 $x257)))
 (let (($x76 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x208 (and $x76 $x123)))
 (let (($x175 (= true $x208)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (=> $x101 $x175)))
 (let (($x74 (= $x32 true)))
 (let (($x20 (= $x74 true)))
 (let (($x206 (= $x20 true)))
 (let (($x299 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x114 (= $x299 true)))
 (let (($x315 (= $x114 true)))
 (let (($x301 (= $x315 true)))
 (let (($x56 (= $x101 true)))
 (let (($x264 (= $x56 true)))
 (let (($x88 (= $x264 true)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x47)))
 (let ((?x288 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x288)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x119)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x304 (and $x38 $x71)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (and $x14 $x304)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x300 (and $x233 $x290)))
 (let (($x317 (not $x300)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (and $x248 $x69)))
 (let (($x100 (and (not $x253) $x317)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x39 $x91)))
 (let (($x201 (not $x54)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x320 (and $x187 $x205)))
 (let (($x261 (and (not $x320) $x201)))
 (let (($x98 (and (and (and (and (and (and $x261 $x100) $x211) $x83) $x284) $x267) $x109)))
 (let (($x139 (and $x98 $x179)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x149 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x149)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x149)))
 (let (($x70 (or false (or false (and (and true (or $x236 $x162)) (or $x97 $x128))))))
 (let (($x147 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x140 (and $x147 $x139)))
 (let (($x21 (= $x140 true)))
 (let (($x167 (= $x21 true)))
 (let (($x228 (= $x167 true)))
 (let (($x121 (and $x228 $x88)))
 (let (($x239 (and $x121 $x301)))
 (let (($x94 (and $x239 $x206)))
 (let (($x173 (and $x94 $x176)))
 (let (($x130 (and $x173 $x13)))
 (let (($x160 (and $x130 $x44)))
 (let (($x67 (and $x160 $x265)))
 (let (($x185 (and $x67 $x96)))
 (let (($x249 (and $x185 $x151)))
 (let (($x57 (and $x249 $x95)))
 (let (($x223 (and $x57 $x34)))
 (let (($x18 (and $x223 $x41)))
 (let (($x82 (and $x18 $x232)))
 (let (($x193 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x142 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x142 (_ bv1 32))))
 (let (($x252 (and $x132 $x82)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x313 (and $x78 $x252)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x186 (and $x137 $x313)))
 (let (($x133 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x133 $x186)))
 (let (($x141 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x212 (bvadd ?x86 (_ bv3 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x212)))
 (let (($x225 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x212)))
 (let (($x68 (or false (or false (and (and true (or $x216 $x225)) (or $x63 $x141))))))
 (let (($x93 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x68)))
 (let (($x90 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x68)))
 (let (($x43 (and $x90 $x99)))
 (let (($x28 (=> $x43 $x308)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 204 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x311 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x19 (bvsge ?x311 (_ bv0 32))))
 (let (($x134 (= $x19 true)))
 (let (($x177 (= $x134 true)))
 (let (($x6 (forall ((input.ind-%var1938X (_ BitVec 32)) )(let ((?x85 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1938X)))
 (let ((?x255 (input.spec-%var-x-1.1.1 input.ind-%var1938X)))
 (let (($x115 (input.spec-%var-x-1.0.1 input.ind-%var1938X)))
 (=> $x115 (= ?x255 ?x85))))))
 ))
 (let (($x277 (forall ((input.ind-%var1937X (_ BitVec 32)) )(let (($x280 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1937X)))
 (let (($x115 (input.spec-%var-x-1.0.1 input.ind-%var1937X)))
 (= $x115 $x280))))
 ))
 (let (($x172 (and $x277 $x6)))
 (let (($x309 (= $x172 true)))
 (let (($x124 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let ((?x92 (bvadd (bvmul input.ind-%var1932X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x82))))
 (let ((?x85 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1932X)))
 (let (($x280 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1932X)))
 (=> $x280 (= ?x85 ?x42))))))))
 ))
 (let (($x215 (forall ((input.ind-%var1931X (_ BitVec 32)) )(let (($x104 (and (bvule (_ bv0 32) input.ind-%var1931X) (bvult input.ind-%var1931X input.dst.llvm-%n))))
 (let (($x280 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1931X)))
 (= $x280 $x104))))
 ))
 (let (($x287 (and $x215 $x124)))
 (let (($x189 (= $x287 true)))
 (let (($x274 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let ((?x92 (bvadd (bvmul input.ind-%var1926X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x82))))
 (let ((?x255 (input.spec-%var-x-1.1.1 input.ind-%var1926X)))
 (let (($x115 (input.spec-%var-x-1.0.1 input.ind-%var1926X)))
 (=> $x115 (= ?x255 ?x42))))))))
 ))
 (let (($x164 (forall ((input.ind-%var1925X (_ BitVec 32)) )(let (($x104 (and (bvule (_ bv0 32) input.ind-%var1925X) (bvult input.ind-%var1925X input.dst.llvm-%n))))
 (let (($x115 (input.spec-%var-x-1.0.1 input.ind-%var1925X)))
 (= $x115 $x104))))
 ))
 (let (($x58 (and $x164 $x274)))
 (let (($x153 (= $x58 true)))
 (let ((?x272 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x256 (bvneg ?x272)))
 (let (($x150 (= ?x256 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x226 (= $x150 true)))
 (let (($x199 (= $x226 true)))
 (let (($x220 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x148 (= $x220 true)))
 (let (($x144 (= $x148 true)))
 (let (($x95 (= $x144 true)))
 (let (($x151 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x249 (= $x151 true)))
 (let (($x273 (= $x249 true)))
 (let (($x159 (= $x273 true)))
 (let ((?x296 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x251 (= (_ bv0 32) ?x296)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x160)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x286 (and $x281 $x130)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x154 $x286)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x74 $x20)))
 (let (($x94 (not $x206)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x208 $x175)))
 (let (($x282 (and (not $x32) $x94)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x103 $x318)))
 (let (($x250 (not $x26)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x121 $x242)))
 (let (($x123 (and (not $x209) $x250)))
 (let (($x131 (and (and (and (and (and (and $x123 $x282) $x176) $x49) $x178) $x44) $x108)))
 (let (($x96 (and $x131 $x251)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x315 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x315)))
 (let (($x239 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x315)))
 (let (($x107 (or false (or false (and (and true (or $x301 $x239)) (or $x76 $x145))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x107)))
 (let (($x185 (and $x87 $x96)))
 (let (($x305 (= $x185 true)))
 (let (($x302 (= $x305 true)))
 (let (($x48 (= $x302 true)))
 (let (($x21 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x167 (= $x21 true)))
 (let (($x228 (= $x167 true)))
 (let (($x56 (= $x228 true)))
 (let ((?x109 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x98 (= (_ bv0 2) ?x109)))
 (let (($x47 (= $x98 true)))
 (let (($x179 (= $x47 true)))
 (let (($x284 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (= $x284 true)))
 (let (($x157 (= $x129 true)))
 (let (($x267 (= $x157 true)))
 (let (($x14 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x38 (= $x14 true)))
 (let (($x119 (= $x38 true)))
 (let (($x71 (= $x119 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x146 (bvsub ?x86 ?x51)))
 (let (($x317 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 ?x146) (bvult ?x86 ?x146))))
 (let (($x248 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x69 (ite $x248 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x54 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x201 (bvmul (_ bv4 64) ?x54)))
 (let ((?x261 ((_ extract 63 32) ?x201)))
 (let (($x253 (= ?x261 ?x69)))
 (let (($x100 (and $x253 $x317)))
 (let (($x39 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x118 (and $x39 $x100)))
 (let (($x259 (= true $x118)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (=> $x101 $x259)))
 (let (($x297 (= $x211 true)))
 (let (($x46 (= $x297 true)))
 (let (($x83 (= $x46 true)))
 (let ((?x17 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x17)))
 (let (($x70 (= ?x59 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x70 true)))
 (let (($x187 (= $x147 true)))
 (let (($x162 (= $x101 true)))
 (let (($x166 (= $x162 true)))
 (let (($x37 (= $x166 true)))
 (let (($x205 (and $x37 $x187)))
 (let (($x303 (and $x205 $x83)))
 (let (($x304 (and $x303 $x71)))
 (let (($x298 (and $x304 $x267)))
 (let (($x139 (and $x298 $x179)))
 (let (($x264 (and $x139 $x56)))
 (let (($x5 (and $x264 $x48)))
 (let (($x84 (and $x5 $x159)))
 (let (($x57 (and $x84 $x95)))
 (let (($x202 (and $x57 $x199)))
 (let (($x245 (and $x202 $x153)))
 (let (($x40 (and $x245 $x189)))
 (let (($x45 (and $x40 $x309)))
 (let (($x79 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x149 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x149 (_ bv1 32))))
 (let (($x89 (and $x236 $x45)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x60 (and $x193 $x89)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x195 (and $x181 $x60)))
 (let (($x122 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x271 (and $x122 $x195)))
 (let (($x102 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x225 (bvadd ?x86 (_ bv3 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x120 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x225)))
 (let (($x90 (or false (or false (and (and true (or $x27 $x120)) (or $x125 $x102))))))
 (let (($x133 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x90)))
 (let (($x105 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x90)))
 (let (($x218 (and $x105 $x271)))
 (let (($x11 (=> $x218 $x177)))
 (not $x11))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x311 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x19 (bvsge ?x311 (_ bv0 32))))
 (let (($x134 (= $x19 true)))
 (let (($x177 (= $x134 true)))
 (let (($x6 (forall ((input.ind-%var1938X (_ BitVec 32)) )(let ((?x85 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1938X)))
 (let ((?x255 (input.spec-%var-x-1.1.1 input.ind-%var1938X)))
 (let (($x115 (input.spec-%var-x-1.0.1 input.ind-%var1938X)))
 (=> $x115 (= ?x255 ?x85))))))
 ))
 (let (($x277 (forall ((input.ind-%var1937X (_ BitVec 32)) )(let (($x280 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1937X)))
 (let (($x115 (input.spec-%var-x-1.0.1 input.ind-%var1937X)))
 (= $x115 $x280))))
 ))
 (let (($x172 (and $x277 $x6)))
 (let (($x309 (= $x172 true)))
 (let (($x124 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let ((?x92 (bvadd (bvmul input.ind-%var1932X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x82))))
 (let ((?x85 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1932X)))
 (let (($x280 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1932X)))
 (=> $x280 (= ?x85 ?x42))))))))
 ))
 (let (($x215 (forall ((input.ind-%var1931X (_ BitVec 32)) )(let (($x104 (and (bvule (_ bv0 32) input.ind-%var1931X) (bvult input.ind-%var1931X input.dst.llvm-%n))))
 (let (($x280 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1931X)))
 (= $x280 $x104))))
 ))
 (let (($x287 (and $x215 $x124)))
 (let (($x189 (= $x287 true)))
 (let (($x274 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let ((?x92 (bvadd (bvmul input.ind-%var1926X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x82))))
 (let ((?x255 (input.spec-%var-x-1.1.1 input.ind-%var1926X)))
 (let (($x115 (input.spec-%var-x-1.0.1 input.ind-%var1926X)))
 (=> $x115 (= ?x255 ?x42))))))))
 ))
 (let (($x164 (forall ((input.ind-%var1925X (_ BitVec 32)) )(let (($x104 (and (bvule (_ bv0 32) input.ind-%var1925X) (bvult input.ind-%var1925X input.dst.llvm-%n))))
 (let (($x115 (input.spec-%var-x-1.0.1 input.ind-%var1925X)))
 (= $x115 $x104))))
 ))
 (let (($x58 (and $x164 $x274)))
 (let (($x153 (= $x58 true)))
 (let ((?x272 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x256 (bvneg ?x272)))
 (let (($x150 (= ?x256 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x226 (= $x150 true)))
 (let (($x199 (= $x226 true)))
 (let (($x220 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x148 (= $x220 true)))
 (let (($x144 (= $x148 true)))
 (let (($x95 (= $x144 true)))
 (let (($x151 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x249 (= $x151 true)))
 (let (($x273 (= $x249 true)))
 (let (($x159 (= $x273 true)))
 (let ((?x296 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x251 (= (_ bv0 32) ?x296)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x160)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x286 (and $x281 $x130)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x154 $x286)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x74 $x20)))
 (let (($x94 (not $x206)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x208 $x175)))
 (let (($x282 (and (not $x32) $x94)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x103 $x318)))
 (let (($x250 (not $x26)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x121 $x242)))
 (let (($x123 (and (not $x209) $x250)))
 (let (($x131 (and (and (and (and (and (and $x123 $x282) $x176) $x49) $x178) $x44) $x108)))
 (let (($x96 (and $x131 $x251)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x315 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x315)))
 (let (($x239 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x315)))
 (let (($x107 (or false (or false (and (and true (or $x301 $x239)) (or $x76 $x145))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x107)))
 (let (($x185 (and $x87 $x96)))
 (let (($x305 (= $x185 true)))
 (let (($x302 (= $x305 true)))
 (let (($x48 (= $x302 true)))
 (let (($x21 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x167 (= $x21 true)))
 (let (($x228 (= $x167 true)))
 (let (($x56 (= $x228 true)))
 (let ((?x109 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x98 (= (_ bv0 2) ?x109)))
 (let (($x47 (= $x98 true)))
 (let (($x179 (= $x47 true)))
 (let (($x284 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (= $x284 true)))
 (let (($x157 (= $x129 true)))
 (let (($x267 (= $x157 true)))
 (let (($x14 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x38 (= $x14 true)))
 (let (($x119 (= $x38 true)))
 (let (($x71 (= $x119 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x146 (bvsub ?x86 ?x51)))
 (let (($x317 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 ?x146) (bvult ?x86 ?x146))))
 (let (($x248 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x69 (ite $x248 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x54 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x201 (bvmul (_ bv4 64) ?x54)))
 (let ((?x261 ((_ extract 63 32) ?x201)))
 (let (($x253 (= ?x261 ?x69)))
 (let (($x100 (and $x253 $x317)))
 (let (($x39 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x118 (and $x39 $x100)))
 (let (($x259 (= true $x118)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (=> $x101 $x259)))
 (let (($x297 (= $x211 true)))
 (let (($x46 (= $x297 true)))
 (let (($x83 (= $x46 true)))
 (let ((?x17 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x17)))
 (let (($x70 (= ?x59 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x70 true)))
 (let (($x187 (= $x147 true)))
 (let (($x162 (= $x101 true)))
 (let (($x166 (= $x162 true)))
 (let (($x37 (= $x166 true)))
 (let (($x205 (and $x37 $x187)))
 (let (($x303 (and $x205 $x83)))
 (let (($x304 (and $x303 $x71)))
 (let (($x298 (and $x304 $x267)))
 (let (($x139 (and $x298 $x179)))
 (let (($x264 (and $x139 $x56)))
 (let (($x5 (and $x264 $x48)))
 (let (($x84 (and $x5 $x159)))
 (let (($x57 (and $x84 $x95)))
 (let (($x202 (and $x57 $x199)))
 (let (($x245 (and $x202 $x153)))
 (let (($x40 (and $x245 $x189)))
 (let (($x45 (and $x40 $x309)))
 (let (($x79 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x149 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x149 (_ bv1 32))))
 (let (($x89 (and $x236 $x45)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x60 (and $x193 $x89)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x195 (and $x181 $x60)))
 (let (($x122 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x271 (and $x122 $x195)))
 (let (($x102 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x225 (bvadd ?x86 (_ bv3 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x120 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x225)))
 (let (($x90 (or false (or false (and (and true (or $x27 $x120)) (or $x125 $x102))))))
 (let (($x133 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x90)))
 (let (($x105 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x90)))
 (let (($x218 (and $x105 $x271)))
 (let (($x11 (=> $x218 $x177)))
 (not $x11))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (bvule ?x28 (_ bv4294967294 32))))
 (let (($x52 (= $x66 true)))
 (let (($x106 (= $x52 true)))
 (let (($x24 (forall ((input.ind-%var1961X (_ BitVec 32)) )(let ((?x143 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1961X)))
 (let ((?x42 (input.spec-%var-x-1.1.1 input.ind-%var1961X)))
 (let (($x255 (input.spec-%var-x-1.0.1 input.ind-%var1961X)))
 (=> $x255 (= ?x42 ?x143))))))
 ))
 (let (($x240 (forall ((input.ind-%var1960X (_ BitVec 32)) )(let (($x236 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1960X)))
 (let (($x255 (input.spec-%var-x-1.0.1 input.ind-%var1960X)))
 (= $x255 $x236))))
 ))
 (let (($x152 (and $x240 $x24)))
 (let (($x266 (= $x152 true)))
 (let (($x7 (forall ((input.ind-%var1955X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var1955X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x309))))
 (let ((?x143 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1955X)))
 (let (($x236 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1955X)))
 (=> $x236 (= ?x143 ?x218))))))))
 ))
 (let (($x29 (forall ((input.ind-%var1954X (_ BitVec 32)) )(let (($x313 (and (bvule (_ bv0 32) input.ind-%var1954X) (bvult input.ind-%var1954X input.dst.llvm-%n))))
 (let (($x236 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1954X)))
 (= $x236 $x313))))
 ))
 (let (($x314 (and $x29 $x7)))
 (let (($x174 (= $x314 true)))
 (let (($x134 (forall ((input.ind-%var1949X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var1949X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x309))))
 (let ((?x42 (input.spec-%var-x-1.1.1 input.ind-%var1949X)))
 (let (($x255 (input.spec-%var-x-1.0.1 input.ind-%var1949X)))
 (=> $x255 (= ?x42 ?x218))))))))
 ))
 (let (($x232 (forall ((input.ind-%var1948X (_ BitVec 32)) )(let (($x313 (and (bvule (_ bv0 32) input.ind-%var1948X) (bvult input.ind-%var1948X input.dst.llvm-%n))))
 (let (($x255 (input.spec-%var-x-1.0.1 input.ind-%var1948X)))
 (= $x255 $x313))))
 ))
 (let (($x177 (and $x232 $x134)))
 (let (($x11 (= $x177 true)))
 (let ((?x202 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x202)))
 (let (($x115 (= ?x132 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x115 true)))
 (let (($x213 (= $x138 true)))
 (let (($x272 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x256 (= $x272 true)))
 (let (($x150 (= $x256 true)))
 (let (($x226 (= $x150 true)))
 (let (($x220 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x220 true)))
 (let (($x144 (= $x148 true)))
 (let (($x95 (= $x144 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x249 (= $x151 true)))
 (let (($x273 (= $x249 true)))
 (let (($x159 (= $x273 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x44 (bvsub ?x86 ?x51)))
 (let (($x131 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 ?x44) (bvult ?x86 ?x44))))
 (let (($x178 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x22 (ite $x178 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x13 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvmul (_ bv4 64) ?x13)))
 (let ((?x286 ((_ extract 63 32) ?x130)))
 (let (($x81 (= ?x286 ?x22)))
 (let (($x296 (and $x81 $x131)))
 (let (($x154 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x251 (and $x154 $x296)))
 (let (($x96 (= true $x251)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (=> $x101 $x96)))
 (let (($x305 (= $x185 true)))
 (let (($x302 (= $x305 true)))
 (let (($x48 (= $x302 true)))
 (let (($x72 (= $x101 true)))
 (let (($x176 (= $x72 true)))
 (let (($x67 (= $x176 true)))
 (let ((?x318 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x318)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x257)))
 (let ((?x242 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x242)))
 (let ((?x204 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x204)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (and $x135 $x107)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x221 $x87)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x299 $x114)))
 (let (($x315 (not $x184)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x228 $x56)))
 (let (($x239 (and (not $x264) $x315)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x47 $x179)))
 (let (($x140 (not $x139)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x211 $x297)))
 (let (($x167 (and (not $x98) $x140)))
 (let (($x64 (and (and (and (and (and (and $x167 $x239) $x75) $x145) $x121) $x209) $x103)))
 (let (($x74 (and $x64 $x26)))
 (let (($x284 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x303 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x303)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x303)))
 (let (($x298 (or false (or false (and (and true (or $x14 $x38)) (or $x304 $x284))))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x298)))
 (let (($x20 (and $x109 $x74)))
 (let (($x206 (= $x20 true)))
 (let (($x94 (= $x206 true)))
 (let (($x282 (= $x94 true)))
 (let (($x290 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x300 (= $x290 true)))
 (let (($x317 (= $x300 true)))
 (let (($x100 (= $x317 true)))
 (let ((?x248 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x69 (= (_ bv0 2) ?x248)))
 (let (($x253 (= $x69 true)))
 (let (($x233 (= $x253 true)))
 (let ((?x205 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x320 (bvneg ?x205)))
 (let (($x39 (= ?x320 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x39 true)))
 (let (($x54 (= $x91 true)))
 (let (($x17 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x59 (= $x17 true)))
 (let (($x246 (= $x59 true)))
 (let (($x70 (= $x246 true)))
 (let (($x201 (and $x70 $x54)))
 (let (($x146 (and $x201 $x233)))
 (let (($x118 (and $x146 $x100)))
 (let (($x265 (and $x118 $x282)))
 (let (($x173 (and $x265 $x67)))
 (let (($x5 (and $x173 $x48)))
 (let (($x84 (and $x5 $x159)))
 (let (($x57 (and $x84 $x95)))
 (let (($x199 (and $x57 $x226)))
 (let (($x104 (and $x199 $x213)))
 (let (($x80 (and $x104 $x11)))
 (let (($x222 (and $x80 $x174)))
 (let (($x35 (and $x222 $x266)))
 (let (($x166 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x37 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x37 (_ bv1 32))))
 (let (($x283 (and $x97 $x35)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x229 (and $x142 $x283)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x161 (and $x78 $x229)))
 (let (($x231 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x244 (and $x231 $x161)))
 (let (($x68 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd ?x86 (_ bv3 32))))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x63 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x120)))
 (let (($x105 (or false (or false (and (and true (or $x196 $x63)) (or $x235 $x68))))))
 (let (($x122 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x105)))
 (let (($x163 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x105)))
 (let (($x292 (and $x163 $x244)))
 (let (($x158 (=> $x292 $x106)))
 (not $x158))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (bvule ?x28 (_ bv4294967294 32))))
 (let (($x52 (= $x66 true)))
 (let (($x106 (= $x52 true)))
 (let (($x24 (forall ((input.ind-%var1961X (_ BitVec 32)) )(let ((?x143 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1961X)))
 (let ((?x42 (input.spec-%var-x-1.1.1 input.ind-%var1961X)))
 (let (($x255 (input.spec-%var-x-1.0.1 input.ind-%var1961X)))
 (=> $x255 (= ?x42 ?x143))))))
 ))
 (let (($x240 (forall ((input.ind-%var1960X (_ BitVec 32)) )(let (($x236 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1960X)))
 (let (($x255 (input.spec-%var-x-1.0.1 input.ind-%var1960X)))
 (= $x255 $x236))))
 ))
 (let (($x152 (and $x240 $x24)))
 (let (($x266 (= $x152 true)))
 (let (($x7 (forall ((input.ind-%var1955X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var1955X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x309))))
 (let ((?x143 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1955X)))
 (let (($x236 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1955X)))
 (=> $x236 (= ?x143 ?x218))))))))
 ))
 (let (($x29 (forall ((input.ind-%var1954X (_ BitVec 32)) )(let (($x313 (and (bvule (_ bv0 32) input.ind-%var1954X) (bvult input.ind-%var1954X input.dst.llvm-%n))))
 (let (($x236 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1954X)))
 (= $x236 $x313))))
 ))
 (let (($x314 (and $x29 $x7)))
 (let (($x174 (= $x314 true)))
 (let (($x134 (forall ((input.ind-%var1949X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var1949X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x309))))
 (let ((?x42 (input.spec-%var-x-1.1.1 input.ind-%var1949X)))
 (let (($x255 (input.spec-%var-x-1.0.1 input.ind-%var1949X)))
 (=> $x255 (= ?x42 ?x218))))))))
 ))
 (let (($x232 (forall ((input.ind-%var1948X (_ BitVec 32)) )(let (($x313 (and (bvule (_ bv0 32) input.ind-%var1948X) (bvult input.ind-%var1948X input.dst.llvm-%n))))
 (let (($x255 (input.spec-%var-x-1.0.1 input.ind-%var1948X)))
 (= $x255 $x313))))
 ))
 (let (($x177 (and $x232 $x134)))
 (let (($x11 (= $x177 true)))
 (let ((?x202 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x202)))
 (let (($x115 (= ?x132 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x115 true)))
 (let (($x213 (= $x138 true)))
 (let (($x272 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x256 (= $x272 true)))
 (let (($x150 (= $x256 true)))
 (let (($x226 (= $x150 true)))
 (let (($x220 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x220 true)))
 (let (($x144 (= $x148 true)))
 (let (($x95 (= $x144 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x249 (= $x151 true)))
 (let (($x273 (= $x249 true)))
 (let (($x159 (= $x273 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x44 (bvsub ?x86 ?x51)))
 (let (($x131 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 ?x44) (bvult ?x86 ?x44))))
 (let (($x178 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x22 (ite $x178 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x13 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvmul (_ bv4 64) ?x13)))
 (let ((?x286 ((_ extract 63 32) ?x130)))
 (let (($x81 (= ?x286 ?x22)))
 (let (($x296 (and $x81 $x131)))
 (let (($x154 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x251 (and $x154 $x296)))
 (let (($x96 (= true $x251)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (=> $x101 $x96)))
 (let (($x305 (= $x185 true)))
 (let (($x302 (= $x305 true)))
 (let (($x48 (= $x302 true)))
 (let (($x72 (= $x101 true)))
 (let (($x176 (= $x72 true)))
 (let (($x67 (= $x176 true)))
 (let ((?x318 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x318)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x257)))
 (let ((?x242 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x242)))
 (let ((?x204 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x204)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (and $x135 $x107)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x221 $x87)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x299 $x114)))
 (let (($x315 (not $x184)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x228 $x56)))
 (let (($x239 (and (not $x264) $x315)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x47 $x179)))
 (let (($x140 (not $x139)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x211 $x297)))
 (let (($x167 (and (not $x98) $x140)))
 (let (($x64 (and (and (and (and (and (and $x167 $x239) $x75) $x145) $x121) $x209) $x103)))
 (let (($x74 (and $x64 $x26)))
 (let (($x284 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x303 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x303)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x303)))
 (let (($x298 (or false (or false (and (and true (or $x14 $x38)) (or $x304 $x284))))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x298)))
 (let (($x20 (and $x109 $x74)))
 (let (($x206 (= $x20 true)))
 (let (($x94 (= $x206 true)))
 (let (($x282 (= $x94 true)))
 (let (($x290 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x300 (= $x290 true)))
 (let (($x317 (= $x300 true)))
 (let (($x100 (= $x317 true)))
 (let ((?x248 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x69 (= (_ bv0 2) ?x248)))
 (let (($x253 (= $x69 true)))
 (let (($x233 (= $x253 true)))
 (let ((?x205 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x320 (bvneg ?x205)))
 (let (($x39 (= ?x320 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x39 true)))
 (let (($x54 (= $x91 true)))
 (let (($x17 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x59 (= $x17 true)))
 (let (($x246 (= $x59 true)))
 (let (($x70 (= $x246 true)))
 (let (($x201 (and $x70 $x54)))
 (let (($x146 (and $x201 $x233)))
 (let (($x118 (and $x146 $x100)))
 (let (($x265 (and $x118 $x282)))
 (let (($x173 (and $x265 $x67)))
 (let (($x5 (and $x173 $x48)))
 (let (($x84 (and $x5 $x159)))
 (let (($x57 (and $x84 $x95)))
 (let (($x199 (and $x57 $x226)))
 (let (($x104 (and $x199 $x213)))
 (let (($x80 (and $x104 $x11)))
 (let (($x222 (and $x80 $x174)))
 (let (($x35 (and $x222 $x266)))
 (let (($x166 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x37 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x37 (_ bv1 32))))
 (let (($x283 (and $x97 $x35)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x229 (and $x142 $x283)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x161 (and $x78 $x229)))
 (let (($x231 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x244 (and $x231 $x161)))
 (let (($x68 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd ?x86 (_ bv3 32))))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x63 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x120)))
 (let (($x105 (or false (or false (and (and true (or $x196 $x63)) (or $x235 $x68))))))
 (let (($x122 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x105)))
 (let (($x163 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x105)))
 (let (($x292 (and $x163 $x244)))
 (let (($x158 (=> $x292 $x106)))
 (not $x158))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x291 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x55 (bvule ?x291 input.dst.llvm-%n)))
 (let (($x262 (= $x55 true)))
 (let (($x312 (= $x262 true)))
 (let (($x88 (forall ((input.ind-%var1984X (_ BitVec 32)) )(let ((?x274 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1984X)))
 (let ((?x218 (input.spec-%var-x-1.1.1 input.ind-%var1984X)))
 (let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var1984X)))
 (=> $x42 (= ?x218 ?x274))))))
 ))
 (let (($x210 (forall ((input.ind-%var1983X (_ BitVec 32)) )(let (($x97 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1983X)))
 (let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var1983X)))
 (= $x42 $x97))))
 ))
 (let (($x136 (and $x210 $x88)))
 (let (($x40 (= $x136 true)))
 (let (($x164 (forall ((input.ind-%var1978X (_ BitVec 32)) )(let ((?x295 (bvadd (bvmul input.ind-%var1978X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv1 32))) (select input.dst.llvm-mem ?x295))))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv2 32))) ?x266))))
 (let ((?x274 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1978X)))
 (let (($x97 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1978X)))
 (=> $x97 (= ?x274 ?x292))))))))
 ))
 (let (($x186 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let (($x89 (and (bvule (_ bv0 32) input.ind-%var1977X) (bvult input.ind-%var1977X input.dst.llvm-%n))))
 (let (($x97 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1977X)))
 (= $x97 $x89))))
 ))
 (let (($x99 (and $x186 $x164)))
 (let (($x41 (= $x99 true)))
 (let (($x52 (forall ((input.ind-%var1972X (_ BitVec 32)) )(let ((?x295 (bvadd (bvmul input.ind-%var1972X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv1 32))) (select input.dst.llvm-mem ?x295))))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv2 32))) ?x266))))
 (let ((?x218 (input.spec-%var-x-1.1.1 input.ind-%var1972X)))
 (let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var1972X)))
 (=> $x42 (= ?x218 ?x292))))))))
 ))
 (let (($x172 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let (($x89 (and (bvule (_ bv0 32) input.ind-%var1971X) (bvult input.ind-%var1971X input.dst.llvm-%n))))
 (let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var1971X)))
 (= $x42 $x89))))
 ))
 (let (($x106 (and $x172 $x52)))
 (let (($x158 (= $x106 true)))
 (let ((?x104 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x104)))
 (let (($x255 (= ?x149 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x252 (= $x255 true)))
 (let (($x243 (= $x252 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x132 (= $x202 true)))
 (let (($x115 (= $x132 true)))
 (let (($x138 (= $x115 true)))
 (let (($x272 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x256 (= $x272 true)))
 (let (($x150 (= $x256 true)))
 (let (($x226 (= $x150 true)))
 (let (($x220 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x148 (= $x220 true)))
 (let (($x144 (= $x148 true)))
 (let (($x95 (= $x144 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x296 (bvsub ?x86 ?x51)))
 (let (($x305 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 ?x296) (bvult ?x86 ?x296))))
 (let (($x160 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x108 (ite $x160 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x81 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x10 (bvmul (_ bv4 64) ?x81)))
 (let ((?x44 ((_ extract 63 32) ?x10)))
 (let (($x131 (= ?x44 ?x108)))
 (let (($x302 (and $x131 $x305)))
 (let (($x178 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x48 (and $x178 $x302)))
 (let (($x5 (= true $x48)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x151 (=> $x101 $x5)))
 (let (($x249 (= $x151 true)))
 (let (($x273 (= $x249 true)))
 (let (($x159 (= $x273 true)))
 (let (($x25 (= $x101 true)))
 (let (($x154 (= $x25 true)))
 (let (($x281 (= $x154 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x318 (= (_ bv0 32) ?x64)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x257)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (and $x107 $x121)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x204 $x175)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x239 $x250)))
 (let (($x75 (not $x12)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x315 (and $x114 $x184)))
 (let (($x76 (and (not $x315) $x75)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x167 $x228)))
 (let (($x264 (not $x56)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x38 $x119)))
 (let (($x299 (and (not $x140) $x264)))
 (let (($x282 (and (and (and (and (and (and $x299 $x76) $x208) $x135) $x242) $x32) $x103)))
 (let (($x265 (and $x282 $x318)))
 (let (($x211 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x284 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x284)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x284)))
 (let (($x47 (or false (or false (and (and true (or $x129 $x157)) (or $x109 $x211))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x47)))
 (let (($x72 (and $x139 $x265)))
 (let (($x176 (= $x72 true)))
 (let (($x67 (= $x176 true)))
 (let (($x173 (= $x67 true)))
 (let (($x118 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x46 (= $x118 true)))
 (let (($x83 (= $x46 true)))
 (let (($x288 (= $x83 true)))
 (let ((?x146 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x290 (= (_ bv0 2) ?x146)))
 (let (($x300 (= $x290 true)))
 (let (($x317 (= $x300 true)))
 (let ((?x91 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x91)))
 (let (($x261 (= ?x54 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x261 true)))
 (let (($x69 (= $x248 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x187 (= $x147 true)))
 (let (($x205 (= $x187 true)))
 (let (($x320 (= $x205 true)))
 (let (($x253 (and $x320 $x69)))
 (let (($x100 (and $x253 $x317)))
 (let (($x303 (and $x100 $x288)))
 (let (($x49 (and $x303 $x173)))
 (let (($x13 (and $x49 $x281)))
 (let (($x84 (and $x13 $x159)))
 (let (($x57 (and $x84 $x95)))
 (let (($x199 (and $x57 $x226)))
 (let (($x213 (and $x199 $x138)))
 (let (($x313 (and $x213 $x243)))
 (let (($x207 (and $x313 $x158)))
 (let (($x18 (and $x207 $x41)))
 (let (($x307 (and $x18 $x40)))
 (let (($x17 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x59 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x59 (_ bv1 32))))
 (let (($x219 (and $x246 $x307)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x82 (and $x79 $x219)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x247 (and $x193 $x82)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x137 $x247)))
 (let (($x90 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd ?x86 (_ bv3 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x125 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x163 (or false (or false (and (and true (or $x191 $x125)) (or $x93 $x90))))))
 (let (($x231 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x163)))
 (let (($x212 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x163)))
 (let (($x269 (and $x212 $x169)))
 (let (($x198 (=> $x269 $x312)))
 (not $x198))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x291 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x55 (bvule ?x291 input.dst.llvm-%n)))
 (let (($x262 (= $x55 true)))
 (let (($x312 (= $x262 true)))
 (let (($x88 (forall ((input.ind-%var1984X (_ BitVec 32)) )(let ((?x274 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1984X)))
 (let ((?x218 (input.spec-%var-x-1.1.1 input.ind-%var1984X)))
 (let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var1984X)))
 (=> $x42 (= ?x218 ?x274))))))
 ))
 (let (($x210 (forall ((input.ind-%var1983X (_ BitVec 32)) )(let (($x97 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1983X)))
 (let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var1983X)))
 (= $x42 $x97))))
 ))
 (let (($x136 (and $x210 $x88)))
 (let (($x40 (= $x136 true)))
 (let (($x164 (forall ((input.ind-%var1978X (_ BitVec 32)) )(let ((?x295 (bvadd (bvmul input.ind-%var1978X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv1 32))) (select input.dst.llvm-mem ?x295))))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv2 32))) ?x266))))
 (let ((?x274 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1978X)))
 (let (($x97 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1978X)))
 (=> $x97 (= ?x274 ?x292))))))))
 ))
 (let (($x186 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let (($x89 (and (bvule (_ bv0 32) input.ind-%var1977X) (bvult input.ind-%var1977X input.dst.llvm-%n))))
 (let (($x97 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1977X)))
 (= $x97 $x89))))
 ))
 (let (($x99 (and $x186 $x164)))
 (let (($x41 (= $x99 true)))
 (let (($x52 (forall ((input.ind-%var1972X (_ BitVec 32)) )(let ((?x295 (bvadd (bvmul input.ind-%var1972X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv1 32))) (select input.dst.llvm-mem ?x295))))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv2 32))) ?x266))))
 (let ((?x218 (input.spec-%var-x-1.1.1 input.ind-%var1972X)))
 (let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var1972X)))
 (=> $x42 (= ?x218 ?x292))))))))
 ))
 (let (($x172 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let (($x89 (and (bvule (_ bv0 32) input.ind-%var1971X) (bvult input.ind-%var1971X input.dst.llvm-%n))))
 (let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var1971X)))
 (= $x42 $x89))))
 ))
 (let (($x106 (and $x172 $x52)))
 (let (($x158 (= $x106 true)))
 (let ((?x104 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x104)))
 (let (($x255 (= ?x149 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x252 (= $x255 true)))
 (let (($x243 (= $x252 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x132 (= $x202 true)))
 (let (($x115 (= $x132 true)))
 (let (($x138 (= $x115 true)))
 (let (($x272 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x256 (= $x272 true)))
 (let (($x150 (= $x256 true)))
 (let (($x226 (= $x150 true)))
 (let (($x220 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x148 (= $x220 true)))
 (let (($x144 (= $x148 true)))
 (let (($x95 (= $x144 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x296 (bvsub ?x86 ?x51)))
 (let (($x305 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 ?x296) (bvult ?x86 ?x296))))
 (let (($x160 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x108 (ite $x160 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x81 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x10 (bvmul (_ bv4 64) ?x81)))
 (let ((?x44 ((_ extract 63 32) ?x10)))
 (let (($x131 (= ?x44 ?x108)))
 (let (($x302 (and $x131 $x305)))
 (let (($x178 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x48 (and $x178 $x302)))
 (let (($x5 (= true $x48)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x151 (=> $x101 $x5)))
 (let (($x249 (= $x151 true)))
 (let (($x273 (= $x249 true)))
 (let (($x159 (= $x273 true)))
 (let (($x25 (= $x101 true)))
 (let (($x154 (= $x25 true)))
 (let (($x281 (= $x154 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x318 (= (_ bv0 32) ?x64)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x257)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (and $x107 $x121)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x204 $x175)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x239 $x250)))
 (let (($x75 (not $x12)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x315 (and $x114 $x184)))
 (let (($x76 (and (not $x315) $x75)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x167 $x228)))
 (let (($x264 (not $x56)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x38 $x119)))
 (let (($x299 (and (not $x140) $x264)))
 (let (($x282 (and (and (and (and (and (and $x299 $x76) $x208) $x135) $x242) $x32) $x103)))
 (let (($x265 (and $x282 $x318)))
 (let (($x211 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x284 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x284)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x284)))
 (let (($x47 (or false (or false (and (and true (or $x129 $x157)) (or $x109 $x211))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x47)))
 (let (($x72 (and $x139 $x265)))
 (let (($x176 (= $x72 true)))
 (let (($x67 (= $x176 true)))
 (let (($x173 (= $x67 true)))
 (let (($x118 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x46 (= $x118 true)))
 (let (($x83 (= $x46 true)))
 (let (($x288 (= $x83 true)))
 (let ((?x146 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x290 (= (_ bv0 2) ?x146)))
 (let (($x300 (= $x290 true)))
 (let (($x317 (= $x300 true)))
 (let ((?x91 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x91)))
 (let (($x261 (= ?x54 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x261 true)))
 (let (($x69 (= $x248 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x187 (= $x147 true)))
 (let (($x205 (= $x187 true)))
 (let (($x320 (= $x205 true)))
 (let (($x253 (and $x320 $x69)))
 (let (($x100 (and $x253 $x317)))
 (let (($x303 (and $x100 $x288)))
 (let (($x49 (and $x303 $x173)))
 (let (($x13 (and $x49 $x281)))
 (let (($x84 (and $x13 $x159)))
 (let (($x57 (and $x84 $x95)))
 (let (($x199 (and $x57 $x226)))
 (let (($x213 (and $x199 $x138)))
 (let (($x313 (and $x213 $x243)))
 (let (($x207 (and $x313 $x158)))
 (let (($x18 (and $x207 $x41)))
 (let (($x307 (and $x18 $x40)))
 (let (($x17 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x59 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x59 (_ bv1 32))))
 (let (($x219 (and $x246 $x307)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x82 (and $x79 $x219)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x247 (and $x193 $x82)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x137 $x247)))
 (let (($x90 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd ?x86 (_ bv3 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x125 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x163 (or false (or false (and (and true (or $x191 $x125)) (or $x93 $x90))))))
 (let (($x231 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x163)))
 (let (($x212 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x163)))
 (let (($x269 (and $x212 $x169)))
 (let (($x198 (=> $x269 $x312)))
 (not $x198))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x263 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x168 (bvsge ?x263 (_ bv0 32))))
 (let (($x258 (= $x168 true)))
 (let (($x36 (= $x258 true)))
 (let (($x259 (forall ((input.ind-%var2007X (_ BitVec 32)) )(let ((?x134 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2007X)))
 (let ((?x292 (input.spec-%var-x-1.1.1 input.ind-%var2007X)))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var2007X)))
 (=> $x218 (= ?x292 ?x134))))))
 ))
 (let (($x85 (forall ((input.ind-%var2006X (_ BitVec 32)) )(let (($x246 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2006X)))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var2006X)))
 (= $x218 $x246))))
 ))
 (let (($x268 (and $x85 $x259)))
 (let (($x222 (= $x268 true)))
 (let (($x232 (forall ((input.ind-%var2001X (_ BitVec 32)) )(let ((?x171 (bvadd (bvmul input.ind-%var2001X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x40))))
 (let ((?x134 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2001X)))
 (let (($x246 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2001X)))
 (=> $x246 (= ?x134 ?x269))))))))
 ))
 (let (($x60 (forall ((input.ind-%var2000X (_ BitVec 32)) )(let (($x283 (and (bvule (_ bv0 32) input.ind-%var2000X) (bvult input.ind-%var2000X input.dst.llvm-%n))))
 (let (($x246 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2000X)))
 (= $x246 $x283))))
 ))
 (let (($x195 (and $x60 $x232)))
 (let (($x287 (= $x195 true)))
 (let (($x262 (forall ((input.ind-%var1995X (_ BitVec 32)) )(let ((?x171 (bvadd (bvmul input.ind-%var1995X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x40))))
 (let ((?x292 (input.spec-%var-x-1.1.1 input.ind-%var1995X)))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var1995X)))
 (=> $x218 (= ?x292 ?x269))))))))
 ))
 (let (($x152 (forall ((input.ind-%var1994X (_ BitVec 32)) )(let (($x283 (and (bvule (_ bv0 32) input.ind-%var1994X) (bvult input.ind-%var1994X input.dst.llvm-%n))))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var1994X)))
 (= $x218 $x283))))
 ))
 (let (($x312 (and $x152 $x262)))
 (let (($x198 (= $x312 true)))
 (let ((?x313 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x313)))
 (let (($x42 (= ?x37 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x45 (= $x42 true)))
 (let (($x215 (= $x45 true)))
 (let (($x104 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x149 (= $x104 true)))
 (let (($x255 (= $x149 true)))
 (let (($x252 (= $x255 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x132 (= $x202 true)))
 (let (($x115 (= $x132 true)))
 (let (($x138 (= $x115 true)))
 (let (($x272 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x256 (= $x272 true)))
 (let (($x150 (= $x256 true)))
 (let (($x226 (= $x150 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x302 (bvsub ?x86 ?x51)))
 (let (($x249 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 ?x302) (bvult ?x86 ?x302))))
 (let (($x96 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x185 (ite $x96 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x131 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x251 (bvmul (_ bv4 64) ?x131)))
 (let ((?x296 ((_ extract 63 32) ?x251)))
 (let (($x305 (= ?x296 ?x185)))
 (let (($x273 (and $x305 $x249)))
 (let (($x160 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x159 (and $x160 $x273)))
 (let (($x84 (= true $x159)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (=> $x101 $x84)))
 (let (($x148 (= $x220 true)))
 (let (($x144 (= $x148 true)))
 (let (($x95 (= $x144 true)))
 (let (($x286 (= $x101 true)))
 (let (($x178 (= $x286 true)))
 (let (($x22 (= $x178 true)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x282)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x257)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x242 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x175)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (and $x121 $x242)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x87 $x206)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x76 $x26)))
 (let (($x208 (not $x145)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x250 $x12)))
 (let (($x221 (and (not $x75) $x208)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x299 $x114)))
 (let (($x315 (not $x184)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x157 $x267)))
 (let (($x239 (and (not $x264) $x315)))
 (let (($x173 (and (and (and (and (and (and $x239 $x221) $x20) $x107) $x209) $x94) $x103)))
 (let (($x49 (and $x173 $x64)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x211 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x211)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x211)))
 (let (($x167 (or false (or false (and (and true (or $x297 $x98)) (or $x139 $x38))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x167)))
 (let (($x25 (and $x56 $x49)))
 (let (($x154 (= $x25 true)))
 (let (($x281 (= $x154 true)))
 (let (($x13 (= $x281 true)))
 (let (($x303 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x71 (= $x303 true)))
 (let (($x304 (= $x71 true)))
 (let (($x179 (= $x304 true)))
 (let ((?x100 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x118 (= (_ bv0 2) ?x100)))
 (let (($x46 (= $x118 true)))
 (let (($x83 (= $x46 true)))
 (let ((?x248 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x248)))
 (let (($x233 (= ?x69 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x146 (= $x233 true)))
 (let (($x290 (= $x146 true)))
 (let (($x241 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x39 (= $x241 true)))
 (let (($x91 (= $x39 true)))
 (let (($x54 (= $x91 true)))
 (let (($x300 (and $x54 $x290)))
 (let (($x288 (and $x300 $x83)))
 (let (($x284 (and $x288 $x179)))
 (let (($x130 (and $x284 $x13)))
 (let (($x81 (and $x130 $x22)))
 (let (($x57 (and $x81 $x95)))
 (let (($x199 (and $x57 $x226)))
 (let (($x213 (and $x199 $x138)))
 (let (($x243 (and $x213 $x252)))
 (let (($x89 (and $x243 $x215)))
 (let (($x294 (and $x89 $x198)))
 (let (($x189 (and $x294 $x287)))
 (let (($x223 (and $x189 $x222)))
 (let (($x147 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x187 (ite $x147 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x187 (_ bv1 32))))
 (let (($x23 (and $x205 $x223)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x309 (and $x166 $x23)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x127 (and $x142 $x309)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x181 $x127)))
 (let (($x105 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x125 (bvadd ?x86 (_ bv3 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x235 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x125)))
 (let (($x212 (or false (or false (and (and true (or $x141 $x235)) (or $x133 $x105))))))
 (let (($x137 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x212)))
 (let (($x225 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x212)))
 (let (($x254 (and $x225 $x203)))
 (let (($x238 (=> $x254 $x36)))
 (not $x238))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x263 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x168 (bvsge ?x263 (_ bv0 32))))
 (let (($x258 (= $x168 true)))
 (let (($x36 (= $x258 true)))
 (let (($x259 (forall ((input.ind-%var2007X (_ BitVec 32)) )(let ((?x134 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2007X)))
 (let ((?x292 (input.spec-%var-x-1.1.1 input.ind-%var2007X)))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var2007X)))
 (=> $x218 (= ?x292 ?x134))))))
 ))
 (let (($x85 (forall ((input.ind-%var2006X (_ BitVec 32)) )(let (($x246 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2006X)))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var2006X)))
 (= $x218 $x246))))
 ))
 (let (($x268 (and $x85 $x259)))
 (let (($x222 (= $x268 true)))
 (let (($x232 (forall ((input.ind-%var2001X (_ BitVec 32)) )(let ((?x171 (bvadd (bvmul input.ind-%var2001X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x40))))
 (let ((?x134 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2001X)))
 (let (($x246 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2001X)))
 (=> $x246 (= ?x134 ?x269))))))))
 ))
 (let (($x60 (forall ((input.ind-%var2000X (_ BitVec 32)) )(let (($x283 (and (bvule (_ bv0 32) input.ind-%var2000X) (bvult input.ind-%var2000X input.dst.llvm-%n))))
 (let (($x246 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2000X)))
 (= $x246 $x283))))
 ))
 (let (($x195 (and $x60 $x232)))
 (let (($x287 (= $x195 true)))
 (let (($x262 (forall ((input.ind-%var1995X (_ BitVec 32)) )(let ((?x171 (bvadd (bvmul input.ind-%var1995X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x40))))
 (let ((?x292 (input.spec-%var-x-1.1.1 input.ind-%var1995X)))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var1995X)))
 (=> $x218 (= ?x292 ?x269))))))))
 ))
 (let (($x152 (forall ((input.ind-%var1994X (_ BitVec 32)) )(let (($x283 (and (bvule (_ bv0 32) input.ind-%var1994X) (bvult input.ind-%var1994X input.dst.llvm-%n))))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var1994X)))
 (= $x218 $x283))))
 ))
 (let (($x312 (and $x152 $x262)))
 (let (($x198 (= $x312 true)))
 (let ((?x313 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x313)))
 (let (($x42 (= ?x37 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x45 (= $x42 true)))
 (let (($x215 (= $x45 true)))
 (let (($x104 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x149 (= $x104 true)))
 (let (($x255 (= $x149 true)))
 (let (($x252 (= $x255 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x132 (= $x202 true)))
 (let (($x115 (= $x132 true)))
 (let (($x138 (= $x115 true)))
 (let (($x272 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x256 (= $x272 true)))
 (let (($x150 (= $x256 true)))
 (let (($x226 (= $x150 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x302 (bvsub ?x86 ?x51)))
 (let (($x249 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 ?x302) (bvult ?x86 ?x302))))
 (let (($x96 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x185 (ite $x96 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x131 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x251 (bvmul (_ bv4 64) ?x131)))
 (let ((?x296 ((_ extract 63 32) ?x251)))
 (let (($x305 (= ?x296 ?x185)))
 (let (($x273 (and $x305 $x249)))
 (let (($x160 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x159 (and $x160 $x273)))
 (let (($x84 (= true $x159)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (=> $x101 $x84)))
 (let (($x148 (= $x220 true)))
 (let (($x144 (= $x148 true)))
 (let (($x95 (= $x144 true)))
 (let (($x286 (= $x101 true)))
 (let (($x178 (= $x286 true)))
 (let (($x22 (= $x178 true)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x282)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x257)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x242 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x175)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (and $x121 $x242)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x87 $x206)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x76 $x26)))
 (let (($x208 (not $x145)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x250 $x12)))
 (let (($x221 (and (not $x75) $x208)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x299 $x114)))
 (let (($x315 (not $x184)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x157 $x267)))
 (let (($x239 (and (not $x264) $x315)))
 (let (($x173 (and (and (and (and (and (and $x239 $x221) $x20) $x107) $x209) $x94) $x103)))
 (let (($x49 (and $x173 $x64)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x211 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x211)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x211)))
 (let (($x167 (or false (or false (and (and true (or $x297 $x98)) (or $x139 $x38))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x167)))
 (let (($x25 (and $x56 $x49)))
 (let (($x154 (= $x25 true)))
 (let (($x281 (= $x154 true)))
 (let (($x13 (= $x281 true)))
 (let (($x303 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x71 (= $x303 true)))
 (let (($x304 (= $x71 true)))
 (let (($x179 (= $x304 true)))
 (let ((?x100 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x118 (= (_ bv0 2) ?x100)))
 (let (($x46 (= $x118 true)))
 (let (($x83 (= $x46 true)))
 (let ((?x248 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x248)))
 (let (($x233 (= ?x69 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x146 (= $x233 true)))
 (let (($x290 (= $x146 true)))
 (let (($x241 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x39 (= $x241 true)))
 (let (($x91 (= $x39 true)))
 (let (($x54 (= $x91 true)))
 (let (($x300 (and $x54 $x290)))
 (let (($x288 (and $x300 $x83)))
 (let (($x284 (and $x288 $x179)))
 (let (($x130 (and $x284 $x13)))
 (let (($x81 (and $x130 $x22)))
 (let (($x57 (and $x81 $x95)))
 (let (($x199 (and $x57 $x226)))
 (let (($x213 (and $x199 $x138)))
 (let (($x243 (and $x213 $x252)))
 (let (($x89 (and $x243 $x215)))
 (let (($x294 (and $x89 $x198)))
 (let (($x189 (and $x294 $x287)))
 (let (($x223 (and $x189 $x222)))
 (let (($x147 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x187 (ite $x147 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x187 (_ bv1 32))))
 (let (($x23 (and $x205 $x223)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x309 (and $x166 $x23)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x127 (and $x142 $x309)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x181 $x127)))
 (let (($x105 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x125 (bvadd ?x86 (_ bv3 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x235 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x125)))
 (let (($x212 (or false (or false (and (and true (or $x141 $x235)) (or $x133 $x105))))))
 (let (($x137 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x212)))
 (let (($x225 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x212)))
 (let (($x254 (and $x225 $x203)))
 (let (($x238 (=> $x254 $x36)))
 (not $x238))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x153 (ite $x18 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x153 (_ bv1 32))))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x319 (not $x101)))
 (let (($x266 (or $x319 $x311)))
 (let (($x182 (= $x266 true)))
 (let (($x197 (= $x182 true)))
 (let (($x116 (forall ((input.ind-%var2030X (_ BitVec 32)) )(let ((?x19 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2030X)))
 (let ((?x169 (input.spec-%var-x-1.1.1 input.ind-%var2030X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var2030X)))
 (=> $x215 (= ?x169 ?x19))))))
 ))
 (let (($x314 (forall ((input.ind-%var2029X (_ BitVec 32)) )(let (($x254 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2029X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var2029X)))
 (= $x215 $x254))))
 ))
 (let (($x92 (and $x314 $x116)))
 (let (($x237 (= $x92 true)))
 (let (($x41 (forall ((input.ind-%var2024X (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul input.ind-%var2024X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x195))))
 (let ((?x19 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2024X)))
 (let (($x254 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2024X)))
 (=> $x254 (= ?x19 ?x271))))))))
 ))
 (let (($x8 (forall ((input.ind-%var2023X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var2023X) (bvult input.ind-%var2023X input.dst.llvm-%n))))
 (let (($x254 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2023X)))
 (= $x254 $x152))))
 ))
 (let (($x65 (and $x8 $x41)))
 (let (($x170 (= $x65 true)))
 (let (($x222 (forall ((input.ind-%var2018X (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul input.ind-%var2018X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x195))))
 (let ((?x169 (input.spec-%var-x-1.1.1 input.ind-%var2018X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var2018X)))
 (=> $x215 (= ?x169 ?x271))))))))
 ))
 (let (($x66 (forall ((input.ind-%var2017X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var2017X) (bvult input.ind-%var2017X input.dst.llvm-%n))))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var2017X)))
 (= $x215 $x152))))
 ))
 (let (($x223 (and $x66 $x222)))
 (let (($x23 (= $x223 true)))
 (let ((?x104 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x104)))
 (let (($x255 (= ?x149 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x252 (= $x255 true)))
 (let (($x243 (= $x252 true)))
 (let (($x202 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x132 (= $x202 true)))
 (let (($x115 (= $x132 true)))
 (let (($x138 (= $x115 true)))
 (let (($x272 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x256 (= $x272 true)))
 (let (($x150 (= $x256 true)))
 (let (($x226 (= $x150 true)))
 (let (($x220 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x220 true)))
 (let (($x144 (= $x148 true)))
 (let (($x95 (= $x144 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x249 (= $x151 true)))
 (let (($x273 (= $x249 true)))
 (let (($x159 (= $x273 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x10 (bvsub ?x86 ?x51)))
 (let (($x131 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 ?x10) (bvult ?x86 ?x10))))
 (let (($x178 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x22 (ite $x178 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x13 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvmul (_ bv4 64) ?x13)))
 (let ((?x286 ((_ extract 63 32) ?x130)))
 (let (($x81 (= ?x286 ?x22)))
 (let (($x251 (and $x81 $x131)))
 (let (($x154 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x296 (and $x154 $x251)))
 (let (($x96 (= true $x296)))
 (let (($x185 (=> $x101 $x96)))
 (let (($x305 (= $x185 true)))
 (let (($x48 (= $x305 true)))
 (let (($x302 (= $x48 true)))
 (let (($x257 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x103 (= $x257 true)))
 (let (($x173 (= $x103 true)))
 (let (($x282 (= $x173 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x135)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x318 (= (_ bv0 32) ?x221)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (and $x12 $x74)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x250 $x76)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (and $x56 $x157)))
 (let (($x264 (not $x267)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x140 $x301)))
 (let (($x299 (and (not $x167) $x264)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x98 $x21)))
 (let (($x139 (not $x47)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x297 (and $x290 $x300)))
 (let (($x119 (and (not $x297) $x139)))
 (let (($x121 (and (and (and (and (and (and $x119 $x299) $x184) $x239) $x26) $x208) $x318)))
 (let (($x175 (and $x121 $x20)))
 (let (($x304 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x109 (or false (or false (and (and true (or $x46 $x83)) (or $x71 $x304))))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x109)))
 (let (($x242 (and $x211 $x175)))
 (let (($x206 (= $x242 true)))
 (let (($x209 (= $x206 true)))
 (let (($x176 (= $x209 true)))
 (let ((?x261 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x248 (= (_ bv0 2) ?x261)))
 (let (($x69 (= $x248 true)))
 (let (($x253 (= $x69 true)))
 (let ((?x205 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x320 (bvneg ?x205)))
 (let (($x39 (= ?x320 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x39 true)))
 (let (($x54 (= $x91 true)))
 (let (($x233 (and $x54 $x253)))
 (let (($x32 (and $x233 $x176)))
 (let (($x64 (and $x32 $x282)))
 (let (($x5 (and $x64 $x302)))
 (let (($x84 (and $x5 $x159)))
 (let (($x57 (and $x84 $x95)))
 (let (($x199 (and $x57 $x226)))
 (let (($x213 (and $x199 $x138)))
 (let (($x313 (and $x213 $x243)))
 (let (($x309 (and $x313 $x23)))
 (let (($x77 (and $x309 $x170)))
 (let (($x227 (and $x77 $x237)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x50 (and $x17 $x227)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x279 (and $x79 $x50)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x244 (and $x78 $x279)))
 (let (($x163 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x235 (bvadd ?x86 (_ bv3 32))))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x235)))
 (let (($x93 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x235)))
 (let (($x225 (or false (or false (and (and true (or $x102 $x93)) (or $x122 $x163))))))
 (let (($x181 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x225)))
 (let (($x120 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x225)))
 (let (($x14 (and $x120 $x244)))
 (let (($x15 (=> $x14 $x197)))
 (not $x15)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x153 (ite $x18 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x153 (_ bv1 32))))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x319 (not $x101)))
 (let (($x266 (or $x319 $x311)))
 (let (($x182 (= $x266 true)))
 (let (($x197 (= $x182 true)))
 (let (($x116 (forall ((input.ind-%var2030X (_ BitVec 32)) )(let ((?x19 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2030X)))
 (let ((?x169 (input.spec-%var-x-1.1.1 input.ind-%var2030X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var2030X)))
 (=> $x215 (= ?x169 ?x19))))))
 ))
 (let (($x314 (forall ((input.ind-%var2029X (_ BitVec 32)) )(let (($x254 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2029X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var2029X)))
 (= $x215 $x254))))
 ))
 (let (($x92 (and $x314 $x116)))
 (let (($x237 (= $x92 true)))
 (let (($x41 (forall ((input.ind-%var2024X (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul input.ind-%var2024X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x195))))
 (let ((?x19 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2024X)))
 (let (($x254 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2024X)))
 (=> $x254 (= ?x19 ?x271))))))))
 ))
 (let (($x8 (forall ((input.ind-%var2023X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var2023X) (bvult input.ind-%var2023X input.dst.llvm-%n))))
 (let (($x254 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2023X)))
 (= $x254 $x152))))
 ))
 (let (($x65 (and $x8 $x41)))
 (let (($x170 (= $x65 true)))
 (let (($x222 (forall ((input.ind-%var2018X (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul input.ind-%var2018X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x195))))
 (let ((?x169 (input.spec-%var-x-1.1.1 input.ind-%var2018X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var2018X)))
 (=> $x215 (= ?x169 ?x271))))))))
 ))
 (let (($x66 (forall ((input.ind-%var2017X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var2017X) (bvult input.ind-%var2017X input.dst.llvm-%n))))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var2017X)))
 (= $x215 $x152))))
 ))
 (let (($x223 (and $x66 $x222)))
 (let (($x23 (= $x223 true)))
 (let ((?x104 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x104)))
 (let (($x255 (= ?x149 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x252 (= $x255 true)))
 (let (($x243 (= $x252 true)))
 (let (($x202 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x132 (= $x202 true)))
 (let (($x115 (= $x132 true)))
 (let (($x138 (= $x115 true)))
 (let (($x272 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x256 (= $x272 true)))
 (let (($x150 (= $x256 true)))
 (let (($x226 (= $x150 true)))
 (let (($x220 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x220 true)))
 (let (($x144 (= $x148 true)))
 (let (($x95 (= $x144 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x249 (= $x151 true)))
 (let (($x273 (= $x249 true)))
 (let (($x159 (= $x273 true)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let ((?x10 (bvsub ?x86 ?x51)))
 (let (($x131 (ite (bvsge ?x51 (_ bv0 32)) (bvuge ?x86 ?x10) (bvult ?x86 ?x10))))
 (let (($x178 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x22 (ite $x178 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x13 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvmul (_ bv4 64) ?x13)))
 (let ((?x286 ((_ extract 63 32) ?x130)))
 (let (($x81 (= ?x286 ?x22)))
 (let (($x251 (and $x81 $x131)))
 (let (($x154 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x296 (and $x154 $x251)))
 (let (($x96 (= true $x296)))
 (let (($x185 (=> $x101 $x96)))
 (let (($x305 (= $x185 true)))
 (let (($x48 (= $x305 true)))
 (let (($x302 (= $x48 true)))
 (let (($x257 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x103 (= $x257 true)))
 (let (($x173 (= $x103 true)))
 (let (($x282 (= $x173 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x135)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x318 (= (_ bv0 32) ?x221)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (and $x12 $x74)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x250 $x76)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (and $x56 $x157)))
 (let (($x264 (not $x267)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x140 $x301)))
 (let (($x299 (and (not $x167) $x264)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x98 $x21)))
 (let (($x139 (not $x47)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x297 (and $x290 $x300)))
 (let (($x119 (and (not $x297) $x139)))
 (let (($x121 (and (and (and (and (and (and $x119 $x299) $x184) $x239) $x26) $x208) $x318)))
 (let (($x175 (and $x121 $x20)))
 (let (($x304 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x109 (or false (or false (and (and true (or $x46 $x83)) (or $x71 $x304))))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x109)))
 (let (($x242 (and $x211 $x175)))
 (let (($x206 (= $x242 true)))
 (let (($x209 (= $x206 true)))
 (let (($x176 (= $x209 true)))
 (let ((?x261 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x248 (= (_ bv0 2) ?x261)))
 (let (($x69 (= $x248 true)))
 (let (($x253 (= $x69 true)))
 (let ((?x205 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x320 (bvneg ?x205)))
 (let (($x39 (= ?x320 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x39 true)))
 (let (($x54 (= $x91 true)))
 (let (($x233 (and $x54 $x253)))
 (let (($x32 (and $x233 $x176)))
 (let (($x64 (and $x32 $x282)))
 (let (($x5 (and $x64 $x302)))
 (let (($x84 (and $x5 $x159)))
 (let (($x57 (and $x84 $x95)))
 (let (($x199 (and $x57 $x226)))
 (let (($x213 (and $x199 $x138)))
 (let (($x313 (and $x213 $x243)))
 (let (($x309 (and $x313 $x23)))
 (let (($x77 (and $x309 $x170)))
 (let (($x227 (and $x77 $x237)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x50 (and $x17 $x227)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x279 (and $x79 $x50)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x244 (and $x78 $x279)))
 (let (($x163 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x235 (bvadd ?x86 (_ bv3 32))))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x235)))
 (let (($x93 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x235)))
 (let (($x225 (or false (or false (and (and true (or $x102 $x93)) (or $x122 $x163))))))
 (let (($x181 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x225)))
 (let (($x120 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x225)))
 (let (($x14 (and $x120 $x244)))
 (let (($x15 (=> $x14 $x197)))
 (not $x15)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 195 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x35 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x229 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x274 (= ?x229 (_ bv0 32))))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x230 (or $x101 $x274)))
 (let (($x106 (= $x230 true)))
 (let (($x164 (= $x106 true)))
 (let (($x294 (forall ((input.ind-%var2053X (_ BitVec 32)) )(let ((?x50 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2053X)))
 (let ((?x252 (input.spec-%var-x-1.1.1 input.ind-%var2053X)))
 (let (($x57 (input.spec-%var-x-1.0.1 input.ind-%var2053X)))
 (=> $x57 (= ?x252 ?x50))))))
 ))
 (let (($x312 (forall ((input.ind-%var2052X (_ BitVec 32)) )(let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2052X)))
 (let (($x57 (input.spec-%var-x-1.0.1 input.ind-%var2052X)))
 (= $x57 $x65))))
 ))
 (let (($x129 (and $x312 $x294)))
 (let (($x177 (= $x129 true)))
 (let (($x186 (forall ((input.ind-%var2047X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var2047X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x245))))
 (let ((?x50 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2047X)))
 (let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2047X)))
 (=> $x65 (= ?x50 ?x23))))))))
 ))
 (let (($x116 (forall ((input.ind-%var2046X (_ BitVec 32)) )(let (($x115 (and (bvule (_ bv0 32) input.ind-%var2046X) (bvult input.ind-%var2046X input.dst.llvm-%n))))
 (let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2046X)))
 (= $x65 $x115))))
 ))
 (let (($x174 (and $x116 $x186)))
 (let (($x210 (= $x174 true)))
 (let (($x306 (forall ((input.ind-%var2041X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var2041X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x245))))
 (let ((?x252 (input.spec-%var-x-1.1.1 input.ind-%var2041X)))
 (let (($x57 (input.spec-%var-x-1.0.1 input.ind-%var2041X)))
 (=> $x57 (= ?x252 ?x23))))))))
 ))
 (let (($x213 (forall ((input.ind-%var2040X (_ BitVec 32)) )(let (($x115 (and (bvule (_ bv0 32) input.ind-%var2040X) (bvult input.ind-%var2040X input.dst.llvm-%n))))
 (let (($x57 (input.spec-%var-x-1.0.1 input.ind-%var2040X)))
 (= $x57 $x115))))
 ))
 (let (($x8 (and $x213 $x306)))
 (let (($x19 (= $x8 true)))
 (let ((?x5 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x5)))
 (let (($x249 (= ?x151 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x249 true)))
 (let (($x159 (= $x273 true)))
 (let (($x96 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x96 true)))
 (let (($x305 (= $x185 true)))
 (let (($x48 (= $x305 true)))
 (let (($x160 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x108 (= $x160 true)))
 (let (($x131 (= $x108 true)))
 (let (($x251 (= $x131 true)))
 (let (($x178 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (= $x178 true)))
 (let (($x81 (= $x22 true)))
 (let (($x44 (= $x81 true)))
 (let (($x154 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x281 (= $x154 true)))
 (let (($x13 (= $x281 true)))
 (let (($x130 (= $x13 true)))
 (let (($x173 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x282 (= $x173 true)))
 (let (($x64 (= $x282 true)))
 (let (($x49 (= $x64 true)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x87)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x145)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x250 $x75)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x107 $x74)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x157 $x267)))
 (let (($x299 (not $x264)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x167 $x123)))
 (let (($x114 (and (not $x56) $x299)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x21 $x47)))
 (let (($x119 (not $x139)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x228 $x118)))
 (let (($x301 (and (not $x98) $x119)))
 (let (($x242 (and (and (and (and (and (and $x301 $x114) $x204) $x239) $x76) $x72) $x208)))
 (let (($x206 (and $x242 $x221)))
 (let (($x298 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x288 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x284 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x288)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x303 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x288)))
 (let (($x300 (or false (or false (and (and true (or $x303 $x71)) (or $x284 $x298))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x300)))
 (let (($x209 (and $x38 $x206)))
 (let (($x176 (= $x209 true)))
 (let (($x32 (= $x176 true)))
 (let (($x67 (= $x32 true)))
 (let ((?x248 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x69 (= (_ bv0 2) ?x248)))
 (let (($x253 (= $x69 true)))
 (let (($x233 (= $x253 true)))
 (let ((?x320 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x241 (bvneg ?x320)))
 (let (($x91 (= ?x241 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x91 true)))
 (let (($x201 (= $x54 true)))
 (let (($x317 (and $x201 $x233)))
 (let (($x257 (and $x317 $x67)))
 (let (($x25 (and $x257 $x49)))
 (let (($x286 (and $x25 $x130)))
 (let (($x10 (and $x286 $x44)))
 (let (($x296 (and $x10 $x251)))
 (let (($x302 (and $x296 $x48)))
 (let (($x84 (and $x302 $x159)))
 (let (($x200 (and $x84 $x19)))
 (let (($x247 (and $x200 $x210)))
 (let (($x127 (and $x247 $x177)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x168 (and $x147 $x127)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x258 (and $x166 $x168)))
 (let (($x193 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x9 (and $x193 $x258)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let (($x212 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd ?x86 (_ bv3 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x133 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x93)))
 (let (($x120 (or false (or false (and (and true (or $x68 $x133)) (or $x231 $x212))))))
 (let (($x78 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x120)))
 (let (($x63 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x120)))
 (let (($x42 (and $x63 $x9)))
 (let (($x240 (=> $x42 $x164)))
 (not $x240)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x35 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x229 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x274 (= ?x229 (_ bv0 32))))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x230 (or $x101 $x274)))
 (let (($x106 (= $x230 true)))
 (let (($x164 (= $x106 true)))
 (let (($x294 (forall ((input.ind-%var2053X (_ BitVec 32)) )(let ((?x50 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2053X)))
 (let ((?x252 (input.spec-%var-x-1.1.1 input.ind-%var2053X)))
 (let (($x57 (input.spec-%var-x-1.0.1 input.ind-%var2053X)))
 (=> $x57 (= ?x252 ?x50))))))
 ))
 (let (($x312 (forall ((input.ind-%var2052X (_ BitVec 32)) )(let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2052X)))
 (let (($x57 (input.spec-%var-x-1.0.1 input.ind-%var2052X)))
 (= $x57 $x65))))
 ))
 (let (($x129 (and $x312 $x294)))
 (let (($x177 (= $x129 true)))
 (let (($x186 (forall ((input.ind-%var2047X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var2047X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x245))))
 (let ((?x50 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2047X)))
 (let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2047X)))
 (=> $x65 (= ?x50 ?x23))))))))
 ))
 (let (($x116 (forall ((input.ind-%var2046X (_ BitVec 32)) )(let (($x115 (and (bvule (_ bv0 32) input.ind-%var2046X) (bvult input.ind-%var2046X input.dst.llvm-%n))))
 (let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2046X)))
 (= $x65 $x115))))
 ))
 (let (($x174 (and $x116 $x186)))
 (let (($x210 (= $x174 true)))
 (let (($x306 (forall ((input.ind-%var2041X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var2041X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x245))))
 (let ((?x252 (input.spec-%var-x-1.1.1 input.ind-%var2041X)))
 (let (($x57 (input.spec-%var-x-1.0.1 input.ind-%var2041X)))
 (=> $x57 (= ?x252 ?x23))))))))
 ))
 (let (($x213 (forall ((input.ind-%var2040X (_ BitVec 32)) )(let (($x115 (and (bvule (_ bv0 32) input.ind-%var2040X) (bvult input.ind-%var2040X input.dst.llvm-%n))))
 (let (($x57 (input.spec-%var-x-1.0.1 input.ind-%var2040X)))
 (= $x57 $x115))))
 ))
 (let (($x8 (and $x213 $x306)))
 (let (($x19 (= $x8 true)))
 (let ((?x5 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x5)))
 (let (($x249 (= ?x151 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x249 true)))
 (let (($x159 (= $x273 true)))
 (let (($x96 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x96 true)))
 (let (($x305 (= $x185 true)))
 (let (($x48 (= $x305 true)))
 (let (($x160 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x108 (= $x160 true)))
 (let (($x131 (= $x108 true)))
 (let (($x251 (= $x131 true)))
 (let (($x178 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (= $x178 true)))
 (let (($x81 (= $x22 true)))
 (let (($x44 (= $x81 true)))
 (let (($x154 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x281 (= $x154 true)))
 (let (($x13 (= $x281 true)))
 (let (($x130 (= $x13 true)))
 (let (($x173 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x282 (= $x173 true)))
 (let (($x64 (= $x282 true)))
 (let (($x49 (= $x64 true)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x87)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x145)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x250 $x75)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x107 $x74)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x157 $x267)))
 (let (($x299 (not $x264)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x167 $x123)))
 (let (($x114 (and (not $x56) $x299)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x21 $x47)))
 (let (($x119 (not $x139)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x228 $x118)))
 (let (($x301 (and (not $x98) $x119)))
 (let (($x242 (and (and (and (and (and (and $x301 $x114) $x204) $x239) $x76) $x72) $x208)))
 (let (($x206 (and $x242 $x221)))
 (let (($x298 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x288 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x284 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x288)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x303 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x288)))
 (let (($x300 (or false (or false (and (and true (or $x303 $x71)) (or $x284 $x298))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x300)))
 (let (($x209 (and $x38 $x206)))
 (let (($x176 (= $x209 true)))
 (let (($x32 (= $x176 true)))
 (let (($x67 (= $x32 true)))
 (let ((?x248 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x69 (= (_ bv0 2) ?x248)))
 (let (($x253 (= $x69 true)))
 (let (($x233 (= $x253 true)))
 (let ((?x320 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x241 (bvneg ?x320)))
 (let (($x91 (= ?x241 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x91 true)))
 (let (($x201 (= $x54 true)))
 (let (($x317 (and $x201 $x233)))
 (let (($x257 (and $x317 $x67)))
 (let (($x25 (and $x257 $x49)))
 (let (($x286 (and $x25 $x130)))
 (let (($x10 (and $x286 $x44)))
 (let (($x296 (and $x10 $x251)))
 (let (($x302 (and $x296 $x48)))
 (let (($x84 (and $x302 $x159)))
 (let (($x200 (and $x84 $x19)))
 (let (($x247 (and $x200 $x210)))
 (let (($x127 (and $x247 $x177)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x168 (and $x147 $x127)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x258 (and $x166 $x168)))
 (let (($x193 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x9 (and $x193 $x258)))
 (let ((?x51 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%x ?x51)))
 (let (($x212 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd ?x86 (_ bv3 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x133 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x93)))
 (let (($x120 (or false (or false (and (and true (or $x68 $x133)) (or $x231 $x212))))))
 (let (($x78 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x120)))
 (let (($x63 (=> (and $x101 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x120)))
 (let (($x42 (and $x63 $x9)))
 (let (($x240 (=> $x42 $x164)))
 (not $x240)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 177 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x218 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x218 true)))
 (let (($x199 (= $x43 true)))
 (let (($x18 (forall ((input.ind-%var2076X (_ BitVec 32)) )(let ((?x100 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2076X)))
 (let ((?x124 (input.spec-%var-x-1.1.1 input.ind-%var2076X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2076X)))
 (=> $x249 (= ?x124 ?x100))))))
 ))
 (let (($x161 (forall ((input.ind-%var2075X (_ BitVec 32)) )(let (($x191 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2075X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2075X)))
 (= $x249 $x191))))
 ))
 (let (($x153 (and $x161 $x18)))
 (let (($x319 (= $x153 true)))
 (let (($x152 (forall ((input.ind-%var2070X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var2070X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x174))))
 (let ((?x100 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2070X)))
 (let (($x191 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2070X)))
 (=> $x191 (= ?x100 ?x262))))))))
 ))
 (let (($x164 (forall ((input.ind-%var2069X (_ BitVec 32)) )(let (($x115 (and (bvule (_ bv0 32) input.ind-%var2069X) (bvult input.ind-%var2069X input.dst.llvm-%n))))
 (let (($x191 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2069X)))
 (= $x191 $x115))))
 ))
 (let (($x24 (and $x164 $x152)))
 (let (($x292 (= $x24 true)))
 (let (($x177 (forall ((input.ind-%var2064X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var2064X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x174))))
 (let ((?x124 (input.spec-%var-x-1.1.1 input.ind-%var2064X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2064X)))
 (=> $x249 (= ?x124 ?x262))))))))
 ))
 (let (($x213 (forall ((input.ind-%var2063X (_ BitVec 32)) )(let (($x115 (and (bvule (_ bv0 32) input.ind-%var2063X) (bvult input.ind-%var2063X input.dst.llvm-%n))))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2063X)))
 (= $x249 $x115))))
 ))
 (let (($x127 (and $x213 $x177)))
 (let (($x168 (= $x127 true)))
 (let ((?x251 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x296 (bvneg ?x251)))
 (let (($x185 (= ?x296 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x305 (= $x185 true)))
 (let (($x48 (= $x305 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x49)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x282)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x176)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (and $x206 $x32)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x257 (and $x221 $x67)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x74 $x76)))
 (let (($x26 (not $x20)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x250 $x12)))
 (let (($x175 (and (not $x75) $x26)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x315 (and $x204 $x121)))
 (let (($x239 (not $x315)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x300 $x38)))
 (let (($x107 (and (not $x184) $x239)))
 (let (($x178 (and (and (and (and (and (and $x107 $x175) $x208) $x87) $x257) $x173) $x64)))
 (let (($x22 (and $x178 $x25)))
 (let (($x265 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x299 (or false (or false (and (and true (or $x47 $x139)) (or $x56 $x265))))))
 (let (($x318 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x299)))
 (let (($x81 (and $x318 $x22)))
 (let (($x44 (= $x81 true)))
 (let (($x10 (= $x44 true)))
 (let (($x160 (= $x10 true)))
 (let (($x304 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x179 (= $x304 true)))
 (let (($x284 (= $x179 true)))
 (let (($x298 (= $x284 true)))
 (let (($x83 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x297 (= $x83 true)))
 (let (($x288 (= $x297 true)))
 (let (($x303 (= $x288 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x253 (= (_ bv0 2) ?x69)))
 (let (($x233 (= $x253 true)))
 (let (($x317 (= $x233 true)))
 (let (($x241 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x39 (= $x241 true)))
 (let (($x91 (= $x39 true)))
 (let (($x54 (= $x91 true)))
 (let (($x17 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x147 (= $x17 true)))
 (let (($x187 (= $x147 true)))
 (let (($x205 (= $x187 true)))
 (let ((?x63 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x196 (bvneg ?x63)))
 (let (($x193 (= ?x196 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (= $x193 true)))
 (let (($x79 (= $x142 true)))
 (let (($x212 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x137 (= $x212 true)))
 (let (($x225 (= $x137 true)))
 (let (($x181 (= $x225 true)))
 (let (($x133 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (not $x133)))
 (let (($x122 (= $x90 true)))
 (let (($x105 (= $x122 true)))
 (let (($x231 (= $x105 true)))
 (let (($x120 (and $x231 $x181)))
 (let (($x166 (and $x120 $x79)))
 (let (($x320 (and $x166 $x205)))
 (let (($x201 (and $x320 $x54)))
 (let (($x46 (and $x201 $x317)))
 (let (($x71 (and $x46 $x303)))
 (let (($x109 (and $x71 $x298)))
 (let (($x108 (and $x109 $x160)))
 (let (($x302 (and $x108 $x48)))
 (let (($x258 (and $x302 $x168)))
 (let (($x60 (and $x258 $x292)))
 (let (($x311 (and $x60 $x319)))
 (let (($x235 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x141 (ite $x235 (_ bv1 32) (_ bv0 32))))
 (let (($x93 (= ?x141 (_ bv0 32))))
 (let (($x197 (and $x93 $x311)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x53 (and $x86 $x197)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x55 (and $x73 $x53)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x37 (and $x101 $x55)))
 (let (($x41 (=> $x37 $x199)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x218 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x218 true)))
 (let (($x199 (= $x43 true)))
 (let (($x18 (forall ((input.ind-%var2076X (_ BitVec 32)) )(let ((?x100 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2076X)))
 (let ((?x124 (input.spec-%var-x-1.1.1 input.ind-%var2076X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2076X)))
 (=> $x249 (= ?x124 ?x100))))))
 ))
 (let (($x161 (forall ((input.ind-%var2075X (_ BitVec 32)) )(let (($x191 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2075X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2075X)))
 (= $x249 $x191))))
 ))
 (let (($x153 (and $x161 $x18)))
 (let (($x319 (= $x153 true)))
 (let (($x152 (forall ((input.ind-%var2070X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var2070X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x174))))
 (let ((?x100 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2070X)))
 (let (($x191 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2070X)))
 (=> $x191 (= ?x100 ?x262))))))))
 ))
 (let (($x164 (forall ((input.ind-%var2069X (_ BitVec 32)) )(let (($x115 (and (bvule (_ bv0 32) input.ind-%var2069X) (bvult input.ind-%var2069X input.dst.llvm-%n))))
 (let (($x191 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2069X)))
 (= $x191 $x115))))
 ))
 (let (($x24 (and $x164 $x152)))
 (let (($x292 (= $x24 true)))
 (let (($x177 (forall ((input.ind-%var2064X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var2064X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x174))))
 (let ((?x124 (input.spec-%var-x-1.1.1 input.ind-%var2064X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2064X)))
 (=> $x249 (= ?x124 ?x262))))))))
 ))
 (let (($x213 (forall ((input.ind-%var2063X (_ BitVec 32)) )(let (($x115 (and (bvule (_ bv0 32) input.ind-%var2063X) (bvult input.ind-%var2063X input.dst.llvm-%n))))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2063X)))
 (= $x249 $x115))))
 ))
 (let (($x127 (and $x213 $x177)))
 (let (($x168 (= $x127 true)))
 (let ((?x251 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x296 (bvneg ?x251)))
 (let (($x185 (= ?x296 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x305 (= $x185 true)))
 (let (($x48 (= $x305 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x49)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x282)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x176)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (and $x206 $x32)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x257 (and $x221 $x67)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x74 $x76)))
 (let (($x26 (not $x20)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x250 $x12)))
 (let (($x175 (and (not $x75) $x26)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x315 (and $x204 $x121)))
 (let (($x239 (not $x315)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x300 $x38)))
 (let (($x107 (and (not $x184) $x239)))
 (let (($x178 (and (and (and (and (and (and $x107 $x175) $x208) $x87) $x257) $x173) $x64)))
 (let (($x22 (and $x178 $x25)))
 (let (($x265 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x299 (or false (or false (and (and true (or $x47 $x139)) (or $x56 $x265))))))
 (let (($x318 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x299)))
 (let (($x81 (and $x318 $x22)))
 (let (($x44 (= $x81 true)))
 (let (($x10 (= $x44 true)))
 (let (($x160 (= $x10 true)))
 (let (($x304 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x179 (= $x304 true)))
 (let (($x284 (= $x179 true)))
 (let (($x298 (= $x284 true)))
 (let (($x83 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x297 (= $x83 true)))
 (let (($x288 (= $x297 true)))
 (let (($x303 (= $x288 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x253 (= (_ bv0 2) ?x69)))
 (let (($x233 (= $x253 true)))
 (let (($x317 (= $x233 true)))
 (let (($x241 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x39 (= $x241 true)))
 (let (($x91 (= $x39 true)))
 (let (($x54 (= $x91 true)))
 (let (($x17 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x147 (= $x17 true)))
 (let (($x187 (= $x147 true)))
 (let (($x205 (= $x187 true)))
 (let ((?x63 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x196 (bvneg ?x63)))
 (let (($x193 (= ?x196 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (= $x193 true)))
 (let (($x79 (= $x142 true)))
 (let (($x212 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x137 (= $x212 true)))
 (let (($x225 (= $x137 true)))
 (let (($x181 (= $x225 true)))
 (let (($x133 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (not $x133)))
 (let (($x122 (= $x90 true)))
 (let (($x105 (= $x122 true)))
 (let (($x231 (= $x105 true)))
 (let (($x120 (and $x231 $x181)))
 (let (($x166 (and $x120 $x79)))
 (let (($x320 (and $x166 $x205)))
 (let (($x201 (and $x320 $x54)))
 (let (($x46 (and $x201 $x317)))
 (let (($x71 (and $x46 $x303)))
 (let (($x109 (and $x71 $x298)))
 (let (($x108 (and $x109 $x160)))
 (let (($x302 (and $x108 $x48)))
 (let (($x258 (and $x302 $x168)))
 (let (($x60 (and $x258 $x292)))
 (let (($x311 (and $x60 $x319)))
 (let (($x235 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x141 (ite $x235 (_ bv1 32) (_ bv0 32))))
 (let (($x93 (= ?x141 (_ bv0 32))))
 (let (($x197 (and $x93 $x311)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x53 (and $x86 $x197)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x55 (and $x73 $x53)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x37 (and $x101 $x55)))
 (let (($x41 (=> $x37 $x199)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171636/query
