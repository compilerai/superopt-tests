=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lentry%2%d Lif.else%1%d Lif.then%1%d Lreturn%1%bbentry E0%0%d
=Edges:
L0%0%d => Lentry%2%d
Lentry%2%d => Lif.then%1%d
Lentry%2%d => Lif.else%1%d
Lif.else%1%d => Lreturn%1%bbentry
Lif.then%1%d => Lreturn%1%bbentry
Lreturn%1%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.else%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.then%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lreturn%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 9 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=Edge: L0%0%d => Lentry%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=dst.llvm-%cmp.Lentry%2%d
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(start_pc_edge*  %cmp = icmp slt i32 %x, 0, !dbg !15)
tfg_edge_comment end

=Edge: Lentry%2%d => Lif.then%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %if.then, label %if.else, !dbg !17*  br i1 %cmp, label %if.then, label %if.else, !dbg !17)*  br i1 %cmp, label %if.then, label %if.else, !dbg !17)
tfg_edge_comment end

=Edge: Lentry%2%d => Lif.else%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %if.then, label %if.else, !dbg !17*  br i1 %cmp, label %if.then, label %if.else, !dbg !17)*  br i1 %cmp, label %if.then, label %if.else, !dbg !17)
tfg_edge_comment end

=Edge: Lif.else%1%d => Lreturn%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%retval.0.Lreturn%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%add.Lreturn%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:(((  %add = add nsw i32 %x, 12, !dbg !20*  br label %return, !dbg !21)*(  %retval.0 = phi i32 [ %sub, %if.then ], [ %add, %if.else ], !dbg !22*  br label %return, !dbg !21))*(  br label %return, !dbg !21*  br label %return, !dbg !21))
tfg_edge_comment end

=Edge: Lif.then%1%d => Lreturn%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%retval.0.Lreturn%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 5 { 0x5 +1.59e129 } : BV:32
3 : bvsub(1, 2) : BV:32
=dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 5 { 0x5 +1.59e129 } : BV:32
3 : bvsub(1, 2) : BV:32
=dst.llvm-%sub.Lreturn%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 5 { 0x5 +1.59e129 } : BV:32
3 : bvsub(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:(((  %sub = sub nsw i32 %x, 5, !dbg !18*  br label %return, !dbg !19)*(  %retval.0 = phi i32 [ %sub, %if.then ], [ %add, %if.else ], !dbg !22*  br label %return, !dbg !19))*(  br label %return, !dbg !19*  br label %return, !dbg !19))
tfg_edge_comment end

=Edge: Lreturn%1%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  ret i32 %retval.0, !dbg !23)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100002 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100008 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100010 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100011 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100012 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100013 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100016 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100017 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100019 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100020 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100021 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100022 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lentry%2%d
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=Loc 100023 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100024 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100025 in dst.llvm.foo.
REGMEM
dst.llvm-%retval.0.Lreturn%1%bbentry
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lreturn%1%bbentry
1 : input.dst.llvm-%add.Lreturn%1%bbentry : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : BV:32
=Loc 100029 in dst.llvm.foo.
REGMEM
dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : BV:32
=Loc 100030 in dst.llvm.foo.
REGMEM
dst.llvm-%sub.Lreturn%1%bbentry
1 : input.dst.llvm-%sub.Lreturn%1%bbentry : BV:32
=Loc 100031 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=Loc 100032 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lentry%2%d
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100002, 100021, 
=live locs at Lentry%2%d
100002, 100021, 100022, 
=live locs at Lif.else%1%d
100002, 100021, 
=live locs at Lif.then%1%d
100002, 100021, 
=live locs at Lreturn%1%bbentry
100021, 100025[f], 
=live locs at E0%0%d
100021, 100025[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100002, 100017, 100019, 100020, 100021
=loc definedness at Lentry%2%d
100002, 100017, 100019, 100020, 100021, 100022, 100031, 100032
=loc definedness at Lif.else%1%d
100002, 100017, 100019, 100020, 100021, 100022, 100031, 100032
=loc definedness at Lif.then%1%d
100002, 100017, 100019, 100020, 100021, 100022, 100031, 100032
=loc definedness at Lreturn%1%bbentry
100002, 100017, 100019, 100020, 100021, 100022, 100025, 100031, 100032
=loc definedness at E0%0%d
100002, 100017, 100019, 100020, 100021, 100022, 100023, 100024, 100025, 100026, 100031, 100032

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100002
=branch affecting variable locs at Lentry%2%d
100022
=branch affecting variable locs at Lif.else%1%d

=branch affecting variable locs at Lif.then%1%d

=branch affecting variable locs at Lreturn%1%bbentry

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100022 {input.dst.llvm-%cmp.Lentry%2%d }
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100031 {input.dst.local_alloc_count.Lentry%2%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100032 {input.dst.cur_rounding_mode.Lentry%2%d }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.else%1%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.else%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.then%1%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.then%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lreturn%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lreturn%1%bbentry for loc_id 100025 {input.dst.llvm-%retval.0.Lreturn%1%bbentry }
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lreturn%1%bbentry for loc_id 100027 {input.dst.llvm-%add.Lreturn%1%bbentry }
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lreturn%1%bbentry for loc_id 100028 {input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry }
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lreturn%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lreturn%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lreturn%1%bbentry for loc_id 100025 {input.dst.llvm-%retval.0.Lreturn%1%bbentry }
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lreturn%1%bbentry for loc_id 100029 {input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry }
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lreturn%1%bbentry for loc_id 100030 {input.dst.llvm-%sub.Lreturn%1%bbentry }
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lreturn%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d for loc_id 100023 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d for loc_id 100024 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d for loc_id 100026 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lentry%2%d:
vacuous mls at Lif.else%1%d:
vacuous mls at Lif.then%1%d:
vacuous mls at Lreturn%1%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lentry%2%d:
non-vacuous mls at Lif.else%1%d:
non-vacuous mls at Lif.then%1%d:
non-vacuous mls at Lreturn%1%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100002
=loc_expr
140433 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100008
=loc_expr
140558 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100010
=loc_expr
140559 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100011
=loc_expr
140561 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140563 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100013
=loc_expr
140565 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140550 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100017
=loc_expr
140436 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100022
=loc_expr
140655 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
=avail_exprs_val.end
=loc 100023
=loc_expr
140658 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100024
=loc_expr
140659 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100026
=loc_expr
140660 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100027
=loc_expr
140661 : input.dst.llvm-%add.Lreturn%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100028
=loc_expr
140666 : input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100029
=loc_expr
140667 : input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100030
=loc_expr
140668 : input.dst.llvm-%sub.Lreturn%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100031
=loc_expr
140669 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100032
=loc_expr
140670 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100026 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100026 spreled-expr
140267 : retaddr_const : BV:32
=loc 100031 expr
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=loc 100031 spreled-expr
140550 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100032 expr
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=loc 100032 spreled-expr
140549 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100002 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100008 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100010 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100011 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100012 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100013 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100017 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100019 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100020 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100022 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100023 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100024 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100025 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100029 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100030 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100032 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100026 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100031 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100032 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lentry%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lif.else%1%d
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lif.then%1%d
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.else%1%d=>Lreturn%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.then%1%d=>Lreturn%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lreturn%1%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lentry%2%d
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=dst.llvm-%cmp.Lentry%2%d
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lif.else%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lif.then%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.else%1%d=>Lreturn%1%bbentry
=dst.llvm-%retval.0.Lreturn%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%add.Lreturn%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.then%1%d=>Lreturn%1%bbentry
=dst.llvm-%retval.0.Lreturn%1%bbentry
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%sub.Lreturn%1%bbentry
1 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lreturn%1%bbentry=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.else%1%d
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.else%1%d done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.then%1%d
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.then%1%d done
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lreturn%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lreturn%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lreturn%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lreturn%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lreturn%1%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lreturn%1%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lentry%2%d for dst.llvm.foo
=suffixpath_at_Lentry%2%d.graph_edge_composition
(L0%0%d=>Lentry%2%d)
=suffixpath_at_Lif.else%1%d for dst.llvm.foo
=suffixpath_at_Lif.else%1%d.graph_edge_composition
((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lif.else%1%d))
=suffixpath_at_Lif.then%1%d for dst.llvm.foo
=suffixpath_at_Lif.then%1%d.graph_edge_composition
((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lif.then%1%d))
=suffixpath_at_Lreturn%1%bbentry for dst.llvm.foo
=suffixpath_at_Lreturn%1%bbentry.graph_edge_composition
(((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.else%1%d)*(Lif.else%1%d=>Lreturn%1%bbentry)))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.then%1%d)*(Lif.then%1%d=>Lreturn%1%bbentry))))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.else%1%d)*(Lif.else%1%d=>Lreturn%1%bbentry)))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.then%1%d)*(Lif.then%1%d=>Lreturn%1%bbentry))))*(Lreturn%1%bbentry=>E0%0%d))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d done
tfg.assumes_around_edge at Lentry%2%d=>Lif.else%1%d
tfg.assumes_around_edge at Lentry%2%d=>Lif.else%1%d done
tfg.assumes_around_edge at Lentry%2%d=>Lif.then%1%d
tfg.assumes_around_edge at Lentry%2%d=>Lif.then%1%d done
tfg.assumes_around_edge at Lif.else%1%d=>Lreturn%1%bbentry
tfg.assumes_around_edge at Lif.else%1%d=>Lreturn%1%bbentry done
tfg.assumes_around_edge at Lif.then%1%d=>Lreturn%1%bbentry
tfg.assumes_around_edge at Lif.then%1%d=>Lreturn%1%bbentry done
tfg.assumes_around_edge at Lreturn%1%bbentry=>E0%0%d
tfg.assumes_around_edge at Lreturn%1%bbentry=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 2
=pc
Lentry%2%d
=linename
line 2
=pc
Lif.else%1%d
=linename
line 5
=pc
Lif.else%2%d
=linename
line 5
=pc
Lif.then%1%d
=linename
line 3
=pc
Lif.then%2%d
=linename
line 3
=pc
Lreturn%1%d
=linename
line 6
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 9
=pc
Lentry%2%d
=column_name
 at column 7
=pc
Lif.else%1%d
=column_name
 at column 14
=pc
Lif.else%2%d
=column_name
 at column 5
=pc
Lif.then%1%d
=column_name
 at column 14
=pc
Lif.then%2%d
=column_name
 at column 5
=pc
Lreturn%1%d
=column_name
 at column 1
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 2 at column 9)
=pc
Lentry%2%d
=line_and_column
(line 2 at column 7)
=pc
Lif.else%1%d
=line_and_column
(line 5 at column 14)
=pc
Lif.else%2%d
=line_and_column
(line 5 at column 5)
=pc
Lif.then%1%d
=line_and_column
(line 3 at column 14)
=pc
Lif.then%2%d
=line_and_column
(line 3 at column 5)
=pc
Lreturn%1%d
=line_and_column
line 6
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%x : L0%0%d : x'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%cmp : L0%0%d : (x' <_s 0)
input.dst.llvm-%sub : L0%0%d : ((-5) + x')
input.dst.llvm-%add : L0%0%d : (12 + x')
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%retval.0.phi.tmpvar.if.then : L0%0%d : input.dst.llvm-%sub
input.dst.llvm-%retval.0.phi.tmpvar.if.else : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%retval.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%sub.Lreturn%1%bbentry : L0%0%d : ((-5) + x')
input.dst.llvm-%cmp.Lentry%2%d : L0%0%d : (x' <_s 0)
input.dst.llvm-%add.Lreturn%1%bbentry : L0%0%d : (12 + x')
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%retval.0.Lreturn%1%bbentry
input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : L0%0%d : ((-5) + x')
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : L0%0%d : (12 + x')
input.dst.local_alloc_count.Lentry%2%d : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lentry%2%d : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%sub
=dst.llvm-%sub loop pc: L0%0%d
=dst.llvm-%sub val_scevb
=dst.llvm-%sub val_scevb scev
=dst.llvm-%sub val_scevb scev loop: L0%0%d
=dst.llvm-%sub val_scevb scev scev_overflow_flag: 
=dst.llvm-%sub val_scevb scev scev_expr
1 : 11111111111111111111111111111011b
2 : input.dst.llvm-%x : BV32
3 : scev_op_add(1, 2) : loop L0%0%d : 
=dst.llvm-%sub val_scevb scev scev_expr done
=dst.llvm-%sub val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb
=dst.llvm-%sub atuse_scevb scev
=dst.llvm-%sub atuse_scevb scev loop: L0%0%d
=dst.llvm-%sub atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sub atuse_scevb scev scev_expr
1 : 11111111111111111111111111111011b
2 : input.dst.llvm-%x : BV32
3 : scev_op_add(1, 2) : loop L0%0%d : 
=dst.llvm-%sub atuse_scevb scev scev_expr done
=dst.llvm-%sub atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atexit_scev nullptr
=dst.llvm-%retval.0
=dst.llvm-%retval.0 loop pc: L0%0%d
=dst.llvm-%retval.0 val_scevb
=dst.llvm-%retval.0 val_scevb scev
=dst.llvm-%retval.0 val_scevb scev loop: L0%0%d
=dst.llvm-%retval.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%retval.0 val_scevb scev scev_expr
4 : input.dst.llvm-%retval.0 : BV32
=dst.llvm-%retval.0 val_scevb scev scev_expr done
=dst.llvm-%retval.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%retval.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%retval.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%retval.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%retval.0 atuse_scevb
=dst.llvm-%retval.0 atuse_scevb scev
=dst.llvm-%retval.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%retval.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%retval.0 atuse_scevb scev scev_expr
4 : input.dst.llvm-%retval.0 : BV32
=dst.llvm-%retval.0 atuse_scevb scev scev_expr done
=dst.llvm-%retval.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%retval.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%retval.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%retval.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%retval.0 atexit_scev nullptr
=dst.llvm-%add
=dst.llvm-%add loop pc: L0%0%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
5 : 00000000000000000000000000001100b
2 : input.dst.llvm-%x : BV32
6 : scev_op_add(5, 2) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
5 : 00000000000000000000000000001100b
2 : input.dst.llvm-%x : BV32
6 : scev_op_add(5, 2) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at Lentry%2%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lif.else%1%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lif.then%1%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lreturn%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%sub.Lreturn%1%bbentry : BV:32
=reaching defns for expr 2 edges
  Lif.then%1%d=>Lreturn%1%bbentry
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 5 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : BV:32
=reaching defns for expr 6 edges
  Lif.then%1%d=>Lreturn%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=reaching defns for expr 7 edges
  Lif.else%1%d=>Lreturn%1%bbentry
  Lif.then%1%d=>Lreturn%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%add.Lreturn%1%bbentry : BV:32
=reaching defns for expr 8 edges
  Lif.else%1%d=>Lreturn%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : BV:32
=reaching defns for expr 9 edges
  Lif.else%1%d=>Lreturn%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%sub.Lreturn%1%bbentry : BV:32
=reaching defns for expr 2 edges
  Lif.then%1%d=>Lreturn%1%bbentry
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 5 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : BV:32
=reaching defns for expr 6 edges
  Lif.then%1%d=>Lreturn%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=reaching defns for expr 7 edges
  Lif.else%1%d=>Lreturn%1%bbentry
  Lif.then%1%d=>Lreturn%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%add.Lreturn%1%bbentry : BV:32
=reaching defns for expr 8 edges
  Lif.else%1%d=>Lreturn%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : BV:32
=reaching defns for expr 9 edges
  Lif.else%1%d=>Lreturn%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lreturn%1%bbentry=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 11 edges
  Lreturn%1%bbentry=>E0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 12 edges
  Lreturn%1%bbentry=>E0%0%d
=reaching defns for expr 12 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%retval.0.Lreturn%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%sub.Lreturn%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%cmp.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%add.Lreturn%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lentry%2%d
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
