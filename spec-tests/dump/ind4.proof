=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1.B2.C1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L2%6%bbentry L2%6%d L2%7%bbentry L2%9%bbentry E0%0%d
=Edges:
L0%0%d => L2%6%bbentry
L2%6%bbentry => L2%6%d
L2%6%d => L2%9%bbentry
L2%6%d => L2%7%bbentry
L2%7%bbentry => E0%0%d
L2%9%bbentry => L2%6%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%6%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%7%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%9%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-7.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=Edge: L0%0%d => L2%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-5.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-l-0.L2%6%bbentry
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-sum-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=src.spec-ghostvar.itervar.1.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((func_head*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L2%6%bbentry => L2%6%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:bb_entry
tfg_edge_comment end

=Edge: L2%6%d => L2%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%6%d => L2%7%bbentry
=Edge.EdgeCond: 
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:3:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%7%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-4.E0%0%d
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=spec-%tmpvar-3.E0%0%d
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=spec-%tmpvar-7.E0%0%d
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=spec-%var-u-0.E0%0%d
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L2%9%bbentry => L2%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-l-0.L2%6%bbentry
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-sum-0.L2%6%bbentry
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
6 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
7 : bvadd(5, 6) : BV:32
=src.spec-ghostvar.itervar.1.L2%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L2%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-0.L2%6%bbentry
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
6 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
7 : bvadd(5, 6) : BV:32
=spec-%var-l2-0.L2%6%bbentry
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-n-0.L2%6%bbentry
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%var-val-0.L2%6%bbentry
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((bb_entry*match_sum_val_1)*match_prod_0)*match_prod_1)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-l-1
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 15 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 16 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 17 in src.spec.foo.
REGMEM
spec-%var-l-0.L2%6%bbentry
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 18 in src.spec.foo.
REGMEM
spec-%tmpvar-3.E0%0%d
1 : input.spec-%tmpvar-3.E0%0%d : BV:32
=Loc 19 in src.spec.foo.
REGMEM
spec-%tmpvar-4.E0%0%d
1 : input.spec-%tmpvar-4.E0%0%d : BV:32
=Loc 20 in src.spec.foo.
REGMEM
spec-%tmpvar-6.E0%0%d
1 : input.spec-%tmpvar-6.E0%0%d : BV:32
=Loc 21 in src.spec.foo.
REGMEM
spec-%tmpvar-7.E0%0%d
1 : input.spec-%tmpvar-7.E0%0%d : BV:32
=Loc 22 in src.spec.foo.
REGMEM
spec-%var-sum-0.L2%6%bbentry
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=Loc 23 in src.spec.foo.
REGMEM
spec-%var-u-0.E0%0%d
1 : input.spec-%var-u-0.E0%0%d : UNIT
=Loc 24 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L2%6%bbentry
1 : input.spec-%tmpvar-5.L2%6%bbentry : BV:32
=Loc 25 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L2%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L2%6%bbentry : BV:32
=Loc 26 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L2%6%bbentry
1 : input.spec-%tmpvar-0.L2%6%bbentry : BV:32
=Loc 27 in src.spec.foo.
REGMEM
spec-%var-l2-0.L2%6%bbentry
1 : input.spec-%var-l2-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 28 in src.spec.foo.
REGMEM
spec-%var-n-0.L2%6%bbentry
1 : input.spec-%var-n-0.L2%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=Loc 29 in src.spec.foo.
REGMEM
spec-%var-val-0.L2%6%bbentry
1 : input.spec-%var-val-0.L2%6%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L2%6%bbentry
17, 22, 
=live locs at L2%6%d
17, 22, 
=live locs at L2%7%bbentry
22, 
=live locs at L2%9%bbentry
17, 22, 
=live locs at E0%0%d
21[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 15, 16
=loc definedness at L2%6%bbentry
1, 15, 16, 17, 22, 24, 25
=loc definedness at L2%6%d
1, 15, 16, 17, 22, 24, 25
=loc definedness at L2%7%bbentry
1, 15, 16, 17, 22, 24, 25
=loc definedness at L2%9%bbentry
1, 15, 16, 17, 22, 24, 25
=loc definedness at E0%0%d
1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L2%6%bbentry
17
=branch affecting variable locs at L2%6%d
17
=branch affecting variable locs at L2%7%bbentry

=branch affecting variable locs at L2%9%bbentry
17
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%6%bbentry for loc_id 17 {input.spec-%var-l-0.L2%6%bbentry }
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%6%bbentry for loc_id 22 {input.spec-%var-sum-0.L2%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%6%bbentry for loc_id 24 {input.spec-%tmpvar-5.L2%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%6%bbentry for loc_id 25 {input.src.spec-ghostvar.itervar.1.L2%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%6%bbentry=>L2%6%d
=graph_with_edge_structures.loc_to_expr_map at L2%6%bbentry=>L2%6%d done
=graph_with_edge_structures.loc_to_expr_map at L2%6%d=>L2%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%6%d=>L2%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%6%d=>L2%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%6%d=>L2%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>E0%0%d for loc_id 18 {input.spec-%tmpvar-3.E0%0%d }
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>E0%0%d for loc_id 19 {input.spec-%tmpvar-4.E0%0%d }
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>E0%0%d for loc_id 20 {input.spec-%tmpvar-6.E0%0%d }
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>E0%0%d for loc_id 21 {input.spec-%tmpvar-7.E0%0%d }
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>E0%0%d for loc_id 23 {input.spec-%var-u-0.E0%0%d }
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%6%bbentry for loc_id 17 {input.spec-%var-l-0.L2%6%bbentry }
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%6%bbentry for loc_id 22 {input.spec-%var-sum-0.L2%6%bbentry }
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
2 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : 0 { 0x0 +1.0e1025 } : INT
6 : prod_get(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%6%bbentry for loc_id 25 {input.src.spec-ghostvar.itervar.1.L2%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L2%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%6%bbentry for loc_id 26 {input.spec-%tmpvar-0.L2%6%bbentry }
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
2 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : 0 { 0x0 +1.0e1025 } : INT
6 : prod_get(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%6%bbentry for loc_id 27 {input.spec-%var-l2-0.L2%6%bbentry }
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%6%bbentry for loc_id 28 {input.spec-%var-n-0.L2%6%bbentry }
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%6%bbentry for loc_id 29 {input.spec-%var-val-0.L2%6%bbentry }
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L2%6%bbentry:
vacuous mls at L2%6%d:
vacuous mls at L2%7%bbentry:
vacuous mls at L2%9%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L2%6%bbentry:
non-vacuous mls at L2%6%d:
non-vacuous mls at L2%7%bbentry:
non-vacuous mls at L2%9%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 24
=loc_expr
140468 : input.spec-%tmpvar-5.L2%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 24 expr
1 : input.spec-%tmpvar-5.L2%6%bbentry : BV:32
=loc 24 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 15 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 16 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 17 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 18 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 19 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 20 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 21 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 22 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 26 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 27 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 28 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 29 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 24 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L2%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%6%bbentry=>L2%6%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%6%d=>L2%7%bbentry
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%6%d=>L2%9%bbentry
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%7%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%9%bbentry=>L2%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L2%6%bbentry
=spec-%tmpvar-5.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-l-0.L2%6%bbentry
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-sum-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=src.spec-ghostvar.itervar.1.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%6%bbentry=>L2%6%d
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%6%d=>L2%7%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%6%d=>L2%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%7%bbentry=>E0%0%d
=spec-%tmpvar-4.E0%0%d
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=spec-%tmpvar-3.E0%0%d
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=spec-%tmpvar-7.E0%0%d
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=spec-%var-u-0.E0%0%d
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%9%bbentry=>L2%6%bbentry
=spec-%var-l-0.L2%6%bbentry
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-sum-0.L2%6%bbentry
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
2 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : 0 { 0x0 +1.0e1025 } : INT
6 : prod_get(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=src.spec-ghostvar.itervar.1.L2%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L2%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-0.L2%6%bbentry
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
2 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : 0 { 0x0 +1.0e1025 } : INT
6 : prod_get(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=spec-%var-l2-0.L2%6%bbentry
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-n-0.L2%6%bbentry
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%var-val-0.L2%6%bbentry
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%6%bbentry=>L2%6%d
=graph_with_simplified_assets.simplified_assumes at L2%6%bbentry=>L2%6%d done
=graph_with_simplified_assets.simplified_assumes at L2%6%d=>L2%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%6%d=>L2%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%6%d=>L2%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%6%d=>L2%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%7%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L2%7%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>L2%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>L2%6%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L2%6%bbentry for src.spec.foo
=suffixpath_at_L2%6%bbentry.graph_edge_composition
(L0%0%d=>L2%6%bbentry)
=suffixpath_at_L2%6%d for src.spec.foo
=suffixpath_at_L2%6%d.graph_edge_composition
((L0%0%d=>L2%6%bbentry)*(L2%6%bbentry=>L2%6%d))
=suffixpath_at_L2%7%bbentry for src.spec.foo
=suffixpath_at_L2%7%bbentry.graph_edge_composition
((L0%0%d=>L2%6%bbentry)*((L2%6%bbentry=>L2%6%d)*(L2%6%d=>L2%7%bbentry)))
=suffixpath_at_L2%9%bbentry for src.spec.foo
=suffixpath_at_L2%9%bbentry.graph_edge_composition
((L0%0%d=>L2%6%bbentry)*((L2%6%bbentry=>L2%6%d)*(L2%6%d=>L2%9%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L2%6%bbentry)*((L2%6%bbentry=>L2%6%d)*((L2%6%d=>L2%7%bbentry)*(L2%7%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L2%6%bbentry
tfg.assumes_around_edge at L0%0%d=>L2%6%bbentry done
tfg.assumes_around_edge at L2%6%bbentry=>L2%6%d
tfg.assumes_around_edge at L2%6%bbentry=>L2%6%d done
tfg.assumes_around_edge at L2%6%d=>L2%7%bbentry
tfg.assumes_around_edge at L2%6%d=>L2%7%bbentry done
tfg.assumes_around_edge at L2%6%d=>L2%9%bbentry
tfg.assumes_around_edge at L2%6%d=>L2%9%bbentry done
tfg.assumes_around_edge at L2%7%bbentry=>E0%0%d
tfg.assumes_around_edge at L2%7%bbentry=>E0%0%d done
tfg.assumes_around_edge at L2%9%bbentry=>L2%6%bbentry
tfg.assumes_around_edge at L2%9%bbentry=>L2%6%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lwhile.body%1%d Lwhile.cond%1%bbentry Lwhile.cond%2%d Lwhile.end%1%d E0%0%d
=Edges:
L0%0%d => Lwhile.cond%1%bbentry
Lwhile.cond%1%bbentry => Lwhile.cond%2%d
Lwhile.cond%2%d => Lwhile.body%1%d
Lwhile.cond%2%d => Lwhile.end%1%d
Lwhile.end%1%d => E0%0%d
Lwhile.body%1%d => Lwhile.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lwhile.body%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lwhile.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lwhile.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lwhile.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%l : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 18 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%l : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=Edge: L0%0%d => Lwhile.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%l : BV:32
2 : 8 { 0x8 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %while.cond, !dbg !23)*  %sum.0 = phi i32 [ 0, %entry ], [ %add, %while.body ], !dbg !21)*(  %l.addr.0 = phi %struct.list* [ %l, %entry ], [ %1, %while.body ]*  br label %while.cond, !dbg !23))*  br label %while.cond, !dbg !23)*(  br label %while.cond, !dbg !23*  br label %while.cond, !dbg !23))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lwhile.cond%1%bbentry => Lwhile.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%tobool.Lwhile.cond%2%d
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %tobool = icmp ne %struct.list* %l.addr.0, null, !dbg !23)
tfg_edge_comment end

=Edge: Lwhile.cond%2%d => Lwhile.body%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %while.body, label %while.end, !dbg !23*  br i1 %tobool, label %while.body, label %while.end, !dbg !23)*  br i1 %tobool, label %while.body, label %while.end, !dbg !23)
tfg_edge_comment end

=Edge: Lwhile.cond%2%d => Lwhile.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %while.body, label %while.end, !dbg !23*  br i1 %tobool, label %while.body, label %while.end, !dbg !23)*  br i1 %tobool, label %while.body, label %while.end, !dbg !23)
tfg_edge_comment end

=Edge: Lwhile.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %sum.0, !dbg !30
tfg_edge_comment end

=Edge: Lwhile.body%1%d => Lwhile.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(6, 8) : BV:32
10 : bvadd(9, 6) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(8, 5) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : bvadd(4, 1) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%add.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(6, 8) : BV:32
10 : bvadd(9, 6) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvadd(4, 5) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%next.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(6, 8) : BV:32
10 : bvadd(9, 6) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-%val.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvslt(1, 1) : BOOL
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(1, 3) : BV:64
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvzero_ext(5, 3) : BV:64
7 : bvmul(4, 6) : BV:64
8 : 63 { 0x3f +1.0e1025 } : INT
9 : bvextract(7, 8, 3) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : eq(9, 1) : BOOL
13 : ite(2, 11, 12) : BOOL
14 : 8 { 0x8 +1.0e1025 } : INT
15 : isindexforsize(13, 14) : BOOL
16 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
17 : bvmul(1, 5) : BV:32
18 : bvadd(1, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : isgepoffset(19, 17) : BOOL
21 : and(15, 20) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvadd(18, 22) : BV:32
24 : bvadd(16, 23) : BV:32
25 : isgepoffset(24, 22) : BOOL
26 : and(21, 25) : BOOL
27 : 4 { 0x4 +1.0e1025 } : INT
28 : islangaligned(24, 27) : BOOL
29 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
30 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
31 : mlvar.dst.llvm.foo.1 : MEMLABEL
32 : 0 { 0x0 } : BOOL
33 : select(29, 30, 31, 24, 27, 32) : BV:32
34 : islangaligned(33, 14) : BOOL
35 : and(34, 28) : BOOL
36 : and(28, 35) : BOOL
37 : and(26, 36) : BOOL
=EdgeAssume.1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvslt(1, 1) : BOOL
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(1, 3) : BV:64
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvzero_ext(5, 3) : BV:64
7 : bvmul(4, 6) : BV:64
8 : 63 { 0x3f +1.0e1025 } : INT
9 : bvextract(7, 8, 3) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : eq(9, 1) : BOOL
13 : ite(2, 11, 12) : BOOL
14 : 8 { 0x8 +1.0e1025 } : INT
15 : isindexforsize(13, 14) : BOOL
16 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
17 : bvmul(1, 5) : BV:32
18 : bvadd(1, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : isgepoffset(19, 17) : BOOL
21 : and(15, 20) : BOOL
22 : bvadd(18, 1) : BV:32
23 : bvadd(16, 22) : BV:32
24 : isgepoffset(23, 1) : BOOL
25 : and(21, 24) : BOOL
26 : 4 { 0x4 +1.0e1025 } : INT
27 : islangaligned(23, 26) : BOOL
28 : and(25, 27) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %val = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 0, !dbg !24*  %val = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 0, !dbg !24)*(  %val = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 0, !dbg !24*  %val = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 0, !dbg !24))*((  %0 = load i32, i32* %val, align 4, !dbg !24*  %0 = load i32, i32* %val, align 4, !dbg !24)*  %add = add i32 %sum.0, %0, !dbg !26))*(((  %next = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 1, !dbg !27*  %next = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 1, !dbg !27)*(  %next = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 1, !dbg !27*  %next = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 1, !dbg !27))*(((((((  %1 = load %struct.list*, %struct.list** %next, align 4, !dbg !27*  %1 = load %struct.list*, %struct.list** %next, align 4, !dbg !27)*  br label %while.cond, !dbg !23, !llvm.loop !28)*  %sum.0 = phi i32 [ 0, %entry ], [ %add, %while.body ], !dbg !21)*(  %l.addr.0 = phi %struct.list* [ %l, %entry ], [ %1, %while.body ]*  br label %while.cond, !dbg !23, !llvm.loop !28))*  br label %while.cond, !dbg !23, !llvm.loop !28)*(  br label %while.cond, !dbg !23, !llvm.loop !28*  br label %while.cond, !dbg !23, !llvm.loop !28))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%l : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100002 in dst.llvm.foo.
REGMEM
dst.llvm-%l
1 : input.dst.llvm-%l : BV:32
=Loc 100024 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100029 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100036 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100037 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100038 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.llvm-%tobool.Lwhile.cond%2%d
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=Loc 100045 in dst.llvm.foo.
REGMEM
dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=Loc 100047 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-%1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100052 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100055 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100060 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100061 in dst.llvm.foo.
REGMEM
dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=Loc 100062 in dst.llvm.foo.
REGMEM
dst.llvm-%next.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=Loc 100063 in dst.llvm.foo.
REGMEM
dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=Loc 100064 in dst.llvm.foo.
REGMEM
dst.llvm-%val.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=Loc 100065 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : input.dst.local_alloc_count.Lwhile.cond%1%bbentry : COUNT
=Loc 100066 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100002, 100037, 100038, 
=live locs at Lwhile.body%1%d
100037, 100038, 100041, 100044, 
=live locs at Lwhile.cond%1%bbentry
100037, 100038, 100041[f], 100044, 
=live locs at Lwhile.cond%2%d
100037, 100038, 100041[f], 100043, 100044, 
=live locs at Lwhile.end%1%d
100038, 100041[f], 
=live locs at E0%0%d
100038, 100041[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100002, 100034, 100036, 100037, 100038
=loc definedness at Lwhile.body%1%d
100002, 100034, 100036, 100037, 100038, 100041, 100043, 100044, 100045, 100046, 100047, 100065, 100066
=loc definedness at Lwhile.cond%1%bbentry
100002, 100034, 100036, 100037, 100038, 100041, 100044, 100045, 100046, 100047, 100065, 100066
=loc definedness at Lwhile.cond%2%d
100002, 100034, 100036, 100037, 100038, 100041, 100043, 100044, 100045, 100046, 100047, 100065, 100066
=loc definedness at Lwhile.end%1%d
100002, 100034, 100036, 100037, 100038, 100041, 100043, 100044, 100045, 100046, 100047, 100065, 100066
=loc definedness at E0%0%d
100002, 100034, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044, 100045, 100046, 100047, 100065, 100066

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100002, 100038
=branch affecting variable locs at Lwhile.body%1%d
100038
=branch affecting variable locs at Lwhile.cond%1%bbentry
100038, 100044
=branch affecting variable locs at Lwhile.cond%2%d
100038, 100043
=branch affecting variable locs at Lwhile.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100041 {input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100044 {input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%l : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100045 {input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%l : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100046 {input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100047 {input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100065 {input.dst.local_alloc_count.Lwhile.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100066 {input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100041 {input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100044 {input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100047 {input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100048 {input.dst.llvm-%0.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100049 {input.dst.llvm-%1.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100050 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100051 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100052 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100053 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100054 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100055 {input.dst.llvm-%add.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100056 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100057 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100058 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100059 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100060 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100061 {input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100062 {input.dst.llvm-%next.Lwhile.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100063 {input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100064 {input.dst.llvm-%val.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d for loc_id 100043 {input.dst.llvm-%tobool.Lwhile.cond%2%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%2%d=>Lwhile.body%1%d
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%2%d=>Lwhile.body%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%2%d=>Lwhile.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%2%d=>Lwhile.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d for loc_id 100039 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d for loc_id 100040 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d for loc_id 100042 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lwhile.body%1%d:
vacuous mls at Lwhile.cond%1%bbentry:
vacuous mls at Lwhile.cond%2%d:
vacuous mls at Lwhile.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lwhile.body%1%d:
non-vacuous mls at Lwhile.cond%1%bbentry:
non-vacuous mls at Lwhile.cond%2%d:
non-vacuous mls at Lwhile.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100002
=loc_expr
140341 : input.dst.llvm-%l : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100024
=loc_expr
140399 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100026
=loc_expr
140400 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100027
=loc_expr
140402 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100028
=loc_expr
140404 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100029
=loc_expr
140406 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100033
=loc_expr
140346 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140340 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100039
=loc_expr
140519 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100040
=loc_expr
140520 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100042
=loc_expr
140521 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100043
=loc_expr
140493 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=avail_exprs_val.end
=loc 100045
=loc_expr
140522 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l : BV:32
=avail_exprs_val.end
=loc 100046
=loc_expr
140523 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100048
=loc_expr
140524 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=avail_exprs_val.end
=loc 100049
=loc_expr
140525 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100050
=loc_expr
140526 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100051
=loc_expr
140527 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100052
=loc_expr
140528 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100053
=loc_expr
140529 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140530 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100056
=loc_expr
140532 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100057
=loc_expr
140533 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100058
=loc_expr
140534 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100059
=loc_expr
140535 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100060
=loc_expr
140536 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100061
=loc_expr
140537 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100062
=loc_expr
140538 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100064
=loc_expr
140540 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100065
=loc_expr
140541 : input.dst.local_alloc_count.Lwhile.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100066
=loc_expr
140542 : input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100042 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100042 spreled-expr
140267 : retaddr_const : BV:32
=loc 100046 expr
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=loc 100046 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100050 expr
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=loc 100050 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100051 expr
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=loc 100051 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100053 expr
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=loc 100053 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100054 expr
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=loc 100054 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100056 expr
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=loc 100056 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100057 expr
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=loc 100057 spreled-expr
140329 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100059 expr
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=loc 100059 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100060 expr
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=loc 100060 spreled-expr
140329 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100065 expr
1 : input.dst.local_alloc_count.Lwhile.cond%1%bbentry : COUNT
=loc 100065 spreled-expr
140346 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100066 expr
1 : input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry : ROUNDING_MODE
=loc 100066 spreled-expr
140345 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100002 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100024 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100029 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100055 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100042 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100046 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100050 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100053 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100056 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100059 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100065 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lwhile.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.cond%2%d=>Lwhile.body%1%d
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.cond%2%d=>Lwhile.end%1%d
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lwhile.cond%1%bbentry
=dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=dst.llvm-%1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%add.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%next.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=dst.llvm-%val.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=dst.llvm-%tobool.Lwhile.cond%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.cond%2%d=>Lwhile.body%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.cond%2%d=>Lwhile.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lwhile.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lwhile.cond%1%bbentry assume# 0
1 : input.dst.llvm-%l : BV:32
2 : 8 { 0x8 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lwhile.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume# 0
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : isgepoffset(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : and(4, 3) : BOOL
6 : and(3, 5) : BOOL
7 : 4 { 0x4 +1.0e1025 } : INT
8 : islangaligned(1, 7) : BOOL
9 : and(6, 8) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume# 1
1 : 1 { 0x1 } : BOOL
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : isgepoffset(2, 3) : BOOL
5 : and(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(6, 2) : BV:32
8 : isgepoffset(7, 6) : BOOL
9 : 4 { 0x4 +1.0e1025 } : INT
10 : islangaligned(7, 9) : BOOL
11 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
12 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
13 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
14 : 0 { 0x0 } : BOOL
15 : select(11, 12, 13, 7, 9, 14) : BV:32
16 : 8 { 0x8 +1.0e1025 } : INT
17 : islangaligned(15, 16) : BOOL
18 : and(10, 17) : BOOL
19 : and(5, 8, 10, 18) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lwhile.body%1%d=>Lwhile.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%2%d=>Lwhile.body%1%d
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%2%d=>Lwhile.body%1%d done
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%2%d=>Lwhile.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%2%d=>Lwhile.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lwhile.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lwhile.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
2
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lwhile.body%1%d for dst.llvm.foo
=suffixpath_at_Lwhile.body%1%d.graph_edge_composition
((L0%0%d=>Lwhile.cond%1%bbentry)*((Lwhile.cond%1%bbentry=>Lwhile.cond%2%d)*(Lwhile.cond%2%d=>Lwhile.body%1%d)))
=suffixpath_at_Lwhile.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lwhile.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lwhile.cond%1%bbentry)
=suffixpath_at_Lwhile.cond%2%d for dst.llvm.foo
=suffixpath_at_Lwhile.cond%2%d.graph_edge_composition
((L0%0%d=>Lwhile.cond%1%bbentry)*(Lwhile.cond%1%bbentry=>Lwhile.cond%2%d))
=suffixpath_at_Lwhile.end%1%d for dst.llvm.foo
=suffixpath_at_Lwhile.end%1%d.graph_edge_composition
((L0%0%d=>Lwhile.cond%1%bbentry)*((Lwhile.cond%1%bbentry=>Lwhile.cond%2%d)*(Lwhile.cond%2%d=>Lwhile.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lwhile.cond%1%bbentry)*((Lwhile.cond%1%bbentry=>Lwhile.cond%2%d)*((Lwhile.cond%2%d=>Lwhile.end%1%d)*(Lwhile.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lwhile.cond%1%bbentry
=LhsExpr
140341 : input.dst.llvm-%l : BV:32
140347 : 8 { 0x8 +1.0e1025 } : INT
140348 : islangaligned(140341, 140347) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry done
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #0
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=LhsExpr
140495 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140576 : isgepoffset(140495, 140276) : BOOL
140275 : 1 { 0x1 } : BOOL
140578 : and(140275, 140576) : BOOL
140597 : and(140576, 140578) : BOOL
140317 : 4 { 0x4 +1.0e1025 } : INT
140601 : islangaligned(140495, 140317) : BOOL
140603 : and(140597, 140601) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #1
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #1.pred
=Comment
undef-behavioursome.edge.Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140495 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140576 : isgepoffset(140495, 140276) : BOOL
140578 : and(140275, 140576) : BOOL
140329 : 4 { 0x4 +1.47e129 } : BV:32
140551 : bvadd(140329, 140495) : BV:32
140580 : isgepoffset(140551, 140329) : BOOL
140317 : 4 { 0x4 +1.0e1025 } : INT
140584 : islangaligned(140551, 140317) : BOOL
140338 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140339 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140425 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140318 : 0 { 0x0 } : BOOL
140557 : select(140338, 140339, 140425, 140551, 140317, 140318) : BV:32
140347 : 8 { 0x8 +1.0e1025 } : INT
140586 : islangaligned(140557, 140347) : BOOL
140589 : and(140584, 140586) : BOOL
140594 : and(140578, 140580, 140584, 140589) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry done
tfg.assumes_around_edge at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
tfg.assumes_around_edge at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d done
tfg.assumes_around_edge at Lwhile.cond%2%d=>Lwhile.body%1%d
tfg.assumes_around_edge at Lwhile.cond%2%d=>Lwhile.body%1%d done
tfg.assumes_around_edge at Lwhile.cond%2%d=>Lwhile.end%1%d
tfg.assumes_around_edge at Lwhile.cond%2%d=>Lwhile.end%1%d done
tfg.assumes_around_edge at Lwhile.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lwhile.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 8
=pc
Lwhile.body%1%d
=linename
line 9
=pc
Lwhile.body%2%d
=linename
line 9
=pc
Lwhile.body%3%d
=linename
line 9
=pc
Lwhile.body%4%d
=linename
line 10
=pc
Lwhile.body%5%d
=linename
line 10
=pc
Lwhile.body%6%d
=linename
line 8
=pc
Lwhile.cond%1%d
=linename
line 8
=pc
Lwhile.cond%2%d
=linename
line 8
=pc
Lwhile.end%1%d
=linename
line 12
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 3
=pc
Lwhile.body%1%d
=column_name
 at column 15
=pc
Lwhile.body%2%d
=column_name
 at column 15
=pc
Lwhile.body%3%d
=column_name
 at column 9
=pc
Lwhile.body%4%d
=column_name
 at column 12
=pc
Lwhile.body%5%d
=column_name
 at column 12
=pc
Lwhile.body%6%d
=column_name
 at column 3
=pc
Lwhile.cond%1%d
=column_name
 at column 3
=pc
Lwhile.cond%2%d
=column_name
 at column 3
=pc
Lwhile.end%1%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
line 8
=pc
Lwhile.body%1%d
=line_and_column
(line 9 at column 15)
=pc
Lwhile.body%2%d
=line_and_column
(line 9 at column 15)
=pc
Lwhile.body%3%d
=line_and_column
(line 9 at column 9)
=pc
Lwhile.body%4%d
=line_and_column
line 10
=pc
Lwhile.body%5%d
=line_and_column
line 10
=pc
Lwhile.body%6%d
=line_and_column
line 8
=pc
Lwhile.cond%1%d
=line_and_column
line 8
=pc
Lwhile.cond%2%d
=line_and_column
line 8
=pc
Lwhile.end%1%d
=line_and_column
line 12
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : L0%0%d : DSTMEM[(4 + input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)]_4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : L0%0%d : 4
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%l : L0%0%d : l'
input.dst.llvm-%sum.0 : Lwhile.cond%1%bbentry : sum'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%sum.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%l.addr.0 : Lwhile.cond%1%bbentry : l'
input.dst.llvm-%tobool : L0%0%d : not(input.dst.llvm-%l.addr.0 = 0)
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset : L0%0%d : 0
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset : L0%0%d : input.dst.llvm-%l.addr.0
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%val]_4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset : L0%0%d : 4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset : L0%0%d : (input.dst.llvm-%l.addr.0 + 4)
input.dst.llvm-%1 : Lwhile.body%6%bbentry : l'
input.dst.llvm-%add : Lwhile.body%4%bbentry : sum'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%l.addr.0.phi.tmpvar.entry : L0%0%d : l'
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset : L0%0%d : 0
input.dst.llvm-%val : L0%0%d : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset : L0%0%d : 4
input.dst.llvm-%next : L0%0%d : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset
input.dst.llvm-%sum.0.phi.tmpvar.while.body : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%l.addr.0.phi.tmpvar.while.body : L0%0%d : input.dst.llvm-%1
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%sum.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%tobool.Lwhile.cond%2%d : L0%0%d : not(input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry = 0)
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : L0%0%d : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : L0%0%d : l'
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%0.Lwhile.cond%1%bbentry : L0%0%d : DSTMEM[input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry]_4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : L0%0%d : 4
input.dst.llvm-%1.Lwhile.cond%1%bbentry : L0%0%d : DSTMEM[(4 + input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)]_4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : L0%0%d : (4 + input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%next.Lwhile.cond%1%bbentry : L0%0%d : (4 + input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)
input.dst.llvm-%val.Lwhile.cond%1%bbentry : L0%0%d : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
input.dst.local_alloc_count.Lwhile.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%l.addr.0
=dst.llvm-%l.addr.0 loop pc: Lwhile.cond%1%d
=dst.llvm-%l.addr.0 val_scevb
=dst.llvm-%l.addr.0 val_scevb scev
=dst.llvm-%l.addr.0 val_scevb scev loop: L0%0%d
=dst.llvm-%l.addr.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%l.addr.0 val_scevb scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%l.addr.0 val_scevb scev scev_expr done
=dst.llvm-%l.addr.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%l.addr.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%l.addr.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%l.addr.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%l.addr.0 atuse_scevb
=dst.llvm-%l.addr.0 atuse_scevb scev
=dst.llvm-%l.addr.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%l.addr.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%l.addr.0 atuse_scevb scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%l.addr.0 atuse_scevb scev scev_expr done
=dst.llvm-%l.addr.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%l.addr.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%l.addr.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%l.addr.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%l.addr.0 atexit_scev
=dst.llvm-%l.addr.0 atexit_scev loop: L0%0%d
=dst.llvm-%l.addr.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%l.addr.0 atexit_scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%l.addr.0 atexit_scev scev_expr done
=dst.llvm-%sum.0
=dst.llvm-%sum.0 loop pc: Lwhile.cond%1%d
=dst.llvm-%sum.0 val_scevb
=dst.llvm-%sum.0 val_scevb scev
=dst.llvm-%sum.0 val_scevb scev loop: L0%0%d
=dst.llvm-%sum.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%sum.0 val_scevb scev scev_expr
2 : input.dst.llvm-%sum.0 : BV32
=dst.llvm-%sum.0 val_scevb scev scev_expr done
=dst.llvm-%sum.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sum.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sum.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sum.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sum.0 atuse_scevb
=dst.llvm-%sum.0 atuse_scevb scev
=dst.llvm-%sum.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%sum.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sum.0 atuse_scevb scev scev_expr
2 : input.dst.llvm-%sum.0 : BV32
=dst.llvm-%sum.0 atuse_scevb scev scev_expr done
=dst.llvm-%sum.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sum.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sum.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sum.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sum.0 atexit_scev
=dst.llvm-%sum.0 atexit_scev loop: L0%0%d
=dst.llvm-%sum.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%sum.0 atexit_scev scev_expr
2 : input.dst.llvm-%sum.0 : BV32
=dst.llvm-%sum.0 atexit_scev scev_expr done
=dst.llvm-%val
=dst.llvm-%val loop pc: Lwhile.cond%1%d
=dst.llvm-%val val_scevb
=dst.llvm-%val val_scevb scev
=dst.llvm-%val val_scevb scev loop: L0%0%d
=dst.llvm-%val val_scevb scev scev_overflow_flag: 
=dst.llvm-%val val_scevb scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%val val_scevb scev scev_expr done
=dst.llvm-%val val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val val_scevb signed lower bound: 32:4294967295
=dst.llvm-%val val_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb
=dst.llvm-%val atuse_scevb scev
=dst.llvm-%val atuse_scevb scev loop: L0%0%d
=dst.llvm-%val atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%val atuse_scevb scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%val atuse_scevb scev scev_expr done
=dst.llvm-%val atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atexit_scev
=dst.llvm-%val atexit_scev loop: L0%0%d
=dst.llvm-%val atexit_scev scev_overflow_flag: 
=dst.llvm-%val atexit_scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%val atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lwhile.cond%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
3 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
3 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
3 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lwhile.cond%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
3 : input.dst.llvm-%0 : BV32
2 : input.dst.llvm-%sum.0 : BV32
4 : scev_op_add(3, 2) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
3 : input.dst.llvm-%0 : BV32
2 : input.dst.llvm-%sum.0 : BV32
4 : scev_op_add(3, 2) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
3 : input.dst.llvm-%0 : BV32
2 : input.dst.llvm-%sum.0 : BV32
4 : scev_op_add(3, 2) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%next
=dst.llvm-%next loop pc: Lwhile.cond%1%d
=dst.llvm-%next val_scevb
=dst.llvm-%next val_scevb scev
=dst.llvm-%next val_scevb scev loop: L0%0%d
=dst.llvm-%next val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next val_scevb scev scev_expr
5 : 00000000000000000000000000000100b
1 : input.dst.llvm-%l.addr.0 : BV32
6 : scev_op_add(5, 1) : loop L0%0%d : nsw
=dst.llvm-%next val_scevb scev scev_expr done
=dst.llvm-%next val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next val_scevb signed lower bound: 32:2147483652
=dst.llvm-%next val_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb
=dst.llvm-%next atuse_scevb scev
=dst.llvm-%next atuse_scevb scev loop: L0%0%d
=dst.llvm-%next atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next atuse_scevb scev scev_expr
5 : 00000000000000000000000000000100b
1 : input.dst.llvm-%l.addr.0 : BV32
6 : scev_op_add(5, 1) : loop L0%0%d : nsw
=dst.llvm-%next atuse_scevb scev scev_expr done
=dst.llvm-%next atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atexit_scev
=dst.llvm-%next atexit_scev loop: L0%0%d
=dst.llvm-%next atexit_scev scev_overflow_flag: nsw
=dst.llvm-%next atexit_scev scev_expr
5 : 00000000000000000000000000000100b
1 : input.dst.llvm-%l.addr.0 : BV32
6 : scev_op_add(5, 1) : loop L0%0%d : nsw
=dst.llvm-%next atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lwhile.cond%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
7 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
7 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
7 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at Lwhile.body%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns done
=Reaching Definitions at Lwhile.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns done
=Reaching Definitions at Lwhile.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns done
=Reaching Definitions at Lwhile.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 8 edges
  Lwhile.end%1%d=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 9 edges
  Lwhile.end%1%d=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lwhile.end%1%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%l
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%tobool.Lwhile.cond%2%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%add.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%0.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%1.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%next.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%val.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename ind4.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
pointer-implements-inductive-list
=LhsExpr
1 : $spec-arg-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : $llvm-arg-0 : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : $llvm-md : ARRAY[BV:32 -> BV:8]
6 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(14, 15) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L2%6%bbentry_Lwhile.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L2%6%bbentry_Lwhile.cond%1%bbentry
L2%6%bbentry_Lwhile.cond%1%bbentry => L2%6%bbentry_Lwhile.cond%1%bbentry
L2%6%bbentry_Lwhile.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%l : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 18 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%l : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L2%6%bbentry_Lwhile.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L2%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L2%6%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lwhile.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lwhile.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L2%6%bbentry_Lwhile.cond%1%bbentry => L2%6%bbentry_Lwhile.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L2%6%bbentry to L2%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L2%6%bbentry#{0,0}=>L2%6%d#{0,0})*((L2%6%d#{0,0}=>L2%9%bbentry#{0,0})*(L2%9%bbentry#{0,0}=>L2%6%bbentry#{1,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lwhile.cond%1%bbentry to Lwhile.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lwhile.cond%1%bbentry#{0,0}=>Lwhile.cond%2%d#{0,0})*((Lwhile.cond%2%d#{0,0}=>Lwhile.body%1%d#{0,0})*(Lwhile.body%1%d#{0,0}=>Lwhile.cond%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L2%6%bbentry_Lwhile.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L2%6%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L2%6%bbentry#{0,0}=>L2%6%d#{0,0})*((L2%6%d#{0,0}=>L2%7%bbentry#{0,0})*(L2%7%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lwhile.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lwhile.cond%1%bbentry#{0,0}=>Lwhile.cond%2%d#{0,0})*((Lwhile.cond%2%d#{0,0}=>Lwhile.end%1%d#{0,0})*(Lwhile.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
pointer-implements-inductive-list
=LhsExpr
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%l : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1.B2.C1
=Locs end
=Liveness in foo.A1.B2.C1
=live locs at L0%0%d_L0%0%d

=live locs at L2%6%bbentry_Lwhile.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1.B2.C1

=Branch affecting variable locs in foo.A1.B2.C1

=Relevant Memlabels in foo.A1.B2.C1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1.B2.C1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1.B2.C1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece cvc4.ce6.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin cvc4.ce6 f8b2df665e685286a915c7286050116
=input.spec-%var-l-1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar15 : BV:32
3 : Lambda50Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda51Var : BV:32
6 : unit : UNIT
7 : 1808360963 { 0x6bc96603 +1.57342565e88 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 238820493 { 0xe3c1c8d +1.46962130e157 } : COUNT
=input.spec-%var-l-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar15 : BV:32
3 : Lambda50Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda51Var : BV:32
6 : unit : UNIT
7 : 1808360963 { 0x6bc96603 +1.57342565e88 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-5.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : 238820493 { 0xe3c1c8d +1.46962130e157 } : COUNT
=input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-l-1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2626523777
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L2%6%bbentry_Lwhile.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce7.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce7 432c337fc9d96a15c6f6ef846afb96a4
=input.spec-%var-l-1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar19 : BV:32
3 : Lambda60Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda61Var : BV:32
6 : unit : UNIT
7 : 1623928431 { 0x60cb2e6f +1.58735454e66 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-l-1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2853900668
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece yices.ce8.num_edges_traversed0
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(epsilon)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin yices.ce8 4fbe3251822759f68592e1c0ac7aa
=input.spec-%var-l-1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar23 : BV:32
3 : Lambda70Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda71Var : BV:32
6 : unit : UNIT
7 : 1573078159 { 0x5dc3448f +1.52552974e60 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-l-1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
52945785
=counter_example_end
=global nodece 2 num_edges_traversed 0
=global nodece 2 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 3
=global nodece 3 nodece z3v487.ce193.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3v487.ce193 1d5ba4a9974410101f7c3cb36ba0e4de
=input.spec-%var-l-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indvar509 : BV:32
5 : Lambda1977Var : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda1978Var : BV:32
8 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
9 : sum(3, 2, 4) : SUM[UNIT,BV:32]
10 : prod(8, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-sum-0.L2%6%bbentry
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%6%bbentry
1 : 926599724 { 0x373aca2c +1.45929479e239 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1017 ] -> 38, [ 1018; 1018 ] -> 0, [ 1019; 1019 ] -> 0, [ 1020; 1021 ] -> 38, [ 1022; 1022 ] -> 0, [ 1023; 1023 ] -> 0, [ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1027 ] -> 38, [ 1028; 1028 ] -> 0, [ 1029; 1029 ] -> 0, [ 1030; 1030 ] -> 0, [ 1031; 1031 ] -> 0, [ 1032; 4294967295 ] -> 38, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 234881019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 234881020; 234881023 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 234881024; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 234881020 { 0xdfffffc +1.99999952e156 } : BV:32
=input.dst.llvm-%l
1 : 1018 { 0x3fa +1.12135e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar530 : BV:32
3 : Lambda2034Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda2035Var : BV:32
6 : unit : UNIT
7 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-l2-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar532 : BV:32
3 : Lambda2040Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda2041Var : BV:32
6 : unit : UNIT
7 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-5.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L2%6%bbentry
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.spec-%var-n-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar534 : BV:32
3 : Lambda2047Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda2048Var : BV:32
6 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
7 : unit : UNIT
8 : sum(1, 7, 2) : SUM[UNIT,BV:32]
9 : prod(6, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-val-0.L2%6%bbentry
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 1816429950 { 0x6c44857e +1.53532385e89 } : BV:32
=input.dst.llvm-%tobool.Lwhile.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lwhile.cond%1%bbentry
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%0.Lwhile.cond%1%bbentry
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.dst.llvm-%next.Lwhile.cond%1%bbentry
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.llvm-%val.Lwhile.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 234881020 { 0xdfffffc +1.99999952e156 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 234881023 { 0xdffffff +1.99999988e156 } : BV:32
=input.spec-%var-l-1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-1.2.0
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.2.0
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3830988011
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L2%6%bbentry_Lwhile.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece cvc4.ce194.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin cvc4.ce194 5d2a2a60fab1b9be29b37420f7e19c74
=input.spec-%var-l-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indvar517 : BV:32
5 : Lambda1997Var : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda1998Var : BV:32
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : sum(3, 2, 4) : SUM[UNIT,BV:32]
10 : prod(8, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-sum-0.L2%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%6%bbentry
1 : 156409428 { 0x9529e54 +1.64545679e147 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 1, [ 2; 163407 ] -> 0, [ 163408; 163408 ] -> 1, [ 163409; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 270087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 270088; 270091 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 270092; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 270088 { 0x41f08 +1.3219699e129 } : BV:32
=input.dst.llvm-%l
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar538 : BV:32
3 : Lambda2065Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda2066Var : BV:32
6 : unit : UNIT
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-l2-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar540 : BV:32
3 : Lambda2071Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda2072Var : BV:32
6 : unit : UNIT
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-5.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L2%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-n-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar542 : BV:32
3 : Lambda2078Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda2079Var : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : unit : UNIT
8 : sum(1, 7, 2) : SUM[UNIT,BV:32]
9 : prod(6, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-val-0.L2%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 1533214422 { 0x5b62fed6 +1.77340197e55 } : BV:32
=input.dst.llvm-%tobool.Lwhile.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : 163408 { 0x27e50 +1.1947975e129 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lwhile.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%0.Lwhile.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : 163412 { 0x27e54 +1.1948022e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%next.Lwhile.cond%1%bbentry
1 : 163412 { 0x27e54 +1.1948022e129 } : BV:32
=input.dst.llvm-%val.Lwhile.cond%1%bbentry
1 : 163408 { 0x27e50 +1.1947975e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 270088 { 0x41f08 +1.3219699e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 270091 { 0x41f0b +1.3219735e129 } : BV:32
=input.spec-%var-l-1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-1.2.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.2.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2255311032
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L2%6%bbentry_Lwhile.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3v487.ce488.num_edges_traversed0
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(epsilon)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce488 a31b63e3475b59c23341c46ac916d3
=input.spec-%var-l-1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar1637 : BV:32
3 : Lambda6639Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6640Var : BV:32
6 : unit : UNIT
7 : 34003292 { 0x206d95c +1.5350828e133 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar1639 : BV:32
3 : Lambda6644Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6645Var : BV:32
6 : unit : UNIT
7 : 2120635541 { 0x7e665495 +1.79945623e125 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-5.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-l-1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2804027190
=counter_example_end
=global nodece 5 num_edges_traversed 0
=global nodece 5 nodece_visted_pcs: 
L2%6%bbentry_Lwhile.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece cvc4.ce489.num_edges_traversed0
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(epsilon)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin cvc4.ce489 7962435d4e6fb888ed41b57b56ab44e0
=input.spec-%var-l-1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar1645 : BV:32
3 : Lambda6659Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6660Var : BV:32
6 : unit : UNIT
7 : 1532384685 { 0x5b5655ad +1.67448961e55 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 786431 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 786432; 786435 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 786436; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar1647 : BV:32
3 : Lambda6664Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6665Var : BV:32
6 : unit : UNIT
7 : 640222326 { 0x26290476 +1.32044863e205 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-5.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
=input.spec-%var-l-1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2095832883
=counter_example_end
=global nodece 6 num_edges_traversed 0
=global nodece 6 nodece_visted_pcs: 
L2%6%bbentry_Lwhile.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece yices.ce490.num_edges_traversed0
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(epsilon)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin yices.ce490 9078ad3bca5459243f8d28a17f60
=input.spec-%var-l-1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar1653 : BV:32
3 : Lambda6679Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6680Var : BV:32
6 : unit : UNIT
7 : 1950566046 { 0x7443469e +1.52559256e105 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar1655 : BV:32
3 : Lambda6684Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6685Var : BV:32
6 : unit : UNIT
7 : 647046756 { 0x26912664 +1.13398408e206 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-5.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-l-1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2140085452
=counter_example_end
=global nodece 7 num_edges_traversed 0
=global nodece 7 nodece_visted_pcs: 
L2%6%bbentry_Lwhile.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece cvc4.ce619.num_edges_traversed2
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(epsilon)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin cvc4.ce619 414a8c9946f3e5b57d6e59c914a056
=retaddr_const
1 : 990823344 { 0x3b0ec3b0 +1.11534690e247 } : BV:32
=input.spec-%var-l-1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar15 : BV:32
3 : Lambda50Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda51Var : BV:32
6 : unit : UNIT
7 : 1808360963 { 0x6bc96603 +1.57342565e88 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar15 : BV:32
3 : Lambda50Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda51Var : BV:32
6 : unit : UNIT
7 : 1808360963 { 0x6bc96603 +1.57342565e88 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-4.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-5.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%tobool.Lwhile.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 990823344 { 0x3b0ec3b0 +1.11534690e247 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1738703141 { 0x67a28125 +1.26956617e80 } : BV:32
=input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : 238820493 { 0xe3c1c8d +1.46962130e157 } : COUNT
=input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-l-1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4251623033
=counter_example_end
=global nodece 8 num_edges_traversed 2
=global nodece 8 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 9
=global nodece 9 nodece z3v487.ce601.num_edges_traversed2
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(epsilon)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3v487.ce601 44764f3275a7829a264daed43af7e9
=retaddr_const
1 : 1312661730 { 0x4e3da0e2 +1.48147225e29 } : BV:32
=input.spec-%var-l-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indvar509 : BV:32
5 : Lambda1977Var : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda1978Var : BV:32
8 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
9 : sum(3, 2, 4) : SUM[UNIT,BV:32]
10 : prod(8, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L2%6%bbentry
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%6%bbentry
1 : 926599724 { 0x373aca2c +1.45929479e239 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1017 ] -> 38, [ 1018; 1018 ] -> 0, [ 1019; 1019 ] -> 0, [ 1020; 1021 ] -> 38, [ 1022; 1022 ] -> 0, [ 1023; 1023 ] -> 0, [ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1027 ] -> 38, [ 1028; 1028 ] -> 0, [ 1029; 1029 ] -> 0, [ 1030; 1030 ] -> 0, [ 1031; 1031 ] -> 0, [ 1032; 4294967295 ] -> 38, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 234881019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 234881020; 234881023 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 234881024; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 234881020 { 0xdfffffc +1.99999952e156 } : BV:32
=input.dst.llvm-%l
1 : 1018 { 0x3fa +1.12135e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar530 : BV:32
3 : Lambda2034Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda2035Var : BV:32
6 : unit : UNIT
7 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-4.E0%0%d
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.spec-%tmpvar-6.E0%0%d
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.spec-%tmpvar-3.E0%0%d
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-5.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.E0%0%d
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 1816429950 { 0x6c44857e +1.53532385e89 } : BV:32
=input.dst.llvm-%tobool.Lwhile.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1312661730 { 0x4e3da0e2 +1.48147225e29 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1214589807 { 0x48652b6f +1.79038798e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 234881020 { 0xdfffffc +1.99999952e156 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 234881023 { 0xdffffff +1.99999988e156 } : BV:32
=input.spec-%var-l-1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-1.2.0
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.2.0
1 : 640024576 { 0x26260000 +1.29687500e205 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1280943651
=counter_example_end
=global nodece 9 num_edges_traversed 2
=global nodece 9 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 10
=global nodece 10 nodece cvc4.ce583.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(epsilon)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin cvc4.ce583 dbcdf2e526376ae63054339b694ef7
=retaddr_const
1 : 389464941 { 0x1736c36d +1.42783892e175 } : BV:32
=input.spec-%var-l-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indvar517 : BV:32
5 : Lambda1997Var : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda1998Var : BV:32
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : sum(3, 2, 4) : SUM[UNIT,BV:32]
10 : prod(8, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L2%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%6%bbentry
1 : 156409428 { 0x9529e54 +1.64545679e147 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 1, [ 2; 163407 ] -> 0, [ 163408; 163408 ] -> 1, [ 163409; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 270087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 270088; 270091 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 270092; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 270088 { 0x41f08 +1.3219699e129 } : BV:32
=input.dst.llvm-%l
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar538 : BV:32
3 : Lambda2065Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda2066Var : BV:32
6 : unit : UNIT
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-4.E0%0%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-6.E0%0%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.E0%0%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-5.L2%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.E0%0%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 1533214422 { 0x5b62fed6 +1.77340197e55 } : BV:32
=input.dst.llvm-%tobool.Lwhile.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 389464941 { 0x1736c36d +1.42783892e175 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1680376273 { 0x642881d1 +1.31646168e73 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 270088 { 0x41f08 +1.3219699e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 270091 { 0x41f0b +1.3219735e129 } : BV:32
=input.spec-%var-l-1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-1.2.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.2.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L2%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
597064592
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 5
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 6
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 7
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 8
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point cvc4.ce6
=inductive-invariants point_set point cvc4.ce6 expr point cvc4.ce6
=inductive-invariants point_set point cvc4.ce6 expr point cvc4.ce6 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point cvc4.ce6 expr point cvc4.ce6 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point cvc4.ce6 expr point cvc4.ce6 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce6 expr point cvc4.ce6 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce6 expr point cvc4.ce6 done
=inductive-invariants point_set point z3v487.ce7
=inductive-invariants point_set point z3v487.ce7 expr point z3v487.ce7
=inductive-invariants point_set point z3v487.ce7 expr point z3v487.ce7 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce7 expr point z3v487.ce7 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7 expr point z3v487.ce7 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7 expr point z3v487.ce7 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7 expr point z3v487.ce7 done
=inductive-invariants point_set point yices.ce8
=inductive-invariants point_set point yices.ce8 expr point yices.ce8
=inductive-invariants point_set point yices.ce8 expr point yices.ce8 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point yices.ce8 expr point yices.ce8 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point yices.ce8 expr point yices.ce8 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce8 expr point yices.ce8 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce8 expr point yices.ce8 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank1.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank1.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank1.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank1.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank1.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank1.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank1.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank1.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank1.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank1.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank1.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
2147483648
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank1.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank1.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank2.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank2.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank2.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank2.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank2.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank2.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank2.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank2.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank2.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank2.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank2.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1073741824
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank2.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank2.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank17.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank17.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank17.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank17.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank17.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank17.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank17.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank17.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank17.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank17.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank17.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
32768
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank17.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank17.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank18.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank18.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank18.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank18.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank18.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank18.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank18.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank18.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank18.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank18.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank18.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
16384
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank18.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank18.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank23.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank23.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank23.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank23.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank23.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank23.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank23.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank23.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank23.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank23.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank23.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
512
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank23.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank23.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank24.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank24.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank24.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank24.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank24.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank24.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank24.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank24.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank24.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank24.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank24.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
256
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank24.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank24.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank3.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank3.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank3.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank3.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank3.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank3.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank3.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank3.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank3.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank3.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank3.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
536870912
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank3.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank3.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank4.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank4.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank4.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank4.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank4.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank4.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank4.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank4.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank4.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank4.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank4.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
268435456
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank4.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank4.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank5.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank5.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank5.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank5.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank5.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank5.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank5.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank5.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank5.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank5.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank5.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
134217728
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank5.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank5.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank6.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank6.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank6.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank6.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank6.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank6.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank6.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank6.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank6.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank6.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank6.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
67108864
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank6.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank6.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank7.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank7.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank7.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank7.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank7.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank7.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank7.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank7.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank7.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank7.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank7.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
33554432
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank7.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank7.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank8.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank8.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank8.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank8.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank8.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank8.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank8.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank8.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank8.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank8.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank8.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
16777216
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank8.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank8.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank9.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank9.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank9.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank9.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank9.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank9.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank9.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank9.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank9.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank9.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank9.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
8388608
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank9.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank9.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank10.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank10.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank10.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank10.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank10.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank10.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank10.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank10.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank10.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank10.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank10.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
4194304
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank10.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank10.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank11.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank11.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank11.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank11.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank11.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank11.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank11.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank11.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank11.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank11.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank11.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
2097152
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank11.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank11.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank12.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank12.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank12.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank12.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank12.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank12.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank12.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank12.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank12.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank12.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank12.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1048576
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank12.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank12.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank13.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank13.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank13.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank13.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank13.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank13.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank13.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank13.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank13.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank13.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank13.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
524288
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank13.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank13.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank14.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank14.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank14.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank14.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank14.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank14.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank14.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank14.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank14.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank14.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank14.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
262144
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank14.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank14.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank19.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank19.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank19.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank19.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank19.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank19.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank19.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank19.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank19.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank19.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank19.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
8192
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank19.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank19.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank20.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank20.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank20.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank20.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank20.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank20.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank20.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank20.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank20.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank20.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank20.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
4096
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank20.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank20.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank21.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank21.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank21.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank21.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank21.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank21.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank21.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank21.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank21.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank21.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank21.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
2048
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank21.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank21.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank22.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank22.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank22.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank22.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank22.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank22.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank22.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank22.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank22.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank22.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank22.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1024
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank22.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank22.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank15.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank15.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank15.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank15.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank15.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank15.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank15.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank15.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank15.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank15.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank15.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
131072
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank15.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank15.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank16.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank16.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank16.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank16.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank16.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank16.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank16.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank16.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank16.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank16.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank16.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
65536
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank16.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank16.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank25.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank25.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank25.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank25.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank25.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank25.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank25.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank25.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank25.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank25.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank25.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
128
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank25.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank25.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank26.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank26.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank26.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank26.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank26.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank26.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank26.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank26.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank26.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank26.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank26.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
64
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank26.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank26.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank27.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank27.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank27.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank27.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank27.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank27.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank27.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank27.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank27.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank27.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank27.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
32
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank27.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank27.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank28.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank28.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank28.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank28.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank28.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank28.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank28.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank28.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank28.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank28.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank28.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
16
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank28.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank28.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank29.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank29.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank29.bvlen32.orig_ce.cvc4.ce6.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank29.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank29.bvlen32.orig_ce.cvc4.ce6.1 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank29.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank29.bvlen32.orig_ce.cvc4.ce6.1 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank29.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank29.bvlen32.orig_ce.cvc4.ce6.1 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank29.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank29.bvlen32.orig_ce.cvc4.ce6.1 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
8
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx4.coeff_rank29.bvlen32.orig_ce.cvc4.ce6.1 expr point bvcover-weakening-point.fast.expr_idx4.coeff_rank29.bvlen32.orig_ce.cvc4.ce6.1 done
=inductive-invariants point_set point yices.ce143
=inductive-invariants point_set point yices.ce143 expr point yices.ce143
=inductive-invariants point_set point yices.ce143 expr point yices.ce143 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point yices.ce143 expr point yices.ce143 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point yices.ce143 expr point yices.ce143 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce143 expr point yices.ce143 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce143 expr point yices.ce143 done
=inductive-invariants point_set point z3v487.ce142
=inductive-invariants point_set point z3v487.ce142 expr point z3v487.ce142
=inductive-invariants point_set point z3v487.ce142 expr point z3v487.ce142 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce142 expr point z3v487.ce142 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point z3v487.ce142 expr point z3v487.ce142 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce142 expr point z3v487.ce142 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce142 expr point z3v487.ce142 done
=inductive-invariants point_set point cvc4.ce141
=inductive-invariants point_set point cvc4.ce141 expr point cvc4.ce141
=inductive-invariants point_set point cvc4.ce141 expr point cvc4.ce141 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point cvc4.ce141 expr point cvc4.ce141 val 2 for input.spec-%var-sum-0.L2%6%bbentry
0
=inductive-invariants point_set point cvc4.ce141 expr point cvc4.ce141 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce141 expr point cvc4.ce141 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce141 expr point cvc4.ce141 done
=inductive-invariants point_set point z3v487.ce193
=inductive-invariants point_set point z3v487.ce193 expr point z3v487.ce193
=inductive-invariants point_set point z3v487.ce193 expr point z3v487.ce193 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce193 expr point z3v487.ce193 val 2 for input.spec-%var-sum-0.L2%6%bbentry
640024576
=inductive-invariants point_set point z3v487.ce193 expr point z3v487.ce193 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
640024576
=inductive-invariants point_set point z3v487.ce193 expr point z3v487.ce193 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce193 expr point z3v487.ce193 done
=inductive-invariants point_set point cvc4.ce194
=inductive-invariants point_set point cvc4.ce194 expr point cvc4.ce194
=inductive-invariants point_set point cvc4.ce194 expr point cvc4.ce194 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point cvc4.ce194 expr point cvc4.ce194 val 2 for input.spec-%var-sum-0.L2%6%bbentry
1
=inductive-invariants point_set point cvc4.ce194 expr point cvc4.ce194 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1
=inductive-invariants point_set point cvc4.ce194 expr point cvc4.ce194 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce194 expr point cvc4.ce194 done
=inductive-invariants point_set point yices.ce195
=inductive-invariants point_set point yices.ce195 expr point yices.ce195
=inductive-invariants point_set point yices.ce195 expr point yices.ce195 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point yices.ce195 expr point yices.ce195 val 2 for input.spec-%var-sum-0.L2%6%bbentry
2147483648
=inductive-invariants point_set point yices.ce195 expr point yices.ce195 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
2147483648
=inductive-invariants point_set point yices.ce195 expr point yices.ce195 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce195 expr point yices.ce195 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L2%6%bbentry_Lwhile.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L2%6%bbentry_Lwhile.cond%1%bbentry for reason inductive-invariants
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: cvc4.ce6
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 3 exprs
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-3-free_var_idx.4
=LhsExpr
1 : 0 { 0x0 } : BV:3
=RhsExpr
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 2 { 0x2 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:3
=predicate done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.3
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=predicate done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: cvc4.ce6
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: bvcover-weakening-point.fast.expr_idx4.coeff_rank1.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: bvcover-weakening-point.fast.expr_idx4.coeff_rank2.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: bvcover-weakening-point.fast.expr_idx4.coeff_rank17.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: bvcover-weakening-point.fast.expr_idx4.coeff_rank18.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: bvcover-weakening-point.fast.expr_idx4.coeff_rank23.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: bvcover-weakening-point.fast.expr_idx4.coeff_rank24.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: bvcover-weakening-point.fast.expr_idx4.coeff_rank3.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: bvcover-weakening-point.fast.expr_idx4.coeff_rank4.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: bvcover-weakening-point.fast.expr_idx4.coeff_rank5.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: bvcover-weakening-point.fast.expr_idx4.coeff_rank6.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: bvcover-weakening-point.fast.expr_idx4.coeff_rank7.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 12: bvcover-weakening-point.fast.expr_idx4.coeff_rank8.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 13: bvcover-weakening-point.fast.expr_idx4.coeff_rank9.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 14: bvcover-weakening-point.fast.expr_idx4.coeff_rank10.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 15: bvcover-weakening-point.fast.expr_idx4.coeff_rank11.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 16: bvcover-weakening-point.fast.expr_idx4.coeff_rank12.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 17: bvcover-weakening-point.fast.expr_idx4.coeff_rank13.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 18: bvcover-weakening-point.fast.expr_idx4.coeff_rank14.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 19: bvcover-weakening-point.fast.expr_idx4.coeff_rank19.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 20: bvcover-weakening-point.fast.expr_idx4.coeff_rank20.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 21: bvcover-weakening-point.fast.expr_idx4.coeff_rank21.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 22: bvcover-weakening-point.fast.expr_idx4.coeff_rank22.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 23: bvcover-weakening-point.fast.expr_idx4.coeff_rank15.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 24: bvcover-weakening-point.fast.expr_idx4.coeff_rank16.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 25: bvcover-weakening-point.fast.expr_idx4.coeff_rank25.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 26: bvcover-weakening-point.fast.expr_idx4.coeff_rank26.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 27: bvcover-weakening-point.fast.expr_idx4.coeff_rank27.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 28: bvcover-weakening-point.fast.expr_idx4.coeff_rank28.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 29: bvcover-weakening-point.fast.expr_idx4.coeff_rank29.bvlen32.orig_ce.cvc4.ce6.1
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 30: z3v487.ce193
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 31: cvc4.ce194
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=3; number of visited CEs=32; number of preds=2
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
3
-2147483648->0; 2->4294967295; 3->1; 4->0; 
4
-2147483648->0; 2->0; 3->0; 4->536870912; 
matrix done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 4
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: cvc4.ce6
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=1; number of preds=0
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 0
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 0
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based name spec-coupling-invariants
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 4 exprs
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based point_expr 5
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based point_expr 6
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based point_expr 7
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based point_expr 8
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based predicate_set done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based is assumed eqclass : 0
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based visited ce 0: cvc4.ce6
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based visited ces set done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based summary: number of exprs=4; number of visited CEs=1; number of preds=2
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 4 type houdini
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 4 type houdini name local-sizes-are-equal
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 4 type houdini expr_group_type HOUDINI with 0 exprs
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 4 type houdini done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 4 type houdini predicate_set done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 4 type houdini is assumed eqclass : 0
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 4 type houdini visited ce 0: cvc4.ce6
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 4 type houdini visited ces set done
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 4 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L2%6%bbentry_Lwhile.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-7.E0%0%d : BV:32
2 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL2%6%bbentry_Lwhile.cond%1%bbentry.to_pcL2%6%bbentry_Lwhile.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
4 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
5 : 1 { 0x1 +1.0e1025 } : INT
6 : sum_is(4, 5) : BOOL
7 : or(3, 6) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL2%6%bbentry_Lwhile.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : 0 { 0x0 +1.0e1025 } : INT
7 : sum_is(5, 6) : BOOL
8 : or(4, 7) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-7.E0%0%d : BV:32
2 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L2%6%bbentry_Lwhile.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-sum-0.L2%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-l-0.L2%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=DST Ranking expr 0
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140338 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140339 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140408 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140340 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140317 : 4 { 0x4 +1.0e1025 } : INT
140318 : 0 { 0x0 } : BOOL
140409 : select(140338, 140339, 140408, 140340, 140317, 140318) : BV:32
=RhsExpr
140341 : input.dst.llvm-%l : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lwhile.cond%1%bbentry
=LhsExpr
140341 : input.dst.llvm-%l : BV:32
140347 : 8 { 0x8 +1.0e1025 } : INT
140348 : islangaligned(140341, 140347) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #2.pred
=Comment
precond-mlasserts
=LhsExpr
140617 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140618 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140619 : bvule(140617, 140618) : BOOL
140329 : 4 { 0x4 +1.47e129 } : BV:32
140367 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140620 : bvadd(140329, 140367) : BV:32
140621 : bvadd(140617, 140620) : BV:32
140622 : eq(140618, 140621) : BOOL
140623 : and(140619, 140622) : BOOL
140340 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140624 : 3 { 0x3 +1.35e129 } : BV:32
140625 : bvand(140340, 140624) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140626 : eq(140625, 140276) : BOOL
140627 : and(140623, 140626) : BOOL
140628 : eq(140340, 140617) : BOOL
140629 : and(140627, 140628) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #3.pred
=Comment
pointer-implements-inductive-list
=LhsExpr
140273 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140341 : input.dst.llvm-%l : BV:32
140323 : Indvar0 : BV:32
140328 : Lambda1Var : BV:32
140338 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140339 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140630 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
140329 : 4 { 0x4 +1.47e129 } : BV:32
140330 : bvadd(140328, 140329) : BV:32
140317 : 4 { 0x4 +1.0e1025 } : INT
140318 : 0 { 0x0 } : BOOL
140656 : select(140338, 140339, 140630, 140330, 140317, 140318) : BV:32
140657 : lambda(140328, 140656) : FUNCTION[BV:32 -> BV:32]
140319 : Lambda0Var : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140641 : eq(140276, 140319) : BOOL
140293 : 1 { 0x1 +1.11e129 } : BV:32
140642 : ite(140641, 140276, 140293) : BV:32
140322 : unit : UNIT
140658 : select(140338, 140339, 140630, 140319, 140317, 140318) : BV:32
140659 : prod(140658, 140323) : PROD[BV:32,BV:32]
140660 : sum(140642, 140322, 140659) : SUM[UNIT,PROD[BV:32,BV:32]]
140661 : lambda(140319, 140660) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
140662 : ind(140341, 140323, 140657, 140661) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140663 : eq(140273, 140662) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%6%bbentry_Lwhile.cond%1%bbentry done
cg.assumes_around_edge at L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry
cg.assumes_around_edge at L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #0
cg.assumes_around_edge at L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry assume #0.pred
=Comment
merged-predicate
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140495 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
140547 : eq(140276, 140495) : BOOL
140548 : not(140547) : BOOL
140576 : isgepoffset(140495, 140276) : BOOL
140275 : 1 { 0x1 } : BOOL
140578 : and(140275, 140576) : BOOL
140597 : and(140576, 140578) : BOOL
140317 : 4 { 0x4 +1.0e1025 } : INT
140601 : islangaligned(140495, 140317) : BOOL
140603 : and(140597, 140601) : BOOL
140329 : 4 { 0x4 +1.47e129 } : BV:32
140551 : bvadd(140329, 140495) : BV:32
140580 : isgepoffset(140551, 140329) : BOOL
140584 : islangaligned(140551, 140317) : BOOL
140338 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140339 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140425 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140318 : 0 { 0x0 } : BOOL
140557 : select(140338, 140339, 140425, 140551, 140317, 140318) : BV:32
140347 : 8 { 0x8 +1.0e1025 } : INT
140586 : islangaligned(140557, 140347) : BOOL
140589 : and(140584, 140586) : BOOL
140594 : and(140578, 140580, 140584, 140589) : BOOL
143249 : and(140603, 140594) : BOOL
143258 : eq(143249, 140275) : BOOL
143263 : implies(140548, 143258) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L2%6%bbentry_Lwhile.cond%1%bbentry=>L2%6%bbentry_Lwhile.cond%1%bbentry done
cg.assumes_around_edge at L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L2%6%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L2%6%bbentry_Lwhile.cond%1%bbentry
m_dst_rank: 1, m_src_rank: 0, m_spec_rank: 3
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
