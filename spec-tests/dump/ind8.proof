=FunctionName: make_list
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph make_list.A2.B1.C1.D1.E2
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.make_list:
=TFG:
=Nodes: L0%0%d L3%6%bbentry L3%7%d L3%8%bbentry L3%9%bbentry E0%0%d
=Edges:
L0%0%d => L3%6%bbentry
L3%6%bbentry => L3%7%d
L3%7%d => L3%9%bbentry
L3%7%d => L3%8%bbentry
L3%8%bbentry => E0%0%d
L3%9%bbentry => L3%6%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%7%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%8%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%9%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: make_list
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-n-1 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;make_list}
=memlabel_map.0 for call-context {*;make_list}
mlheap.src.spec.make_list : memlabel-mem--heap
=Edge: L0%0%d => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-10.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : unit : UNIT
4 : sum_init(1, 2, 3) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : unit : UNIT
4 : sum_init(1, 2, 3) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-n-0.L3%6%bbentry
1 : input.spec-%var-n-1 : BV:32
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_sum)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%6%bbentry => L3%7%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : input.spec-%var-n-0.L3%6%bbentry : BV:32
3 : bvuge(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_bvuge)
tfg_edge_comment end

=Edge: L3%7%d => L3%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:ite_false_split
tfg_edge_comment end

=Edge: L3%7%d => L3%8%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:ite_true_split
tfg_edge_comment end

=Edge: L3%8%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-11.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-12.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-7.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-8.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*ite_true_merge)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%9%bbentry => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(3, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
7 : sum_init(1, 2, 6) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-4.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(3, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
7 : sum_init(1, 2, 6) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-n-0.L3%6%bbentry
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
4 : prod_init(1, 2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-new_l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(3, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
7 : sum_init(1, 2, 6) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*ctor_prod)*((((ctor_sum*letin_def)*ctor_bv)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.make_list
=Loc 1 in src.spec.make_list.
REGMEM
spec-%var-n-1
1 : input.spec-%var-n-1 : BV:32
=Loc 18 in src.spec.make_list.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 19 in src.spec.make_list.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 20 in src.spec.make_list.
REGMEM
spec-%tmpvar-0.L3%7%d
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
=Loc 21 in src.spec.make_list.
REGMEM
spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=Loc 22 in src.spec.make_list.
REGMEM
spec-%var-n-0.L3%6%bbentry
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=Loc 23 in src.spec.make_list.
REGMEM
spec-%tmpvar-11.E0%0%d
1 : input.spec-%tmpvar-11.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 24 in src.spec.make_list.
REGMEM
spec-%tmpvar-12.E0%0%d
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 25 in src.spec.make_list.
REGMEM
spec-%tmpvar-7.E0%0%d
1 : input.spec-%tmpvar-7.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 26 in src.spec.make_list.
REGMEM
spec-%tmpvar-8.E0%0%d
1 : input.spec-%tmpvar-8.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 27 in src.spec.make_list.
REGMEM
spec-%var-l-0.L3%6%bbentry
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 28 in src.spec.make_list.
REGMEM
spec-%tmpvar-10.L3%6%bbentry
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 29 in src.spec.make_list.
REGMEM
spec-%tmpvar-9.L3%6%bbentry
1 : input.spec-%tmpvar-9.L3%6%bbentry : BV:32
=Loc 30 in src.spec.make_list.
REGMEM
src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
=Loc 31 in src.spec.make_list.
REGMEM
spec-%tmpvar-1.L3%6%bbentry
1 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=Loc 32 in src.spec.make_list.
REGMEM
spec-%tmpvar-2.L3%6%bbentry
1 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 33 in src.spec.make_list.
REGMEM
spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%tmpvar-3.L3%6%bbentry : BV:32
=Loc 34 in src.spec.make_list.
REGMEM
spec-%tmpvar-4.L3%6%bbentry
1 : input.spec-%tmpvar-4.L3%6%bbentry : BV:32
=Loc 35 in src.spec.make_list.
REGMEM
spec-%var-new_l-0.L3%6%bbentry
1 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Locs end
=Liveness in src.spec.make_list
=live locs at L0%0%d
1, 
=live locs at L3%6%bbentry
21, 22, 27, 
=live locs at L3%7%d
20, 21, 22, 27, 
=live locs at L3%8%bbentry
27, 
=live locs at L3%9%bbentry
21, 22, 27, 
=live locs at E0%0%d
24, 

=Definedness in src.spec.make_list
=loc definedness at L0%0%d
1, 18, 19
=loc definedness at L3%6%bbentry
1, 18, 19, 21, 22, 27, 28, 29, 30
=loc definedness at L3%7%d
1, 18, 19, 20, 21, 22, 27, 28, 29, 30
=loc definedness at L3%8%bbentry
1, 18, 19, 20, 21, 22, 27, 28, 29, 30
=loc definedness at L3%9%bbentry
1, 18, 19, 20, 21, 22, 27, 28, 29, 30
=loc definedness at E0%0%d
1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30

=Branch affecting variable locs in src.spec.make_list
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%6%bbentry
21, 22
=branch affecting variable locs at L3%7%d
20, 21, 22
=branch affecting variable locs at L3%8%bbentry

=branch affecting variable locs at L3%9%bbentry
21, 22
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.make_list
=relevant memlabels
=function: make_list
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 21 {input.spec-%var-i-0.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 22 {input.spec-%var-n-0.L3%6%bbentry }
1 : input.spec-%var-n-1 : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 27 {input.spec-%var-l-0.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 28 {input.spec-%tmpvar-10.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 29 {input.spec-%tmpvar-9.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 30 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d for loc_id 20 {input.spec-%tmpvar-0.L3%7%d }
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : input.spec-%var-n-0.L3%6%bbentry : BV:32
3 : bvuge(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 23 {input.spec-%tmpvar-11.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 24 {input.spec-%tmpvar-12.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 25 {input.spec-%tmpvar-7.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 26 {input.spec-%tmpvar-8.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 21 {input.spec-%var-i-0.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 27 {input.spec-%var-l-0.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(3, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
7 : sum_init(1, 2, 6) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 30 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 31 {input.spec-%tmpvar-1.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
4 : prod_init(1, 2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 32 {input.spec-%tmpvar-2.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(3, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
7 : sum_init(1, 2, 6) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 33 {input.spec-%tmpvar-3.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 34 {input.spec-%tmpvar-4.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry for loc_id 35 {input.spec-%var-new_l-0.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(3, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
7 : sum_init(1, 2, 6) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%6%bbentry:
vacuous mls at L3%7%d:
vacuous mls at L3%8%bbentry:
vacuous mls at L3%9%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%6%bbentry:
non-vacuous mls at L3%7%d:
non-vacuous mls at L3%8%bbentry:
non-vacuous mls at L3%9%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.make_list
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-n-1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 22
=loc_expr
140359 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-n-1 : BV:32
=avail_exprs_val.end
=loc 28
=loc_expr
140374 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.end
=loc 29
=loc_expr
140375 : input.spec-%tmpvar-9.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 33
=loc_expr
140378 : input.spec-%tmpvar-3.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.make_list
=loc 28 expr
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=loc 28 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140279 : unit : UNIT
140391 : Indxform7 : BV:32
140397 : Lambda14 : BV:32
140398 : lambda(140397, 140397) : FUNCTION[BV:32 -> BV:32]
140399 : Lambda15 : BV:32
140395 : sum(140276, 140279, 140391) : SUM[UNIT,BV:32]
140396 : prod(140276, 140395) : PROD[BV:32,SUM[UNIT,BV:32]]
140402 : lambda(140399, 140396) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
140406 : ind(140276, 140391, 140398, 140402) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
140407 : sum(140276, 140279, 140406) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140408 : sym_const(140407) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=loc 29 expr
1 : input.spec-%tmpvar-9.L3%6%bbentry : BV:32
=loc 29 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 33 expr
1 : input.spec-%tmpvar-3.L3%6%bbentry : BV:32
=loc 33 spreled-expr
140295 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;make_list}
=loc_id 1 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 18 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 19 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 20 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 21 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 22 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 23 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 24 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 25 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 26 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 27 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 28 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 29 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 31 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 33 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 34 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 35 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 28 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 29 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 33 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%6%bbentry=>L3%7%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%8%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%9%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%9%bbentry=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%6%bbentry
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-n-0.L3%6%bbentry
1 : input.spec-%var-n-1 : BV:32
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%6%bbentry=>L3%7%d
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : input.spec-%var-n-0.L3%6%bbentry : BV:32
3 : bvuge(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%8%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%bbentry=>E0%0%d
=spec-%tmpvar-11.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-12.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-7.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-8.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%9%bbentry=>L3%6%bbentry
=spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(3, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
7 : sum_init(1, 2, 6) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-4.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(3, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
7 : sum_init(1, 2, 6) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
4 : prod_init(1, 2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-new_l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(3, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
7 : sum_init(1, 2, 6) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.make_list
=suffixpath_at_L0%0%d for src.spec.make_list
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%6%bbentry for src.spec.make_list
=suffixpath_at_L3%6%bbentry.graph_edge_composition
(L0%0%d=>L3%6%bbentry)
=suffixpath_at_L3%7%d for src.spec.make_list
=suffixpath_at_L3%7%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*(L3%6%bbentry=>L3%7%d))
=suffixpath_at_L3%8%bbentry for src.spec.make_list
=suffixpath_at_L3%8%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%8%bbentry)))
=suffixpath_at_L3%9%bbentry for src.spec.make_list
=suffixpath_at_L3%9%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%9%bbentry)))
=suffixpath_at_E0%0%d for src.spec.make_list
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*((L3%7%d=>L3%8%bbentry)*(L3%8%bbentry=>E0%0%d))))
=suffixpaths for src.spec.make_list done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry done
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d done
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry done
tfg.assumes_around_edge at L3%7%d=>L3%9%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%9%bbentry done
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%9%bbentry=>L3%6%bbentry
tfg.assumes_around_edge at L3%9%bbentry=>L3%6%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.make_list:
=TFG:
=Nodes: L0%0%d Lfor.body%1%intermediateVal1 Lfor.body%1%fcallStart Lfor.body%1%fcallEnd Lfor.body%2%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.end%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%fcallStart
Lfor.cond%2%d => Lfor.end%1%d
Lfor.end%1%d => E0%0%d
Lfor.body%1%fcallStart => Lfor.body%1%fcallEnd
Lfor.body%1%fcallEnd => Lfor.body%1%intermediateVal1
Lfor.body%1%intermediateVal1 => Lfor.body%2%d
Lfor.body%2%d => Lfor.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal1
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%fcallStart
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%fcallEnd
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: make_list
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : make_list : 23 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;make_list}
=memlabel_map.0 for call-context {*;make_list}
mlcall.dst.llvm.make_list.2 : memlabel-mem-
=memlabel_map.1 for call-context {*;make_list}
mlcall.dst.llvm.make_list.3 : memlabel-mem-
=memlabel_map.2 for call-context {*;make_list}
mlheap.dst.llvm.make_list : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.3 for call-context {*;make_list}
mlvar.dst.llvm.make_list.0 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=memlabel_map.4 for call-context {*;make_list}
mlvar.dst.llvm.make_list.1 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !26)*  %l.0 = phi %struct.list* [ null, %entry ], [ %0, %for.inc ], !dbg !21)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !25*  br label %for.cond, !dbg !26))*  br label %for.cond, !dbg !26)*(  br label %for.cond, !dbg !26*  br label %for.cond, !dbg !26))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !27)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%fcallStart
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !29*  br i1 %cmp, label %for.body, label %for.end, !dbg !29)*(  br i1 %cmp, label %for.body, label %for.end, !dbg !29*fcall_edge_start))
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !29*  br i1 %cmp, label %for.body, label %for.end, !dbg !29)*  br i1 %cmp, label %for.body, label %for.end, !dbg !29)
tfg_edge_comment end

=Edge: Lfor.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret %struct.list* %l.0, !dbg !43
tfg_edge_comment end

=Edge: Lfor.body%1%fcallStart => Lfor.body%1%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%call.Lfor.body%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : mlcall.dst.llvm.make_list.2 : MEMLABEL
3 : mlcall.dst.llvm.make_list.3 : MEMLABEL
4 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-mem.Lfor.body%1%fcallEnd
1 : func.call30eccc4aa0775a3174483e053ab761b.mem : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> ARRAY[BV:32 -> BV:8]]
2 : mlcall.dst.llvm.make_list.2 : MEMLABEL
3 : mlcall.dst.llvm.make_list.3 : MEMLABEL
4 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 0 { 0x0 +1.0e129 } : REGID
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : ARRAY[BV:32 -> BV:8]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*  %call = call i8* @malloc(i32 8), !dbg !30)
tfg_edge_comment end

=Edge: Lfor.body%1%fcallEnd => Lfor.body%1%intermediateVal1
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_end*  %call = call i8* @malloc(i32 8), !dbg !30)
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal1 => Lfor.body%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%call.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(1, 4) : BV:32
6 : ite(3, 2, 5) : BV:32
=dst.llvm-%i.0.Lfor.body%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.Lfor.body%2%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%n.Lfor.body%2%d
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-mem.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 1, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 1, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : heap_alloc(4, 5, 1, 6) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(3, 4, 7) : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.body%2%d
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
2 : increment_count(1) : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : eq(4, 2) : BOOL
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc_ptr(1, 6) : BV:32
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : bvadd(7, 9) : BV:32
11 : bvule(7, 10) : BOOL
12 : or(5, 11) : BOOL
13 : or(3, 12) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : mlheap.dst.llvm.make_list : MEMLABEL
7 : region_agrees_with_memlabel(4, 1, 5, 6) : BOOL
8 : or(3, 7) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:  %call = call i8* @malloc(i32 8), !dbg !30
tfg_edge_comment end

=Edge: Lfor.body%2%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.make_list.0 : MEMLABEL
4 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(8, 5) : BV:32
10 : bvadd(4, 9) : BV:32
11 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : store(1, 2, 3, 10, 11, 12, 13) : ARRAY[BV:32 -> BV:8]
15 : mlvar.dst.llvm.make_list.1 : MEMLABEL
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvadd(8, 16) : BV:32
18 : bvadd(4, 17) : BV:32
19 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
20 : store(14, 2, 15, 18, 19, 12, 13) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : bvadd(4, 1) : BV:32
=dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvadd(4, 5) : BV:32
=dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%next.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%val.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : islangaligned(8, 9) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(1, 5) : BV:32
7 : isgepoffset(6, 4) : BOOL
8 : bvslt(2, 2) : BOOL
9 : 32 { 0x20 +1.0e1025 } : INT
10 : bvsign_ext(2, 9) : BV:64
11 : bvzero_ext(3, 9) : BV:64
12 : bvmul(10, 11) : BV:64
13 : 63 { 0x3f +1.0e1025 } : INT
14 : bvextract(12, 13, 9) : BV:32
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : eq(14, 15) : BOOL
17 : eq(14, 2) : BOOL
18 : ite(8, 16, 17) : BOOL
19 : 8 { 0x8 +1.0e1025 } : INT
20 : isindexforsize(18, 19) : BOOL
21 : and(7, 20) : BOOL
22 : bvadd(5, 2) : BV:32
23 : bvadd(1, 22) : BV:32
24 : isgepoffset(23, 2) : BOOL
25 : and(21, 24) : BOOL
26 : 4 { 0x4 +1.0e1025 } : INT
27 : islangaligned(23, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvadd(5, 29) : BV:32
31 : bvadd(1, 30) : BV:32
32 : isgepoffset(31, 29) : BOOL
33 : and(21, 32) : BOOL
34 : and(28, 33) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:2:((((((  %0 = bitcast i8* %call to %struct.list*, !dbg !30*  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !34)*  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !34)*(  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !34*  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !34))*  store i32 %i.0, i32* %val, align 4, !dbg !35)*((  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !36*  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !36)*(  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !36*  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !36)))*(((((  store %struct.list* %l.0, %struct.list** %next, align 4, !dbg !37*  br label %for.inc, !dbg !38)*  br label %for.inc, !dbg !38)*  br label %for.inc, !dbg !38)*(((((  %inc = add i32 %i.0, 1, !dbg !39*  br label %for.cond, !dbg !40, !llvm.loop !41)*  %l.0 = phi %struct.list* [ null, %entry ], [ %0, %for.inc ], !dbg !21)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !25*  br label %for.cond, !dbg !40, !llvm.loop !41))*  br label %for.cond, !dbg !40, !llvm.loop !41)*(  br label %for.cond, !dbg !40, !llvm.loop !41*  br label %for.cond, !dbg !40, !llvm.loop !41)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.make_list
=Loc 100006 in dst.llvm.make_list.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100025 in dst.llvm.make_list.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100027 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100028 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100029 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100030 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100034 in dst.llvm.make_list.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100035 in dst.llvm.make_list.
REGMEM
dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=Loc 100037 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100038 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100039 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100040 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100041 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100042 in dst.llvm.make_list.
REGMEM
dst.llvm-%call.Lfor.body%1%fcallEnd
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=Loc 100043 in dst.llvm.make_list.
REGMEM
dst.llvm-%call.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=Loc 100044 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.Lfor.body%2%d
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=Loc 100045 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100046 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=Loc 100047 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100048 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.Lfor.body%2%d
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=Loc 100049 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=Loc 100050 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=Loc 100051 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100052 in dst.llvm.make_list.
REGMEM
dst.llvm-%n.Lfor.body%2%d
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=Loc 100053 in dst.llvm.make_list.
REGMEM
dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=Loc 100054 in dst.llvm.make_list.
REGMEM
dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=Loc 100055 in dst.llvm.make_list.
REGMEM
dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=Loc 100056 in dst.llvm.make_list.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100057 in dst.llvm.make_list.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100058 in dst.llvm.make_list.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100059 in dst.llvm.make_list.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100060 in dst.llvm.make_list.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100061 in dst.llvm.make_list.
REGMEM
dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=Loc 100062 in dst.llvm.make_list.
REGMEM
dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100063 in dst.llvm.make_list.
REGMEM
dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100064 in dst.llvm.make_list.
REGMEM
dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100065 in dst.llvm.make_list.
REGMEM
dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100066 in dst.llvm.make_list.
REGMEM
dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100067 in dst.llvm.make_list.
REGMEM
dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100068 in dst.llvm.make_list.
REGMEM
dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100069 in dst.llvm.make_list.
REGMEM
dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100070 in dst.llvm.make_list.
REGMEM
dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100071 in dst.llvm.make_list.
REGMEM
dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100072 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100073 in dst.llvm.make_list.
REGMEM
dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=Loc 100074 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100075 in dst.llvm.make_list.
REGMEM
dst.llvm-%next.Lfor.cond%1%bbentry
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=Loc 100076 in dst.llvm.make_list.
REGMEM
dst.llvm-%val.Lfor.cond%1%bbentry
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=Loc 100077 in dst.llvm.make_list.
REGMEM
dst.local_alloc_count.Lfor.body%2%d
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=Loc 100078 in dst.llvm.make_list.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100079 in dst.llvm.make_list.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Loc 100080 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100081 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100082 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100083 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100084 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100085 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100086 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100087 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100088 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100089 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100090 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100091 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100092 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100093 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100094 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Locs end
=Liveness in dst.llvm.make_list
=live locs at L0%0%d
100006, 100034, 100038, 100039, 100040, 100041, 
=live locs at Lfor.body%1%intermediateVal1
100042, 100045, 100049, 100053, 100078, 100081, 100082, 100083, 100084, 
=live locs at Lfor.body%1%fcallStart
100045, 100049, 100053, 100078, 100086, 100087, 100088, 100089, 
=live locs at Lfor.body%1%fcallEnd
100042, 100045, 100049, 100053, 100078, 100081, 100082, 100083, 100084, 
=live locs at Lfor.body%2%d
100043, 100044, 100048, 100052, 100077, 100091, 100092, 100093, 100094, 
=live locs at Lfor.cond%1%bbentry
100045, 100049[f], 100053, 100078, 100086, 100087, 100088, 100089, 
=live locs at Lfor.cond%2%d
100045, 100049[f], 100053, 100059, 100078, 100086, 100087, 100088, 100089, 
=live locs at Lfor.end%1%d
100049[f], 100086, 
=live locs at E0%0%d
100049[f], 100086, 

=Definedness in dst.llvm.make_list
=loc definedness at L0%0%d
100006, 100035, 100037, 100038, 100039, 100040, 100041
=loc definedness at Lfor.body%1%intermediateVal1
100006, 100035, 100037, 100038, 100039, 100040, 100041, 100042, 100045, 100047, 100049, 100051, 100053, 100054, 100059, 100060, 100078, 100079, 100080, 100081, 100082, 100083, 100084, 100085, 100086, 100087, 100088, 100089
=loc definedness at Lfor.body%1%fcallStart
100006, 100035, 100037, 100038, 100039, 100040, 100041, 100045, 100047, 100049, 100051, 100053, 100059, 100060, 100078, 100079, 100085, 100086, 100087, 100088, 100089
=loc definedness at Lfor.body%1%fcallEnd
100006, 100035, 100037, 100038, 100039, 100040, 100041, 100042, 100045, 100047, 100049, 100051, 100053, 100054, 100059, 100060, 100078, 100079, 100080, 100081, 100082, 100083, 100084, 100085, 100086, 100087, 100088, 100089
=loc definedness at Lfor.body%2%d
100006, 100035, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100053, 100054, 100055, 100059, 100060, 100077, 100078, 100079, 100080, 100081, 100082, 100083, 100084, 100085, 100086, 100087, 100088, 100089, 100090, 100091, 100092, 100093, 100094
=loc definedness at Lfor.cond%1%bbentry
100006, 100035, 100037, 100038, 100039, 100040, 100041, 100045, 100047, 100049, 100051, 100053, 100060, 100078, 100079, 100085, 100086, 100087, 100088, 100089
=loc definedness at Lfor.cond%2%d
100006, 100035, 100037, 100038, 100039, 100040, 100041, 100045, 100047, 100049, 100051, 100053, 100059, 100060, 100078, 100079, 100085, 100086, 100087, 100088, 100089
=loc definedness at Lfor.end%1%d
100006, 100035, 100037, 100038, 100039, 100040, 100041, 100045, 100047, 100049, 100051, 100053, 100059, 100060, 100078, 100079, 100085, 100086, 100087, 100088, 100089
=loc definedness at E0%0%d
100006, 100035, 100037, 100038, 100039, 100040, 100041, 100045, 100047, 100049, 100051, 100053, 100056, 100057, 100058, 100059, 100060, 100078, 100079, 100085, 100086, 100087, 100088, 100089

=Branch affecting variable locs in dst.llvm.make_list
=branch affecting variable locs at L0%0%d
100006
=branch affecting variable locs at Lfor.body%1%intermediateVal1
100045, 100053
=branch affecting variable locs at Lfor.body%1%fcallStart
100045, 100053
=branch affecting variable locs at Lfor.body%1%fcallEnd
100045, 100053
=branch affecting variable locs at Lfor.body%2%d
100044, 100052
=branch affecting variable locs at Lfor.cond%1%bbentry
100045, 100053
=branch affecting variable locs at Lfor.cond%2%d
100045, 100053, 100059
=branch affecting variable locs at Lfor.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.make_list
=relevant memlabels
=function: make_list
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100045 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100047 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100049 {input.dst.llvm-%l.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100051 {input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100053 {input.dst.llvm-%n.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%n : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100060 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100078 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100079 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100085 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100086 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100087 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100088 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100089 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100043 {input.dst.llvm-%call.Lfor.body%2%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100044 {input.dst.llvm-%i.0.Lfor.body%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100046 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d }
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100048 {input.dst.llvm-%l.0.Lfor.body%2%d }
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100050 {input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d }
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100052 {input.dst.llvm-%n.Lfor.body%2%d }
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100055 {input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d }
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100077 {input.dst.local_alloc_count.Lfor.body%2%d }
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
2 : increment_count(1) : COUNT
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100090 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--arg.0) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--arg.0 : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100091 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem-may-straddle-symbol.1-heap) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100092 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memmask(13, 12, 6) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100093 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100094 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100042 {input.dst.llvm-%call.Lfor.body%1%fcallEnd }
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100054 {input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd }
1 : 8 { 0x8 +1.95e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100080 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100081 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100082 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100083 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100084 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100045 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100047 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100049 {input.dst.llvm-%l.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100051 {input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100053 {input.dst.llvm-%n.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100060 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100061 {input.dst.llvm-%0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100062 {input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100063 {input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100064 {input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100065 {input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100066 {input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100067 {input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100068 {input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100069 {input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100070 {input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100071 {input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100072 {input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100073 {input.dst.llvm-%inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100074 {input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100075 {input.dst.llvm-%next.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100076 {input.dst.llvm-%val.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100078 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100085 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100086 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100087 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
5 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
12 : store(8, 2, 3, 10, 11, 6, 7) : ARRAY[BV:32 -> BV:8]
13 : memmask(12, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100088 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100089 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100059 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%fcallStart
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100056 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100057 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100058 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%intermediateVal1:
vacuous mls at Lfor.body%1%fcallStart:
vacuous mls at Lfor.body%1%fcallEnd:
vacuous mls at Lfor.body%2%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%intermediateVal1:
non-vacuous mls at Lfor.body%1%fcallStart:
non-vacuous mls at Lfor.body%1%fcallEnd:
non-vacuous mls at Lfor.body%2%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.make_list
=avail_exprs begin
=loc 100006
=loc_expr
140425 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100025
=loc_expr
140519 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100027
=loc_expr
140520 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100028
=loc_expr
140522 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100029
=loc_expr
140524 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100030
=loc_expr
140526 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140432 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100035
=loc_expr
140428 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100043
=loc_expr
140662 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=avail_exprs_val.end
=loc 100052
=loc_expr
140669 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140641 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
=avail_exprs_val.end
=loc 100055
=loc_expr
140691 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=avail_exprs_val.end
=loc 100056
=loc_expr
140692 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100057
=loc_expr
140693 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100058
=loc_expr
140694 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100061
=loc_expr
140695 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100062
=loc_expr
140696 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100063
=loc_expr
140697 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100064
=loc_expr
140698 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100065
=loc_expr
140699 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100066
=loc_expr
140700 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100067
=loc_expr
140701 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100068
=loc_expr
140702 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100069
=loc_expr
140703 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100070
=loc_expr
140704 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100071
=loc_expr
140705 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100072
=loc_expr
140706 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100073
=loc_expr
140707 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100074
=loc_expr
140708 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100075
=loc_expr
140709 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100076
=loc_expr
140710 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100079
=loc_expr
140711 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.make_list
=loc 100054 expr
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=loc 100054 spreled-expr
140440 : 8 { 0x8 +1.95e129 } : BV:32
=loc 100058 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100058 spreled-expr
140267 : retaddr_const : BV:32
=loc 100062 expr
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100062 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100063 expr
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100063 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100065 expr
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=loc 100065 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100066 expr
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=loc 100066 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100067 expr
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100067 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100068 expr
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100068 spreled-expr
140412 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100070 expr
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=loc 100070 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100071 expr
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=loc 100071 spreled-expr
140412 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100079 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100079 spreled-expr
140433 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;make_list}
=loc_id 100006 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100025 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100027 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100028 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100029 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100030 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100034 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100035 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100037 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100038 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100039 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100040 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100041 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100042 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; )
=loc_id 100043 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100044 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100045 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100046 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100047 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100049 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100050 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100052 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100054 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100055 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100056 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100058 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100059 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100062 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100063 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100064 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100065 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100067 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100068 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100070 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100072 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100073 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100074 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100075 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100076 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100077 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100079 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100080 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100081 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100082 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100083 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100084 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100085 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100086 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100087 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100088 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100089 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100090 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100091 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100092 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(local./*___y___make_list__x__=L0%0%argnum0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100093 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100094 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(local./*___y___make_list__x__=L0%0%argnum0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100054 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100058 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100063 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100065 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100067 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100068 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100070 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100079 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%2%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%fcallStart
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=dst.llvm-%call.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=dst.llvm-%i.0.Lfor.body%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.Lfor.body%2%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%n.Lfor.body%2%d
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=dst.llvm-mem.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : heap_alloc(4, 5, 2, 6) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(3, 4, 7) : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.body%2%d
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
2 : increment_count(1) : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=dst.llvm-%call.Lfor.body%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-mem.Lfor.body%1%fcallEnd
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%2%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
5 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
12 : store(8, 2, 3, 10, 11, 6, 7) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%next.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%val.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%fcallStart
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume# 0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
7 : region_agrees_with_memlabel(4, 2, 5, 6) : BOOL
8 : or(3, 7) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume# 1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
6 : heap_alloc_ptr(2, 5) : BV:32
7 : 7 { 0x7 +1.83e129 } : BV:32
8 : bvadd(7, 6) : BV:32
9 : bvule(6, 8) : BOOL
10 : or(4, 9) : BOOL
11 : or(3, 10) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume# 0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry assume# 0
1 : 1 { 0x1 } : BOOL
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : isgepoffset(2, 3) : BOOL
5 : and(1, 4) : BOOL
6 : and(4, 5) : BOOL
7 : 4 { 0x4 +1.0e1025 } : INT
8 : islangaligned(2, 7) : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 2) : BV:32
11 : isgepoffset(10, 9) : BOOL
12 : and(5, 6, 8, 11) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry assume# 1
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
4 : 4 { 0x4 +1.0e1025 } : INT
5 : islangaligned(3, 4) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%fcallStart
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%fcallStart done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
4
=String-contents:
=Nextpc-map:
C_NEXTPC1 : malloc
=Nextpc-map done
=suffixpaths for dst.llvm.make_list
=suffixpath_at_L0%0%d for dst.llvm.make_list
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%intermediateVal1 for dst.llvm.make_list
=suffixpath_at_Lfor.body%1%intermediateVal1.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%fcallStart)*((Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd)*(Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1)))))
=suffixpath_at_Lfor.body%1%fcallStart for dst.llvm.make_list
=suffixpath_at_Lfor.body%1%fcallStart.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%fcallStart)))
=suffixpath_at_Lfor.body%1%fcallEnd for dst.llvm.make_list
=suffixpath_at_Lfor.body%1%fcallEnd.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%fcallStart)*(Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd))))
=suffixpath_at_Lfor.body%2%d for dst.llvm.make_list
=suffixpath_at_Lfor.body%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%fcallStart)*((Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd)*((Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1)*(Lfor.body%1%intermediateVal1=>Lfor.body%2%d))))))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.make_list
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.make_list
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.end%1%d for dst.llvm.make_list
=suffixpath_at_Lfor.end%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.make_list
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end%1%d)*(Lfor.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.make_list done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0.ec
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140623 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140761 : eq(140276, 140623) : BOOL
140628 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140440 : 8 { 0x8 +1.95e129 } : BV:32
140429 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141019 : region_agrees_with_memlabel(140628, 140623, 140440, 140429) : BOOL
141025 : or(140761, 141019) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1.ec
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1.pred
=Comment
undef-behavioursome.edge.Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140623 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140761 : eq(140276, 140623) : BOOL
140382 : 0 { 0x0 } : BOOL
140453 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140625 : heap_alloc_ptr(140623, 140453) : BV:32
140579 : 7 { 0x7 +1.83e129 } : BV:32
140800 : bvadd(140579, 140625) : BV:32
140803 : bvule(140625, 140800) : BOOL
140806 : or(140382, 140803) : BOOL
140810 : or(140761, 140806) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d done
tfg.assumes_around_edge at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
tfg.assumes_around_edge at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd done
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0.ec
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=LhsExpr
140623 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140291 : 1 { 0x1 +1.0e1025 } : INT
140655 : islangaligned(140623, 140291) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 done
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body%2%d=>Lfor.cond%1%bbentry
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140662 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140914 : isgepoffset(140662, 140276) : BOOL
140925 : and(140275, 140914) : BOOL
140928 : and(140914, 140925) : BOOL
140381 : 4 { 0x4 +1.0e1025 } : INT
140930 : islangaligned(140662, 140381) : BOOL
140412 : 4 { 0x4 +1.47e129 } : BV:32
140902 : bvadd(140412, 140662) : BV:32
140934 : isgepoffset(140902, 140412) : BOOL
140941 : and(140925, 140928, 140930, 140934) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%2%d=>Lfor.cond%1%bbentry
=LhsExpr
140412 : 4 { 0x4 +1.47e129 } : BV:32
140662 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
140902 : bvadd(140412, 140662) : BV:32
140381 : 4 { 0x4 +1.0e1025 } : INT
140912 : islangaligned(140902, 140381) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%fcallStart
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%fcallStart done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d done
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 8
=pc
Lfor.body%1%d
=linename
line 9
=pc
Lfor.body%2%d
=linename
line 9
=pc
Lfor.body%3%d
=linename
line 10
=pc
Lfor.body%4%d
=linename
line 10
=pc
Lfor.body%5%d
=linename
line 11
=pc
Lfor.body%6%d
=linename
line 11
=pc
Lfor.body%7%d
=linename
line 13
=pc
Lfor.cond%1%d
=linename
line 8
=pc
Lfor.cond%2%d
=linename
line 8
=pc
Lfor.end%1%d
=linename
line 14
=pc
Lfor.inc%1%d
=linename
line 8
=pc
Lfor.inc%2%d
=linename
line 8
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 18
=pc
Lfor.body%2%d
=column_name
 at column 18
=pc
Lfor.body%3%d
=column_name
 at column 11
=pc
Lfor.body%4%d
=column_name
 at column 15
=pc
Lfor.body%5%d
=column_name
 at column 11
=pc
Lfor.body%6%d
=column_name
 at column 16
=pc
Lfor.body%7%d
=column_name
 at column 3
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 31
=pc
Lfor.inc%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 8 at column 8)
=pc
Lfor.body%1%d
=line_and_column
line 9
=pc
Lfor.body%2%d
=line_and_column
line 9
=pc
Lfor.body%3%d
=line_and_column
(line 10 at column 11)
=pc
Lfor.body%4%d
=line_and_column
(line 10 at column 15)
=pc
Lfor.body%5%d
=line_and_column
(line 11 at column 11)
=pc
Lfor.body%6%d
=line_and_column
(line 11 at column 16)
=pc
Lfor.body%7%d
=line_and_column
line 13
=pc
Lfor.cond%1%d
=line_and_column
(line 8 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 8 at column 3)
=pc
Lfor.end%1%d
=line_and_column
line 14
=pc
Lfor.inc%1%d
=line_and_column
(line 8 at column 31)
=pc
Lfor.inc%2%d
=line_and_column
(line 8 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%n : L0%0%d : n'
input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
input.dst.llvm-%l.0 : Lfor.cond%1%bbentry : l'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset : L0%0%d : 0
input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset : L0%0%d : input.dst.llvm-%0
input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset : L0%0%d : 4
input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset : L0%0%d : (input.dst.llvm-%0 + 4)
input.dst.llvm-%inc : Lfor.inc%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%0 : Lfor.body%3%bbentry : node'
input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset : L0%0%d : 0
input.dst.llvm-%val : L0%0%d : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset
input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset : L0%0%d : 4
input.dst.llvm-%next : L0%0%d : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset
input.dst.llvm-%l.0.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%0
input.dst.llvm-%i.0.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%inc
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%l.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : L0%0%d : 4
input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : L0%0%d : 8
input.dst.llvm-%n.Lfor.body%2%d : L0%0%d : malloc_side_effect(input.dst.llvm-%n.Lfor.cond%1%bbentry, ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, heap_alloc(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, input.dst.llvm-%call.Lfor.body%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/)
input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : L0%0%d : (1 + input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%call.Lfor.body%2%d : L0%0%d : ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, 0, heap_alloc_ptr(input.dst.llvm-%call.Lfor.body%1%fcallEnd, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/))
input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%l.0.Lfor.cond%1%bbentry
input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : L0%0%d : malloc_side_effect(8, ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, heap_alloc(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, input.dst.llvm-%call.Lfor.body%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/)
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry : L0%0%d : 4
input.dst.llvm-%0.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry : L0%0%d : (4 + input.dst.llvm-%call.Lfor.body%2%d)
input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.llvm-%inc.Lfor.cond%1%bbentry : L0%0%d : (1 + input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%next.Lfor.cond%1%bbentry : L0%0%d : (4 + input.dst.llvm-%call.Lfor.body%2%d)
input.dst.llvm-%val.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%l.0
=dst.llvm-%l.0 loop pc: Lfor.cond%1%d
=dst.llvm-%l.0 val_scevb
=dst.llvm-%l.0 val_scevb scev
=dst.llvm-%l.0 val_scevb scev loop: L0%0%d
=dst.llvm-%l.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%l.0 val_scevb scev scev_expr
5 : input.dst.llvm-%l.0 : BV32
=dst.llvm-%l.0 val_scevb scev scev_expr done
=dst.llvm-%l.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%l.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%l.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%l.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb
=dst.llvm-%l.0 atuse_scevb scev
=dst.llvm-%l.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%l.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%l.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%l.0 : BV32
=dst.llvm-%l.0 atuse_scevb scev scev_expr done
=dst.llvm-%l.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%l.0 atexit_scev
=dst.llvm-%l.0 atexit_scev loop: L0%0%d
=dst.llvm-%l.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%l.0 atexit_scev scev_expr
5 : input.dst.llvm-%l.0 : BV32
=dst.llvm-%l.0 atexit_scev scev_expr done
=dst.llvm-%call
=dst.llvm-%call loop pc: Lfor.cond%1%d
=dst.llvm-%call val_scevb
=dst.llvm-%call val_scevb scev
=dst.llvm-%call val_scevb scev loop: L0%0%d
=dst.llvm-%call val_scevb scev scev_overflow_flag: 
=dst.llvm-%call val_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%call val_scevb scev scev_expr done
=dst.llvm-%call val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call val_scevb signed lower bound: 32:4294967295
=dst.llvm-%call val_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb
=dst.llvm-%call atuse_scevb scev
=dst.llvm-%call atuse_scevb scev loop: L0%0%d
=dst.llvm-%call atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%call atuse_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%call atuse_scevb scev scev_expr done
=dst.llvm-%call atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atexit_scev
=dst.llvm-%call atexit_scev loop: L0%0%d
=dst.llvm-%call atexit_scev scev_overflow_flag: 
=dst.llvm-%call atexit_scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%call atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%val
=dst.llvm-%val loop pc: Lfor.cond%1%d
=dst.llvm-%val val_scevb
=dst.llvm-%val val_scevb scev
=dst.llvm-%val val_scevb scev loop: L0%0%d
=dst.llvm-%val val_scevb scev scev_overflow_flag: 
=dst.llvm-%val val_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%val val_scevb scev scev_expr done
=dst.llvm-%val val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val val_scevb signed lower bound: 32:4294967295
=dst.llvm-%val val_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb
=dst.llvm-%val atuse_scevb scev
=dst.llvm-%val atuse_scevb scev loop: L0%0%d
=dst.llvm-%val atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%val atuse_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%val atuse_scevb scev scev_expr done
=dst.llvm-%val atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atexit_scev
=dst.llvm-%val atexit_scev loop: L0%0%d
=dst.llvm-%val atexit_scev scev_overflow_flag: 
=dst.llvm-%val atexit_scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%val atexit_scev scev_expr done
=dst.llvm-%next
=dst.llvm-%next loop pc: Lfor.cond%1%d
=dst.llvm-%next val_scevb
=dst.llvm-%next val_scevb scev
=dst.llvm-%next val_scevb scev loop: L0%0%d
=dst.llvm-%next val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next val_scevb scev scev_expr
7 : 00000000000000000000000000000100b
6 : input.dst.llvm-%call : BV32
8 : scev_op_add(7, 6) : loop L0%0%d : nsw
=dst.llvm-%next val_scevb scev scev_expr done
=dst.llvm-%next val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next val_scevb signed lower bound: 32:2147483652
=dst.llvm-%next val_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb
=dst.llvm-%next atuse_scevb scev
=dst.llvm-%next atuse_scevb scev loop: L0%0%d
=dst.llvm-%next atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next atuse_scevb scev scev_expr
7 : 00000000000000000000000000000100b
6 : input.dst.llvm-%call : BV32
8 : scev_op_add(7, 6) : loop L0%0%d : nsw
=dst.llvm-%next atuse_scevb scev scev_expr done
=dst.llvm-%next atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atexit_scev
=dst.llvm-%next atexit_scev loop: L0%0%d
=dst.llvm-%next atexit_scev scev_overflow_flag: nsw
=dst.llvm-%next atexit_scev scev_expr
7 : 00000000000000000000000000000100b
6 : input.dst.llvm-%call : BV32
8 : scev_op_add(7, 6) : loop L0%0%d : nsw
=dst.llvm-%next atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
9 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
9 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
10 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal1
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%fcallStart
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%fcallEnd
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 22 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 23 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 24 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%n
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%n.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.local_alloc_count.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%call.Lfor.body%1%fcallEnd
lr_status_bottom(; )
=LR status for var input.dst.llvm-%n.Lfor.body%2%d
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.Lfor.body%2%d
lr_status_linearly_related(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%call.Lfor.body%2%d
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%0.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%next.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%val.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename ind8.proof
=function_name make_list
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: make_list
=EntryPreconds
=pred 0
=Comment
equal-n
=LhsExpr
1 : $spec-arg-0 : BV:32
2 : $llvm-arg-0 : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : $spec-ret : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : $llvm-ret : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : $llvm-md : ARRAY[BV:32 -> BV:8]
6 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(14, 15) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%6%bbentry_Lfor.body%1%fcallStart L3%6%bbentry_Lfor.body%1%fcallEnd L3%6%bbentry_Lfor.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.body%1%fcallStart
L3%6%bbentry_Lfor.body%1%fcallStart => L3%6%bbentry_Lfor.body%1%fcallEnd
L3%6%bbentry_Lfor.body%1%fcallEnd => L3%6%bbentry_Lfor.cond%1%bbentry
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: make_list
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : make_list : 23 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%6%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%8%bbentry#{0,0})*(L3%8%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end%1%d#{0,0})*(Lfor.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.body%1%fcallStart
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 0 delta {0,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(epsilon)
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.body%1%fcallStart at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*(Lfor.cond%2%d#{0,0}=>Lfor.body%1%fcallStart#{0,0}))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.body%1%fcallStart => L3%6%bbentry_Lfor.body%1%fcallEnd
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 0 delta {0,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(epsilon)
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.body%1%fcallStart to Lfor.body%1%fcallEnd at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(Lfor.body%1%fcallStart#{0,0}=>Lfor.body%1%fcallEnd#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.body%1%fcallEnd => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%9%bbentry#{0,0})*(L3%9%bbentry#{0,0}=>L3%6%bbentry#{1,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.body%1%fcallEnd to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.body%1%fcallEnd#{0,0}=>Lfor.body%1%intermediateVal1#{0,0})*((Lfor.body%1%intermediateVal1#{0,0}=>Lfor.body%2%d#{0,0})*(Lfor.body%2%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
equal-n
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : input.dst.llvm-%n : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in make_list.A2.B1.C1.D1.E2
=Locs end
=Liveness in make_list.A2.B1.C1.D1.E2
=live locs at L0%0%d_L0%0%d

=live locs at L3%6%bbentry_Lfor.body%1%fcallStart

=live locs at L3%6%bbentry_Lfor.body%1%fcallEnd

=live locs at L3%6%bbentry_Lfor.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in make_list.A2.B1.C1.D1.E2

=Branch affecting variable locs in make_list.A2.B1.C1.D1.E2

=Relevant Memlabels in make_list.A2.B1.C1.D1.E2
=relevant memlabels
=function: make_list
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in make_list.A2.B1.C1.D1.E2
=avail_exprs begin
=avail_exprs end
=sprel_map in make_list.A2.B1.C1.D1.E2
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3v487.ce5.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3v487.ce5 12b48bb7e840b2b1f53382a109e5dec
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1073835107 { 0x40016c63 +1.1112020e1 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1073835107 { 0x40016c63 +1.1112020e1 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
744711994
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3.ce6.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3.ce6 9c7c9afbac7f974167e226fd761595d
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform17 : BV:32
3 : Lambda46 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda47 : BV:32
6 : unit : UNIT
7 : 1808360963 { 0x6bc96603 +1.57342565e88 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4055809063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4055809064; 4055809067 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4055809068; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4055809064 { 0xf1bebc28 -239158232 -1.49011707e100 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4055809064 { 0xf1bebc28 -239158232 -1.49011707e100 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4055809067 { 0xf1bebc2b -239158229 -1.49011743e100 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1714399066
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3.ce29.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce29 b9686f66656836db2a568ecd96885c
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294950891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294950892; 4294950895 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4294950896; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4294950892 { 0xffffbfec -16404 -1.99804449e128 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 590434884 { 0x23315244 +1.38532304e199 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 590434884 { 0x23315244 +1.38532304e199 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 4294950891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294950892; 4294950895 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4294950896; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4294950892 { 0xffffbfec -16404 -1.99804449e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4294950895 { 0xffffbfef -16401 -1.99804484e128 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3930370650
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3v487.ce53.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3v487.ce53 a1dc5fb214799b3a725d34892b3d6564
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 20; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 825789780 { 0x31388d54 +1.44181299e227 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 825789780 { 0x31388d54 +1.44181299e227 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 20; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2035583219
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3.ce77.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce77 a2bbbdf6ed8245404627221374c8cdf1
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3342330970 ] -> 0, [ 3342330971; 3342330971 ] -> 128, [ 3342330972; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3342330970 ] -> 0, [ 3342330971; 3342330971 ] -> 128, [ 3342330972; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3342330967 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3342330968; 3342330971 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3342330972; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3342330968 { 0xc737ec58 -952636328 -1.43690013e15 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 2123751512 { 0x7e95e058 +1.17090892e126 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2123751512 { 0x7e95e058 +1.17090892e126 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3342330967 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3342330968; 3342330971 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3342330972; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3342330968 { 0xc737ec58 -952636328 -1.43690013e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3342330971 { 0xc737ec5b -952636325 -1.43690049e15 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2891450171
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3v487.ce614.num_edges_traversed0
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(epsilon)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce614 e35fda7734b3d76b7fd26c2c57d552d
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform357 : BV:32
4 : Lambda1102 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1103 : BV:32
7 : 516561257 { 0x1eca1969 +1.57890045e190 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform356 : BV:32
3 : Lambda1100 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda1101 : BV:32
6 : unit : UNIT
7 : 1580702345 { 0x5e379a89 +1.43440353e61 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1519791860
=counter_example_end
=global nodece 5 num_edges_traversed 0
=global nodece 5 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce615.num_edges_traversed0
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(epsilon)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce615 c8f11a80edffc021f5db1658af39a980
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform361 : BV:32
4 : Lambda1110 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1111 : BV:32
7 : 539096902 { 0x2021f746 +1.26535868e193 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 823310224 { 0x3112b790 +1.14622688e227 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform360 : BV:32
3 : Lambda1108 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda1109 : BV:32
6 : unit : UNIT
7 : 1984025554 { 0x7641d3d2 +1.51427674e109 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 823310223 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 823310224; 823310227 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 823310228; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 823310224 { 0x3112b790 +1.14622688e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 823310227 { 0x3112b793 +1.14622724e227 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4203807032
=counter_example_end
=global nodece 6 num_edges_traversed 0
=global nodece 6 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3v487.ce691.num_edges_traversed0
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(epsilon)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3v487.ce691 c90be284ac84b89180ce9a678e4a45
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform389 : BV:32
4 : Lambda1190 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1191 : BV:32
7 : 2035928335 { 0x7959cd0f +1.70157039e115 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform388 : BV:32
3 : Lambda1188 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda1189 : BV:32
6 : unit : UNIT
7 : 874775862 { 0x34240536 +1.28140902e233 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
840865314
=counter_example_end
=global nodece 7 num_edges_traversed 0
=global nodece 7 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3.ce692.num_edges_traversed0
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(epsilon)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3.ce692 24338d6f1cd9766e24251618bac9e
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform393 : BV:32
4 : Lambda1198 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1199 : BV:32
7 : 1578236347 { 0x5e11f9bb +1.14043366e61 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1763864652 { 0x6922704c +1.26905202e83 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform392 : BV:32
3 : Lambda1196 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda1197 : BV:32
6 : unit : UNIT
7 : 437910661 { 0x1a19fc85 +1.20301878e181 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1763864651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1763864652; 1763864655 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1763864656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1763864652 { 0x6922704c +1.26905202e83 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1763864655 { 0x6922704f +1.26905238e83 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
556141844
=counter_example_end
=global nodece 8 num_edges_traversed 0
=global nodece 8 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3.ce738.num_edges_traversed2
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(epsilon)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce738 273a3492aa83649612e189664c49e39a
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294950891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294950892; 4294950895 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4294950896; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4294950892 { 0xffffbfec -16404 -1.99804449e128 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 590434884 { 0x23315244 +1.38532304e199 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 4294950891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294950892; 4294950895 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4294950896; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4294950892 { 0xffffbfec -16404 -1.99804449e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4294950895 { 0xffffbfef -16401 -1.99804484e128 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3930370650
=counter_example_end
=global nodece 9 num_edges_traversed 2
=global nodece 9 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 10
=global nodece 10 nodece z3v487.ce734.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(epsilon)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3v487.ce734 74ec5e4e9efbb60be52afc7fa5b6e8
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 20; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 825789780 { 0x31388d54 +1.44181299e227 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 20; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2035583219
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 11
=global nodece 11 nodece z3.ce730.num_edges_traversed2
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(epsilon)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce730 81c15b628be6b4fdb77364699f630
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3342330970 ] -> 0, [ 3342330971; 3342330971 ] -> 128, [ 3342330972; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3342330970 ] -> 0, [ 3342330971; 3342330971 ] -> 128, [ 3342330972; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3342330967 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3342330968; 3342330971 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3342330972; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3342330968 { 0xc737ec58 -952636328 -1.43690013e15 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2123751512 { 0x7e95e058 +1.17090892e126 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3342330967 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3342330968; 3342330971 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3342330972; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3342330968 { 0xc737ec58 -952636328 -1.43690013e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3342330971 { 0xc737ec5b -952636325 -1.43690049e15 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2891450171
=counter_example_end
=global nodece 11 num_edges_traversed 2
=global nodece 11 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 12
=global nodece 12 nodece z3v487.ce722.num_edges_traversed1
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3v487.ce722 c155d6a3d83b783d889bc992730a4c6
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform389 : BV:32
4 : Lambda1190 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1191 : BV:32
7 : 2035928335 { 0x7959cd0f +1.70157039e115 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform388 : BV:32
3 : Lambda1188 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda1189 : BV:32
6 : unit : UNIT
7 : 874775862 { 0x34240536 +1.28140902e233 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
840865314
=counter_example_end
=global nodece 12 num_edges_traversed 1
=global nodece 12 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 13
=global nodece 13 nodece z3.ce761.num_edges_traversed1
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3.ce761 b327af68b5bac3b63d25736bb5d734
=input.spec-%var-n-1
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform421 : BV:32
4 : Lambda1278 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1279 : BV:32
7 : 852662000 { 0x32d296f0 +1.64523124e230 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1252765024 { 0x4aabad60 +1.34122848e22 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform420 : BV:32
3 : Lambda1276 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda1277 : BV:32
6 : unit : UNIT
7 : 1606965109 { 0x5fc85775 +1.56516897e64 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1252765023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1252765024; 1252765027 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1252765028; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2985033728 { 0xb1ec0000 -1309933568 -1.84375000e228 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1252765024 { 0x4aabad60 +1.34122848e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1252765027 { 0x4aabad63 +1.34122884e22 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2149675305
=counter_example_end
=global nodece 13 num_edges_traversed 1
=global nodece 13 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 14
=global nodece 14 nodece z3.ce789.num_edges_traversed1
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3.ce789 9d2a995024b4fe5b3d3ea24d74e256
=input.spec-%var-n-1
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform453 : BV:32
4 : Lambda1366 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1367 : BV:32
7 : 1674270165 { 0x63cb55d5 +1.58855688e72 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 724967088 { 0x2b361eb0 +1.42281150e215 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform452 : BV:32
3 : Lambda1364 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda1365 : BV:32
6 : unit : UNIT
7 : 1257422214 { 0x4af2bd86 +1.89640879e22 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 724967087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 724967088; 724967091 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 724967092; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2147483641 { 0x7ffffff9 +1.99999916e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 724967088 { 0x2b361eb0 +1.42281150e215 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 724967091 { 0x2b361eb3 +1.42281186e215 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3530106579
=counter_example_end
=global nodece 14 num_edges_traversed 1
=global nodece 14 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 15
=global nodece 15 nodece z3v487.ce790.num_edges_traversed1
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3v487.ce790 cd0f344b016ffefe0c39fd34a30afb8
=input.spec-%var-n-1
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform457 : BV:32
4 : Lambda1374 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1375 : BV:32
7 : 794333549 { 0x2f58916d +1.69193804e223 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform456 : BV:32
3 : Lambda1372 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda1373 : BV:32
6 : unit : UNIT
7 : 1286801573 { 0x4cb308a5 +1.39870131e26 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 268435455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 268435456; 268435459 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 268435460; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 276824060 { 0x107ffffc +1.99999952e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 268435459 { 0x10000003 +1.35e161 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4023901821
=counter_example_end
=global nodece 15 num_edges_traversed 1
=global nodece 15 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 16
=global nodece 16 nodece z3v487.ce817.num_edges_traversed1
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3v487.ce817 5689bb1526cc9a147bec1ae133226bc
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform485 : BV:32
4 : Lambda1454 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1455 : BV:32
7 : 1871351622 { 0x6f8a8f46 +1.8249735e96 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8460 { 0x210c +1.100851e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform484 : BV:32
3 : Lambda1452 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda1453 : BV:32
6 : unit : UNIT
7 : 459755575 { 0x1b675037 +1.80713546e183 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 8459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8460; 8463 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8464; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 537395200 { 0x20080000 +1.6250000e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8460 { 0x210c +1.100851e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 8463 { 0x210f +1.100886e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4231832345
=counter_example_end
=global nodece 16 num_edges_traversed 1
=global nodece 16 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 17
=global nodece 17 nodece z3.ce999.num_edges_traversed0
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(epsilon)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce999 d1de3921d7cb7dd12f41d641c429e288
=input.spec-%var-n-1
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1193 : BV:32
4 : Lambda3296 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda3297 : BV:32
7 : 1210538034 { 0x48275832 +1.30737900e17 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3553353584 { 0xd3cbdf70 -741613712 -1.59275627e40 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform1192 : BV:32
3 : Lambda3294 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda3295 : BV:32
6 : unit : UNIT
7 : 1635961456 { 0x6182ca70 +1.2180290e68 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3553353583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3553353584; 3553353587 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3553353588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3553353584 { 0xd3cbdf70 -741613712 -1.59275627e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3553353587 { 0xd3cbdf73 -741613709 -1.59275662e40 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2701866110
=counter_example_end
=global nodece 17 num_edges_traversed 0
=global nodece 17 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 18
=global nodece 18 nodece z3v487.ce1000.num_edges_traversed0
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3v487.ce1000 fe47e89cd399d7af357f6551b9cf94ae
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1197 : BV:32
4 : Lambda3304 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda3305 : BV:32
7 : 668884021 { 0x27de5c35 +1.73718893e208 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform1196 : BV:32
3 : Lambda3302 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda3303 : BV:32
6 : unit : UNIT
7 : 1286722033 { 0x4cb1d1f1 +1.38921940e26 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1037430913
=counter_example_end
=global nodece 18 num_edges_traversed 0
=global nodece 18 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 19
=global nodece 19 nodece z3.ce1030.num_edges_traversed3
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3.ce1030 cdd1b38d1f3a54cd6a1f4126f4d08e
=nextpc_const.1
1 : 322510466 { 0x13391e82 +1.44624352e167 } : BV:32
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294950891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294950892; 4294950895 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4294950896; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4294950892 { 0xffffbfec -16404 -1.99804449e128 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 97 , m_adder -> 27), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 322510466 , 1000 , 8 ) -> 1010658370, () -> 181584288, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 590434884 { 0x23315244 +1.38532304e199 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 4294950891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294950892; 4294950895 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4294950896; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1010658370 { 0x3c3d6c42 +1.47986626e249 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4294950892 { 0xffffbfec -16404 -1.99804449e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4294950895 { 0xffffbfef -16401 -1.99804484e128 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 97 , m_adder -> 27), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2220988942
=counter_example_end
=global nodece 19 num_edges_traversed 3
=global nodece 19 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 20
=global nodece 20 nodece z3v487.ce1027.num_edges_traversed3
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3v487.ce1027 41753fa85a771324228427ee73521d
=nextpc_const.1
1 : 447136514 { 0x1aa6c302 +1.30282616e182 } : BV:32
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 20; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 185 , m_adder -> 190), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 447136514 , 1000 , 8 ) -> 67269607, () -> 1463142012, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 825789780 { 0x31388d54 +1.44181299e227 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 20; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 67269607 { 0x40273e7 +1.1916205e137 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 185 , m_adder -> 190), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4208572951
=counter_example_end
=global nodece 20 num_edges_traversed 3
=global nodece 20 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 21
=global nodece 21 nodece z3.ce1024.num_edges_traversed3
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3.ce1024 5f9266ad37ed8d9c8a03e51c3a3e2a4
=nextpc_const.1
1 : 1695980127 { 0x65169a5f +1.17658603e75 } : BV:32
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3342330970 ] -> 0, [ 3342330971; 3342330971 ] -> 128, [ 3342330972; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3342330970 ] -> 0, [ 3342330971; 3342330971 ] -> 128, [ 3342330972; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3342330967 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3342330968; 3342330971 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3342330972; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3342330968 { 0xc737ec58 -952636328 -1.43690013e15 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 141 , m_adder -> 119), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1695980127 , 1000 , 8 ) -> 1305799351, () -> 200581810, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2123751512 { 0x7e95e058 +1.17090892e126 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3342330967 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3342330968; 3342330971 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3342330972; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 3342330970 ] -> 0, [ 3342330971; 3342330971 ] -> 128, [ 3342330972; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1305799351 { 0x4dd4eab7 +1.66341292e28 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3342330968 { 0xc737ec58 -952636328 -1.43690013e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3342330971 { 0xc737ec5b -952636325 -1.43690049e15 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 141 , m_adder -> 119), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2108386271
=counter_example_end
=global nodece 21 num_edges_traversed 3
=global nodece 21 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 22
=global nodece 22 nodece z3v487.ce1021.num_edges_traversed2
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(epsilon)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3v487.ce1021 feafdd686f9e1266f42cfe7b24a1ce19
=nextpc_const.1
1 : 728615149 { 0x2b6dc8ed +1.85769426e215 } : BV:32
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 143 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform389 : BV:32
4 : Lambda1190 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1191 : BV:32
7 : 2035928335 { 0x7959cd0f +1.70157039e115 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 143 , m_adder -> 127), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 728615149 , 1000 , 8 ) -> 1505007089, () -> 2069300610, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform388 : BV:32
3 : Lambda1188 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda1189 : BV:32
6 : unit : UNIT
7 : 874775862 { 0x34240536 +1.28140902e233 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 143 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1505007089 { 0x59b495f1 +1.41082584e52 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 143 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1480031802
=counter_example_end
=global nodece 22 num_edges_traversed 2
=global nodece 22 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 23
=global nodece 23 nodece z3.ce1018.num_edges_traversed2
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(epsilon)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3.ce1018 b2c891d2598a58c52055b9354ac41c
=nextpc_const.1
1 : 305816792 { 0x123a64d8 +1.45620250e165 } : BV:32
=input.spec-%var-n-1
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 239 , m_adder -> 200), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform421 : BV:32
4 : Lambda1278 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1279 : BV:32
7 : 852662000 { 0x32d296f0 +1.64523124e230 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1252765024 { 0x4aabad60 +1.34122848e22 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 239 , m_adder -> 200), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 305816792 , 1000 , 8 ) -> 1573672518, () -> 1713904690, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform420 : BV:32
3 : Lambda1276 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda1277 : BV:32
6 : unit : UNIT
7 : 1606965109 { 0x5fc85775 +1.56516897e64 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1252765023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1252765024; 1252765027 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1252765028; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 239 , m_adder -> 200), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1573672518 { 0x5dcc5646 +1.59638285e60 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1252765024 { 0x4aabad60 +1.34122848e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1252765027 { 0x4aabad63 +1.34122884e22 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 239 , m_adder -> 200), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2453574177
=counter_example_end
=global nodece 23 num_edges_traversed 2
=global nodece 23 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 24
=global nodece 24 nodece z3.ce1015.num_edges_traversed2
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(epsilon)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3.ce1015 a864a65a1442a1fdec28b915f5d9033
=nextpc_const.1
1 : 357036040 { 0x1547f008 +1.56201267e171 } : BV:32
=input.spec-%var-n-1
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 106 , m_adder -> 230), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform453 : BV:32
4 : Lambda1366 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1367 : BV:32
7 : 1674270165 { 0x63cb55d5 +1.58855688e72 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 724967088 { 0x2b361eb0 +1.42281150e215 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 106 , m_adder -> 230), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 357036040 , 1000 , 8 ) -> 53580671, () -> 1091184945, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform452 : BV:32
3 : Lambda1364 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda1365 : BV:32
6 : unit : UNIT
7 : 1257422214 { 0x4af2bd86 +1.89640879e22 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 724967087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 724967088; 724967091 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 724967092; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 106 , m_adder -> 230), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 53580671 { 0x331937f +1.38731372e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 724967088 { 0x2b361eb0 +1.42281150e215 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 724967091 { 0x2b361eb3 +1.42281186e215 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 106 , m_adder -> 230), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3596487947
=counter_example_end
=global nodece 24 num_edges_traversed 2
=global nodece 24 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 25
=global nodece 25 nodece z3v487.ce1012.num_edges_traversed2
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3v487.ce1012 751f6f9c54e5d87b58a9b6d6ad64867
=nextpc_const.1
1 : 1368427877 { 0x51908d65 +1.12931501e36 } : BV:32
=input.spec-%var-n-1
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 38 , m_adder -> 17), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform457 : BV:32
4 : Lambda1374 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1375 : BV:32
7 : 794333549 { 0x2f58916d +1.69193804e223 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 38 , m_adder -> 17), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1368427877 , 1000 , 8 ) -> 774094796, () -> 1834854631, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform456 : BV:32
3 : Lambda1372 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda1373 : BV:32
6 : unit : UNIT
7 : 1286801573 { 0x4cb308a5 +1.39870131e26 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 268435455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 268435456; 268435459 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 268435460; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 38 , m_adder -> 17), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 774094796 { 0x2e23bfcc +1.27929067e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 268435459 { 0x10000003 +1.35e161 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 38 , m_adder -> 17), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3881093621
=counter_example_end
=global nodece 25 num_edges_traversed 2
=global nodece 25 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 26
=global nodece 26 nodece z3v487.ce1009.num_edges_traversed2
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(epsilon)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3v487.ce1009 a25c4e8464bfd030ed5cc76c8e2cced
=nextpc_const.1
1 : 539981931 { 0x202f786b +1.37086236e193 } : BV:32
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 17 , m_adder -> 222), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform485 : BV:32
4 : Lambda1454 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1455 : BV:32
7 : 1871351622 { 0x6f8a8f46 +1.8249735e96 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8460 { 0x210c +1.100851e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 17 , m_adder -> 222), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 539981931 , 1000 , 8 ) -> 833426891, () -> 767950757, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform484 : BV:32
3 : Lambda1452 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda1453 : BV:32
6 : unit : UNIT
7 : 459755575 { 0x1b675037 +1.80713546e183 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 8459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8460; 8463 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8464; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 17 , m_adder -> 222), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 833426891 { 0x31ad15cb +1.35222756e228 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8460 { 0x210c +1.100851e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 8463 { 0x210f +1.100886e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 17 , m_adder -> 222), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1542029841
=counter_example_end
=global nodece 26 num_edges_traversed 2
=global nodece 26 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 27
=global nodece 27 nodece z3.ce1006.num_edges_traversed1
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3.ce1006 76f5937dc07eb872dadab5e148a14bf6
=nextpc_const.1
1 : 1300700231 { 0x4d871c47 +1.5555045e28 } : BV:32
=input.spec-%var-n-1
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 2), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1193 : BV:32
4 : Lambda3296 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda3297 : BV:32
7 : 1210538034 { 0x48275832 +1.30737900e17 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3553353584 { 0xd3cbdf70 -741613712 -1.59275627e40 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 2), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1300700231 , 1000 , 8 ) -> 589752548, () -> 1478519149, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform1192 : BV:32
3 : Lambda3294 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda3295 : BV:32
6 : unit : UNIT
7 : 1635961456 { 0x6182ca70 +1.2180290e68 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3553353583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3553353584; 3553353587 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3553353588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 2), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 589752548 { 0x2326e8e4 +1.30398225e199 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3553353584 { 0xd3cbdf70 -741613712 -1.59275627e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3553353587 { 0xd3cbdf73 -741613709 -1.59275662e40 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 2), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2353350678
=counter_example_end
=global nodece 27 num_edges_traversed 1
=global nodece 27 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 28
=global nodece 28 nodece z3v487.ce1249.num_edges_traversed1
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3v487.ce1249 31a7b88723c0b64898717b2248588aa
=nextpc_const.1
1 : 855352793 { 0x32fba5d9 +1.96599876e230 } : BV:32
=input.spec-%var-n-1
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 253 , m_adder -> 27), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1297 : BV:32
4 : Lambda3592 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda3593 : BV:32
7 : 2122775524 { 0x7e86fbe4 +1.5456209e126 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 253 , m_adder -> 27), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 855352793 , 1000 , 8 ) -> 1700250217, () -> 2104536038, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform1296 : BV:32
3 : Lambda3590 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda3591 : BV:32
6 : unit : UNIT
7 : 527207613 { 0x1f6c8cbd +1.84804499e191 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 253 , m_adder -> 27), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1700250217 { 0x6557c269 +1.68562042e75 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 253 , m_adder -> 27), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1802708085
=counter_example_end
=global nodece 28 num_edges_traversed 1
=global nodece 28 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 29
=global nodece 29 nodece z3.ce1448.num_edges_traversed0
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(epsilon)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3.ce1448 afa290b510b5b220bd6723c1dbb3bcc6
=input.spec-%var-n-1
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2089 : BV:32
4 : Lambda5803 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5804 : BV:32
7 : 1629032822 { 0x61191176 +1.19584536e67 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2450130736 { 0x920a0730 -1844836560 -1.7834434e165 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2088 : BV:32
3 : Lambda5801 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda5802 : BV:32
6 : unit : UNIT
7 : 62512550 { 0x3b9dda6 +1.45207667e136 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2450130735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2450130736; 2450130739 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2450130740; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 4294967164 { 0xffffff7c -132 -1.99998426e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2450130736 { 0x920a0730 -1844836560 -1.7834434e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2450130739 { 0x920a0733 -1844836557 -1.7834470e165 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2127672282
=counter_example_end
=global nodece 29 num_edges_traversed 0
=global nodece 29 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 30
=global nodece 30 nodece z3v487.ce1449.num_edges_traversed0
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(epsilon)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3v487.ce1449 2465f2449d59fe4326e496d20363b6f
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2093 : BV:32
4 : Lambda5811 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5812 : BV:32
7 : 553909688 { 0x2103fdb8 +1.3118038e195 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2092 : BV:32
3 : Lambda5809 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda5810 : BV:32
6 : unit : UNIT
7 : 933714627 { 0x37a75ac3 +1.30745732e240 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3536628913
=counter_example_end
=global nodece 30 num_edges_traversed 0
=global nodece 30 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 31
=global nodece 31 nodece z3v487.ce1493.num_edges_traversed3
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3v487.ce1493 823ee2e2b25a16affd2c72ea05da6c
=nextpc_const.1
1 : 1368427877 { 0x51908d65 +1.12931501e36 } : BV:32
=input.spec-%var-n-1
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 774094796; 774094796 ] -> 0, [ 774094797; 774094797 ] -> 0, [ 774094798; 774094798 ] -> 0, [ 774094799; 774094799 ] -> 0, [ 774094800; 774094800 ] -> 0, [ 774094801; 774094801 ] -> 0, [ 774094802; 774094802 ] -> 0, [ 774094803; 774094803 ] -> 0, { [ 0; 774094795 ], [ 774094804; 4294967295 ], } -> (RAC: m_multiplier -> 38 , m_adder -> 17), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform457 : BV:32
4 : Lambda1374 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1375 : BV:32
7 : 794333549 { 0x2f58916d +1.69193804e223 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 38 , m_adder -> 17), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1368427877 , 1000 , 8 ) -> 774094796, () -> 1834854631, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2114 : BV:32
5 : Lambda5853 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda5854 : BV:32
8 : 1286801573 { 0x4cb308a5 +1.39870131e26 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 689293922 { 0x2915ca62 +1.17023873e211 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1376299752 { 0x5208aae8 +1.6771564e37 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 268435455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 268435456; 268435459 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 268435460; 774094795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 774094796; 774094803 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 774094804; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1331626437 { 0x4f5f01c5 +1.74224150e31 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1980674337 { 0x760eb121 +1.11478054e109 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1658418214 { 0x62d97426 +1.69885706e70 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 774094796 { 0x2e23bfcc +1.27929067e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 268435459 { 0x10000003 +1.35e161 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 38 , m_adder -> 17), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3892232104
=counter_example_end
=global nodece 31 num_edges_traversed 3
=global nodece 31 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 32
=global nodece 32 nodece z3v487.ce1546.num_edges_traversed4
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(epsilon)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3v487.ce1546 55aef181b65bdd84fef7c0cdbd6367fa
=nextpc_const.1
1 : 1368427877 { 0x51908d65 +1.12931501e36 } : BV:32
=input.spec-%var-n-1
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 774094796; 774094796 ] -> 0, [ 774094797; 774094797 ] -> 0, [ 774094798; 774094798 ] -> 0, [ 774094799; 774094799 ] -> 0, [ 774094800; 774094800 ] -> 0, [ 774094801; 774094801 ] -> 0, [ 774094802; 774094802 ] -> 0, [ 774094803; 774094803 ] -> 0, { [ 0; 774094795 ], [ 774094804; 4294967295 ], } -> (RAC: m_multiplier -> 38 , m_adder -> 17), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform457 : BV:32
4 : Lambda1374 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1375 : BV:32
7 : 794333549 { 0x2f58916d +1.69193804e223 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 38 , m_adder -> 17), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1368427877 , 1000 , 8 ) -> 774094796, () -> 1834854631, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2114 : BV:32
5 : Lambda5853 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda5854 : BV:32
8 : 1286801573 { 0x4cb308a5 +1.39870131e26 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 689293922 { 0x2915ca62 +1.17023873e211 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1376299752 { 0x5208aae8 +1.6771564e37 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 268435455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 268435456; 268435459 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 268435460; 774094795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 774094796; 774094803 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 774094804; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1331626437 { 0x4f5f01c5 +1.74224150e31 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1980674337 { 0x760eb121 +1.11478054e109 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1658418214 { 0x62d97426 +1.69885706e70 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 774094796 { 0x2e23bfcc +1.27929067e221 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 268435459 { 0x10000003 +1.35e161 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 38 , m_adder -> 17), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3892232104
=counter_example_end
=global nodece 32 num_edges_traversed 4
=global nodece 32 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 33
=global nodece 33 nodece z3v487.ce1550.num_edges_traversed5
=global nodece 33 nodece_path
=global nodece 33 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 33 nodece_cached_counterexample
=counter_example_begin z3v487.ce1550 8e53612b8bc7da055e16c8a9b9b1f68
=nextpc_const.1
1 : 1368427877 { 0x51908d65 +1.12931501e36 } : BV:32
=input.spec-%var-n-1
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 774094796; 774094796 ] -> 0, [ 774094797; 774094797 ] -> 0, [ 774094798; 774094798 ] -> 0, [ 774094799; 774094799 ] -> 0, [ 774094800; 774094800 ] -> 0, [ 774094801; 774094801 ] -> 0, [ 774094802; 774094802 ] -> 0, [ 774094803; 774094803 ] -> 0, { [ 0; 774094795 ], [ 774094804; 4294967295 ], } -> (RAC: m_multiplier -> 38 , m_adder -> 17), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform457 : BV:32
4 : Lambda1374 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1375 : BV:32
7 : 794333549 { 0x2f58916d +1.69193804e223 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 38 , m_adder -> 17), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1368427877 , 1000 , 8 ) -> 774094796, () -> 1834854631, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2114 : BV:32
5 : Lambda5853 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda5854 : BV:32
8 : 1286801573 { 0x4cb308a5 +1.39870131e26 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 689293922 { 0x2915ca62 +1.17023873e211 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1376299752 { 0x5208aae8 +1.6771564e37 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 268435455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 268435456; 268435459 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 268435460; 774094795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 774094796; 774094803 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 774094804; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1331626437 { 0x4f5f01c5 +1.74224150e31 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1980674337 { 0x760eb121 +1.11478054e109 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1658418214 { 0x62d97426 +1.69885706e70 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 774094796 { 0x2e23bfcc +1.27929067e221 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 774094796; 774094796 ] -> 0, [ 774094797; 774094797 ] -> 0, [ 774094798; 774094798 ] -> 0, [ 774094799; 774094799 ] -> 0, [ 774094800; 774094800 ] -> 0, [ 774094801; 774094801 ] -> 0, [ 774094802; 774094802 ] -> 0, [ 774094803; 774094803 ] -> 0, { [ 0; 774094795 ], [ 774094804; 4294967295 ], } -> (RAC: m_multiplier -> 38 , m_adder -> 17), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 774094796 { 0x2e23bfcc +1.27929067e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 268435459 { 0x10000003 +1.35e161 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 38 , m_adder -> 17), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3892232104
=counter_example_end
=global nodece 33 num_edges_traversed 5
=global nodece 33 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 34
=global nodece 34 nodece z3.ce1478.num_edges_traversed2
=global nodece 34 nodece_path
=global nodece 34 nodece_path.graph_edge_composition
(epsilon)
=global nodece 34 nodece_cached_counterexample
=counter_example_begin z3.ce1478 e9b9bb94703232f24ebdf3af1db0d94e
=nextpc_const.1
1 : 1300700231 { 0x4d871c47 +1.5555045e28 } : BV:32
=input.spec-%var-n-1
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 589752548; 589752548 ] -> 0, [ 589752549; 589752549 ] -> 0, [ 589752550; 589752550 ] -> 0, [ 589752551; 589752551 ] -> 0, [ 589752552; 589752552 ] -> 0, [ 589752553; 589752553 ] -> 0, [ 589752554; 589752554 ] -> 0, [ 589752555; 589752555 ] -> 0, { [ 0; 589752547 ], [ 589752556; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 2), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1193 : BV:32
4 : Lambda3296 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda3297 : BV:32
7 : 1210538034 { 0x48275832 +1.30737900e17 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3553353584 { 0xd3cbdf70 -741613712 -1.59275627e40 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 2), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1300700231 , 1000 , 8 ) -> 589752548, () -> 1478519149, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2107 : BV:32
5 : Lambda5839 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda5840 : BV:32
8 : 1635961456 { 0x6182ca70 +1.2180290e68 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 2069706624 { 0x7b5d3780 +1.72825622e119 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1202601903 { 0x47ae3faf +1.36131846e16 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 589752547 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 589752548; 589752555 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 589752556; 3553353583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3553353584; 3553353587 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3553353588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 609821161 { 0x245921e9 +1.69634735e201 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 667882122 { 0x27cf128a +1.61775326e208 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1406556661 { 0x53d659f5 +1.67462027e40 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 589752548 { 0x2326e8e4 +1.30398225e199 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3553353584 { 0xd3cbdf70 -741613712 -1.59275627e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3553353587 { 0xd3cbdf73 -741613709 -1.59275662e40 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 2), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2051446461
=counter_example_end
=global nodece 34 num_edges_traversed 2
=global nodece 34 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 35
=global nodece 35 nodece z3.ce1580.num_edges_traversed3
=global nodece 35 nodece_path
=global nodece 35 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 35 nodece_cached_counterexample
=counter_example_begin z3.ce1580 46ab7816e07db0b6a0353d6078672499
=nextpc_const.1
1 : 1300700231 { 0x4d871c47 +1.5555045e28 } : BV:32
=input.spec-%var-n-1
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 589752548; 589752548 ] -> 0, [ 589752549; 589752549 ] -> 0, [ 589752550; 589752550 ] -> 0, [ 589752551; 589752551 ] -> 0, [ 589752552; 589752552 ] -> 0, [ 589752553; 589752553 ] -> 0, [ 589752554; 589752554 ] -> 0, [ 589752555; 589752555 ] -> 0, { [ 0; 589752547 ], [ 589752556; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 2), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1193 : BV:32
4 : Lambda3296 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda3297 : BV:32
7 : 1210538034 { 0x48275832 +1.30737900e17 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3553353584 { 0xd3cbdf70 -741613712 -1.59275627e40 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 2), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1300700231 , 1000 , 8 ) -> 589752548, () -> 1478519149, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2107 : BV:32
5 : Lambda5839 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda5840 : BV:32
8 : 1635961456 { 0x6182ca70 +1.2180290e68 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 2069706624 { 0x7b5d3780 +1.72825622e119 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1202601903 { 0x47ae3faf +1.36131846e16 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 589752547 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 589752548; 589752555 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 589752556; 3553353583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3553353584; 3553353587 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3553353588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 609821161 { 0x245921e9 +1.69634735e201 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 667882122 { 0x27cf128a +1.61775326e208 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1406556661 { 0x53d659f5 +1.67462027e40 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 589752548 { 0x2326e8e4 +1.30398225e199 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3553353584 { 0xd3cbdf70 -741613712 -1.59275627e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3553353587 { 0xd3cbdf73 -741613709 -1.59275662e40 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 2), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2051446461
=counter_example_end
=global nodece 35 num_edges_traversed 3
=global nodece 35 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 36
=global nodece 36 nodece z3.ce1591.num_edges_traversed4
=global nodece 36 nodece_path
=global nodece 36 nodece_path.graph_edge_composition
(epsilon)
=global nodece 36 nodece_cached_counterexample
=counter_example_begin z3.ce1591 bdb6668eab2de02ac9afc87cbb366385
=nextpc_const.1
1 : 1300700231 { 0x4d871c47 +1.5555045e28 } : BV:32
=input.spec-%var-n-1
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 589752548; 589752548 ] -> 0, [ 589752549; 589752549 ] -> 0, [ 589752550; 589752550 ] -> 0, [ 589752551; 589752551 ] -> 0, [ 589752552; 589752552 ] -> 0, [ 589752553; 589752553 ] -> 0, [ 589752554; 589752554 ] -> 0, [ 589752555; 589752555 ] -> 0, { [ 0; 589752547 ], [ 589752556; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 2), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1193 : BV:32
4 : Lambda3296 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda3297 : BV:32
7 : 1210538034 { 0x48275832 +1.30737900e17 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3553353584 { 0xd3cbdf70 -741613712 -1.59275627e40 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 2), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1300700231 , 1000 , 8 ) -> 589752548, () -> 1478519149, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2107 : BV:32
5 : Lambda5839 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda5840 : BV:32
8 : 1635961456 { 0x6182ca70 +1.2180290e68 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 2069706624 { 0x7b5d3780 +1.72825622e119 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1202601903 { 0x47ae3faf +1.36131846e16 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 589752547 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 589752548; 589752555 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 589752556; 3553353583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3553353584; 3553353587 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3553353588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 609821161 { 0x245921e9 +1.69634735e201 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 667882122 { 0x27cf128a +1.61775326e208 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1406556661 { 0x53d659f5 +1.67462027e40 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 589752548 { 0x2326e8e4 +1.30398225e199 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 589752548; 589752548 ] -> 0, [ 589752549; 589752549 ] -> 0, [ 589752550; 589752550 ] -> 0, [ 589752551; 589752551 ] -> 0, [ 589752552; 589752552 ] -> 0, [ 589752553; 589752553 ] -> 0, [ 589752554; 589752554 ] -> 0, [ 589752555; 589752555 ] -> 0, { [ 0; 589752547 ], [ 589752556; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 2), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 589752548 { 0x2326e8e4 +1.30398225e199 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3553353584 { 0xd3cbdf70 -741613712 -1.59275627e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3553353587 { 0xd3cbdf73 -741613709 -1.59275662e40 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 2), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2051446461
=counter_example_end
=global nodece 36 num_edges_traversed 4
=global nodece 36 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 37
=global nodece 37 nodece z3.ce1463.num_edges_traversed1
=global nodece 37 nodece_path
=global nodece 37 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 37 nodece_cached_counterexample
=counter_example_begin z3.ce1463 994a24d927b6a82fde3e23e4a2d0cb
=input.spec-%var-n-1
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 4294967164; 4294967164 ] -> 0, [ 4294967165; 4294967165 ] -> 0, [ 4294967166; 4294967166 ] -> 0, [ 4294967167; 4294967167 ] -> 0, [ 4294967168; 4294967168 ] -> 0, [ 4294967169; 4294967169 ] -> 0, [ 4294967170; 4294967170 ] -> 0, [ 4294967171; 4294967171 ] -> 0, { [ 0; 4294967163 ], [ 4294967172; 4294967295 ], } -> (RAC: m_multiplier -> 18 , m_adder -> 206), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2089 : BV:32
4 : Lambda5803 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5804 : BV:32
7 : 1629032822 { 0x61191176 +1.19584536e67 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2450130736 { 0x920a0730 -1844836560 -1.7834434e165 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2100 : BV:32
5 : Lambda5825 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda5826 : BV:32
8 : 62512550 { 0x3b9dda6 +1.45207667e136 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1823896263 { 0x6cb672c7 +1.42537772e90 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1995570575 { 0x76f1fd8f +1.89055049e110 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2450130735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2450130736; 2450130739 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2450130740; 4294967163 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967164; 4294967171 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4294967172; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1820943919 { 0x6c89662f +1.7343089e90 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 253026578 { 0xf14e112 +1.16311860e159 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 385905982 { 0x1700753e +1.357794e175 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4294967164 { 0xffffff7c -132 -1.99998426e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2450130736 { 0x920a0730 -1844836560 -1.7834434e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2450130739 { 0x920a0733 -1844836557 -1.7834470e165 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3219801337
=counter_example_end
=global nodece 37 num_edges_traversed 1
=global nodece 37 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 38
=global nodece 38 nodece z3.ce1621.num_edges_traversed2
=global nodece 38 nodece_path
=global nodece 38 nodece_path.graph_edge_composition
(epsilon)
=global nodece 38 nodece_cached_counterexample
=counter_example_begin z3.ce1621 697ee66620d5eb8d26d7235738f08ee5
=input.spec-%var-n-1
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 4294967164; 4294967164 ] -> 0, [ 4294967165; 4294967165 ] -> 0, [ 4294967166; 4294967166 ] -> 0, [ 4294967167; 4294967167 ] -> 0, [ 4294967168; 4294967168 ] -> 0, [ 4294967169; 4294967169 ] -> 0, [ 4294967170; 4294967170 ] -> 0, [ 4294967171; 4294967171 ] -> 0, { [ 0; 4294967163 ], [ 4294967172; 4294967295 ], } -> (RAC: m_multiplier -> 18 , m_adder -> 206), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2089 : BV:32
4 : Lambda5803 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5804 : BV:32
7 : 1629032822 { 0x61191176 +1.19584536e67 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2450130736 { 0x920a0730 -1844836560 -1.7834434e165 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2100 : BV:32
5 : Lambda5825 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda5826 : BV:32
8 : 62512550 { 0x3b9dda6 +1.45207667e136 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1823896263 { 0x6cb672c7 +1.42537772e90 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1995570575 { 0x76f1fd8f +1.89055049e110 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2450130735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2450130736; 2450130739 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2450130740; 4294967163 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967164; 4294967171 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4294967172; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1820943919 { 0x6c89662f +1.7343089e90 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 253026578 { 0xf14e112 +1.16311860e159 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 385905982 { 0x1700753e +1.357794e175 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4294967164 { 0xffffff7c -132 -1.99998426e128 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2450130736 { 0x920a0730 -1844836560 -1.7834434e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2450130739 { 0x920a0733 -1844836557 -1.7834470e165 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3219801337
=counter_example_end
=global nodece 38 num_edges_traversed 2
=global nodece 38 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 39
=global nodece 39 nodece z3.ce1625.num_edges_traversed3
=global nodece 39 nodece_path
=global nodece 39 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 39 nodece_cached_counterexample
=counter_example_begin z3.ce1625 639c4fe167fcc055591879a936aaad18
=nextpc_const.1
1 : 361761762 { 0x15900be2 +1.12536263e172 } : BV:32
=input.spec-%var-n-1
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 4294967164; 4294967164 ] -> 0, [ 4294967165; 4294967165 ] -> 0, [ 4294967166; 4294967166 ] -> 0, [ 4294967167; 4294967167 ] -> 0, [ 4294967168; 4294967168 ] -> 0, [ 4294967169; 4294967169 ] -> 0, [ 4294967170; 4294967170 ] -> 0, [ 4294967171; 4294967171 ] -> 0, { [ 0; 4294967163 ], [ 4294967172; 4294967295 ], } -> (RAC: m_multiplier -> 18 , m_adder -> 206), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2089 : BV:32
4 : Lambda5803 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5804 : BV:32
7 : 1629032822 { 0x61191176 +1.19584536e67 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2450130736 { 0x920a0730 -1844836560 -1.7834434e165 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 18 , m_adder -> 206), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 361761762 , 1000 , 8 ) -> 562292394, () -> 208244924, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2100 : BV:32
5 : Lambda5825 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda5826 : BV:32
8 : 62512550 { 0x3b9dda6 +1.45207667e136 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1823896263 { 0x6cb672c7 +1.42537772e90 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1995570575 { 0x76f1fd8f +1.89055049e110 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2450130735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2450130736; 2450130739 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2450130740; 4294967163 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967164; 4294967171 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4294967172; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1820943919 { 0x6c89662f +1.7343089e90 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 253026578 { 0xf14e112 +1.16311860e159 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 385905982 { 0x1700753e +1.357794e175 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4294967164 { 0xffffff7c -132 -1.99998426e128 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 4294967164; 4294967164 ] -> 0, [ 4294967165; 4294967165 ] -> 0, [ 4294967166; 4294967166 ] -> 0, [ 4294967167; 4294967167 ] -> 0, [ 4294967168; 4294967168 ] -> 0, [ 4294967169; 4294967169 ] -> 0, [ 4294967170; 4294967170 ] -> 0, [ 4294967171; 4294967171 ] -> 0, { [ 0; 4294967163 ], [ 4294967172; 4294967295 ], } -> (RAC: m_multiplier -> 18 , m_adder -> 206), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 562292394 { 0x2183e6aa +1.3047680e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2450130736 { 0x920a0730 -1844836560 -1.7834434e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2450130739 { 0x920a0733 -1844836557 -1.7834470e165 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 18 , m_adder -> 206), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2357347657
=counter_example_end
=global nodece 39 num_edges_traversed 3
=global nodece 39 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 40
=global nodece 40 nodece z3.ce1827.num_edges_traversed1
=global nodece 40 nodece_path
=global nodece 40 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 40 nodece_cached_counterexample
=counter_example_begin z3.ce1827 62955e7204d7a7db7b452f245bbc0e5
=input.spec-%var-n-1
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2158 : BV:32
4 : Lambda5983 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5984 : BV:32
7 : 945934890 { 0x3861d22a +1.76422619e241 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3339068992 { 0xc7062640 -955898304 -1.4804229e15 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2157 : BV:32
5 : Lambda5981 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda5982 : BV:32
8 : 743223269 { 0x2c4cafe5 +1.59911787e217 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3339068991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3339068992; 3339068995 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3339068996; 3851419647 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3851419648; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4159435916 { 0xf7ebf48c -135531380 -1.84340047e112 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 3851419648 { 0xe5900000 -443547648 -1.12500000e76 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3339068992 { 0xc7062640 -955898304 -1.4804229e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3339068995 { 0xc7062643 -955898301 -1.4804265e15 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1988822277
=counter_example_end
=global nodece 40 num_edges_traversed 1
=global nodece 40 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 41
=global nodece 41 nodece z3.ce1842.num_edges_traversed2
=global nodece 41 nodece_path
=global nodece 41 nodece_path.graph_edge_composition
(epsilon)
=global nodece 41 nodece_cached_counterexample
=counter_example_begin z3.ce1842 847c21d2da827f723730f94f7a5b30
=nextpc_const.1
1 : 963396207 { 0x396c426f +1.84577739e243 } : BV:32
=input.spec-%var-n-1
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2158 : BV:32
4 : Lambda5983 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5984 : BV:32
7 : 945934890 { 0x3861d22a +1.76422619e241 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3339068992 { 0xc7062640 -955898304 -1.4804229e15 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 45 , m_adder -> 201), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 963396207 , 1000 , 8 ) -> 2058687692, () -> 1283646972, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2157 : BV:32
5 : Lambda5981 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda5982 : BV:32
8 : 743223269 { 0x2c4cafe5 +1.59911787e217 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3339068991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3339068992; 3339068995 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3339068996; 3851419647 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3851419648; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4159435916 { 0xf7ebf48c -135531380 -1.84340047e112 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2058687692 { 0x7ab514cc +1.41469717e118 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3339068992 { 0xc7062640 -955898304 -1.4804229e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3339068995 { 0xc7062643 -955898301 -1.4804265e15 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 45 , m_adder -> 201), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3539172105
=counter_example_end
=global nodece 41 num_edges_traversed 2
=global nodece 41 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 42
=global nodece 42 nodece z3.ce1855.num_edges_traversed3
=global nodece 42 nodece_path
=global nodece 42 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 42 nodece_cached_counterexample
=counter_example_begin z3.ce1855 841924f6f63c4c44ae1c37767081385f
=nextpc_const.1
1 : 963396207 { 0x396c426f +1.84577739e243 } : BV:32
=input.spec-%var-n-1
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2058687691 ] -> 0, [ 2058687692; 2058687692 ] -> 1, [ 2058687693; 2058687693 ] -> 0, [ 2058687694; 2058687694 ] -> 0, [ 2058687695; 2058687695 ] -> 0, [ 2058687696; 2058687696 ] -> 140, [ 2058687697; 2058687697 ] -> 244, [ 2058687698; 2058687698 ] -> 235, [ 2058687699; 2058687699 ] -> 247, [ 2058687700; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2158 : BV:32
4 : Lambda5983 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5984 : BV:32
7 : 945934890 { 0x3861d22a +1.76422619e241 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3339068992 { 0xc7062640 -955898304 -1.4804229e15 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 45 , m_adder -> 201), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 963396207 , 1000 , 8 ) -> 2058687692, () -> 1283646972, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 16777216 { 0x1000000 +1.0e131 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2169 : BV:32
6 : Lambda6005 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda6006 : BV:32
9 : 743223269 { 0x2c4cafe5 +1.59911787e217 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(1, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1806170900 { 0x6ba7fb14 +1.31234979e88 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 837663466 { 0x31edbaea +1.85726666e228 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2058687691 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2058687692; 2058687699 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2058687700; 3339068991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3339068992; 3339068995 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3339068996; 3851419647 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3851419648; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 754961021 { 0x2cffca7d +1.99836695e218 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 702012212 { 0x29d7db34 +1.68637704e212 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 121969682 { 0x7451c12 +1.53991913e143 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 2058687692 { 0x7ab514cc +1.41469717e118 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3339068992 { 0xc7062640 -955898304 -1.4804229e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3339068995 { 0xc7062643 -955898301 -1.4804265e15 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 45 , m_adder -> 201), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4112946636
=counter_example_end
=global nodece 42 num_edges_traversed 3
=global nodece 42 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 43
=global nodece 43 nodece z3.ce1878.num_edges_traversed4
=global nodece 43 nodece_path
=global nodece 43 nodece_path.graph_edge_composition
(epsilon)
=global nodece 43 nodece_cached_counterexample
=counter_example_begin z3.ce1878 aad6c78fe1bb66a711523f46aff166fb
=nextpc_const.1
1 : 963396207 { 0x396c426f +1.84577739e243 } : BV:32
=input.spec-%var-n-1
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2058687691 ] -> 0, [ 2058687692; 2058687692 ] -> 1, [ 2058687693; 2058687693 ] -> 0, [ 2058687694; 2058687694 ] -> 0, [ 2058687695; 2058687695 ] -> 0, [ 2058687696; 2058687696 ] -> 140, [ 2058687697; 2058687697 ] -> 244, [ 2058687698; 2058687698 ] -> 235, [ 2058687699; 2058687699 ] -> 247, [ 2058687700; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2158 : BV:32
4 : Lambda5983 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5984 : BV:32
7 : 945934890 { 0x3861d22a +1.76422619e241 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3339068992 { 0xc7062640 -955898304 -1.4804229e15 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 45 , m_adder -> 201), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 963396207 , 1000 , 8 ) -> 2058687692, () -> 1283646972, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 16777216 { 0x1000000 +1.0e131 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2169 : BV:32
6 : Lambda6005 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda6006 : BV:32
9 : 743223269 { 0x2c4cafe5 +1.59911787e217 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(1, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1806170900 { 0x6ba7fb14 +1.31234979e88 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 837663466 { 0x31edbaea +1.85726666e228 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2058687691 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2058687692; 2058687699 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2058687700; 3339068991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3339068992; 3339068995 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3339068996; 3851419647 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3851419648; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 754961021 { 0x2cffca7d +1.99836695e218 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 702012212 { 0x29d7db34 +1.68637704e212 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 121969682 { 0x7451c12 +1.53991913e143 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 2058687692 { 0x7ab514cc +1.41469717e118 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3339068992 { 0xc7062640 -955898304 -1.4804229e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3339068995 { 0xc7062643 -955898301 -1.4804265e15 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 45 , m_adder -> 201), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4112946636
=counter_example_end
=global nodece 43 num_edges_traversed 4
=global nodece 43 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 44
=global nodece 44 nodece z3.ce1882.num_edges_traversed5
=global nodece 44 nodece_path
=global nodece 44 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 44 nodece_cached_counterexample
=counter_example_begin z3.ce1882 3a53d2a6a910972e4b3aa548b9395ae6
=nextpc_const.1
1 : 963396207 { 0x396c426f +1.84577739e243 } : BV:32
=input.spec-%var-n-1
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2058687691 ] -> 0, [ 2058687692; 2058687692 ] -> 1, [ 2058687693; 2058687693 ] -> 0, [ 2058687694; 2058687694 ] -> 0, [ 2058687695; 2058687695 ] -> 0, [ 2058687696; 2058687696 ] -> 140, [ 2058687697; 2058687697 ] -> 244, [ 2058687698; 2058687698 ] -> 235, [ 2058687699; 2058687699 ] -> 247, [ 2058687700; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2158 : BV:32
4 : Lambda5983 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5984 : BV:32
7 : 945934890 { 0x3861d22a +1.76422619e241 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3339068992 { 0xc7062640 -955898304 -1.4804229e15 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 45 , m_adder -> 201), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 963396207 , 1000 , 8 ) -> 2058687692, () -> 1283646972, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 16777216 { 0x1000000 +1.0e131 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2169 : BV:32
6 : Lambda6005 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda6006 : BV:32
9 : 743223269 { 0x2c4cafe5 +1.59911787e217 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(1, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1806170900 { 0x6ba7fb14 +1.31234979e88 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 837663466 { 0x31edbaea +1.85726666e228 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2058687691 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2058687692; 2058687699 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2058687700; 3339068991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3339068992; 3339068995 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3339068996; 3851419647 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3851419648; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 754961021 { 0x2cffca7d +1.99836695e218 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 702012212 { 0x29d7db34 +1.68637704e212 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 121969682 { 0x7451c12 +1.53991913e143 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 2058687692 { 0x7ab514cc +1.41469717e118 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 2058687691 ] -> 0, [ 2058687692; 2058687692 ] -> 1, [ 2058687693; 2058687693 ] -> 0, [ 2058687694; 2058687694 ] -> 0, [ 2058687695; 2058687695 ] -> 0, [ 2058687696; 2058687696 ] -> 140, [ 2058687697; 2058687697 ] -> 244, [ 2058687698; 2058687698 ] -> 235, [ 2058687699; 2058687699 ] -> 247, [ 2058687700; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2058687692 { 0x7ab514cc +1.41469717e118 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3339068992 { 0xc7062640 -955898304 -1.4804229e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3339068995 { 0xc7062643 -955898301 -1.4804265e15 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 45 , m_adder -> 201), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4112946636
=counter_example_end
=global nodece 44 num_edges_traversed 5
=global nodece 44 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 45
=global nodece 45 nodece z3.ce1918.num_edges_traversed1
=global nodece 45 nodece_path
=global nodece 45 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 45 nodece_cached_counterexample
=counter_example_begin z3.ce1918 abee50943f794cf33ef22d51be83be
=input.spec-%var-n-1
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2213 : BV:32
4 : Lambda6135 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6136 : BV:32
7 : 798846264 { 0x2f9d6d38 +1.22989559e224 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3051566360 { 0xb5e33518 -1243400936 -1.77505779e236 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 2048 { 0x800 +1.24414e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2212 : BV:32
5 : Lambda6133 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda6134 : BV:32
8 : 1911791495 { 0x71f39f87 +1.90330588e100 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3051566359 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3051566360; 3051566363 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3051566364; 3233841144 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3233841145; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 3871309800 { 0xe6bf7fe8 -423657496 -1.49609088e78 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 3233841145 { 0xc0c07ff9 -1061126151 -1.50390541e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3051566360 { 0xb5e33518 -1243400936 -1.77505779e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3051566363 { 0xb5e3351b -1243400933 -1.77505815e236 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
525221640
=counter_example_end
=global nodece 45 num_edges_traversed 1
=global nodece 45 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 46
=global nodece 46 nodece z3.ce1933.num_edges_traversed2
=global nodece 46 nodece_path
=global nodece 46 nodece_path.graph_edge_composition
(epsilon)
=global nodece 46 nodece_cached_counterexample
=counter_example_begin z3.ce1933 5056109415dc4814a61e592e5adb9471
=nextpc_const.1
1 : 996129416 { 0x3b5fba88 +1.74787998e247 } : BV:32
=input.spec-%var-n-1
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2213 : BV:32
4 : Lambda6135 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6136 : BV:32
7 : 798846264 { 0x2f9d6d38 +1.22989559e224 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3051566360 { 0xb5e33518 -1243400936 -1.77505779e236 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 40 , m_adder -> 80), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 996129416 , 1000 , 8 ) -> 1208278310, () -> 1088488471, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 2048 { 0x800 +1.24414e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2212 : BV:32
5 : Lambda6133 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda6134 : BV:32
8 : 1911791495 { 0x71f39f87 +1.90330588e100 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3051566359 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3051566360; 3051566363 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3051566364; 3233841144 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3233841145; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 3871309800 { 0xe6bf7fe8 -423657496 -1.49609088e78 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1208278310 { 0x4804dd26 +1.3799891e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3051566360 { 0xb5e33518 -1243400936 -1.77505779e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3051566363 { 0xb5e3351b -1243400933 -1.77505815e236 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 40 , m_adder -> 80), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
461346268
=counter_example_end
=global nodece 46 num_edges_traversed 2
=global nodece 46 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 47
=global nodece 47 nodece z3v487.ce1919.num_edges_traversed1
=global nodece 47 nodece_path
=global nodece 47 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 47 nodece_cached_counterexample
=counter_example_begin z3v487.ce1919 112280aedc0fb33d76368d373b61219
=input.spec-%var-n-1
1 : 4097 { 0x1001 +1.48840e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4097 { 0x1001 +1.48840e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2217 : BV:32
4 : Lambda6143 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6144 : BV:32
7 : 1936639627 { 0x736ec68b +1.86543405e103 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 636 { 0x27c +1.7581e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4097 { 0x1001 +1.48840e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2216 : BV:32
5 : Lambda6141 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda6142 : BV:32
8 : 1278587795 { 0x4c35b393 +1.41954267e25 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 635 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 636; 639 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 640; 1173356543 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1173356544; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1173356544 { 0x45f00000 +1.87500000e12 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 636 { 0x27c +1.7581e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 639 { 0x27f +1.7617e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4011597378
=counter_example_end
=global nodece 47 num_edges_traversed 1
=global nodece 47 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 48
=global nodece 48 nodece z3v487.ce1955.num_edges_traversed2
=global nodece 48 nodece_path
=global nodece 48 nodece_path.graph_edge_composition
(epsilon)
=global nodece 48 nodece_cached_counterexample
=counter_example_begin z3v487.ce1955 80868a979ea5373cf59c2e61544359d
=nextpc_const.1
1 : 333017688 { 0x13d97258 +1.69880199e168 } : BV:32
=input.spec-%var-n-1
1 : 4097 { 0x1001 +1.48840e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4097 { 0x1001 +1.48840e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2217 : BV:32
4 : Lambda6143 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6144 : BV:32
7 : 1936639627 { 0x736ec68b +1.86543405e103 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 636 { 0x27c +1.7581e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4097 { 0x1001 +1.48840e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 170), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 333017688 , 1000 , 8 ) -> 1219221616, () -> 1723686522, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform2216 : BV:32
5 : Lambda6141 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda6142 : BV:32
8 : 1278587795 { 0x4c35b393 +1.41954267e25 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 635 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 636; 639 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 640; 1173356543 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1173356544; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1219221616 { 0x48abd870 +1.34254264e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 636 { 0x27c +1.7581e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 639 { 0x27f +1.7617e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 170), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
955400054
=counter_example_end
=global nodece 48 num_edges_traversed 2
=global nodece 48 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 49
=global nodece 49 nodece z3v487.ce1990.num_edges_traversed1
=global nodece 49 nodece_path
=global nodece 49 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 49 nodece_cached_counterexample
=counter_example_begin z3v487.ce1990 c081268f525ae8916784f8743a48f0
=input.spec-%var-n-1
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> 0, [ 16; 16 ] -> 3, [ 17; 17 ] -> 0, [ 18; 18 ] -> 0, [ 19; 19 ] -> 0, [ 20; 20 ] -> 32, [ 21; 21 ] -> 0, [ 22; 22 ] -> 0, [ 23; 23 ] -> 0, [ 24; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
2 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
3 : unit : UNIT
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2257 : BV:32
6 : Lambda6234 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda6235 : BV:32
9 : 784583798 { 0x2ec3cc76 +1.52967715e222 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 3, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(2, 3, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(1, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : Indxform2259 : BV:32
7 : Lambda6238 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda6239 : BV:32
10 : 784583798 { 0x2ec3cc76 +1.52967715e222 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(5, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(5, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(4, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2256 : BV:32
4 : Lambda6232 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6233 : BV:32
7 : 966143065 { 0x39962c59 +1.17322838e244 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : Indxform2261 : BV:32
7 : Lambda6242 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda6243 : BV:32
10 : 784583798 { 0x2ec3cc76 +1.52967715e222 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(5, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(5, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(4, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 23 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 24; 741313895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 741313896; 741313899 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 741313900; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 741313896 { 0x2c2f8d68 +1.37150287e217 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : Indxform2263 : BV:32
7 : Lambda6246 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda6247 : BV:32
10 : 784583798 { 0x2ec3cc76 +1.52967715e222 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(5, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(5, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(4, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 593386059 { 0x235e5a4b +1.73713052e199 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 15 ] -> 0, [ 16; 23 ] -> 102, [ 24; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1997602919 { 0x77110067 +1.13282477e111 } : COUNT
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1997602919 { 0x77110067 +1.13282477e111 } : COUNT
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 23 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 24; 741313895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 741313896; 741313899 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 741313900; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1889548641 { 0x70a03961 +1.25175106e98 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2114184647 { 0x7e03e5c7 +1.3044974e125 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 158883732 { 0x9785f94 +1.94041681e147 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1889548641 { 0x70a03961 +1.25175106e98 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 158883732 { 0x9785f94 +1.94041681e147 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%2%d
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 20 { 0x14 +1.238e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 20 { 0x14 +1.238e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 741313896 { 0x2c2f8d68 +1.37150287e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 741313899 { 0x2c2f8d6b +1.37150323e217 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1520765319
=counter_example_end
=global nodece 49 num_edges_traversed 1
=global nodece 49 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 50
=global nodece 50 nodece z3v487.ce2022.num_edges_traversed2
=global nodece 50 nodece_path
=global nodece 50 nodece_path.graph_edge_composition
(epsilon)
=global nodece 50 nodece_cached_counterexample
=counter_example_begin z3v487.ce2022 cf8429f666d3a9cdd9ae2b7148e24f
=input.spec-%var-n-1
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> 0, [ 16; 16 ] -> 3, [ 17; 17 ] -> 0, [ 18; 18 ] -> 0, [ 19; 19 ] -> 0, [ 20; 20 ] -> 32, [ 21; 21 ] -> 0, [ 22; 22 ] -> 0, [ 23; 23 ] -> 0, [ 24; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2256 : BV:32
4 : Lambda6232 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6233 : BV:32
7 : 966143065 { 0x39962c59 +1.17322838e244 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 741313896 { 0x2c2f8d68 +1.37150287e217 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : Indxform2263 : BV:32
7 : Lambda6246 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda6247 : BV:32
10 : 784583798 { 0x2ec3cc76 +1.52967715e222 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(5, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(5, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(4, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 593386059 { 0x235e5a4b +1.73713052e199 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1997602919 { 0x77110067 +1.13282477e111 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 23 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 24; 741313895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 741313896; 741313899 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 741313900; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1889548641 { 0x70a03961 +1.25175106e98 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2114184647 { 0x7e03e5c7 +1.3044974e125 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 158883732 { 0x9785f94 +1.94041681e147 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 741313896 { 0x2c2f8d68 +1.37150287e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 741313899 { 0x2c2f8d6b +1.37150323e217 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1520765319
=counter_example_end
=global nodece 50 num_edges_traversed 2
=global nodece 50 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 51
=global nodece 51 nodece z3v487.ce2026.num_edges_traversed3
=global nodece 51 nodece_path
=global nodece 51 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 51 nodece_cached_counterexample
=counter_example_begin z3v487.ce2026 eed63937e949637b25984c85eafeb5e
=nextpc_const.1
1 : 1768610718 { 0x696adb9e +1.83482718e83 } : BV:32
=input.spec-%var-n-1
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> 0, [ 16; 16 ] -> 3, [ 17; 17 ] -> 0, [ 18; 18 ] -> 0, [ 19; 19 ] -> 0, [ 20; 20 ] -> 32, [ 21; 21 ] -> 0, [ 22; 22 ] -> 0, [ 23; 23 ] -> 0, [ 24; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2256 : BV:32
4 : Lambda6232 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6233 : BV:32
7 : 966143065 { 0x39962c59 +1.17322838e244 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 741313896 { 0x2c2f8d68 +1.37150287e217 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 209), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1768610718 , 1000 , 8 ) -> 849624057, () -> 128014211, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : Indxform2263 : BV:32
7 : Lambda6246 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda6247 : BV:32
10 : 784583798 { 0x2ec3cc76 +1.52967715e222 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(5, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(5, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(4, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 593386059 { 0x235e5a4b +1.73713052e199 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1997602919 { 0x77110067 +1.13282477e111 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 23 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 24; 741313895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 741313896; 741313899 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 741313900; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1889548641 { 0x70a03961 +1.25175106e98 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2114184647 { 0x7e03e5c7 +1.3044974e125 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 158883732 { 0x9785f94 +1.94041681e147 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 15 ] -> 0, [ 16; 16 ] -> 3, [ 17; 17 ] -> 0, [ 18; 18 ] -> 0, [ 19; 19 ] -> 0, [ 20; 20 ] -> 32, [ 21; 21 ] -> 0, [ 22; 22 ] -> 0, [ 23; 23 ] -> 0, [ 24; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 849624057 { 0x32a43bf9 +1.28308022e230 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 741313896 { 0x2c2f8d68 +1.37150287e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 741313899 { 0x2c2f8d6b +1.37150323e217 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 209), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2583891307
=counter_example_end
=global nodece 51 num_edges_traversed 3
=global nodece 51 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 52
=global nodece 52 nodece z3v487.ce2052.num_edges_traversed1
=global nodece 52 nodece_path
=global nodece 52 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 52 nodece_cached_counterexample
=counter_example_begin z3v487.ce2052 7ba023b62c636e2e9990ca7c271c25c
=input.spec-%var-n-1
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> 0, [ 4; 4 ] -> 4, [ 5; 5 ] -> 0, [ 6; 6 ] -> 0, [ 7; 7 ] -> 0, [ 8; 8 ] -> 0, [ 9; 9 ] -> 0, [ 10; 10 ] -> 0, [ 11; 11 ] -> 1, [ 12; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
3 : unit : UNIT
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2300 : BV:32
6 : Lambda6332 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda6333 : BV:32
9 : 2100525784 { 0x7d337ad8 +1.40218639e123 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 3, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(2, 3, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(1, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : Indxform2302 : BV:32
7 : Lambda6336 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda6337 : BV:32
10 : 2100525784 { 0x7d337ad8 +1.40218639e123 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(5, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(5, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(4, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2299 : BV:32
4 : Lambda6330 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6331 : BV:32
7 : 1024104453 { 0x3d0a9805 +1.8276426e251 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : Indxform2304 : BV:32
7 : Lambda6340 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda6341 : BV:32
10 : 2100525784 { 0x7d337ad8 +1.40218639e123 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(5, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(5, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(4, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 11 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 12; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 131076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : Indxform2306 : BV:32
7 : Lambda6344 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda6345 : BV:32
10 : 2100525784 { 0x7d337ad8 +1.40218639e123 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(5, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(5, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(4, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 811924206 { 0x3064faee +1.78890776e225 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 3 ] -> 0, [ 4; 11 ] -> 23, [ 12; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 598705176 { 0x23af8418 +1.37121868e200 } : COUNT
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 598705176 { 0x23af8418 +1.37121868e200 } : COUNT
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 11 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 12; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 131076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 644848304 { 0x266f9ab0 +1.87190818e205 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1727022780 { 0x66f046bc +1.87715864e78 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1954315604 { 0x747c7d54 +1.97257471e105 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 644848304 { 0x266f9ab0 +1.87190818e205 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1954315604 { 0x747c7d54 +1.97257471e105 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%2%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 131075 { 0x20003 +1.1562535e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2829635941
=counter_example_end
=global nodece 52 num_edges_traversed 1
=global nodece 52 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 53
=global nodece 53 nodece z3v487.ce2119.num_edges_traversed1
=global nodece 53 nodece_path
=global nodece 53 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 53 nodece_cached_counterexample
=counter_example_begin z3v487.ce2119 9d94861023d83b8ac2be853d6d8baa4f
=input.spec-%var-n-1
1 : 2049 { 0x801 +1.24425e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 2049 { 0x801 +1.24425e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2382 : BV:32
4 : Lambda6544 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6545 : BV:32
7 : 629118891 { 0x257f97ab +1.99681603e203 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2049 { 0x801 +1.24425e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2381 : BV:32
3 : Lambda6542 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6543 : BV:32
6 : unit : UNIT
7 : 726077273 { 0x2b470f59 +1.55515587e215 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 872513576 { 0x34018028 +1.1172351e233 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3618853335
=counter_example_end
=global nodece 53 num_edges_traversed 1
=global nodece 53 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 54
=global nodece 54 nodece z3v487.ce2134.num_edges_traversed2
=global nodece 54 nodece_path
=global nodece 54 nodece_path.graph_edge_composition
(epsilon)
=global nodece 54 nodece_cached_counterexample
=counter_example_begin z3v487.ce2134 afe441e0131a2226bd487fd1ead42b77
=nextpc_const.1
1 : 236425725 { 0xe1791fd +1.18414270e157 } : BV:32
=input.spec-%var-n-1
1 : 2049 { 0x801 +1.24425e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 154 , m_adder -> 225), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2049 { 0x801 +1.24425e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2382 : BV:32
4 : Lambda6544 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6545 : BV:32
7 : 629118891 { 0x257f97ab +1.99681603e203 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2049 { 0x801 +1.24425e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 154 , m_adder -> 225), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 236425725 , 1000 , 8 ) -> 1342963620, () -> 1323471052, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2381 : BV:32
3 : Lambda6542 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6543 : BV:32
6 : unit : UNIT
7 : 726077273 { 0x2b470f59 +1.55515587e215 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 154 , m_adder -> 225), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1342963620 { 0x500bffa4 +1.9373903e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 154 , m_adder -> 225), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
904870031
=counter_example_end
=global nodece 54 num_edges_traversed 2
=global nodece 54 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 55
=global nodece 55 nodece z3.ce2180.num_edges_traversed1
=global nodece 55 nodece_path
=global nodece 55 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 55 nodece_cached_counterexample
=counter_example_begin z3.ce2180 d2bb2858ffe123f98de7cfd4d2de15c
=input.spec-%var-n-1
1 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2421 : BV:32
4 : Lambda6646 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6647 : BV:32
7 : 1895958360 { 0x71020758 +1.1584911e99 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2159950496 { 0x80be3aa0 -2135016800 -1.48616409e130 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2420 : BV:32
3 : Lambda6644 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6645 : BV:32
6 : unit : UNIT
7 : 850707639 { 0x32b4c4b7 +1.41225326e230 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2159950495 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2159950496; 2159950499 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2159950500; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 616326129 { 0x24bc63f1 +1.47179996e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2159950496 { 0x80be3aa0 -2135016800 -1.48616409e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2159950499 { 0x80be3aa3 -2135016797 -1.48616445e130 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3145354599
=counter_example_end
=global nodece 55 num_edges_traversed 1
=global nodece 55 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 56
=global nodece 56 nodece z3.ce2195.num_edges_traversed2
=global nodece 56 nodece_path
=global nodece 56 nodece_path.graph_edge_composition
(epsilon)
=global nodece 56 nodece_cached_counterexample
=counter_example_begin z3.ce2195 beb221ed44de3ac268a2acd4c48a1b
=nextpc_const.1
1 : 867344294 { 0x33b29fa6 +1.39549708e232 } : BV:32
=input.spec-%var-n-1
1 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 188 , m_adder -> 159), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2421 : BV:32
4 : Lambda6646 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6647 : BV:32
7 : 1895958360 { 0x71020758 +1.1584911e99 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2159950496 { 0x80be3aa0 -2135016800 -1.48616409e130 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 188 , m_adder -> 159), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 867344294 , 1000 , 8 ) -> 1159512318, () -> 1689404219, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2420 : BV:32
3 : Lambda6644 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6645 : BV:32
6 : unit : UNIT
7 : 850707639 { 0x32b4c4b7 +1.41225326e230 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2159950495 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2159950496; 2159950499 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2159950500; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 188 , m_adder -> 159), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1159512318 { 0x451cc0fe +1.22463965e11 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2159950496 { 0x80be3aa0 -2135016800 -1.48616409e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2159950499 { 0x80be3aa3 -2135016797 -1.48616445e130 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 188 , m_adder -> 159), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
367535647
=counter_example_end
=global nodece 56 num_edges_traversed 2
=global nodece 56 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 57
=global nodece 57 nodece z3.ce2237.num_edges_traversed1
=global nodece 57 nodece_path
=global nodece 57 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 57 nodece_cached_counterexample
=counter_example_begin z3.ce2237 cff5e3be5a668f54e8a6ee23dd1821c8
=nextpc_const.1
1 : 1025802227 { 0x3d247ff3 +1.28515470e251 } : BV:32
=input.spec-%var-n-1
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 103 , m_adder -> 124), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2509 : BV:32
4 : Lambda6896 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6897 : BV:32
7 : 640280351 { 0x2629e71f +1.32736575e205 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2984803460 { 0xb1e87c84 -1310163836 -1.81629991e228 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 103 , m_adder -> 124), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1025802227 , 1000 , 8 ) -> 442145956, () -> 1771905902, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2508 : BV:32
3 : Lambda6894 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6895 : BV:32
6 : unit : UNIT
7 : 410233208 { 0x1873a978 +1.90360927e177 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2984803459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2984803460; 2984803463 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2984803464; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 103 , m_adder -> 124), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 442145956 { 0x1a5a9ca4 +1.70790529e181 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2984803460 { 0xb1e87c84 -1310163836 -1.81629991e228 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2984803463 { 0xb1e87c87 -1310163833 -1.81630027e228 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 103 , m_adder -> 124), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2524611699
=counter_example_end
=global nodece 57 num_edges_traversed 1
=global nodece 57 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 58
=global nodece 58 nodece z3.ce2260.num_edges_traversed2
=global nodece 58 nodece_path
=global nodece 58 nodece_path.graph_edge_composition
(epsilon)
=global nodece 58 nodece_cached_counterexample
=counter_example_begin z3.ce2260 b7348445ef271b47870667855db67
=nextpc_const.1
1 : 1025802227 { 0x3d247ff3 +1.28515470e251 } : BV:32
=input.spec-%var-n-1
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 442145956; 442145956 ] -> 5, [ 442145957; 442145957 ] -> 0, [ 442145958; 442145958 ] -> 0, [ 442145959; 442145959 ] -> 0, [ 442145960; 442145960 ] -> 0, [ 442145961; 442145961 ] -> 0, [ 442145962; 442145962 ] -> 0, [ 442145963; 442145963 ] -> 0, { [ 0; 442145955 ], [ 442145964; 4294967295 ], } -> (RAC: m_multiplier -> 103 , m_adder -> 124), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2509 : BV:32
4 : Lambda6896 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6897 : BV:32
7 : 640280351 { 0x2629e71f +1.32736575e205 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2984803460 { 0xb1e87c84 -1310163836 -1.81629991e228 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 103 , m_adder -> 124), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1025802227 , 1000 , 8 ) -> 442145956, () -> 1771905902, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 5 { 0x5 +1.59e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2520 : BV:32
6 : Lambda6918 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda6919 : BV:32
9 : 410233208 { 0x1873a978 +1.90360927e177 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1383243391 { 0x52729e7f +1.89546191e37 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 662322448 { 0x277a3d10 +1.95498847e207 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 442145955 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 442145956; 442145963 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 442145964; 2984803459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2984803460; 2984803463 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2984803464; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 250461729 { 0xeedbe21 +1.85736477e158 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2024375649 { 0x78a98561 +1.32438290e114 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 685254176 { 0x28d82620 +1.68866348e210 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 442145956 { 0x1a5a9ca4 +1.70790529e181 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2984803460 { 0xb1e87c84 -1310163836 -1.81629991e228 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2984803463 { 0xb1e87c87 -1310163833 -1.81630027e228 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 103 , m_adder -> 124), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2692880190
=counter_example_end
=global nodece 58 num_edges_traversed 2
=global nodece 58 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 59
=global nodece 59 nodece z3.ce2322.num_edges_traversed1
=global nodece 59 nodece_path
=global nodece 59 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 59 nodece_cached_counterexample
=counter_example_begin z3.ce2322 bad51c30a34b3909b459a163c9d2692
=input.spec-%var-n-1
1 : 536870918 { 0x20000006 +1.71e193 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3270886080; 3270886080 ] -> 7, [ 3270886081; 3270886081 ] -> 0, [ 3270886082; 3270886082 ] -> 0, [ 3270886083; 3270886083 ] -> 0, [ 3270886084; 3270886084 ] -> 0, [ 3270886085; 3270886085 ] -> 0, [ 3270886086; 3270886086 ] -> 0, [ 3270886087; 3270886087 ] -> 0, { [ 0; 3270886079 ], [ 3270886088; 4294967295 ], } -> (RAC: m_multiplier -> 174 , m_adder -> 240), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 536870918 { 0x20000006 +1.71e193 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 7 { 0x7 +1.83e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform2601 : BV:32
4 : Lambda7134 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7135 : BV:32
7 : unit : UNIT
8 : 760522914 { 0x2d54a8a2 +1.66139626e219 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 7 { 0x7 +1.83e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2603 : BV:32
6 : Lambda7138 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7139 : BV:32
9 : 760522914 { 0x2d54a8a2 +1.66139626e219 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2596 : BV:32
4 : Lambda7124 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7125 : BV:32
7 : 982021554 { 0x3a8875b2 +1.6609177e246 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 7 { 0x7 +1.83e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2605 : BV:32
6 : Lambda7142 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7143 : BV:32
9 : 760522914 { 0x2d54a8a2 +1.66139626e219 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 3270886079 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3270886080; 3270886087 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3270886088; 4213944831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4213944832; 4213944835 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4213944836; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4213944832 { 0xfb2bb200 -81022464 -1.34136962e119 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 536870918 { 0x20000006 +1.71e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 7 { 0x7 +1.83e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2607 : BV:32
6 : Lambda7146 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7147 : BV:32
9 : 760522914 { 0x2d54a8a2 +1.66139626e219 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1904057854 { 0x717d9dfe +1.98138403e99 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 3270886080; 3270886087 ] -> 79, { [ 0; 3270886079 ], [ 3270886088; 4294967295 ], } -> (RAC: m_multiplier -> 174 , m_adder -> 240), ) : ARRAY[BV:32 -> BV:8]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 286749520 { 0x11177350 +1.18320655e163 } : COUNT
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 286749520 { 0x11177350 +1.18320655e163 } : COUNT
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3270886079 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3270886080; 3270886087 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3270886088; 4213944831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4213944832; 4213944835 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4213944836; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 2139649074 { 0x7f887432 +1.6604599e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1284682874 { 0x4c92b47a +1.14613270e26 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 2043778758 { 0x79d196c6 +1.63741374e116 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 3270886080 { 0xc2f5c2c0 -1024081216 -1.92000579e6 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 174 , m_adder -> 240), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 3270886080 { 0xc2f5c2c0 -1024081216 -1.92000579e6 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 536870918 { 0x20000006 +1.71e193 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 2139649074 { 0x7f887432 +1.6604599e128 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 2043778758 { 0x79d196c6 +1.63741374e116 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%2%d
1 : 3270886080 { 0xc2f5c2c0 -1024081216 -1.92000579e6 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 3270886080 { 0xc2f5c2c0 -1024081216 -1.92000579e6 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 3270886080 { 0xc2f5c2c0 -1024081216 -1.92000579e6 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 3270886084 { 0xc2f5c2c4 -1024081212 -1.92000627e6 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 3270886080 { 0xc2f5c2c0 -1024081216 -1.92000579e6 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 3270886084 { 0xc2f5c2c4 -1024081212 -1.92000627e6 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 3270886080 { 0xc2f5c2c0 -1024081216 -1.92000579e6 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4213944832 { 0xfb2bb200 -81022464 -1.34136962e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4213944835 { 0xfb2bb203 -81022461 -1.34136998e119 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1478306495
=counter_example_end
=global nodece 59 num_edges_traversed 1
=global nodece 59 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 60
=global nodece 60 nodece z3.ce2355.num_edges_traversed2
=global nodece 60 nodece_path
=global nodece 60 nodece_path.graph_edge_composition
(epsilon)
=global nodece 60 nodece_cached_counterexample
=counter_example_begin z3.ce2355 a3658cecbc977d64bdab6a6253581a76
=input.spec-%var-n-1
1 : 536870918 { 0x20000006 +1.71e193 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3270886080; 3270886080 ] -> 7, [ 3270886081; 3270886081 ] -> 0, [ 3270886082; 3270886082 ] -> 0, [ 3270886083; 3270886083 ] -> 0, [ 3270886084; 3270886084 ] -> 0, [ 3270886085; 3270886085 ] -> 0, [ 3270886086; 3270886086 ] -> 0, [ 3270886087; 3270886087 ] -> 0, { [ 0; 3270886079 ], [ 3270886088; 4294967295 ], } -> (RAC: m_multiplier -> 174 , m_adder -> 240), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 536870918 { 0x20000006 +1.71e193 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2596 : BV:32
4 : Lambda7124 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7125 : BV:32
7 : 982021554 { 0x3a8875b2 +1.6609177e246 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4213944832 { 0xfb2bb200 -81022464 -1.34136962e119 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 536870918 { 0x20000006 +1.71e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 7 { 0x7 +1.83e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2607 : BV:32
6 : Lambda7146 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7147 : BV:32
9 : 760522914 { 0x2d54a8a2 +1.66139626e219 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1904057854 { 0x717d9dfe +1.98138403e99 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 286749520 { 0x11177350 +1.18320655e163 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3270886079 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3270886080; 3270886087 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3270886088; 4213944831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4213944832; 4213944835 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4213944836; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 2139649074 { 0x7f887432 +1.6604599e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1284682874 { 0x4c92b47a +1.14613270e26 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 2043778758 { 0x79d196c6 +1.63741374e116 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 3270886080 { 0xc2f5c2c0 -1024081216 -1.92000579e6 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4213944832 { 0xfb2bb200 -81022464 -1.34136962e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4213944835 { 0xfb2bb203 -81022461 -1.34136998e119 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1478306495
=counter_example_end
=global nodece 60 num_edges_traversed 2
=global nodece 60 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 61
=global nodece 61 nodece z3.ce2359.num_edges_traversed3
=global nodece 61 nodece_path
=global nodece 61 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 61 nodece_cached_counterexample
=counter_example_begin z3.ce2359 e8bf7d21f4a6143ead362549efeb27
=nextpc_const.1
1 : 1656331850 { 0x62b99e4a +1.45014309e70 } : BV:32
=input.spec-%var-n-1
1 : 536870918 { 0x20000006 +1.71e193 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3270886080; 3270886080 ] -> 7, [ 3270886081; 3270886081 ] -> 0, [ 3270886082; 3270886082 ] -> 0, [ 3270886083; 3270886083 ] -> 0, [ 3270886084; 3270886084 ] -> 0, [ 3270886085; 3270886085 ] -> 0, [ 3270886086; 3270886086 ] -> 0, [ 3270886087; 3270886087 ] -> 0, { [ 0; 3270886079 ], [ 3270886088; 4294967295 ], } -> (RAC: m_multiplier -> 174 , m_adder -> 240), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 536870918 { 0x20000006 +1.71e193 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2596 : BV:32
4 : Lambda7124 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7125 : BV:32
7 : 982021554 { 0x3a8875b2 +1.6609177e246 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4213944832 { 0xfb2bb200 -81022464 -1.34136962e119 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 536870918 { 0x20000006 +1.71e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 174 , m_adder -> 240), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1656331850 , 1000 , 8 ) -> 165979530, () -> 1519611531, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 7 { 0x7 +1.83e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2607 : BV:32
6 : Lambda7146 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7147 : BV:32
9 : 760522914 { 0x2d54a8a2 +1.66139626e219 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1904057854 { 0x717d9dfe +1.98138403e99 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 286749520 { 0x11177350 +1.18320655e163 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3270886079 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3270886080; 3270886087 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3270886088; 4213944831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4213944832; 4213944835 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4213944836; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 2139649074 { 0x7f887432 +1.6604599e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1284682874 { 0x4c92b47a +1.14613270e26 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 2043778758 { 0x79d196c6 +1.63741374e116 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 3270886080 { 0xc2f5c2c0 -1024081216 -1.92000579e6 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 3270886080; 3270886080 ] -> 7, [ 3270886081; 3270886081 ] -> 0, [ 3270886082; 3270886082 ] -> 0, [ 3270886083; 3270886083 ] -> 0, [ 3270886084; 3270886084 ] -> 0, [ 3270886085; 3270886085 ] -> 0, [ 3270886086; 3270886086 ] -> 0, [ 3270886087; 3270886087 ] -> 0, { [ 0; 3270886079 ], [ 3270886088; 4294967295 ], } -> (RAC: m_multiplier -> 174 , m_adder -> 240), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 165979530 { 0x9e4a58a +1.78630185e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4213944832 { 0xfb2bb200 -81022464 -1.34136962e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4213944835 { 0xfb2bb203 -81022461 -1.34136998e119 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 174 , m_adder -> 240), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2644263823
=counter_example_end
=global nodece 61 num_edges_traversed 3
=global nodece 61 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 62
=global nodece 62 nodece z3.ce2405.num_edges_traversed1
=global nodece 62 nodece_path
=global nodece 62 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 62 nodece_cached_counterexample
=counter_example_begin z3.ce2405 b7f9db2f61bece9e2ba7e68ef41ab3a9
=input.spec-%var-n-1
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 2009595904; 2009595904 ] -> 8, [ 2009595905; 2009595905 ] -> 0, [ 2009595906; 2009595906 ] -> 0, [ 2009595907; 2009595907 ] -> 0, [ 2009595908; 2009595908 ] -> 0, [ 2009595909; 2009595909 ] -> 0, [ 2009595910; 2009595910 ] -> 0, [ 2009595911; 2009595911 ] -> 0, { [ 0; 2009595903 ], [ 2009595912; 4294967295 ], } -> (RAC: m_multiplier -> 229 , m_adder -> 172), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform2647 : BV:32
4 : Lambda7234 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7235 : BV:32
7 : unit : UNIT
8 : 1724139498 { 0x66c447ea +1.53344464e78 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2649 : BV:32
6 : Lambda7238 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7239 : BV:32
9 : 1724139498 { 0x66c447ea +1.53344464e78 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2642 : BV:32
4 : Lambda7224 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7225 : BV:32
7 : 782541934 { 0x2ea4a46e +1.28626799e222 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2651 : BV:32
6 : Lambda7242 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7243 : BV:32
9 : 1724139498 { 0x66c447ea +1.53344464e78 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 2009595903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2009595904; 2009595911 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2009595912; 2587524115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2587524116; 2587524119 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2587524120; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2587524116 { 0x9a3a7c14 -1707443180 -1.45691156e181 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2653 : BV:32
6 : Lambda7246 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7247 : BV:32
9 : 1724139498 { 0x66c447ea +1.53344464e78 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1927267594 { 0x72dfc50a +1.74820065e102 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 2009595904; 2009595911 ] -> 216, { [ 0; 2009595903 ], [ 2009595912; 4294967295 ], } -> (RAC: m_multiplier -> 229 , m_adder -> 172), ) : ARRAY[BV:32 -> BV:8]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 2029645785 { 0x78f9efd9 +1.95263206e114 } : COUNT
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2029645785 { 0x78f9efd9 +1.95263206e114 } : COUNT
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2009595903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2009595904; 2009595911 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2009595912; 2587524115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2587524116; 2587524119 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2587524120; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 489060944 { 0x1d267a50 +1.30060768e187 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1041767654 { 0x3e181ce6 +1.18838191e253 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1937932736 { 0x738281c0 +1.1958465e104 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 2009595904 { 0x77c80000 +1.56250000e112 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 229 , m_adder -> 172), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2009595904 { 0x77c80000 +1.56250000e112 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 489060944 { 0x1d267a50 +1.30060768e187 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1937932736 { 0x738281c0 +1.1958465e104 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%2%d
1 : 2009595904 { 0x77c80000 +1.56250000e112 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 2009595904 { 0x77c80000 +1.56250000e112 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 2009595904 { 0x77c80000 +1.56250000e112 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 2009595908 { 0x77c80004 +1.56250047e112 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2009595904 { 0x77c80000 +1.56250000e112 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 2009595908 { 0x77c80004 +1.56250047e112 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 2009595904 { 0x77c80000 +1.56250000e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2587524116 { 0x9a3a7c14 -1707443180 -1.45691156e181 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2587524119 { 0x9a3a7c17 -1707443177 -1.45691192e181 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
443454583
=counter_example_end
=global nodece 62 num_edges_traversed 1
=global nodece 62 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 63
=global nodece 63 nodece z3v487.ce2483.num_edges_traversed1
=global nodece 63 nodece_path
=global nodece 63 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 63 nodece_cached_counterexample
=counter_example_begin z3v487.ce2483 20a544f267b14629fdf426ecd8bc
=input.spec-%var-n-1
1 : 308833284 { 0x12686c04 +1.81579637e165 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 308833284 { 0x12686c04 +1.81579637e165 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2688 : BV:32
4 : Lambda7340 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7341 : BV:32
7 : 1251521738 { 0x4a98b4ca +1.19301724e22 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 308833284 { 0x12686c04 +1.81579637e165 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 80794633 { 0x4d0d409 +1.63147079e138 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2687 : BV:32
3 : Lambda7338 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda7339 : BV:32
6 : unit : UNIT
7 : 1139839815 { 0x43f09347 +1.87949454e8 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 80794633 { 0x4d0d409 +1.63147079e138 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 721420288 { 0x2b000000 +1.0e215 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3318024881
=counter_example_end
=global nodece 63 num_edges_traversed 1
=global nodece 63 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 64
=global nodece 64 nodece z3v487.ce2498.num_edges_traversed2
=global nodece 64 nodece_path
=global nodece 64 nodece_path.graph_edge_composition
(epsilon)
=global nodece 64 nodece_cached_counterexample
=counter_example_begin z3v487.ce2498 3173519ed91ac0b6d94750b752d4b36
=nextpc_const.1
1 : 349540474 { 0x14d5907a +1.66847157e170 } : BV:32
=input.spec-%var-n-1
1 : 308833284 { 0x12686c04 +1.81579637e165 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 214 , m_adder -> 155), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 308833284 { 0x12686c04 +1.81579637e165 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2688 : BV:32
4 : Lambda7340 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7341 : BV:32
7 : 1251521738 { 0x4a98b4ca +1.19301724e22 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 308833284 { 0x12686c04 +1.81579637e165 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 80794633 { 0x4d0d409 +1.63147079e138 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 214 , m_adder -> 155), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 349540474 , 1000 , 8 ) -> 1694704585, () -> 1198032306, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2687 : BV:32
3 : Lambda7338 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda7339 : BV:32
6 : unit : UNIT
7 : 1139839815 { 0x43f09347 +1.87949454e8 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 80794633 { 0x4d0d409 +1.63147079e138 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 214 , m_adder -> 155), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1694704585 { 0x650323c9 +1.2452957e75 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 214 , m_adder -> 155), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4173634729
=counter_example_end
=global nodece 64 num_edges_traversed 2
=global nodece 64 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 65
=global nodece 65 nodece z3.ce2526.num_edges_traversed1
=global nodece 65 nodece_path
=global nodece 65 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 65 nodece_cached_counterexample
=counter_example_begin z3.ce2526 668ef3015e551da89d8d379575157e3
=nextpc_const.1
1 : 1906756643 { 0x71a6cc23 +1.30310475e100 } : BV:32
=input.spec-%var-n-1
1 : 295477769 { 0x119ca209 +1.22369492e164 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 44 , m_adder -> 144), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 295477769 { 0x119ca209 +1.22369492e164 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2720 : BV:32
4 : Lambda7428 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7429 : BV:32
7 : 386251441 { 0x1705bab1 +1.4475986e175 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3228322944 { 0xc06c4c80 -1066644352 -1.84608459e1 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 295477769 { 0x119ca209 +1.22369492e164 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 79250468 { 0x4b94424 +1.44739198e138 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 44 , m_adder -> 144), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1906756643 , 1000 , 8 ) -> 2085622539, () -> 792186626, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2719 : BV:32
3 : Lambda7426 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda7427 : BV:32
6 : unit : UNIT
7 : 2035019341 { 0x794bee4d +1.59320986e115 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3228322943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3228322944; 3228322947 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3228322948; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 79250468 { 0x4b94424 +1.44739198e138 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 44 , m_adder -> 144), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2085622539 { 0x7c50130b +1.62558114e121 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3228322944 { 0xc06c4c80 -1066644352 -1.84608459e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3228322947 { 0xc06c4c83 -1066644349 -1.84608495e1 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 44 , m_adder -> 144), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1798645520
=counter_example_end
=global nodece 65 num_edges_traversed 1
=global nodece 65 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 66
=global nodece 66 nodece z3v487.ce2562.num_edges_traversed1
=global nodece 66 nodece_path
=global nodece 66 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 66 nodece_cached_counterexample
=counter_example_begin z3v487.ce2562 c98544c6a2e7cec3f9ed5b4054174d6a
=input.spec-%var-n-1
1 : 3212836864 { 0xbf800000 -1082130432 -1.0e0 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 536870912; 536870912 ] -> 255, [ 536870913; 536870913 ] -> 255, [ 536870914; 536870914 ] -> 255, [ 536870915; 536870915 ] -> 127, [ 536870916; 536870916 ] -> 0, [ 536870917; 536870917 ] -> 0, [ 536870918; 536870918 ] -> 0, [ 536870919; 536870919 ] -> 0, { [ 0; 536870911 ], [ 536870920; 4294967295 ], } -> (RAC: m_multiplier -> 91 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 3212836864 { 0xbf800000 -1082130432 -1.0e0 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform2745 : BV:32
4 : Lambda7483 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7484 : BV:32
7 : unit : UNIT
8 : 548174668 { 0x20ac7b4c +1.34751272e194 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2747 : BV:32
6 : Lambda7487 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7488 : BV:32
9 : 548174668 { 0x20ac7b4c +1.34751272e194 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2744 : BV:32
4 : Lambda7481 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7482 : BV:32
7 : 1048980229 { 0x3e862b05 +1.4818785e254 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2749 : BV:32
6 : Lambda7491 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7492 : BV:32
9 : 548174668 { 0x20ac7b4c +1.34751272e194 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536870912; 536870919 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 536870920; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 3212836864 { 0xbf800000 -1082130432 -1.0e0 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2751 : BV:32
6 : Lambda7495 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7496 : BV:32
9 : 548174668 { 0x20ac7b4c +1.34751272e194 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 888621300 { 0x34f748f4 +1.93191385e234 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 536870912; 536870919 ] -> 229, { [ 0; 536870911 ], [ 536870920; 4294967295 ], } -> (RAC: m_multiplier -> 91 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 734417382 { 0x2bc651e6 +1.54937434e216 } : COUNT
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 734417382 { 0x2bc651e6 +1.54937434e216 } : COUNT
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536870912; 536870919 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 536870920; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1130834233 { 0x43672939 +1.80594551e7 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1358475744 { 0x50f8b1e0 +1.94292831e34 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1423171277 { 0x54d3decd +1.65523684e42 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 91 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 3212836864 { 0xbf800000 -1082130432 -1.0e0 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1130834233 { 0x43672939 +1.80594551e7 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1423171277 { 0x54d3decd +1.65523684e42 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%2%d
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 536870916 { 0x20000004 +1.47e193 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 536870916 { 0x20000004 +1.47e193 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3783365622
=counter_example_end
=global nodece 66 num_edges_traversed 1
=global nodece 66 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 67
=global nodece 67 nodece z3v487.ce2594.num_edges_traversed2
=global nodece 67 nodece_path
=global nodece 67 nodece_path.graph_edge_composition
(epsilon)
=global nodece 67 nodece_cached_counterexample
=counter_example_begin z3v487.ce2594 83bbd33b587f784289750fd264c375
=input.spec-%var-n-1
1 : 3212836864 { 0xbf800000 -1082130432 -1.0e0 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 536870912; 536870912 ] -> 255, [ 536870913; 536870913 ] -> 255, [ 536870914; 536870914 ] -> 255, [ 536870915; 536870915 ] -> 127, [ 536870916; 536870916 ] -> 0, [ 536870917; 536870917 ] -> 0, [ 536870918; 536870918 ] -> 0, [ 536870919; 536870919 ] -> 0, { [ 0; 536870911 ], [ 536870920; 4294967295 ], } -> (RAC: m_multiplier -> 91 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 3212836864 { 0xbf800000 -1082130432 -1.0e0 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2744 : BV:32
4 : Lambda7481 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7482 : BV:32
7 : 1048980229 { 0x3e862b05 +1.4818785e254 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 3212836864 { 0xbf800000 -1082130432 -1.0e0 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2751 : BV:32
6 : Lambda7495 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7496 : BV:32
9 : 548174668 { 0x20ac7b4c +1.34751272e194 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 888621300 { 0x34f748f4 +1.93191385e234 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 734417382 { 0x2bc651e6 +1.54937434e216 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536870912; 536870919 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 536870920; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1130834233 { 0x43672939 +1.80594551e7 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1358475744 { 0x50f8b1e0 +1.94292831e34 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1423171277 { 0x54d3decd +1.65523684e42 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3783365622
=counter_example_end
=global nodece 67 num_edges_traversed 2
=global nodece 67 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 68
=global nodece 68 nodece z3v487.ce2598.num_edges_traversed3
=global nodece 68 nodece_path
=global nodece 68 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 68 nodece_cached_counterexample
=counter_example_begin z3v487.ce2598 4822ef8e462284fecc9fc774f7a7a5
=nextpc_const.1
1 : 1482342248 { 0x585abf68 +1.70896625e49 } : BV:32
=input.spec-%var-n-1
1 : 3212836864 { 0xbf800000 -1082130432 -1.0e0 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 536870912; 536870912 ] -> 255, [ 536870913; 536870913 ] -> 255, [ 536870914; 536870914 ] -> 255, [ 536870915; 536870915 ] -> 127, [ 536870916; 536870916 ] -> 0, [ 536870917; 536870917 ] -> 0, [ 536870918; 536870918 ] -> 0, [ 536870919; 536870919 ] -> 0, { [ 0; 536870911 ], [ 536870920; 4294967295 ], } -> (RAC: m_multiplier -> 91 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 3212836864 { 0xbf800000 -1082130432 -1.0e0 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2744 : BV:32
4 : Lambda7481 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7482 : BV:32
7 : 1048980229 { 0x3e862b05 +1.4818785e254 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 3212836864 { 0xbf800000 -1082130432 -1.0e0 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 91 , m_adder -> 42), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1482342248 , 1000 , 8 ) -> 574165785, () -> 1487505560, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2751 : BV:32
6 : Lambda7495 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7496 : BV:32
9 : 548174668 { 0x20ac7b4c +1.34751272e194 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 888621300 { 0x34f748f4 +1.93191385e234 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 734417382 { 0x2bc651e6 +1.54937434e216 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536870912; 536870919 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 536870920; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1130834233 { 0x43672939 +1.80594551e7 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1358475744 { 0x50f8b1e0 +1.94292831e34 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1423171277 { 0x54d3decd +1.65523684e42 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 536870912; 536870912 ] -> 255, [ 536870913; 536870913 ] -> 255, [ 536870914; 536870914 ] -> 255, [ 536870915; 536870915 ] -> 127, [ 536870916; 536870916 ] -> 0, [ 536870917; 536870917 ] -> 0, [ 536870918; 536870918 ] -> 0, [ 536870919; 536870919 ] -> 0, { [ 0; 536870911 ], [ 536870920; 4294967295 ], } -> (RAC: m_multiplier -> 91 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 574165785 { 0x22391319 +1.44589531e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 91 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
772583430
=counter_example_end
=global nodece 68 num_edges_traversed 3
=global nodece 68 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 69
=global nodece 69 nodece z3.ce2622.num_edges_traversed1
=global nodece 69 nodece_path
=global nodece 69 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 69 nodece_cached_counterexample
=counter_example_begin z3.ce2622 ff5d3fca8ce72419425e84e9bb25a024
=input.spec-%var-n-1
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 4294967256; 4294967256 ] -> 254, [ 4294967257; 4294967257 ] -> 255, [ 4294967258; 4294967258 ] -> 255, [ 4294967259; 4294967259 ] -> 255, [ 4294967260; 4294967260 ] -> 0, [ 4294967261; 4294967261 ] -> 0, [ 4294967262; 4294967262 ] -> 0, [ 4294967263; 4294967263 ] -> 0, { [ 0; 4294967255 ], [ 4294967264; 4294967295 ], } -> (RAC: m_multiplier -> 176 , m_adder -> 50), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform2780 : BV:32
4 : Lambda7560 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7561 : BV:32
7 : unit : UNIT
8 : 308344263 { 0x1260f5c7 +1.75750052e165 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2782 : BV:32
6 : Lambda7564 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7565 : BV:32
9 : 308344263 { 0x1260f5c7 +1.75750052e165 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-0.L3%7%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2779 : BV:32
4 : Lambda7558 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7559 : BV:32
7 : 468504520 { 0x1beccfc8 +1.85009098e184 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2784 : BV:32
6 : Lambda7568 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7569 : BV:32
9 : 308344263 { 0x1260f5c7 +1.75750052e165 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 1977221103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1977221104; 1977221107 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1977221108; 4294967255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967256; 4294967263 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4294967264; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1977221104 { 0x75d9fff0 +1.70312309e108 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform2786 : BV:32
6 : Lambda7572 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda7573 : BV:32
9 : 308344263 { 0x1260f5c7 +1.75750052e165 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1329824604 { 0x4f43835c +1.52744626e31 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 4294967256; 4294967263 ] -> 193, { [ 0; 4294967255 ], [ 4294967264; 4294967295 ], } -> (RAC: m_multiplier -> 176 , m_adder -> 50), ) : ARRAY[BV:32 -> BV:8]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 568193218 { 0x21ddf0c2 +1.73390984e196 } : COUNT
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 568193218 { 0x21ddf0c2 +1.73390984e196 } : COUNT
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1977221103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1977221104; 1977221107 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1977221108; 4294967255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967256; 4294967263 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4294967264; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1313193300 { 0x4e45bd54 +1.54484033e29 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 24721708 { 0x179392c +1.94705724e131 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 671561552 { 0x28073750 +1.5637550e209 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4294967256 { 0xffffffd8 -40 -1.99999523e128 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 176 , m_adder -> 50), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 4294967256 { 0xffffffd8 -40 -1.99999523e128 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1313193300 { 0x4e45bd54 +1.54484033e29 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 671561552 { 0x28073750 +1.5637550e209 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%call.Lfor.body%2%d
1 : 4294967256 { 0xffffffd8 -40 -1.99999523e128 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 4294967256 { 0xffffffd8 -40 -1.99999523e128 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 4294967256 { 0xffffffd8 -40 -1.99999523e128 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 4294967260 { 0xffffffdc -36 -1.99999570e128 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4294967256 { 0xffffffd8 -40 -1.99999523e128 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 4294967260 { 0xffffffdc -36 -1.99999570e128 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 4294967256 { 0xffffffd8 -40 -1.99999523e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1977221104 { 0x75d9fff0 +1.70312309e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1977221107 { 0x75d9fff3 +1.70312345e108 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
227163363
=counter_example_end
=global nodece 69 num_edges_traversed 1
=global nodece 69 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 70
=global nodece 70 nodece z3.ce2677.num_edges_traversed1
=global nodece 70 nodece_path
=global nodece 70 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 70 nodece_cached_counterexample
=counter_example_begin z3.ce2677 6bedc6f8bdbd41b6376989e65d51dbc
=input.spec-%var-n-1
1 : 2186576597 { 0x825482d5 -2108390699 -1.66024267e133 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 2186576597 { 0x825482d5 -2108390699 -1.66024267e133 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2814 : BV:32
4 : Lambda7652 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7653 : BV:32
7 : 1355277235 { 0x50c7e3b3 +1.56163632e34 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1853743896 { 0x6e7de318 +1.98349285e93 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2186576597 { 0x825482d5 -2108390699 -1.66024267e133 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2159051690 { 0x80b083aa -2135915606 -1.37901806e130 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2813 : BV:32
3 : Lambda7650 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda7651 : BV:32
6 : unit : UNIT
7 : 127843381 { 0x79ebc35 +1.24011862e144 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1853743895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1853743896; 1853743899 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1853743900; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2159051690 { 0x80b083aa -2135915606 -1.37901806e130 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 3758265304 { 0xe00293d8 -536701992 -1.2013683e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1853743896 { 0x6e7de318 +1.98349285e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1853743899 { 0x6e7de31b +1.98349320e93 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1932795970
=counter_example_end
=global nodece 70 num_edges_traversed 1
=global nodece 70 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 71
=global nodece 71 nodece z3.ce2692.num_edges_traversed2
=global nodece 71 nodece_path
=global nodece 71 nodece_path.graph_edge_composition
(epsilon)
=global nodece 71 nodece_cached_counterexample
=counter_example_begin z3.ce2692 4d8e42abfb23f48d184db48db7de7152
=nextpc_const.1
1 : 325388720 { 0x136509b0 +1.78935813e167 } : BV:32
=input.spec-%var-n-1
1 : 2186576597 { 0x825482d5 -2108390699 -1.66024267e133 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 63 , m_adder -> 201), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 2186576597 { 0x825482d5 -2108390699 -1.66024267e133 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform2814 : BV:32
4 : Lambda7652 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda7653 : BV:32
7 : 1355277235 { 0x50c7e3b3 +1.56163632e34 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1853743896 { 0x6e7de318 +1.98349285e93 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2186576597 { 0x825482d5 -2108390699 -1.66024267e133 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2159051690 { 0x80b083aa -2135915606 -1.37901806e130 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 63 , m_adder -> 201), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 325388720 , 1000 , 8 ) -> 1045322668, () -> 535016268, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2813 : BV:32
3 : Lambda7650 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda7651 : BV:32
6 : unit : UNIT
7 : 127843381 { 0x79ebc35 +1.24011862e144 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1853743895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1853743896; 1853743899 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1853743900; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2159051690 { 0x80b083aa -2135915606 -1.37901806e130 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 63 , m_adder -> 201), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1045322668 { 0x3e4e5bac +1.61217260e253 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1853743896 { 0x6e7de318 +1.98349285e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1853743899 { 0x6e7de31b +1.98349320e93 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 63 , m_adder -> 201), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
475745370
=counter_example_end
=global nodece 71 num_edges_traversed 2
=global nodece 71 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-n-1 : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 17
1 : spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=inductive-invariants point_set point_expr 18
1 : spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 21
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 22
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=inductive-invariants point_set point_expr 23
1 : spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 24
1 : spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 25
1 : spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
3 : input.spec-%var-i-0.L3%6%bbentry : BV:32
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : Indxform0 : BV:32
6 : Lambda1 : BV:32
7 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
8 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
9 : memlabel-top : MEMLABEL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvadd(6, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(7, 8, 9, 11, 12, 13) : BV:32
15 : lambda(6, 14) : FUNCTION[BV:32 -> BV:32]
16 : Lambda0 : BV:32
17 : 0 { 0x0 +1.0e129 } : BV:32
18 : eq(17, 16) : BOOL
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : ite(18, 17, 19) : BV:32
21 : unit : UNIT
22 : select(7, 8, 9, 16, 12, 13) : BV:32
23 : prod(22, 5) : PROD[BV:32,BV:32]
24 : sum(20, 21, 23) : SUM[UNIT,PROD[BV:32,BV:32]]
25 : lambda(16, 24) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
26 : ind(4, 5, 15, 25) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : prod_init(2, 3, 26) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : eq(1, 27) : BOOL
=inductive-invariants point_set point_expr 26
1 : spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 27
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 28
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 29
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 30
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=inductive-invariants point_set point_expr 31
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 32
1 : spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 33
1 : spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 34
1 : spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
3 : input.spec-%var-i-0.L3%6%bbentry : BV:32
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : Indxform0 : BV:32
6 : Lambda1 : BV:32
7 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
8 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
9 : memlabel-top : MEMLABEL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvadd(6, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(7, 8, 9, 11, 12, 13) : BV:32
15 : lambda(6, 14) : FUNCTION[BV:32 -> BV:32]
16 : Lambda0 : BV:32
17 : 0 { 0x0 +1.0e129 } : BV:32
18 : eq(17, 16) : BOOL
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : ite(18, 17, 19) : BV:32
21 : unit : UNIT
22 : select(7, 8, 9, 16, 12, 13) : BV:32
23 : prod(22, 5) : PROD[BV:32,BV:32]
24 : sum(20, 21, 23) : SUM[UNIT,PROD[BV:32,BV:32]]
25 : lambda(16, 24) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
26 : ind(4, 5, 15, 25) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : prod_init(2, 3, 26) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : eq(1, 27) : BOOL
=inductive-invariants point_set point_expr 35
1 : spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 36
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 37
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 38
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 39
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 40
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 41
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 42
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 43
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3v487.ce5
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5 expr point z3v487.ce5 done
=inductive-invariants point_set point z3.ce6
=inductive-invariants point_set point z3.ce6 expr point z3.ce6
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6 expr point z3.ce6 done
=inductive-invariants point_set point z3v487.ce30
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 2 for input.spec-%var-n-1
16843009
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 4 for input.spec-%var-n-0.L3%6%bbentry
16843009
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16843009
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 done
=inductive-invariants point_set point z3.ce29
=inductive-invariants point_set point z3.ce29 expr point z3.ce29
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 2 for input.spec-%var-n-1
16843009
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 4 for input.spec-%var-n-0.L3%6%bbentry
16843009
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16843009
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 done
=inductive-invariants point_set point z3.ce54
=inductive-invariants point_set point z3.ce54 expr point z3.ce54
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 done
=inductive-invariants point_set point z3v487.ce53
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce53 expr point z3v487.ce53 done
=inductive-invariants point_set point z3v487.ce78
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 done
=inductive-invariants point_set point z3.ce77
=inductive-invariants point_set point z3.ce77 expr point z3.ce77
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 done
=inductive-invariants point_set point z3.ce158
=inductive-invariants point_set point z3.ce158 expr point z3.ce158
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce158 expr point z3.ce158 done
=inductive-invariants point_set point z3v487.ce157
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 4 for input.spec-%var-n-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 done
=inductive-invariants point_set point z3.ce718
=inductive-invariants point_set point z3.ce718 expr point z3.ce718
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce718 expr point z3.ce718 done
=inductive-invariants point_set point z3v487.ce722
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce722 expr point z3v487.ce722 done
=inductive-invariants point_set point z3v487.ce762
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 2 for input.spec-%var-n-1
1073741824
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 4 for input.spec-%var-n-0.L3%6%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce762 expr point z3v487.ce762 done
=inductive-invariants point_set point z3.ce761
=inductive-invariants point_set point z3.ce761 expr point z3.ce761
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 2 for input.spec-%var-n-1
32
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 4 for input.spec-%var-n-0.L3%6%bbentry
32
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
32
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce761 expr point z3.ce761 done
=inductive-invariants point_set point z3v487.ce790
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 2 for input.spec-%var-n-1
2
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 4 for input.spec-%var-n-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce790 expr point z3v487.ce790 done
=inductive-invariants point_set point z3.ce789
=inductive-invariants point_set point z3.ce789 expr point z3.ce789
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 2 for input.spec-%var-n-1
4
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 4 for input.spec-%var-n-0.L3%6%bbentry
4
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce789 expr point z3.ce789 done
=inductive-invariants point_set point z3.ce818
=inductive-invariants point_set point z3.ce818 expr point z3.ce818
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce818 expr point z3.ce818 done
=inductive-invariants point_set point z3v487.ce817
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce817 expr point z3v487.ce817 done
=inductive-invariants point_set point z3.ce972
=inductive-invariants point_set point z3.ce972 expr point z3.ce972
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce972 expr point z3.ce972 done
=inductive-invariants point_set point z3v487.ce971
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 done
=inductive-invariants point_set point z3v487.ce1003
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1408076883
=inductive-invariants point_set point z3v487.ce1003 expr point z3v487.ce1003 done
=inductive-invariants point_set point z3.ce1006
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 2 for input.spec-%var-n-1
8388608
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 4 for input.spec-%var-n-0.L3%6%bbentry
8388608
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8388608
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
589752548
=inductive-invariants point_set point z3.ce1006 expr point z3.ce1006 done
=inductive-invariants point_set point z3.ce1024
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1305799351
=inductive-invariants point_set point z3.ce1024 expr point z3.ce1024 done
=inductive-invariants point_set point z3v487.ce1027
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
67269607
=inductive-invariants point_set point z3v487.ce1027 expr point z3v487.ce1027 done
=inductive-invariants point_set point z3.ce1030
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 2 for input.spec-%var-n-1
16843009
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 4 for input.spec-%var-n-0.L3%6%bbentry
16843009
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16843009
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1010658370
=inductive-invariants point_set point z3.ce1030 expr point z3.ce1030 done
=inductive-invariants point_set point z3.ce1250
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 2 for input.spec-%var-n-1
2
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 4 for input.spec-%var-n-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1883870503
=inductive-invariants point_set point z3.ce1250 expr point z3.ce1250 done
=inductive-invariants point_set point z3v487.ce1249
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 2 for input.spec-%var-n-1
1
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 4 for input.spec-%var-n-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1700250217
=inductive-invariants point_set point z3v487.ce1249 expr point z3v487.ce1249 done
=inductive-invariants point_set point z3.ce1409
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 2 for input.spec-%var-n-1
4194304
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 4 for input.spec-%var-n-0.L3%6%bbentry
4194304
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4194304
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
906058824
=inductive-invariants point_set point z3.ce1409 expr point z3.ce1409 done
=inductive-invariants point_set point z3v487.ce1408
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 3 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 4 for input.spec-%var-n-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1445648251
=inductive-invariants point_set point z3v487.ce1408 expr point z3v487.ce1408 done
=inductive-invariants point_set point z3.ce1463
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 2 for input.spec-%var-n-1
1073741824
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 3 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 4 for input.spec-%var-n-0.L3%6%bbentry
1073741824
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4294967164
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1463 expr point z3.ce1463 done
=inductive-invariants point_set point z3v487.ce1493
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 2 for input.spec-%var-n-1
2
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 3 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 4 for input.spec-%var-n-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
774094796
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1493 expr point z3v487.ce1493 done
=inductive-invariants point_set point z3v487.ce1550
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 2 for input.spec-%var-n-1
2
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 3 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 4 for input.spec-%var-n-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
774094796
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
774094796
=inductive-invariants point_set point z3v487.ce1550 expr point z3v487.ce1550 done
=inductive-invariants point_set point z3.ce1580
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 2 for input.spec-%var-n-1
8388608
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 3 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 4 for input.spec-%var-n-0.L3%6%bbentry
8388608
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
589752548
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8388608
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1580 expr point z3.ce1580 done
=inductive-invariants point_set point z3.ce1625
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 2 for input.spec-%var-n-1
1073741824
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 3 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 4 for input.spec-%var-n-0.L3%6%bbentry
1073741824
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4294967164
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
562292394
=inductive-invariants point_set point z3.ce1625 expr point z3.ce1625 done
=inductive-invariants point_set point z3v487.ce1828
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 2 for input.spec-%var-n-1
1024
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 3 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 4 for input.spec-%var-n-0.L3%6%bbentry
1024
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
12
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1024
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1828 expr point z3v487.ce1828 done
=inductive-invariants point_set point z3.ce1827
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 2 for input.spec-%var-n-1
8
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 3 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 4 for input.spec-%var-n-0.L3%6%bbentry
8
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4159435916
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1827 expr point z3.ce1827 done
=inductive-invariants point_set point z3.ce1855
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 2 for input.spec-%var-n-1
8
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 3 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 4 for input.spec-%var-n-0.L3%6%bbentry
8
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
2058687692
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1855 expr point z3.ce1855 done
=inductive-invariants point_set point z3.ce1882
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 2 for input.spec-%var-n-1
8
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 3 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 4 for input.spec-%var-n-0.L3%6%bbentry
8
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
2058687692
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
2058687692
=inductive-invariants point_set point z3.ce1882 expr point z3.ce1882 done
=inductive-invariants point_set point z3v487.ce1968
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 2 for input.spec-%var-n-1
4097
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 3 for input.spec-%var-i-0.L3%6%bbentry
3
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 4 for input.spec-%var-n-0.L3%6%bbentry
4097
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1219221616
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4097
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1968 expr point z3v487.ce1968 done
=inductive-invariants point_set point z3v487.ce1919
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 2 for input.spec-%var-n-1
4097
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 3 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 4 for input.spec-%var-n-0.L3%6%bbentry
4097
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4097
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1919 expr point z3v487.ce1919 done
=inductive-invariants point_set point z3.ce1918
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 2 for input.spec-%var-n-1
2
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 3 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 4 for input.spec-%var-n-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
3871309800
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1918 expr point z3.ce1918 done
=inductive-invariants point_set point z3v487.ce1990
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 2 for input.spec-%var-n-1
536870912
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 3 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 4 for input.spec-%var-n-0.L3%6%bbentry
536870912
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
536870912
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1990 expr point z3v487.ce1990 done
=inductive-invariants point_set point z3v487.ce2026
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 2 for input.spec-%var-n-1
536870912
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 3 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 4 for input.spec-%var-n-0.L3%6%bbentry
536870912
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
536870912
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
849624057
=inductive-invariants point_set point z3v487.ce2026 expr point z3v487.ce2026 done
=inductive-invariants point_set point z3v487.ce2052
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 2 for input.spec-%var-n-1
5
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 3 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 4 for input.spec-%var-n-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2052 expr point z3v487.ce2052 done
=inductive-invariants point_set point z3v487.ce2147
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 2 for input.spec-%var-n-1
2049
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 3 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 4 for input.spec-%var-n-0.L3%6%bbentry
2049
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1342963620
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2049
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2147 expr point z3v487.ce2147 done
=inductive-invariants point_set point z3.ce2120
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 2 for input.spec-%var-n-1
1025
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 3 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 4 for input.spec-%var-n-0.L3%6%bbentry
1025
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1025
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2120 expr point z3.ce2120 done
=inductive-invariants point_set point z3v487.ce2119
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 2 for input.spec-%var-n-1
2049
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 3 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 4 for input.spec-%var-n-0.L3%6%bbentry
2049
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2049
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 done
=inductive-invariants point_set point z3v487.ce2181
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 2 for input.spec-%var-n-1
8196
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 3 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 4 for input.spec-%var-n-0.L3%6%bbentry
8196
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8196
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2181 expr point z3v487.ce2181 done
=inductive-invariants point_set point z3.ce2180
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 2 for input.spec-%var-n-1
4194305
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 3 for input.spec-%var-i-0.L3%6%bbentry
6
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 4 for input.spec-%var-n-0.L3%6%bbentry
4194305
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
6
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4194305
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2180 expr point z3.ce2180 done
=inductive-invariants point_set point z3v487.ce2238
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 2 for input.spec-%var-n-1
1024
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 3 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 4 for input.spec-%var-n-0.L3%6%bbentry
1024
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1024
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
240984635
=inductive-invariants point_set point z3v487.ce2238 expr point z3v487.ce2238 done
=inductive-invariants point_set point z3.ce2237
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 2 for input.spec-%var-n-1
6
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 3 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 4 for input.spec-%var-n-0.L3%6%bbentry
6
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
6
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
442145956
=inductive-invariants point_set point z3.ce2237 expr point z3.ce2237 done
=inductive-invariants point_set point z3v487.ce2323
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 2 for input.spec-%var-n-1
8388608
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 3 for input.spec-%var-i-0.L3%6%bbentry
8
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 4 for input.spec-%var-n-0.L3%6%bbentry
8388608
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
67108864
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8388608
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 done
=inductive-invariants point_set point z3.ce2322
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 2 for input.spec-%var-n-1
536870918
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 3 for input.spec-%var-i-0.L3%6%bbentry
8
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 4 for input.spec-%var-n-0.L3%6%bbentry
536870918
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
3270886080
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
536870918
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2322 expr point z3.ce2322 done
=inductive-invariants point_set point z3.ce2359
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 2 for input.spec-%var-n-1
536870918
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 3 for input.spec-%var-i-0.L3%6%bbentry
8
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 4 for input.spec-%var-n-0.L3%6%bbentry
536870918
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
3270886080
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
536870918
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
165979530
=inductive-invariants point_set point z3.ce2359 expr point z3.ce2359 done
=inductive-invariants point_set point z3v487.ce2406
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 2 for input.spec-%var-n-1
2048
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 3 for input.spec-%var-i-0.L3%6%bbentry
9
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 4 for input.spec-%var-n-0.L3%6%bbentry
2048
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
9
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2048
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2406 expr point z3v487.ce2406 done
=inductive-invariants point_set point z3.ce2405
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 2 for input.spec-%var-n-1
9
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 3 for input.spec-%var-i-0.L3%6%bbentry
9
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 4 for input.spec-%var-n-0.L3%6%bbentry
9
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
9
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
2009595904
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
9
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2405 expr point z3.ce2405 done
=inductive-invariants point_set point z3.ce2484
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 2 for input.spec-%var-n-1
4098
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 3 for input.spec-%var-i-0.L3%6%bbentry
2049
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 4 for input.spec-%var-n-0.L3%6%bbentry
4098
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2049
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4098
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2484 expr point z3.ce2484 done
=inductive-invariants point_set point z3v487.ce2483
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 2 for input.spec-%var-n-1
308833284
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 3 for input.spec-%var-i-0.L3%6%bbentry
80794633
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 4 for input.spec-%var-n-0.L3%6%bbentry
308833284
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
80794633
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
308833284
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 done
=inductive-invariants point_set point z3v487.ce2527
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 2 for input.spec-%var-n-1
3226800161
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 3 for input.spec-%var-i-0.L3%6%bbentry
1084850224
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 4 for input.spec-%var-n-0.L3%6%bbentry
3226800161
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1084850224
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
3226800161
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1876630450
=inductive-invariants point_set point z3v487.ce2527 expr point z3v487.ce2527 done
=inductive-invariants point_set point z3.ce2526
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 2 for input.spec-%var-n-1
295477769
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 3 for input.spec-%var-i-0.L3%6%bbentry
79250468
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 4 for input.spec-%var-n-0.L3%6%bbentry
295477769
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
79250468
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
295477769
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
2085622539
=inductive-invariants point_set point z3.ce2526 expr point z3.ce2526 done
=inductive-invariants point_set point z3v487.ce2562
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 2 for input.spec-%var-n-1
3212836864
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 3 for input.spec-%var-i-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 4 for input.spec-%var-n-0.L3%6%bbentry
3212836864
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
536870912
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
3212836864
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2562 expr point z3v487.ce2562 done
=inductive-invariants point_set point z3v487.ce2598
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 2 for input.spec-%var-n-1
3212836864
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 3 for input.spec-%var-i-0.L3%6%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 4 for input.spec-%var-n-0.L3%6%bbentry
3212836864
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
536870912
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
3212836864
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 val 30 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
574165785
=inductive-invariants point_set point z3v487.ce2598 expr point z3v487.ce2598 done
=inductive-invariants point_set point z3.ce2622
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 2 for input.spec-%var-n-1
4294967295
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 3 for input.spec-%var-i-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 4 for input.spec-%var-n-0.L3%6%bbentry
4294967295
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4294967256
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2622 expr point z3.ce2622 done
=inductive-invariants point_set point z3.ce2705
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 2 for input.spec-%var-n-1
2186576597
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 3 for input.spec-%var-i-0.L3%6%bbentry
2159051691
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 4 for input.spec-%var-n-0.L3%6%bbentry
2186576597
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2159051691
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1045322668
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2186576597
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2705 expr point z3.ce2705 done
=inductive-invariants point_set point z3v487.ce2678
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 2 for input.spec-%var-n-1
3761274880
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 3 for input.spec-%var-i-0.L3%6%bbentry
2754084865
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 4 for input.spec-%var-n-0.L3%6%bbentry
3761274880
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2754084865
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
3761274880
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2678 expr point z3v487.ce2678 done
=inductive-invariants point_set point z3.ce2677
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 2 for input.spec-%var-n-1
2186576597
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 3 for input.spec-%var-i-0.L3%6%bbentry
2159051690
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 4 for input.spec-%var-n-0.L3%6%bbentry
2186576597
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 5 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2159051690
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 6 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 7 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2186576597
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 8 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 9 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 10 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 11 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 12 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 13 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 14 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 15 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 val 22 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2677 expr point z3.ce2677 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.body%1%fcallStart

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.body%1%fcallEnd

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.body%1%fcallStart for reason inductive-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce722
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 7 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-n-1 : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 22
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-32-free_var_idx.22
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
=RhsExpr
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : bool_to_bv(1) : BV:1
3 : 31 { 0x1f +1.0e1025 } : INT
4 : bvzero_ext(2, 3) : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.6
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.5
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 4
=Comment
expr-group-bvs.linear2-32-free_var_idx.4
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce722
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce761
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce1580
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce1827
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce1918
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=7; number of visited CEs=5; number of preds=5
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 7->0; 22->0; 
5
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->1; 6->0; 7->0; 22->0; 
6
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->1073741824; 7->0; 22->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 22->0; 
22
-2147483648->4294967295; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 22->1; 
matrix done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const point_expr 3
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce722
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce1580
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce1919
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce2119
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3.ce2180
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce2483
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3.ce2677
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
src-branches-const-ineq.lb-unsigned
=LhsExpr
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce722
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce761
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce790
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce789
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3v487.ce817
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=5; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const point_expr 5
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce722
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce1580
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce1919
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce2119
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 4: z3.ce2180
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 5: z3v487.ce2483
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 6: z3.ce2677
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const point_expr 7
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3v487.ce722
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3.ce761
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce790
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3.ce789
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const visited ce 4: z3v487.ce817
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=5; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini point_expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini point_expr 11
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini point_expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini point_expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini visited ce 0: z3v487.ce722
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini visited ce 1: z3.ce761
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini summary: number of exprs=8; number of visited CEs=2; number of preds=2
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 11 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 16
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 19
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 20
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 21
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 23
1 : spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 24
1 : spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 25
1 : spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
3 : input.spec-%var-i-0.L3%6%bbentry : BV:32
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : Indxform0 : BV:32
6 : Lambda1 : BV:32
7 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
8 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
9 : memlabel-top : MEMLABEL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvadd(6, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(7, 8, 9, 11, 12, 13) : BV:32
15 : lambda(6, 14) : FUNCTION[BV:32 -> BV:32]
16 : Lambda0 : BV:32
17 : 0 { 0x0 +1.0e129 } : BV:32
18 : eq(17, 16) : BOOL
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : ite(18, 17, 19) : BV:32
21 : unit : UNIT
22 : select(7, 8, 9, 16, 12, 13) : BV:32
23 : prod(22, 5) : PROD[BV:32,BV:32]
24 : sum(20, 21, 23) : SUM[UNIT,PROD[BV:32,BV:32]]
25 : lambda(16, 24) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
26 : ind(4, 5, 15, 25) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : prod_init(2, 3, 26) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : eq(1, 27) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 26
1 : spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 27
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 28
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 29
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ce 0: z3v487.ce722
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 7 type houdini-axiom-based summary: number of exprs=11; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.body%1%fcallEnd for reason inductive-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce1030
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 7 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-n-1 : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 30
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-2-free_var_idx.6
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.5
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.2
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce1006
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce1024
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce1027
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce1030
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce1550
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce1625
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce1882
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=7; number of visited CEs=7; number of preds=4
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
2
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 7->0; 30->0; 
5
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->1; 6->0; 7->0; 30->0; 
6
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->1073741824; 7->0; 30->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 30->0; 
matrix done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const point_expr 3
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce1030
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce1550
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce1882
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce2026
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3.ce2237
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3.ce2359
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3.ce2526
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 7: z3v487.ce2598
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=8; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
src-branches-const-ineq.lb-unsigned
=LhsExpr
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce1024
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce1027
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce1030
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce1249
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const point_expr 5
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce1030
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce1550
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce1882
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce2026
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 4: z3.ce2237
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 5: z3.ce2359
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 6: z3.ce2526
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 7: z3v487.ce2598
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=8; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const point_expr 7
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3.ce1024
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce1027
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3.ce1030
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3v487.ce1249
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini point_expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini point_expr 11
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini point_expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini point_expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini visited ce 0: z3v487.ce1027
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini visited ce 1: z3.ce1030
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini summary: number of exprs=8; number of visited CEs=2; number of preds=2
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 13 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 31
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 32
1 : spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 33
1 : spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 34
1 : spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
3 : input.spec-%var-i-0.L3%6%bbentry : BV:32
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : Indxform0 : BV:32
6 : Lambda1 : BV:32
7 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
8 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
9 : memlabel-top : MEMLABEL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvadd(6, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(7, 8, 9, 11, 12, 13) : BV:32
15 : lambda(6, 14) : FUNCTION[BV:32 -> BV:32]
16 : Lambda0 : BV:32
17 : 0 { 0x0 +1.0e129 } : BV:32
18 : eq(17, 16) : BOOL
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : ite(18, 17, 19) : BV:32
21 : unit : UNIT
22 : select(7, 8, 9, 16, 12, 13) : BV:32
23 : prod(22, 5) : PROD[BV:32,BV:32]
24 : sum(20, 21, 23) : SUM[UNIT,PROD[BV:32,BV:32]]
25 : lambda(16, 24) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
26 : ind(4, 5, 15, 25) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : prod_init(2, 3, 26) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : eq(1, 27) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 35
1 : spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 36
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 37
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 38
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 39
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 40
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 41
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 42
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 43
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
7 : Indxform0 : BV:32
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(8, 12) : BV:32
14 : 4 { 0x4 +1.0e1025 } : INT
15 : 0 { 0x0 } : BOOL
16 : select(9, 10, 11, 13, 14, 15) : BV:32
17 : lambda(8, 16) : FUNCTION[BV:32 -> BV:32]
18 : Lambda0 : BV:32
19 : 0 { 0x0 +1.0e129 } : BV:32
20 : eq(19, 18) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : ite(20, 19, 21) : BV:32
23 : unit : UNIT
24 : select(9, 10, 11, 18, 14, 15) : BV:32
25 : prod(24, 7) : PROD[BV:32,BV:32]
26 : sum(22, 23, 25) : SUM[UNIT,PROD[BV:32,BV:32]]
27 : lambda(18, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
28 : ind(6, 7, 17, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : prod_init(4, 5, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
30 : sum_init(2, 3, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : eq(1, 30) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ce 0: z3.ce1030
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 7 type houdini-axiom-based summary: number of exprs=13; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 6 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-n-1 : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-2-free_var_idx.6
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.5
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.4
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce29
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce1463
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce1493
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce1855
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=6; number of visited CEs=5; number of preds=4
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 7->0; 
5
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->1; 6->0; 7->0; 
6
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->1073741824; 7->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 
matrix done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 3
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce1493
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce1855
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce1990
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3v487.ce2052
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3.ce2322
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3.ce2405
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 7: z3v487.ce2562
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 8: z3.ce2622
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=9; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce29
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce53
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce77
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 5
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce1493
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce1855
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce1990
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 4: z3v487.ce2052
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 5: z3.ce2322
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 6: z3.ce2405
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 7: z3v487.ce2562
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 8: z3.ce2622
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=9; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 7
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3v487.ce5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3.ce29
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce53
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3.ce77
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 9
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 11
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 0: z3v487.ce5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 1: z3.ce29
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 2: z3v487.ce53
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini summary: number of exprs=8; number of visited CEs=3; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 6 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 16
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 17
1 : spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 18
1 : spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 19
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 20
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 21
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ce 0: z3v487.ce5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based summary: number of exprs=6; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.to_pcL3%6%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : input.spec-%var-i-0.L3%6%bbentry : BV:32
4 : input.spec-%var-n-0.L3%6%bbentry : BV:32
5 : bvuge(3, 4) : BOOL
6 : not(5) : BOOL
7 : or(2, 6) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : input.spec-%var-n-0.L3%6%bbentry : BV:32
6 : bvuge(4, 5) : BOOL
7 : or(3, 6) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L3%6%bbentry_Lfor.body%1%fcallStart
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-n-1 : BV:32
=SRC Tie Breaking expr 1
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=DST Ranking expr 0
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=DST Tie Breaking expr 0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=bv_rank_exprs done
=Ranking exprs at node L3%6%bbentry_Lfor.body%1%fcallEnd
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-n-1 : BV:32
=SRC Tie Breaking expr 1
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=DST Ranking expr 0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs at node L3%6%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-n-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-n-1 : BV:32
=SRC Tie Breaking expr 1
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=DST Ranking expr 0
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140426 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140427 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140528 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
140428 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
140381 : 4 { 0x4 +1.0e1025 } : INT
140382 : 0 { 0x0 } : BOOL
140529 : select(140426, 140427, 140528, 140428, 140381, 140382) : BV:32
=RhsExpr
140425 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
equal-n
=LhsExpr
140273 : input.spec-%var-n-1 : BV:32
140425 : input.dst.llvm-%n : BV:32
141085 : eq(140273, 140425) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
precond-mlasserts
=LhsExpr
141069 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
141070 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
141071 : bvule(141069, 141070) : BOOL
140412 : 4 { 0x4 +1.47e129 } : BV:32
140470 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
141072 : bvadd(140412, 140470) : BV:32
141073 : bvadd(141069, 141072) : BV:32
141074 : eq(141070, 141073) : BOOL
141075 : and(141071, 141074) : BOOL
140428 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
141076 : 3 { 0x3 +1.35e129 } : BV:32
141077 : bvand(140428, 141076) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
141078 : eq(141077, 140276) : BOOL
141079 : and(141075, 141078) : BOOL
141080 : eq(140428, 141069) : BOOL
141081 : and(141079, 141080) : BOOL
140427 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140295 : 1 { 0x1 +1.11e129 } : BV:32
140429 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141082 : region_agrees_with_memlabel(140427, 140276, 140295, 140429) : BOOL
141083 : and(141081, 141082) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140623 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140761 : eq(140276, 140623) : BOOL
140628 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140440 : 8 { 0x8 +1.95e129 } : BV:32
140429 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141019 : region_agrees_with_memlabel(140628, 140623, 140440, 140429) : BOOL
141025 : or(140761, 141019) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140623 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140761 : eq(140276, 140623) : BOOL
140382 : 0 { 0x0 } : BOOL
140453 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140625 : heap_alloc_ptr(140623, 140453) : BV:32
140579 : 7 { 0x7 +1.83e129 } : BV:32
140800 : bvadd(140579, 140625) : BV:32
140803 : bvule(140625, 140800) : BOOL
140806 : or(140382, 140803) : BOOL
140810 : or(140761, 140806) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2.pred
=Comment
undef-behaviour-align-assume
=LhsExpr
140623 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140291 : 1 { 0x1 +1.0e1025 } : INT
140655 : islangaligned(140623, 140291) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd done
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=LhsExpr
140623 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140291 : 1 { 0x1 +1.0e1025 } : INT
140655 : islangaligned(140623, 140291) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
merged-predicate
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140623 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140761 : eq(140276, 140623) : BOOL
140628 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140440 : 8 { 0x8 +1.95e129 } : BV:32
140429 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141019 : region_agrees_with_memlabel(140628, 140623, 140440, 140429) : BOOL
141025 : or(140761, 141019) : BOOL
140382 : 0 { 0x0 } : BOOL
140453 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140625 : heap_alloc_ptr(140623, 140453) : BV:32
140579 : 7 { 0x7 +1.83e129 } : BV:32
140800 : bvadd(140579, 140625) : BV:32
140803 : bvule(140625, 140800) : BOOL
140806 : or(140382, 140803) : BOOL
140810 : or(140761, 140806) : BOOL
145504 : and(141025, 140810) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
merged-predicate
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140276 : 0 { 0x0 +1.0e129 } : BV:32
140623 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140761 : eq(140276, 140623) : BOOL
140453 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140625 : heap_alloc_ptr(140623, 140453) : BV:32
140763 : ite(140761, 140276, 140625) : BV:32
167173 : isgepoffset(140763, 140276) : BOOL
167182 : and(140275, 167173) : BOOL
167183 : and(167173, 167182) : BOOL
140381 : 4 { 0x4 +1.0e1025 } : INT
167184 : islangaligned(140763, 140381) : BOOL
140412 : 4 { 0x4 +1.47e129 } : BV:32
166119 : bvadd(140412, 140763) : BV:32
167285 : isgepoffset(166119, 140412) : BOOL
167286 : and(167182, 167183, 167184, 167285) : BOOL
167300 : islangaligned(166119, 140381) : BOOL
167322 : and(167286, 167300) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140623 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140761 : eq(140276, 140623) : BOOL
140628 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140440 : 8 { 0x8 +1.95e129 } : BV:32
140429 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141019 : region_agrees_with_memlabel(140628, 140623, 140440, 140429) : BOOL
141025 : or(140761, 141019) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140623 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140761 : eq(140276, 140623) : BOOL
140382 : 0 { 0x0 } : BOOL
140453 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140625 : heap_alloc_ptr(140623, 140453) : BV:32
140579 : 7 { 0x7 +1.83e129 } : BV:32
140800 : bvadd(140579, 140625) : BV:32
140803 : bvule(140625, 140800) : BOOL
140806 : or(140382, 140803) : BOOL
140810 : or(140761, 140806) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2.pred
=Comment
undef-behaviour-align-assume
=LhsExpr
140623 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140291 : 1 { 0x1 +1.0e1025 } : INT
140655 : islangaligned(140623, 140291) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%6%bbentry_Lfor.body%1%fcallStart
m_dst_rank: 1, m_src_rank: 0, m_spec_rank: 11
=bv_rank at L3%6%bbentry_Lfor.body%1%fcallEnd
m_dst_rank: 2, m_src_rank: 0, m_spec_rank: 13
=bv_rank at L3%6%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 1, m_src_rank: 0, m_spec_rank: 6
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
