==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310255/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x250 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x452 (not $x250)))
 (let (($x490 (or $x250 $x452)))
 (let (($x491 (= $x490 false)))
 (let (($x492 (= $x491 true)))
 (let ((?x471 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x473 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x476 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x479 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x480 (concat ?x479 (concat ?x476 (concat ?x473 ?x471)))))
 (let (($x481 (= ?x480 input.dst.llvm-%l)))
 (let (($x482 (= $x481 true)))
 (let (($x483 (= $x482 true)))
 (let ((?x453 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x460 (bvugt ?x453 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x459 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x453 (_ bv3 32)))))
 (let (($x466 (=> (bvule ?x453 (bvsub (bvadd ?x453 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x459 $x460)))))))
 (let (($x454 (=> (and $x452 (bvule ?x453 (bvsub (bvadd ?x453 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x459 $x460)))))))
 (let (($x455 (= $x454 true)))
 (let (($x467 (= $x455 true)))
 (let (($x468 (= $x467 true)))
 (let ((?x357 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x358 (concat ?x357 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x360 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x363 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x364 (concat ?x363 (concat ?x360 ?x358))))
 (let ((?x444 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv1 32))) (select input.dst.llvm-mem ?x364))))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv2 32))) ?x444))))
 (let (($x438 (= input.spec-%var-l-0.2.1.2.0 ?x450)))
 (let (($x439 (and $x438 true)))
 (let (($x15 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x435 (=> $x15 $x439)))
 (let (($x382 (= $x15 (bvuge (ite (= (_ bv0 32) ?x364) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x20 (= false false)))
 (let (($x30 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x17 (=> $x30 $x20)))
 (let (($x351 (= $x30 (= (ite (= (_ bv0 32) ?x364) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x352 (and $x351 $x17)))
 (let (($x383 (and $x352 $x382)))
 (let (($x436 (and $x383 $x435)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x304)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x307)))
 (let (($x311 (= input.spec-%var-l-0.2.0 ?x310)))
 (let (($x432 (and $x311 $x436)))
 (let (($x262 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x433 (=> $x262 $x432)))
 (let (($x264 (= $x262 (bvuge (ite $x250 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x249 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x254 (=> $x249 $x20)))
 (let (($x253 (= $x249 (= (ite $x250 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x255 (and $x253 $x254)))
 (let (($x265 (and $x255 $x264)))
 (let (($x431 (and $x265 $x433)))
 (let (($x434 (= $x431 true)))
 (let (($x437 (= $x434 true)))
 (let (($x440 (= $x437 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x179)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x174 $x177)))
 (let (($x181 (and $x178 $x180)))
 (let (($x172 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x172 $x181)))
 (let (($x183 (= $x182 true)))
 (let (($x184 (= $x183 true)))
 (let (($x185 (= $x184 true)))
 (let (($x451 (and $x185 $x440)))
 (let (($x469 (and $x451 $x468)))
 (let (($x484 (and $x469 $x483)))
 (let (($x485 (and $x20 $x484)))
 (let (($x163 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x164 (and $x163 true)))
 (let (($x67 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x167 (=> $x67 $x164)))
 (let (($x158 (= $x67 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x57 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x57 $x20)))
 (let (($x152 (= $x57 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x155 (and $x152 $x63)))
 (let (($x159 (and $x155 $x158)))
 (let (($x168 (and $x159 $x167)))
 (let (($x145 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x165 (and $x145 $x168)))
 (let (($x166 (=> $x15 $x165)))
 (let (($x139 (= $x15 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x134 (= $x30 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x135 (and $x134 $x17)))
 (let (($x140 (and $x135 $x139)))
 (let (($x169 (and $x140 $x166)))
 (let (($x486 (and $x169 $x485)))
 (let (($x124 (=> $x67 true)))
 (let (($x121 (= $x67 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x115 (= $x57 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x118 (and $x115 $x63)))
 (let (($x122 (and $x118 $x121)))
 (let (($x125 (and $x122 $x124)))
 (let (($x107 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x120 (and $x107 $x125)))
 (let (($x123 (=> $x15 $x120)))
 (let (($x102 (= $x15 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x97 (= $x30 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x98 (and $x97 $x17)))
 (let (($x103 (and $x98 $x102)))
 (let (($x126 (and $x103 $x123)))
 (let (($x90 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x127 (and $x90 $x126)))
 (let (($x487 (and $x127 $x486)))
 (let (($x78 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x80 (and $x78 true)))
 (let (($x83 (=> $x67 $x80)))
 (let (($x69 (= $x67 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x58 (= $x57 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x64 (and $x58 $x63)))
 (let (($x70 (and $x64 $x69)))
 (let (($x84 (and $x70 $x83)))
 (let (($x31 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x81 (and $x31 $x84)))
 (let (($x82 (=> $x15 $x81)))
 (let (($x38 (= $x15 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x27 (= $x30 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x13 (and $x27 $x17)))
 (let (($x11 (and $x13 $x38)))
 (let (($x85 (and $x11 $x82)))
 (let (($x488 (and $x85 $x487)))
 (let (($x8 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x489 (and $x8 $x488)))
 (let (($x493 (=> $x489 $x492)))
 (not $x493))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x250 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x452 (not $x250)))
 (let (($x490 (or $x250 $x452)))
 (let (($x491 (= $x490 false)))
 (let (($x492 (= $x491 true)))
 (let ((?x471 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x473 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x476 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x479 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x480 (concat ?x479 (concat ?x476 (concat ?x473 ?x471)))))
 (let (($x481 (= ?x480 input.dst.llvm-%l)))
 (let (($x482 (= $x481 true)))
 (let (($x483 (= $x482 true)))
 (let ((?x453 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x460 (bvugt ?x453 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x459 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x453 (_ bv3 32)))))
 (let (($x466 (=> (bvule ?x453 (bvsub (bvadd ?x453 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x459 $x460)))))))
 (let (($x454 (=> (and $x452 (bvule ?x453 (bvsub (bvadd ?x453 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x459 $x460)))))))
 (let (($x455 (= $x454 true)))
 (let (($x467 (= $x455 true)))
 (let (($x468 (= $x467 true)))
 (let ((?x357 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x358 (concat ?x357 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x360 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x363 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x364 (concat ?x363 (concat ?x360 ?x358))))
 (let ((?x444 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv1 32))) (select input.dst.llvm-mem ?x364))))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv2 32))) ?x444))))
 (let (($x438 (= input.spec-%var-l-0.2.1.2.0 ?x450)))
 (let (($x439 (and $x438 true)))
 (let (($x15 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x435 (=> $x15 $x439)))
 (let (($x382 (= $x15 (bvuge (ite (= (_ bv0 32) ?x364) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x20 (= false false)))
 (let (($x30 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x17 (=> $x30 $x20)))
 (let (($x351 (= $x30 (= (ite (= (_ bv0 32) ?x364) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x352 (and $x351 $x17)))
 (let (($x383 (and $x352 $x382)))
 (let (($x436 (and $x383 $x435)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x304)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x307)))
 (let (($x311 (= input.spec-%var-l-0.2.0 ?x310)))
 (let (($x432 (and $x311 $x436)))
 (let (($x262 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x433 (=> $x262 $x432)))
 (let (($x264 (= $x262 (bvuge (ite $x250 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x249 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x254 (=> $x249 $x20)))
 (let (($x253 (= $x249 (= (ite $x250 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x255 (and $x253 $x254)))
 (let (($x265 (and $x255 $x264)))
 (let (($x431 (and $x265 $x433)))
 (let (($x434 (= $x431 true)))
 (let (($x437 (= $x434 true)))
 (let (($x440 (= $x437 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x179)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x174 $x177)))
 (let (($x181 (and $x178 $x180)))
 (let (($x172 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x172 $x181)))
 (let (($x183 (= $x182 true)))
 (let (($x184 (= $x183 true)))
 (let (($x185 (= $x184 true)))
 (let (($x451 (and $x185 $x440)))
 (let (($x469 (and $x451 $x468)))
 (let (($x484 (and $x469 $x483)))
 (let (($x485 (and $x20 $x484)))
 (let (($x163 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x164 (and $x163 true)))
 (let (($x67 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x167 (=> $x67 $x164)))
 (let (($x158 (= $x67 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x57 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x57 $x20)))
 (let (($x152 (= $x57 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x155 (and $x152 $x63)))
 (let (($x159 (and $x155 $x158)))
 (let (($x168 (and $x159 $x167)))
 (let (($x145 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x165 (and $x145 $x168)))
 (let (($x166 (=> $x15 $x165)))
 (let (($x139 (= $x15 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x134 (= $x30 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x135 (and $x134 $x17)))
 (let (($x140 (and $x135 $x139)))
 (let (($x169 (and $x140 $x166)))
 (let (($x486 (and $x169 $x485)))
 (let (($x124 (=> $x67 true)))
 (let (($x121 (= $x67 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x115 (= $x57 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x118 (and $x115 $x63)))
 (let (($x122 (and $x118 $x121)))
 (let (($x125 (and $x122 $x124)))
 (let (($x107 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x120 (and $x107 $x125)))
 (let (($x123 (=> $x15 $x120)))
 (let (($x102 (= $x15 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x97 (= $x30 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x98 (and $x97 $x17)))
 (let (($x103 (and $x98 $x102)))
 (let (($x126 (and $x103 $x123)))
 (let (($x90 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x127 (and $x90 $x126)))
 (let (($x487 (and $x127 $x486)))
 (let (($x78 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x80 (and $x78 true)))
 (let (($x83 (=> $x67 $x80)))
 (let (($x69 (= $x67 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x58 (= $x57 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x64 (and $x58 $x63)))
 (let (($x70 (and $x64 $x69)))
 (let (($x84 (and $x70 $x83)))
 (let (($x31 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x81 (and $x31 $x84)))
 (let (($x82 (=> $x15 $x81)))
 (let (($x38 (= $x15 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x27 (= $x30 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x13 (and $x27 $x17)))
 (let (($x11 (and $x13 $x38)))
 (let (($x85 (and $x11 $x82)))
 (let (($x488 (and $x85 $x487)))
 (let (($x8 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x489 (and $x8 $x488)))
 (let (($x493 (=> $x489 $x492)))
 (not $x493))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310255/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x196 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x143 (not $x196)))
 (let (($x55 (or $x196 $x143)))
 (let (($x65 (= $x55 false)))
 (let (($x66 (= $x65 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x39 (concat ?x110 (concat ?x112 ?x105)))))
 (let (($x35 (= ?x16 input.dst.llvm-%l)))
 (let (($x12 (= $x35 true)))
 (let (($x23 (= $x12 true)))
 (let ((?x146 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x153 (bvugt ?x146 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x146 (_ bv3 32)))))
 (let (($x93 (=> (bvule ?x146 (bvsub (bvadd ?x146 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x153)))))))
 (let (($x147 (=> (and $x143 (bvule ?x146 (bvsub (bvadd ?x146 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x156 $x153)))))))
 (let (($x73 (= $x147 true)))
 (let (($x94 (= $x73 true)))
 (let (($x99 (= $x94 true)))
 (let ((?x328 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x326 (concat ?x328 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x319 (concat ?x323 (concat ?x332 ?x326))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv1 32))) (select input.dst.llvm-mem ?x319))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv2 32))) ?x71))))
 (let (($x396 (= input.spec-%var-l-0.2.1.2.0 ?x141)))
 (let (($x397 (and $x396 false)))
 (let (($x79 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x389 (=> $x79 $x397)))
 (let (($x416 (= $x79 (bvuge (ite (= (_ bv0 32) ?x319) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x60 (= false false)))
 (let (($x56 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x61 (=> $x56 $x60)))
 (let (($x325 (= $x56 (= (ite (= (_ bv0 32) ?x319) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x333 (and $x325 $x61)))
 (let (($x419 (and $x333 $x416)))
 (let (($x392 (and $x419 $x389)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x280)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x289)))
 (let (($x272 (= input.spec-%var-l-0.2.0 ?x271)))
 (let (($x387 (and $x272 $x392)))
 (let (($x216 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x388 (=> $x216 $x387)))
 (let (($x220 (= $x216 (bvuge (ite $x196 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x198 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x217 (=> $x198 $x60)))
 (let (($x206 (= $x198 (= (ite $x196 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x218 (and $x206 $x217)))
 (let (($x221 (and $x218 $x220)))
 (let (($x391 (and $x221 $x388)))
 (let (($x386 (= $x391 true)))
 (let (($x395 (= $x386 true)))
 (let (($x50 (= $x395 true)))
 (let ((?x457 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x465 (= (_ bv0 32) ?x457)))
 (let ((?x452 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x453 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x452)))
 (let (($x440 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x456 (and $x440 $x453)))
 (let (($x458 (and $x456 $x465)))
 (let (($x434 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x459 (and $x434 $x458)))
 (let (($x460 (= $x459 true)))
 (let (($x461 (= $x460 true)))
 (let (($x462 (= $x461 true)))
 (let (($x142 (and $x462 $x50)))
 (let (($x100 (and $x142 $x99)))
 (let (($x34 (and $x100 $x23)))
 (let (($x36 (and $x60 $x34)))
 (let (($x447 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x450 (and $x447 false)))
 (let (($x126 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x435 (=> $x126 $x450)))
 (let (($x446 (= $x126 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x114 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x124 (=> $x114 $x60)))
 (let (($x385 (= $x114 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x448 (and $x385 $x124)))
 (let (($x442 (and $x448 $x446)))
 (let (($x436 (and $x442 $x435)))
 (let (($x361 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x438 (and $x361 $x436)))
 (let (($x439 (=> $x79 $x438)))
 (let (($x359 (= $x79 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x311 (= $x56 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x194 (and $x311 $x61)))
 (let (($x360 (and $x194 $x359)))
 (let (($x432 (and $x360 $x439)))
 (let (($x52 (and $x432 $x36)))
 (let (($x309 (=> $x126 false)))
 (let (($x265 (= $x126 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x253 (= $x114 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x262 (and $x253 $x124)))
 (let (($x191 (and $x262 $x265)))
 (let (($x200 (and $x191 $x309)))
 (let (($x184 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x264 (and $x184 $x200)))
 (let (($x308 (=> $x79 $x264)))
 (let (($x179 (= $x79 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x174 (= $x56 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x175 (and $x174 $x61)))
 (let (($x180 (and $x175 $x179)))
 (let (($x305 (and $x180 $x308)))
 (let (($x165 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x306 (and $x165 $x305)))
 (let (($x53 (and $x306 $x52)))
 (let (($x150 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x152 (and $x150 false)))
 (let (($x158 (=> $x126 $x152)))
 (let (($x132 (= $x126 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x115 (= $x114 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x125 (and $x115 $x124)))
 (let (($x133 (and $x125 $x132)))
 (let (($x159 (and $x133 $x158)))
 (let (($x95 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x155 (and $x95 $x159)))
 (let (($x154 (=> $x79 $x155)))
 (let (($x77 (= $x79 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x57 (= $x56 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x58 (and $x57 $x61)))
 (let (($x78 (and $x58 $x77)))
 (let (($x162 (and $x78 $x154)))
 (let (($x76 (and $x162 $x53)))
 (let (($x30 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x54 (and $x30 $x76)))
 (let (($x74 (=> $x54 $x66)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x196 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x143 (not $x196)))
 (let (($x55 (or $x196 $x143)))
 (let (($x65 (= $x55 false)))
 (let (($x66 (= $x65 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x39 (concat ?x110 (concat ?x112 ?x105)))))
 (let (($x35 (= ?x16 input.dst.llvm-%l)))
 (let (($x12 (= $x35 true)))
 (let (($x23 (= $x12 true)))
 (let ((?x146 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x153 (bvugt ?x146 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x146 (_ bv3 32)))))
 (let (($x93 (=> (bvule ?x146 (bvsub (bvadd ?x146 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x153)))))))
 (let (($x147 (=> (and $x143 (bvule ?x146 (bvsub (bvadd ?x146 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x156 $x153)))))))
 (let (($x73 (= $x147 true)))
 (let (($x94 (= $x73 true)))
 (let (($x99 (= $x94 true)))
 (let ((?x328 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x326 (concat ?x328 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x319 (concat ?x323 (concat ?x332 ?x326))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv1 32))) (select input.dst.llvm-mem ?x319))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv2 32))) ?x71))))
 (let (($x396 (= input.spec-%var-l-0.2.1.2.0 ?x141)))
 (let (($x397 (and $x396 false)))
 (let (($x79 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x389 (=> $x79 $x397)))
 (let (($x416 (= $x79 (bvuge (ite (= (_ bv0 32) ?x319) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x60 (= false false)))
 (let (($x56 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x61 (=> $x56 $x60)))
 (let (($x325 (= $x56 (= (ite (= (_ bv0 32) ?x319) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x333 (and $x325 $x61)))
 (let (($x419 (and $x333 $x416)))
 (let (($x392 (and $x419 $x389)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x280)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x289)))
 (let (($x272 (= input.spec-%var-l-0.2.0 ?x271)))
 (let (($x387 (and $x272 $x392)))
 (let (($x216 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x388 (=> $x216 $x387)))
 (let (($x220 (= $x216 (bvuge (ite $x196 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x198 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x217 (=> $x198 $x60)))
 (let (($x206 (= $x198 (= (ite $x196 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x218 (and $x206 $x217)))
 (let (($x221 (and $x218 $x220)))
 (let (($x391 (and $x221 $x388)))
 (let (($x386 (= $x391 true)))
 (let (($x395 (= $x386 true)))
 (let (($x50 (= $x395 true)))
 (let ((?x457 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x465 (= (_ bv0 32) ?x457)))
 (let ((?x452 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x453 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x452)))
 (let (($x440 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x456 (and $x440 $x453)))
 (let (($x458 (and $x456 $x465)))
 (let (($x434 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x459 (and $x434 $x458)))
 (let (($x460 (= $x459 true)))
 (let (($x461 (= $x460 true)))
 (let (($x462 (= $x461 true)))
 (let (($x142 (and $x462 $x50)))
 (let (($x100 (and $x142 $x99)))
 (let (($x34 (and $x100 $x23)))
 (let (($x36 (and $x60 $x34)))
 (let (($x447 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x450 (and $x447 false)))
 (let (($x126 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x435 (=> $x126 $x450)))
 (let (($x446 (= $x126 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x114 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x124 (=> $x114 $x60)))
 (let (($x385 (= $x114 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x448 (and $x385 $x124)))
 (let (($x442 (and $x448 $x446)))
 (let (($x436 (and $x442 $x435)))
 (let (($x361 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x438 (and $x361 $x436)))
 (let (($x439 (=> $x79 $x438)))
 (let (($x359 (= $x79 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x311 (= $x56 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x194 (and $x311 $x61)))
 (let (($x360 (and $x194 $x359)))
 (let (($x432 (and $x360 $x439)))
 (let (($x52 (and $x432 $x36)))
 (let (($x309 (=> $x126 false)))
 (let (($x265 (= $x126 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x253 (= $x114 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x262 (and $x253 $x124)))
 (let (($x191 (and $x262 $x265)))
 (let (($x200 (and $x191 $x309)))
 (let (($x184 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x264 (and $x184 $x200)))
 (let (($x308 (=> $x79 $x264)))
 (let (($x179 (= $x79 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x174 (= $x56 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x175 (and $x174 $x61)))
 (let (($x180 (and $x175 $x179)))
 (let (($x305 (and $x180 $x308)))
 (let (($x165 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x306 (and $x165 $x305)))
 (let (($x53 (and $x306 $x52)))
 (let (($x150 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x152 (and $x150 false)))
 (let (($x158 (=> $x126 $x152)))
 (let (($x132 (= $x126 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x115 (= $x114 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x125 (and $x115 $x124)))
 (let (($x133 (and $x125 $x132)))
 (let (($x159 (and $x133 $x158)))
 (let (($x95 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x155 (and $x95 $x159)))
 (let (($x154 (=> $x79 $x155)))
 (let (($x77 (= $x79 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x57 (= $x56 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x58 (and $x57 $x61)))
 (let (($x78 (and $x58 $x77)))
 (let (($x162 (and $x78 $x154)))
 (let (($x76 (and $x162 $x53)))
 (let (($x30 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x54 (and $x30 $x76)))
 (let (($x74 (=> $x54 $x66)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310255/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x20 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x30 (not $x20)))
 (let (($x495 (or $x20 $x30)))
 (let (($x496 (not $x495)))
 (let (($x42 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x32 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x140 (or $x32 $x42)))
 (let (($x497 (or $x140 $x496)))
 (let (($x498 (= $x497 true)))
 (let (($x499 (= $x498 true)))
 (let ((?x183 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x69 (concat ?x38 (concat ?x249 ?x183)))))
 (let (($x82 (= ?x81 input.dst.llvm-%l)))
 (let (($x85 (= $x82 true)))
 (let (($x102 (= $x85 true)))
 (let ((?x374 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x377 (concat ?x374 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x403 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x393 (concat ?x403 (concat ?x380 ?x377))))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv1 32))) (select input.dst.llvm-mem ?x393))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv2 32))) ?x169))))
 (let (($x449 (= input.spec-%var-l-0.2.1.2.0 ?x182)))
 (let (($x382 (and $x449 true)))
 (let (($x262 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x441 (=> $x262 $x382)))
 (let (($x321 (= $x262 (bvuge (ite (= (_ bv0 32) ?x393) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x175 (= false false)))
 (let (($x173 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x178 (=> $x173 $x175)))
 (let (($x84 (= $x173 (= (ite (= (_ bv0 32) ?x393) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x373 (and $x84 $x178)))
 (let (($x411 (and $x373 $x321)))
 (let (($x366 (and $x411 $x441)))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x314)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x312)))
 (let (($x292 (= input.spec-%var-l-0.2.0 ?x296)))
 (let (($x364 (and $x292 $x366)))
 (let (($x365 (=> $x32 $x364)))
 (let (($x47 (= $x32 (bvuge (ite $x20 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x86 (=> $x42 $x175)))
 (let (($x470 (= $x42 (= (ite $x20 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x43 (and $x470 $x86)))
 (let (($x207 (and $x43 $x47)))
 (let (($x355 (and $x207 $x365)))
 (let (($x138 (= $x355 true)))
 (let (($x367 (= $x138 true)))
 (let (($x445 (= $x367 true)))
 (let (($x34 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x36 (= $x34 true)))
 (let (($x52 (= $x36 true)))
 (let (($x53 (= $x52 true)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x111)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x116 $x109)))
 (let (($x105 (and $x110 $x112)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x100 $x105)))
 (let (($x119 (= $x106 true)))
 (let (($x16 (= $x119 true)))
 (let (($x35 (= $x16 true)))
 (let (($x76 (and $x35 $x53)))
 (let (($x188 (and $x76 $x445)))
 (let (($x103 (and $x188 $x102)))
 (let (($x144 (and $x175 $x103)))
 (let (($x160 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x88 (and $x160 true)))
 (let (($x436 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x147 (=> $x436 $x88)))
 (let (($x92 (= $x436 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x352 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x444 (=> $x352 $x175)))
 (let (($x50 (= $x352 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x146 (and $x50 $x444)))
 (let (($x149 (and $x146 $x92)))
 (let (($x73 (and $x149 $x147)))
 (let (($x389 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x91 (and $x389 $x73)))
 (let (($x93 (=> $x262 $x91)))
 (let (($x51 (= $x262 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x137 (= $x173 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x72 (and $x137 $x178)))
 (let (($x71 (and $x72 $x51)))
 (let (($x94 (and $x71 $x93)))
 (let (($x108 (and $x94 $x144)))
 (let (($x319 (=> $x436 true)))
 (let (($x331 (= $x436 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x322 (= $x352 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x332 (and $x322 $x444)))
 (let (($x326 (and $x332 $x331)))
 (let (($x320 (and $x326 $x319)))
 (let (($x282 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x328 (and $x282 $x320)))
 (let (($x335 (=> $x262 $x328)))
 (let (($x275 (= $x262 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x219 (= $x173 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x220 (and $x219 $x178)))
 (let (($x471 (and $x220 $x275)))
 (let (($x316 (and $x471 $x335)))
 (let (($x196 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x317 (and $x196 $x316)))
 (let (($x107 (and $x317 $x108)))
 (let (($x453 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x457 (and $x453 true)))
 (let (($x459 (=> $x436 $x457)))
 (let (($x439 (= $x436 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x385 (= $x352 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x447 (and $x385 $x444)))
 (let (($x432 (and $x447 $x439)))
 (let (($x460 (and $x432 $x459)))
 (let (($x307 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x465 (and $x307 $x460)))
 (let (($x458 (=> $x262 $x465)))
 (let (($x253 (= $x262 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x174 (= $x173 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x179 (and $x174 $x178)))
 (let (($x255 (and $x179 $x253)))
 (let (($x461 (and $x255 $x458)))
 (let (($x120 (and $x461 $x107)))
 (let (($x145 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x123 (and $x145 $x120)))
 (let ((?x41 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x89 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x41 (_ bv3 32)))))
 (let (($x115 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x89)))))))
 (let (($x57 (=> (and $x30 (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x90 $x89)))))))
 (let (($x139 (and $x57 $x123)))
 (let (($x500 (=> $x139 $x499)))
 (not $x500)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x20 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x30 (not $x20)))
 (let (($x495 (or $x20 $x30)))
 (let (($x496 (not $x495)))
 (let (($x42 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x32 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x140 (or $x32 $x42)))
 (let (($x497 (or $x140 $x496)))
 (let (($x498 (= $x497 true)))
 (let (($x499 (= $x498 true)))
 (let ((?x183 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x69 (concat ?x38 (concat ?x249 ?x183)))))
 (let (($x82 (= ?x81 input.dst.llvm-%l)))
 (let (($x85 (= $x82 true)))
 (let (($x102 (= $x85 true)))
 (let ((?x374 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x377 (concat ?x374 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x403 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x393 (concat ?x403 (concat ?x380 ?x377))))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv1 32))) (select input.dst.llvm-mem ?x393))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv2 32))) ?x169))))
 (let (($x449 (= input.spec-%var-l-0.2.1.2.0 ?x182)))
 (let (($x382 (and $x449 true)))
 (let (($x262 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x441 (=> $x262 $x382)))
 (let (($x321 (= $x262 (bvuge (ite (= (_ bv0 32) ?x393) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x175 (= false false)))
 (let (($x173 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x178 (=> $x173 $x175)))
 (let (($x84 (= $x173 (= (ite (= (_ bv0 32) ?x393) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x373 (and $x84 $x178)))
 (let (($x411 (and $x373 $x321)))
 (let (($x366 (and $x411 $x441)))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x314)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x312)))
 (let (($x292 (= input.spec-%var-l-0.2.0 ?x296)))
 (let (($x364 (and $x292 $x366)))
 (let (($x365 (=> $x32 $x364)))
 (let (($x47 (= $x32 (bvuge (ite $x20 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x86 (=> $x42 $x175)))
 (let (($x470 (= $x42 (= (ite $x20 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x43 (and $x470 $x86)))
 (let (($x207 (and $x43 $x47)))
 (let (($x355 (and $x207 $x365)))
 (let (($x138 (= $x355 true)))
 (let (($x367 (= $x138 true)))
 (let (($x445 (= $x367 true)))
 (let (($x34 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x36 (= $x34 true)))
 (let (($x52 (= $x36 true)))
 (let (($x53 (= $x52 true)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x111)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x116 $x109)))
 (let (($x105 (and $x110 $x112)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x100 $x105)))
 (let (($x119 (= $x106 true)))
 (let (($x16 (= $x119 true)))
 (let (($x35 (= $x16 true)))
 (let (($x76 (and $x35 $x53)))
 (let (($x188 (and $x76 $x445)))
 (let (($x103 (and $x188 $x102)))
 (let (($x144 (and $x175 $x103)))
 (let (($x160 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x88 (and $x160 true)))
 (let (($x436 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x147 (=> $x436 $x88)))
 (let (($x92 (= $x436 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x352 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x444 (=> $x352 $x175)))
 (let (($x50 (= $x352 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x146 (and $x50 $x444)))
 (let (($x149 (and $x146 $x92)))
 (let (($x73 (and $x149 $x147)))
 (let (($x389 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x91 (and $x389 $x73)))
 (let (($x93 (=> $x262 $x91)))
 (let (($x51 (= $x262 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x137 (= $x173 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x72 (and $x137 $x178)))
 (let (($x71 (and $x72 $x51)))
 (let (($x94 (and $x71 $x93)))
 (let (($x108 (and $x94 $x144)))
 (let (($x319 (=> $x436 true)))
 (let (($x331 (= $x436 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x322 (= $x352 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x332 (and $x322 $x444)))
 (let (($x326 (and $x332 $x331)))
 (let (($x320 (and $x326 $x319)))
 (let (($x282 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x328 (and $x282 $x320)))
 (let (($x335 (=> $x262 $x328)))
 (let (($x275 (= $x262 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x219 (= $x173 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x220 (and $x219 $x178)))
 (let (($x471 (and $x220 $x275)))
 (let (($x316 (and $x471 $x335)))
 (let (($x196 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x317 (and $x196 $x316)))
 (let (($x107 (and $x317 $x108)))
 (let (($x453 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x457 (and $x453 true)))
 (let (($x459 (=> $x436 $x457)))
 (let (($x439 (= $x436 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x385 (= $x352 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x447 (and $x385 $x444)))
 (let (($x432 (and $x447 $x439)))
 (let (($x460 (and $x432 $x459)))
 (let (($x307 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x465 (and $x307 $x460)))
 (let (($x458 (=> $x262 $x465)))
 (let (($x253 (= $x262 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x174 (= $x173 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x179 (and $x174 $x178)))
 (let (($x255 (and $x179 $x253)))
 (let (($x461 (and $x255 $x458)))
 (let (($x120 (and $x461 $x107)))
 (let (($x145 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x123 (and $x145 $x120)))
 (let ((?x41 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x89 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x41 (_ bv3 32)))))
 (let (($x115 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x89)))))))
 (let (($x57 (=> (and $x30 (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x90 $x89)))))))
 (let (($x139 (and $x57 $x123)))
 (let (($x500 (=> $x139 $x499)))
 (not $x500)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310255/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x546 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x550 (concat (select input.dst.llvm-mem (bvadd ?x546 (_ bv1 32))) (select input.dst.llvm-mem ?x546))))
 (let ((?x556 (concat (select input.dst.llvm-mem (bvadd ?x546 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x546 (_ bv2 32))) ?x550))))
 (let ((?x532 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x529 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x522 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x533 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x545 (concat ?x533 (concat ?x522 (concat ?x529 ?x532)))))
 (let ((?x531 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x579 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x580 (concat ?x579 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x582 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x77 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x115 (bvadd ?x77 (_ bv3 32))))
 (let ((?x585 (concat (select input.dst.llvm-mem ?x115) (concat ?x582 ?x580))))
 (let (($x661 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x585 ?x531 false ?x545 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x556)))
 (let (($x634 (= $x661 true)))
 (let (($x635 (= $x634 true)))
 (let ((?x509 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x506 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x440 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x510 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x558 (concat ?x510 (concat ?x440 (concat ?x506 ?x509)))))
 (let (($x599 (= ?x558 input.dst.llvm-%l)))
 (let (($x600 (= $x599 true)))
 (let (($x601 (= $x600 true)))
 (let (($x587 (= (bvand ?x585 (_ bv4294967288 32)) ?x585)))
 (let (($x576 (= (bvand ?x77 (_ bv4294967292 32)) ?x77)))
 (let (($x588 (and $x576 $x587)))
 (let (($x572 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x573 (and true $x572)))
 (let (($x567 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x77 (bvsub ?x77 (_ bv4 32))) (bvult ?x77 (bvsub ?x77 (_ bv4 32))))))
 (let (($x591 (and (and (and $x567 $x573) $x576) $x588)))
 (let (($x592 (= true $x591)))
 (let (($x13 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x56 (not $x13)))
 (let (($x593 (=> $x56 $x592)))
 (let (($x559 (= input.dst.llvm-%l ?x558)))
 (let ((?x512 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x515 (= (_ bv0 32) ?x512)))
 (let ((?x517 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x513 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x517)))
 (let (($x516 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x514 (and $x516 $x513)))
 (let (($x518 (and $x514 $x515)))
 (let (($x520 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x521 (and $x520 $x518)))
 (let (($x560 (and $x521 $x559)))
 (let (($x123 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x561 (and $x123 $x560)))
 (let ((?x421 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x429 (concat ?x421 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x301 (concat ?x356 (concat ?x98 ?x429))))
 (let ((?x534 (bvadd ?x301 (_ bv4 32))))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x534 (_ bv1 32))) (select input.dst.llvm-mem ?x534))))
 (let ((?x544 (concat (select input.dst.llvm-mem (bvadd ?x534 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x534 (_ bv2 32))) ?x538))))
 (let (($x557 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x544 ?x531 false ?x545 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x556)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x217))))
 (let (($x148 (= input.spec-%var-l-0.2.1.2.0 ?x272)))
 (let (($x358 (and $x148 $x557)))
 (let (($x439 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x361 (=> $x439 $x358)))
 (let (($x315 (= $x439 (bvuge (ite (= (_ bv0 32) ?x301) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x179 (= false false)))
 (let (($x78 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x90 (=> $x78 $x179)))
 (let (($x49 (= $x78 (= (ite (= (_ bv0 32) ?x301) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x25 (and $x49 $x90)))
 (let (($x97 (and $x25 $x315)))
 (let (($x450 (and $x97 $x361)))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x270)))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x273)))
 (let (($x278 (= input.spec-%var-l-0.2.0 ?x346)))
 (let (($x435 (and $x278 $x450)))
 (let (($x476 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x437 (=> $x476 $x435)))
 (let (($x494 (= $x476 (bvuge (ite $x13 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x489 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x483 (=> $x489 $x179)))
 (let (($x480 (= $x489 (= (ite $x13 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x472 (and $x480 $x483)))
 (let (($x186 (and $x472 $x494)))
 (let (($x511 (and $x186 $x437)))
 (let (($x562 (and $x511 $x561)))
 (let (($x594 (and $x562 $x593)))
 (let (($x595 (= $x594 true)))
 (let (($x596 (= $x595 true)))
 (let (($x597 (= $x596 true)))
 (let (($x496 (= $x56 true)))
 (let (($x497 (= $x496 true)))
 (let (($x498 (= $x497 true)))
 (let (($x139 (= $x123 true)))
 (let (($x140 (= $x139 true)))
 (let (($x495 (= $x140 true)))
 (let (($x499 (and $x495 $x498)))
 (let (($x598 (and $x499 $x597)))
 (let (($x602 (and $x598 $x601)))
 (let (($x603 (and $x476 $x602)))
 (let (($x604 (and $x179 $x603)))
 (let (($x102 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x38 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x183 (and $x38 $x102)))
 (let (($x419 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x81 (=> $x419 $x183)))
 (let (($x445 (= $x419 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x332 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x328 (=> $x332 $x179)))
 (let (($x366 (= $x332 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x355 (and $x366 $x328)))
 (let (($x188 (and $x355 $x445)))
 (let (($x85 (and $x188 $x81)))
 (let (($x443 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x263 (and $x443 $x85)))
 (let (($x11 (=> $x439 $x263)))
 (let (($x177 (= $x439 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x84 (= $x78 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x373 (and $x84 $x90)))
 (let (($x181 (and $x373 $x177)))
 (let (($x103 (and $x181 $x11)))
 (let (($x605 (and $x103 $x604)))
 (let (($x380 (=> $x419 true)))
 (let (($x407 (= $x419 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x349 (= $x332 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x296 (and $x349 $x328)))
 (let (($x403 (and $x296 $x407)))
 (let (($x10 (and $x403 $x380)))
 (let (($x74 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x406 (and $x74 $x10)))
 (let (($x371 (=> $x439 $x406)))
 (let (($x43 (= $x439 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x42 (= $x78 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x128 (and $x42 $x90)))
 (let (($x32 (and $x128 $x43)))
 (let (($x374 (and $x32 $x371)))
 (let (($x23 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x7 (and $x23 $x374)))
 (let (($x606 (and $x7 $x605)))
 (let (($x109 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x50 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x160 (and $x50 $x109)))
 (let (($x73 (=> $x419 $x160)))
 (let (($x137 (= $x419 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x329 (= $x332 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x335 (and $x329 $x328)))
 (let (($x72 (and $x335 $x137)))
 (let (($x93 (and $x72 $x73)))
 (let (($x219 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x88 (and $x219 $x93)))
 (let (($x147 (=> $x439 $x88)))
 (let (($x79 (= $x439 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x262 (= $x78 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x351 (and $x262 $x90)))
 (let (($x305 (and $x351 $x79)))
 (let (($x106 (and $x305 $x147)))
 (let (($x607 (and $x106 $x606)))
 (let (($x307 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x608 (and $x307 $x607)))
 (let (($x438 (bvugt ?x77 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x447 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x306 (=> (bvule ?x77 (bvsub (bvadd ?x77 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x447 $x438)))))))
 (let (($x117 (=> (and $x56 (bvule ?x77 (bvsub (bvadd ?x77 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x447 $x438)))))))
 (let (($x609 (and $x117 $x608)))
 (let (($x636 (=> $x609 $x635)))
 (not $x636)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x546 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x550 (concat (select input.dst.llvm-mem (bvadd ?x546 (_ bv1 32))) (select input.dst.llvm-mem ?x546))))
 (let ((?x556 (concat (select input.dst.llvm-mem (bvadd ?x546 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x546 (_ bv2 32))) ?x550))))
 (let ((?x532 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x529 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x522 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x533 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x545 (concat ?x533 (concat ?x522 (concat ?x529 ?x532)))))
 (let ((?x531 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x579 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x580 (concat ?x579 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x582 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x77 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x115 (bvadd ?x77 (_ bv3 32))))
 (let ((?x585 (concat (select input.dst.llvm-mem ?x115) (concat ?x582 ?x580))))
 (let (($x661 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x585 ?x531 false ?x545 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x556)))
 (let (($x634 (= $x661 true)))
 (let (($x635 (= $x634 true)))
 (let ((?x509 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x506 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x440 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x510 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x558 (concat ?x510 (concat ?x440 (concat ?x506 ?x509)))))
 (let (($x599 (= ?x558 input.dst.llvm-%l)))
 (let (($x600 (= $x599 true)))
 (let (($x601 (= $x600 true)))
 (let (($x587 (= (bvand ?x585 (_ bv4294967288 32)) ?x585)))
 (let (($x576 (= (bvand ?x77 (_ bv4294967292 32)) ?x77)))
 (let (($x588 (and $x576 $x587)))
 (let (($x572 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x573 (and true $x572)))
 (let (($x567 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x77 (bvsub ?x77 (_ bv4 32))) (bvult ?x77 (bvsub ?x77 (_ bv4 32))))))
 (let (($x591 (and (and (and $x567 $x573) $x576) $x588)))
 (let (($x592 (= true $x591)))
 (let (($x13 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x56 (not $x13)))
 (let (($x593 (=> $x56 $x592)))
 (let (($x559 (= input.dst.llvm-%l ?x558)))
 (let ((?x512 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x515 (= (_ bv0 32) ?x512)))
 (let ((?x517 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x513 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x517)))
 (let (($x516 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x514 (and $x516 $x513)))
 (let (($x518 (and $x514 $x515)))
 (let (($x520 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x521 (and $x520 $x518)))
 (let (($x560 (and $x521 $x559)))
 (let (($x123 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x561 (and $x123 $x560)))
 (let ((?x421 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x429 (concat ?x421 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x301 (concat ?x356 (concat ?x98 ?x429))))
 (let ((?x534 (bvadd ?x301 (_ bv4 32))))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x534 (_ bv1 32))) (select input.dst.llvm-mem ?x534))))
 (let ((?x544 (concat (select input.dst.llvm-mem (bvadd ?x534 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x534 (_ bv2 32))) ?x538))))
 (let (($x557 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x544 ?x531 false ?x545 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x556)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x217))))
 (let (($x148 (= input.spec-%var-l-0.2.1.2.0 ?x272)))
 (let (($x358 (and $x148 $x557)))
 (let (($x439 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x361 (=> $x439 $x358)))
 (let (($x315 (= $x439 (bvuge (ite (= (_ bv0 32) ?x301) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x179 (= false false)))
 (let (($x78 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x90 (=> $x78 $x179)))
 (let (($x49 (= $x78 (= (ite (= (_ bv0 32) ?x301) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x25 (and $x49 $x90)))
 (let (($x97 (and $x25 $x315)))
 (let (($x450 (and $x97 $x361)))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x270)))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x273)))
 (let (($x278 (= input.spec-%var-l-0.2.0 ?x346)))
 (let (($x435 (and $x278 $x450)))
 (let (($x476 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x437 (=> $x476 $x435)))
 (let (($x494 (= $x476 (bvuge (ite $x13 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x489 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x483 (=> $x489 $x179)))
 (let (($x480 (= $x489 (= (ite $x13 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x472 (and $x480 $x483)))
 (let (($x186 (and $x472 $x494)))
 (let (($x511 (and $x186 $x437)))
 (let (($x562 (and $x511 $x561)))
 (let (($x594 (and $x562 $x593)))
 (let (($x595 (= $x594 true)))
 (let (($x596 (= $x595 true)))
 (let (($x597 (= $x596 true)))
 (let (($x496 (= $x56 true)))
 (let (($x497 (= $x496 true)))
 (let (($x498 (= $x497 true)))
 (let (($x139 (= $x123 true)))
 (let (($x140 (= $x139 true)))
 (let (($x495 (= $x140 true)))
 (let (($x499 (and $x495 $x498)))
 (let (($x598 (and $x499 $x597)))
 (let (($x602 (and $x598 $x601)))
 (let (($x603 (and $x476 $x602)))
 (let (($x604 (and $x179 $x603)))
 (let (($x102 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x38 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x183 (and $x38 $x102)))
 (let (($x419 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x81 (=> $x419 $x183)))
 (let (($x445 (= $x419 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x332 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x328 (=> $x332 $x179)))
 (let (($x366 (= $x332 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x355 (and $x366 $x328)))
 (let (($x188 (and $x355 $x445)))
 (let (($x85 (and $x188 $x81)))
 (let (($x443 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x263 (and $x443 $x85)))
 (let (($x11 (=> $x439 $x263)))
 (let (($x177 (= $x439 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x84 (= $x78 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x373 (and $x84 $x90)))
 (let (($x181 (and $x373 $x177)))
 (let (($x103 (and $x181 $x11)))
 (let (($x605 (and $x103 $x604)))
 (let (($x380 (=> $x419 true)))
 (let (($x407 (= $x419 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x349 (= $x332 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x296 (and $x349 $x328)))
 (let (($x403 (and $x296 $x407)))
 (let (($x10 (and $x403 $x380)))
 (let (($x74 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x406 (and $x74 $x10)))
 (let (($x371 (=> $x439 $x406)))
 (let (($x43 (= $x439 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x42 (= $x78 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x128 (and $x42 $x90)))
 (let (($x32 (and $x128 $x43)))
 (let (($x374 (and $x32 $x371)))
 (let (($x23 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x7 (and $x23 $x374)))
 (let (($x606 (and $x7 $x605)))
 (let (($x109 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x50 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x160 (and $x50 $x109)))
 (let (($x73 (=> $x419 $x160)))
 (let (($x137 (= $x419 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x329 (= $x332 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x335 (and $x329 $x328)))
 (let (($x72 (and $x335 $x137)))
 (let (($x93 (and $x72 $x73)))
 (let (($x219 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x88 (and $x219 $x93)))
 (let (($x147 (=> $x439 $x88)))
 (let (($x79 (= $x439 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x262 (= $x78 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x351 (and $x262 $x90)))
 (let (($x305 (and $x351 $x79)))
 (let (($x106 (and $x305 $x147)))
 (let (($x607 (and $x106 $x606)))
 (let (($x307 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x608 (and $x307 $x607)))
 (let (($x438 (bvugt ?x77 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x447 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x306 (=> (bvule ?x77 (bvsub (bvadd ?x77 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x447 $x438)))))))
 (let (($x117 (=> (and $x56 (bvule ?x77 (bvsub (bvadd ?x77 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x447 $x438)))))))
 (let (($x609 (and $x117 $x608)))
 (let (($x636 (=> $x609 $x635)))
 (not $x636)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-l-0.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b10000000000000000000000000000000)
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_55)
(= input.dst.llvm-mem @fun_51)
(function @fun_55
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_55 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 false #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (=
  (@fun_55 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_51
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_51 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_13980 (_ BitVec 32)) (BOUND_VARIABLE_13981 (_ BitVec 32)) (BOUND_VARIABLE_13982 (_ BitVec 32)) (BOUND_VARIABLE_13983 Bool) (BOUND_VARIABLE_13984 (_ BitVec 32)) (BOUND_VARIABLE_13985 (_ BitVec 32)) (BOUND_VARIABLE_13986 (_ BitVec 32)) (BOUND_VARIABLE_13987 (_ BitVec 32)) (BOUND_VARIABLE_13988 (_ BitVec 32)) (BOUND_VARIABLE_13989 (_ BitVec 32)) (BOUND_VARIABLE_13990 Bool) (BOUND_VARIABLE_13991 (_ BitVec 32)) (BOUND_VARIABLE_13992 (_ BitVec 32)) (BOUND_VARIABLE_13993 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4275697396 32) (_ bv120 8)) (_ bv4275697397 32) (_ bv47 8)) (_ bv4275697398 32) (_ bv208 8)) (_ bv4275697399 32) (_ bv213 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv3587190648 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4275697396 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4275697396 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4275697399 32))
(define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 () (_ BitVec 32)
    #x80000080)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000080)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32)
    #x80000080)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
                     #x00000004
                     #x80)
              #x80000003
              #x80)
       #x80000003
       #x80))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x7fffffff)
              (= x!8 #x00000080)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x7fffffff)
              (= x!13 #x80000080))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x7fffffff)
              (= x!8 #x00000080)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x7fffffff)
              (= x!13 #x00000080))
      false
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x7fffffff)
              (= x!8 #x80000080)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x7fffffff)
              (= x!13 #x80000080))
      false
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x7fffffff)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x7fffffff)
              (= x!13 #x00000080))
      false
      false)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310255/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.87f4b9bc4173dbdb489f8cc157ba3577 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.2 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.2 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x639 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x651 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x656 (concat (select input.dst.llvm-mem (bvadd ?x651 (_ bv1 32))) (select input.dst.llvm-mem ?x651))))
 (let ((?x640 (concat (select input.dst.llvm-mem (bvadd ?x651 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x651 (_ bv2 32))) ?x656))))
 (let ((?x614 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x619 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x649 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x654 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x368 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x370 (concat ?x368 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x369 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x436 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x89 (bvadd ?x436 (_ bv3 32))))
 (let ((?x412 (concat (select input.dst.llvm-mem ?x89) (concat ?x369 ?x370))))
 (let (($x642 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x412 (concat ?x654 (concat ?x649 (concat ?x619 ?x614))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x640 ?x639 false)))
 (let (($x137 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x478 (=> $x137 $x642)))
 (let (($x35 (= $x137 (bvuge (ite (= (_ bv0 32) ?x412) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x466 (= false false)))
 (let (($x178 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x332 (=> $x178 $x466)))
 (let (($x364 (= $x178 (= (ite (= (_ bv0 32) ?x412) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x367 (and $x364 $x332)))
 (let (($x34 (and $x367 $x35)))
 (let (($x330 (and $x34 $x478)))
 (let (($x316 (= $x330 true)))
 (let (($x629 (= $x316 true)))
 (let ((?x416 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x392 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x457 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x118 (concat ?x457 (concat ?x392 ?x416)))))
 (let (($x156 (= ?x135 input.dst.llvm-%l)))
 (let (($x391 (= $x156 true)))
 (let (($x161 (= $x391 true)))
 (let (($x318 (= (bvand ?x412 (_ bv4294967288 32)) ?x412)))
 (let (($x417 (= (bvand ?x436 (_ bv4294967292 32)) ?x436)))
 (let (($x265 (and $x417 $x318)))
 (let (($x114 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x63 (and true $x114)))
 (let (($x357 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x436 (bvsub ?x436 (_ bv4 32))) (bvult ?x436 (bvsub ?x436 (_ bv4 32))))))
 (let (($x390 (and (and (and $x357 $x63) $x417) $x265)))
 (let (($x67 (= true $x390)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x13 (not $x18)))
 (let (($x191 (=> $x13 $x67)))
 (let (($x334 (= input.dst.llvm-%l ?x135)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x130)))
 (let ((?x442 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x442)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x396 (and $x5 $x141)))
 (let (($x431 (and $x396 $x59)))
 (let (($x241 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x428 (and $x241 $x431)))
 (let (($x354 (and $x428 $x334)))
 (let (($x529 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x401 (and $x529 $x354)))
 (let ((?x492 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x488 (concat ?x492 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x474 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x228 (concat ?x192 (concat ?x474 ?x488))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x448 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x26))))
 (let (($x27 (= input.spec-%var-l-0.2.1.2.0 ?x448)))
 (let (($x456 (and $x27 true)))
 (let (($x230 (=> $x137 $x456)))
 (let (($x37 (= $x137 (bvuge (ite (= (_ bv0 32) ?x228) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x214 (= $x178 (= (ite (= (_ bv0 32) ?x228) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x24 (and $x214 $x332)))
 (let (($x195 (and $x24 $x37)))
 (let (($x240 (and $x195 $x230)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x119)))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x57)))
 (let (($x65 (= input.spec-%var-l-0.2.0 ?x325)))
 (let (($x233 (and $x65 $x240)))
 (let (($x593 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x40 (=> $x593 $x233)))
 (let (($x595 (= $x593 (bvuge (ite $x18 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x579 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x585 (=> $x579 $x466)))
 (let (($x583 (= $x579 (= (ite $x18 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x586 (and $x583 $x585)))
 (let (($x596 (and $x586 $x595)))
 (let (($x242 (and $x596 $x40)))
 (let (($x413 (and $x242 $x401)))
 (let (($x372 (and $x413 $x191)))
 (let (($x427 (= $x372 true)))
 (let (($x353 (= $x427 true)))
 (let (($x275 (= $x353 true)))
 (let (($x545 (= $x13 true)))
 (let (($x546 (= $x545 true)))
 (let (($x554 (= $x546 true)))
 (let (($x532 (= $x529 true)))
 (let (($x525 (= $x532 true)))
 (let (($x527 (= $x525 true)))
 (let (($x555 (and $x527 $x554)))
 (let (($x471 (and $x555 $x275)))
 (let (($x323 (and $x471 $x161)))
 (let (($x359 (and $x593 $x323)))
 (let (($x360 (and $x466 $x359)))
 (let (($x535 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x538 (and $x535 true)))
 (let (($x349 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x524 (=> $x349 $x538)))
 (let (($x543 (= $x349 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x87 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x291 (=> $x87 $x466)))
 (let (($x283 (= $x87 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x523 (and $x283 $x291)))
 (let (($x539 (and $x523 $x543)))
 (let (($x531 (and $x539 $x524)))
 (let (($x271 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x541 (and $x271 $x531)))
 (let (($x544 (=> $x137 $x541)))
 (let (($x49 (= $x137 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x101 (= $x178 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x301 (and $x101 $x332)))
 (let (($x25 (and $x301 $x49)))
 (let (($x530 (and $x25 $x544)))
 (let (($x200 (and $x530 $x360)))
 (let (($x273 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.87f4b9bc4173dbdb489f8cc157ba3577 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 input.spec-%var-node-0.L1%9%bbentry.1.2.1.2 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.0 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.0 false smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.2)))
 (let (($x336 (=> $x349 $x273)))
 (let (($x476 (= $x349 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x489 (= $x87 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x480 (and $x489 $x291)))
 (let (($x473 (and $x480 $x476)))
 (let (($x337 (and $x473 $x336)))
 (let (($x139 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x186 (and $x139 $x337)))
 (let (($x209 (=> $x137 $x186)))
 (let (($x11 (= $x137 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x102 (= $x178 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x183 (and $x102 $x332)))
 (let (($x103 (and $x183 $x11)))
 (let (($x14 (and $x103 $x209)))
 (let (($x355 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x356 (and $x355 $x14)))
 (let (($x264 (and $x356 $x200)))
 (let (($x402 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x84 (and $x402 true)))
 (let (($x177 (=> $x349 $x84)))
 (let (($x312 (= $x349 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x42 (= $x87 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x74 (and $x42 $x291)))
 (let (($x407 (and $x74 $x312)))
 (let (($x181 (and $x407 $x177)))
 (let (($x109 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x373 (and $x109 $x181)))
 (let (($x411 (=> $x137 $x373)))
 (let (($x116 (= $x137 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x328 (= $x178 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x307 (and $x328 $x332)))
 (let (($x78 (and $x307 $x116)))
 (let (($x166 (and $x78 $x411)))
 (let (($x162 (and $x166 $x264)))
 (let (($x50 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x184 (and $x50 $x162)))
 (let (($x79 (bvugt ?x436 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x458 (=> (bvule ?x436 (bvsub (bvadd ?x436 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x20 $x79)))))))
 (let (($x438 (=> (and $x13 (bvule ?x436 (bvsub (bvadd ?x436 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x20 $x79)))))))
 (let (($x154 (and $x438 $x184)))
 (let (($x621 (=> $x154 $x629)))
 (not $x621)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.87f4b9bc4173dbdb489f8cc157ba3577 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.2 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.2 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x639 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x651 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x656 (concat (select input.dst.llvm-mem (bvadd ?x651 (_ bv1 32))) (select input.dst.llvm-mem ?x651))))
 (let ((?x640 (concat (select input.dst.llvm-mem (bvadd ?x651 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x651 (_ bv2 32))) ?x656))))
 (let ((?x614 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x619 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x649 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x654 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x368 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x370 (concat ?x368 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x369 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x436 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x89 (bvadd ?x436 (_ bv3 32))))
 (let ((?x412 (concat (select input.dst.llvm-mem ?x89) (concat ?x369 ?x370))))
 (let (($x642 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x412 (concat ?x654 (concat ?x649 (concat ?x619 ?x614))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x640 ?x639 false)))
 (let (($x137 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x478 (=> $x137 $x642)))
 (let (($x35 (= $x137 (bvuge (ite (= (_ bv0 32) ?x412) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x466 (= false false)))
 (let (($x178 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x332 (=> $x178 $x466)))
 (let (($x364 (= $x178 (= (ite (= (_ bv0 32) ?x412) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x367 (and $x364 $x332)))
 (let (($x34 (and $x367 $x35)))
 (let (($x330 (and $x34 $x478)))
 (let (($x316 (= $x330 true)))
 (let (($x629 (= $x316 true)))
 (let ((?x416 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x392 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x457 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x118 (concat ?x457 (concat ?x392 ?x416)))))
 (let (($x156 (= ?x135 input.dst.llvm-%l)))
 (let (($x391 (= $x156 true)))
 (let (($x161 (= $x391 true)))
 (let (($x318 (= (bvand ?x412 (_ bv4294967288 32)) ?x412)))
 (let (($x417 (= (bvand ?x436 (_ bv4294967292 32)) ?x436)))
 (let (($x265 (and $x417 $x318)))
 (let (($x114 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x63 (and true $x114)))
 (let (($x357 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x436 (bvsub ?x436 (_ bv4 32))) (bvult ?x436 (bvsub ?x436 (_ bv4 32))))))
 (let (($x390 (and (and (and $x357 $x63) $x417) $x265)))
 (let (($x67 (= true $x390)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x13 (not $x18)))
 (let (($x191 (=> $x13 $x67)))
 (let (($x334 (= input.dst.llvm-%l ?x135)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x130)))
 (let ((?x442 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x442)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x396 (and $x5 $x141)))
 (let (($x431 (and $x396 $x59)))
 (let (($x241 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x428 (and $x241 $x431)))
 (let (($x354 (and $x428 $x334)))
 (let (($x529 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x401 (and $x529 $x354)))
 (let ((?x492 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x488 (concat ?x492 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x474 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x228 (concat ?x192 (concat ?x474 ?x488))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x448 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x26))))
 (let (($x27 (= input.spec-%var-l-0.2.1.2.0 ?x448)))
 (let (($x456 (and $x27 true)))
 (let (($x230 (=> $x137 $x456)))
 (let (($x37 (= $x137 (bvuge (ite (= (_ bv0 32) ?x228) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x214 (= $x178 (= (ite (= (_ bv0 32) ?x228) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x24 (and $x214 $x332)))
 (let (($x195 (and $x24 $x37)))
 (let (($x240 (and $x195 $x230)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x119)))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x57)))
 (let (($x65 (= input.spec-%var-l-0.2.0 ?x325)))
 (let (($x233 (and $x65 $x240)))
 (let (($x593 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x40 (=> $x593 $x233)))
 (let (($x595 (= $x593 (bvuge (ite $x18 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x579 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x585 (=> $x579 $x466)))
 (let (($x583 (= $x579 (= (ite $x18 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x586 (and $x583 $x585)))
 (let (($x596 (and $x586 $x595)))
 (let (($x242 (and $x596 $x40)))
 (let (($x413 (and $x242 $x401)))
 (let (($x372 (and $x413 $x191)))
 (let (($x427 (= $x372 true)))
 (let (($x353 (= $x427 true)))
 (let (($x275 (= $x353 true)))
 (let (($x545 (= $x13 true)))
 (let (($x546 (= $x545 true)))
 (let (($x554 (= $x546 true)))
 (let (($x532 (= $x529 true)))
 (let (($x525 (= $x532 true)))
 (let (($x527 (= $x525 true)))
 (let (($x555 (and $x527 $x554)))
 (let (($x471 (and $x555 $x275)))
 (let (($x323 (and $x471 $x161)))
 (let (($x359 (and $x593 $x323)))
 (let (($x360 (and $x466 $x359)))
 (let (($x535 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x538 (and $x535 true)))
 (let (($x349 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x524 (=> $x349 $x538)))
 (let (($x543 (= $x349 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x87 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x291 (=> $x87 $x466)))
 (let (($x283 (= $x87 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x523 (and $x283 $x291)))
 (let (($x539 (and $x523 $x543)))
 (let (($x531 (and $x539 $x524)))
 (let (($x271 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x541 (and $x271 $x531)))
 (let (($x544 (=> $x137 $x541)))
 (let (($x49 (= $x137 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x101 (= $x178 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x301 (and $x101 $x332)))
 (let (($x25 (and $x301 $x49)))
 (let (($x530 (and $x25 $x544)))
 (let (($x200 (and $x530 $x360)))
 (let (($x273 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.87f4b9bc4173dbdb489f8cc157ba3577 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 input.spec-%var-node-0.L1%9%bbentry.1.2.1.2 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.0 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.0 false smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.2)))
 (let (($x336 (=> $x349 $x273)))
 (let (($x476 (= $x349 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x489 (= $x87 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x480 (and $x489 $x291)))
 (let (($x473 (and $x480 $x476)))
 (let (($x337 (and $x473 $x336)))
 (let (($x139 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x186 (and $x139 $x337)))
 (let (($x209 (=> $x137 $x186)))
 (let (($x11 (= $x137 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x102 (= $x178 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x183 (and $x102 $x332)))
 (let (($x103 (and $x183 $x11)))
 (let (($x14 (and $x103 $x209)))
 (let (($x355 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x356 (and $x355 $x14)))
 (let (($x264 (and $x356 $x200)))
 (let (($x402 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x84 (and $x402 true)))
 (let (($x177 (=> $x349 $x84)))
 (let (($x312 (= $x349 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x42 (= $x87 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x74 (and $x42 $x291)))
 (let (($x407 (and $x74 $x312)))
 (let (($x181 (and $x407 $x177)))
 (let (($x109 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x373 (and $x109 $x181)))
 (let (($x411 (=> $x137 $x373)))
 (let (($x116 (= $x137 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x328 (= $x178 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x307 (and $x328 $x332)))
 (let (($x78 (and $x307 $x116)))
 (let (($x166 (and $x78 $x411)))
 (let (($x162 (and $x166 $x264)))
 (let (($x50 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x184 (and $x50 $x162)))
 (let (($x79 (bvugt ?x436 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x458 (=> (bvule ?x436 (bvsub (bvadd ?x436 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x20 $x79)))))))
 (let (($x438 (=> (and $x13 (bvule ?x436 (bvsub (bvadd ?x436 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x20 $x79)))))))
 (let (($x154 (and $x438 $x184)))
 (let (($x621 (=> $x154 $x629)))
 (not $x621)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.2 #b00000000000000000000000000000000)
(= smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.2 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_40)
(= input.dst.llvm-mem @fun_37)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.87f4b9bc4173dbdb489f8cc157ba3577 @fun_42)
(function @fun_40
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_40 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b11000000000000000000000000000000 #b10000000000000000000000000000000
   #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_37
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_37 #b10000000000000000000000000000011) #b10000000)
 (= (@fun_37 #b10000000000000000000000000000111) #b10000000)
 (default #b00000000))
(function @fun_42
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   Bool (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_42 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_13347 (_ BitVec 32)) (BOUND_VARIABLE_13348 (_ BitVec 32)) (BOUND_VARIABLE_13349 (_ BitVec 32)) (BOUND_VARIABLE_13350 (_ BitVec 32)) (BOUND_VARIABLE_13351 (_ BitVec 32)) (BOUND_VARIABLE_13352 (_ BitVec 32)) (BOUND_VARIABLE_13353 Bool) (BOUND_VARIABLE_13354 (_ BitVec 32)) (BOUND_VARIABLE_13355 (_ BitVec 32)) (BOUND_VARIABLE_13356 (_ BitVec 32)) (BOUND_VARIABLE_13357 (_ BitVec 32)) (BOUND_VARIABLE_13358 (_ BitVec 32)) (BOUND_VARIABLE_13359 (_ BitVec 32)) (BOUND_VARIABLE_13360 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2324168708 32) (_ bv8 8)) (_ bv2324168710 32) (_ bv224 8)) (_ bv2324168711 32) (_ bv2 8)) (_ bv48234508 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv48234504 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2324168708 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2324168708 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2324168711 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.87f4b9bc4173dbdb489f8cc157ba3577 ((BOUND_VARIABLE_13487 (_ BitVec 32)) (BOUND_VARIABLE_13488 (_ BitVec 32)) (BOUND_VARIABLE_13489 (_ BitVec 32)) (BOUND_VARIABLE_13490 (_ BitVec 32)) (BOUND_VARIABLE_13491 (_ BitVec 32)) (BOUND_VARIABLE_13492 (_ BitVec 32)) (BOUND_VARIABLE_13493 Bool) (BOUND_VARIABLE_13494 (_ BitVec 32)) (BOUND_VARIABLE_13495 (_ BitVec 32)) (BOUND_VARIABLE_13496 (_ BitVec 32)) (BOUND_VARIABLE_13497 (_ BitVec 32)) (BOUND_VARIABLE_13498 Bool) (BOUND_VARIABLE_13499 (_ BitVec 32)) (BOUND_VARIABLE_13500 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.2 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x90909090)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x254b43eb)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x90909090)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #xbfb862ac)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #xc79e6d42)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x2d7ca62c)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.2 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x90))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x90909090)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x90909090)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #x90909090)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x90909090)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x90909090)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x90909090)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x90909093)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x90909090)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x90909090)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x90909090)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x90909090)
              (= x!8 #x90909090)
              (= x!9 #x90909090)
              (= x!10 #x90909090)
              (= x!11 #x90909090)
              (= x!12 #x00000001)
              (= x!13 false))
      false
      false))
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.87f4b9bc4173dbdb489f8cc157ba3577 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 Bool)
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 #x00000000)
              (= x!11 false)
              (= x!12 #x00000000)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310255/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x534 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x441 (concat (select input.dst.llvm-mem (bvadd ?x534 (_ bv1 32))) (select input.dst.llvm-mem ?x534))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x534 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x534 (_ bv2 32))) ?x441))))
 (let ((?x380 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x128 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x426 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x206 (concat ?x426 (concat ?x267 (concat ?x128 ?x380)))))
 (let ((?x403 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x290 (concat ?x23 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x406 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x117 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x136 (bvadd ?x117 (_ bv3 32))))
 (let ((?x308 (concat (select input.dst.llvm-mem ?x136) (concat ?x406 ?x290))))
 (let ((?x748 (bvadd ?x308 (_ bv4 32))))
 (let ((?x750 (concat (select input.dst.llvm-mem (bvadd ?x748 (_ bv1 32))) (select input.dst.llvm-mem ?x748))))
 (let ((?x756 (concat (select input.dst.llvm-mem (bvadd ?x748 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x748 (_ bv2 32))) ?x750))))
 (let (($x757 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x756 ?x403 false ?x206 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x85)))
 (let ((?x688 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem ?x308))))
 (let ((?x694 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv2 32))) ?x688))))
 (let (($x695 (= input.spec-%var-l-0.2.1.2.0 ?x694)))
 (let (($x720 (and $x695 $x757)))
 (let (($x84 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x721 (=> $x84 $x720)))
 (let (($x612 (= $x84 (bvuge (ite (= (_ bv0 32) ?x308) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x291 (= false false)))
 (let (($x43 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x74 (=> $x43 $x291)))
 (let (($x633 (= $x43 (= (ite (= (_ bv0 32) ?x308) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x626 (and $x633 $x74)))
 (let (($x623 (and $x626 $x612)))
 (let (($x722 (and $x623 $x721)))
 (let (($x723 (= $x722 true)))
 (let (($x724 (= $x723 true)))
 (let ((?x247 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x232 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x452 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x246 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x246 (concat ?x452 (concat ?x232 ?x247)))))
 (let (($x281 (= ?x120 input.dst.llvm-%l)))
 (let (($x153 (= $x281 true)))
 (let (($x387 (= $x153 true)))
 (let (($x331 (= (bvand ?x308 (_ bv4294967288 32)) ?x308)))
 (let (($x106 (= (bvand ?x117 (_ bv4294967292 32)) ?x117)))
 (let (($x170 (and $x106 $x331)))
 (let (($x100 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x179 (and true $x100)))
 (let (($x494 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x117 (bvsub ?x117 (_ bv4 32))) (bvult ?x117 (bvsub ?x117 (_ bv4 32))))))
 (let (($x418 (and (and (and $x494 $x179) $x106) $x170)))
 (let (($x62 (= true $x418)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x13 (not $x18)))
 (let (($x51 (=> $x13 $x62)))
 (let (($x497 (= input.dst.llvm-%l ?x120)))
 (let ((?x288 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x288)))
 (let ((?x343 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x343)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x258 $x158)))
 (let (($x347 (and $x244 $x259)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x196 $x347)))
 (let (($x498 (and $x229 $x497)))
 (let (($x354 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x123 (and $x354 $x498)))
 (let ((?x637 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x446 (concat ?x637 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x635 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x500 (concat ?x218 (concat ?x635 ?x446))))
 (let ((?x421 (bvadd ?x500 (_ bv4 32))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x421 (_ bv1 32))) (select input.dst.llvm-mem ?x421))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x421 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x421 (_ bv2 32))) ?x315))))
 (let (($x107 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x203 ?x403 false ?x206 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x85)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x500 (_ bv1 32))) (select input.dst.llvm-mem ?x500))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x500 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x500 (_ bv2 32))) ?x293))))
 (let (($x152 (= input.spec-%var-l-0.2.1.2.0 ?x340)))
 (let (($x222 (and $x152 $x107)))
 (let (($x224 (=> $x84 $x222)))
 (let (($x215 (= $x84 (bvuge (ite (= (_ bv0 32) ?x500) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x591 (= $x43 (= (ite (= (_ bv0 32) ?x500) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x592 (and $x591 $x74)))
 (let (($x302 (and $x592 $x215)))
 (let (($x205 (and $x302 $x224)))
 (let ((?x435 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x553 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x435)))
 (let ((?x520 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x553)))
 (let (($x503 (= input.spec-%var-l-0.2.0 ?x520)))
 (let (($x28 (and $x503 $x205)))
 (let (($x652 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x190 (=> $x652 $x28)))
 (let (($x647 (= $x652 (bvuge (ite $x18 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x622 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x643 (=> $x622 $x291)))
 (let (($x651 (= $x622 (= (ite $x18 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x644 (and $x651 $x643)))
 (let (($x640 (and $x644 $x647)))
 (let (($x266 (and $x640 $x190)))
 (let (($x495 (and $x266 $x123)))
 (let (($x320 (and $x495 $x51)))
 (let (($x393 (= $x320 true)))
 (let (($x321 (= $x393 true)))
 (let (($x167 (= $x321 true)))
 (let (($x185 (= $x13 true)))
 (let (($x310 (= $x185 true)))
 (let (($x311 (= $x310 true)))
 (let (($x401 (= $x354 true)))
 (let (($x413 (= $x401 true)))
 (let (($x398 (= $x413 true)))
 (let (($x357 (and $x398 $x311)))
 (let (($x388 (and $x357 $x167)))
 (let (($x289 (and $x388 $x387)))
 (let (($x142 (and $x652 $x289)))
 (let (($x280 (and $x291 $x142)))
 (let (($x392 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x130 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x428 (and $x130 $x392)))
 (let (($x278 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x274 (=> $x278 $x428)))
 (let (($x241 (= $x278 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x480 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x338 (=> $x480 $x291)))
 (let (($x230 (= $x480 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x40 (and $x230 $x338)))
 (let (($x5 (and $x40 $x241)))
 (let (($x131 (and $x5 $x274)))
 (let (($x420 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x422 (and $x420 $x131)))
 (let (($x118 (=> $x84 $x422)))
 (let (($x195 (= $x84 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x239 (= $x43 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x214 (and $x239 $x74)))
 (let (($x410 (and $x214 $x195)))
 (let (($x416 (and $x410 $x118)))
 (let (($x198 (and $x416 $x280)))
 (let (($x475 (=> $x278 true)))
 (let (($x468 (= $x278 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x384 (= $x480 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x57 (and $x384 $x338)))
 (let (($x482 (and $x57 $x468)))
 (let (($x474 (and $x482 $x475)))
 (let (($x596 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x65 (and $x596 $x474)))
 (let (($x192 (=> $x84 $x65)))
 (let (($x585 (= $x84 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x578 (= $x43 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x579 (and $x578 $x74)))
 (let (($x586 (and $x579 $x585)))
 (let (($x490 (and $x586 $x192)))
 (let (($x532 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x492 (and $x532 $x490)))
 (let (($x434 (and $x492 $x198)))
 (let (($x535 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x425 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x25 (and $x425 $x535)))
 (let (($x199 (=> $x278 $x25)))
 (let (($x346 (= $x278 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x257 (= $x480 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x344 (and $x257 $x338)))
 (let (($x362 (and $x344 $x346)))
 (let (($x283 (and $x362 $x199)))
 (let (($x102 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x286 (and $x102 $x283)))
 (let (($x271 (=> $x84 $x286)))
 (let (($x402 (= $x84 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x42 (= $x43 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x349 (and $x42 $x74)))
 (let (($x177 (and $x349 $x402)))
 (let (($x544 (and $x177 $x271)))
 (let (($x327 (and $x544 $x434)))
 (let (($x332 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x169 (and $x332 $x327)))
 (let (($x319 (bvugt ?x117 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x50 (=> (bvule ?x117 (bvsub (bvadd ?x117 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x319)))))))
 (let (($x419 (=> (and $x13 (bvule ?x117 (bvsub (bvadd ?x117 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x95 $x319)))))))
 (let (($x176 (and $x419 $x169)))
 (let (($x735 (=> $x176 $x724)))
 (not $x735))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x534 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x441 (concat (select input.dst.llvm-mem (bvadd ?x534 (_ bv1 32))) (select input.dst.llvm-mem ?x534))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x534 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x534 (_ bv2 32))) ?x441))))
 (let ((?x380 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x128 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x426 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x206 (concat ?x426 (concat ?x267 (concat ?x128 ?x380)))))
 (let ((?x403 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x290 (concat ?x23 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x406 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x117 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x136 (bvadd ?x117 (_ bv3 32))))
 (let ((?x308 (concat (select input.dst.llvm-mem ?x136) (concat ?x406 ?x290))))
 (let ((?x748 (bvadd ?x308 (_ bv4 32))))
 (let ((?x750 (concat (select input.dst.llvm-mem (bvadd ?x748 (_ bv1 32))) (select input.dst.llvm-mem ?x748))))
 (let ((?x756 (concat (select input.dst.llvm-mem (bvadd ?x748 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x748 (_ bv2 32))) ?x750))))
 (let (($x757 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x756 ?x403 false ?x206 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x85)))
 (let ((?x688 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem ?x308))))
 (let ((?x694 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv2 32))) ?x688))))
 (let (($x695 (= input.spec-%var-l-0.2.1.2.0 ?x694)))
 (let (($x720 (and $x695 $x757)))
 (let (($x84 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x721 (=> $x84 $x720)))
 (let (($x612 (= $x84 (bvuge (ite (= (_ bv0 32) ?x308) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x291 (= false false)))
 (let (($x43 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x74 (=> $x43 $x291)))
 (let (($x633 (= $x43 (= (ite (= (_ bv0 32) ?x308) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x626 (and $x633 $x74)))
 (let (($x623 (and $x626 $x612)))
 (let (($x722 (and $x623 $x721)))
 (let (($x723 (= $x722 true)))
 (let (($x724 (= $x723 true)))
 (let ((?x247 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x232 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x452 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x246 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x246 (concat ?x452 (concat ?x232 ?x247)))))
 (let (($x281 (= ?x120 input.dst.llvm-%l)))
 (let (($x153 (= $x281 true)))
 (let (($x387 (= $x153 true)))
 (let (($x331 (= (bvand ?x308 (_ bv4294967288 32)) ?x308)))
 (let (($x106 (= (bvand ?x117 (_ bv4294967292 32)) ?x117)))
 (let (($x170 (and $x106 $x331)))
 (let (($x100 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x179 (and true $x100)))
 (let (($x494 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x117 (bvsub ?x117 (_ bv4 32))) (bvult ?x117 (bvsub ?x117 (_ bv4 32))))))
 (let (($x418 (and (and (and $x494 $x179) $x106) $x170)))
 (let (($x62 (= true $x418)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x13 (not $x18)))
 (let (($x51 (=> $x13 $x62)))
 (let (($x497 (= input.dst.llvm-%l ?x120)))
 (let ((?x288 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x288)))
 (let ((?x343 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x343)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x258 $x158)))
 (let (($x347 (and $x244 $x259)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x196 $x347)))
 (let (($x498 (and $x229 $x497)))
 (let (($x354 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x123 (and $x354 $x498)))
 (let ((?x637 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x446 (concat ?x637 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x635 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x500 (concat ?x218 (concat ?x635 ?x446))))
 (let ((?x421 (bvadd ?x500 (_ bv4 32))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x421 (_ bv1 32))) (select input.dst.llvm-mem ?x421))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x421 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x421 (_ bv2 32))) ?x315))))
 (let (($x107 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x203 ?x403 false ?x206 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x85)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x500 (_ bv1 32))) (select input.dst.llvm-mem ?x500))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x500 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x500 (_ bv2 32))) ?x293))))
 (let (($x152 (= input.spec-%var-l-0.2.1.2.0 ?x340)))
 (let (($x222 (and $x152 $x107)))
 (let (($x224 (=> $x84 $x222)))
 (let (($x215 (= $x84 (bvuge (ite (= (_ bv0 32) ?x500) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x591 (= $x43 (= (ite (= (_ bv0 32) ?x500) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x592 (and $x591 $x74)))
 (let (($x302 (and $x592 $x215)))
 (let (($x205 (and $x302 $x224)))
 (let ((?x435 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x553 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x435)))
 (let ((?x520 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x553)))
 (let (($x503 (= input.spec-%var-l-0.2.0 ?x520)))
 (let (($x28 (and $x503 $x205)))
 (let (($x652 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x190 (=> $x652 $x28)))
 (let (($x647 (= $x652 (bvuge (ite $x18 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x622 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x643 (=> $x622 $x291)))
 (let (($x651 (= $x622 (= (ite $x18 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x644 (and $x651 $x643)))
 (let (($x640 (and $x644 $x647)))
 (let (($x266 (and $x640 $x190)))
 (let (($x495 (and $x266 $x123)))
 (let (($x320 (and $x495 $x51)))
 (let (($x393 (= $x320 true)))
 (let (($x321 (= $x393 true)))
 (let (($x167 (= $x321 true)))
 (let (($x185 (= $x13 true)))
 (let (($x310 (= $x185 true)))
 (let (($x311 (= $x310 true)))
 (let (($x401 (= $x354 true)))
 (let (($x413 (= $x401 true)))
 (let (($x398 (= $x413 true)))
 (let (($x357 (and $x398 $x311)))
 (let (($x388 (and $x357 $x167)))
 (let (($x289 (and $x388 $x387)))
 (let (($x142 (and $x652 $x289)))
 (let (($x280 (and $x291 $x142)))
 (let (($x392 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x130 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x428 (and $x130 $x392)))
 (let (($x278 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x274 (=> $x278 $x428)))
 (let (($x241 (= $x278 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x480 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x338 (=> $x480 $x291)))
 (let (($x230 (= $x480 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x40 (and $x230 $x338)))
 (let (($x5 (and $x40 $x241)))
 (let (($x131 (and $x5 $x274)))
 (let (($x420 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x422 (and $x420 $x131)))
 (let (($x118 (=> $x84 $x422)))
 (let (($x195 (= $x84 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x239 (= $x43 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x214 (and $x239 $x74)))
 (let (($x410 (and $x214 $x195)))
 (let (($x416 (and $x410 $x118)))
 (let (($x198 (and $x416 $x280)))
 (let (($x475 (=> $x278 true)))
 (let (($x468 (= $x278 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x384 (= $x480 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x57 (and $x384 $x338)))
 (let (($x482 (and $x57 $x468)))
 (let (($x474 (and $x482 $x475)))
 (let (($x596 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x65 (and $x596 $x474)))
 (let (($x192 (=> $x84 $x65)))
 (let (($x585 (= $x84 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x578 (= $x43 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x579 (and $x578 $x74)))
 (let (($x586 (and $x579 $x585)))
 (let (($x490 (and $x586 $x192)))
 (let (($x532 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x492 (and $x532 $x490)))
 (let (($x434 (and $x492 $x198)))
 (let (($x535 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x425 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x25 (and $x425 $x535)))
 (let (($x199 (=> $x278 $x25)))
 (let (($x346 (= $x278 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x257 (= $x480 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x344 (and $x257 $x338)))
 (let (($x362 (and $x344 $x346)))
 (let (($x283 (and $x362 $x199)))
 (let (($x102 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x286 (and $x102 $x283)))
 (let (($x271 (=> $x84 $x286)))
 (let (($x402 (= $x84 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x42 (= $x43 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x349 (and $x42 $x74)))
 (let (($x177 (and $x349 $x402)))
 (let (($x544 (and $x177 $x271)))
 (let (($x327 (and $x544 $x434)))
 (let (($x332 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x169 (and $x332 $x327)))
 (let (($x319 (bvugt ?x117 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x50 (=> (bvule ?x117 (bvsub (bvadd ?x117 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x319)))))))
 (let (($x419 (=> (and $x13 (bvule ?x117 (bvsub (bvadd ?x117 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x95 $x319)))))))
 (let (($x176 (and $x419 $x169)))
 (let (($x735 (=> $x176 $x724)))
 (not $x735))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310255/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x383 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x462 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv1 32))) (select input.dst.llvm-mem ?x383))))
 (let ((?x479 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv2 32))) ?x462))))
 (let ((?x604 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x608 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x597 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x598 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x133 (concat ?x598 (concat ?x597 (concat ?x608 ?x604)))))
 (let ((?x601 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x140 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x601 false ?x133 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x479)))
 (let (($x101 (= $x140 true)))
 (let (($x301 (= $x101 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x469 (concat ?x55 (concat ?x15 (concat ?x22 ?x146)))))
 (let (($x324 (= ?x469 input.dst.llvm-%l)))
 (let (($x194 (= $x324 true)))
 (let (($x26 (= $x194 true)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x73 (concat ?x160 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x39 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x165 (bvadd ?x39 (_ bv3 32))))
 (let ((?x295 (concat (select input.dst.llvm-mem ?x165) (concat ?x268 ?x73))))
 (let (($x243 (= (bvand ?x295 (_ bv4294967288 32)) ?x295)))
 (let (($x193 (= (bvand ?x39 (_ bv4294967292 32)) ?x39)))
 (let (($x94 (and $x193 $x243)))
 (let (($x33 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x213 (and true $x33)))
 (let (($x231 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x39 (bvsub ?x39 (_ bv4 32))) (bvult ?x39 (bvsub ?x39 (_ bv4 32))))))
 (let (($x273 (and (and (and $x231 $x213) $x193) $x94)))
 (let (($x336 (= true $x273)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x436 (not $x117)))
 (let (($x477 (=> $x436 $x336)))
 (let (($x163 (= input.dst.llvm-%l ?x469)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x75)))
 (let ((?x202 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x202)))
 (let (($x455 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x484 (and $x455 $x125)))
 (let (($x183 (and $x484 $x54)))
 (let (($x296 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (and $x296 $x183)))
 (let (($x124 (and $x312 $x163)))
 (let (($x254 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x189 (and $x254 $x124)))
 (let ((?x471 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x156 (concat ?x471 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x449 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x34 (concat ?x35 (concat ?x449 ?x156))))
 (let ((?x607 (bvadd ?x34 (_ bv4 32))))
 (let ((?x373 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv1 32))) (select input.dst.llvm-mem ?x607))))
 (let ((?x465 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv2 32))) ?x373))))
 (let (($x256 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x465 ?x601 false ?x133 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x479)))
 (let ((?x574 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x573 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x574))))
 (let (($x443 (= input.spec-%var-l-0.2.1.2.0 ?x573)))
 (let (($x9 (and $x443 $x256)))
 (let (($x523 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x8 (=> $x523 $x9)))
 (let (($x649 (= $x523 (bvuge (ite (= (_ bv0 32) ?x34) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x338 (= false false)))
 (let (($x277 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x344 (=> $x277 $x338)))
 (let (($x318 (= $x277 (= (ite (= (_ bv0 32) ?x34) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x265 (and $x318 $x344)))
 (let (($x616 (and $x265 $x649)))
 (let (($x21 (and $x616 $x8)))
 (let ((?x720 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x723 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x720)))
 (let ((?x743 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x723)))
 (let (($x305 (= input.spec-%var-l-0.2.0 ?x743)))
 (let (($x159 (and $x305 $x21)))
 (let (($x281 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x197 (=> $x281 $x159)))
 (let (($x387 (= $x281 (bvuge (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x331 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x51 (=> $x331 $x338)))
 (let (($x62 (= $x331 (= (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x320 (and $x62 $x51)))
 (let (($x289 (and $x320 $x387)))
 (let (($x126 (and $x289 $x197)))
 (let (($x121 (and $x126 $x189)))
 (let (($x228 (and $x121 $x477)))
 (let (($x24 (= $x228 true)))
 (let (($x225 (= $x24 true)))
 (let (($x375 (= $x225 true)))
 (let (($x542 (= $x117 true)))
 (let (($x540 (= $x542 true)))
 (let (($x272 (= $x540 true)))
 (let (($x81 (= $x254 true)))
 (let (($x365 (= $x81 true)))
 (let (($x445 (= $x365 true)))
 (let (($x441 (and $x445 $x272)))
 (let (($x414 (and $x441 $x375)))
 (let (($x337 (and $x414 $x26)))
 (let (($x141 (and $x281 $x337)))
 (let (($x409 (and $x338 $x141)))
 (let (($x128 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x467 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x403 (and $x467 $x128)))
 (let (($x384 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x313 (=> $x384 $x403)))
 (let (($x221 (= $x384 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x555 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x547 (=> $x555 $x338)))
 (let (($x152 (= $x555 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x10 (and $x152 $x547)))
 (let (($x122 (and $x10 $x221)))
 (let (($x88 (and $x122 $x313)))
 (let (($x350 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x32 (and $x350 $x88)))
 (let (($x426 (=> $x523 $x32)))
 (let (($x17 (= $x523 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x605 (= $x277 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x606 (and $x605 $x344)))
 (let (($x215 (and $x606 $x17)))
 (let (($x380 (and $x215 $x426)))
 (let (($x448 (and $x380 $x409)))
 (let (($x636 (=> $x384 true)))
 (let (($x520 (= $x384 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x557 (= $x555 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x511 (and $x557 $x547)))
 (let (($x503 (and $x511 $x520)))
 (let (($x218 (and $x503 $x636)))
 (let (($x656 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x553 (and $x656 $x218)))
 (let (($x662 (=> $x523 $x553)))
 (let (($x655 (= $x523 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x311 (= $x277 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x357 (and $x311 $x344)))
 (let (($x651 (and $x357 $x655)))
 (let (($x634 (and $x651 $x662)))
 (let (($x334 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x635 (and $x334 $x634)))
 (let (($x242 (and $x635 $x448)))
 (let (($x130 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x211 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x410 (and $x211 $x130)))
 (let (($x27 (=> $x384 $x410)))
 (let (($x119 (= $x384 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x578 (= $x555 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x596 (and $x578 $x547)))
 (let (($x468 (and $x596 $x119)))
 (let (($x230 (and $x468 $x27)))
 (let (($x535 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x363 (and $x535 $x230)))
 (let (($x420 (=> $x523 $x363)))
 (let (($x425 (= $x523 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x257 (= $x277 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x278 (and $x257 $x344)))
 (let (($x543 (and $x278 $x425)))
 (let (($x131 (and $x543 $x420)))
 (let (($x240 (and $x131 $x242)))
 (let (($x74 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x236 (and $x74 $x240)))
 (let (($x438 (bvugt ?x39 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x458 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x332 (=> (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x458 $x438)))))))
 (let (($x89 (=> (and $x436 (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x458 $x438)))))))
 (let (($x442 (and $x89 $x236)))
 (let (($x59 (=> $x442 $x301)))
 (not $x59)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x383 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x462 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv1 32))) (select input.dst.llvm-mem ?x383))))
 (let ((?x479 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv2 32))) ?x462))))
 (let ((?x604 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x608 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x597 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x598 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x133 (concat ?x598 (concat ?x597 (concat ?x608 ?x604)))))
 (let ((?x601 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x140 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x601 false ?x133 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x479)))
 (let (($x101 (= $x140 true)))
 (let (($x301 (= $x101 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x469 (concat ?x55 (concat ?x15 (concat ?x22 ?x146)))))
 (let (($x324 (= ?x469 input.dst.llvm-%l)))
 (let (($x194 (= $x324 true)))
 (let (($x26 (= $x194 true)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x73 (concat ?x160 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x39 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x165 (bvadd ?x39 (_ bv3 32))))
 (let ((?x295 (concat (select input.dst.llvm-mem ?x165) (concat ?x268 ?x73))))
 (let (($x243 (= (bvand ?x295 (_ bv4294967288 32)) ?x295)))
 (let (($x193 (= (bvand ?x39 (_ bv4294967292 32)) ?x39)))
 (let (($x94 (and $x193 $x243)))
 (let (($x33 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x213 (and true $x33)))
 (let (($x231 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x39 (bvsub ?x39 (_ bv4 32))) (bvult ?x39 (bvsub ?x39 (_ bv4 32))))))
 (let (($x273 (and (and (and $x231 $x213) $x193) $x94)))
 (let (($x336 (= true $x273)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x436 (not $x117)))
 (let (($x477 (=> $x436 $x336)))
 (let (($x163 (= input.dst.llvm-%l ?x469)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x75)))
 (let ((?x202 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x202)))
 (let (($x455 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x484 (and $x455 $x125)))
 (let (($x183 (and $x484 $x54)))
 (let (($x296 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (and $x296 $x183)))
 (let (($x124 (and $x312 $x163)))
 (let (($x254 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x189 (and $x254 $x124)))
 (let ((?x471 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x156 (concat ?x471 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x449 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x34 (concat ?x35 (concat ?x449 ?x156))))
 (let ((?x607 (bvadd ?x34 (_ bv4 32))))
 (let ((?x373 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv1 32))) (select input.dst.llvm-mem ?x607))))
 (let ((?x465 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv2 32))) ?x373))))
 (let (($x256 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x465 ?x601 false ?x133 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x479)))
 (let ((?x574 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x573 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x574))))
 (let (($x443 (= input.spec-%var-l-0.2.1.2.0 ?x573)))
 (let (($x9 (and $x443 $x256)))
 (let (($x523 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x8 (=> $x523 $x9)))
 (let (($x649 (= $x523 (bvuge (ite (= (_ bv0 32) ?x34) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x338 (= false false)))
 (let (($x277 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x344 (=> $x277 $x338)))
 (let (($x318 (= $x277 (= (ite (= (_ bv0 32) ?x34) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x265 (and $x318 $x344)))
 (let (($x616 (and $x265 $x649)))
 (let (($x21 (and $x616 $x8)))
 (let ((?x720 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x723 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x720)))
 (let ((?x743 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x723)))
 (let (($x305 (= input.spec-%var-l-0.2.0 ?x743)))
 (let (($x159 (and $x305 $x21)))
 (let (($x281 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x197 (=> $x281 $x159)))
 (let (($x387 (= $x281 (bvuge (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x331 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x51 (=> $x331 $x338)))
 (let (($x62 (= $x331 (= (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x320 (and $x62 $x51)))
 (let (($x289 (and $x320 $x387)))
 (let (($x126 (and $x289 $x197)))
 (let (($x121 (and $x126 $x189)))
 (let (($x228 (and $x121 $x477)))
 (let (($x24 (= $x228 true)))
 (let (($x225 (= $x24 true)))
 (let (($x375 (= $x225 true)))
 (let (($x542 (= $x117 true)))
 (let (($x540 (= $x542 true)))
 (let (($x272 (= $x540 true)))
 (let (($x81 (= $x254 true)))
 (let (($x365 (= $x81 true)))
 (let (($x445 (= $x365 true)))
 (let (($x441 (and $x445 $x272)))
 (let (($x414 (and $x441 $x375)))
 (let (($x337 (and $x414 $x26)))
 (let (($x141 (and $x281 $x337)))
 (let (($x409 (and $x338 $x141)))
 (let (($x128 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x467 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x403 (and $x467 $x128)))
 (let (($x384 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x313 (=> $x384 $x403)))
 (let (($x221 (= $x384 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x555 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x547 (=> $x555 $x338)))
 (let (($x152 (= $x555 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x10 (and $x152 $x547)))
 (let (($x122 (and $x10 $x221)))
 (let (($x88 (and $x122 $x313)))
 (let (($x350 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x32 (and $x350 $x88)))
 (let (($x426 (=> $x523 $x32)))
 (let (($x17 (= $x523 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x605 (= $x277 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x606 (and $x605 $x344)))
 (let (($x215 (and $x606 $x17)))
 (let (($x380 (and $x215 $x426)))
 (let (($x448 (and $x380 $x409)))
 (let (($x636 (=> $x384 true)))
 (let (($x520 (= $x384 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x557 (= $x555 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x511 (and $x557 $x547)))
 (let (($x503 (and $x511 $x520)))
 (let (($x218 (and $x503 $x636)))
 (let (($x656 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x553 (and $x656 $x218)))
 (let (($x662 (=> $x523 $x553)))
 (let (($x655 (= $x523 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x311 (= $x277 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x357 (and $x311 $x344)))
 (let (($x651 (and $x357 $x655)))
 (let (($x634 (and $x651 $x662)))
 (let (($x334 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x635 (and $x334 $x634)))
 (let (($x242 (and $x635 $x448)))
 (let (($x130 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x211 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x410 (and $x211 $x130)))
 (let (($x27 (=> $x384 $x410)))
 (let (($x119 (= $x384 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x578 (= $x555 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x596 (and $x578 $x547)))
 (let (($x468 (and $x596 $x119)))
 (let (($x230 (and $x468 $x27)))
 (let (($x535 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x363 (and $x535 $x230)))
 (let (($x420 (=> $x523 $x363)))
 (let (($x425 (= $x523 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x257 (= $x277 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x278 (and $x257 $x344)))
 (let (($x543 (and $x278 $x425)))
 (let (($x131 (and $x543 $x420)))
 (let (($x240 (and $x131 $x242)))
 (let (($x74 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x236 (and $x74 $x240)))
 (let (($x438 (bvugt ?x39 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x458 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x332 (=> (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x458 $x438)))))))
 (let (($x89 (=> (and $x436 (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x458 $x438)))))))
 (let (($x442 (and $x89 $x236)))
 (let (($x59 (=> $x442 $x301)))
 (not $x59)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310255/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x411 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv1 32))) (select input.dst.llvm-mem ?x411))))
 (let ((?x563 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv2 32))) ?x513))))
 (let ((?x286 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x548 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x322 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x518 (concat ?x322 (concat ?x548 (concat ?x90 ?x286)))))
 (let ((?x283 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x203 (concat ?x214 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x416 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x20 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x395 (bvadd ?x20 (_ bv3 32))))
 (let ((?x413 (concat (select input.dst.llvm-mem ?x395) (concat ?x416 ?x203))))
 (let (($x459 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x413 ?x283 false ?x518 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x563)))
 (let (($x525 (= $x459 true)))
 (let (($x546 (= $x525 true)))
 (let ((?x478 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x639 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x586 (concat ?x639 (concat ?x184 (concat ?x148 ?x478)))))
 (let (($x102 (= ?x586 input.dst.llvm-%l)))
 (let (($x362 (= $x102 true)))
 (let (($x356 (= $x362 true)))
 (let (($x614 (= (bvand ?x413 (_ bv4294967288 32)) ?x413)))
 (let (($x97 (= (bvand ?x20 (_ bv4294967292 32)) ?x20)))
 (let (($x622 (and $x97 $x614)))
 (let (($x269 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x293 (and true $x269)))
 (let (($x279 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x20 (bvsub ?x20 (_ bv4 32))) (bvult ?x20 (bvsub ?x20 (_ bv4 32))))))
 (let (($x358 (and (and (and $x279 $x293) $x97) $x622)))
 (let (($x437 (= true $x358)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x436 (not $x117)))
 (let (($x652 (=> $x436 $x437)))
 (let (($x482 (= input.dst.llvm-%l ?x586)))
 (let ((?x629 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x516 (= (_ bv0 32) ?x629)))
 (let ((?x642 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x550 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x642)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x617 (and $x351 $x550)))
 (let (($x330 (and $x617 $x516)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x551 (and $x99 $x330)))
 (let (($x475 (and $x551 $x482)))
 (let (($x481 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x144 (and $x481 $x475)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x612 (concat ?x142 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x688 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x692 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x693 (concat ?x692 (concat ?x688 ?x612))))
 (let ((?x48 (bvadd ?x693 (_ bv4 32))))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x515 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x567))))
 (let (($x579 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x515 ?x283 false ?x518 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x563)))
 (let ((?x558 (concat (select input.dst.llvm-mem (bvadd ?x693 (_ bv1 32))) (select input.dst.llvm-mem ?x693))))
 (let ((?x566 (concat (select input.dst.llvm-mem (bvadd ?x693 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x693 (_ bv2 32))) ?x558))))
 (let (($x565 (= input.spec-%var-l-0.2.1.2.0 ?x566)))
 (let (($x162 (and $x565 $x579)))
 (let (($x40 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x323 (=> $x40 $x162)))
 (let (($x402 (= $x40 (bvuge (ite (= (_ bv0 32) ?x693) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x547 (= false false)))
 (let (($x585 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x596 (=> $x585 $x547)))
 (let (($x371 (= $x585 (= (ite (= (_ bv0 32) ?x693) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x308 (and $x371 $x596)))
 (let (($x412 (and $x308 $x402)))
 (let (($x359 (and $x412 $x323)))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x309)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x258)))
 (let (($x28 (= input.spec-%var-l-0.2.0 ?x266)))
 (let (($x154 (and $x28 $x359)))
 (let (($x324 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x200 (=> $x324 $x154)))
 (let (($x26 (= $x324 (bvuge (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x295 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x273 (=> $x295 $x547)))
 (let (($x94 (= $x295 (= (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x336 (and $x94 $x273)))
 (let (($x337 (and $x336 $x26)))
 (let (($x316 (and $x337 $x200)))
 (let (($x446 (and $x316 $x144)))
 (let (($x640 (and $x446 $x652)))
 (let (($x114 (= $x640 true)))
 (let (($x435 (= $x114 true)))
 (let (($x519 (= $x435 true)))
 (let (($x460 (= $x436 true)))
 (let (($x66 (= $x460 true)))
 (let (($x461 (= $x66 true)))
 (let (($x303 (= $x481 true)))
 (let (($x45 (= $x303 true)))
 (let (($x501 (= $x45 true)))
 (let (($x462 (and $x501 $x461)))
 (let (($x38 (and $x462 $x519)))
 (let (($x217 (and $x38 $x356)))
 (let (($x524 (and $x295 $x217)))
 (let (($x531 (and $x547 $x524)))
 (let (($x608 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x151 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x601 (and $x151 $x608)))
 (let (($x557 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x600 (=> $x557 $x601)))
 (let (($x31 (= $x557 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x310 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x647 (=> $x310 $x547)))
 (let (($x443 (= $x310 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x150 (and $x443 $x647)))
 (let (($x485 (and $x150 $x31)))
 (let (($x19 (and $x485 $x600)))
 (let (($x576 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x609 (and $x576 $x19)))
 (let (($x598 (=> $x40 $x609)))
 (let (($x659 (= $x40 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x364 (= $x585 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x367 (and $x364 $x596)))
 (let (($x649 (and $x367 $x659)))
 (let (($x604 (and $x649 $x598)))
 (let (($x271 (and $x604 $x531)))
 (let (($x658 (=> $x557 true)))
 (let (($x743 (= $x557 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x722 (= $x310 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x753 (and $x722 $x647)))
 (let (($x305 (and $x753 $x743)))
 (let (($x35 (and $x305 $x658)))
 (let (($x153 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x723 (and $x153 $x35)))
 (let (($x390 (=> $x40 $x723)))
 (let (($x418 (= $x40 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x272 (= $x585 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x441 (and $x272 $x596)))
 (let (($x62 (and $x441 $x418)))
 (let (($x391 (and $x62 $x390)))
 (let (($x534 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x449 (and $x534 $x391)))
 (let (($x544 (and $x449 $x271)))
 (let (($x467 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x661 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x215 (and $x661 $x467)))
 (let (($x297 (=> $x557 $x215)))
 (let (($x450 (= $x557 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x311 (= $x310 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x656 (and $x311 $x647)))
 (let (($x520 (and $x656 $x450)))
 (let (($x152 (and $x520 $x297)))
 (let (($x130 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x345 (and $x130 $x152)))
 (let (($x350 (=> $x40 $x345)))
 (let (($x211 (= $x40 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x578 (= $x585 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x384 (and $x578 $x596)))
 (let (($x241 (and $x384 $x211)))
 (let (($x88 (and $x241 $x350)))
 (let (($x490 (and $x88 $x544)))
 (let (($x344 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x529 (and $x344 $x490)))
 (let (($x419 (bvugt ?x20 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x395)))
 (let (($x74 (=> (bvule ?x20 (bvsub (bvadd ?x20 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x419)))))))
 (let (($x136 (=> (and $x436 (bvule ?x20 (bvsub (bvadd ?x20 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x50 $x419)))))))
 (let (($x532 (and $x136 $x529)))
 (let (($x593 (=> $x532 $x546)))
 (not $x593)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x411 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv1 32))) (select input.dst.llvm-mem ?x411))))
 (let ((?x563 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv2 32))) ?x513))))
 (let ((?x286 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x548 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x322 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x518 (concat ?x322 (concat ?x548 (concat ?x90 ?x286)))))
 (let ((?x283 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x203 (concat ?x214 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x416 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x20 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x395 (bvadd ?x20 (_ bv3 32))))
 (let ((?x413 (concat (select input.dst.llvm-mem ?x395) (concat ?x416 ?x203))))
 (let (($x459 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x413 ?x283 false ?x518 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x563)))
 (let (($x525 (= $x459 true)))
 (let (($x546 (= $x525 true)))
 (let ((?x478 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x639 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x586 (concat ?x639 (concat ?x184 (concat ?x148 ?x478)))))
 (let (($x102 (= ?x586 input.dst.llvm-%l)))
 (let (($x362 (= $x102 true)))
 (let (($x356 (= $x362 true)))
 (let (($x614 (= (bvand ?x413 (_ bv4294967288 32)) ?x413)))
 (let (($x97 (= (bvand ?x20 (_ bv4294967292 32)) ?x20)))
 (let (($x622 (and $x97 $x614)))
 (let (($x269 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x293 (and true $x269)))
 (let (($x279 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x20 (bvsub ?x20 (_ bv4 32))) (bvult ?x20 (bvsub ?x20 (_ bv4 32))))))
 (let (($x358 (and (and (and $x279 $x293) $x97) $x622)))
 (let (($x437 (= true $x358)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x436 (not $x117)))
 (let (($x652 (=> $x436 $x437)))
 (let (($x482 (= input.dst.llvm-%l ?x586)))
 (let ((?x629 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x516 (= (_ bv0 32) ?x629)))
 (let ((?x642 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x550 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x642)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x617 (and $x351 $x550)))
 (let (($x330 (and $x617 $x516)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x551 (and $x99 $x330)))
 (let (($x475 (and $x551 $x482)))
 (let (($x481 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x144 (and $x481 $x475)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x612 (concat ?x142 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x688 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x692 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x693 (concat ?x692 (concat ?x688 ?x612))))
 (let ((?x48 (bvadd ?x693 (_ bv4 32))))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x515 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x567))))
 (let (($x579 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x515 ?x283 false ?x518 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x563)))
 (let ((?x558 (concat (select input.dst.llvm-mem (bvadd ?x693 (_ bv1 32))) (select input.dst.llvm-mem ?x693))))
 (let ((?x566 (concat (select input.dst.llvm-mem (bvadd ?x693 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x693 (_ bv2 32))) ?x558))))
 (let (($x565 (= input.spec-%var-l-0.2.1.2.0 ?x566)))
 (let (($x162 (and $x565 $x579)))
 (let (($x40 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x323 (=> $x40 $x162)))
 (let (($x402 (= $x40 (bvuge (ite (= (_ bv0 32) ?x693) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x547 (= false false)))
 (let (($x585 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x596 (=> $x585 $x547)))
 (let (($x371 (= $x585 (= (ite (= (_ bv0 32) ?x693) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x308 (and $x371 $x596)))
 (let (($x412 (and $x308 $x402)))
 (let (($x359 (and $x412 $x323)))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x309)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x258)))
 (let (($x28 (= input.spec-%var-l-0.2.0 ?x266)))
 (let (($x154 (and $x28 $x359)))
 (let (($x324 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x200 (=> $x324 $x154)))
 (let (($x26 (= $x324 (bvuge (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x295 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x273 (=> $x295 $x547)))
 (let (($x94 (= $x295 (= (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x336 (and $x94 $x273)))
 (let (($x337 (and $x336 $x26)))
 (let (($x316 (and $x337 $x200)))
 (let (($x446 (and $x316 $x144)))
 (let (($x640 (and $x446 $x652)))
 (let (($x114 (= $x640 true)))
 (let (($x435 (= $x114 true)))
 (let (($x519 (= $x435 true)))
 (let (($x460 (= $x436 true)))
 (let (($x66 (= $x460 true)))
 (let (($x461 (= $x66 true)))
 (let (($x303 (= $x481 true)))
 (let (($x45 (= $x303 true)))
 (let (($x501 (= $x45 true)))
 (let (($x462 (and $x501 $x461)))
 (let (($x38 (and $x462 $x519)))
 (let (($x217 (and $x38 $x356)))
 (let (($x524 (and $x295 $x217)))
 (let (($x531 (and $x547 $x524)))
 (let (($x608 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x151 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x601 (and $x151 $x608)))
 (let (($x557 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x600 (=> $x557 $x601)))
 (let (($x31 (= $x557 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x310 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x647 (=> $x310 $x547)))
 (let (($x443 (= $x310 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x150 (and $x443 $x647)))
 (let (($x485 (and $x150 $x31)))
 (let (($x19 (and $x485 $x600)))
 (let (($x576 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x609 (and $x576 $x19)))
 (let (($x598 (=> $x40 $x609)))
 (let (($x659 (= $x40 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x364 (= $x585 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x367 (and $x364 $x596)))
 (let (($x649 (and $x367 $x659)))
 (let (($x604 (and $x649 $x598)))
 (let (($x271 (and $x604 $x531)))
 (let (($x658 (=> $x557 true)))
 (let (($x743 (= $x557 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x722 (= $x310 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x753 (and $x722 $x647)))
 (let (($x305 (and $x753 $x743)))
 (let (($x35 (and $x305 $x658)))
 (let (($x153 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x723 (and $x153 $x35)))
 (let (($x390 (=> $x40 $x723)))
 (let (($x418 (= $x40 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x272 (= $x585 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x441 (and $x272 $x596)))
 (let (($x62 (and $x441 $x418)))
 (let (($x391 (and $x62 $x390)))
 (let (($x534 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x449 (and $x534 $x391)))
 (let (($x544 (and $x449 $x271)))
 (let (($x467 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x661 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x215 (and $x661 $x467)))
 (let (($x297 (=> $x557 $x215)))
 (let (($x450 (= $x557 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x311 (= $x310 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x656 (and $x311 $x647)))
 (let (($x520 (and $x656 $x450)))
 (let (($x152 (and $x520 $x297)))
 (let (($x130 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x345 (and $x130 $x152)))
 (let (($x350 (=> $x40 $x345)))
 (let (($x211 (= $x40 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x578 (= $x585 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x384 (and $x578 $x596)))
 (let (($x241 (and $x384 $x211)))
 (let (($x88 (and $x241 $x350)))
 (let (($x490 (and $x88 $x544)))
 (let (($x344 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x529 (and $x344 $x490)))
 (let (($x419 (bvugt ?x20 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x395)))
 (let (($x74 (=> (bvule ?x20 (bvsub (bvadd ?x20 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x419)))))))
 (let (($x136 (=> (and $x436 (bvule ?x20 (bvsub (bvadd ?x20 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x50 $x419)))))))
 (let (($x532 (and $x136 $x529)))
 (let (($x593 (=> $x532 $x546)))
 (not $x593)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310255/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x526 (concat (select input.dst.llvm-mem (bvadd ?x360 (_ bv1 32))) (select input.dst.llvm-mem ?x360))))
 (let ((?x564 (concat (select input.dst.llvm-mem (bvadd ?x360 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x360 (_ bv2 32))) ?x526))))
 (let ((?x363 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x379 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x369 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x533 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x613 (concat ?x533 (concat ?x369 (concat ?x379 ?x363)))))
 (let ((?x230 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x166 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x230 false ?x613 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x564)))
 (let (($x96 (= $x166 true)))
 (let (($x556 (= $x96 true)))
 (let ((?x755 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x747 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x651 (concat ?x747 (concat ?x169 (concat ?x233 ?x755)))))
 (let (($x535 (= ?x651 input.dst.llvm-%l)))
 (let (($x468 (= $x535 true)))
 (let (($x492 (= $x468 true)))
 (let ((?x606 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x465 (concat ?x606 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x95 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x466 (bvadd ?x95 (_ bv3 32))))
 (let ((?x365 (concat (select input.dst.llvm-mem ?x466) (concat ?x380 ?x465))))
 (let (($x451 (= (bvand ?x365 (_ bv4294967288 32)) ?x365)))
 (let (($x46 (= (bvand ?x95 (_ bv4294967292 32)) ?x95)))
 (let (($x331 (and $x46 $x451)))
 (let (($x440 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x574 (and true $x440)))
 (let (($x572 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x95 (bvsub ?x95 (_ bv4 32))) (bvult ?x95 (bvsub ?x95 (_ bv4 32))))))
 (let (($x724 (and (and (and $x572 $x574) $x46) $x331)))
 (let (($x735 (= true $x724)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x436 (not $x117)))
 (let (($x281 (=> $x436 $x735)))
 (let (($x503 (= input.dst.llvm-%l ?x651)))
 (let ((?x754 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x749 (= (_ bv0 32) ?x754)))
 (let ((?x695 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x746 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x695)))
 (let (($x752 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x751 (and $x752 $x746)))
 (let (($x750 (and $x751 $x749)))
 (let (($x378 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x417 (and $x378 $x750)))
 (let (($x636 (and $x417 $x503)))
 (let (($x30 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x372 (and $x30 $x636)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x219 (concat ?x141 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x287 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x93 (concat ?x287 (concat ?x349 ?x219))))
 (let ((?x562 (bvadd ?x93 (_ bv4 32))))
 (let ((?x654 (concat (select input.dst.llvm-mem (bvadd ?x562 (_ bv1 32))) (select input.dst.llvm-mem ?x562))))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ?x562 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x562 (_ bv2 32))) ?x654))))
 (let (($x357 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x346 ?x230 false ?x613 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x564)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem ?x93))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv2 32))) ?x77))))
 (let (($x530 (= input.spec-%var-l-0.2.1.2.0 ?x80)))
 (let (($x626 (and $x530 $x357)))
 (let (($x10 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x280 (=> $x10 $x626)))
 (let (($x425 (= $x10 (bvuge (ite (= (_ bv0 32) ?x93) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x647 (= false false)))
 (let (($x655 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x656 (=> $x655 $x647)))
 (let (($x208 (= $x655 (= (ite (= (_ bv0 32) ?x93) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x73 (and $x208 $x656)))
 (let (($x106 (and $x73 $x425)))
 (let (($x327 (and $x106 $x280)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x183)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x263)))
 (let (($x8 (= input.spec-%var-l-0.2.0 ?x159)))
 (let (($x176 (and $x8 $x327)))
 (let (($x102 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x198 (=> $x102 $x176)))
 (let (($x356 (= $x102 (bvuge (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x413 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x358 (=> $x413 $x647)))
 (let (($x622 (= $x413 (= (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x437 (and $x622 $x358)))
 (let (($x217 (and $x437 $x356)))
 (let (($x748 (and $x217 $x198)))
 (let (($x156 (and $x748 $x372)))
 (let (($x289 (and $x156 $x281)))
 (let (($x224 (= $x289 true)))
 (let (($x720 (= $x224 true)))
 (let (($x756 (= $x720 true)))
 (let (($x571 (= $x117 true)))
 (let (($x433 (= $x571 true)))
 (let (($x568 (= $x433 true)))
 (let (($x575 (= $x30 true)))
 (let (($x382 (= $x575 true)))
 (let (($x447 (= $x382 true)))
 (let (($x513 (and $x447 $x568)))
 (let (($x538 (and $x513 $x756)))
 (let (($x456 (and $x538 $x492)))
 (let (($x392 (and $x413 $x456)))
 (let (($x428 (and $x647 $x392)))
 (let (($x90 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x510 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x283 (and $x510 $x90)))
 (let (($x722 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x641 (=> $x722 $x283)))
 (let (($x512 (= $x722 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x540 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x387 (=> $x540 $x647)))
 (let (($x565 (= $x540 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x505 (and $x565 $x387)))
 (let (($x509 (and $x505 $x512)))
 (let (($x439 (and $x509 $x641)))
 (let (($x584 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x552 (and $x584 $x439)))
 (let (($x322 (=> $x10 $x552)))
 (let (($x368 (= $x10 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x623 (= $x655 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x689 (and $x623 $x656)))
 (let (($x402 (and $x689 $x368)))
 (let (($x286 (and $x402 $x322)))
 (let (($x420 (and $x286 $x428)))
 (let (($x686 (=> $x722 true)))
 (let (($x266 (= $x722 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x288 (= $x540 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x82 (and $x288 $x387)))
 (let (($x28 (and $x82 $x266)))
 (let (($x692 (and $x28 $x686)))
 (let (($x194 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x258 (and $x194 $x692)))
 (let (($x321 (=> $x10 $x258)))
 (let (($x243 (= $x10 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x461 (= $x655 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x462 (and $x461 $x656)))
 (let (($x94 (and $x462 $x243)))
 (let (($x685 (and $x94 $x321)))
 (let (($x383 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x688 (and $x383 $x685)))
 (let (($x131 (and $x688 $x420)))
 (let (($x151 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x615 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x649 (and $x615 $x151)))
 (let (($x570 (=> $x722 $x649)))
 (let (($x757 (= $x722 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x272 (= $x540 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x153 (and $x272 $x387)))
 (let (($x743 (and $x153 $x757)))
 (let (($x443 (and $x743 $x570)))
 (let (($x467 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x589 (and $x467 $x443)))
 (let (($x576 (=> $x10 $x589)))
 (let (($x661 (= $x10 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x311 (= $x655 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x557 (and $x311 $x656)))
 (let (($x221 (and $x557 $x661)))
 (let (($x19 (and $x221 $x576)))
 (let (($x634 (and $x19 $x131)))
 (let (($x596 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x135 (and $x596 $x634)))
 (let (($x89 (bvugt ?x95 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x332 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x466)))
 (let (($x344 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x332 $x89)))))))
 (let (($x165 (=> (and $x436 (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x332 $x89)))))))
 (let (($x334 (and $x165 $x135)))
 (let (($x553 (=> $x334 $x556)))
 (not $x553)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x526 (concat (select input.dst.llvm-mem (bvadd ?x360 (_ bv1 32))) (select input.dst.llvm-mem ?x360))))
 (let ((?x564 (concat (select input.dst.llvm-mem (bvadd ?x360 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x360 (_ bv2 32))) ?x526))))
 (let ((?x363 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x379 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x369 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x533 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x613 (concat ?x533 (concat ?x369 (concat ?x379 ?x363)))))
 (let ((?x230 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x166 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x230 false ?x613 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x564)))
 (let (($x96 (= $x166 true)))
 (let (($x556 (= $x96 true)))
 (let ((?x755 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x747 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x651 (concat ?x747 (concat ?x169 (concat ?x233 ?x755)))))
 (let (($x535 (= ?x651 input.dst.llvm-%l)))
 (let (($x468 (= $x535 true)))
 (let (($x492 (= $x468 true)))
 (let ((?x606 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x465 (concat ?x606 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x95 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x466 (bvadd ?x95 (_ bv3 32))))
 (let ((?x365 (concat (select input.dst.llvm-mem ?x466) (concat ?x380 ?x465))))
 (let (($x451 (= (bvand ?x365 (_ bv4294967288 32)) ?x365)))
 (let (($x46 (= (bvand ?x95 (_ bv4294967292 32)) ?x95)))
 (let (($x331 (and $x46 $x451)))
 (let (($x440 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x574 (and true $x440)))
 (let (($x572 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x95 (bvsub ?x95 (_ bv4 32))) (bvult ?x95 (bvsub ?x95 (_ bv4 32))))))
 (let (($x724 (and (and (and $x572 $x574) $x46) $x331)))
 (let (($x735 (= true $x724)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x436 (not $x117)))
 (let (($x281 (=> $x436 $x735)))
 (let (($x503 (= input.dst.llvm-%l ?x651)))
 (let ((?x754 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x749 (= (_ bv0 32) ?x754)))
 (let ((?x695 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x746 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x695)))
 (let (($x752 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x751 (and $x752 $x746)))
 (let (($x750 (and $x751 $x749)))
 (let (($x378 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x417 (and $x378 $x750)))
 (let (($x636 (and $x417 $x503)))
 (let (($x30 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x372 (and $x30 $x636)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x219 (concat ?x141 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x287 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x93 (concat ?x287 (concat ?x349 ?x219))))
 (let ((?x562 (bvadd ?x93 (_ bv4 32))))
 (let ((?x654 (concat (select input.dst.llvm-mem (bvadd ?x562 (_ bv1 32))) (select input.dst.llvm-mem ?x562))))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ?x562 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x562 (_ bv2 32))) ?x654))))
 (let (($x357 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x346 ?x230 false ?x613 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x564)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem ?x93))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv2 32))) ?x77))))
 (let (($x530 (= input.spec-%var-l-0.2.1.2.0 ?x80)))
 (let (($x626 (and $x530 $x357)))
 (let (($x10 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x280 (=> $x10 $x626)))
 (let (($x425 (= $x10 (bvuge (ite (= (_ bv0 32) ?x93) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x647 (= false false)))
 (let (($x655 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x656 (=> $x655 $x647)))
 (let (($x208 (= $x655 (= (ite (= (_ bv0 32) ?x93) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x73 (and $x208 $x656)))
 (let (($x106 (and $x73 $x425)))
 (let (($x327 (and $x106 $x280)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x183)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x263)))
 (let (($x8 (= input.spec-%var-l-0.2.0 ?x159)))
 (let (($x176 (and $x8 $x327)))
 (let (($x102 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x198 (=> $x102 $x176)))
 (let (($x356 (= $x102 (bvuge (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x413 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x358 (=> $x413 $x647)))
 (let (($x622 (= $x413 (= (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x437 (and $x622 $x358)))
 (let (($x217 (and $x437 $x356)))
 (let (($x748 (and $x217 $x198)))
 (let (($x156 (and $x748 $x372)))
 (let (($x289 (and $x156 $x281)))
 (let (($x224 (= $x289 true)))
 (let (($x720 (= $x224 true)))
 (let (($x756 (= $x720 true)))
 (let (($x571 (= $x117 true)))
 (let (($x433 (= $x571 true)))
 (let (($x568 (= $x433 true)))
 (let (($x575 (= $x30 true)))
 (let (($x382 (= $x575 true)))
 (let (($x447 (= $x382 true)))
 (let (($x513 (and $x447 $x568)))
 (let (($x538 (and $x513 $x756)))
 (let (($x456 (and $x538 $x492)))
 (let (($x392 (and $x413 $x456)))
 (let (($x428 (and $x647 $x392)))
 (let (($x90 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x510 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x283 (and $x510 $x90)))
 (let (($x722 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x641 (=> $x722 $x283)))
 (let (($x512 (= $x722 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x540 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x387 (=> $x540 $x647)))
 (let (($x565 (= $x540 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x505 (and $x565 $x387)))
 (let (($x509 (and $x505 $x512)))
 (let (($x439 (and $x509 $x641)))
 (let (($x584 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x552 (and $x584 $x439)))
 (let (($x322 (=> $x10 $x552)))
 (let (($x368 (= $x10 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x623 (= $x655 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x689 (and $x623 $x656)))
 (let (($x402 (and $x689 $x368)))
 (let (($x286 (and $x402 $x322)))
 (let (($x420 (and $x286 $x428)))
 (let (($x686 (=> $x722 true)))
 (let (($x266 (= $x722 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x288 (= $x540 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x82 (and $x288 $x387)))
 (let (($x28 (and $x82 $x266)))
 (let (($x692 (and $x28 $x686)))
 (let (($x194 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x258 (and $x194 $x692)))
 (let (($x321 (=> $x10 $x258)))
 (let (($x243 (= $x10 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x461 (= $x655 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x462 (and $x461 $x656)))
 (let (($x94 (and $x462 $x243)))
 (let (($x685 (and $x94 $x321)))
 (let (($x383 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x688 (and $x383 $x685)))
 (let (($x131 (and $x688 $x420)))
 (let (($x151 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 false smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1)))
 (let (($x615 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x649 (and $x615 $x151)))
 (let (($x570 (=> $x722 $x649)))
 (let (($x757 (= $x722 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x272 (= $x540 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x153 (and $x272 $x387)))
 (let (($x743 (and $x153 $x757)))
 (let (($x443 (and $x743 $x570)))
 (let (($x467 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x589 (and $x467 $x443)))
 (let (($x576 (=> $x10 $x589)))
 (let (($x661 (= $x10 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x311 (= $x655 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x557 (and $x311 $x656)))
 (let (($x221 (and $x557 $x661)))
 (let (($x19 (and $x221 $x576)))
 (let (($x634 (and $x19 $x131)))
 (let (($x596 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x135 (and $x596 $x634)))
 (let (($x89 (bvugt ?x95 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x332 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x466)))
 (let (($x344 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x332 $x89)))))))
 (let (($x165 (=> (and $x436 (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x332 $x89)))))))
 (let (($x334 (and $x165 $x135)))
 (let (($x553 (=> $x334 $x556)))
 (not $x553)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-0.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_38)
(= input.dst.llvm-mem @fun_34)
(function @fun_38
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_38 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (=
  (@fun_38 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x0000000f)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xff)
                                #x00000003
                                #x00)
                         #x00000002
                         #x00)
                  #x00000001
                  #x00)))
  (store a!1 #x00000000 #x00)))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x0000000f)
              (= x!8 #x80000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #xffffffff)
              (= x!12 #x0000000f)
              (= x!13 #xffffffff))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x0000000f)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #xffffffff)
              (= x!12 #x0000000f)
              (= x!13 #xffffffff))
      false
      false)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_9514 (_ BitVec 32)) (BOUND_VARIABLE_9515 (_ BitVec 32)) (BOUND_VARIABLE_9516 (_ BitVec 32)) (BOUND_VARIABLE_9517 Bool) (BOUND_VARIABLE_9518 (_ BitVec 32)) (BOUND_VARIABLE_9519 (_ BitVec 32)) (BOUND_VARIABLE_9520 (_ BitVec 32)) (BOUND_VARIABLE_9521 (_ BitVec 32)) (BOUND_VARIABLE_9522 (_ BitVec 32)) (BOUND_VARIABLE_9523 (_ BitVec 32)) (BOUND_VARIABLE_9524 Bool) (BOUND_VARIABLE_9525 (_ BitVec 32)) (BOUND_VARIABLE_9526 (_ BitVec 32)) (BOUND_VARIABLE_9527 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310255/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.87f4b9bc4173dbdb489f8cc157ba3577 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.2 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.2 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x337 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x604 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x501 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv1 32))) (select input.dst.llvm-mem ?x604))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv2 32))) ?x501))))
 (let ((?x35 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x502 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x506 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x515 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x256 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l (concat ?x515 (concat ?x506 (concat ?x502 ?x35))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x190 ?x337 false)))
 (let (($x281 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x119 (=> $x281 $x256)))
 (let (($x224 (= $x281 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x387 (= false false)))
 (let (($x380 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x465 (=> $x380 $x387)))
 (let (($x181 (= $x380 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x254 (and $x181 $x465)))
 (let (($x720 (and $x254 $x224)))
 (let (($x292 (and $x720 $x119)))
 (let (($x633 (= $x292 true)))
 (let (($x305 (= $x633 true)))
 (let ((?x262 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x511 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x84 (concat ?x511 (concat ?x247 ?x262)))))
 (let (($x58 (= ?x140 input.dst.llvm-%l)))
 (let (($x201 (= $x58 true)))
 (let (($x487 (= $x201 true)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x29 (concat ?x118 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x458 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x291 (bvadd ?x458 (_ bv3 32))))
 (let ((?x145 (concat (select input.dst.llvm-mem ?x291) (concat ?x108 ?x29))))
 (let (($x493 (= (bvand ?x145 (_ bv4294967288 32)) ?x145)))
 (let (($x637 (= (bvand ?x458 (_ bv4294967292 32)) ?x458)))
 (let (($x483 (and $x637 $x493)))
 (let (($x421 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x298 (and true $x421)))
 (let (($x236 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x458 (bvsub ?x458 (_ bv4 32))) (bvult ?x458 (bvsub ?x458 (_ bv4 32))))))
 (let (($x290 (and (and (and $x236 $x298) $x637) $x483)))
 (let (($x100 (= true $x290)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x436 (not $x117)))
 (let (($x494 (=> $x436 $x100)))
 (let (($x429 (= input.dst.llvm-%l ?x140)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x452 (= (_ bv0 32) ?x237)))
 (let ((?x406 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x232 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x406)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (and $x168 $x232)))
 (let (($x171 (and $x261 $x452)))
 (let (($x312 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x348 (and $x312 $x171)))
 (let (($x101 (and $x348 $x429)))
 (let (($x379 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x301 (and $x379 $x101)))
 (let ((?x408 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x203 (concat ?x408 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x435 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x524 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x328 (concat ?x524 (concat ?x435 ?x203))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv1 32))) (select input.dst.llvm-mem ?x328))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv2 32))) ?x12))))
 (let (($x333 (= input.spec-%var-l-0.2.1.2.0 ?x123)))
 (let (($x315 (and $x333 true)))
 (let (($x150 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x146 (=> $x150 $x315)))
 (let (($x490 (= $x150 (bvuge (ite (= (_ bv0 32) ?x328) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x418 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x153 (=> $x418 $x387)))
 (let (($x144 (= $x418 (= (ite (= (_ bv0 32) ?x328) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x602 (and $x144 $x153)))
 (let (($x129 (and $x602 $x490)))
 (let (($x454 (and $x129 $x146)))
 (let ((?x609 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x609)))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x274)))
 (let (($x642 (= input.spec-%var-l-0.2.0 ?x330)))
 (let (($x55 (and $x642 $x454)))
 (let (($x464 (=> $x281 $x55)))
 (let (($x155 (and $x720 $x464)))
 (let (($x59 (and $x155 $x301)))
 (let (($x496 (and $x59 $x494)))
 (let (($x472 (= $x496 true)))
 (let (($x374 (= $x472 true)))
 (let (($x152 (= $x374 true)))
 (let (($x613 (= $x117 true)))
 (let (($x360 (= $x613 true)))
 (let (($x621 (= $x360 true)))
 (let (($x363 (= $x379 true)))
 (let (($x191 (= $x363 true)))
 (let (($x381 (= $x191 true)))
 (let (($x590 (and $x381 $x621)))
 (let (($x345 (and $x590 $x152)))
 (let (($x113 (and $x345 $x487)))
 (let (($x405 (and $x380 $x113)))
 (let (($x630 (and $x387 $x405)))
 (let (($x588 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x654 (and $x588 true)))
 (let (($x288 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x427 (=> $x288 $x654)))
 (let (($x25 (= $x288 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x66 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x26 (=> $x66 $x387)))
 (let (($x400 (= $x66 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x415 (and $x400 $x26)))
 (let (($x376 (and $x415 $x25)))
 (let (($x230 (and $x376 $x427)))
 (let (($x307 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x199 (and $x307 $x230)))
 (let (($x346 (=> $x150 $x199)))
 (let (($x208 (= $x150 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x85 (= $x418 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x93 (and $x85 $x153)))
 (let (($x73 (and $x93 $x208)))
 (let (($x67 (and $x73 $x346)))
 (let (($x393 (and $x67 $x630)))
 (let (($x263 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.87f4b9bc4173dbdb489f8cc157ba3577 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 input.spec-%var-node-0.L1%9%bbentry.1.2.1.2 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.0 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.0 false smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.2)))
 (let (($x296 (=> $x288 $x263)))
 (let (($x102 (= $x288 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x413 (= $x66 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x622 (and $x413 $x26)))
 (let (($x362 (and $x622 $x102)))
 (let (($x21 (and $x362 $x296)))
 (let (($x575 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x217 (and $x575 $x21)))
 (let (($x579 (=> $x150 $x217)))
 (let (($x322 (= $x150 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x90 (= $x418 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x283 (and $x90 $x153)))
 (let (($x286 (and $x283 $x322)))
 (let (($x125 (and $x286 $x579)))
 (let (($x505 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x287 (and $x505 $x125)))
 (let (($x691 (and $x287 $x393)))
 (let (($x690 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x623 (and $x690 true)))
 (let (($x368 (=> $x288 $x623)))
 (let (($x229 (= $x288 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x461 (= $x66 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x194 (and $x461 $x26)))
 (let (($x266 (and $x194 $x229)))
 (let (($x402 (and $x266 $x368)))
 (let (($x151 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x689 (and $x151 $x402)))
 (let (($x308 (=> $x150 $x689)))
 (let (($x615 (= $x150 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x272 (= $x418 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x722 (and $x272 $x153)))
 (let (($x31 (and $x722 $x615)))
 (let (($x581 (and $x31 $x308)))
 (let (($x27 (and $x581 $x691)))
 (let (($x656 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x57 (and $x656 $x27)))
 (let (($x136 (bvugt ?x458 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x291)))
 (let (($x596 (=> (bvule ?x458 (bvsub (bvadd ?x458 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x136)))))))
 (let (($x395 (=> (and $x436 (bvule ?x458 (bvsub (bvadd ?x458 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x74 $x136)))))))
 (let (($x410 (and $x395 $x57)))
 (let (($x559 (=> $x410 $x305)))
 (not $x559)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.87f4b9bc4173dbdb489f8cc157ba3577 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.2 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.2 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x337 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x604 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x501 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv1 32))) (select input.dst.llvm-mem ?x604))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv2 32))) ?x501))))
 (let ((?x35 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x502 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x506 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x515 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x256 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l (concat ?x515 (concat ?x506 (concat ?x502 ?x35))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x190 ?x337 false)))
 (let (($x281 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x119 (=> $x281 $x256)))
 (let (($x224 (= $x281 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x387 (= false false)))
 (let (($x380 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x465 (=> $x380 $x387)))
 (let (($x181 (= $x380 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x254 (and $x181 $x465)))
 (let (($x720 (and $x254 $x224)))
 (let (($x292 (and $x720 $x119)))
 (let (($x633 (= $x292 true)))
 (let (($x305 (= $x633 true)))
 (let ((?x262 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x511 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x84 (concat ?x511 (concat ?x247 ?x262)))))
 (let (($x58 (= ?x140 input.dst.llvm-%l)))
 (let (($x201 (= $x58 true)))
 (let (($x487 (= $x201 true)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x29 (concat ?x118 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x458 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x291 (bvadd ?x458 (_ bv3 32))))
 (let ((?x145 (concat (select input.dst.llvm-mem ?x291) (concat ?x108 ?x29))))
 (let (($x493 (= (bvand ?x145 (_ bv4294967288 32)) ?x145)))
 (let (($x637 (= (bvand ?x458 (_ bv4294967292 32)) ?x458)))
 (let (($x483 (and $x637 $x493)))
 (let (($x421 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x298 (and true $x421)))
 (let (($x236 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x458 (bvsub ?x458 (_ bv4 32))) (bvult ?x458 (bvsub ?x458 (_ bv4 32))))))
 (let (($x290 (and (and (and $x236 $x298) $x637) $x483)))
 (let (($x100 (= true $x290)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x436 (not $x117)))
 (let (($x494 (=> $x436 $x100)))
 (let (($x429 (= input.dst.llvm-%l ?x140)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x452 (= (_ bv0 32) ?x237)))
 (let ((?x406 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x232 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x406)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (and $x168 $x232)))
 (let (($x171 (and $x261 $x452)))
 (let (($x312 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x348 (and $x312 $x171)))
 (let (($x101 (and $x348 $x429)))
 (let (($x379 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x301 (and $x379 $x101)))
 (let ((?x408 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x203 (concat ?x408 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x435 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x524 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x328 (concat ?x524 (concat ?x435 ?x203))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv1 32))) (select input.dst.llvm-mem ?x328))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv2 32))) ?x12))))
 (let (($x333 (= input.spec-%var-l-0.2.1.2.0 ?x123)))
 (let (($x315 (and $x333 true)))
 (let (($x150 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x146 (=> $x150 $x315)))
 (let (($x490 (= $x150 (bvuge (ite (= (_ bv0 32) ?x328) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x418 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x153 (=> $x418 $x387)))
 (let (($x144 (= $x418 (= (ite (= (_ bv0 32) ?x328) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x602 (and $x144 $x153)))
 (let (($x129 (and $x602 $x490)))
 (let (($x454 (and $x129 $x146)))
 (let ((?x609 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x609)))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x274)))
 (let (($x642 (= input.spec-%var-l-0.2.0 ?x330)))
 (let (($x55 (and $x642 $x454)))
 (let (($x464 (=> $x281 $x55)))
 (let (($x155 (and $x720 $x464)))
 (let (($x59 (and $x155 $x301)))
 (let (($x496 (and $x59 $x494)))
 (let (($x472 (= $x496 true)))
 (let (($x374 (= $x472 true)))
 (let (($x152 (= $x374 true)))
 (let (($x613 (= $x117 true)))
 (let (($x360 (= $x613 true)))
 (let (($x621 (= $x360 true)))
 (let (($x363 (= $x379 true)))
 (let (($x191 (= $x363 true)))
 (let (($x381 (= $x191 true)))
 (let (($x590 (and $x381 $x621)))
 (let (($x345 (and $x590 $x152)))
 (let (($x113 (and $x345 $x487)))
 (let (($x405 (and $x380 $x113)))
 (let (($x630 (and $x387 $x405)))
 (let (($x588 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x654 (and $x588 true)))
 (let (($x288 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x427 (=> $x288 $x654)))
 (let (($x25 (= $x288 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x66 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x26 (=> $x66 $x387)))
 (let (($x400 (= $x66 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x415 (and $x400 $x26)))
 (let (($x376 (and $x415 $x25)))
 (let (($x230 (and $x376 $x427)))
 (let (($x307 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x199 (and $x307 $x230)))
 (let (($x346 (=> $x150 $x199)))
 (let (($x208 (= $x150 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x85 (= $x418 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x93 (and $x85 $x153)))
 (let (($x73 (and $x93 $x208)))
 (let (($x67 (and $x73 $x346)))
 (let (($x393 (and $x67 $x630)))
 (let (($x263 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.87f4b9bc4173dbdb489f8cc157ba3577 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 input.spec-%var-node-0.L1%9%bbentry.1.2.1.2 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.0 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.0 false smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0.1.2)))
 (let (($x296 (=> $x288 $x263)))
 (let (($x102 (= $x288 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x413 (= $x66 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x622 (and $x413 $x26)))
 (let (($x362 (and $x622 $x102)))
 (let (($x21 (and $x362 $x296)))
 (let (($x575 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x217 (and $x575 $x21)))
 (let (($x579 (=> $x150 $x217)))
 (let (($x322 (= $x150 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x90 (= $x418 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x283 (and $x90 $x153)))
 (let (($x286 (and $x283 $x322)))
 (let (($x125 (and $x286 $x579)))
 (let (($x505 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x287 (and $x505 $x125)))
 (let (($x691 (and $x287 $x393)))
 (let (($x690 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x623 (and $x690 true)))
 (let (($x368 (=> $x288 $x623)))
 (let (($x229 (= $x288 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x461 (= $x66 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x194 (and $x461 $x26)))
 (let (($x266 (and $x194 $x229)))
 (let (($x402 (and $x266 $x368)))
 (let (($x151 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x689 (and $x151 $x402)))
 (let (($x308 (=> $x150 $x689)))
 (let (($x615 (= $x150 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x272 (= $x418 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x722 (and $x272 $x153)))
 (let (($x31 (and $x722 $x615)))
 (let (($x581 (and $x31 $x308)))
 (let (($x27 (and $x581 $x691)))
 (let (($x656 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x57 (and $x656 $x27)))
 (let (($x136 (bvugt ?x458 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x291)))
 (let (($x596 (=> (bvule ?x458 (bvsub (bvadd ?x458 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x136)))))))
 (let (($x395 (=> (and $x436 (bvule ?x458 (bvsub (bvadd ?x458 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x74 $x136)))))))
 (let (($x410 (and $x395 $x57)))
 (let (($x559 (=> $x410 $x305)))
 (not $x559)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310255/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x436 (not $x117)))
 (let (($x486 (or $x117 $x436)))
 (let (($x489 (= $x486 true)))
 (let (($x473 (= $x489 true)))
 (let ((?x235 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x570 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x753 (concat ?x570 (concat ?x193 (concat ?x124 ?x235)))))
 (let (($x757 (= ?x753 input.dst.llvm-%l)))
 (let (($x279 (= $x757 true)))
 (let (($x277 (= $x279 true)))
 (let ((?x451 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x331 (concat ?x451 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x735 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x652 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x640 (concat ?x652 (concat ?x735 ?x331))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv1 32))) (select input.dst.llvm-mem ?x640))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv2 32))) ?x13))))
 (let (($x479 (= input.spec-%var-l-0.2.1.2.0 ?x33)))
 (let (($x484 (and $x479 true)))
 (let (($x623 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x478 (=> $x623 $x484)))
 (let (($x634 (= $x623 (bvuge (ite (= (_ bv0 32) ?x640) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x26 (= false false)))
 (let (($x243 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x194 (=> $x243 $x26)))
 (let (($x372 (= $x243 (= (ite (= (_ bv0 32) ?x640) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x138 (and $x372 $x194)))
 (let (($x135 (and $x138 $x634)))
 (let (($x539 (and $x135 $x478)))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x221)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x378)))
 (let (($x626 (= input.spec-%var-l-0.2.0 ?x198)))
 (let (($x323 (and $x626 $x539)))
 (let (($x653 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x359 (=> $x653 $x323)))
 (let (($x336 (= $x653 (bvuge (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x410 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x515 (=> $x410 $x26)))
 (let (($x367 (= $x410 (= (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x514 (and $x367 $x515)))
 (let (($x343 (and $x514 $x336)))
 (let (($x154 (and $x343 $x359)))
 (let (($x200 (= $x154 true)))
 (let (($x373 (= $x200 true)))
 (let (($x469 (= $x373 true)))
 (let ((?x232 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x261 (= (_ bv0 32) ?x232)))
 (let ((?x312 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x312)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x406 (and $x15 $x168)))
 (let (($x237 (and $x406 $x261)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x452 (and $x155 $x237)))
 (let (($x171 (= $x452 true)))
 (let (($x348 (= $x171 true)))
 (let (($x24 (= $x348 true)))
 (let (($x104 (and $x24 $x469)))
 (let (($x477 (and $x104 $x277)))
 (let (($x531 (and $x26 $x477)))
 (let (($x158 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x123 (and $x158 true)))
 (let (($x8 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x146 (=> $x8 $x123)))
 (let (($x498 (= $x8 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x622 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x79 (=> $x622 $x26)))
 (let (($x593 (= $x622 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x216 (and $x593 $x79)))
 (let (($x179 (and $x216 $x498)))
 (let (($x454 (and $x179 $x146)))
 (let (($x519 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x333 (and $x519 $x454)))
 (let (($x315 (=> $x623 $x333)))
 (let (($x114 (= $x623 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x330 (= $x243 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x642 (and $x330 $x194)))
 (let (($x435 (and $x642 $x114)))
 (let (($x55 (and $x435 $x315)))
 (let (($x228 (and $x55 $x531)))
 (let (($x319 (=> $x8 true)))
 (let (($x224 (= $x8 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x606 (= $x622 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x254 (and $x606 $x79)))
 (let (($x720 (and $x254 $x224)))
 (let (($x516 (and $x720 $x319)))
 (let (($x381 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x289 (and $x381 $x516)))
 (let (($x504 (=> $x623 $x289)))
 (let (($x369 (= $x623 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x427 (= $x243 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x230 (and $x427 $x194)))
 (let (($x399 (and $x230 $x369)))
 (let (($x357 (and $x399 $x504)))
 (let (($x415 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x598 (and $x415 $x357)))
 (let (($x532 (and $x598 $x228)))
 (let (($x375 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x85 (and $x375 true)))
 (let (($x208 (=> $x8 $x85)))
 (let (($x159 (= $x8 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x614 (= $x622 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x541 (and $x614 $x79)))
 (let (($x43 (and $x541 $x159)))
 (let (($x73 (and $x43 $x208)))
 (let (($x90 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x93 (and $x90 $x73)))
 (let (($x76 (=> $x623 $x93)))
 (let (($x690 (= $x623 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x461 (= $x243 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x288 (and $x461 $x194)))
 (let (($x368 (and $x288 $x690)))
 (let (($x111 (and $x368 $x76)))
 (let (($x271 (and $x111 $x532)))
 (let (($x153 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x459 (and $x153 $x271)))
 (let ((?x50 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x165 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x344 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x50 (_ bv3 32)))))
 (let (($x656 (=> (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x344 $x165)))))))
 (let (($x466 (=> (and $x436 (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x344 $x165)))))))
 (let (($x525 (and $x466 $x459)))
 (let (($x523 (=> $x525 $x473)))
 (not $x523)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x436 (not $x117)))
 (let (($x486 (or $x117 $x436)))
 (let (($x489 (= $x486 true)))
 (let (($x473 (= $x489 true)))
 (let ((?x235 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x570 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x753 (concat ?x570 (concat ?x193 (concat ?x124 ?x235)))))
 (let (($x757 (= ?x753 input.dst.llvm-%l)))
 (let (($x279 (= $x757 true)))
 (let (($x277 (= $x279 true)))
 (let ((?x451 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x331 (concat ?x451 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x735 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x652 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x640 (concat ?x652 (concat ?x735 ?x331))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv1 32))) (select input.dst.llvm-mem ?x640))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv2 32))) ?x13))))
 (let (($x479 (= input.spec-%var-l-0.2.1.2.0 ?x33)))
 (let (($x484 (and $x479 true)))
 (let (($x623 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x478 (=> $x623 $x484)))
 (let (($x634 (= $x623 (bvuge (ite (= (_ bv0 32) ?x640) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x26 (= false false)))
 (let (($x243 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x194 (=> $x243 $x26)))
 (let (($x372 (= $x243 (= (ite (= (_ bv0 32) ?x640) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x138 (and $x372 $x194)))
 (let (($x135 (and $x138 $x634)))
 (let (($x539 (and $x135 $x478)))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x221)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x378)))
 (let (($x626 (= input.spec-%var-l-0.2.0 ?x198)))
 (let (($x323 (and $x626 $x539)))
 (let (($x653 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x359 (=> $x653 $x323)))
 (let (($x336 (= $x653 (bvuge (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x410 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x515 (=> $x410 $x26)))
 (let (($x367 (= $x410 (= (ite $x117 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x514 (and $x367 $x515)))
 (let (($x343 (and $x514 $x336)))
 (let (($x154 (and $x343 $x359)))
 (let (($x200 (= $x154 true)))
 (let (($x373 (= $x200 true)))
 (let (($x469 (= $x373 true)))
 (let ((?x232 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x261 (= (_ bv0 32) ?x232)))
 (let ((?x312 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x312)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x406 (and $x15 $x168)))
 (let (($x237 (and $x406 $x261)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x452 (and $x155 $x237)))
 (let (($x171 (= $x452 true)))
 (let (($x348 (= $x171 true)))
 (let (($x24 (= $x348 true)))
 (let (($x104 (and $x24 $x469)))
 (let (($x477 (and $x104 $x277)))
 (let (($x531 (and $x26 $x477)))
 (let (($x158 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x123 (and $x158 true)))
 (let (($x8 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x146 (=> $x8 $x123)))
 (let (($x498 (= $x8 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x622 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x79 (=> $x622 $x26)))
 (let (($x593 (= $x622 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x216 (and $x593 $x79)))
 (let (($x179 (and $x216 $x498)))
 (let (($x454 (and $x179 $x146)))
 (let (($x519 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x333 (and $x519 $x454)))
 (let (($x315 (=> $x623 $x333)))
 (let (($x114 (= $x623 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x330 (= $x243 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x642 (and $x330 $x194)))
 (let (($x435 (and $x642 $x114)))
 (let (($x55 (and $x435 $x315)))
 (let (($x228 (and $x55 $x531)))
 (let (($x319 (=> $x8 true)))
 (let (($x224 (= $x8 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32)))))
 (let (($x606 (= $x622 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32)))))
 (let (($x254 (and $x606 $x79)))
 (let (($x720 (and $x254 $x224)))
 (let (($x516 (and $x720 $x319)))
 (let (($x381 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x289 (and $x381 $x516)))
 (let (($x504 (=> $x623 $x289)))
 (let (($x369 (= $x623 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x427 (= $x243 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x230 (and $x427 $x194)))
 (let (($x399 (and $x230 $x369)))
 (let (($x357 (and $x399 $x504)))
 (let (($x415 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x598 (and $x415 $x357)))
 (let (($x532 (and $x598 $x228)))
 (let (($x375 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x85 (and $x375 true)))
 (let (($x208 (=> $x8 $x85)))
 (let (($x159 (= $x8 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x614 (= $x622 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x541 (and $x614 $x79)))
 (let (($x43 (and $x541 $x159)))
 (let (($x73 (and $x43 $x208)))
 (let (($x90 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x93 (and $x90 $x73)))
 (let (($x76 (=> $x623 $x93)))
 (let (($x690 (= $x623 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x461 (= $x243 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x288 (and $x461 $x194)))
 (let (($x368 (and $x288 $x690)))
 (let (($x111 (and $x368 $x76)))
 (let (($x271 (and $x111 $x532)))
 (let (($x153 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x459 (and $x153 $x271)))
 (let ((?x50 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x165 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x344 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x50 (_ bv3 32)))))
 (let (($x656 (=> (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x344 $x165)))))))
 (let (($x466 (=> (and $x436 (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x344 $x165)))))))
 (let (($x525 (and $x466 $x459)))
 (let (($x523 (=> $x525 $x473)))
 (not $x523)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310255/query
