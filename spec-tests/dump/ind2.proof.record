==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x10 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x10 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676116/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x17 (not $x45)))
 (let (($x193 (or $x45 $x17)))
 (let (($x194 (= $x193 false)))
 (let (($x195 (= $x194 true)))
 (let (($x181 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x146 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x182 (= $x146 $x181)))
 (let (($x119 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x183 (=> $x119 $x182)))
 (let (($x178 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x141 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x179 (= $x141 $x178)))
 (let (($x180 (=> $x119 $x179)))
 (let (($x175 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x176 (=> $x119 $x175)))
 (let (($x172 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x173 (= $x119 $x172)))
 (let (($x46 (= false false)))
 (let (($x102 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x102 $x46)))
 (let (($x170 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x171 (= $x102 $x170)))
 (let (($x188 (and (and (and (and (and $x171 $x133) $x173) $x176) $x180) $x183)))
 (let (($x189 (= $x188 true)))
 (let (($x162 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x163 (= $x119 $x162)))
 (let (($x160 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x161 (= $x102 $x160)))
 (let (($x158 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x166 (and (and (and $x158 $x161) $x133) $x163)))
 (let (($x167 (= $x166 true)))
 (let (($x147 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x148 (= $x146 $x147)))
 (let (($x149 (=> $x119 $x148)))
 (let (($x143 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x144 (= $x141 $x143)))
 (let (($x145 (=> $x119 $x144)))
 (let (($x138 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x139 (=> $x119 $x138)))
 (let (($x134 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x135 (= $x119 $x134)))
 (let (($x151 (and (and (= $x102 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x133) $x135)))
 (let (($x154 (and (and (and $x151 $x139) $x145) $x149)))
 (let (($x155 (= $x154 true)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x107 (concat ?x106 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x113 (concat ?x112 (concat ?x109 ?x107))))
 (let (($x114 (= (_ bv0 32) ?x113)))
 (let ((?x115 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge ?x115 (_ bv1 32))))
 (let (($x121 (= $x119 $x120)))
 (let (($x86 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x122 (=> $x86 $x121)))
 (let (($x116 (= ?x115 (_ bv0 32))))
 (let (($x117 (= $x102 $x116)))
 (let (($x118 (=> $x86 $x117)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x92)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x95)))
 (let (($x99 (= input.spec-%var-l-0.2.0 ?x98)))
 (let (($x100 (=> $x86 $x99)))
 (let ((?x82 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x87 (bvuge ?x82 (_ bv1 32))))
 (let (($x88 (= $x86 $x87)))
 (let (($x81 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x85 (=> $x81 $x46)))
 (let (($x83 (= ?x82 (_ bv0 32))))
 (let (($x84 (= $x81 $x83)))
 (let (($x127 (and (and (and (and (and $x84 $x85) $x88) $x100) $x118) $x122)))
 (let (($x128 (= $x127 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x74 (concat ?x71 (concat ?x67 ?x65)))))
 (let (($x76 (= ?x75 input.dst.llvm-%l)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x43 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x53 (bvugt ?x43 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x43 (_ bv3 32)))))
 (let (($x59 (=> (bvule ?x43 (bvsub (bvadd ?x43 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x53)))))))
 (let (($x33 (=> (and $x17 (bvule ?x43 (bvsub (bvadd ?x43 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x52 $x53)))))))
 (let (($x31 (= $x33 true)))
 (let (($x60 (= $x31 true)))
 (let (($x61 (= $x60 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x44)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x16 $x37)))
 (let (($x6 (and $x18 $x8)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x48 $x6)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x7)))))))
 (let (($x39 (and $x15 $x9)))
 (let (($x34 (= $x39 true)))
 (let (($x14 (= $x34 true)))
 (let (($x30 (= $x14 true)))
 (let (($x62 (and $x30 $x61)))
 (let (($x79 (and $x62 $x78)))
 (let (($x129 (and $x79 $x128)))
 (let (($x156 (and $x129 $x155)))
 (let (($x168 (and $x156 $x167)))
 (let (($x190 (and $x168 $x189)))
 (let (($x191 (and $x46 $x190)))
 (let (($x12 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x192 (and $x12 $x191)))
 (let (($x196 (=> $x192 $x195)))
 (not $x196)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x17 (not $x45)))
 (let (($x193 (or $x45 $x17)))
 (let (($x194 (= $x193 false)))
 (let (($x195 (= $x194 true)))
 (let (($x181 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x146 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x182 (= $x146 $x181)))
 (let (($x119 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x183 (=> $x119 $x182)))
 (let (($x178 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x141 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x179 (= $x141 $x178)))
 (let (($x180 (=> $x119 $x179)))
 (let (($x175 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x176 (=> $x119 $x175)))
 (let (($x172 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x173 (= $x119 $x172)))
 (let (($x46 (= false false)))
 (let (($x102 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x102 $x46)))
 (let (($x170 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x171 (= $x102 $x170)))
 (let (($x188 (and (and (and (and (and $x171 $x133) $x173) $x176) $x180) $x183)))
 (let (($x189 (= $x188 true)))
 (let (($x162 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x163 (= $x119 $x162)))
 (let (($x160 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x161 (= $x102 $x160)))
 (let (($x158 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x166 (and (and (and $x158 $x161) $x133) $x163)))
 (let (($x167 (= $x166 true)))
 (let (($x147 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x148 (= $x146 $x147)))
 (let (($x149 (=> $x119 $x148)))
 (let (($x143 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x144 (= $x141 $x143)))
 (let (($x145 (=> $x119 $x144)))
 (let (($x138 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x139 (=> $x119 $x138)))
 (let (($x134 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x135 (= $x119 $x134)))
 (let (($x151 (and (and (= $x102 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x133) $x135)))
 (let (($x154 (and (and (and $x151 $x139) $x145) $x149)))
 (let (($x155 (= $x154 true)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x107 (concat ?x106 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x113 (concat ?x112 (concat ?x109 ?x107))))
 (let (($x114 (= (_ bv0 32) ?x113)))
 (let ((?x115 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge ?x115 (_ bv1 32))))
 (let (($x121 (= $x119 $x120)))
 (let (($x86 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x122 (=> $x86 $x121)))
 (let (($x116 (= ?x115 (_ bv0 32))))
 (let (($x117 (= $x102 $x116)))
 (let (($x118 (=> $x86 $x117)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x92)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x95)))
 (let (($x99 (= input.spec-%var-l-0.2.0 ?x98)))
 (let (($x100 (=> $x86 $x99)))
 (let ((?x82 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x87 (bvuge ?x82 (_ bv1 32))))
 (let (($x88 (= $x86 $x87)))
 (let (($x81 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x85 (=> $x81 $x46)))
 (let (($x83 (= ?x82 (_ bv0 32))))
 (let (($x84 (= $x81 $x83)))
 (let (($x127 (and (and (and (and (and $x84 $x85) $x88) $x100) $x118) $x122)))
 (let (($x128 (= $x127 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x74 (concat ?x71 (concat ?x67 ?x65)))))
 (let (($x76 (= ?x75 input.dst.llvm-%l)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x43 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x53 (bvugt ?x43 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x43 (_ bv3 32)))))
 (let (($x59 (=> (bvule ?x43 (bvsub (bvadd ?x43 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x53)))))))
 (let (($x33 (=> (and $x17 (bvule ?x43 (bvsub (bvadd ?x43 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x52 $x53)))))))
 (let (($x31 (= $x33 true)))
 (let (($x60 (= $x31 true)))
 (let (($x61 (= $x60 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x44)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x16 $x37)))
 (let (($x6 (and $x18 $x8)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x48 $x6)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x7)))))))
 (let (($x39 (and $x15 $x9)))
 (let (($x34 (= $x39 true)))
 (let (($x14 (= $x34 true)))
 (let (($x30 (= $x14 true)))
 (let (($x62 (and $x30 $x61)))
 (let (($x79 (and $x62 $x78)))
 (let (($x129 (and $x79 $x128)))
 (let (($x156 (and $x129 $x155)))
 (let (($x168 (and $x156 $x167)))
 (let (($x190 (and $x168 $x189)))
 (let (($x191 (and $x46 $x190)))
 (let (($x12 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x192 (and $x12 $x191)))
 (let (($x196 (=> $x192 $x195)))
 (not $x196)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%var-node_val-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d400000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x38)
              #x3840383f
              #x7f)
       #x0d400002
       #x40))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x38383838)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x38403838)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #x38383838)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x38383838)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d400000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d400003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv7 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676116/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x43 (not $x28)))
 (let (($x209 (or $x28 $x43)))
 (let (($x210 (= $x209 false)))
 (let (($x211 (= $x210 true)))
 (let (($x155 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x126 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x161 (and $x126 $x155)))
 (let (($x164 (not $x161)))
 (let (($x146 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x159 (and $x126 $x146)))
 (let (($x160 (not $x159)))
 (let (($x26 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x11 (= $x155 $x26)))
 (let (($x64 (=> $x126 $x11)))
 (let (($x195 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x196 (= $x146 $x195)))
 (let (($x197 (=> $x126 $x196)))
 (let (($x192 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x193 (=> $x126 $x192)))
 (let (($x189 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x190 (= $x126 $x189)))
 (let (($x14 (= false false)))
 (let (($x102 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x152 (=> $x102 $x14)))
 (let (($x183 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x188 (= $x102 $x183)))
 (let (($x203 (and (and (and (and (and (and $x188 $x152) $x190) $x193) $x197) $x64) $x160)))
 (let (($x204 (and $x203 $x164)))
 (let (($x205 (= $x204 true)))
 (let (($x186 (not $x126)))
 (let (($x175 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x176 (= $x126 $x175)))
 (let (($x185 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x174 (= $x102 $x185)))
 (let (($x172 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x180 (and (and (and (and $x172 $x174) $x152) $x176) $x186)))
 (let (($x187 (= $x180 true)))
 (let (($x156 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x157 (= $x155 $x156)))
 (let (($x158 (=> $x126 $x157)))
 (let (($x148 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x149 (= $x146 $x148)))
 (let (($x154 (=> $x126 $x149)))
 (let (($x144 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x145 (=> $x126 $x144)))
 (let (($x140 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x141 (= $x126 $x140)))
 (let (($x162 (and (and (= $x102 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x152) $x141)))
 (let (($x169 (and (and (and (and (and $x162 $x145) $x154) $x158) $x160) $x164)))
 (let (($x170 (= $x169 true)))
 (let (($x88 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x128 (and $x88 $x126)))
 (let (($x129 (not $x128)))
 (let (($x122 (and $x88 $x102)))
 (let (($x127 (not $x122)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x109 (concat ?x108 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x113 (concat ?x110 (concat ?x106 ?x109))))
 (let (($x114 (= (_ bv0 32) ?x113)))
 (let ((?x115 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x115 (_ bv1 32))))
 (let (($x120 (= $x126 $x119)))
 (let (($x121 (=> $x88 $x120)))
 (let (($x116 (= ?x115 (_ bv0 32))))
 (let (($x117 (= $x102 $x116)))
 (let (($x118 (=> $x88 $x117)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x90)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x92)))
 (let (($x100 (= input.spec-%var-l-0.2.0 ?x99)))
 (let (($x125 (=> $x88 $x100)))
 (let ((?x85 (ite $x28 (_ bv0 32) (_ bv1 32))))
 (let (($x124 (bvuge ?x85 (_ bv1 32))))
 (let (($x96 (= $x88 $x124)))
 (let (($x46 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x87 (=> $x46 $x14)))
 (let (($x123 (= ?x85 (_ bv0 32))))
 (let (($x86 (= $x46 $x123)))
 (let (($x134 (and (and (and (and (and (and $x86 $x87) $x96) $x125) $x118) $x121) $x127)))
 (let (($x135 (and $x134 $x129)))
 (let (($x151 (= $x135 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x78 (concat ?x75 (concat ?x67 ?x71)))))
 (let (($x80 (= ?x79 input.dst.llvm-%l)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let ((?x50 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x57 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x50 (_ bv3 32)))))
 (let (($x62 (=> (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x57)))))))
 (let (($x51 (=> (and $x43 (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x56 $x57)))))))
 (let (($x52 (= $x51 true)))
 (let (($x63 (= $x52 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x6)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x13 $x23)))
 (let (($x18 (and $x24 $x30)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x5 $x18)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x44)))))))
 (let (($x7 (and $x22 $x9)))
 (let (($x20 (= $x7 true)))
 (let (($x41 (= $x20 true)))
 (let (($x45 (= $x41 true)))
 (let (($x74 (and $x45 $x73)))
 (let (($x83 (and $x74 $x82)))
 (let (($x136 (and $x83 $x151)))
 (let (($x171 (and $x136 $x170)))
 (let (($x181 (and $x171 $x187)))
 (let (($x206 (and $x181 $x205)))
 (let (($x207 (and $x14 $x206)))
 (let (($x48 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x208 (and $x48 $x207)))
 (let (($x212 (=> $x208 $x211)))
 (not $x212))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x43 (not $x28)))
 (let (($x209 (or $x28 $x43)))
 (let (($x210 (= $x209 false)))
 (let (($x211 (= $x210 true)))
 (let (($x155 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x126 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x161 (and $x126 $x155)))
 (let (($x164 (not $x161)))
 (let (($x146 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x159 (and $x126 $x146)))
 (let (($x160 (not $x159)))
 (let (($x26 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x11 (= $x155 $x26)))
 (let (($x64 (=> $x126 $x11)))
 (let (($x195 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x196 (= $x146 $x195)))
 (let (($x197 (=> $x126 $x196)))
 (let (($x192 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x193 (=> $x126 $x192)))
 (let (($x189 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x190 (= $x126 $x189)))
 (let (($x14 (= false false)))
 (let (($x102 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x152 (=> $x102 $x14)))
 (let (($x183 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x188 (= $x102 $x183)))
 (let (($x203 (and (and (and (and (and (and $x188 $x152) $x190) $x193) $x197) $x64) $x160)))
 (let (($x204 (and $x203 $x164)))
 (let (($x205 (= $x204 true)))
 (let (($x186 (not $x126)))
 (let (($x175 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x176 (= $x126 $x175)))
 (let (($x185 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x174 (= $x102 $x185)))
 (let (($x172 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x180 (and (and (and (and $x172 $x174) $x152) $x176) $x186)))
 (let (($x187 (= $x180 true)))
 (let (($x156 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x157 (= $x155 $x156)))
 (let (($x158 (=> $x126 $x157)))
 (let (($x148 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x149 (= $x146 $x148)))
 (let (($x154 (=> $x126 $x149)))
 (let (($x144 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x145 (=> $x126 $x144)))
 (let (($x140 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x141 (= $x126 $x140)))
 (let (($x162 (and (and (= $x102 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x152) $x141)))
 (let (($x169 (and (and (and (and (and $x162 $x145) $x154) $x158) $x160) $x164)))
 (let (($x170 (= $x169 true)))
 (let (($x88 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x128 (and $x88 $x126)))
 (let (($x129 (not $x128)))
 (let (($x122 (and $x88 $x102)))
 (let (($x127 (not $x122)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x109 (concat ?x108 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x113 (concat ?x110 (concat ?x106 ?x109))))
 (let (($x114 (= (_ bv0 32) ?x113)))
 (let ((?x115 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x115 (_ bv1 32))))
 (let (($x120 (= $x126 $x119)))
 (let (($x121 (=> $x88 $x120)))
 (let (($x116 (= ?x115 (_ bv0 32))))
 (let (($x117 (= $x102 $x116)))
 (let (($x118 (=> $x88 $x117)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x90)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x92)))
 (let (($x100 (= input.spec-%var-l-0.2.0 ?x99)))
 (let (($x125 (=> $x88 $x100)))
 (let ((?x85 (ite $x28 (_ bv0 32) (_ bv1 32))))
 (let (($x124 (bvuge ?x85 (_ bv1 32))))
 (let (($x96 (= $x88 $x124)))
 (let (($x46 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x87 (=> $x46 $x14)))
 (let (($x123 (= ?x85 (_ bv0 32))))
 (let (($x86 (= $x46 $x123)))
 (let (($x134 (and (and (and (and (and (and $x86 $x87) $x96) $x125) $x118) $x121) $x127)))
 (let (($x135 (and $x134 $x129)))
 (let (($x151 (= $x135 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x78 (concat ?x75 (concat ?x67 ?x71)))))
 (let (($x80 (= ?x79 input.dst.llvm-%l)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let ((?x50 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x57 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x50 (_ bv3 32)))))
 (let (($x62 (=> (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x57)))))))
 (let (($x51 (=> (and $x43 (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x56 $x57)))))))
 (let (($x52 (= $x51 true)))
 (let (($x63 (= $x52 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x6)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x13 $x23)))
 (let (($x18 (and $x24 $x30)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x5 $x18)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x44)))))))
 (let (($x7 (and $x22 $x9)))
 (let (($x20 (= $x7 true)))
 (let (($x41 (= $x20 true)))
 (let (($x45 (= $x41 true)))
 (let (($x74 (and $x45 $x73)))
 (let (($x83 (and $x74 $x82)))
 (let (($x136 (and $x83 $x151)))
 (let (($x171 (and $x136 $x170)))
 (let (($x181 (and $x171 $x187)))
 (let (($x206 (and $x181 $x205)))
 (let (($x207 (and $x14 $x206)))
 (let (($x48 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x208 (and $x48 $x207)))
 (let (($x212 (=> $x208 $x211)))
 (not $x212))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%var-node_val-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv7 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676116/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x42 (not $x36)))
 (let (($x202 (or $x36 $x42)))
 (let (($x203 (not $x202)))
 (let (($x124 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x91 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x64 (or $x91 $x124)))
 (let (($x204 (or $x64 $x203)))
 (let (($x205 (= $x204 true)))
 (let (($x206 (= $x205 true)))
 (let (($x190 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x149 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x199 (= $x149 $x190)))
 (let (($x121 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x191 (=> $x121 $x199)))
 (let (($x188 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x163 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x198 (= $x163 $x188)))
 (let (($x189 (=> $x121 $x198)))
 (let (($x181 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x182 (=> $x121 $x181)))
 (let (($x186 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x180 (= $x121 $x186)))
 (let (($x18 (= false false)))
 (let (($x105 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x165 (=> $x105 $x18)))
 (let (($x176 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x179 (= $x105 $x176)))
 (let (($x195 (and (and (and (and (and $x179 $x165) $x180) $x182) $x189) $x191)))
 (let (($x196 (= $x195 true)))
 (let (($x184 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x172 (= $x121 $x184)))
 (let (($x170 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x171 (= $x105 $x170)))
 (let (($x164 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x174 (and (and (and $x164 $x171) $x165) $x172)))
 (let (($x177 (= $x174 true)))
 (let (($x154 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x166 (= $x149 $x154)))
 (let (($x155 (=> $x121 $x166)))
 (let (($x146 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x147 (= $x163 $x146)))
 (let (($x148 (=> $x121 $x147)))
 (let (($x143 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x144 (=> $x121 $x143)))
 (let (($x140 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x141 (= $x121 $x140)))
 (let (($x157 (and (and (= $x105 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x165) $x141)))
 (let (($x159 (and (and (and $x157 $x144) $x148) $x155)))
 (let (($x160 (= $x159 true)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x109 (concat ?x111 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x117 (concat ?x116 (concat ?x113 ?x109))))
 (let (($x118 (= (_ bv0 32) ?x117)))
 (let ((?x133 (ite $x118 (_ bv0 32) (_ bv1 32))))
 (let (($x150 (bvuge ?x133 (_ bv1 32))))
 (let (($x122 (= $x121 $x150)))
 (let (($x127 (=> $x91 $x122)))
 (let (($x126 (= ?x133 (_ bv0 32))))
 (let (($x119 (= $x105 $x126)))
 (let (($x120 (=> $x91 $x119)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x92)))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x125)))
 (let (($x103 (= input.spec-%var-l-0.2.0 ?x102)))
 (let (($x107 (=> $x91 $x103)))
 (let ((?x96 (ite $x36 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (bvuge ?x96 (_ bv1 32))))
 (let (($x93 (= $x91 $x89)))
 (let (($x135 (and (and (and (and (= $x124 (= ?x96 (_ bv0 32))) (=> $x124 $x18)) $x93) $x107) $x120)))
 (let (($x151 (and $x135 $x127)))
 (let (($x136 (= $x151 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x85 (concat ?x83 (concat ?x79 ?x65)))))
 (let (($x86 (= ?x123 input.dst.llvm-%l)))
 (let (($x14 (= $x86 true)))
 (let (($x87 (= $x14 true)))
 (let (($x78 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x68 (= $x78 true)))
 (let (($x72 (= $x68 true)))
 (let (($x75 (= $x72 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x31)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x56 $x59)))
 (let (($x62 (and $x33 $x60)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x20 $x62)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x43)))))))
 (let (($x52 (and $x55 $x51)))
 (let (($x63 (= $x52 true)))
 (let (($x73 (= $x63 true)))
 (let (($x74 (= $x73 true)))
 (let (($x66 (and $x74 $x75)))
 (let (($x130 (and $x66 $x87)))
 (let (($x137 (and $x130 $x136)))
 (let (($x168 (and $x137 $x160)))
 (let (($x178 (and $x168 $x177)))
 (let (($x197 (and $x178 $x196)))
 (let (($x201 (and $x18 $x197)))
 (let (($x30 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x26 (and $x30 $x201)))
 (let ((?x49 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x27 (bvugt ?x49 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x49 (_ bv3 32)))))
 (let (($x24 (=> (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x27)))))))
 (let (($x38 (=> (and $x42 (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x27)))))))
 (let (($x11 (and $x38 $x26)))
 (let (($x207 (=> $x11 $x206)))
 (not $x207))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x42 (not $x36)))
 (let (($x202 (or $x36 $x42)))
 (let (($x203 (not $x202)))
 (let (($x124 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x91 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x64 (or $x91 $x124)))
 (let (($x204 (or $x64 $x203)))
 (let (($x205 (= $x204 true)))
 (let (($x206 (= $x205 true)))
 (let (($x190 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x149 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x199 (= $x149 $x190)))
 (let (($x121 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x191 (=> $x121 $x199)))
 (let (($x188 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x163 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x198 (= $x163 $x188)))
 (let (($x189 (=> $x121 $x198)))
 (let (($x181 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x182 (=> $x121 $x181)))
 (let (($x186 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x180 (= $x121 $x186)))
 (let (($x18 (= false false)))
 (let (($x105 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x165 (=> $x105 $x18)))
 (let (($x176 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x179 (= $x105 $x176)))
 (let (($x195 (and (and (and (and (and $x179 $x165) $x180) $x182) $x189) $x191)))
 (let (($x196 (= $x195 true)))
 (let (($x184 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x172 (= $x121 $x184)))
 (let (($x170 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x171 (= $x105 $x170)))
 (let (($x164 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x174 (and (and (and $x164 $x171) $x165) $x172)))
 (let (($x177 (= $x174 true)))
 (let (($x154 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x166 (= $x149 $x154)))
 (let (($x155 (=> $x121 $x166)))
 (let (($x146 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x147 (= $x163 $x146)))
 (let (($x148 (=> $x121 $x147)))
 (let (($x143 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x144 (=> $x121 $x143)))
 (let (($x140 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x141 (= $x121 $x140)))
 (let (($x157 (and (and (= $x105 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x165) $x141)))
 (let (($x159 (and (and (and $x157 $x144) $x148) $x155)))
 (let (($x160 (= $x159 true)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x109 (concat ?x111 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x117 (concat ?x116 (concat ?x113 ?x109))))
 (let (($x118 (= (_ bv0 32) ?x117)))
 (let ((?x133 (ite $x118 (_ bv0 32) (_ bv1 32))))
 (let (($x150 (bvuge ?x133 (_ bv1 32))))
 (let (($x122 (= $x121 $x150)))
 (let (($x127 (=> $x91 $x122)))
 (let (($x126 (= ?x133 (_ bv0 32))))
 (let (($x119 (= $x105 $x126)))
 (let (($x120 (=> $x91 $x119)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x92)))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x125)))
 (let (($x103 (= input.spec-%var-l-0.2.0 ?x102)))
 (let (($x107 (=> $x91 $x103)))
 (let ((?x96 (ite $x36 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (bvuge ?x96 (_ bv1 32))))
 (let (($x93 (= $x91 $x89)))
 (let (($x135 (and (and (and (and (= $x124 (= ?x96 (_ bv0 32))) (=> $x124 $x18)) $x93) $x107) $x120)))
 (let (($x151 (and $x135 $x127)))
 (let (($x136 (= $x151 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x85 (concat ?x83 (concat ?x79 ?x65)))))
 (let (($x86 (= ?x123 input.dst.llvm-%l)))
 (let (($x14 (= $x86 true)))
 (let (($x87 (= $x14 true)))
 (let (($x78 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x68 (= $x78 true)))
 (let (($x72 (= $x68 true)))
 (let (($x75 (= $x72 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x31)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x56 $x59)))
 (let (($x62 (and $x33 $x60)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x20 $x62)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x43)))))))
 (let (($x52 (and $x55 $x51)))
 (let (($x63 (= $x52 true)))
 (let (($x73 (= $x63 true)))
 (let (($x74 (= $x73 true)))
 (let (($x66 (and $x74 $x75)))
 (let (($x130 (and $x66 $x87)))
 (let (($x137 (and $x130 $x136)))
 (let (($x168 (and $x137 $x160)))
 (let (($x178 (and $x168 $x177)))
 (let (($x197 (and $x178 $x196)))
 (let (($x201 (and $x18 $x197)))
 (let (($x30 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x26 (and $x30 $x201)))
 (let ((?x49 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x27 (bvugt ?x49 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x49 (_ bv3 32)))))
 (let (($x24 (=> (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x27)))))))
 (let (($x38 (=> (and $x42 (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x27)))))))
 (let (($x11 (and $x38 $x26)))
 (let (($x207 (=> $x11 $x206)))
 (not $x207))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676116/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var351X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x263 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var351X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x264 (concat ?x263 (select input.dst.llvm-mem (bvadd input.ind-%var351X (_ bv4 32))))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var351X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var351X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x270 (concat ?x269 (concat ?x266 ?x264))))
 (let (($x271 (= ?x270 ?x270)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x149 (concat ?x167 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x168 (concat ?x160 (concat ?x166 ?x149))))
 (let (($x161 (= (_ bv0 32) ?x168)))
 (let ((?x164 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x164 (_ bv1 32))))
 (let (($x272 (=> $x185 $x271)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd input.ind-%var351X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var351X))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.ind-%var351X (_ bv2 32))) ?x251)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd input.ind-%var351X (_ bv3 32))) ?x254)))
 (let (($x258 (= ?x257 ?x257)))
 (let (($x259 (=> $x185 $x258)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x107 (concat ?x103 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x5 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x42 (bvadd ?x5 (_ bv3 32))))
 (let ((?x115 (concat (select input.dst.llvm-mem ?x42) (concat ?x110 ?x107))))
 (let (($x240 (= (_ bv0 32) ?x115)))
 (let ((?x241 (ite $x240 (_ bv0 32) (_ bv1 32))))
 (let (($x245 (bvuge ?x241 (_ bv1 32))))
 (let (($x246 (= $x185 $x245)))
 (let (($x49 (= false false)))
 (let (($x169 (= ?x164 (_ bv0 32))))
 (let (($x244 (=> $x169 $x49)))
 (let (($x276 (and (and (and (and (= ?x168 ?x115) (= $x169 (= ?x241 (_ bv0 32)))) $x244) $x246) $x259)))
 (let (($x277 (and $x276 $x272)))
 (let (($x238 (= true true)))
 (let (($x278 (and $x238 $x277)))
 (let (($x279 (= $x278 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x196 $x224)))
 (let (($x173 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x173 $x225)))
 (let (($x221 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x194 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x222 (= $x194 $x221)))
 (let (($x223 (=> $x173 $x222)))
 (let (($x218 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x219 (=> $x173 $x218)))
 (let (($x215 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x216 (= $x173 $x215)))
 (let (($x153 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x187 (=> $x153 $x49)))
 (let (($x70 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x214 (= $x153 $x70)))
 (let (($x231 (and (and (and (and (and $x214 $x187) $x216) $x219) $x223) $x226)))
 (let (($x232 (= $x231 true)))
 (let (($x209 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x210 (= $x173 $x209)))
 (let (($x9 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x71 (= $x153 $x9)))
 (let (($x208 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x213 (and (and (and $x208 $x71) $x187) $x210)))
 (let (($x58 (= $x213 true)))
 (let (($x197 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x201 (= $x196 $x197)))
 (let (($x26 (=> $x173 $x201)))
 (let (($x199 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x191 (= $x194 $x199)))
 (let (($x195 (=> $x173 $x191)))
 (let (($x188 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x198 (=> $x173 $x188)))
 (let (($x181 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x182 (= $x173 $x181)))
 (let (($x64 (and (and (= $x153 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x187) $x182)))
 (let (($x204 (and (and (and $x64 $x198) $x195) $x26)))
 (let (($x205 (= $x204 true)))
 (let (($x184 (= $x173 $x185)))
 (let (($x59 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x172 (=> $x59 $x184)))
 (let (($x170 (= $x153 $x169)))
 (let (($x171 (=> $x59 $x170)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x140)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x162)))
 (let (($x158 (= input.spec-%var-l-0.2.0 ?x144)))
 (let (($x145 (=> $x59 $x158)))
 (let (($x44 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x127 (ite $x44 (_ bv0 32) (_ bv1 32))))
 (let (($x138 (bvuge ?x127 (_ bv1 32))))
 (let (($x139 (= $x59 $x138)))
 (let (($x122 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x137 (=> $x122 $x49)))
 (let (($x151 (= ?x127 (_ bv0 32))))
 (let (($x136 (= $x122 $x151)))
 (let (($x176 (and (and (and (and (and $x136 $x137) $x139) $x145) $x171) $x172)))
 (let (($x179 (= $x176 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x130 (concat ?x86 (concat ?x65 ?x76)))))
 (let (($x120 (= ?x88 input.dst.llvm-%l)))
 (let (($x135 (= $x120 true)))
 (let (($x121 (= $x135 true)))
 (let (($x104 (= (bvand ?x115 (_ bv4294967288 32)) ?x115)))
 (let (($x92 (= (bvand ?x5 (_ bv4294967292 32)) ?x5)))
 (let (($x113 (and $x92 $x104)))
 (let (($x100 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x97 (and true $x100)))
 (let (($x93 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x5 (bvsub ?x5 (_ bv4 32))) (bvult ?x5 (bvsub ?x5 (_ bv4 32))))))
 (let (($x112 (and (and (and $x93 $x97) $x92) $x113)))
 (let (($x109 (= true $x112)))
 (let (($x15 (not $x44)))
 (let (($x114 (=> $x15 $x109)))
 (let (($x124 (= input.dst.llvm-%l ?x88)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x67)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x68 $x75)))
 (let (($x85 (and $x66 $x46)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x20 $x85)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x13)))))))
 (let (($x61 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x95 (and (and (and $x61 $x10) $x81) $x124)))
 (let (($x18 (and true $x95)))
 (let (($x117 (and $x18 $x114)))
 (let (($x118 (= $x117 true)))
 (let (($x133 (= $x118 true)))
 (let (($x126 (= $x133 true)))
 (let (($x19 (= $x15 true)))
 (let (($x40 (= $x19 true)))
 (let (($x23 (= $x40 true)))
 (let (($x60 (= $x61 true)))
 (let (($x51 (= $x60 true)))
 (let (($x56 (= $x51 true)))
 (let (($x43 (and $x56 $x23)))
 (let (($x119 (and $x43 $x126)))
 (let (($x150 (and $x119 $x121)))
 (let (($x192 (and $x150 $x179)))
 (let (($x206 (and $x192 $x205)))
 (let (($x12 (and $x206 $x58)))
 (let (($x233 (and $x12 $x232)))
 (let (($x234 (and $x59 $x233)))
 (let (($x235 (and $x49 $x234)))
 (let (($x25 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x236 (and $x25 $x235)))
 (let (($x78 (bvugt ?x5 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x50 (=> (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x78)))))))
 (let (($x35 (=> (and $x15 (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x29 $x78)))))))
 (let (($x237 (and $x35 $x236)))
 (let (($x280 (=> $x237 $x279)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var351X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x263 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var351X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x264 (concat ?x263 (select input.dst.llvm-mem (bvadd input.ind-%var351X (_ bv4 32))))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var351X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var351X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x270 (concat ?x269 (concat ?x266 ?x264))))
 (let (($x271 (= ?x270 ?x270)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x149 (concat ?x167 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x168 (concat ?x160 (concat ?x166 ?x149))))
 (let (($x161 (= (_ bv0 32) ?x168)))
 (let ((?x164 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x164 (_ bv1 32))))
 (let (($x272 (=> $x185 $x271)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd input.ind-%var351X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var351X))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.ind-%var351X (_ bv2 32))) ?x251)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd input.ind-%var351X (_ bv3 32))) ?x254)))
 (let (($x258 (= ?x257 ?x257)))
 (let (($x259 (=> $x185 $x258)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x107 (concat ?x103 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x5 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x42 (bvadd ?x5 (_ bv3 32))))
 (let ((?x115 (concat (select input.dst.llvm-mem ?x42) (concat ?x110 ?x107))))
 (let (($x240 (= (_ bv0 32) ?x115)))
 (let ((?x241 (ite $x240 (_ bv0 32) (_ bv1 32))))
 (let (($x245 (bvuge ?x241 (_ bv1 32))))
 (let (($x246 (= $x185 $x245)))
 (let (($x49 (= false false)))
 (let (($x169 (= ?x164 (_ bv0 32))))
 (let (($x244 (=> $x169 $x49)))
 (let (($x276 (and (and (and (and (= ?x168 ?x115) (= $x169 (= ?x241 (_ bv0 32)))) $x244) $x246) $x259)))
 (let (($x277 (and $x276 $x272)))
 (let (($x238 (= true true)))
 (let (($x278 (and $x238 $x277)))
 (let (($x279 (= $x278 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x196 $x224)))
 (let (($x173 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x173 $x225)))
 (let (($x221 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x194 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x222 (= $x194 $x221)))
 (let (($x223 (=> $x173 $x222)))
 (let (($x218 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x219 (=> $x173 $x218)))
 (let (($x215 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x216 (= $x173 $x215)))
 (let (($x153 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x187 (=> $x153 $x49)))
 (let (($x70 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x214 (= $x153 $x70)))
 (let (($x231 (and (and (and (and (and $x214 $x187) $x216) $x219) $x223) $x226)))
 (let (($x232 (= $x231 true)))
 (let (($x209 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x210 (= $x173 $x209)))
 (let (($x9 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x71 (= $x153 $x9)))
 (let (($x208 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x213 (and (and (and $x208 $x71) $x187) $x210)))
 (let (($x58 (= $x213 true)))
 (let (($x197 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x201 (= $x196 $x197)))
 (let (($x26 (=> $x173 $x201)))
 (let (($x199 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x191 (= $x194 $x199)))
 (let (($x195 (=> $x173 $x191)))
 (let (($x188 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x198 (=> $x173 $x188)))
 (let (($x181 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x182 (= $x173 $x181)))
 (let (($x64 (and (and (= $x153 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x187) $x182)))
 (let (($x204 (and (and (and $x64 $x198) $x195) $x26)))
 (let (($x205 (= $x204 true)))
 (let (($x184 (= $x173 $x185)))
 (let (($x59 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x172 (=> $x59 $x184)))
 (let (($x170 (= $x153 $x169)))
 (let (($x171 (=> $x59 $x170)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x140)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x162)))
 (let (($x158 (= input.spec-%var-l-0.2.0 ?x144)))
 (let (($x145 (=> $x59 $x158)))
 (let (($x44 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x127 (ite $x44 (_ bv0 32) (_ bv1 32))))
 (let (($x138 (bvuge ?x127 (_ bv1 32))))
 (let (($x139 (= $x59 $x138)))
 (let (($x122 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x137 (=> $x122 $x49)))
 (let (($x151 (= ?x127 (_ bv0 32))))
 (let (($x136 (= $x122 $x151)))
 (let (($x176 (and (and (and (and (and $x136 $x137) $x139) $x145) $x171) $x172)))
 (let (($x179 (= $x176 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x130 (concat ?x86 (concat ?x65 ?x76)))))
 (let (($x120 (= ?x88 input.dst.llvm-%l)))
 (let (($x135 (= $x120 true)))
 (let (($x121 (= $x135 true)))
 (let (($x104 (= (bvand ?x115 (_ bv4294967288 32)) ?x115)))
 (let (($x92 (= (bvand ?x5 (_ bv4294967292 32)) ?x5)))
 (let (($x113 (and $x92 $x104)))
 (let (($x100 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x97 (and true $x100)))
 (let (($x93 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x5 (bvsub ?x5 (_ bv4 32))) (bvult ?x5 (bvsub ?x5 (_ bv4 32))))))
 (let (($x112 (and (and (and $x93 $x97) $x92) $x113)))
 (let (($x109 (= true $x112)))
 (let (($x15 (not $x44)))
 (let (($x114 (=> $x15 $x109)))
 (let (($x124 (= input.dst.llvm-%l ?x88)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x67)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x68 $x75)))
 (let (($x85 (and $x66 $x46)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x20 $x85)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x13)))))))
 (let (($x61 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x95 (and (and (and $x61 $x10) $x81) $x124)))
 (let (($x18 (and true $x95)))
 (let (($x117 (and $x18 $x114)))
 (let (($x118 (= $x117 true)))
 (let (($x133 (= $x118 true)))
 (let (($x126 (= $x133 true)))
 (let (($x19 (= $x15 true)))
 (let (($x40 (= $x19 true)))
 (let (($x23 (= $x40 true)))
 (let (($x60 (= $x61 true)))
 (let (($x51 (= $x60 true)))
 (let (($x56 (= $x51 true)))
 (let (($x43 (and $x56 $x23)))
 (let (($x119 (and $x43 $x126)))
 (let (($x150 (and $x119 $x121)))
 (let (($x192 (and $x150 $x179)))
 (let (($x206 (and $x192 $x205)))
 (let (($x12 (and $x206 $x58)))
 (let (($x233 (and $x12 $x232)))
 (let (($x234 (and $x59 $x233)))
 (let (($x235 (and $x49 $x234)))
 (let (($x25 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x236 (and $x25 $x235)))
 (let (($x78 (bvugt ?x5 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x50 (=> (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x78)))))))
 (let (($x35 (=> (and $x15 (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x29 $x78)))))))
 (let (($x237 (and $x35 $x236)))
 (let (($x280 (=> $x237 $x279)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676116/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var380X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x276 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var380X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x260 (concat ?x276 (select input.dst.llvm-mem (bvadd input.ind-%var380X (_ bv4 32))))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var380X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var380X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x263 (concat ?x262 (concat ?x269 ?x260))))
 (let (($x261 (= ?x263 ?x263)))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x148 (concat ?x166 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x161 (concat ?x168 (concat ?x147 ?x148))))
 (let (($x164 (= (_ bv0 32) ?x161)))
 (let ((?x169 (ite $x164 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x169 (_ bv1 32))))
 (let (($x264 (=> $x185 $x261)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd input.ind-%var380X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var380X))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.ind-%var380X (_ bv2 32))) ?x255)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd input.ind-%var380X (_ bv3 32))) ?x253)))
 (let (($x251 (= ?x248 ?x248)))
 (let (($x254 (=> $x185 $x251)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x59 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x138 (= ?x59 (_ bv0 32))))
 (let (($x170 (= ?x169 (_ bv0 32))))
 (let (($x274 (= $x170 $x138)))
 (let (($x142 (bvuge ?x59 (_ bv1 32))))
 (let (($x244 (= $x185 $x142)))
 (let (($x270 (and (and (=> $x170 (= false false)) (= ?x161 input.dst.llvm-%l)) $x244)))
 (let (($x277 (and (and (and $x270 $x274) $x254) $x264)))
 (let (($x242 (= true true)))
 (let (($x278 (and $x242 $x277)))
 (let (($x279 (= $x278 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x196 $x224)))
 (let (($x173 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x173 $x225)))
 (let (($x222 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x190 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x223 (= $x190 $x222)))
 (let (($x230 (=> $x173 $x223)))
 (let (($x229 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x220 (=> $x173 $x229)))
 (let (($x217 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x218 (= $x173 $x217)))
 (let (($x61 (= false false)))
 (let (($x146 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x64 (=> $x146 $x61)))
 (let (($x216 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x228 (= $x146 $x216)))
 (let (($x235 (and (and (and (and (and $x228 $x64) $x218) $x220) $x230) $x226)))
 (let (($x236 (= $x235 true)))
 (let (($x213 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x58 (= $x173 $x213)))
 (let (($x209 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x210 (= $x146 $x209)))
 (let (($x211 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x70 (and (and (and $x211 $x210) $x64) $x58)))
 (let (($x214 (= $x70 true)))
 (let (($x197 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x201 (= $x196 $x197)))
 (let (($x26 (=> $x173 $x201)))
 (let (($x191 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x195 (= $x190 $x191)))
 (let (($x203 (=> $x173 $x195)))
 (let (($x202 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x189 (=> $x173 $x202)))
 (let (($x200 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x183 (= $x173 $x200)))
 (let (($x205 (and (and (= $x146 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x64) $x183)))
 (let (($x208 (and (and (and $x205 $x189) $x203) $x26)))
 (let (($x48 (= $x208 true)))
 (let (($x184 (= $x173 $x185)))
 (let (($x51 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x172 (=> $x51 $x184)))
 (let (($x171 (= $x146 $x170)))
 (let (($x175 (=> $x51 $x171)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x156)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x162)))
 (let (($x178 (= input.spec-%var-l-0.2.0 ?x145)))
 (let (($x163 (=> $x51 $x178)))
 (let (($x143 (= $x51 $x142)))
 (let (($x174 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x177 (=> $x174 $x61)))
 (let (($x139 (= $x174 $x138)))
 (let (($x180 (and (and (and (and (and $x139 $x177) $x143) $x163) $x175) $x172)))
 (let (($x193 (= $x180 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x134 (concat ?x124 (concat ?x76 ?x79)))))
 (let (($x151 (= ?x98 input.dst.llvm-%l)))
 (let (($x136 (= $x151 true)))
 (let (($x49 (= $x136 true)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x115 (concat ?x105 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x8 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x47 (bvadd ?x8 (_ bv3 32))))
 (let ((?x109 (concat (select input.dst.llvm-mem ?x47) (concat ?x104 ?x115))))
 (let (($x117 (= (bvand ?x109 (_ bv4294967288 32)) ?x109)))
 (let (($x103 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x118 (and $x103 $x117)))
 (let (($x106 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x129 (and true $x106)))
 (let (($x108 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x119 (and (and (and $x108 $x129) $x103) $x118)))
 (let (($x120 (= true $x119)))
 (let (($x27 (not $x5)))
 (let (($x135 (=> $x27 $x120)))
 (let (($x91 (= input.dst.llvm-%l ?x98)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x82)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x46 $x81)))
 (let (($x130 (and $x131 $x87)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x17 $x130)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x33)))))))
 (let (($x40 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x132 (and (and (and $x40 $x67) $x84) $x91)))
 (let (($x128 (and true $x132)))
 (let (($x121 (and $x128 $x135)))
 (let (($x150 (= $x121 true)))
 (let (($x55 (= $x150 true)))
 (let (($x122 (= $x55 true)))
 (let (($x7 (= $x5 true)))
 (let (($x32 (= $x7 true)))
 (let (($x62 (= $x32 true)))
 (let (($x23 (= $x40 true)))
 (let (($x43 (= $x23 true)))
 (let (($x57 (= $x43 true)))
 (let (($x30 (and $x57 $x62)))
 (let (($x127 (and $x30 $x122)))
 (let (($x137 (and $x127 $x49)))
 (let (($x187 (and $x137 $x193)))
 (let (($x9 (and $x187 $x48)))
 (let (($x227 (and $x9 $x214)))
 (let (($x237 (and $x227 $x236)))
 (let (($x238 (and $x51 $x237)))
 (let (($x239 (and $x61 $x238)))
 (let (($x73 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x240 (and $x73 $x239)))
 (let (($x38 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x25 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x38)))))))
 (let (($x28 (=> (and $x27 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x45 $x38)))))))
 (let (($x241 (and $x28 $x240)))
 (let (($x280 (=> $x241 $x279)))
 (not $x280)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var380X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x276 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var380X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x260 (concat ?x276 (select input.dst.llvm-mem (bvadd input.ind-%var380X (_ bv4 32))))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var380X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var380X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x263 (concat ?x262 (concat ?x269 ?x260))))
 (let (($x261 (= ?x263 ?x263)))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x148 (concat ?x166 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x161 (concat ?x168 (concat ?x147 ?x148))))
 (let (($x164 (= (_ bv0 32) ?x161)))
 (let ((?x169 (ite $x164 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x169 (_ bv1 32))))
 (let (($x264 (=> $x185 $x261)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd input.ind-%var380X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var380X))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.ind-%var380X (_ bv2 32))) ?x255)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd input.ind-%var380X (_ bv3 32))) ?x253)))
 (let (($x251 (= ?x248 ?x248)))
 (let (($x254 (=> $x185 $x251)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x59 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x138 (= ?x59 (_ bv0 32))))
 (let (($x170 (= ?x169 (_ bv0 32))))
 (let (($x274 (= $x170 $x138)))
 (let (($x142 (bvuge ?x59 (_ bv1 32))))
 (let (($x244 (= $x185 $x142)))
 (let (($x270 (and (and (=> $x170 (= false false)) (= ?x161 input.dst.llvm-%l)) $x244)))
 (let (($x277 (and (and (and $x270 $x274) $x254) $x264)))
 (let (($x242 (= true true)))
 (let (($x278 (and $x242 $x277)))
 (let (($x279 (= $x278 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x196 $x224)))
 (let (($x173 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x173 $x225)))
 (let (($x222 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x190 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x223 (= $x190 $x222)))
 (let (($x230 (=> $x173 $x223)))
 (let (($x229 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x220 (=> $x173 $x229)))
 (let (($x217 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x218 (= $x173 $x217)))
 (let (($x61 (= false false)))
 (let (($x146 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x64 (=> $x146 $x61)))
 (let (($x216 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x228 (= $x146 $x216)))
 (let (($x235 (and (and (and (and (and $x228 $x64) $x218) $x220) $x230) $x226)))
 (let (($x236 (= $x235 true)))
 (let (($x213 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x58 (= $x173 $x213)))
 (let (($x209 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x210 (= $x146 $x209)))
 (let (($x211 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x70 (and (and (and $x211 $x210) $x64) $x58)))
 (let (($x214 (= $x70 true)))
 (let (($x197 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x201 (= $x196 $x197)))
 (let (($x26 (=> $x173 $x201)))
 (let (($x191 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x195 (= $x190 $x191)))
 (let (($x203 (=> $x173 $x195)))
 (let (($x202 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x189 (=> $x173 $x202)))
 (let (($x200 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x183 (= $x173 $x200)))
 (let (($x205 (and (and (= $x146 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x64) $x183)))
 (let (($x208 (and (and (and $x205 $x189) $x203) $x26)))
 (let (($x48 (= $x208 true)))
 (let (($x184 (= $x173 $x185)))
 (let (($x51 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x172 (=> $x51 $x184)))
 (let (($x171 (= $x146 $x170)))
 (let (($x175 (=> $x51 $x171)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x156)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x162)))
 (let (($x178 (= input.spec-%var-l-0.2.0 ?x145)))
 (let (($x163 (=> $x51 $x178)))
 (let (($x143 (= $x51 $x142)))
 (let (($x174 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x177 (=> $x174 $x61)))
 (let (($x139 (= $x174 $x138)))
 (let (($x180 (and (and (and (and (and $x139 $x177) $x143) $x163) $x175) $x172)))
 (let (($x193 (= $x180 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x134 (concat ?x124 (concat ?x76 ?x79)))))
 (let (($x151 (= ?x98 input.dst.llvm-%l)))
 (let (($x136 (= $x151 true)))
 (let (($x49 (= $x136 true)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x115 (concat ?x105 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x8 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x47 (bvadd ?x8 (_ bv3 32))))
 (let ((?x109 (concat (select input.dst.llvm-mem ?x47) (concat ?x104 ?x115))))
 (let (($x117 (= (bvand ?x109 (_ bv4294967288 32)) ?x109)))
 (let (($x103 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x118 (and $x103 $x117)))
 (let (($x106 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x129 (and true $x106)))
 (let (($x108 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x119 (and (and (and $x108 $x129) $x103) $x118)))
 (let (($x120 (= true $x119)))
 (let (($x27 (not $x5)))
 (let (($x135 (=> $x27 $x120)))
 (let (($x91 (= input.dst.llvm-%l ?x98)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x82)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x46 $x81)))
 (let (($x130 (and $x131 $x87)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x17 $x130)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x33)))))))
 (let (($x40 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x132 (and (and (and $x40 $x67) $x84) $x91)))
 (let (($x128 (and true $x132)))
 (let (($x121 (and $x128 $x135)))
 (let (($x150 (= $x121 true)))
 (let (($x55 (= $x150 true)))
 (let (($x122 (= $x55 true)))
 (let (($x7 (= $x5 true)))
 (let (($x32 (= $x7 true)))
 (let (($x62 (= $x32 true)))
 (let (($x23 (= $x40 true)))
 (let (($x43 (= $x23 true)))
 (let (($x57 (= $x43 true)))
 (let (($x30 (and $x57 $x62)))
 (let (($x127 (and $x30 $x122)))
 (let (($x137 (and $x127 $x49)))
 (let (($x187 (and $x137 $x193)))
 (let (($x9 (and $x187 $x48)))
 (let (($x227 (and $x9 $x214)))
 (let (($x237 (and $x227 $x236)))
 (let (($x238 (and $x51 $x237)))
 (let (($x239 (and $x61 $x238)))
 (let (($x73 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x240 (and $x73 $x239)))
 (let (($x38 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x25 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x38)))))))
 (let (($x28 (=> (and $x27 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x45 $x38)))))))
 (let (($x241 (and $x28 $x240)))
 (let (($x280 (=> $x241 $x279)))
 (not $x280)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676116/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var409X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x258 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x260 (concat ?x258 (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv4 32))))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x278 (concat ?x277 (concat ?x263 ?x260))))
 (let (($x279 (= ?x278 ?x278)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x176 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x144 (bvuge ?x176 (_ bv1 32))))
 (let (($x280 (=> $x144 $x279)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var409X))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv2 32))) ?x253)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv3 32))) ?x254)))
 (let (($x262 (= ?x266 ?x266)))
 (let (($x268 (=> $x144 $x262)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x109 (concat ?x113 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x41 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x53 (bvadd ?x41 (_ bv3 32))))
 (let ((?x120 (concat (select input.dst.llvm-mem ?x53) (concat ?x117 ?x109))))
 (let (($x274 (= (_ bv0 32) ?x120)))
 (let ((?x271 (ite $x274 (_ bv0 32) (_ bv1 32))))
 (let (($x256 (bvuge ?x271 (_ bv1 32))))
 (let (($x252 (= $x144 $x256)))
 (let (($x40 (= false false)))
 (let (($x51 (= ?x176 (_ bv0 32))))
 (let (($x250 (=> $x51 $x40)))
 (let (($x44 (and (and (and (= input.dst.llvm-%l ?x120) (= $x51 (= ?x271 (_ bv0 32)))) $x250) $x252)))
 (let (($x86 (and (and $x44 $x268) $x280)))
 (let (($x244 (= true true)))
 (let (($x36 (and $x244 $x86)))
 (let (($x39 (= $x36 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x196 $x224)))
 (let (($x173 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x173 $x225)))
 (let (($x223 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x199 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x230 (= $x199 $x223)))
 (let (($x234 (=> $x173 $x230)))
 (let (($x233 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x221 (=> $x173 $x233)))
 (let (($x219 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x229 (= $x173 $x219)))
 (let (($x159 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x205 (=> $x159 $x40)))
 (let (($x218 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x232 (= $x159 $x218)))
 (let (($x239 (and (and (and (and (and $x232 $x205) $x229) $x221) $x234) $x226)))
 (let (($x240 (= $x239 true)))
 (let (($x70 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x214 (= $x173 $x70)))
 (let (($x213 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x58 (= $x159 $x213)))
 (let (($x12 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x216 (and (and (and $x12 $x58) $x205) $x214)))
 (let (($x228 (= $x216 true)))
 (let (($x197 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x201 (= $x196 $x197)))
 (let (($x26 (=> $x173 $x201)))
 (let (($x195 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x203 (= $x199 $x195)))
 (let (($x207 (=> $x173 $x203)))
 (let (($x206 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x194 (=> $x173 $x206)))
 (let (($x188 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x198 (= $x173 $x188)))
 (let (($x48 (and (and (= $x159 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x205) $x198)))
 (let (($x211 (and (and (and $x48 $x194) $x207) $x26)))
 (let (($x212 (= $x211 true)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x154 (concat ?x147 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x164 (concat ?x161 (concat ?x160 ?x154))))
 (let (($x169 (= (_ bv0 32) ?x164)))
 (let ((?x170 (ite $x169 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x170 (_ bv1 32))))
 (let (($x184 (= $x173 $x185)))
 (let (($x179 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x172 (=> $x179 $x184)))
 (let (($x171 (= ?x170 (_ bv0 32))))
 (let (($x175 (= $x159 $x171)))
 (let (($x186 (=> $x179 $x175)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x165)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x162)))
 (let (($x192 (= input.spec-%var-l-0.2.0 ?x163)))
 (let (($x153 (=> $x179 $x192)))
 (let (($x158 (= $x179 $x144)))
 (let (($x43 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x143 (=> $x43 $x40)))
 (let (($x142 (= $x43 $x51)))
 (let (($x181 (and (and (and (and (and $x142 $x143) $x158) $x153) $x186) $x172)))
 (let (($x182 (= $x181 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x99 (concat ?x91 (concat ?x79 ?x65)))))
 (let (($x138 (= ?x101 input.dst.llvm-%l)))
 (let (($x139 (= $x138 true)))
 (let (($x61 (= $x139 true)))
 (let (($x121 (= (bvand ?x120 (_ bv4294967288 32)) ?x120)))
 (let (($x105 (= (bvand ?x41 (_ bv4294967292 32)) ?x41)))
 (let (($x150 (and $x105 $x121)))
 (let (($x112 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x116 (and true $x112)))
 (let (($x133 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x41 (bvsub ?x41 (_ bv4 32))) (bvult ?x41 (bvsub ?x41 (_ bv4 32))))))
 (let (($x127 (and (and (and $x133 $x116) $x105) $x150)))
 (let (($x151 (= true $x127)))
 (let (($x27 (not $x5)))
 (let (($x136 (=> $x27 $x151)))
 (let (($x100 (= input.dst.llvm-%l ?x101)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x123)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x87 $x84)))
 (let (($x134 (and $x93 $x18)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x68 $x134)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x37)))))))
 (let (($x32 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x94 (and (and (and $x32 $x82) $x14) $x100)))
 (let (($x90 (and true $x94)))
 (let (($x49 (and $x90 $x136)))
 (let (($x137 (= $x49 true)))
 (let (($x60 (= $x137 true)))
 (let (($x174 (= $x60 true)))
 (let (($x24 (= $x27 true)))
 (let (($x66 (= $x24 true)))
 (let (($x10 (= $x66 true)))
 (let (($x62 (= $x32 true)))
 (let (($x30 (= $x62 true)))
 (let (($x54 (= $x30 true)))
 (let (($x96 (and $x54 $x10)))
 (let (($x59 (and $x96 $x174)))
 (let (($x177 (and $x59 $x61)))
 (let (($x64 (and $x177 $x182)))
 (let (($x209 (and $x64 $x212)))
 (let (($x231 (and $x209 $x228)))
 (let (($x241 (and $x231 $x240)))
 (let (($x242 (and $x43 $x241)))
 (let (($x243 (and $x40 $x242)))
 (let (($x19 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x273 (and $x19 $x243)))
 (let (($x35 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x73 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x35)))))))
 (let (($x42 (=> (and $x27 (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x50 $x35)))))))
 (let (($x267 (and $x42 $x273)))
 (let (($x52 (=> $x267 $x39)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var409X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x258 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x260 (concat ?x258 (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv4 32))))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x278 (concat ?x277 (concat ?x263 ?x260))))
 (let (($x279 (= ?x278 ?x278)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x176 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x144 (bvuge ?x176 (_ bv1 32))))
 (let (($x280 (=> $x144 $x279)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var409X))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv2 32))) ?x253)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv3 32))) ?x254)))
 (let (($x262 (= ?x266 ?x266)))
 (let (($x268 (=> $x144 $x262)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x109 (concat ?x113 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x41 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x53 (bvadd ?x41 (_ bv3 32))))
 (let ((?x120 (concat (select input.dst.llvm-mem ?x53) (concat ?x117 ?x109))))
 (let (($x274 (= (_ bv0 32) ?x120)))
 (let ((?x271 (ite $x274 (_ bv0 32) (_ bv1 32))))
 (let (($x256 (bvuge ?x271 (_ bv1 32))))
 (let (($x252 (= $x144 $x256)))
 (let (($x40 (= false false)))
 (let (($x51 (= ?x176 (_ bv0 32))))
 (let (($x250 (=> $x51 $x40)))
 (let (($x44 (and (and (and (= input.dst.llvm-%l ?x120) (= $x51 (= ?x271 (_ bv0 32)))) $x250) $x252)))
 (let (($x86 (and (and $x44 $x268) $x280)))
 (let (($x244 (= true true)))
 (let (($x36 (and $x244 $x86)))
 (let (($x39 (= $x36 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x196 $x224)))
 (let (($x173 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x173 $x225)))
 (let (($x223 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x199 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x230 (= $x199 $x223)))
 (let (($x234 (=> $x173 $x230)))
 (let (($x233 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x221 (=> $x173 $x233)))
 (let (($x219 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x229 (= $x173 $x219)))
 (let (($x159 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x205 (=> $x159 $x40)))
 (let (($x218 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x232 (= $x159 $x218)))
 (let (($x239 (and (and (and (and (and $x232 $x205) $x229) $x221) $x234) $x226)))
 (let (($x240 (= $x239 true)))
 (let (($x70 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x214 (= $x173 $x70)))
 (let (($x213 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x58 (= $x159 $x213)))
 (let (($x12 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x216 (and (and (and $x12 $x58) $x205) $x214)))
 (let (($x228 (= $x216 true)))
 (let (($x197 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x201 (= $x196 $x197)))
 (let (($x26 (=> $x173 $x201)))
 (let (($x195 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x203 (= $x199 $x195)))
 (let (($x207 (=> $x173 $x203)))
 (let (($x206 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x194 (=> $x173 $x206)))
 (let (($x188 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x198 (= $x173 $x188)))
 (let (($x48 (and (and (= $x159 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x205) $x198)))
 (let (($x211 (and (and (and $x48 $x194) $x207) $x26)))
 (let (($x212 (= $x211 true)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x154 (concat ?x147 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x164 (concat ?x161 (concat ?x160 ?x154))))
 (let (($x169 (= (_ bv0 32) ?x164)))
 (let ((?x170 (ite $x169 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x170 (_ bv1 32))))
 (let (($x184 (= $x173 $x185)))
 (let (($x179 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x172 (=> $x179 $x184)))
 (let (($x171 (= ?x170 (_ bv0 32))))
 (let (($x175 (= $x159 $x171)))
 (let (($x186 (=> $x179 $x175)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x165)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x162)))
 (let (($x192 (= input.spec-%var-l-0.2.0 ?x163)))
 (let (($x153 (=> $x179 $x192)))
 (let (($x158 (= $x179 $x144)))
 (let (($x43 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x143 (=> $x43 $x40)))
 (let (($x142 (= $x43 $x51)))
 (let (($x181 (and (and (and (and (and $x142 $x143) $x158) $x153) $x186) $x172)))
 (let (($x182 (= $x181 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x99 (concat ?x91 (concat ?x79 ?x65)))))
 (let (($x138 (= ?x101 input.dst.llvm-%l)))
 (let (($x139 (= $x138 true)))
 (let (($x61 (= $x139 true)))
 (let (($x121 (= (bvand ?x120 (_ bv4294967288 32)) ?x120)))
 (let (($x105 (= (bvand ?x41 (_ bv4294967292 32)) ?x41)))
 (let (($x150 (and $x105 $x121)))
 (let (($x112 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x116 (and true $x112)))
 (let (($x133 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x41 (bvsub ?x41 (_ bv4 32))) (bvult ?x41 (bvsub ?x41 (_ bv4 32))))))
 (let (($x127 (and (and (and $x133 $x116) $x105) $x150)))
 (let (($x151 (= true $x127)))
 (let (($x27 (not $x5)))
 (let (($x136 (=> $x27 $x151)))
 (let (($x100 (= input.dst.llvm-%l ?x101)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x123)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x87 $x84)))
 (let (($x134 (and $x93 $x18)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x68 $x134)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x37)))))))
 (let (($x32 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x94 (and (and (and $x32 $x82) $x14) $x100)))
 (let (($x90 (and true $x94)))
 (let (($x49 (and $x90 $x136)))
 (let (($x137 (= $x49 true)))
 (let (($x60 (= $x137 true)))
 (let (($x174 (= $x60 true)))
 (let (($x24 (= $x27 true)))
 (let (($x66 (= $x24 true)))
 (let (($x10 (= $x66 true)))
 (let (($x62 (= $x32 true)))
 (let (($x30 (= $x62 true)))
 (let (($x54 (= $x30 true)))
 (let (($x96 (and $x54 $x10)))
 (let (($x59 (and $x96 $x174)))
 (let (($x177 (and $x59 $x61)))
 (let (($x64 (and $x177 $x182)))
 (let (($x209 (and $x64 $x212)))
 (let (($x231 (and $x209 $x228)))
 (let (($x241 (and $x231 $x240)))
 (let (($x242 (and $x43 $x241)))
 (let (($x243 (and $x40 $x242)))
 (let (($x19 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x273 (and $x19 $x243)))
 (let (($x35 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x73 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x35)))))))
 (let (($x42 (=> (and $x27 (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x50 $x35)))))))
 (let (($x267 (and $x42 $x273)))
 (let (($x52 (=> $x267 $x39)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676116/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var436X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x13 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var436X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x269 (concat ?x13 (select input.dst.llvm-mem (bvadd input.ind-%var436X (_ bv4 32))))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var436X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var436X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x258 (concat ?x276 (concat ?x277 ?x269))))
 (let (($x259 (= ?x258 ?x258)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x180 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x145 (bvuge ?x180 (_ bv1 32))))
 (let (($x260 (=> $x145 $x259)))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd input.ind-%var436X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var436X))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd input.ind-%var436X (_ bv2 32))) ?x272)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd input.ind-%var436X (_ bv3 32))) ?x251)))
 (let (($x253 (= ?x247 ?x247)))
 (let (($x254 (=> $x145 $x253)))
 (let (($x31 (= $x145 $x145)))
 (let (($x179 (= ?x180 (_ bv0 32))))
 (let (($x250 (= $x179 $x179)))
 (let (($x281 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x32 (= false false)))
 (let (($x249 (=> $x179 $x32)))
 (let (($x86 (and (and (and (and (and $x249 $x281) $x250) $x31) $x254) $x260)))
 (let (($x245 (= true true)))
 (let (($x36 (and $x245 $x86)))
 (let (($x39 (= $x36 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x196 $x224)))
 (let (($x173 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x173 $x225)))
 (let (($x230 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x191 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x234 (= $x191 $x230)))
 (let (($x238 (=> $x173 $x234)))
 (let (($x237 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x222 (=> $x173 $x237)))
 (let (($x220 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x233 (= $x173 $x220)))
 (let (($x155 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x48 (=> $x155 $x32)))
 (let (($x229 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x236 (= $x155 $x229)))
 (let (($x243 (and (and (and (and (and $x236 $x48) $x233) $x222) $x238) $x226)))
 (let (($x273 (= $x243 true)))
 (let (($x216 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x228 (= $x173 $x216)))
 (let (($x70 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x214 (= $x155 $x70)))
 (let (($x227 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x218 (and (and (and $x227 $x214) $x48) $x228)))
 (let (($x232 (= $x218 true)))
 (let (($x197 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x201 (= $x196 $x197)))
 (let (($x26 (=> $x173 $x201)))
 (let (($x203 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x207 (= $x191 $x203)))
 (let (($x71 (=> $x173 $x207)))
 (let (($x9 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x190 (=> $x173 $x9)))
 (let (($x202 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x189 (= $x173 $x202)))
 (let (($x212 (and (and (= $x155 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x48) $x189)))
 (let (($x12 (and (and (and $x212 $x190) $x71) $x26)))
 (let (($x21 (= $x12 true)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x167 (concat ?x160 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x169 (concat ?x164 (concat ?x168 ?x167))))
 (let (($x170 (= (_ bv0 32) ?x169)))
 (let ((?x171 (ite $x170 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x171 (_ bv1 32))))
 (let (($x184 (= $x173 $x185)))
 (let (($x193 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x172 (=> $x193 $x184)))
 (let (($x175 (= ?x171 (_ bv0 32))))
 (let (($x186 (= $x155 $x175)))
 (let (($x11 (=> $x193 $x186)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x157)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x162)))
 (let (($x187 (= input.spec-%var-l-0.2.0 ?x153)))
 (let (($x146 (=> $x193 $x187)))
 (let (($x178 (= $x193 $x145)))
 (let (($x30 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x158 (=> $x30 $x32)))
 (let (($x144 (= $x30 $x179)))
 (let (($x200 (and (and (and (and (and $x144 $x158) $x178) $x146) $x11) $x172)))
 (let (($x183 (= $x200 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x111 (concat ?x100 (concat ?x65 ?x76)))))
 (let (($x51 (= ?x92 input.dst.llvm-%l)))
 (let (($x142 (= $x51 true)))
 (let (($x40 (= $x142 true)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x120 (concat ?x118 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x29 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x34 (bvadd ?x29 (_ bv3 32))))
 (let ((?x151 (concat (select input.dst.llvm-mem ?x34) (concat ?x121 ?x120))))
 (let (($x49 (= (bvand ?x151 (_ bv4294967288 32)) ?x151)))
 (let (($x113 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x137 (and $x113 $x49)))
 (let (($x119 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x114 (and true $x119)))
 (let (($x55 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x29 (bvsub ?x29 (_ bv4 32))) (bvult ?x29 (bvsub ?x29 (_ bv4 32))))))
 (let (($x59 (and (and (and $x55 $x114) $x113) $x137)))
 (let (($x138 (= true $x59)))
 (let (($x27 (not $x5)))
 (let (($x139 (=> $x27 $x138)))
 (let (($x106 (= input.dst.llvm-%l ?x92)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x88)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x134)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x18 $x14)))
 (let (($x99 (and $x108 $x128)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x46 $x99)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x97 $x20)))))))
 (let (($x66 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x102 (and (and (and $x66 $x123) $x95) $x106)))
 (let (($x110 (and true $x102)))
 (let (($x61 (and $x110 $x139)))
 (let (($x177 (= $x61 true)))
 (let (($x23 (= $x177 true)))
 (let (($x43 (= $x23 true)))
 (let (($x75 (= $x5 true)))
 (let (($x131 (= $x75 true)))
 (let (($x67 (= $x131 true)))
 (let (($x10 (= $x66 true)))
 (let (($x96 (= $x10 true)))
 (let (($x72 (= $x96 true)))
 (let (($x89 (and $x72 $x67)))
 (let (($x176 (and $x89 $x43)))
 (let (($x143 (and $x176 $x40)))
 (let (($x205 (and $x143 $x183)))
 (let (($x213 (and $x205 $x21)))
 (let (($x235 (and $x213 $x232)))
 (let (($x267 (and $x235 $x273)))
 (let (($x244 (and $x30 $x267)))
 (let (($x270 (and $x32 $x244)))
 (let (($x7 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x274 (and $x7 $x270)))
 (let (($x28 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x19 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x28)))))))
 (let (($x47 (=> (and $x27 (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x25 $x28)))))))
 (let (($x271 (and $x47 $x274)))
 (let (($x52 (=> $x271 $x39)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var436X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x13 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var436X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x269 (concat ?x13 (select input.dst.llvm-mem (bvadd input.ind-%var436X (_ bv4 32))))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var436X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var436X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x258 (concat ?x276 (concat ?x277 ?x269))))
 (let (($x259 (= ?x258 ?x258)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x180 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x145 (bvuge ?x180 (_ bv1 32))))
 (let (($x260 (=> $x145 $x259)))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd input.ind-%var436X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var436X))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd input.ind-%var436X (_ bv2 32))) ?x272)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd input.ind-%var436X (_ bv3 32))) ?x251)))
 (let (($x253 (= ?x247 ?x247)))
 (let (($x254 (=> $x145 $x253)))
 (let (($x31 (= $x145 $x145)))
 (let (($x179 (= ?x180 (_ bv0 32))))
 (let (($x250 (= $x179 $x179)))
 (let (($x281 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x32 (= false false)))
 (let (($x249 (=> $x179 $x32)))
 (let (($x86 (and (and (and (and (and $x249 $x281) $x250) $x31) $x254) $x260)))
 (let (($x245 (= true true)))
 (let (($x36 (and $x245 $x86)))
 (let (($x39 (= $x36 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x196 $x224)))
 (let (($x173 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x173 $x225)))
 (let (($x230 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x191 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x234 (= $x191 $x230)))
 (let (($x238 (=> $x173 $x234)))
 (let (($x237 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x222 (=> $x173 $x237)))
 (let (($x220 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x233 (= $x173 $x220)))
 (let (($x155 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x48 (=> $x155 $x32)))
 (let (($x229 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x236 (= $x155 $x229)))
 (let (($x243 (and (and (and (and (and $x236 $x48) $x233) $x222) $x238) $x226)))
 (let (($x273 (= $x243 true)))
 (let (($x216 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x228 (= $x173 $x216)))
 (let (($x70 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x214 (= $x155 $x70)))
 (let (($x227 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x218 (and (and (and $x227 $x214) $x48) $x228)))
 (let (($x232 (= $x218 true)))
 (let (($x197 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x201 (= $x196 $x197)))
 (let (($x26 (=> $x173 $x201)))
 (let (($x203 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x207 (= $x191 $x203)))
 (let (($x71 (=> $x173 $x207)))
 (let (($x9 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x190 (=> $x173 $x9)))
 (let (($x202 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x189 (= $x173 $x202)))
 (let (($x212 (and (and (= $x155 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x48) $x189)))
 (let (($x12 (and (and (and $x212 $x190) $x71) $x26)))
 (let (($x21 (= $x12 true)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x167 (concat ?x160 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x169 (concat ?x164 (concat ?x168 ?x167))))
 (let (($x170 (= (_ bv0 32) ?x169)))
 (let ((?x171 (ite $x170 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x171 (_ bv1 32))))
 (let (($x184 (= $x173 $x185)))
 (let (($x193 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x172 (=> $x193 $x184)))
 (let (($x175 (= ?x171 (_ bv0 32))))
 (let (($x186 (= $x155 $x175)))
 (let (($x11 (=> $x193 $x186)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x157)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x162)))
 (let (($x187 (= input.spec-%var-l-0.2.0 ?x153)))
 (let (($x146 (=> $x193 $x187)))
 (let (($x178 (= $x193 $x145)))
 (let (($x30 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x158 (=> $x30 $x32)))
 (let (($x144 (= $x30 $x179)))
 (let (($x200 (and (and (and (and (and $x144 $x158) $x178) $x146) $x11) $x172)))
 (let (($x183 (= $x200 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x111 (concat ?x100 (concat ?x65 ?x76)))))
 (let (($x51 (= ?x92 input.dst.llvm-%l)))
 (let (($x142 (= $x51 true)))
 (let (($x40 (= $x142 true)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x120 (concat ?x118 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x29 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x34 (bvadd ?x29 (_ bv3 32))))
 (let ((?x151 (concat (select input.dst.llvm-mem ?x34) (concat ?x121 ?x120))))
 (let (($x49 (= (bvand ?x151 (_ bv4294967288 32)) ?x151)))
 (let (($x113 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x137 (and $x113 $x49)))
 (let (($x119 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x114 (and true $x119)))
 (let (($x55 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x29 (bvsub ?x29 (_ bv4 32))) (bvult ?x29 (bvsub ?x29 (_ bv4 32))))))
 (let (($x59 (and (and (and $x55 $x114) $x113) $x137)))
 (let (($x138 (= true $x59)))
 (let (($x27 (not $x5)))
 (let (($x139 (=> $x27 $x138)))
 (let (($x106 (= input.dst.llvm-%l ?x92)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x88)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x134)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x18 $x14)))
 (let (($x99 (and $x108 $x128)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x46 $x99)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x97 $x20)))))))
 (let (($x66 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x102 (and (and (and $x66 $x123) $x95) $x106)))
 (let (($x110 (and true $x102)))
 (let (($x61 (and $x110 $x139)))
 (let (($x177 (= $x61 true)))
 (let (($x23 (= $x177 true)))
 (let (($x43 (= $x23 true)))
 (let (($x75 (= $x5 true)))
 (let (($x131 (= $x75 true)))
 (let (($x67 (= $x131 true)))
 (let (($x10 (= $x66 true)))
 (let (($x96 (= $x10 true)))
 (let (($x72 (= $x96 true)))
 (let (($x89 (and $x72 $x67)))
 (let (($x176 (and $x89 $x43)))
 (let (($x143 (and $x176 $x40)))
 (let (($x205 (and $x143 $x183)))
 (let (($x213 (and $x205 $x21)))
 (let (($x235 (and $x213 $x232)))
 (let (($x267 (and $x235 $x273)))
 (let (($x244 (and $x30 $x267)))
 (let (($x270 (and $x32 $x244)))
 (let (($x7 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x274 (and $x7 $x270)))
 (let (($x28 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x19 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x28)))))))
 (let (($x47 (=> (and $x27 (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x25 $x28)))))))
 (let (($x271 (and $x47 $x274)))
 (let (($x52 (=> $x271 $x39)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676116/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x27 (not $x5)))
 (let (($x197 (or $x5 $x27)))
 (let (($x201 (= $x197 true)))
 (let (($x26 (= $x201 true)))
 (let (($x206 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x64 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x194 (= $x64 $x206)))
 (let (($x142 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x9 (=> $x142 $x194)))
 (let (($x202 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x157 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x189 (= $x157 $x202)))
 (let (($x212 (=> $x142 $x189)))
 (let (($x198 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x48 (=> $x142 $x198)))
 (let (($x205 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x208 (= $x142 $x205)))
 (let (($x66 (= false false)))
 (let (($x118 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x182 (=> $x118 $x66)))
 (let (($x200 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x183 (= $x118 $x200)))
 (let (($x195 (and (and (and (and (and $x183 $x182) $x208) $x48) $x212) $x9)))
 (let (($x203 (= $x195 true)))
 (let (($x175 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x186 (= $x142 $x175)))
 (let (($x170 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x171 (= $x118 $x170)))
 (let (($x154 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x173 (and (and (and $x154 $x171) $x182) $x186)))
 (let (($x185 (= $x173 true)))
 (let (($x159 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x155 (= $x64 $x159)))
 (let (($x149 (=> $x142 $x155)))
 (let (($x153 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x187 (= $x157 $x153)))
 (let (($x146 (=> $x142 $x187)))
 (let (($x156 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x140 (=> $x142 $x156)))
 (let (($x163 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x192 (= $x142 $x163)))
 (let (($x164 (and (and (= $x118 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x182) $x192)))
 (let (($x166 (and (and (and $x164 $x140) $x146) $x149)))
 (let (($x160 (= $x166 true)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x136 (concat ?x151 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x61 (concat ?x139 (concat ?x137 ?x136))))
 (let (($x177 (= (_ bv0 32) ?x61)))
 (let ((?x23 (ite $x177 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x23 (_ bv1 32))))
 (let (($x143 (= $x142 $x40)))
 (let (($x55 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x62 (=> $x55 $x143)))
 (let (($x43 (= ?x23 (_ bv0 32))))
 (let (($x176 (= $x118 $x43)))
 (let (($x51 (=> $x55 $x176)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x114)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x115)))
 (let (($x135 (= input.spec-%var-l-0.2.0 ?x127)))
 (let (($x121 (=> $x55 $x135)))
 (let ((?x126 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x107 (bvuge ?x126 (_ bv1 32))))
 (let (($x104 (= $x55 $x107)))
 (let (($x110 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x116 (=> $x110 $x66)))
 (let (($x103 (= ?x126 (_ bv0 32))))
 (let (($x112 (= $x110 $x103)))
 (let (($x32 (and (and (and (and (and $x112 $x116) $x104) $x121) $x51) $x62)))
 (let (($x158 (= $x32 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x65 (concat ?x101 (concat ?x98 ?x95)))))
 (let (($x80 (= ?x76 input.dst.llvm-%l)))
 (let (($x94 (= $x80 true)))
 (let (($x92 (= $x94 true)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x129)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x87 $x84)))
 (let (($x46 (and $x123 $x17)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x72 $x46)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x85)))))))
 (let (($x134 (and $x68 $x18)))
 (let (($x14 (= $x134 true)))
 (let (($x108 (= $x14 true)))
 (let (($x88 (= $x108 true)))
 (let (($x106 (and $x88 $x92)))
 (let (($x181 (and $x106 $x158)))
 (let (($x161 (and $x181 $x160)))
 (let (($x184 (and $x161 $x185)))
 (let (($x207 (and $x184 $x203)))
 (let (($x71 (and $x66 $x207)))
 (let (($x24 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x210 (and $x24 $x71)))
 (let ((?x45 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x42 (bvugt ?x45 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x45 (_ bv3 32)))))
 (let (($x7 (=> (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x42)))))))
 (let (($x53 (=> (and $x27 (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x73 $x42)))))))
 (let (($x196 (and $x53 $x210)))
 (let (($x12 (=> $x196 $x26)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x27 (not $x5)))
 (let (($x197 (or $x5 $x27)))
 (let (($x201 (= $x197 true)))
 (let (($x26 (= $x201 true)))
 (let (($x206 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x64 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x194 (= $x64 $x206)))
 (let (($x142 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x9 (=> $x142 $x194)))
 (let (($x202 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x157 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x189 (= $x157 $x202)))
 (let (($x212 (=> $x142 $x189)))
 (let (($x198 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x48 (=> $x142 $x198)))
 (let (($x205 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x208 (= $x142 $x205)))
 (let (($x66 (= false false)))
 (let (($x118 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x182 (=> $x118 $x66)))
 (let (($x200 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x183 (= $x118 $x200)))
 (let (($x195 (and (and (and (and (and $x183 $x182) $x208) $x48) $x212) $x9)))
 (let (($x203 (= $x195 true)))
 (let (($x175 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x186 (= $x142 $x175)))
 (let (($x170 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x171 (= $x118 $x170)))
 (let (($x154 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x173 (and (and (and $x154 $x171) $x182) $x186)))
 (let (($x185 (= $x173 true)))
 (let (($x159 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x155 (= $x64 $x159)))
 (let (($x149 (=> $x142 $x155)))
 (let (($x153 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x187 (= $x157 $x153)))
 (let (($x146 (=> $x142 $x187)))
 (let (($x156 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x140 (=> $x142 $x156)))
 (let (($x163 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x192 (= $x142 $x163)))
 (let (($x164 (and (and (= $x118 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x182) $x192)))
 (let (($x166 (and (and (and $x164 $x140) $x146) $x149)))
 (let (($x160 (= $x166 true)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x136 (concat ?x151 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x61 (concat ?x139 (concat ?x137 ?x136))))
 (let (($x177 (= (_ bv0 32) ?x61)))
 (let ((?x23 (ite $x177 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x23 (_ bv1 32))))
 (let (($x143 (= $x142 $x40)))
 (let (($x55 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x62 (=> $x55 $x143)))
 (let (($x43 (= ?x23 (_ bv0 32))))
 (let (($x176 (= $x118 $x43)))
 (let (($x51 (=> $x55 $x176)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x114)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x115)))
 (let (($x135 (= input.spec-%var-l-0.2.0 ?x127)))
 (let (($x121 (=> $x55 $x135)))
 (let ((?x126 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x107 (bvuge ?x126 (_ bv1 32))))
 (let (($x104 (= $x55 $x107)))
 (let (($x110 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x116 (=> $x110 $x66)))
 (let (($x103 (= ?x126 (_ bv0 32))))
 (let (($x112 (= $x110 $x103)))
 (let (($x32 (and (and (and (and (and $x112 $x116) $x104) $x121) $x51) $x62)))
 (let (($x158 (= $x32 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x65 (concat ?x101 (concat ?x98 ?x95)))))
 (let (($x80 (= ?x76 input.dst.llvm-%l)))
 (let (($x94 (= $x80 true)))
 (let (($x92 (= $x94 true)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x129)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x87 $x84)))
 (let (($x46 (and $x123 $x17)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x72 $x46)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x85)))))))
 (let (($x134 (and $x68 $x18)))
 (let (($x14 (= $x134 true)))
 (let (($x108 (= $x14 true)))
 (let (($x88 (= $x108 true)))
 (let (($x106 (and $x88 $x92)))
 (let (($x181 (and $x106 $x158)))
 (let (($x161 (and $x181 $x160)))
 (let (($x184 (and $x161 $x185)))
 (let (($x207 (and $x184 $x203)))
 (let (($x71 (and $x66 $x207)))
 (let (($x24 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x210 (and $x24 $x71)))
 (let ((?x45 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x42 (bvugt ?x45 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x45 (_ bv3 32)))))
 (let (($x7 (=> (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x42)))))))
 (let (($x53 (=> (and $x27 (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x73 $x42)))))))
 (let (($x196 (and $x53 $x210)))
 (let (($x12 (=> $x196 $x26)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676116/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var501X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var501X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x269 (concat ?x262 (select input.dst.llvm-mem (bvadd input.ind-%var501X (_ bv4 32))))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var501X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var501X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x36 (concat ?x86 (concat ?x258 ?x269))))
 (let (($x39 (= ?x36 ?x36)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x154 (concat ?x167 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x175 (concat ?x204 (concat ?x170 ?x154))))
 (let (($x186 (= (_ bv0 32) ?x175)))
 (let ((?x173 (ite $x186 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x173 (_ bv1 32))))
 (let (($x52 (=> $x183 $x39)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd input.ind-%var501X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var501X))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.ind-%var501X (_ bv2 32))) ?x251)))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd input.ind-%var501X (_ bv3 32))) ?x254)))
 (let (($x276 (= ?x263 ?x263)))
 (let (($x264 (=> $x183 $x276)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x137 (concat ?x49 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x50 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x69 (bvadd ?x50 (_ bv3 32))))
 (let ((?x59 (concat (select input.dst.llvm-mem ?x69) (concat ?x151 ?x137))))
 (let (($x31 (= (_ bv0 32) ?x59)))
 (let ((?x279 (ite $x31 (_ bv0 32) (_ bv1 32))))
 (let (($x257 (bvuge ?x279 (_ bv1 32))))
 (let (($x248 (= $x183 $x257)))
 (let (($x20 (= false false)))
 (let (($x185 (= ?x173 (_ bv0 32))))
 (let (($x255 (=> $x185 $x20)))
 (let (($x37 (and (and (and (and (= ?x175 ?x59) (= $x185 (= ?x279 (_ bv0 32)))) $x255) $x248) $x264)))
 (let (($x91 (and $x37 $x52)))
 (let (($x250 (= true true)))
 (let (($x77 (and $x250 $x91)))
 (let (($x15 (= $x77 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x12 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x12 $x224)))
 (let (($x200 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x200 $x225)))
 (let (($x234 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x210 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x238 (= $x210 $x234)))
 (let (($x242 (=> $x200 $x238)))
 (let (($x241 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x223 (=> $x200 $x241)))
 (let (($x221 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x237 (= $x200 $x221)))
 (let (($x149 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x191 (=> $x149 $x20)))
 (let (($x233 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x240 (= $x149 $x233)))
 (let (($x270 (and (and (and (and (and $x240 $x191) $x237) $x223) $x242) $x226)))
 (let (($x274 (= $x270 true)))
 (let (($x218 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x232 (= $x200 $x218)))
 (let (($x216 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x228 (= $x149 $x216)))
 (let (($x231 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x229 (and (and (and $x231 $x228) $x191) $x232)))
 (let (($x236 (= $x229 true)))
 (let (($x21 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x38 (= $x12 $x21)))
 (let (($x41 (=> $x200 $x38)))
 (let (($x197 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x201 (= $x210 $x197)))
 (let (($x26 (=> $x200 $x201)))
 (let (($x203 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x207 (=> $x200 $x203)))
 (let (($x206 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x194 (= $x200 $x206)))
 (let (($x99 (and (and (= $x149 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x191) $x194)))
 (let (($x227 (and (and (and $x99 $x207) $x26) $x41)))
 (let (($x215 (= $x227 true)))
 (let (($x190 (= $x200 $x183)))
 (let (($x89 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x205 (=> $x89 $x190)))
 (let (($x184 (= $x149 $x185)))
 (let (($x172 (=> $x89 $x184)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x141)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x153)))
 (let (($x64 (= input.spec-%var-l-0.2.0 ?x168)))
 (let (($x159 (=> $x89 $x64)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x148 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x152 (bvuge ?x148 (_ bv1 32))))
 (let (($x165 (= $x89 $x152)))
 (let (($x182 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x164 (=> $x182 $x20)))
 (let (($x163 (= ?x148 (_ bv0 32))))
 (let (($x192 (= $x182 $x163)))
 (let (($x48 (and (and (and (and (and $x192 $x164) $x165) $x159) $x172) $x205)))
 (let (($x199 (= $x48 true)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x30 (concat ?x112 (concat ?x102 ?x92)))))
 (let (($x181 (= ?x55 input.dst.llvm-%l)))
 (let (($x193 (= $x181 true)))
 (let (($x145 (= $x193 true)))
 (let (($x177 (= (bvand ?x59 (_ bv4294967288 32)) ?x59)))
 (let (($x125 (= (bvand ?x50 (_ bv4294967292 32)) ?x50)))
 (let (($x23 (and $x125 $x177)))
 (let (($x121 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x179 (and true $x121)))
 (let (($x105 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x50 (bvsub ?x50 (_ bv4 32))) (bvult ?x50 (bvsub ?x50 (_ bv4 32))))))
 (let (($x51 (and (and (and $x105 $x179) $x125) $x23)))
 (let (($x144 (= true $x51)))
 (let (($x27 (not $x5)))
 (let (($x142 (=> $x27 $x144)))
 (let (($x107 (= input.dst.llvm-%l ?x55)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x95)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x132 $x133)))
 (let (($x100 (and $x98 $x90)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x129 $x100)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x134 $x14)))))))
 (let (($x93 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x113 (and (and (and $x93 $x111) $x76) $x107)))
 (let (($x174 (and true $x113)))
 (let (($x40 (and $x174 $x142)))
 (let (($x143 (= $x40 true)))
 (let (($x62 (= $x143 true)))
 (let (($x32 (= $x62 true)))
 (let (($x96 (= $x27 true)))
 (let (($x72 (= $x96 true)))
 (let (($x87 (= $x72 true)))
 (let (($x82 (= $x93 true)))
 (let (($x97 (= $x82 true)))
 (let (($x68 (= $x97 true)))
 (let (($x130 (and $x68 $x87)))
 (let (($x158 (and $x130 $x32)))
 (let (($x178 (and $x158 $x145)))
 (let (($x211 (and $x178 $x199)))
 (let (($x70 (and $x211 $x215)))
 (let (($x239 (and $x70 $x236)))
 (let (($x271 (and $x239 $x274)))
 (let (($x245 (and $x89 $x271)))
 (let (($x249 (and $x20 $x245)))
 (let (($x131 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x281 (and $x131 $x249)))
 (let (($x47 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x24 (=> (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x47)))))))
 (let (($x34 (=> (and $x27 (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x19 $x47)))))))
 (let (($x261 (and $x34 $x281)))
 (let (($x33 (=> $x261 $x15)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var501X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var501X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x269 (concat ?x262 (select input.dst.llvm-mem (bvadd input.ind-%var501X (_ bv4 32))))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var501X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var501X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x36 (concat ?x86 (concat ?x258 ?x269))))
 (let (($x39 (= ?x36 ?x36)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x154 (concat ?x167 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x175 (concat ?x204 (concat ?x170 ?x154))))
 (let (($x186 (= (_ bv0 32) ?x175)))
 (let ((?x173 (ite $x186 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x173 (_ bv1 32))))
 (let (($x52 (=> $x183 $x39)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd input.ind-%var501X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var501X))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.ind-%var501X (_ bv2 32))) ?x251)))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd input.ind-%var501X (_ bv3 32))) ?x254)))
 (let (($x276 (= ?x263 ?x263)))
 (let (($x264 (=> $x183 $x276)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x137 (concat ?x49 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x50 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x69 (bvadd ?x50 (_ bv3 32))))
 (let ((?x59 (concat (select input.dst.llvm-mem ?x69) (concat ?x151 ?x137))))
 (let (($x31 (= (_ bv0 32) ?x59)))
 (let ((?x279 (ite $x31 (_ bv0 32) (_ bv1 32))))
 (let (($x257 (bvuge ?x279 (_ bv1 32))))
 (let (($x248 (= $x183 $x257)))
 (let (($x20 (= false false)))
 (let (($x185 (= ?x173 (_ bv0 32))))
 (let (($x255 (=> $x185 $x20)))
 (let (($x37 (and (and (and (and (= ?x175 ?x59) (= $x185 (= ?x279 (_ bv0 32)))) $x255) $x248) $x264)))
 (let (($x91 (and $x37 $x52)))
 (let (($x250 (= true true)))
 (let (($x77 (and $x250 $x91)))
 (let (($x15 (= $x77 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x12 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x12 $x224)))
 (let (($x200 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x200 $x225)))
 (let (($x234 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x210 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x238 (= $x210 $x234)))
 (let (($x242 (=> $x200 $x238)))
 (let (($x241 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x223 (=> $x200 $x241)))
 (let (($x221 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x237 (= $x200 $x221)))
 (let (($x149 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x191 (=> $x149 $x20)))
 (let (($x233 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x240 (= $x149 $x233)))
 (let (($x270 (and (and (and (and (and $x240 $x191) $x237) $x223) $x242) $x226)))
 (let (($x274 (= $x270 true)))
 (let (($x218 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x232 (= $x200 $x218)))
 (let (($x216 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x228 (= $x149 $x216)))
 (let (($x231 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x229 (and (and (and $x231 $x228) $x191) $x232)))
 (let (($x236 (= $x229 true)))
 (let (($x21 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x38 (= $x12 $x21)))
 (let (($x41 (=> $x200 $x38)))
 (let (($x197 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x201 (= $x210 $x197)))
 (let (($x26 (=> $x200 $x201)))
 (let (($x203 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x207 (=> $x200 $x203)))
 (let (($x206 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x194 (= $x200 $x206)))
 (let (($x99 (and (and (= $x149 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x191) $x194)))
 (let (($x227 (and (and (and $x99 $x207) $x26) $x41)))
 (let (($x215 (= $x227 true)))
 (let (($x190 (= $x200 $x183)))
 (let (($x89 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x205 (=> $x89 $x190)))
 (let (($x184 (= $x149 $x185)))
 (let (($x172 (=> $x89 $x184)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x141)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x153)))
 (let (($x64 (= input.spec-%var-l-0.2.0 ?x168)))
 (let (($x159 (=> $x89 $x64)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x148 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x152 (bvuge ?x148 (_ bv1 32))))
 (let (($x165 (= $x89 $x152)))
 (let (($x182 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x164 (=> $x182 $x20)))
 (let (($x163 (= ?x148 (_ bv0 32))))
 (let (($x192 (= $x182 $x163)))
 (let (($x48 (and (and (and (and (and $x192 $x164) $x165) $x159) $x172) $x205)))
 (let (($x199 (= $x48 true)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x30 (concat ?x112 (concat ?x102 ?x92)))))
 (let (($x181 (= ?x55 input.dst.llvm-%l)))
 (let (($x193 (= $x181 true)))
 (let (($x145 (= $x193 true)))
 (let (($x177 (= (bvand ?x59 (_ bv4294967288 32)) ?x59)))
 (let (($x125 (= (bvand ?x50 (_ bv4294967292 32)) ?x50)))
 (let (($x23 (and $x125 $x177)))
 (let (($x121 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x179 (and true $x121)))
 (let (($x105 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x50 (bvsub ?x50 (_ bv4 32))) (bvult ?x50 (bvsub ?x50 (_ bv4 32))))))
 (let (($x51 (and (and (and $x105 $x179) $x125) $x23)))
 (let (($x144 (= true $x51)))
 (let (($x27 (not $x5)))
 (let (($x142 (=> $x27 $x144)))
 (let (($x107 (= input.dst.llvm-%l ?x55)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x95)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x132 $x133)))
 (let (($x100 (and $x98 $x90)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x129 $x100)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x134 $x14)))))))
 (let (($x93 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x113 (and (and (and $x93 $x111) $x76) $x107)))
 (let (($x174 (and true $x113)))
 (let (($x40 (and $x174 $x142)))
 (let (($x143 (= $x40 true)))
 (let (($x62 (= $x143 true)))
 (let (($x32 (= $x62 true)))
 (let (($x96 (= $x27 true)))
 (let (($x72 (= $x96 true)))
 (let (($x87 (= $x72 true)))
 (let (($x82 (= $x93 true)))
 (let (($x97 (= $x82 true)))
 (let (($x68 (= $x97 true)))
 (let (($x130 (and $x68 $x87)))
 (let (($x158 (and $x130 $x32)))
 (let (($x178 (and $x158 $x145)))
 (let (($x211 (and $x178 $x199)))
 (let (($x70 (and $x211 $x215)))
 (let (($x239 (and $x70 $x236)))
 (let (($x271 (and $x239 $x274)))
 (let (($x245 (and $x89 $x271)))
 (let (($x249 (and $x20 $x245)))
 (let (($x131 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x281 (and $x131 $x249)))
 (let (($x47 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x24 (=> (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x47)))))))
 (let (($x34 (=> (and $x27 (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x19 $x47)))))))
 (let (($x261 (and $x34 $x281)))
 (let (($x33 (=> $x261 $x15)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676116/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var528X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var528X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x277 (concat ?x37 (select input.dst.llvm-mem (bvadd input.ind-%var528X (_ bv4 32))))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var528X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var528X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x262 (concat ?x13 (concat ?x86 ?x277))))
 (let (($x268 (= ?x262 ?x262)))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x161 (concat ?x170 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x186 (concat ?x175 (concat ?x160 ?x161))))
 (let (($x173 (= (_ bv0 32) ?x186)))
 (let ((?x185 (ite $x173 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x185 (_ bv1 32))))
 (let (($x269 (=> $x183 $x268)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd input.ind-%var528X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var528X))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.ind-%var528X (_ bv2 32))) ?x280)))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd input.ind-%var528X (_ bv3 32))) ?x253)))
 (let (($x251 (= ?x275 ?x275)))
 (let (($x254 (=> $x183 $x251)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x89 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x152 (= ?x89 (_ bv0 32))))
 (let (($x184 (= ?x185 (_ bv0 32))))
 (let (($x78 (= $x184 $x152)))
 (let (($x187 (bvuge ?x89 (_ bv1 32))))
 (let (($x255 (= $x183 $x187)))
 (let (($x36 (and (and (=> $x184 (= false false)) (= ?x186 input.dst.llvm-%l)) $x255)))
 (let (($x91 (and (and (and $x36 $x78) $x254) $x269)))
 (let (($x256 (= true true)))
 (let (($x77 (and $x256 $x91)))
 (let (($x15 (= $x77 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x12 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x12 $x224)))
 (let (($x200 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x200 $x225)))
 (let (($x238 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x196 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x242 (= $x196 $x238)))
 (let (($x244 (=> $x200 $x242)))
 (let (($x267 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x230 (=> $x200 $x267)))
 (let (($x222 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x241 (= $x200 $x222)))
 (let (($x93 (= false false)))
 (let (($x166 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x99 (=> $x166 $x93)))
 (let (($x237 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x273 (= $x166 $x237)))
 (let (($x249 (and (and (and (and (and $x273 $x99) $x241) $x230) $x244) $x226)))
 (let (($x281 (= $x249 true)))
 (let (($x229 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x236 (= $x200 $x229)))
 (let (($x218 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x232 (= $x166 $x218)))
 (let (($x235 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x233 (and (and (and $x235 $x232) $x99) $x236)))
 (let (($x240 (= $x233 true)))
 (let (($x21 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x38 (= $x12 $x21)))
 (let (($x41 (=> $x200 $x38)))
 (let (($x201 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x26 (= $x196 $x201)))
 (let (($x58 (=> $x200 $x26)))
 (let (($x213 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x71 (=> $x200 $x213)))
 (let (($x9 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x195 (= $x200 $x9)))
 (let (($x215 (and (and (= $x166 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x99) $x195)))
 (let (($x231 (and (and (and $x215 $x71) $x58) $x41)))
 (let (($x217 (= $x231 true)))
 (let (($x190 (= $x200 $x183)))
 (let (($x97 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x205 (=> $x97 $x190)))
 (let (($x172 (= $x166 $x184)))
 (let (($x198 (=> $x97 $x172)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x147)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x153)))
 (let (($x188 (= input.spec-%var-l-0.2.0 ?x159)))
 (let (($x155 (=> $x97 $x188)))
 (let (($x146 (= $x97 $x187)))
 (let (($x208 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x209 (=> $x208 $x93)))
 (let (($x165 (= $x208 $x152)))
 (let (($x189 (and (and (and (and (and $x165 $x209) $x146) $x155) $x198) $x205)))
 (let (($x212 (= $x189 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x117 (concat ?x107 (concat ?x92 ?x106)))))
 (let (($x163 (= ?x60 input.dst.llvm-%l)))
 (let (($x192 (= $x163 true)))
 (let (($x20 (= $x192 true)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x59 (concat ?x120 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x25 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x74 (bvadd ?x25 (_ bv3 32))))
 (let ((?x144 (concat (select input.dst.llvm-mem ?x74) (concat ?x177 ?x59))))
 (let (($x40 (= (bvand ?x144 (_ bv4294967288 32)) ?x144)))
 (let (($x49 (= (bvand ?x25 (_ bv4294967292 32)) ?x25)))
 (let (($x143 (and $x49 $x40)))
 (let (($x136 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x150 (and true $x136)))
 (let (($x43 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x25 (bvsub ?x25 (_ bv4 32))) (bvult ?x25 (bvsub ?x25 (_ bv4 32))))))
 (let (($x158 (and (and (and $x43 $x150) $x49) $x143)))
 (let (($x181 (= true $x158)))
 (let (($x27 (not $x5)))
 (let (($x193 (=> $x27 $x181)))
 (let (($x122 (= input.dst.llvm-%l ?x60)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x80)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x90 $x76)))
 (let (($x30 (and $x180 $x116)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x88 $x30)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x123)))))))
 (let (($x72 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x115 (and (and (and $x72 $x95) $x126) $x122)))
 (let (($x114 (and true $x115)))
 (let (($x145 (and $x114 $x193)))
 (let (($x178 (= $x145 true)))
 (let (($x67 (= $x178 true)))
 (let (($x182 (= $x67 true)))
 (let (($x46 (= $x5 true)))
 (let (($x65 (= $x46 true)))
 (let (($x18 (= $x65 true)))
 (let (($x87 (= $x72 true)))
 (let (($x130 (= $x87 true)))
 (let (($x17 (= $x130 true)))
 (let (($x134 (and $x17 $x18)))
 (let (($x148 (and $x134 $x182)))
 (let (($x164 (and $x148 $x20)))
 (let (($x191 (and $x164 $x212)))
 (let (($x216 (and $x191 $x217)))
 (let (($x243 (and $x216 $x240)))
 (let (($x261 (and $x243 $x281)))
 (let (($x250 (and $x97 $x261)))
 (let (($x278 (and $x93 $x250)))
 (let (($x81 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x31 (and $x81 $x278)))
 (let (($x53 (bvugt ?x25 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x131 (=> (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x53)))))))
 (let (($x6 (=> (and $x27 (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x7 $x53)))))))
 (let (($x279 (and $x6 $x31)))
 (let (($x33 (=> $x279 $x15)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var528X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var528X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x277 (concat ?x37 (select input.dst.llvm-mem (bvadd input.ind-%var528X (_ bv4 32))))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var528X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var528X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x262 (concat ?x13 (concat ?x86 ?x277))))
 (let (($x268 (= ?x262 ?x262)))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x161 (concat ?x170 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x186 (concat ?x175 (concat ?x160 ?x161))))
 (let (($x173 (= (_ bv0 32) ?x186)))
 (let ((?x185 (ite $x173 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x185 (_ bv1 32))))
 (let (($x269 (=> $x183 $x268)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd input.ind-%var528X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var528X))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.ind-%var528X (_ bv2 32))) ?x280)))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd input.ind-%var528X (_ bv3 32))) ?x253)))
 (let (($x251 (= ?x275 ?x275)))
 (let (($x254 (=> $x183 $x251)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x89 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x152 (= ?x89 (_ bv0 32))))
 (let (($x184 (= ?x185 (_ bv0 32))))
 (let (($x78 (= $x184 $x152)))
 (let (($x187 (bvuge ?x89 (_ bv1 32))))
 (let (($x255 (= $x183 $x187)))
 (let (($x36 (and (and (=> $x184 (= false false)) (= ?x186 input.dst.llvm-%l)) $x255)))
 (let (($x91 (and (and (and $x36 $x78) $x254) $x269)))
 (let (($x256 (= true true)))
 (let (($x77 (and $x256 $x91)))
 (let (($x15 (= $x77 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x12 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x12 $x224)))
 (let (($x200 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x200 $x225)))
 (let (($x238 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x196 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x242 (= $x196 $x238)))
 (let (($x244 (=> $x200 $x242)))
 (let (($x267 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x230 (=> $x200 $x267)))
 (let (($x222 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x241 (= $x200 $x222)))
 (let (($x93 (= false false)))
 (let (($x166 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x99 (=> $x166 $x93)))
 (let (($x237 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x273 (= $x166 $x237)))
 (let (($x249 (and (and (and (and (and $x273 $x99) $x241) $x230) $x244) $x226)))
 (let (($x281 (= $x249 true)))
 (let (($x229 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x236 (= $x200 $x229)))
 (let (($x218 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x232 (= $x166 $x218)))
 (let (($x235 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x233 (and (and (and $x235 $x232) $x99) $x236)))
 (let (($x240 (= $x233 true)))
 (let (($x21 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x38 (= $x12 $x21)))
 (let (($x41 (=> $x200 $x38)))
 (let (($x201 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x26 (= $x196 $x201)))
 (let (($x58 (=> $x200 $x26)))
 (let (($x213 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x71 (=> $x200 $x213)))
 (let (($x9 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x195 (= $x200 $x9)))
 (let (($x215 (and (and (= $x166 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x99) $x195)))
 (let (($x231 (and (and (and $x215 $x71) $x58) $x41)))
 (let (($x217 (= $x231 true)))
 (let (($x190 (= $x200 $x183)))
 (let (($x97 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x205 (=> $x97 $x190)))
 (let (($x172 (= $x166 $x184)))
 (let (($x198 (=> $x97 $x172)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x147)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x153)))
 (let (($x188 (= input.spec-%var-l-0.2.0 ?x159)))
 (let (($x155 (=> $x97 $x188)))
 (let (($x146 (= $x97 $x187)))
 (let (($x208 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x209 (=> $x208 $x93)))
 (let (($x165 (= $x208 $x152)))
 (let (($x189 (and (and (and (and (and $x165 $x209) $x146) $x155) $x198) $x205)))
 (let (($x212 (= $x189 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x117 (concat ?x107 (concat ?x92 ?x106)))))
 (let (($x163 (= ?x60 input.dst.llvm-%l)))
 (let (($x192 (= $x163 true)))
 (let (($x20 (= $x192 true)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x59 (concat ?x120 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x25 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x74 (bvadd ?x25 (_ bv3 32))))
 (let ((?x144 (concat (select input.dst.llvm-mem ?x74) (concat ?x177 ?x59))))
 (let (($x40 (= (bvand ?x144 (_ bv4294967288 32)) ?x144)))
 (let (($x49 (= (bvand ?x25 (_ bv4294967292 32)) ?x25)))
 (let (($x143 (and $x49 $x40)))
 (let (($x136 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x150 (and true $x136)))
 (let (($x43 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x25 (bvsub ?x25 (_ bv4 32))) (bvult ?x25 (bvsub ?x25 (_ bv4 32))))))
 (let (($x158 (and (and (and $x43 $x150) $x49) $x143)))
 (let (($x181 (= true $x158)))
 (let (($x27 (not $x5)))
 (let (($x193 (=> $x27 $x181)))
 (let (($x122 (= input.dst.llvm-%l ?x60)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x80)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x90 $x76)))
 (let (($x30 (and $x180 $x116)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x88 $x30)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x123)))))))
 (let (($x72 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x115 (and (and (and $x72 $x95) $x126) $x122)))
 (let (($x114 (and true $x115)))
 (let (($x145 (and $x114 $x193)))
 (let (($x178 (= $x145 true)))
 (let (($x67 (= $x178 true)))
 (let (($x182 (= $x67 true)))
 (let (($x46 (= $x5 true)))
 (let (($x65 (= $x46 true)))
 (let (($x18 (= $x65 true)))
 (let (($x87 (= $x72 true)))
 (let (($x130 (= $x87 true)))
 (let (($x17 (= $x130 true)))
 (let (($x134 (and $x17 $x18)))
 (let (($x148 (and $x134 $x182)))
 (let (($x164 (and $x148 $x20)))
 (let (($x191 (and $x164 $x212)))
 (let (($x216 (and $x191 $x217)))
 (let (($x243 (and $x216 $x240)))
 (let (($x261 (and $x243 $x281)))
 (let (($x250 (and $x97 $x261)))
 (let (($x278 (and $x93 $x250)))
 (let (($x81 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x31 (and $x81 $x278)))
 (let (($x53 (bvugt ?x25 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x131 (=> (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x53)))))))
 (let (($x6 (=> (and $x27 (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x7 $x53)))))))
 (let (($x279 (and $x6 $x31)))
 (let (($x33 (=> $x279 $x15)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676116/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var555X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x276 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var555X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x277 (concat ?x276 (select input.dst.llvm-mem (bvadd input.ind-%var555X (_ bv4 32))))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var555X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var555X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x77 (concat ?x91 (concat ?x262 ?x277))))
 (let (($x15 (= ?x77 ?x77)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x48 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x168 (bvuge ?x48 (_ bv1 32))))
 (let (($x33 (=> $x168 $x15)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.ind-%var555X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var555X))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.ind-%var555X (_ bv2 32))) ?x253)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd input.ind-%var555X (_ bv3 32))) ?x254)))
 (let (($x13 (= ?x258 ?x258)))
 (let (($x260 (=> $x168 $x13)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x144 (concat ?x23 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x73 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x56 (bvadd ?x73 (_ bv3 32))))
 (let ((?x181 (concat (select input.dst.llvm-mem ?x56) (concat ?x40 ?x144))))
 (let (($x78 (= (_ bv0 32) ?x181)))
 (let ((?x39 (ite $x78 (_ bv0 32) (_ bv1 32))))
 (let (($x266 (bvuge ?x39 (_ bv1 32))))
 (let (($x247 (= $x168 $x266)))
 (let (($x72 (= false false)))
 (let (($x97 (= ?x48 (_ bv0 32))))
 (let (($x272 (=> $x97 $x72)))
 (let (($x45 (and (and (and (= input.dst.llvm-%l ?x181) (= $x97 (= ?x39 (_ bv0 32)))) $x272) $x247)))
 (let (($x112 (and (and $x45 $x260) $x33)))
 (let (($x255 (= true true)))
 (let (($x35 (and $x255 $x112)))
 (let (($x29 (= $x35 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x12 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x12 $x224)))
 (let (($x200 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x200 $x225)))
 (let (($x242 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x197 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x244 (= $x197 $x242)))
 (let (($x245 (=> $x200 $x244)))
 (let (($x271 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x234 (=> $x200 $x271)))
 (let (($x223 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x267 (= $x200 $x223)))
 (let (($x11 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x215 (=> $x11 $x72)))
 (let (($x241 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x274 (= $x11 $x241)))
 (let (($x278 (and (and (and (and (and $x274 $x215) $x267) $x234) $x245) $x226)))
 (let (($x31 (= $x278 true)))
 (let (($x233 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x240 (= $x200 $x233)))
 (let (($x229 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x236 (= $x11 $x229)))
 (let (($x239 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x237 (and (and (and $x239 $x236) $x215) $x240)))
 (let (($x273 (= $x237 true)))
 (let (($x21 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x38 (= $x12 $x21)))
 (let (($x41 (=> $x200 $x38)))
 (let (($x26 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x58 (= $x197 $x26)))
 (let (($x214 (=> $x200 $x58)))
 (let (($x70 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x210 (=> $x200 $x70)))
 (let (($x203 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x207 (= $x200 $x203)))
 (let (($x217 (and (and (= $x11 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x215) $x207)))
 (let (($x235 (and (and (and $x217 $x210) $x214) $x41)))
 (let (($x219 (= $x235 true)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x169 (concat ?x160 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x173 (concat ?x186 (concat ?x204 ?x169))))
 (let (($x185 (= (_ bv0 32) ?x173)))
 (let ((?x184 (ite $x185 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x184 (_ bv1 32))))
 (let (($x190 (= $x200 $x183)))
 (let (($x199 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x205 (=> $x199 $x190)))
 (let (($x172 (= ?x184 (_ bv0 32))))
 (let (($x198 (= $x11 $x172)))
 (let (($x202 (=> $x199 $x198)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x140)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x153)))
 (let (($x211 (= input.spec-%var-l-0.2.0 ?x155)))
 (let (($x149 (=> $x199 $x211)))
 (let (($x64 (= $x199 $x168)))
 (let (($x130 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x146 (=> $x130 $x72)))
 (let (($x187 (= $x130 $x97)))
 (let (($x206 (and (and (and (and (and $x187 $x146) $x64) $x149) $x202) $x205)))
 (let (($x194 (= $x206 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x135 (concat ?x122 (concat ?x106 ?x102)))))
 (let (($x152 (= ?x127 input.dst.llvm-%l)))
 (let (($x165 (= $x152 true)))
 (let (($x93 (= $x165 true)))
 (let (($x145 (= (bvand ?x181 (_ bv4294967288 32)) ?x181)))
 (let (($x120 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x178 (and $x120 $x145)))
 (let (($x51 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x61 (and true $x51)))
 (let (($x62 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv4 32))) (bvult ?x73 (bvsub ?x73 (_ bv4 32))))))
 (let (($x148 (and (and (and $x62 $x61) $x120) $x178)))
 (let (($x163 (= true $x148)))
 (let (($x27 (not $x5)))
 (let (($x192 (=> $x27 $x163)))
 (let (($x121 (= input.dst.llvm-%l ?x127)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x103)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x116 $x126)))
 (let (($x117 (and $x105 $x174)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x132 $x117)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x108)))))))
 (let (($x65 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x118 (and (and (and $x65 $x80) $x66) $x121)))
 (let (($x109 (and true $x118)))
 (let (($x20 (and $x109 $x192)))
 (let (($x164 (= $x20 true)))
 (let (($x82 (= $x164 true)))
 (let (($x208 (= $x82 true)))
 (let (($x79 (= $x27 true)))
 (let (($x98 (= $x79 true)))
 (let (($x111 (= $x98 true)))
 (let (($x18 (= $x65 true)))
 (let (($x134 (= $x18 true)))
 (let (($x128 (= $x134 true)))
 (let (($x104 (and $x128 $x111)))
 (let (($x89 (and $x104 $x208)))
 (let (($x209 (and $x89 $x93)))
 (let (($x99 (and $x209 $x194)))
 (let (($x218 (and $x99 $x219)))
 (let (($x270 (and $x218 $x273)))
 (let (($x279 (and $x270 $x31)))
 (let (($x256 (and $x130 $x279)))
 (let (($x246 (and $x72 $x256)))
 (let (($x96 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x83 (and $x96 $x246)))
 (let (($x34 (bvugt ?x73 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x81 (=> (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x34)))))))
 (let (($x69 (=> (and $x27 (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x24 $x34)))))))
 (let (($x259 (and $x69 $x83)))
 (let (($x84 (=> $x259 $x29)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var555X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x276 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var555X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x277 (concat ?x276 (select input.dst.llvm-mem (bvadd input.ind-%var555X (_ bv4 32))))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var555X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var555X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x77 (concat ?x91 (concat ?x262 ?x277))))
 (let (($x15 (= ?x77 ?x77)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x48 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x168 (bvuge ?x48 (_ bv1 32))))
 (let (($x33 (=> $x168 $x15)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.ind-%var555X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var555X))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.ind-%var555X (_ bv2 32))) ?x253)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd input.ind-%var555X (_ bv3 32))) ?x254)))
 (let (($x13 (= ?x258 ?x258)))
 (let (($x260 (=> $x168 $x13)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x144 (concat ?x23 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x73 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x56 (bvadd ?x73 (_ bv3 32))))
 (let ((?x181 (concat (select input.dst.llvm-mem ?x56) (concat ?x40 ?x144))))
 (let (($x78 (= (_ bv0 32) ?x181)))
 (let ((?x39 (ite $x78 (_ bv0 32) (_ bv1 32))))
 (let (($x266 (bvuge ?x39 (_ bv1 32))))
 (let (($x247 (= $x168 $x266)))
 (let (($x72 (= false false)))
 (let (($x97 (= ?x48 (_ bv0 32))))
 (let (($x272 (=> $x97 $x72)))
 (let (($x45 (and (and (and (= input.dst.llvm-%l ?x181) (= $x97 (= ?x39 (_ bv0 32)))) $x272) $x247)))
 (let (($x112 (and (and $x45 $x260) $x33)))
 (let (($x255 (= true true)))
 (let (($x35 (and $x255 $x112)))
 (let (($x29 (= $x35 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x12 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x12 $x224)))
 (let (($x200 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x200 $x225)))
 (let (($x242 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x197 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x244 (= $x197 $x242)))
 (let (($x245 (=> $x200 $x244)))
 (let (($x271 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x234 (=> $x200 $x271)))
 (let (($x223 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x267 (= $x200 $x223)))
 (let (($x11 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x215 (=> $x11 $x72)))
 (let (($x241 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x274 (= $x11 $x241)))
 (let (($x278 (and (and (and (and (and $x274 $x215) $x267) $x234) $x245) $x226)))
 (let (($x31 (= $x278 true)))
 (let (($x233 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x240 (= $x200 $x233)))
 (let (($x229 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x236 (= $x11 $x229)))
 (let (($x239 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x237 (and (and (and $x239 $x236) $x215) $x240)))
 (let (($x273 (= $x237 true)))
 (let (($x21 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x38 (= $x12 $x21)))
 (let (($x41 (=> $x200 $x38)))
 (let (($x26 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x58 (= $x197 $x26)))
 (let (($x214 (=> $x200 $x58)))
 (let (($x70 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x210 (=> $x200 $x70)))
 (let (($x203 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x207 (= $x200 $x203)))
 (let (($x217 (and (and (= $x11 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x215) $x207)))
 (let (($x235 (and (and (and $x217 $x210) $x214) $x41)))
 (let (($x219 (= $x235 true)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x169 (concat ?x160 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x173 (concat ?x186 (concat ?x204 ?x169))))
 (let (($x185 (= (_ bv0 32) ?x173)))
 (let ((?x184 (ite $x185 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x184 (_ bv1 32))))
 (let (($x190 (= $x200 $x183)))
 (let (($x199 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x205 (=> $x199 $x190)))
 (let (($x172 (= ?x184 (_ bv0 32))))
 (let (($x198 (= $x11 $x172)))
 (let (($x202 (=> $x199 $x198)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x140)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x153)))
 (let (($x211 (= input.spec-%var-l-0.2.0 ?x155)))
 (let (($x149 (=> $x199 $x211)))
 (let (($x64 (= $x199 $x168)))
 (let (($x130 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x146 (=> $x130 $x72)))
 (let (($x187 (= $x130 $x97)))
 (let (($x206 (and (and (and (and (and $x187 $x146) $x64) $x149) $x202) $x205)))
 (let (($x194 (= $x206 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x135 (concat ?x122 (concat ?x106 ?x102)))))
 (let (($x152 (= ?x127 input.dst.llvm-%l)))
 (let (($x165 (= $x152 true)))
 (let (($x93 (= $x165 true)))
 (let (($x145 (= (bvand ?x181 (_ bv4294967288 32)) ?x181)))
 (let (($x120 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x178 (and $x120 $x145)))
 (let (($x51 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x61 (and true $x51)))
 (let (($x62 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv4 32))) (bvult ?x73 (bvsub ?x73 (_ bv4 32))))))
 (let (($x148 (and (and (and $x62 $x61) $x120) $x178)))
 (let (($x163 (= true $x148)))
 (let (($x27 (not $x5)))
 (let (($x192 (=> $x27 $x163)))
 (let (($x121 (= input.dst.llvm-%l ?x127)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x103)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x116 $x126)))
 (let (($x117 (and $x105 $x174)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x132 $x117)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x108)))))))
 (let (($x65 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x118 (and (and (and $x65 $x80) $x66) $x121)))
 (let (($x109 (and true $x118)))
 (let (($x20 (and $x109 $x192)))
 (let (($x164 (= $x20 true)))
 (let (($x82 (= $x164 true)))
 (let (($x208 (= $x82 true)))
 (let (($x79 (= $x27 true)))
 (let (($x98 (= $x79 true)))
 (let (($x111 (= $x98 true)))
 (let (($x18 (= $x65 true)))
 (let (($x134 (= $x18 true)))
 (let (($x128 (= $x134 true)))
 (let (($x104 (and $x128 $x111)))
 (let (($x89 (and $x104 $x208)))
 (let (($x209 (and $x89 $x93)))
 (let (($x99 (and $x209 $x194)))
 (let (($x218 (and $x99 $x219)))
 (let (($x270 (and $x218 $x273)))
 (let (($x279 (and $x270 $x31)))
 (let (($x256 (and $x130 $x279)))
 (let (($x246 (and $x72 $x256)))
 (let (($x96 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x83 (and $x96 $x246)))
 (let (($x34 (bvugt ?x73 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x81 (=> (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x34)))))))
 (let (($x69 (=> (and $x27 (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x24 $x34)))))))
 (let (($x259 (and $x69 $x83)))
 (let (($x84 (=> $x259 $x29)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676116/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var582X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var582X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x86 (concat ?x14 (select input.dst.llvm-mem (bvadd input.ind-%var582X (_ bv4 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var582X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var582X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x276 (concat ?x37 (concat ?x91 ?x86))))
 (let (($x264 (= ?x276 ?x276)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x189 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x189 (_ bv1 32))))
 (let (($x277 (=> $x159 $x264)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.ind-%var582X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var582X))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd input.ind-%var582X (_ bv2 32))) ?x52)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.ind-%var582X (_ bv3 32))) ?x251)))
 (let (($x253 (= ?x44 ?x44)))
 (let (($x254 (=> $x159 $x253)))
 (let (($x28 (= $x159 $x159)))
 (let (($x199 (= ?x189 (_ bv0 32))))
 (let (($x272 (= $x199 $x199)))
 (let (($x124 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x65 (= false false)))
 (let (($x252 (=> $x199 $x65)))
 (let (($x112 (and (and (and (and (and $x252 $x124) $x272) $x28) $x254) $x277)))
 (let (($x257 (= true true)))
 (let (($x35 (and $x257 $x112)))
 (let (($x29 (= $x35 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x12 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x12 $x224)))
 (let (($x200 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x200 $x225)))
 (let (($x244 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x201 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x245 (= $x201 $x244)))
 (let (($x250 (=> $x200 $x245)))
 (let (($x261 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x238 (=> $x200 $x261)))
 (let (($x230 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x271 (= $x200 $x230)))
 (let (($x171 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x217 (=> $x171 $x65)))
 (let (($x267 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x281 (= $x171 $x267)))
 (let (($x246 (and (and (and (and (and $x281 $x217) $x271) $x238) $x250) $x226)))
 (let (($x83 (= $x246 true)))
 (let (($x237 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x273 (= $x200 $x237)))
 (let (($x233 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x240 (= $x171 $x233)))
 (let (($x243 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x241 (and (and (and $x243 $x240) $x217) $x273)))
 (let (($x274 (= $x241 true)))
 (let (($x21 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x38 (= $x12 $x21)))
 (let (($x41 (=> $x200 $x38)))
 (let (($x58 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x214 (= $x201 $x58)))
 (let (($x228 (=> $x200 $x214)))
 (let (($x216 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x196 (=> $x200 $x216)))
 (let (($x213 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x71 (= $x200 $x213)))
 (let (($x219 (and (and (= $x171 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x217) $x71)))
 (let (($x239 (and (and (and $x219 $x196) $x228) $x41)))
 (let (($x220 (= $x239 true)))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x167 (concat ?x204 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x185 (concat ?x173 (concat ?x175 ?x167))))
 (let (($x184 (= (_ bv0 32) ?x185)))
 (let ((?x172 (ite $x184 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x172 (_ bv1 32))))
 (let (($x190 (= $x200 $x183)))
 (let (($x212 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x205 (=> $x212 $x190)))
 (let (($x198 (= ?x172 (_ bv0 32))))
 (let (($x202 (= $x171 $x198)))
 (let (($x10 (=> $x212 $x202)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x162)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x153)))
 (let (($x191 (= input.spec-%var-l-0.2.0 ?x149)))
 (let (($x166 (=> $x212 $x191)))
 (let (($x188 (= $x212 $x159)))
 (let (($x134 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x64 (=> $x134 $x65)))
 (let (($x168 (= $x134 $x199)))
 (let (($x9 (and (and (and (and (and $x168 $x64) $x188) $x166) $x10) $x205)))
 (let (($x195 (= $x9 true)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x176 (concat ?x121 (concat ?x102 ?x92)))))
 (let (($x97 (= ?x125 input.dst.llvm-%l)))
 (let (($x187 (= $x97 true)))
 (let (($x72 (= $x187 true)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x181 (concat ?x143 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x19 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x57 (bvadd ?x19 (_ bv3 32))))
 (let ((?x163 (concat (select input.dst.llvm-mem ?x57) (concat ?x145 ?x181))))
 (let (($x20 (= (bvand ?x163 (_ bv4294967288 32)) ?x163)))
 (let (($x23 (= (bvand ?x19 (_ bv4294967292 32)) ?x19)))
 (let (($x164 (and $x23 $x20)))
 (let (($x158 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x142 (and true $x158)))
 (let (($x67 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x19 (bvsub ?x19 (_ bv4 32))) (bvult ?x19 (bvsub ?x19 (_ bv4 32))))))
 (let (($x89 (and (and (and $x67 $x142) $x23) $x164)))
 (let (($x152 (= true $x89)))
 (let (($x27 (not $x5)))
 (let (($x165 (=> $x27 $x152)))
 (let (($x136 (= input.dst.llvm-%l ?x125)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x55)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x174 $x66)))
 (let (($x135 (and $x43 $x114)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x90 $x135)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x129)))))))
 (let (($x98 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x139 (and (and (and $x98 $x103) $x113) $x136)))
 (let (($x151 (and true $x139)))
 (let (($x93 (and $x151 $x165)))
 (let (($x209 (= $x93 true)))
 (let (($x87 (= $x209 true)))
 (let (($x130 (= $x87 true)))
 (let (($x133 (= $x5 true)))
 (let (($x180 (= $x133 true)))
 (let (($x95 (= $x180 true)))
 (let (($x111 (= $x98 true)))
 (let (($x104 (= $x111 true)))
 (let (($x101 (= $x104 true)))
 (let (($x119 (and $x101 $x95)))
 (let (($x48 (and $x119 $x130)))
 (let (($x146 (and $x48 $x72)))
 (let (($x215 (and $x146 $x195)))
 (let (($x229 (and $x215 $x220)))
 (let (($x249 (and $x229 $x274)))
 (let (($x259 (and $x249 $x83)))
 (let (($x255 (and $x134 $x259)))
 (let (($x36 (and $x65 $x255)))
 (let (($x46 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x78 (and $x46 $x36)))
 (let (($x6 (bvugt ?x19 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x96 (=> (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x6)))))))
 (let (($x74 (=> (and $x27 (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x131 $x6)))))))
 (let (($x39 (and $x74 $x78)))
 (let (($x84 (=> $x39 $x29)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var582X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var582X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x86 (concat ?x14 (select input.dst.llvm-mem (bvadd input.ind-%var582X (_ bv4 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var582X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var582X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x276 (concat ?x37 (concat ?x91 ?x86))))
 (let (($x264 (= ?x276 ?x276)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x189 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x189 (_ bv1 32))))
 (let (($x277 (=> $x159 $x264)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.ind-%var582X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var582X))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd input.ind-%var582X (_ bv2 32))) ?x52)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.ind-%var582X (_ bv3 32))) ?x251)))
 (let (($x253 (= ?x44 ?x44)))
 (let (($x254 (=> $x159 $x253)))
 (let (($x28 (= $x159 $x159)))
 (let (($x199 (= ?x189 (_ bv0 32))))
 (let (($x272 (= $x199 $x199)))
 (let (($x124 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x65 (= false false)))
 (let (($x252 (=> $x199 $x65)))
 (let (($x112 (and (and (and (and (and $x252 $x124) $x272) $x28) $x254) $x277)))
 (let (($x257 (= true true)))
 (let (($x35 (and $x257 $x112)))
 (let (($x29 (= $x35 true)))
 (let (($x224 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x12 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x12 $x224)))
 (let (($x200 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x200 $x225)))
 (let (($x244 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x201 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x245 (= $x201 $x244)))
 (let (($x250 (=> $x200 $x245)))
 (let (($x261 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x238 (=> $x200 $x261)))
 (let (($x230 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x271 (= $x200 $x230)))
 (let (($x171 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x217 (=> $x171 $x65)))
 (let (($x267 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x281 (= $x171 $x267)))
 (let (($x246 (and (and (and (and (and $x281 $x217) $x271) $x238) $x250) $x226)))
 (let (($x83 (= $x246 true)))
 (let (($x237 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x273 (= $x200 $x237)))
 (let (($x233 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x240 (= $x171 $x233)))
 (let (($x243 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x241 (and (and (and $x243 $x240) $x217) $x273)))
 (let (($x274 (= $x241 true)))
 (let (($x21 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x38 (= $x12 $x21)))
 (let (($x41 (=> $x200 $x38)))
 (let (($x58 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x214 (= $x201 $x58)))
 (let (($x228 (=> $x200 $x214)))
 (let (($x216 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x196 (=> $x200 $x216)))
 (let (($x213 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x71 (= $x200 $x213)))
 (let (($x219 (and (and (= $x171 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x217) $x71)))
 (let (($x239 (and (and (and $x219 $x196) $x228) $x41)))
 (let (($x220 (= $x239 true)))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x167 (concat ?x204 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x185 (concat ?x173 (concat ?x175 ?x167))))
 (let (($x184 (= (_ bv0 32) ?x185)))
 (let ((?x172 (ite $x184 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x172 (_ bv1 32))))
 (let (($x190 (= $x200 $x183)))
 (let (($x212 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x205 (=> $x212 $x190)))
 (let (($x198 (= ?x172 (_ bv0 32))))
 (let (($x202 (= $x171 $x198)))
 (let (($x10 (=> $x212 $x202)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x162)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x153)))
 (let (($x191 (= input.spec-%var-l-0.2.0 ?x149)))
 (let (($x166 (=> $x212 $x191)))
 (let (($x188 (= $x212 $x159)))
 (let (($x134 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x64 (=> $x134 $x65)))
 (let (($x168 (= $x134 $x199)))
 (let (($x9 (and (and (and (and (and $x168 $x64) $x188) $x166) $x10) $x205)))
 (let (($x195 (= $x9 true)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x176 (concat ?x121 (concat ?x102 ?x92)))))
 (let (($x97 (= ?x125 input.dst.llvm-%l)))
 (let (($x187 (= $x97 true)))
 (let (($x72 (= $x187 true)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x181 (concat ?x143 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x19 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x57 (bvadd ?x19 (_ bv3 32))))
 (let ((?x163 (concat (select input.dst.llvm-mem ?x57) (concat ?x145 ?x181))))
 (let (($x20 (= (bvand ?x163 (_ bv4294967288 32)) ?x163)))
 (let (($x23 (= (bvand ?x19 (_ bv4294967292 32)) ?x19)))
 (let (($x164 (and $x23 $x20)))
 (let (($x158 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x142 (and true $x158)))
 (let (($x67 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x19 (bvsub ?x19 (_ bv4 32))) (bvult ?x19 (bvsub ?x19 (_ bv4 32))))))
 (let (($x89 (and (and (and $x67 $x142) $x23) $x164)))
 (let (($x152 (= true $x89)))
 (let (($x27 (not $x5)))
 (let (($x165 (=> $x27 $x152)))
 (let (($x136 (= input.dst.llvm-%l ?x125)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x55)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x174 $x66)))
 (let (($x135 (and $x43 $x114)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x90 $x135)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x129)))))))
 (let (($x98 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x139 (and (and (and $x98 $x103) $x113) $x136)))
 (let (($x151 (and true $x139)))
 (let (($x93 (and $x151 $x165)))
 (let (($x209 (= $x93 true)))
 (let (($x87 (= $x209 true)))
 (let (($x130 (= $x87 true)))
 (let (($x133 (= $x5 true)))
 (let (($x180 (= $x133 true)))
 (let (($x95 (= $x180 true)))
 (let (($x111 (= $x98 true)))
 (let (($x104 (= $x111 true)))
 (let (($x101 (= $x104 true)))
 (let (($x119 (and $x101 $x95)))
 (let (($x48 (and $x119 $x130)))
 (let (($x146 (and $x48 $x72)))
 (let (($x215 (and $x146 $x195)))
 (let (($x229 (and $x215 $x220)))
 (let (($x249 (and $x229 $x274)))
 (let (($x259 (and $x249 $x83)))
 (let (($x255 (and $x134 $x259)))
 (let (($x36 (and $x65 $x255)))
 (let (($x46 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x78 (and $x46 $x36)))
 (let (($x6 (bvugt ?x19 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x96 (=> (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x6)))))))
 (let (($x74 (=> (and $x27 (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x131 $x6)))))))
 (let (($x39 (and $x74 $x78)))
 (let (($x84 (=> $x39 $x29)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676116/query
