==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x10 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x10 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x17 (not $x45)))
 (let (($x112 (or $x45 $x17)))
 (let (($x113 (= $x112 false)))
 (let (($x114 (= $x113 true)))
 (let (($x105 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x96 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x106 (= $x96 $x105)))
 (let (($x103 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x92 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x104 (= $x92 $x103)))
 (let (($x107 (and $x104 $x106)))
 (let (($x108 (= $x107 true)))
 (let (($x97 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x98 (= $x96 $x97)))
 (let (($x94 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x95 (= $x92 $x94)))
 (let (($x99 (and $x95 $x98)))
 (let (($x100 (= $x99 true)))
 (let ((?x82 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x86 (bvuge ?x82 (_ bv1 32))))
 (let (($x85 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x87 (= $x85 $x86)))
 (let (($x83 (= ?x82 (_ bv0 32))))
 (let (($x81 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x84 (= $x81 $x83)))
 (let (($x88 (and $x84 $x87)))
 (let (($x89 (= $x88 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x74 (concat ?x71 (concat ?x67 ?x65)))))
 (let (($x76 (= ?x75 input.dst.llvm-%l)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x43 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x53 (bvugt ?x43 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x43 (_ bv3 32)))))
 (let (($x59 (=> (bvule ?x43 (bvsub (bvadd ?x43 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x53)))))))
 (let (($x33 (=> (and $x17 (bvule ?x43 (bvsub (bvadd ?x43 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x52 $x53)))))))
 (let (($x31 (= $x33 true)))
 (let (($x60 (= $x31 true)))
 (let (($x61 (= $x60 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x44)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x16 $x37)))
 (let (($x6 (and $x18 $x8)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x20 $x6)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x40)))))))
 (let (($x39 (and $x15 $x9)))
 (let (($x34 (= $x39 true)))
 (let (($x14 (= $x34 true)))
 (let (($x30 (= $x14 true)))
 (let (($x62 (and $x30 $x61)))
 (let (($x79 (and $x62 $x78)))
 (let (($x90 (and $x79 $x89)))
 (let (($x101 (and $x90 $x100)))
 (let (($x109 (and $x101 $x108)))
 (let (($x35 (= false false)))
 (let (($x110 (and $x35 $x109)))
 (let (($x46 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x111 (and $x46 $x110)))
 (let (($x115 (=> $x111 $x114)))
 (not $x115))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x17 (not $x45)))
 (let (($x112 (or $x45 $x17)))
 (let (($x113 (= $x112 false)))
 (let (($x114 (= $x113 true)))
 (let (($x105 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x96 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x106 (= $x96 $x105)))
 (let (($x103 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x92 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x104 (= $x92 $x103)))
 (let (($x107 (and $x104 $x106)))
 (let (($x108 (= $x107 true)))
 (let (($x97 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x98 (= $x96 $x97)))
 (let (($x94 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x95 (= $x92 $x94)))
 (let (($x99 (and $x95 $x98)))
 (let (($x100 (= $x99 true)))
 (let ((?x82 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x86 (bvuge ?x82 (_ bv1 32))))
 (let (($x85 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x87 (= $x85 $x86)))
 (let (($x83 (= ?x82 (_ bv0 32))))
 (let (($x81 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x84 (= $x81 $x83)))
 (let (($x88 (and $x84 $x87)))
 (let (($x89 (= $x88 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x74 (concat ?x71 (concat ?x67 ?x65)))))
 (let (($x76 (= ?x75 input.dst.llvm-%l)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x43 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x53 (bvugt ?x43 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x43 (_ bv3 32)))))
 (let (($x59 (=> (bvule ?x43 (bvsub (bvadd ?x43 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x53)))))))
 (let (($x33 (=> (and $x17 (bvule ?x43 (bvsub (bvadd ?x43 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x52 $x53)))))))
 (let (($x31 (= $x33 true)))
 (let (($x60 (= $x31 true)))
 (let (($x61 (= $x60 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x44)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x16 $x37)))
 (let (($x6 (and $x18 $x8)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x20 $x6)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x40)))))))
 (let (($x39 (and $x15 $x9)))
 (let (($x34 (= $x39 true)))
 (let (($x14 (= $x34 true)))
 (let (($x30 (= $x14 true)))
 (let (($x62 (and $x30 $x61)))
 (let (($x79 (and $x62 $x78)))
 (let (($x90 (and $x79 $x89)))
 (let (($x101 (and $x90 $x100)))
 (let (($x109 (and $x101 $x108)))
 (let (($x35 (= false false)))
 (let (($x110 (and $x35 $x109)))
 (let (($x46 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x111 (and $x46 $x110)))
 (let (($x115 (=> $x111 $x114)))
 (not $x115))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%var-node_val-0.L2%9%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fffffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv33554428 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv33554431 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv33554428 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x43 (not $x28)))
 (let (($x125 (or $x28 $x43)))
 (let (($x126 (= $x125 false)))
 (let (($x127 (= $x126 true)))
 (let (($x104 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x108 (not $x104)))
 (let (($x100 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x107 (not $x100)))
 (let (($x5 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x117 (= $x104 $x5)))
 (let (($x21 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x64 (= $x100 $x21)))
 (let (($x120 (and (and (and $x64 $x117) $x107) $x108)))
 (let (($x121 (= $x120 true)))
 (let (($x114 (not true)))
 (let (($x115 (= $x114 true)))
 (let (($x105 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x106 (= $x104 $x105)))
 (let (($x102 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x103 (= $x100 $x102)))
 (let (($x111 (and (and (and $x103 $x106) $x107) $x108)))
 (let (($x112 (= $x111 true)))
 (let (($x89 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x93 (not $x89)))
 (let (($x85 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x92 (not $x85)))
 (let ((?x86 (ite $x28 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x86 (_ bv1 32))))
 (let (($x91 (= $x89 $x90)))
 (let (($x87 (= ?x86 (_ bv0 32))))
 (let (($x88 (= $x85 $x87)))
 (let (($x96 (and (and (and $x88 $x91) $x92) $x93)))
 (let (($x97 (= $x96 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x78 (concat ?x75 (concat ?x67 ?x71)))))
 (let (($x80 (= ?x79 input.dst.llvm-%l)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let ((?x50 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x57 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x50 (_ bv3 32)))))
 (let (($x62 (=> (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x57)))))))
 (let (($x51 (=> (and $x43 (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x56 $x57)))))))
 (let (($x52 (= $x51 true)))
 (let (($x63 (= $x52 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x6)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x13 $x44)))
 (let (($x39 (and $x8 $x9)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x46 $x39)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x40)))))))
 (let (($x14 (and $x38 $x34)))
 (let (($x30 (= $x14 true)))
 (let (($x41 (= $x30 true)))
 (let (($x45 (= $x41 true)))
 (let (($x74 (and $x45 $x73)))
 (let (($x83 (and $x74 $x82)))
 (let (($x98 (and $x83 $x97)))
 (let (($x113 (and $x98 $x112)))
 (let (($x116 (and $x113 $x115)))
 (let (($x122 (and $x116 $x121)))
 (let (($x32 (= false false)))
 (let (($x123 (and $x32 $x122)))
 (let (($x35 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x124 (and $x35 $x123)))
 (let (($x128 (=> $x124 $x127)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x43 (not $x28)))
 (let (($x125 (or $x28 $x43)))
 (let (($x126 (= $x125 false)))
 (let (($x127 (= $x126 true)))
 (let (($x104 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x108 (not $x104)))
 (let (($x100 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x107 (not $x100)))
 (let (($x5 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x117 (= $x104 $x5)))
 (let (($x21 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x64 (= $x100 $x21)))
 (let (($x120 (and (and (and $x64 $x117) $x107) $x108)))
 (let (($x121 (= $x120 true)))
 (let (($x114 (not true)))
 (let (($x115 (= $x114 true)))
 (let (($x105 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x106 (= $x104 $x105)))
 (let (($x102 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x103 (= $x100 $x102)))
 (let (($x111 (and (and (and $x103 $x106) $x107) $x108)))
 (let (($x112 (= $x111 true)))
 (let (($x89 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x93 (not $x89)))
 (let (($x85 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x92 (not $x85)))
 (let ((?x86 (ite $x28 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x86 (_ bv1 32))))
 (let (($x91 (= $x89 $x90)))
 (let (($x87 (= ?x86 (_ bv0 32))))
 (let (($x88 (= $x85 $x87)))
 (let (($x96 (and (and (and $x88 $x91) $x92) $x93)))
 (let (($x97 (= $x96 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x78 (concat ?x75 (concat ?x67 ?x71)))))
 (let (($x80 (= ?x79 input.dst.llvm-%l)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let ((?x50 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x57 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x50 (_ bv3 32)))))
 (let (($x62 (=> (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x57)))))))
 (let (($x51 (=> (and $x43 (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x56 $x57)))))))
 (let (($x52 (= $x51 true)))
 (let (($x63 (= $x52 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x6)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x13 $x44)))
 (let (($x39 (and $x8 $x9)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x46 $x39)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x40)))))))
 (let (($x14 (and $x38 $x34)))
 (let (($x30 (= $x14 true)))
 (let (($x41 (= $x30 true)))
 (let (($x45 (= $x41 true)))
 (let (($x74 (and $x45 $x73)))
 (let (($x83 (and $x74 $x82)))
 (let (($x98 (and $x83 $x97)))
 (let (($x113 (and $x98 $x112)))
 (let (($x116 (and $x113 $x115)))
 (let (($x122 (and $x116 $x121)))
 (let (($x32 (= false false)))
 (let (($x123 (and $x32 $x122)))
 (let (($x35 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x124 (and $x35 $x123)))
 (let (($x128 (=> $x124 $x127)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x10 (not $x43)))
 (let (($x70 (or $x43 $x10)))
 (let (($x58 (= $x70 false)))
 (let (($x130 (= $x58 true)))
 (let (($x35 (= false false)))
 (let (($x101 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x107 (=> $x101 $x35)))
 (let (($x123 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x105 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x124 (= $x105 $x123)))
 (let (($x121 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x122 (= $x101 $x121)))
 (let (($x126 (and (and $x122 $x124) $x107)))
 (let (($x127 (= $x126 true)))
 (let (($x21 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x64 (= $x105 $x21)))
 (let (($x116 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x23 (= $x101 $x116)))
 (let (($x114 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x117 (and (and $x114 $x23) $x64)))
 (let (($x118 (= $x117 true)))
 (let (($x106 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x109 (= $x105 $x106)))
 (let (($x103 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x104 (= $x101 $x103)))
 (let (($x108 (and (and $x104 $x109) $x107)))
 (let (($x111 (= $x108 true)))
 (let (($x88 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x93 (=> $x88 $x35)))
 (let ((?x89 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x92 (bvuge ?x89 (_ bv1 32))))
 (let (($x94 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x95 (= $x94 $x92)))
 (let (($x90 (= ?x89 (_ bv0 32))))
 (let (($x91 (= $x88 $x90)))
 (let (($x97 (and (and $x91 $x95) $x93)))
 (let (($x98 (= $x97 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x81 (concat ?x76 (concat ?x66 ?x72)))))
 (let (($x83 (= ?x82 input.dst.llvm-%l)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let ((?x53 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x31 (bvugt ?x53 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x53 (_ bv3 32)))))
 (let (($x73 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x31)))))))
 (let (($x61 (=> (and $x10 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x33 $x31)))))))
 (let (($x55 (= $x61 true)))
 (let (($x74 (= $x55 true)))
 (let (($x69 (= $x74 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x9)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x37 $x8)))
 (let (($x34 (and $x6 $x39)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x27 $x34)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x29)))))))
 (let (($x30 (and $x13 $x14)))
 (let (($x41 (= $x30 true)))
 (let (($x45 (= $x41 true)))
 (let (($x17 (= $x45 true)))
 (let (($x77 (and $x17 $x69)))
 (let (($x86 (and $x77 $x85)))
 (let (($x99 (and $x86 $x98)))
 (let (($x112 (and $x99 $x111)))
 (let (($x119 (and $x112 $x118)))
 (let (($x128 (and $x119 $x127)))
 (let (($x129 (and $x35 $x128)))
 (let (($x7 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x36 (and $x7 $x129)))
 (let (($x131 (=> $x36 $x130)))
 (not $x131))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x10 (not $x43)))
 (let (($x70 (or $x43 $x10)))
 (let (($x58 (= $x70 false)))
 (let (($x130 (= $x58 true)))
 (let (($x35 (= false false)))
 (let (($x101 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x107 (=> $x101 $x35)))
 (let (($x123 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x105 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x124 (= $x105 $x123)))
 (let (($x121 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x122 (= $x101 $x121)))
 (let (($x126 (and (and $x122 $x124) $x107)))
 (let (($x127 (= $x126 true)))
 (let (($x21 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x64 (= $x105 $x21)))
 (let (($x116 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x23 (= $x101 $x116)))
 (let (($x114 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x117 (and (and $x114 $x23) $x64)))
 (let (($x118 (= $x117 true)))
 (let (($x106 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x109 (= $x105 $x106)))
 (let (($x103 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x104 (= $x101 $x103)))
 (let (($x108 (and (and $x104 $x109) $x107)))
 (let (($x111 (= $x108 true)))
 (let (($x88 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x93 (=> $x88 $x35)))
 (let ((?x89 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x92 (bvuge ?x89 (_ bv1 32))))
 (let (($x94 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x95 (= $x94 $x92)))
 (let (($x90 (= ?x89 (_ bv0 32))))
 (let (($x91 (= $x88 $x90)))
 (let (($x97 (and (and $x91 $x95) $x93)))
 (let (($x98 (= $x97 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x81 (concat ?x76 (concat ?x66 ?x72)))))
 (let (($x83 (= ?x82 input.dst.llvm-%l)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let ((?x53 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x31 (bvugt ?x53 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x53 (_ bv3 32)))))
 (let (($x73 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x31)))))))
 (let (($x61 (=> (and $x10 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x33 $x31)))))))
 (let (($x55 (= $x61 true)))
 (let (($x74 (= $x55 true)))
 (let (($x69 (= $x74 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x9)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x37 $x8)))
 (let (($x34 (and $x6 $x39)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x27 $x34)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x29)))))))
 (let (($x30 (and $x13 $x14)))
 (let (($x41 (= $x30 true)))
 (let (($x45 (= $x41 true)))
 (let (($x17 (= $x45 true)))
 (let (($x77 (and $x17 $x69)))
 (let (($x86 (and $x77 $x85)))
 (let (($x99 (and $x86 $x98)))
 (let (($x112 (and $x99 $x111)))
 (let (($x119 (and $x112 $x118)))
 (let (($x128 (and $x119 $x127)))
 (let (($x129 (and $x35 $x128)))
 (let (($x7 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x36 (and $x7 $x129)))
 (let (($x131 (=> $x36 $x130)))
 (not $x131))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%var-node_val-0.L2%9%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fffffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483644 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483644 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x53 (not $x50)))
 (let (($x136 (or $x50 $x53)))
 (let (($x137 (= $x136 false)))
 (let (($x138 (= $x137 true)))
 (let (($x48 (= false false)))
 (let (($x106 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x114 (=> $x106 $x48)))
 (let (($x108 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x113 (not $x108)))
 (let (($x130 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x131 (= $x108 $x130)))
 (let (($x70 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x58 (= $x106 $x70)))
 (let (($x68 (and (and (and $x58 $x131) $x113) $x114)))
 (let (($x54 (= $x68 true)))
 (let (($x122 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x123 (= $x108 $x122)))
 (let (($x120 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x121 (= $x106 $x120)))
 (let (($x118 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x127 (and (and (and (and (not $x106) $x113) $x118) $x121) $x123)))
 (let (($x128 (= $x127 true)))
 (let (($x111 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x112 (= $x108 $x111)))
 (let (($x110 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x107 (= $x106 $x110)))
 (let (($x23 (and (and (and $x107 $x112) $x113) $x114)))
 (let (($x5 (= $x23 true)))
 (let (($x94 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x99 (=> $x94 $x48)))
 (let (($x35 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x98 (not $x35)))
 (let ((?x92 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x93 (bvuge ?x92 (_ bv1 32))))
 (let (($x97 (= $x35 $x93)))
 (let (($x95 (= ?x92 (_ bv0 32))))
 (let (($x96 (= $x94 $x95)))
 (let (($x102 (and (and (and $x96 $x97) $x98) $x99)))
 (let (($x103 (= $x102 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x85 (concat ?x82 (concat ?x66 ?x76)))))
 (let (($x87 (= ?x86 input.dst.llvm-%l)))
 (let (($x88 (= $x87 true)))
 (let (($x89 (= $x88 true)))
 (let ((?x57 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x52 (bvugt ?x57 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x57 (_ bv3 32)))))
 (let (($x77 (=> (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x52)))))))
 (let (($x59 (=> (and $x53 (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x51 $x52)))))))
 (let (($x33 (= $x59 true)))
 (let (($x78 (= $x33 true)))
 (let (($x80 (= $x78 true)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x34)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x44 $x9)))
 (let (($x30 (and $x39 $x14)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x47 $x30)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x32)))))))
 (let (($x45 (and $x40 $x41)))
 (let (($x17 (= $x45 true)))
 (let (($x28 (= $x17 true)))
 (let (($x43 (= $x28 true)))
 (let (($x81 (and $x43 $x80)))
 (let (($x90 (and $x81 $x89)))
 (let (($x104 (and $x90 $x103)))
 (let (($x21 (and $x104 $x5)))
 (let (($x129 (and $x21 $x128)))
 (let (($x133 (and $x129 $x54)))
 (let (($x134 (and $x48 $x133)))
 (let (($x7 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x135 (and $x7 $x134)))
 (let (($x139 (=> $x135 $x138)))
 (not $x139))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x53 (not $x50)))
 (let (($x136 (or $x50 $x53)))
 (let (($x137 (= $x136 false)))
 (let (($x138 (= $x137 true)))
 (let (($x48 (= false false)))
 (let (($x106 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x114 (=> $x106 $x48)))
 (let (($x108 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x113 (not $x108)))
 (let (($x130 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x131 (= $x108 $x130)))
 (let (($x70 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x58 (= $x106 $x70)))
 (let (($x68 (and (and (and $x58 $x131) $x113) $x114)))
 (let (($x54 (= $x68 true)))
 (let (($x122 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x123 (= $x108 $x122)))
 (let (($x120 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x121 (= $x106 $x120)))
 (let (($x118 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x127 (and (and (and (and (not $x106) $x113) $x118) $x121) $x123)))
 (let (($x128 (= $x127 true)))
 (let (($x111 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x112 (= $x108 $x111)))
 (let (($x110 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x107 (= $x106 $x110)))
 (let (($x23 (and (and (and $x107 $x112) $x113) $x114)))
 (let (($x5 (= $x23 true)))
 (let (($x94 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x99 (=> $x94 $x48)))
 (let (($x35 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x98 (not $x35)))
 (let ((?x92 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x93 (bvuge ?x92 (_ bv1 32))))
 (let (($x97 (= $x35 $x93)))
 (let (($x95 (= ?x92 (_ bv0 32))))
 (let (($x96 (= $x94 $x95)))
 (let (($x102 (and (and (and $x96 $x97) $x98) $x99)))
 (let (($x103 (= $x102 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x85 (concat ?x82 (concat ?x66 ?x76)))))
 (let (($x87 (= ?x86 input.dst.llvm-%l)))
 (let (($x88 (= $x87 true)))
 (let (($x89 (= $x88 true)))
 (let ((?x57 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x52 (bvugt ?x57 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x57 (_ bv3 32)))))
 (let (($x77 (=> (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x52)))))))
 (let (($x59 (=> (and $x53 (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x51 $x52)))))))
 (let (($x33 (= $x59 true)))
 (let (($x78 (= $x33 true)))
 (let (($x80 (= $x78 true)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x34)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x44 $x9)))
 (let (($x30 (and $x39 $x14)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x47 $x30)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x32)))))))
 (let (($x45 (and $x40 $x41)))
 (let (($x17 (= $x45 true)))
 (let (($x28 (= $x17 true)))
 (let (($x43 (= $x28 true)))
 (let (($x81 (and $x43 $x80)))
 (let (($x90 (and $x81 $x89)))
 (let (($x104 (and $x90 $x103)))
 (let (($x21 (and $x104 $x5)))
 (let (($x129 (and $x21 $x128)))
 (let (($x133 (and $x129 $x54)))
 (let (($x134 (and $x48 $x133)))
 (let (($x7 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x135 (and $x7 $x134)))
 (let (($x139 (=> $x135 $x138)))
 (not $x139))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x57 (not $x56)))
 (let (($x280 (or $x56 $x57)))
 (let (($x281 (= $x280 false)))
 (let (($x282 (= $x281 true)))
 (let (($x264 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x201 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x265 (= $x201 $x264)))
 (let (($x157 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x36 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x190 (and $x36 $x157)))
 (let (($x266 (=> $x190 $x265)))
 (let (($x261 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x196 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x262 (= $x196 $x261)))
 (let (($x263 (=> $x190 $x262)))
 (let (($x258 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x259 (=> $x190 $x258)))
 (let (($x254 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x255 (= $x157 $x254)))
 (let (($x256 (=> $x36 $x255)))
 (let (($x24 (= false false)))
 (let (($x63 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x185 (and $x36 $x63)))
 (let (($x186 (=> $x185 $x24)))
 (let (($x251 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x252 (= $x63 $x251)))
 (let (($x253 (=> $x36 $x252)))
 (let (($x248 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x249 (=> $x36 $x248)))
 (let (($x116 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x177 (=> $x116 $x24)))
 (let (($x245 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x246 (= $x36 $x245)))
 (let (($x243 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x244 (= $x116 $x243)))
 (let (($x272 (and (and (and (and (and (and $x244 $x246) $x177) $x249) $x253) $x186) $x256)))
 (let (($x275 (and (and (and $x272 $x259) $x263) $x266)))
 (let (($x276 (= $x275 true)))
 (let (($x230 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x231 (= $x157 $x230)))
 (let (($x232 (=> $x36 $x231)))
 (let (($x227 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x228 (= $x63 $x227)))
 (let (($x229 (=> $x36 $x228)))
 (let (($x224 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x225 (=> $x36 $x224)))
 (let (($x221 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x222 (= $x36 $x221)))
 (let (($x219 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x220 (= $x116 $x219)))
 (let (($x217 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x238 (and (and (and (and (and (and $x217 $x220) $x222) $x177) $x225) $x229) $x186)))
 (let (($x239 (and $x238 $x232)))
 (let (($x240 (= $x239 true)))
 (let (($x202 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x203 (= $x201 $x202)))
 (let (($x204 (=> $x190 $x203)))
 (let (($x198 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x199 (= $x196 $x198)))
 (let (($x200 (=> $x190 $x199)))
 (let (($x193 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x194 (=> $x190 $x193)))
 (let (($x187 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x188 (= $x157 $x187)))
 (let (($x189 (=> $x36 $x188)))
 (let (($x182 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x183 (= $x63 $x182)))
 (let (($x184 (=> $x36 $x183)))
 (let (($x179 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x180 (=> $x36 $x179)))
 (let (($x175 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x176 (= $x36 $x175)))
 (let (($x173 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x174 (= $x116 $x173)))
 (let (($x210 (and (and (and (and (and (and $x174 $x176) $x177) $x180) $x184) $x186) $x189)))
 (let (($x213 (and (and (and $x210 $x194) $x200) $x204)))
 (let (($x214 (= $x213 true)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x64 (concat ?x21 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x120 (concat ?x119 (concat ?x117 ?x64))))
 (let ((?x141 (bvadd ?x120 (_ bv4 32))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x145))))
 (let (($x152 (= (_ bv0 32) ?x151)))
 (let ((?x153 (ite $x152 (_ bv0 32) (_ bv1 32))))
 (let (($x158 (bvuge ?x153 (_ bv1 32))))
 (let (($x159 (= $x157 $x158)))
 (let (($x98 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x131 (and $x98 $x36)))
 (let (($x160 (=> $x131 $x159)))
 (let (($x154 (= ?x153 (_ bv0 32))))
 (let (($x155 (= $x63 $x154)))
 (let (($x156 (=> $x131 $x155)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x133))))
 (let (($x140 (= input.spec-%var-l-0.2.1.2.0 ?x139)))
 (let (($x12 (=> $x131 $x140)))
 (let (($x121 (= (_ bv0 32) ?x120)))
 (let ((?x126 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x126 (_ bv1 32))))
 (let (($x58 (= $x36 $x70)))
 (let (($x130 (=> $x98 $x58)))
 (let (($x128 (and $x98 $x116)))
 (let (($x129 (=> $x128 $x24)))
 (let (($x122 (= ?x126 (_ bv0 32))))
 (let (($x123 (= $x116 $x122)))
 (let (($x127 (=> $x98 $x123)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x105)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x110)))
 (let (($x112 (= input.spec-%var-l-0.2.0 ?x111)))
 (let (($x115 (=> $x98 $x112)))
 (let (($x35 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x99 (=> $x35 $x24)))
 (let ((?x93 (ite $x56 (_ bv0 32) (_ bv1 32))))
 (let (($x101 (bvuge ?x93 (_ bv1 32))))
 (let (($x48 (= $x98 $x101)))
 (let (($x97 (= ?x93 (_ bv0 32))))
 (let (($x100 (= $x35 $x97)))
 (let (($x166 (and (and (and (and (and (and $x100 $x48) $x99) $x115) $x127) $x129) $x130)))
 (let (($x169 (and (and (and $x166 $x12) $x156) $x160)))
 (let (($x170 (= $x169 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x89 (concat ?x86 (concat ?x66 ?x82)))))
 (let (($x91 (= ?x90 input.dst.llvm-%l)))
 (let (($x94 (= $x91 true)))
 (let (($x92 (= $x94 true)))
 (let ((?x60 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x74 (bvugt ?x60 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x60 (_ bv3 32)))))
 (let (($x81 (=> (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x74)))))))
 (let (($x62 (=> (and $x57 (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x55 $x74)))))))
 (let (($x51 (= $x62 true)))
 (let (($x71 (= $x51 true)))
 (let (($x84 (= $x71 true)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x14)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x25 $x39)))
 (let (($x45 (and $x37 $x15)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x47 $x45)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x46)))))))
 (let (($x28 (and $x18 $x17)))
 (let (($x43 (= $x28 true)))
 (let (($x10 (= $x43 true)))
 (let (($x50 (= $x10 true)))
 (let (($x85 (and $x50 $x84)))
 (let (($x95 (and $x85 $x92)))
 (let (($x171 (and $x95 $x170)))
 (let (($x215 (and $x171 $x214)))
 (let (($x241 (and $x215 $x240)))
 (let (($x277 (and $x241 $x276)))
 (let (($x278 (and $x24 $x277)))
 (let (($x6 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x279 (and $x6 $x278)))
 (let (($x283 (=> $x279 $x282)))
 (not $x283)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x57 (not $x56)))
 (let (($x280 (or $x56 $x57)))
 (let (($x281 (= $x280 false)))
 (let (($x282 (= $x281 true)))
 (let (($x264 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x201 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x265 (= $x201 $x264)))
 (let (($x157 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x36 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x190 (and $x36 $x157)))
 (let (($x266 (=> $x190 $x265)))
 (let (($x261 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x196 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x262 (= $x196 $x261)))
 (let (($x263 (=> $x190 $x262)))
 (let (($x258 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x259 (=> $x190 $x258)))
 (let (($x254 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x255 (= $x157 $x254)))
 (let (($x256 (=> $x36 $x255)))
 (let (($x24 (= false false)))
 (let (($x63 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x185 (and $x36 $x63)))
 (let (($x186 (=> $x185 $x24)))
 (let (($x251 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x252 (= $x63 $x251)))
 (let (($x253 (=> $x36 $x252)))
 (let (($x248 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x249 (=> $x36 $x248)))
 (let (($x116 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x177 (=> $x116 $x24)))
 (let (($x245 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x246 (= $x36 $x245)))
 (let (($x243 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x244 (= $x116 $x243)))
 (let (($x272 (and (and (and (and (and (and $x244 $x246) $x177) $x249) $x253) $x186) $x256)))
 (let (($x275 (and (and (and $x272 $x259) $x263) $x266)))
 (let (($x276 (= $x275 true)))
 (let (($x230 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x231 (= $x157 $x230)))
 (let (($x232 (=> $x36 $x231)))
 (let (($x227 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x228 (= $x63 $x227)))
 (let (($x229 (=> $x36 $x228)))
 (let (($x224 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x225 (=> $x36 $x224)))
 (let (($x221 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x222 (= $x36 $x221)))
 (let (($x219 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x220 (= $x116 $x219)))
 (let (($x217 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x238 (and (and (and (and (and (and $x217 $x220) $x222) $x177) $x225) $x229) $x186)))
 (let (($x239 (and $x238 $x232)))
 (let (($x240 (= $x239 true)))
 (let (($x202 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x203 (= $x201 $x202)))
 (let (($x204 (=> $x190 $x203)))
 (let (($x198 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x199 (= $x196 $x198)))
 (let (($x200 (=> $x190 $x199)))
 (let (($x193 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x194 (=> $x190 $x193)))
 (let (($x187 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x188 (= $x157 $x187)))
 (let (($x189 (=> $x36 $x188)))
 (let (($x182 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x183 (= $x63 $x182)))
 (let (($x184 (=> $x36 $x183)))
 (let (($x179 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x180 (=> $x36 $x179)))
 (let (($x175 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x176 (= $x36 $x175)))
 (let (($x173 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x174 (= $x116 $x173)))
 (let (($x210 (and (and (and (and (and (and $x174 $x176) $x177) $x180) $x184) $x186) $x189)))
 (let (($x213 (and (and (and $x210 $x194) $x200) $x204)))
 (let (($x214 (= $x213 true)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x64 (concat ?x21 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x120 (concat ?x119 (concat ?x117 ?x64))))
 (let ((?x141 (bvadd ?x120 (_ bv4 32))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x145))))
 (let (($x152 (= (_ bv0 32) ?x151)))
 (let ((?x153 (ite $x152 (_ bv0 32) (_ bv1 32))))
 (let (($x158 (bvuge ?x153 (_ bv1 32))))
 (let (($x159 (= $x157 $x158)))
 (let (($x98 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x131 (and $x98 $x36)))
 (let (($x160 (=> $x131 $x159)))
 (let (($x154 (= ?x153 (_ bv0 32))))
 (let (($x155 (= $x63 $x154)))
 (let (($x156 (=> $x131 $x155)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x133))))
 (let (($x140 (= input.spec-%var-l-0.2.1.2.0 ?x139)))
 (let (($x12 (=> $x131 $x140)))
 (let (($x121 (= (_ bv0 32) ?x120)))
 (let ((?x126 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x126 (_ bv1 32))))
 (let (($x58 (= $x36 $x70)))
 (let (($x130 (=> $x98 $x58)))
 (let (($x128 (and $x98 $x116)))
 (let (($x129 (=> $x128 $x24)))
 (let (($x122 (= ?x126 (_ bv0 32))))
 (let (($x123 (= $x116 $x122)))
 (let (($x127 (=> $x98 $x123)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x105)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x110)))
 (let (($x112 (= input.spec-%var-l-0.2.0 ?x111)))
 (let (($x115 (=> $x98 $x112)))
 (let (($x35 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x99 (=> $x35 $x24)))
 (let ((?x93 (ite $x56 (_ bv0 32) (_ bv1 32))))
 (let (($x101 (bvuge ?x93 (_ bv1 32))))
 (let (($x48 (= $x98 $x101)))
 (let (($x97 (= ?x93 (_ bv0 32))))
 (let (($x100 (= $x35 $x97)))
 (let (($x166 (and (and (and (and (and (and $x100 $x48) $x99) $x115) $x127) $x129) $x130)))
 (let (($x169 (and (and (and $x166 $x12) $x156) $x160)))
 (let (($x170 (= $x169 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x89 (concat ?x86 (concat ?x66 ?x82)))))
 (let (($x91 (= ?x90 input.dst.llvm-%l)))
 (let (($x94 (= $x91 true)))
 (let (($x92 (= $x94 true)))
 (let ((?x60 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x74 (bvugt ?x60 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x60 (_ bv3 32)))))
 (let (($x81 (=> (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x74)))))))
 (let (($x62 (=> (and $x57 (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x55 $x74)))))))
 (let (($x51 (= $x62 true)))
 (let (($x71 (= $x51 true)))
 (let (($x84 (= $x71 true)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x14)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x25 $x39)))
 (let (($x45 (and $x37 $x15)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x47 $x45)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x46)))))))
 (let (($x28 (and $x18 $x17)))
 (let (($x43 (= $x28 true)))
 (let (($x10 (= $x43 true)))
 (let (($x50 (= $x10 true)))
 (let (($x85 (and $x50 $x84)))
 (let (($x95 (and $x85 $x92)))
 (let (($x171 (and $x95 $x170)))
 (let (($x215 (and $x171 $x214)))
 (let (($x241 (and $x215 $x240)))
 (let (($x277 (and $x241 $x276)))
 (let (($x278 (and $x24 $x277)))
 (let (($x6 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x279 (and $x6 $x278)))
 (let (($x283 (=> $x279 $x282)))
 (not $x283)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%var-node_val-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv7 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffefc)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000005 #x51))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffefc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffeff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x34 (not $x45)))
 (let (($x296 (or $x45 $x34)))
 (let (($x297 (= $x296 false)))
 (let (($x298 (= $x297 true)))
 (let (($x202 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x153 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x129 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x193 (and $x129 $x153)))
 (let (($x216 (and $x193 $x202)))
 (let (($x217 (not $x216)))
 (let (($x198 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x214 (and $x193 $x198)))
 (let (($x215 (not $x214)))
 (let (($x281 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x282 (= $x202 $x281)))
 (let (($x283 (=> $x193 $x282)))
 (let (($x278 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x198 $x278)))
 (let (($x280 (=> $x193 $x279)))
 (let (($x275 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x276 (=> $x193 $x275)))
 (let (($x274 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x264 (= $x153 $x274)))
 (let (($x265 (=> $x129 $x264)))
 (let (($x27 (= false false)))
 (let (($x140 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x189 (and $x129 $x140)))
 (let (($x210 (=> $x189 $x27)))
 (let (($x261 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x262 (= $x140 $x261)))
 (let (($x263 (=> $x129 $x262)))
 (let (($x259 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x273 (=> $x129 $x259)))
 (let (($x116 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x183 (=> $x116 $x27)))
 (let (($x272 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x257 (= $x129 $x272)))
 (let (($x255 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x256 (= $x116 $x255)))
 (let (($x286 (and (and (and (and (and (and $x256 $x257) $x183) $x273) $x263) $x210) $x265)))
 (let (($x291 (and (and (and (and (and $x286 $x276) $x280) $x283) $x215) $x217)))
 (let (($x292 (= $x291 true)))
 (let (($x268 (not $x193)))
 (let (($x245 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x246 (= $x153 $x245)))
 (let (($x267 (=> $x129 $x246)))
 (let (($x242 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x243 (= $x140 $x242)))
 (let (($x244 (=> $x129 $x243)))
 (let (($x239 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x240 (=> $x129 $x239)))
 (let (($x230 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x231 (= $x129 $x230)))
 (let (($x237 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x238 (= $x116 $x237)))
 (let (($x228 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x251 (and (and (and (and (and (and $x228 $x238) $x231) $x183) $x240) $x244) $x210)))
 (let (($x253 (and (and $x251 $x267) $x268)))
 (let (($x270 (= $x253 true)))
 (let (($x203 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x204 (= $x202 $x203)))
 (let (($x213 (=> $x193 $x204)))
 (let (($x200 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x212 (= $x198 $x200)))
 (let (($x201 (=> $x193 $x212)))
 (let (($x195 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x196 (=> $x193 $x195)))
 (let (($x190 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x191 (= $x153 $x190)))
 (let (($x192 (=> $x129 $x191)))
 (let (($x209 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x187 (= $x140 $x209)))
 (let (($x188 (=> $x129 $x187)))
 (let (($x208 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x185 (=> $x129 $x208)))
 (let (($x181 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x182 (= $x129 $x181)))
 (let (($x180 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x207 (= $x116 $x180)))
 (let (($x222 (and (and (and (and (and (and $x207 $x182) $x183) $x185) $x188) $x210) $x192)))
 (let (($x225 (and (and (and (and (and $x222 $x196) $x201) $x213) $x215) $x217)))
 (let (($x236 (= $x225 true)))
 (let (($x24 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x58 (and $x24 $x129)))
 (let (($x158 (and $x58 $x140)))
 (let (($x159 (not $x158)))
 (let (($x168 (and $x58 $x153)))
 (let (($x157 (not $x168)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x117 (concat ?x124 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x120 (concat ?x118 (concat ?x21 ?x117))))
 (let ((?x12 (bvadd ?x120 (_ bv4 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv1 32))) (select input.dst.llvm-mem ?x12))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv2 32))) ?x141))))
 (let (($x142 (= (_ bv0 32) ?x144)))
 (let ((?x145 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x145 (_ bv1 32))))
 (let (($x155 (= $x153 $x154)))
 (let (($x156 (=> $x58 $x155)))
 (let (($x148 (= ?x145 (_ bv0 32))))
 (let (($x151 (= $x140 $x148)))
 (let (($x152 (=> $x58 $x151)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x137))))
 (let (($x133 (= input.spec-%var-l-0.2.1.2.0 ?x26)))
 (let (($x136 (=> $x58 $x133)))
 (let (($x121 (= (_ bv0 32) ?x120)))
 (let ((?x126 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x126 (_ bv1 32))))
 (let (($x36 (= $x129 $x165)))
 (let (($x70 (=> $x24 $x36)))
 (let (($x164 (and $x24 $x116)))
 (let (($x128 (=> $x164 $x27)))
 (let (($x122 (= ?x126 (_ bv0 32))))
 (let (($x123 (= $x116 $x122)))
 (let (($x127 (=> $x24 $x123)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x103)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x105)))
 (let (($x115 (= input.spec-%var-l-0.2.0 ?x112)))
 (let (($x163 (=> $x24 $x115)))
 (let (($x98 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x107 (=> $x98 $x27)))
 (let ((?x101 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x101 (_ bv1 32))))
 (let (($x162 (= $x24 $x99)))
 (let (($x48 (= ?x101 (_ bv0 32))))
 (let (($x161 (= $x98 $x48)))
 (let (($x173 (and (and (and (and (and (and $x161 $x162) $x107) $x163) $x127) $x128) $x70)))
 (let (($x177 (and (and (and (and (and $x173 $x136) $x152) $x156) $x157) $x159)))
 (let (($x206 (= $x177 true)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x92 (concat ?x90 (concat ?x66 ?x86)))))
 (let (($x96 (= ?x95 input.dst.llvm-%l)))
 (let (($x35 (= $x96 true)))
 (let (($x93 (= $x35 true)))
 (let ((?x69 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x78 (bvugt ?x69 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x69 (_ bv3 32)))))
 (let (($x85 (=> (bvule ?x69 (bvsub (bvadd ?x69 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x78)))))))
 (let (($x60 (=> (and $x34 (bvule ?x69 (bvsub (bvadd ?x69 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x33 $x78)))))))
 (let (($x6 (= $x60 true)))
 (let (($x67 (= $x6 true)))
 (let (($x88 (= $x67 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x53)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x61 $x50)))
 (let (($x20 (and $x31 $x30)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x73 $x20)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x40)))))))
 (let (($x37 (and $x22 $x39)))
 (let (($x57 (= $x37 true)))
 (let (($x42 (= $x57 true)))
 (let (($x14 (= $x42 true)))
 (let (($x89 (and $x14 $x88)))
 (let (($x97 (and $x89 $x93)))
 (let (($x178 (and $x97 $x206)))
 (let (($x226 (and $x178 $x236)))
 (let (($x271 (and $x226 $x270)))
 (let (($x293 (and $x271 $x292)))
 (let (($x294 (and $x27 $x293)))
 (let (($x52 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x295 (and $x52 $x294)))
 (let (($x299 (=> $x295 $x298)))
 (not $x299))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x34 (not $x45)))
 (let (($x296 (or $x45 $x34)))
 (let (($x297 (= $x296 false)))
 (let (($x298 (= $x297 true)))
 (let (($x202 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x153 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x129 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x193 (and $x129 $x153)))
 (let (($x216 (and $x193 $x202)))
 (let (($x217 (not $x216)))
 (let (($x198 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x214 (and $x193 $x198)))
 (let (($x215 (not $x214)))
 (let (($x281 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x282 (= $x202 $x281)))
 (let (($x283 (=> $x193 $x282)))
 (let (($x278 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x198 $x278)))
 (let (($x280 (=> $x193 $x279)))
 (let (($x275 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x276 (=> $x193 $x275)))
 (let (($x274 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x264 (= $x153 $x274)))
 (let (($x265 (=> $x129 $x264)))
 (let (($x27 (= false false)))
 (let (($x140 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x189 (and $x129 $x140)))
 (let (($x210 (=> $x189 $x27)))
 (let (($x261 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x262 (= $x140 $x261)))
 (let (($x263 (=> $x129 $x262)))
 (let (($x259 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x273 (=> $x129 $x259)))
 (let (($x116 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x183 (=> $x116 $x27)))
 (let (($x272 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x257 (= $x129 $x272)))
 (let (($x255 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x256 (= $x116 $x255)))
 (let (($x286 (and (and (and (and (and (and $x256 $x257) $x183) $x273) $x263) $x210) $x265)))
 (let (($x291 (and (and (and (and (and $x286 $x276) $x280) $x283) $x215) $x217)))
 (let (($x292 (= $x291 true)))
 (let (($x268 (not $x193)))
 (let (($x245 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x246 (= $x153 $x245)))
 (let (($x267 (=> $x129 $x246)))
 (let (($x242 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x243 (= $x140 $x242)))
 (let (($x244 (=> $x129 $x243)))
 (let (($x239 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x240 (=> $x129 $x239)))
 (let (($x230 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x231 (= $x129 $x230)))
 (let (($x237 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x238 (= $x116 $x237)))
 (let (($x228 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x251 (and (and (and (and (and (and $x228 $x238) $x231) $x183) $x240) $x244) $x210)))
 (let (($x253 (and (and $x251 $x267) $x268)))
 (let (($x270 (= $x253 true)))
 (let (($x203 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x204 (= $x202 $x203)))
 (let (($x213 (=> $x193 $x204)))
 (let (($x200 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x212 (= $x198 $x200)))
 (let (($x201 (=> $x193 $x212)))
 (let (($x195 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x196 (=> $x193 $x195)))
 (let (($x190 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x191 (= $x153 $x190)))
 (let (($x192 (=> $x129 $x191)))
 (let (($x209 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x187 (= $x140 $x209)))
 (let (($x188 (=> $x129 $x187)))
 (let (($x208 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x185 (=> $x129 $x208)))
 (let (($x181 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x182 (= $x129 $x181)))
 (let (($x180 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x207 (= $x116 $x180)))
 (let (($x222 (and (and (and (and (and (and $x207 $x182) $x183) $x185) $x188) $x210) $x192)))
 (let (($x225 (and (and (and (and (and $x222 $x196) $x201) $x213) $x215) $x217)))
 (let (($x236 (= $x225 true)))
 (let (($x24 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x58 (and $x24 $x129)))
 (let (($x158 (and $x58 $x140)))
 (let (($x159 (not $x158)))
 (let (($x168 (and $x58 $x153)))
 (let (($x157 (not $x168)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x117 (concat ?x124 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x120 (concat ?x118 (concat ?x21 ?x117))))
 (let ((?x12 (bvadd ?x120 (_ bv4 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv1 32))) (select input.dst.llvm-mem ?x12))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv2 32))) ?x141))))
 (let (($x142 (= (_ bv0 32) ?x144)))
 (let ((?x145 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x145 (_ bv1 32))))
 (let (($x155 (= $x153 $x154)))
 (let (($x156 (=> $x58 $x155)))
 (let (($x148 (= ?x145 (_ bv0 32))))
 (let (($x151 (= $x140 $x148)))
 (let (($x152 (=> $x58 $x151)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x137))))
 (let (($x133 (= input.spec-%var-l-0.2.1.2.0 ?x26)))
 (let (($x136 (=> $x58 $x133)))
 (let (($x121 (= (_ bv0 32) ?x120)))
 (let ((?x126 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x126 (_ bv1 32))))
 (let (($x36 (= $x129 $x165)))
 (let (($x70 (=> $x24 $x36)))
 (let (($x164 (and $x24 $x116)))
 (let (($x128 (=> $x164 $x27)))
 (let (($x122 (= ?x126 (_ bv0 32))))
 (let (($x123 (= $x116 $x122)))
 (let (($x127 (=> $x24 $x123)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x103)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x105)))
 (let (($x115 (= input.spec-%var-l-0.2.0 ?x112)))
 (let (($x163 (=> $x24 $x115)))
 (let (($x98 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x107 (=> $x98 $x27)))
 (let ((?x101 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x101 (_ bv1 32))))
 (let (($x162 (= $x24 $x99)))
 (let (($x48 (= ?x101 (_ bv0 32))))
 (let (($x161 (= $x98 $x48)))
 (let (($x173 (and (and (and (and (and (and $x161 $x162) $x107) $x163) $x127) $x128) $x70)))
 (let (($x177 (and (and (and (and (and $x173 $x136) $x152) $x156) $x157) $x159)))
 (let (($x206 (= $x177 true)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x92 (concat ?x90 (concat ?x66 ?x86)))))
 (let (($x96 (= ?x95 input.dst.llvm-%l)))
 (let (($x35 (= $x96 true)))
 (let (($x93 (= $x35 true)))
 (let ((?x69 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x78 (bvugt ?x69 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x69 (_ bv3 32)))))
 (let (($x85 (=> (bvule ?x69 (bvsub (bvadd ?x69 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x78)))))))
 (let (($x60 (=> (and $x34 (bvule ?x69 (bvsub (bvadd ?x69 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x33 $x78)))))))
 (let (($x6 (= $x60 true)))
 (let (($x67 (= $x6 true)))
 (let (($x88 (= $x67 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x53)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x61 $x50)))
 (let (($x20 (and $x31 $x30)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x73 $x20)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x40)))))))
 (let (($x37 (and $x22 $x39)))
 (let (($x57 (= $x37 true)))
 (let (($x42 (= $x57 true)))
 (let (($x14 (= $x42 true)))
 (let (($x89 (and $x14 $x88)))
 (let (($x97 (and $x89 $x93)))
 (let (($x178 (and $x97 $x206)))
 (let (($x226 (and $x178 $x236)))
 (let (($x271 (and $x226 $x270)))
 (let (($x293 (and $x271 $x292)))
 (let (($x294 (and $x27 $x293)))
 (let (($x52 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x295 (and $x52 $x294)))
 (let (($x299 (=> $x295 $x298)))
 (not $x299))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%var-node_val-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv7 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffeffc)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000005 #x62))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffeffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffefff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x77 (not $x49)))
 (let (($x146 (or $x49 $x77)))
 (let (($x144 (not $x146)))
 (let (($x128 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x36 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x141 (or $x36 $x128)))
 (let (($x142 (or $x141 $x144)))
 (let (($x145 (= $x142 true)))
 (let (($x148 (= $x145 true)))
 (let (($x12 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x147 (= $x166 $x12)))
 (let (($x139 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x138 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x140 (= $x138 $x139)))
 (let (($x143 (and $x140 $x147)))
 (let (($x149 (= $x143 true)))
 (let (($x137 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x135 (= $x166 $x137)))
 (let (($x131 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x132 (= $x138 $x131)))
 (let (($x26 (and $x132 $x135)))
 (let (($x133 (= $x26 true)))
 (let ((?x172 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x172 (_ bv1 32))))
 (let (($x173 (= $x36 $x70)))
 (let (($x129 (= ?x172 (_ bv0 32))))
 (let (($x165 (= $x128 $x129)))
 (let (($x58 (and $x165 $x173)))
 (let (($x130 (= $x58 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x121 (concat ?x117 (concat ?x119 ?x5)))))
 (let (($x122 (= ?x126 input.dst.llvm-%l)))
 (let (($x123 (= $x122 true)))
 (let (($x127 (= $x123 true)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x107 (concat ?x27 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x80 (bvadd ?x9 (_ bv3 32))))
 (let ((?x106 (concat (select input.dst.llvm-mem ?x80) (concat ?x111 ?x107))))
 (let (($x108 (= (bvand ?x106 (_ bv4294967288 32)) ?x106)))
 (let (($x24 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x103 (and $x24 $x108)))
 (let (($x98 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x101 (and true $x98)))
 (let (($x96 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x115 (and (and (and $x96 $x101) $x24) $x103)))
 (let (($x163 (= true $x115)))
 (let (($x170 (=> $x77 $x163)))
 (let (($x113 (= $x170 true)))
 (let (($x116 (= $x113 true)))
 (let (($x114 (= $x116 true)))
 (let (($x92 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x76 (= $x92 true)))
 (let (($x87 (= $x76 true)))
 (let (($x90 (= $x87 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x51)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x33 $x81)))
 (let (($x85 (and $x62 $x71)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x57 $x85)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x34)))))))
 (let (($x6 (and $x59 $x60)))
 (let (($x67 (= $x6 true)))
 (let (($x88 (= $x67 true)))
 (let (($x89 (= $x88 true)))
 (let (($x75 (and $x89 $x90)))
 (let (($x66 (and $x75 $x90)))
 (let (($x64 (and $x66 $x114)))
 (let (($x171 (and $x64 $x127)))
 (let (($x68 (and $x171 $x130)))
 (let (($x136 (and $x68 $x133)))
 (let (($x150 (and $x136 $x149)))
 (let (($x20 (= false false)))
 (let (($x65 (and $x20 $x150)))
 (let (($x30 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x63 (and $x30 $x65)))
 (let (($x18 (bvugt ?x9 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x31 (=> (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x18)))))))
 (let (($x25 (=> (and $x77 (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x18)))))))
 (let (($x167 (and $x25 $x63)))
 (let (($x151 (=> $x167 $x148)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x77 (not $x49)))
 (let (($x146 (or $x49 $x77)))
 (let (($x144 (not $x146)))
 (let (($x128 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x36 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x141 (or $x36 $x128)))
 (let (($x142 (or $x141 $x144)))
 (let (($x145 (= $x142 true)))
 (let (($x148 (= $x145 true)))
 (let (($x12 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x147 (= $x166 $x12)))
 (let (($x139 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x138 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x140 (= $x138 $x139)))
 (let (($x143 (and $x140 $x147)))
 (let (($x149 (= $x143 true)))
 (let (($x137 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x135 (= $x166 $x137)))
 (let (($x131 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x132 (= $x138 $x131)))
 (let (($x26 (and $x132 $x135)))
 (let (($x133 (= $x26 true)))
 (let ((?x172 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x172 (_ bv1 32))))
 (let (($x173 (= $x36 $x70)))
 (let (($x129 (= ?x172 (_ bv0 32))))
 (let (($x165 (= $x128 $x129)))
 (let (($x58 (and $x165 $x173)))
 (let (($x130 (= $x58 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x121 (concat ?x117 (concat ?x119 ?x5)))))
 (let (($x122 (= ?x126 input.dst.llvm-%l)))
 (let (($x123 (= $x122 true)))
 (let (($x127 (= $x123 true)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x107 (concat ?x27 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x80 (bvadd ?x9 (_ bv3 32))))
 (let ((?x106 (concat (select input.dst.llvm-mem ?x80) (concat ?x111 ?x107))))
 (let (($x108 (= (bvand ?x106 (_ bv4294967288 32)) ?x106)))
 (let (($x24 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x103 (and $x24 $x108)))
 (let (($x98 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x101 (and true $x98)))
 (let (($x96 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x115 (and (and (and $x96 $x101) $x24) $x103)))
 (let (($x163 (= true $x115)))
 (let (($x170 (=> $x77 $x163)))
 (let (($x113 (= $x170 true)))
 (let (($x116 (= $x113 true)))
 (let (($x114 (= $x116 true)))
 (let (($x92 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x76 (= $x92 true)))
 (let (($x87 (= $x76 true)))
 (let (($x90 (= $x87 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x51)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x33 $x81)))
 (let (($x85 (and $x62 $x71)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x57 $x85)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x34)))))))
 (let (($x6 (and $x59 $x60)))
 (let (($x67 (= $x6 true)))
 (let (($x88 (= $x67 true)))
 (let (($x89 (= $x88 true)))
 (let (($x75 (and $x89 $x90)))
 (let (($x66 (and $x75 $x90)))
 (let (($x64 (and $x66 $x114)))
 (let (($x171 (and $x64 $x127)))
 (let (($x68 (and $x171 $x130)))
 (let (($x136 (and $x68 $x133)))
 (let (($x150 (and $x136 $x149)))
 (let (($x20 (= false false)))
 (let (($x65 (and $x20 $x150)))
 (let (($x30 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x63 (and $x30 $x65)))
 (let (($x18 (bvugt ?x9 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x31 (=> (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x18)))))))
 (let (($x25 (=> (and $x77 (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x18)))))))
 (let (($x167 (and $x25 $x63)))
 (let (($x151 (=> $x167 $x148)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var537X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let ((?x212 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var537X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x201 (concat ?x212 (select input.dst.llvm-mem (bvadd input.ind-%var537X (_ bv4 32))))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var537X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var537X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x223 (concat ?x213 (concat ?x202 ?x201))))
 (let (($x214 (= ?x223 ?x223)))
 (let ((?x206 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x178 (concat ?x206 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x218 (concat ?x182 (concat ?x180 ?x178))))
 (let (($x219 (= (_ bv0 32) ?x218)))
 (let ((?x184 (ite $x219 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x184 (_ bv1 32))))
 (let (($x215 (=> $x188 $x214)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd input.ind-%var537X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var537X))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd input.ind-%var537X (_ bv2 32))) ?x192)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd input.ind-%var537X (_ bv3 32))) ?x194)))
 (let (($x234 (= ?x196 ?x196)))
 (let (($x197 (=> $x188 $x234)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x106 (concat ?x104 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x49 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x51 (bvadd ?x49 (_ bv3 32))))
 (let ((?x170 (concat (select input.dst.llvm-mem ?x51) (concat ?x103 ?x106))))
 (let (($x185 (= (_ bv0 32) ?x170)))
 (let ((?x220 (ite $x185 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x220 (_ bv1 32))))
 (let (($x189 (= $x188 $x233)))
 (let (($x33 (= false false)))
 (let (($x208 (= ?x184 (_ bv0 32))))
 (let (($x187 (=> $x208 $x33)))
 (let (($x225 (and (and (and (and (= ?x218 ?x170) (= $x208 (= ?x220 (_ bv0 32)))) $x187) $x189) $x197)))
 (let (($x236 (and $x225 $x215)))
 (let (($x205 (not true)))
 (let (($x226 (or $x205 $x236)))
 (let (($x157 (= true true)))
 (let (($x227 (and $x157 $x226)))
 (let (($x228 (= $x227 true)))
 (let (($x118 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x141 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x47 (= $x141 $x118)))
 (let (($x152 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x150 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x39 (= $x150 $x152)))
 (let (($x175 (and $x39 $x47)))
 (let (($x153 (= $x175 true)))
 (let (($x146 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x144 (= $x141 $x146)))
 (let (($x63 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x167 (= $x150 $x63)))
 (let (($x142 (and $x167 $x144)))
 (let (($x145 (= $x142 true)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x26 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x26 (_ bv1 32))))
 (let (($x80 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x139 (= $x80 $x174)))
 (let (($x133 (= ?x26 (_ bv0 32))))
 (let (($x135 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x136 (= $x135 $x133)))
 (let (($x140 (and $x136 $x139)))
 (let (($x12 (= $x140 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x164 (concat ?x171 (concat ?x122 (concat ?x124 ?x119)))))
 (let (($x131 (= ?x164 input.dst.llvm-%l)))
 (let (($x132 (= $x131 true)))
 (let (($x166 (= $x132 true)))
 (let (($x116 (= (bvand ?x170 (_ bv4294967288 32)) ?x170)))
 (let (($x160 (= (bvand ?x49 (_ bv4294967292 32)) ?x49)))
 (let (($x114 (and $x160 $x116)))
 (let (($x102 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x169 (and true $x102)))
 (let (($x48 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x49 (bvsub ?x49 (_ bv4 32))) (bvult ?x49 (bvsub ?x49 (_ bv4 32))))))
 (let (($x121 (and (and (and $x48 $x169) $x160) $x114)))
 (let (($x125 (= true $x121)))
 (let (($x77 (not $x29)))
 (let (($x117 (=> $x77 $x125)))
 (let (($x68 (= $x117 true)))
 (let (($x54 (= $x68 true)))
 (let (($x138 (= $x54 true)))
 (let (($x128 (= input.dst.llvm-%l ?x164)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x74)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x85 $x38)))
 (let (($x22 (and $x50 $x16)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x89 $x22)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x55)))))))
 (let (($x20 (and $x57 $x31)))
 (let (($x172 (and $x20 $x128)))
 (let (($x129 (and true $x172)))
 (let (($x75 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x165 (and $x75 $x129)))
 (let (($x36 (and $x117 $x165)))
 (let (($x70 (= $x36 true)))
 (let (($x173 (= $x70 true)))
 (let (($x58 (= $x173 true)))
 (let (($x96 (= $x77 true)))
 (let (($x93 (= $x96 true)))
 (let (($x35 (= $x93 true)))
 (let (($x66 (= $x75 true)))
 (let (($x82 (= $x66 true)))
 (let (($x86 (= $x82 true)))
 (let (($x59 (= $x20 true)))
 (let (($x92 (= $x59 true)))
 (let (($x76 (= $x92 true)))
 (let (($x91 (and $x76 $x86)))
 (let (($x95 (and $x91 $x86)))
 (let (($x97 (and $x95 $x35)))
 (let (($x130 (and $x97 $x58)))
 (let (($x134 (and $x130 $x138)))
 (let (($x137 (and $x134 $x166)))
 (let (($x147 (and $x137 $x12)))
 (let (($x143 (and $x147 $x12)))
 (let (($x148 (and $x143 $x145)))
 (let (($x154 (and $x148 $x153)))
 (let (($x155 (and $x80 $x154)))
 (let (($x156 (and $x33 $x155)))
 (let (($x72 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x176 (and $x72 $x156)))
 (let (($x94 (bvugt ?x49 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x61 (=> (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x94)))))))
 (let (($x10 (=> (and $x77 (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x11 $x94)))))))
 (let (($x168 (and $x10 $x176)))
 (let (($x229 (=> $x168 $x228)))
 (not $x229))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var537X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let ((?x212 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var537X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x201 (concat ?x212 (select input.dst.llvm-mem (bvadd input.ind-%var537X (_ bv4 32))))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var537X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var537X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x223 (concat ?x213 (concat ?x202 ?x201))))
 (let (($x214 (= ?x223 ?x223)))
 (let ((?x206 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x178 (concat ?x206 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x218 (concat ?x182 (concat ?x180 ?x178))))
 (let (($x219 (= (_ bv0 32) ?x218)))
 (let ((?x184 (ite $x219 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x184 (_ bv1 32))))
 (let (($x215 (=> $x188 $x214)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd input.ind-%var537X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var537X))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd input.ind-%var537X (_ bv2 32))) ?x192)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd input.ind-%var537X (_ bv3 32))) ?x194)))
 (let (($x234 (= ?x196 ?x196)))
 (let (($x197 (=> $x188 $x234)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x106 (concat ?x104 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x49 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x51 (bvadd ?x49 (_ bv3 32))))
 (let ((?x170 (concat (select input.dst.llvm-mem ?x51) (concat ?x103 ?x106))))
 (let (($x185 (= (_ bv0 32) ?x170)))
 (let ((?x220 (ite $x185 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x220 (_ bv1 32))))
 (let (($x189 (= $x188 $x233)))
 (let (($x33 (= false false)))
 (let (($x208 (= ?x184 (_ bv0 32))))
 (let (($x187 (=> $x208 $x33)))
 (let (($x225 (and (and (and (and (= ?x218 ?x170) (= $x208 (= ?x220 (_ bv0 32)))) $x187) $x189) $x197)))
 (let (($x236 (and $x225 $x215)))
 (let (($x205 (not true)))
 (let (($x226 (or $x205 $x236)))
 (let (($x157 (= true true)))
 (let (($x227 (and $x157 $x226)))
 (let (($x228 (= $x227 true)))
 (let (($x118 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x141 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x47 (= $x141 $x118)))
 (let (($x152 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x150 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x39 (= $x150 $x152)))
 (let (($x175 (and $x39 $x47)))
 (let (($x153 (= $x175 true)))
 (let (($x146 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x144 (= $x141 $x146)))
 (let (($x63 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x167 (= $x150 $x63)))
 (let (($x142 (and $x167 $x144)))
 (let (($x145 (= $x142 true)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x26 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x26 (_ bv1 32))))
 (let (($x80 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x139 (= $x80 $x174)))
 (let (($x133 (= ?x26 (_ bv0 32))))
 (let (($x135 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x136 (= $x135 $x133)))
 (let (($x140 (and $x136 $x139)))
 (let (($x12 (= $x140 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x164 (concat ?x171 (concat ?x122 (concat ?x124 ?x119)))))
 (let (($x131 (= ?x164 input.dst.llvm-%l)))
 (let (($x132 (= $x131 true)))
 (let (($x166 (= $x132 true)))
 (let (($x116 (= (bvand ?x170 (_ bv4294967288 32)) ?x170)))
 (let (($x160 (= (bvand ?x49 (_ bv4294967292 32)) ?x49)))
 (let (($x114 (and $x160 $x116)))
 (let (($x102 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x169 (and true $x102)))
 (let (($x48 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x49 (bvsub ?x49 (_ bv4 32))) (bvult ?x49 (bvsub ?x49 (_ bv4 32))))))
 (let (($x121 (and (and (and $x48 $x169) $x160) $x114)))
 (let (($x125 (= true $x121)))
 (let (($x77 (not $x29)))
 (let (($x117 (=> $x77 $x125)))
 (let (($x68 (= $x117 true)))
 (let (($x54 (= $x68 true)))
 (let (($x138 (= $x54 true)))
 (let (($x128 (= input.dst.llvm-%l ?x164)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x74)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x85 $x38)))
 (let (($x22 (and $x50 $x16)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x89 $x22)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x55)))))))
 (let (($x20 (and $x57 $x31)))
 (let (($x172 (and $x20 $x128)))
 (let (($x129 (and true $x172)))
 (let (($x75 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x165 (and $x75 $x129)))
 (let (($x36 (and $x117 $x165)))
 (let (($x70 (= $x36 true)))
 (let (($x173 (= $x70 true)))
 (let (($x58 (= $x173 true)))
 (let (($x96 (= $x77 true)))
 (let (($x93 (= $x96 true)))
 (let (($x35 (= $x93 true)))
 (let (($x66 (= $x75 true)))
 (let (($x82 (= $x66 true)))
 (let (($x86 (= $x82 true)))
 (let (($x59 (= $x20 true)))
 (let (($x92 (= $x59 true)))
 (let (($x76 (= $x92 true)))
 (let (($x91 (and $x76 $x86)))
 (let (($x95 (and $x91 $x86)))
 (let (($x97 (and $x95 $x35)))
 (let (($x130 (and $x97 $x58)))
 (let (($x134 (and $x130 $x138)))
 (let (($x137 (and $x134 $x166)))
 (let (($x147 (and $x137 $x12)))
 (let (($x143 (and $x147 $x12)))
 (let (($x148 (and $x143 $x145)))
 (let (($x154 (and $x148 $x153)))
 (let (($x155 (and $x80 $x154)))
 (let (($x156 (and $x33 $x155)))
 (let (($x72 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x176 (and $x72 $x156)))
 (let (($x94 (bvugt ?x49 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x61 (=> (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x94)))))))
 (let (($x10 (=> (and $x77 (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x11 $x94)))))))
 (let (($x168 (and $x10 $x176)))
 (let (($x229 (=> $x168 $x228)))
 (not $x229))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var568X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var568X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x198 (concat ?x225 (select input.dst.llvm-mem (bvadd input.ind-%var568X (_ bv4 32))))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var568X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var568X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x212 (concat ?x200 (concat ?x213 ?x198))))
 (let (($x199 (= ?x212 ?x212)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x178 (concat ?x159 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x208 (concat ?x184 (concat ?x218 ?x178))))
 (let (($x185 (= (_ bv0 32) ?x208)))
 (let ((?x220 (ite $x185 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x220 (_ bv1 32))))
 (let (($x201 (=> $x187 $x199)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd input.ind-%var568X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var568X))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd input.ind-%var568X (_ bv2 32))) ?x211)))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.ind-%var568X (_ bv3 32))) ?x193)))
 (let (($x192 (= ?x221 ?x221)))
 (let (($x194 (=> $x187 $x192)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x139 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x140 (= ?x139 (_ bv0 32))))
 (let (($x186 (= ?x220 (_ bv0 32))))
 (let (($x188 (= $x186 $x140)))
 (let (($x147 (bvuge ?x139 (_ bv1 32))))
 (let (($x216 (= $x187 $x147)))
 (let (($x223 (and (and (=> $x186 (= false false)) (= ?x208 input.dst.llvm-%l)) $x216)))
 (let (($x236 (and (and (and $x223 $x188) $x194) $x201)))
 (let (($x179 (not true)))
 (let (($x226 (or $x179 $x236)))
 (let (($x182 (= true true)))
 (let (($x227 (and $x182 $x226)))
 (let (($x228 (= $x227 true)))
 (let (($x154 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x145 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x155 (= $x145 $x154)))
 (let (($x175 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x141 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x153 (= $x141 $x175)))
 (let (($x156 (and $x153 $x155)))
 (let (($x176 (= $x156 true)))
 (let (($x148 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x151 (= $x145 $x148)))
 (let (($x144 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x142 (= $x141 $x144)))
 (let (($x152 (and $x142 $x151)))
 (let (($x39 (= $x152 true)))
 (let (($x62 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x143 (= $x62 $x147)))
 (let (($x174 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x12 (= $x174 $x140)))
 (let (($x149 (and $x12 $x143)))
 (let (($x150 (= $x149 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x36 (concat ?x172 (concat ?x123 ?x119)))))
 (let (($x26 (= ?x70 input.dst.llvm-%l)))
 (let (($x133 (= $x26 true)))
 (let (($x136 (= $x133 true)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x162 (concat ?x104 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x30 (bvadd ?x56 (_ bv3 32))))
 (let ((?x114 (concat (select input.dst.llvm-mem ?x30) (concat ?x170 ?x162))))
 (let (($x125 (= (bvand ?x114 (_ bv4294967288 32)) ?x114)))
 (let (($x109 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x117 (and $x109 $x125)))
 (let (($x160 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x120 (and true $x160)))
 (let (($x102 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x126 (and (and (and $x102 $x120) $x109) $x117)))
 (let (($x122 (= true $x126)))
 (let (($x41 (not $x49)))
 (let (($x5 (=> $x41 $x122)))
 (let (($x166 (= $x5 true)))
 (let (($x137 (= $x166 true)))
 (let (($x88 (= $x137 true)))
 (let (($x173 (= input.dst.llvm-%l ?x70)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x59)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x16 $x31)))
 (let (($x76 (and $x20 $x92)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x46 $x76)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x53)))))))
 (let (($x90 (and $x74 $x87)))
 (let (($x58 (and $x90 $x173)))
 (let (($x130 (and true $x58)))
 (let (($x95 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x68 (and $x95 $x130)))
 (let (($x54 (and $x5 $x68)))
 (let (($x138 (= $x54 true)))
 (let (($x134 (= $x138 true)))
 (let (($x131 (= $x134 true)))
 (let (($x100 (= $x49 true)))
 (let (($x101 (= $x100 true)))
 (let (($x105 (= $x101 true)))
 (let (($x96 (= $x95 true)))
 (let (($x93 (= $x96 true)))
 (let (($x35 (= $x93 true)))
 (let (($x75 (= $x90 true)))
 (let (($x66 (= $x75 true)))
 (let (($x82 (= $x66 true)))
 (let (($x97 (and $x82 $x35)))
 (let (($x98 (and $x97 $x35)))
 (let (($x48 (and $x98 $x105)))
 (let (($x132 (and $x48 $x131)))
 (let (($x135 (and $x132 $x88)))
 (let (($x80 (and $x135 $x136)))
 (let (($x65 (and $x80 $x150)))
 (let (($x63 (and $x65 $x150)))
 (let (($x118 (and $x63 $x39)))
 (let (($x168 (and $x118 $x176)))
 (let (($x157 (and $x62 $x168)))
 (let (($x71 (= false false)))
 (let (($x205 (and $x71 $x157)))
 (let (($x81 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x158 (and $x81 $x205)))
 (let (($x25 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x72 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x25)))))))
 (let (($x37 (=> (and $x41 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x32 $x25)))))))
 (let (($x181 (and $x37 $x158)))
 (let (($x229 (=> $x181 $x228)))
 (not $x229)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var568X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var568X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x198 (concat ?x225 (select input.dst.llvm-mem (bvadd input.ind-%var568X (_ bv4 32))))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var568X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var568X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x212 (concat ?x200 (concat ?x213 ?x198))))
 (let (($x199 (= ?x212 ?x212)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x178 (concat ?x159 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x208 (concat ?x184 (concat ?x218 ?x178))))
 (let (($x185 (= (_ bv0 32) ?x208)))
 (let ((?x220 (ite $x185 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x220 (_ bv1 32))))
 (let (($x201 (=> $x187 $x199)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd input.ind-%var568X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var568X))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd input.ind-%var568X (_ bv2 32))) ?x211)))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.ind-%var568X (_ bv3 32))) ?x193)))
 (let (($x192 (= ?x221 ?x221)))
 (let (($x194 (=> $x187 $x192)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x139 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x140 (= ?x139 (_ bv0 32))))
 (let (($x186 (= ?x220 (_ bv0 32))))
 (let (($x188 (= $x186 $x140)))
 (let (($x147 (bvuge ?x139 (_ bv1 32))))
 (let (($x216 (= $x187 $x147)))
 (let (($x223 (and (and (=> $x186 (= false false)) (= ?x208 input.dst.llvm-%l)) $x216)))
 (let (($x236 (and (and (and $x223 $x188) $x194) $x201)))
 (let (($x179 (not true)))
 (let (($x226 (or $x179 $x236)))
 (let (($x182 (= true true)))
 (let (($x227 (and $x182 $x226)))
 (let (($x228 (= $x227 true)))
 (let (($x154 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x145 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x155 (= $x145 $x154)))
 (let (($x175 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x141 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x153 (= $x141 $x175)))
 (let (($x156 (and $x153 $x155)))
 (let (($x176 (= $x156 true)))
 (let (($x148 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x151 (= $x145 $x148)))
 (let (($x144 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x142 (= $x141 $x144)))
 (let (($x152 (and $x142 $x151)))
 (let (($x39 (= $x152 true)))
 (let (($x62 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x143 (= $x62 $x147)))
 (let (($x174 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x12 (= $x174 $x140)))
 (let (($x149 (and $x12 $x143)))
 (let (($x150 (= $x149 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x36 (concat ?x172 (concat ?x123 ?x119)))))
 (let (($x26 (= ?x70 input.dst.llvm-%l)))
 (let (($x133 (= $x26 true)))
 (let (($x136 (= $x133 true)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x162 (concat ?x104 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x30 (bvadd ?x56 (_ bv3 32))))
 (let ((?x114 (concat (select input.dst.llvm-mem ?x30) (concat ?x170 ?x162))))
 (let (($x125 (= (bvand ?x114 (_ bv4294967288 32)) ?x114)))
 (let (($x109 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x117 (and $x109 $x125)))
 (let (($x160 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x120 (and true $x160)))
 (let (($x102 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x126 (and (and (and $x102 $x120) $x109) $x117)))
 (let (($x122 (= true $x126)))
 (let (($x41 (not $x49)))
 (let (($x5 (=> $x41 $x122)))
 (let (($x166 (= $x5 true)))
 (let (($x137 (= $x166 true)))
 (let (($x88 (= $x137 true)))
 (let (($x173 (= input.dst.llvm-%l ?x70)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x59)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x16 $x31)))
 (let (($x76 (and $x20 $x92)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x46 $x76)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x53)))))))
 (let (($x90 (and $x74 $x87)))
 (let (($x58 (and $x90 $x173)))
 (let (($x130 (and true $x58)))
 (let (($x95 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x68 (and $x95 $x130)))
 (let (($x54 (and $x5 $x68)))
 (let (($x138 (= $x54 true)))
 (let (($x134 (= $x138 true)))
 (let (($x131 (= $x134 true)))
 (let (($x100 (= $x49 true)))
 (let (($x101 (= $x100 true)))
 (let (($x105 (= $x101 true)))
 (let (($x96 (= $x95 true)))
 (let (($x93 (= $x96 true)))
 (let (($x35 (= $x93 true)))
 (let (($x75 (= $x90 true)))
 (let (($x66 (= $x75 true)))
 (let (($x82 (= $x66 true)))
 (let (($x97 (and $x82 $x35)))
 (let (($x98 (and $x97 $x35)))
 (let (($x48 (and $x98 $x105)))
 (let (($x132 (and $x48 $x131)))
 (let (($x135 (and $x132 $x88)))
 (let (($x80 (and $x135 $x136)))
 (let (($x65 (and $x80 $x150)))
 (let (($x63 (and $x65 $x150)))
 (let (($x118 (and $x63 $x39)))
 (let (($x168 (and $x118 $x176)))
 (let (($x157 (and $x62 $x168)))
 (let (($x71 (= false false)))
 (let (($x205 (and $x71 $x157)))
 (let (($x81 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x158 (and $x81 $x205)))
 (let (($x25 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x72 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x25)))))))
 (let (($x37 (=> (and $x41 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x32 $x25)))))))
 (let (($x181 (and $x37 $x158)))
 (let (($x229 (=> $x181 $x228)))
 (not $x229)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var599X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var599X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x189 (concat ?x210 (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv4 32))))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var599X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var599X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x215 (concat ?x194 (concat ?x193 ?x189))))
 (let (($x196 (= ?x215 ?x215)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x147 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (bvuge ?x147 (_ bv1 32))))
 (let (($x202 (=> $x65 $x196)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var599X))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv2 32))) ?x203)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv3 32))) ?x223)))
 (let (($x190 (= ?x233 ?x233)))
 (let (($x191 (=> $x65 $x190)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x103 (concat ?x104 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x40 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x84 (bvadd ?x40 (_ bv3 32))))
 (let ((?x117 (concat (select input.dst.llvm-mem ?x84) (concat ?x114 ?x103))))
 (let (($x206 (= (_ bv0 32) ?x117)))
 (let ((?x159 (ite $x206 (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge ?x159 (_ bv1 32))))
 (let (($x185 (= $x65 $x208)))
 (let (($x18 (= false false)))
 (let (($x143 (= ?x147 (_ bv0 32))))
 (let (($x183 (=> $x143 $x18)))
 (let (($x213 (and (and (and (= input.dst.llvm-%l ?x117) (= $x143 (= ?x159 (_ bv0 32)))) $x183) $x185)))
 (let (($x225 (and (and $x213 $x191) $x202)))
 (let (($x207 (not true)))
 (let (($x234 (or $x207 $x225)))
 (let (($x184 (= true true)))
 (let (($x198 (and $x184 $x234)))
 (let (($x235 (= $x198 true)))
 (let (($x168 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x39 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x157 (= $x39 $x168)))
 (let (($x156 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x145 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x176 (= $x145 $x156)))
 (let (($x205 (and $x176 $x157)))
 (let (($x158 (= $x205 true)))
 (let (($x118 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x47 (= $x39 $x118)))
 (let (($x151 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x152 (= $x145 $x151)))
 (let (($x175 (and $x152 $x47)))
 (let (($x153 (= $x175 true)))
 (let (($x150 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x63 (= $x150 $x65)))
 (let (($x45 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x149 (= $x45 $x143)))
 (let (($x167 (and $x149 $x63)))
 (let (($x141 (= $x167 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x138 (concat ?x54 (concat ?x58 (concat ?x129 ?x119)))))
 (let (($x139 (= ?x138 input.dst.llvm-%l)))
 (let (($x140 (= $x139 true)))
 (let (($x12 (= $x140 true)))
 (let (($x122 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x106 (= (bvand ?x40 (_ bv4294967292 32)) ?x40)))
 (let (($x5 (and $x106 $x122)))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x171 (and true $x109)))
 (let (($x160 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x40 (bvsub ?x40 (_ bv4 32))) (bvult ?x40 (bvsub ?x40 (_ bv4 32))))))
 (let (($x128 (and (and (and $x160 $x171) $x106) $x5)))
 (let (($x172 (= true $x128)))
 (let (($x41 (not $x49)))
 (let (($x23 (=> $x41 $x172)))
 (let (($x136 (= $x23 true)))
 (let (($x80 (= $x136 true)))
 (let (($x15 (= $x80 true)))
 (let (($x134 (= input.dst.llvm-%l ?x138)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x75)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x92 $x87)))
 (let (($x82 (and $x90 $x66)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x89 $x82)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x55)))))))
 (let (($x91 (and $x59 $x86)))
 (let (($x131 (and $x91 $x134)))
 (let (($x132 (and true $x131)))
 (let (($x98 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x166 (and $x98 $x132)))
 (let (($x137 (and $x23 $x166)))
 (let (($x88 (= $x137 true)))
 (let (($x135 (= $x88 true)))
 (let (($x26 (= $x135 true)))
 (let (($x24 (= $x41 true)))
 (let (($x112 (= $x24 true)))
 (let (($x99 (= $x112 true)))
 (let (($x100 (= $x98 true)))
 (let (($x101 (= $x100 true)))
 (let (($x105 (= $x101 true)))
 (let (($x95 (= $x91 true)))
 (let (($x96 (= $x95 true)))
 (let (($x93 (= $x96 true)))
 (let (($x48 (and $x93 $x105)))
 (let (($x161 (and $x48 $x105)))
 (let (($x102 (and $x161 $x99)))
 (let (($x133 (and $x102 $x26)))
 (let (($x174 (and $x133 $x15)))
 (let (($x62 (and $x174 $x12)))
 (let (($x146 (and $x62 $x141)))
 (let (($x144 (and $x146 $x141)))
 (let (($x154 (and $x144 $x153)))
 (let (($x181 (and $x154 $x158)))
 (let (($x182 (and $x45 $x181)))
 (let (($x179 (and $x18 $x182)))
 (let (($x69 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x180 (and $x69 $x179)))
 (let (($x10 (bvugt ?x40 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x81 (=> (bvule ?x40 (bvsub (bvadd ?x40 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x10)))))))
 (let (($x51 (=> (and $x41 (bvule ?x40 (bvsub (bvadd ?x40 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x61 $x10)))))))
 (let (($x219 (and $x51 $x180)))
 (let (($x212 (=> $x219 $x235)))
 (not $x212)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var599X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var599X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x189 (concat ?x210 (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv4 32))))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var599X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var599X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x215 (concat ?x194 (concat ?x193 ?x189))))
 (let (($x196 (= ?x215 ?x215)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x147 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (bvuge ?x147 (_ bv1 32))))
 (let (($x202 (=> $x65 $x196)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var599X))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv2 32))) ?x203)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv3 32))) ?x223)))
 (let (($x190 (= ?x233 ?x233)))
 (let (($x191 (=> $x65 $x190)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x103 (concat ?x104 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x40 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x84 (bvadd ?x40 (_ bv3 32))))
 (let ((?x117 (concat (select input.dst.llvm-mem ?x84) (concat ?x114 ?x103))))
 (let (($x206 (= (_ bv0 32) ?x117)))
 (let ((?x159 (ite $x206 (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge ?x159 (_ bv1 32))))
 (let (($x185 (= $x65 $x208)))
 (let (($x18 (= false false)))
 (let (($x143 (= ?x147 (_ bv0 32))))
 (let (($x183 (=> $x143 $x18)))
 (let (($x213 (and (and (and (= input.dst.llvm-%l ?x117) (= $x143 (= ?x159 (_ bv0 32)))) $x183) $x185)))
 (let (($x225 (and (and $x213 $x191) $x202)))
 (let (($x207 (not true)))
 (let (($x234 (or $x207 $x225)))
 (let (($x184 (= true true)))
 (let (($x198 (and $x184 $x234)))
 (let (($x235 (= $x198 true)))
 (let (($x168 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x39 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x157 (= $x39 $x168)))
 (let (($x156 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x145 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x176 (= $x145 $x156)))
 (let (($x205 (and $x176 $x157)))
 (let (($x158 (= $x205 true)))
 (let (($x118 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x47 (= $x39 $x118)))
 (let (($x151 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x152 (= $x145 $x151)))
 (let (($x175 (and $x152 $x47)))
 (let (($x153 (= $x175 true)))
 (let (($x150 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x63 (= $x150 $x65)))
 (let (($x45 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x149 (= $x45 $x143)))
 (let (($x167 (and $x149 $x63)))
 (let (($x141 (= $x167 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x138 (concat ?x54 (concat ?x58 (concat ?x129 ?x119)))))
 (let (($x139 (= ?x138 input.dst.llvm-%l)))
 (let (($x140 (= $x139 true)))
 (let (($x12 (= $x140 true)))
 (let (($x122 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x106 (= (bvand ?x40 (_ bv4294967292 32)) ?x40)))
 (let (($x5 (and $x106 $x122)))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x171 (and true $x109)))
 (let (($x160 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x40 (bvsub ?x40 (_ bv4 32))) (bvult ?x40 (bvsub ?x40 (_ bv4 32))))))
 (let (($x128 (and (and (and $x160 $x171) $x106) $x5)))
 (let (($x172 (= true $x128)))
 (let (($x41 (not $x49)))
 (let (($x23 (=> $x41 $x172)))
 (let (($x136 (= $x23 true)))
 (let (($x80 (= $x136 true)))
 (let (($x15 (= $x80 true)))
 (let (($x134 (= input.dst.llvm-%l ?x138)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x75)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x92 $x87)))
 (let (($x82 (and $x90 $x66)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x89 $x82)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x55)))))))
 (let (($x91 (and $x59 $x86)))
 (let (($x131 (and $x91 $x134)))
 (let (($x132 (and true $x131)))
 (let (($x98 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x166 (and $x98 $x132)))
 (let (($x137 (and $x23 $x166)))
 (let (($x88 (= $x137 true)))
 (let (($x135 (= $x88 true)))
 (let (($x26 (= $x135 true)))
 (let (($x24 (= $x41 true)))
 (let (($x112 (= $x24 true)))
 (let (($x99 (= $x112 true)))
 (let (($x100 (= $x98 true)))
 (let (($x101 (= $x100 true)))
 (let (($x105 (= $x101 true)))
 (let (($x95 (= $x91 true)))
 (let (($x96 (= $x95 true)))
 (let (($x93 (= $x96 true)))
 (let (($x48 (and $x93 $x105)))
 (let (($x161 (and $x48 $x105)))
 (let (($x102 (and $x161 $x99)))
 (let (($x133 (and $x102 $x26)))
 (let (($x174 (and $x133 $x15)))
 (let (($x62 (and $x174 $x12)))
 (let (($x146 (and $x62 $x141)))
 (let (($x144 (and $x146 $x141)))
 (let (($x154 (and $x144 $x153)))
 (let (($x181 (and $x154 $x158)))
 (let (($x182 (and $x45 $x181)))
 (let (($x179 (and $x18 $x182)))
 (let (($x69 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x180 (and $x69 $x179)))
 (let (($x10 (bvugt ?x40 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x81 (=> (bvule ?x40 (bvsub (bvadd ?x40 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x10)))))))
 (let (($x51 (=> (and $x41 (bvule ?x40 (bvsub (bvadd ?x40 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x61 $x10)))))))
 (let (($x219 (and $x51 $x180)))
 (let (($x212 (=> $x219 $x235)))
 (not $x212)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x41 (not $x49)))
 (let (($x130 (or $x49 $x41)))
 (let (($x138 (= $x130 true)))
 (let (($x134 (= $x138 true)))
 (let (($x68 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x103 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x54 (= $x103 $x68)))
 (let (($x172 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x114 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x23 (= $x114 $x172)))
 (let (($x173 (and $x23 $x54)))
 (let (($x58 (= $x173 true)))
 (let (($x121 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x117 (= $x103 $x121)))
 (let (($x104 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x170 (= $x114 $x104)))
 (let (($x126 (and $x170 $x117)))
 (let (($x122 (= $x126 true)))
 (let ((?x171 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x171 (_ bv1 32))))
 (let (($x116 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x36 (= $x116 $x106)))
 (let (($x165 (= ?x171 (_ bv0 32))))
 (let (($x109 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x108 (= $x109 $x165)))
 (let (($x115 (and $x108 $x36)))
 (let (($x125 (= $x115 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x110 (concat ?x102 (concat ?x161 ?x105)))))
 (let (($x160 (= ?x111 input.dst.llvm-%l)))
 (let (($x127 (= $x160 true)))
 (let (($x120 (= $x127 true)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x86)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x90 $x66)))
 (let (($x95 (and $x82 $x91)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x74 $x95)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x31)))))))
 (let (($x93 (and $x87 $x96)))
 (let (($x35 (= $x93 true)))
 (let (($x97 (= $x35 true)))
 (let (($x98 (= $x97 true)))
 (let (($x27 (and $x98 $x120)))
 (let (($x162 (and $x27 $x125)))
 (let (($x5 (and $x162 $x122)))
 (let (($x164 (and $x5 $x58)))
 (let (($x42 (= false false)))
 (let (($x129 (and $x42 $x164)))
 (let (($x85 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x119 (and $x85 $x129)))
 (let ((?x11 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x37 (bvugt ?x11 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x11 (_ bv3 32)))))
 (let (($x69 (=> (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x37)))))))
 (let (($x30 (=> (and $x41 (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x72 $x37)))))))
 (let (($x70 (and $x30 $x119)))
 (let (($x131 (=> $x70 $x134)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x41 (not $x49)))
 (let (($x130 (or $x49 $x41)))
 (let (($x138 (= $x130 true)))
 (let (($x134 (= $x138 true)))
 (let (($x68 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x103 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x54 (= $x103 $x68)))
 (let (($x172 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x114 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x23 (= $x114 $x172)))
 (let (($x173 (and $x23 $x54)))
 (let (($x58 (= $x173 true)))
 (let (($x121 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x117 (= $x103 $x121)))
 (let (($x104 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x170 (= $x114 $x104)))
 (let (($x126 (and $x170 $x117)))
 (let (($x122 (= $x126 true)))
 (let ((?x171 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x171 (_ bv1 32))))
 (let (($x116 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x36 (= $x116 $x106)))
 (let (($x165 (= ?x171 (_ bv0 32))))
 (let (($x109 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x108 (= $x109 $x165)))
 (let (($x115 (and $x108 $x36)))
 (let (($x125 (= $x115 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x110 (concat ?x102 (concat ?x161 ?x105)))))
 (let (($x160 (= ?x111 input.dst.llvm-%l)))
 (let (($x127 (= $x160 true)))
 (let (($x120 (= $x127 true)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x86)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x90 $x66)))
 (let (($x95 (and $x82 $x91)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x74 $x95)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x31)))))))
 (let (($x93 (and $x87 $x96)))
 (let (($x35 (= $x93 true)))
 (let (($x97 (= $x35 true)))
 (let (($x98 (= $x97 true)))
 (let (($x27 (and $x98 $x120)))
 (let (($x162 (and $x27 $x125)))
 (let (($x5 (and $x162 $x122)))
 (let (($x164 (and $x5 $x58)))
 (let (($x42 (= false false)))
 (let (($x129 (and $x42 $x164)))
 (let (($x85 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x119 (and $x85 $x129)))
 (let ((?x11 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x37 (bvugt ?x11 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x11 (_ bv3 32)))))
 (let (($x69 (=> (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x37)))))))
 (let (($x30 (=> (and $x41 (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x72 $x37)))))))
 (let (($x70 (and $x30 $x119)))
 (let (($x131 (=> $x70 $x134)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var666X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var666X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x60 (concat ?x199 (select input.dst.llvm-mem (bvadd input.ind-%var666X (_ bv4 32))))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var666X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var666X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x226 (concat ?x236 (concat ?x57 ?x60))))
 (let (($x227 (= ?x226 ?x226)))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x208 (concat ?x204 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x187 (concat ?x214 (concat ?x213 ?x208))))
 (let (($x209 (= (_ bv0 32) ?x187)))
 (let ((?x224 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x197 (bvuge ?x224 (_ bv1 32))))
 (let (($x228 (=> $x197 $x227)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd input.ind-%var666X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var666X))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.ind-%var666X (_ bv2 32))) ?x210)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.ind-%var666X (_ bv3 32))) ?x221)))
 (let (($x225 (= ?x202 ?x202)))
 (let (($x234 (=> $x197 $x225)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x126 (concat ?x117 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x32 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x73 (bvadd ?x32 (_ bv3 32))))
 (let ((?x68 (concat (select input.dst.llvm-mem ?x73) (concat ?x128 ?x126))))
 (let (($x203 (= (_ bv0 32) ?x68)))
 (let ((?x223 (ite $x203 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x223 (_ bv1 32))))
 (let (($x192 (= $x197 $x195)))
 (let (($x46 (= false false)))
 (let (($x186 (= ?x224 (_ bv0 32))))
 (let (($x191 (=> $x186 $x46)))
 (let (($x29 (and (and (and (and (= ?x187 ?x68) (= $x186 (= ?x223 (_ bv0 32)))) $x191) $x192) $x234)))
 (let (($x78 (and $x29 $x228)))
 (let (($x177 (not true)))
 (let (($x124 (or $x177 $x78)))
 (let (($x159 (= true true)))
 (let (($x9 (and $x159 $x124)))
 (let (($x43 (= $x9 true)))
 (let (($x181 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x153 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x182 (= $x153 $x181)))
 (let (($x205 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x39 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x158 (= $x39 $x205)))
 (let (($x179 (and $x158 $x182)))
 (let (($x180 (= $x179 true)))
 (let (($x154 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x155 (= $x153 $x154)))
 (let (($x47 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x175 (= $x39 $x47)))
 (let (($x156 (and $x175 $x155)))
 (let (($x176 (= $x156 true)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x63 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x146 (bvuge ?x63 (_ bv1 32))))
 (let (($x16 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x144 (= $x16 $x146)))
 (let (($x167 (= ?x63 (_ bv0 32))))
 (let (($x65 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x141 (= $x65 $x167)))
 (let (($x142 (and $x141 $x144)))
 (let (($x145 (= $x142 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x137 (concat ?x101 (concat ?x132 ?x134)))))
 (let (($x147 (= ?x88 input.dst.llvm-%l)))
 (let (($x143 (= $x147 true)))
 (let (($x149 (= $x143 true)))
 (let (($x173 (= (bvand ?x68 (_ bv4294967288 32)) ?x68)))
 (let (($x104 (= (bvand ?x32 (_ bv4294967292 32)) ?x32)))
 (let (($x58 (and $x104 $x173)))
 (let (($x162 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x113 (and true $x162)))
 (let (($x116 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x32 (bvsub ?x32 (_ bv4 32))) (bvult ?x32 (bvsub ?x32 (_ bv4 32))))))
 (let (($x119 (and (and (and $x116 $x113) $x104) $x58)))
 (let (($x70 (= true $x119)))
 (let (($x41 (not $x49)))
 (let (($x130 (=> $x41 $x70)))
 (let (($x12 (= $x130 true)))
 (let (($x62 (= $x12 true)))
 (let (($x50 (= $x62 true)))
 (let (($x135 (= input.dst.llvm-%l ?x88)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x35)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x91 $x96)))
 (let (($x98 (and $x93 $x97)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x59 $x98)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x38)))))))
 (let (($x64 (and $x86 $x100)))
 (let (($x26 (and $x64 $x135)))
 (let (($x133 (and true $x26)))
 (let (($x161 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x136 (and $x161 $x133)))
 (let (($x80 (and $x130 $x136)))
 (let (($x15 (= $x80 true)))
 (let (($x174 (= $x15 true)))
 (let (($x139 (= $x174 true)))
 (let (($x127 (= $x41 true)))
 (let (($x120 (= $x127 true)))
 (let (($x27 (= $x120 true)))
 (let (($x105 (= $x161 true)))
 (let (($x24 (= $x105 true)))
 (let (($x169 (= $x24 true)))
 (let (($x110 (= $x64 true)))
 (let (($x112 (= $x110 true)))
 (let (($x99 (= $x112 true)))
 (let (($x111 (and $x99 $x169)))
 (let (($x160 (and $x111 $x169)))
 (let (($x163 (and $x160 $x27)))
 (let (($x140 (and $x163 $x139)))
 (let (($x45 (and $x140 $x50)))
 (let (($x150 (and $x45 $x149)))
 (let (($x148 (and $x150 $x145)))
 (let (($x151 (and $x148 $x145)))
 (let (($x168 (and $x151 $x176)))
 (let (($x219 (and $x168 $x180)))
 (let (($x184 (and $x16 $x219)))
 (let (($x207 (and $x46 $x184)))
 (let (($x55 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x218 (and $x55 $x207)))
 (let (($x51 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x85 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x51)))))))
 (let (($x84 (=> (and $x41 (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x81 $x51)))))))
 (let (($x206 (and $x84 $x218)))
 (let (($x28 (=> $x206 $x43)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var666X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var666X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x60 (concat ?x199 (select input.dst.llvm-mem (bvadd input.ind-%var666X (_ bv4 32))))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var666X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var666X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x226 (concat ?x236 (concat ?x57 ?x60))))
 (let (($x227 (= ?x226 ?x226)))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x208 (concat ?x204 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x187 (concat ?x214 (concat ?x213 ?x208))))
 (let (($x209 (= (_ bv0 32) ?x187)))
 (let ((?x224 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x197 (bvuge ?x224 (_ bv1 32))))
 (let (($x228 (=> $x197 $x227)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd input.ind-%var666X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var666X))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.ind-%var666X (_ bv2 32))) ?x210)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.ind-%var666X (_ bv3 32))) ?x221)))
 (let (($x225 (= ?x202 ?x202)))
 (let (($x234 (=> $x197 $x225)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x126 (concat ?x117 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x32 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x73 (bvadd ?x32 (_ bv3 32))))
 (let ((?x68 (concat (select input.dst.llvm-mem ?x73) (concat ?x128 ?x126))))
 (let (($x203 (= (_ bv0 32) ?x68)))
 (let ((?x223 (ite $x203 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x223 (_ bv1 32))))
 (let (($x192 (= $x197 $x195)))
 (let (($x46 (= false false)))
 (let (($x186 (= ?x224 (_ bv0 32))))
 (let (($x191 (=> $x186 $x46)))
 (let (($x29 (and (and (and (and (= ?x187 ?x68) (= $x186 (= ?x223 (_ bv0 32)))) $x191) $x192) $x234)))
 (let (($x78 (and $x29 $x228)))
 (let (($x177 (not true)))
 (let (($x124 (or $x177 $x78)))
 (let (($x159 (= true true)))
 (let (($x9 (and $x159 $x124)))
 (let (($x43 (= $x9 true)))
 (let (($x181 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x153 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x182 (= $x153 $x181)))
 (let (($x205 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x39 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x158 (= $x39 $x205)))
 (let (($x179 (and $x158 $x182)))
 (let (($x180 (= $x179 true)))
 (let (($x154 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x155 (= $x153 $x154)))
 (let (($x47 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x175 (= $x39 $x47)))
 (let (($x156 (and $x175 $x155)))
 (let (($x176 (= $x156 true)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x63 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x146 (bvuge ?x63 (_ bv1 32))))
 (let (($x16 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x144 (= $x16 $x146)))
 (let (($x167 (= ?x63 (_ bv0 32))))
 (let (($x65 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x141 (= $x65 $x167)))
 (let (($x142 (and $x141 $x144)))
 (let (($x145 (= $x142 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x137 (concat ?x101 (concat ?x132 ?x134)))))
 (let (($x147 (= ?x88 input.dst.llvm-%l)))
 (let (($x143 (= $x147 true)))
 (let (($x149 (= $x143 true)))
 (let (($x173 (= (bvand ?x68 (_ bv4294967288 32)) ?x68)))
 (let (($x104 (= (bvand ?x32 (_ bv4294967292 32)) ?x32)))
 (let (($x58 (and $x104 $x173)))
 (let (($x162 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x113 (and true $x162)))
 (let (($x116 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x32 (bvsub ?x32 (_ bv4 32))) (bvult ?x32 (bvsub ?x32 (_ bv4 32))))))
 (let (($x119 (and (and (and $x116 $x113) $x104) $x58)))
 (let (($x70 (= true $x119)))
 (let (($x41 (not $x49)))
 (let (($x130 (=> $x41 $x70)))
 (let (($x12 (= $x130 true)))
 (let (($x62 (= $x12 true)))
 (let (($x50 (= $x62 true)))
 (let (($x135 (= input.dst.llvm-%l ?x88)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x35)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x91 $x96)))
 (let (($x98 (and $x93 $x97)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x59 $x98)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x38)))))))
 (let (($x64 (and $x86 $x100)))
 (let (($x26 (and $x64 $x135)))
 (let (($x133 (and true $x26)))
 (let (($x161 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x136 (and $x161 $x133)))
 (let (($x80 (and $x130 $x136)))
 (let (($x15 (= $x80 true)))
 (let (($x174 (= $x15 true)))
 (let (($x139 (= $x174 true)))
 (let (($x127 (= $x41 true)))
 (let (($x120 (= $x127 true)))
 (let (($x27 (= $x120 true)))
 (let (($x105 (= $x161 true)))
 (let (($x24 (= $x105 true)))
 (let (($x169 (= $x24 true)))
 (let (($x110 (= $x64 true)))
 (let (($x112 (= $x110 true)))
 (let (($x99 (= $x112 true)))
 (let (($x111 (and $x99 $x169)))
 (let (($x160 (and $x111 $x169)))
 (let (($x163 (and $x160 $x27)))
 (let (($x140 (and $x163 $x139)))
 (let (($x45 (and $x140 $x50)))
 (let (($x150 (and $x45 $x149)))
 (let (($x148 (and $x150 $x145)))
 (let (($x151 (and $x148 $x145)))
 (let (($x168 (and $x151 $x176)))
 (let (($x219 (and $x168 $x180)))
 (let (($x184 (and $x16 $x219)))
 (let (($x207 (and $x46 $x184)))
 (let (($x55 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x218 (and $x55 $x207)))
 (let (($x51 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x85 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x51)))))))
 (let (($x84 (=> (and $x41 (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x81 $x51)))))))
 (let (($x206 (and $x84 $x218)))
 (let (($x28 (=> $x206 $x43)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var695X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let ((?x29 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var695X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x198 (concat ?x29 (select input.dst.llvm-mem (bvadd input.ind-%var695X (_ bv4 32))))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var695X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var695X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x199 (concat ?x212 (concat ?x236 ?x198))))
 (let (($x235 (= ?x199 ?x199)))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x208 (concat ?x200 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x186 (concat ?x224 (concat ?x187 ?x208))))
 (let (($x203 (= (_ bv0 32) ?x186)))
 (let ((?x223 (ite $x203 (_ bv0 32) (_ bv1 32))))
 (let (($x191 (bvuge ?x223 (_ bv1 32))))
 (let (($x60 (=> $x191 $x235)))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd input.ind-%var695X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var695X))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd input.ind-%var695X (_ bv2 32))) ?x215)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd input.ind-%var695X (_ bv3 32))) ?x189)))
 (let (($x210 (= ?x211 ?x211)))
 (let (($x221 (=> $x191 $x210)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x144 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x142 (= ?x144 (_ bv0 32))))
 (let (($x233 (= ?x223 (_ bv0 32))))
 (let (($x197 (= $x233 $x142)))
 (let (($x148 (bvuge ?x144 (_ bv1 32))))
 (let (($x237 (= $x191 $x148)))
 (let (($x226 (and (and (=> $x233 (= false false)) (= ?x186 input.dst.llvm-%l)) $x237)))
 (let (($x78 (and (and (and $x226 $x197) $x221) $x60)))
 (let (($x185 (not true)))
 (let (($x124 (or $x185 $x78)))
 (let (($x214 (= true true)))
 (let (($x9 (and $x214 $x124)))
 (let (($x43 (= $x9 true)))
 (let (($x219 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x176 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x184 (= $x176 $x219)))
 (let (($x179 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x153 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x180 (= $x153 $x179)))
 (let (($x207 (and $x180 $x184)))
 (let (($x218 (= $x207 true)))
 (let (($x168 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x157 (= $x176 $x168)))
 (let (($x155 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x156 (= $x153 $x155)))
 (let (($x205 (and $x156 $x157)))
 (let (($x158 (= $x205 true)))
 (let (($x92 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x151 (= $x92 $x148)))
 (let (($x146 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x145 (= $x146 $x142)))
 (let (($x152 (and $x145 $x151)))
 (let (($x39 (= $x152 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x80 (concat ?x26 (concat ?x94 ?x134)))))
 (let (($x63 (= ?x15 input.dst.llvm-%l)))
 (let (($x167 (= $x63 true)))
 (let (($x141 (= $x167 true)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x103 (concat ?x117 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x61 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x34 (bvadd ?x61 (_ bv3 32))))
 (let ((?x58 (concat (select input.dst.llvm-mem ?x34) (concat ?x68 ?x103))))
 (let (($x70 (= (bvand ?x58 (_ bv4294967288 32)) ?x58)))
 (let (($x122 (= (bvand ?x61 (_ bv4294967292 32)) ?x61)))
 (let (($x130 (and $x122 $x70)))
 (let (($x104 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x129 (and true $x104)))
 (let (($x162 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x61 (bvsub ?x61 (_ bv4 32))) (bvult ?x61 (bvsub ?x61 (_ bv4 32))))))
 (let (($x20 (and (and (and $x162 $x129) $x122) $x130)))
 (let (($x101 (= true $x20)))
 (let (($x41 (not $x49)))
 (let (($x131 (=> $x41 $x101)))
 (let (($x149 (= $x131 true)))
 (let (($x150 (= $x149 true)))
 (let (($x76 (= $x150 true)))
 (let (($x174 (= input.dst.llvm-%l ?x15)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x110)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x97 $x100)))
 (let (($x99 (and $x64 $x112)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x74 $x99)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x31)))))))
 (let (($x48 (and $x35 $x102)))
 (let (($x139 (and $x48 $x174)))
 (let (($x140 (and true $x139)))
 (let (($x160 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x12 (and $x160 $x140)))
 (let (($x62 (and $x131 $x12)))
 (let (($x50 (= $x62 true)))
 (let (($x45 (= $x50 true)))
 (let (($x147 (= $x45 true)))
 (let (($x109 (= $x49 true)))
 (let (($x165 (= $x109 true)))
 (let (($x108 (= $x165 true)))
 (let (($x127 (= $x160 true)))
 (let (($x120 (= $x127 true)))
 (let (($x27 (= $x120 true)))
 (let (($x161 (= $x48 true)))
 (let (($x105 (= $x161 true)))
 (let (($x24 (= $x105 true)))
 (let (($x163 (and $x24 $x27)))
 (let (($x171 (and $x163 $x27)))
 (let (($x116 (and $x171 $x108)))
 (let (($x143 (and $x116 $x147)))
 (let (($x65 (and $x143 $x76)))
 (let (($x16 (and $x65 $x141)))
 (let (($x118 (and $x16 $x39)))
 (let (($x47 (and $x118 $x39)))
 (let (($x181 (and $x47 $x158)))
 (let (($x206 (and $x181 $x218)))
 (let (($x159 (and $x92 $x206)))
 (let (($x89 (= false false)))
 (let (($x177 (and $x89 $x159)))
 (let (($x53 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x178 (and $x53 $x177)))
 (let (($x30 (bvugt ?x61 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x55 (=> (bvule ?x61 (bvsub (bvadd ?x61 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x30)))))))
 (let (($x52 (=> (and $x41 (bvule ?x61 (bvsub (bvadd ?x61 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x69 $x30)))))))
 (let (($x188 (and $x52 $x178)))
 (let (($x28 (=> $x188 $x43)))
 (not $x28)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var695X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let ((?x29 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var695X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x198 (concat ?x29 (select input.dst.llvm-mem (bvadd input.ind-%var695X (_ bv4 32))))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var695X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var695X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x199 (concat ?x212 (concat ?x236 ?x198))))
 (let (($x235 (= ?x199 ?x199)))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x208 (concat ?x200 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x186 (concat ?x224 (concat ?x187 ?x208))))
 (let (($x203 (= (_ bv0 32) ?x186)))
 (let ((?x223 (ite $x203 (_ bv0 32) (_ bv1 32))))
 (let (($x191 (bvuge ?x223 (_ bv1 32))))
 (let (($x60 (=> $x191 $x235)))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd input.ind-%var695X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var695X))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd input.ind-%var695X (_ bv2 32))) ?x215)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd input.ind-%var695X (_ bv3 32))) ?x189)))
 (let (($x210 (= ?x211 ?x211)))
 (let (($x221 (=> $x191 $x210)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x144 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x142 (= ?x144 (_ bv0 32))))
 (let (($x233 (= ?x223 (_ bv0 32))))
 (let (($x197 (= $x233 $x142)))
 (let (($x148 (bvuge ?x144 (_ bv1 32))))
 (let (($x237 (= $x191 $x148)))
 (let (($x226 (and (and (=> $x233 (= false false)) (= ?x186 input.dst.llvm-%l)) $x237)))
 (let (($x78 (and (and (and $x226 $x197) $x221) $x60)))
 (let (($x185 (not true)))
 (let (($x124 (or $x185 $x78)))
 (let (($x214 (= true true)))
 (let (($x9 (and $x214 $x124)))
 (let (($x43 (= $x9 true)))
 (let (($x219 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x176 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x184 (= $x176 $x219)))
 (let (($x179 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x153 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x180 (= $x153 $x179)))
 (let (($x207 (and $x180 $x184)))
 (let (($x218 (= $x207 true)))
 (let (($x168 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x157 (= $x176 $x168)))
 (let (($x155 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x156 (= $x153 $x155)))
 (let (($x205 (and $x156 $x157)))
 (let (($x158 (= $x205 true)))
 (let (($x92 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x151 (= $x92 $x148)))
 (let (($x146 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x145 (= $x146 $x142)))
 (let (($x152 (and $x145 $x151)))
 (let (($x39 (= $x152 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x80 (concat ?x26 (concat ?x94 ?x134)))))
 (let (($x63 (= ?x15 input.dst.llvm-%l)))
 (let (($x167 (= $x63 true)))
 (let (($x141 (= $x167 true)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x103 (concat ?x117 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x61 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x34 (bvadd ?x61 (_ bv3 32))))
 (let ((?x58 (concat (select input.dst.llvm-mem ?x34) (concat ?x68 ?x103))))
 (let (($x70 (= (bvand ?x58 (_ bv4294967288 32)) ?x58)))
 (let (($x122 (= (bvand ?x61 (_ bv4294967292 32)) ?x61)))
 (let (($x130 (and $x122 $x70)))
 (let (($x104 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x129 (and true $x104)))
 (let (($x162 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x61 (bvsub ?x61 (_ bv4 32))) (bvult ?x61 (bvsub ?x61 (_ bv4 32))))))
 (let (($x20 (and (and (and $x162 $x129) $x122) $x130)))
 (let (($x101 (= true $x20)))
 (let (($x41 (not $x49)))
 (let (($x131 (=> $x41 $x101)))
 (let (($x149 (= $x131 true)))
 (let (($x150 (= $x149 true)))
 (let (($x76 (= $x150 true)))
 (let (($x174 (= input.dst.llvm-%l ?x15)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x110)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x97 $x100)))
 (let (($x99 (and $x64 $x112)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x74 $x99)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x31)))))))
 (let (($x48 (and $x35 $x102)))
 (let (($x139 (and $x48 $x174)))
 (let (($x140 (and true $x139)))
 (let (($x160 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x12 (and $x160 $x140)))
 (let (($x62 (and $x131 $x12)))
 (let (($x50 (= $x62 true)))
 (let (($x45 (= $x50 true)))
 (let (($x147 (= $x45 true)))
 (let (($x109 (= $x49 true)))
 (let (($x165 (= $x109 true)))
 (let (($x108 (= $x165 true)))
 (let (($x127 (= $x160 true)))
 (let (($x120 (= $x127 true)))
 (let (($x27 (= $x120 true)))
 (let (($x161 (= $x48 true)))
 (let (($x105 (= $x161 true)))
 (let (($x24 (= $x105 true)))
 (let (($x163 (and $x24 $x27)))
 (let (($x171 (and $x163 $x27)))
 (let (($x116 (and $x171 $x108)))
 (let (($x143 (and $x116 $x147)))
 (let (($x65 (and $x143 $x76)))
 (let (($x16 (and $x65 $x141)))
 (let (($x118 (and $x16 $x39)))
 (let (($x47 (and $x118 $x39)))
 (let (($x181 (and $x47 $x158)))
 (let (($x206 (and $x181 $x218)))
 (let (($x159 (and $x92 $x206)))
 (let (($x89 (= false false)))
 (let (($x177 (and $x89 $x159)))
 (let (($x53 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x178 (and $x53 $x177)))
 (let (($x30 (bvugt ?x61 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x55 (=> (bvule ?x61 (bvsub (bvadd ?x61 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x30)))))))
 (let (($x52 (=> (and $x41 (bvule ?x61 (bvsub (bvadd ?x61 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x69 $x30)))))))
 (let (($x188 (and $x52 $x178)))
 (let (($x28 (=> $x188 $x43)))
 (not $x28)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var724X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var724X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x192 (concat ?x194 (select input.dst.llvm-mem (bvadd input.ind-%var724X (_ bv4 32))))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var724X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var724X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x228 (concat ?x221 (concat ?x189 ?x192))))
 (let (($x202 (= ?x228 ?x228)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x148 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x148 (_ bv1 32))))
 (let (($x57 (=> $x118 $x202)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd input.ind-%var724X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var724X))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd input.ind-%var724X (_ bv2 32))) ?x123)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd input.ind-%var724X (_ bv3 32))) ?x226)))
 (let (($x193 (= ?x195 ?x195)))
 (let (($x217 (=> $x118 $x193)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x128 (concat ?x117 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x72 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x33 (bvadd ?x72 (_ bv3 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem ?x33) (concat ?x58 ?x128))))
 (let (($x204 (= (_ bv0 32) ?x130)))
 (let ((?x200 (ite $x204 (_ bv0 32) (_ bv1 32))))
 (let (($x186 (bvuge ?x200 (_ bv1 32))))
 (let (($x203 (= $x118 $x186)))
 (let (($x75 (= false false)))
 (let (($x151 (= ?x148 (_ bv0 32))))
 (let (($x216 (=> $x151 $x75)))
 (let (($x236 (and (and (and (= input.dst.llvm-%l ?x130) (= $x151 (= ?x200 (_ bv0 32)))) $x216) $x203)))
 (let (($x29 (and (and $x236 $x217) $x57)))
 (let (($x220 (not true)))
 (let (($x225 (or $x220 $x29)))
 (let (($x224 (= true true)))
 (let (($x198 (and $x224 $x225)))
 (let (($x77 (= $x198 true)))
 (let (($x206 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x158 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x159 (= $x158 $x206)))
 (let (($x207 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x176 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x218 (= $x176 $x207)))
 (let (($x177 (and $x218 $x159)))
 (let (($x178 (= $x177 true)))
 (let (($x181 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x182 (= $x158 $x181)))
 (let (($x157 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x205 (= $x176 $x157)))
 (let (($x179 (and $x205 $x182)))
 (let (($x180 (= $x179 true)))
 (let (($x39 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x47 (= $x39 $x118)))
 (let (($x66 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x152 (= $x66 $x151)))
 (let (($x175 (and $x152 $x47)))
 (let (($x153 (= $x175 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x62 (concat ?x139 (concat ?x133 ?x134)))))
 (let (($x144 (= ?x50 input.dst.llvm-%l)))
 (let (($x142 (= $x144 true)))
 (let (($x145 (= $x142 true)))
 (let (($x101 (= (bvand ?x130 (_ bv4294967288 32)) ?x130)))
 (let (($x126 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x131 (and $x126 $x101)))
 (let (($x122 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x137 (and true $x122)))
 (let (($x104 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x72 (bvsub ?x72 (_ bv4 32))) (bvult ?x72 (bvsub ?x72 (_ bv4 32))))))
 (let (($x135 (and (and (and $x104 $x137) $x126) $x131)))
 (let (($x26 (= true $x135)))
 (let (($x41 (not $x49)))
 (let (($x56 (=> $x41 $x26)))
 (let (($x141 (= $x56 true)))
 (let (($x16 (= $x141 true)))
 (let (($x82 (= $x16 true)))
 (let (($x45 (= input.dst.llvm-%l ?x50)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x161)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x112 $x102)))
 (let (($x24 (and $x48 $x105)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x59 $x24)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x38)))))))
 (let (($x111 (and $x110 $x169)))
 (let (($x147 (and $x111 $x45)))
 (let (($x143 (and true $x147)))
 (let (($x171 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x149 (and $x171 $x143)))
 (let (($x150 (and $x56 $x149)))
 (let (($x76 (= $x150 true)))
 (let (($x65 (= $x76 true)))
 (let (($x63 (= $x65 true)))
 (let (($x36 (= $x41 true)))
 (let (($x115 (= $x36 true)))
 (let (($x125 (= $x115 true)))
 (let (($x109 (= $x171 true)))
 (let (($x165 (= $x109 true)))
 (let (($x108 (= $x165 true)))
 (let (($x160 (= $x111 true)))
 (let (($x127 (= $x160 true)))
 (let (($x120 (= $x127 true)))
 (let (($x116 (and $x120 $x108)))
 (let (($x106 (and $x116 $x108)))
 (let (($x162 (and $x106 $x125)))
 (let (($x167 (and $x162 $x63)))
 (let (($x146 (and $x167 $x82)))
 (let (($x92 (and $x146 $x145)))
 (let (($x154 (and $x92 $x153)))
 (let (($x155 (and $x154 $x153)))
 (let (($x219 (and $x155 $x180)))
 (let (($x188 (and $x219 $x178)))
 (let (($x214 (and $x66 $x188)))
 (let (($x185 (and $x75 $x214)))
 (let (($x90 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x213 (and $x90 $x185)))
 (let (($x84 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x53 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x84)))))))
 (let (($x73 (=> (and $x41 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x85 $x84)))))))
 (let (($x209 (and $x73 $x213)))
 (let (($x199 (=> $x209 $x77)))
 (not $x199)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var724X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(assert
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var724X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x192 (concat ?x194 (select input.dst.llvm-mem (bvadd input.ind-%var724X (_ bv4 32))))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var724X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var724X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x228 (concat ?x221 (concat ?x189 ?x192))))
 (let (($x202 (= ?x228 ?x228)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x148 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x148 (_ bv1 32))))
 (let (($x57 (=> $x118 $x202)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd input.ind-%var724X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var724X))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd input.ind-%var724X (_ bv2 32))) ?x123)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd input.ind-%var724X (_ bv3 32))) ?x226)))
 (let (($x193 (= ?x195 ?x195)))
 (let (($x217 (=> $x118 $x193)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x128 (concat ?x117 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x72 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x33 (bvadd ?x72 (_ bv3 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem ?x33) (concat ?x58 ?x128))))
 (let (($x204 (= (_ bv0 32) ?x130)))
 (let ((?x200 (ite $x204 (_ bv0 32) (_ bv1 32))))
 (let (($x186 (bvuge ?x200 (_ bv1 32))))
 (let (($x203 (= $x118 $x186)))
 (let (($x75 (= false false)))
 (let (($x151 (= ?x148 (_ bv0 32))))
 (let (($x216 (=> $x151 $x75)))
 (let (($x236 (and (and (and (= input.dst.llvm-%l ?x130) (= $x151 (= ?x200 (_ bv0 32)))) $x216) $x203)))
 (let (($x29 (and (and $x236 $x217) $x57)))
 (let (($x220 (not true)))
 (let (($x225 (or $x220 $x29)))
 (let (($x224 (= true true)))
 (let (($x198 (and $x224 $x225)))
 (let (($x77 (= $x198 true)))
 (let (($x206 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x158 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x159 (= $x158 $x206)))
 (let (($x207 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x176 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x218 (= $x176 $x207)))
 (let (($x177 (and $x218 $x159)))
 (let (($x178 (= $x177 true)))
 (let (($x181 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x182 (= $x158 $x181)))
 (let (($x157 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x205 (= $x176 $x157)))
 (let (($x179 (and $x205 $x182)))
 (let (($x180 (= $x179 true)))
 (let (($x39 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x47 (= $x39 $x118)))
 (let (($x66 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x152 (= $x66 $x151)))
 (let (($x175 (and $x152 $x47)))
 (let (($x153 (= $x175 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x62 (concat ?x139 (concat ?x133 ?x134)))))
 (let (($x144 (= ?x50 input.dst.llvm-%l)))
 (let (($x142 (= $x144 true)))
 (let (($x145 (= $x142 true)))
 (let (($x101 (= (bvand ?x130 (_ bv4294967288 32)) ?x130)))
 (let (($x126 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x131 (and $x126 $x101)))
 (let (($x122 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x137 (and true $x122)))
 (let (($x104 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x72 (bvsub ?x72 (_ bv4 32))) (bvult ?x72 (bvsub ?x72 (_ bv4 32))))))
 (let (($x135 (and (and (and $x104 $x137) $x126) $x131)))
 (let (($x26 (= true $x135)))
 (let (($x41 (not $x49)))
 (let (($x56 (=> $x41 $x26)))
 (let (($x141 (= $x56 true)))
 (let (($x16 (= $x141 true)))
 (let (($x82 (= $x16 true)))
 (let (($x45 (= input.dst.llvm-%l ?x50)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x161)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x112 $x102)))
 (let (($x24 (and $x48 $x105)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x59 $x24)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x38)))))))
 (let (($x111 (and $x110 $x169)))
 (let (($x147 (and $x111 $x45)))
 (let (($x143 (and true $x147)))
 (let (($x171 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x149 (and $x171 $x143)))
 (let (($x150 (and $x56 $x149)))
 (let (($x76 (= $x150 true)))
 (let (($x65 (= $x76 true)))
 (let (($x63 (= $x65 true)))
 (let (($x36 (= $x41 true)))
 (let (($x115 (= $x36 true)))
 (let (($x125 (= $x115 true)))
 (let (($x109 (= $x171 true)))
 (let (($x165 (= $x109 true)))
 (let (($x108 (= $x165 true)))
 (let (($x160 (= $x111 true)))
 (let (($x127 (= $x160 true)))
 (let (($x120 (= $x127 true)))
 (let (($x116 (and $x120 $x108)))
 (let (($x106 (and $x116 $x108)))
 (let (($x162 (and $x106 $x125)))
 (let (($x167 (and $x162 $x63)))
 (let (($x146 (and $x167 $x82)))
 (let (($x92 (and $x146 $x145)))
 (let (($x154 (and $x92 $x153)))
 (let (($x155 (and $x154 $x153)))
 (let (($x219 (and $x155 $x180)))
 (let (($x188 (and $x219 $x178)))
 (let (($x214 (and $x66 $x188)))
 (let (($x185 (and $x75 $x214)))
 (let (($x90 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x213 (and $x90 $x185)))
 (let (($x84 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x53 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x84)))))))
 (let (($x73 (=> (and $x41 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x85 $x84)))))))
 (let (($x209 (and $x73 $x213)))
 (let (($x199 (=> $x209 $x77)))
 (not $x199)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171655/query
