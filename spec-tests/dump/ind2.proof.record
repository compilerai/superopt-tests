==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x10 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x10 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791879/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x6 (not $x18)))
 (let (($x275 (or $x18 $x6)))
 (let (($x276 (= $x275 false)))
 (let (($x277 (= $x276 true)))
 (let (($x259 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x260 (= $x196 $x259)))
 (let (($x152 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x116 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x185 (and $x116 $x152)))
 (let (($x261 (=> $x185 $x260)))
 (let (($x256 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x191 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x257 (= $x191 $x256)))
 (let (($x258 (=> $x185 $x257)))
 (let (($x253 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x254 (=> $x185 $x253)))
 (let (($x249 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x250 (= $x152 $x249)))
 (let (($x251 (=> $x116 $x250)))
 (let (($x41 (= false false)))
 (let (($x135 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x180 (and $x116 $x135)))
 (let (($x181 (=> $x180 $x41)))
 (let (($x246 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x247 (= $x135 $x246)))
 (let (($x248 (=> $x116 $x247)))
 (let (($x243 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x244 (=> $x116 $x243)))
 (let (($x240 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x241 (= $x116 $x240)))
 (let (($x97 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x170 (=> $x97 $x41)))
 (let (($x238 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x239 (= $x97 $x238)))
 (let (($x267 (and (and (and (and (and (and $x239 $x170) $x241) $x244) $x248) $x181) $x251)))
 (let (($x270 (and (and (and $x267 $x254) $x258) $x261)))
 (let (($x271 (= $x270 true)))
 (let (($x225 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x226 (= $x152 $x225)))
 (let (($x227 (=> $x116 $x226)))
 (let (($x222 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x223 (= $x135 $x222)))
 (let (($x224 (=> $x116 $x223)))
 (let (($x219 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x220 (=> $x116 $x219)))
 (let (($x216 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x217 (= $x116 $x216)))
 (let (($x214 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x215 (= $x97 $x214)))
 (let (($x212 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x233 (and (and (and (and (and (and $x212 $x215) $x170) $x217) $x220) $x224) $x181)))
 (let (($x234 (and $x233 $x227)))
 (let (($x235 (= $x234 true)))
 (let (($x197 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x198 (= $x196 $x197)))
 (let (($x199 (=> $x185 $x198)))
 (let (($x193 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x194 (= $x191 $x193)))
 (let (($x195 (=> $x185 $x194)))
 (let (($x188 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x189 (=> $x185 $x188)))
 (let (($x182 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x183 (= $x152 $x182)))
 (let (($x184 (=> $x116 $x183)))
 (let (($x177 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x178 (= $x135 $x177)))
 (let (($x179 (=> $x116 $x178)))
 (let (($x174 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x175 (=> $x116 $x174)))
 (let (($x171 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x172 (= $x116 $x171)))
 (let (($x201 (and (and (= $x97 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x170) $x172)))
 (let (($x207 (and (and (and (and (and (and $x201 $x175) $x179) $x181) $x184) $x189) $x195)))
 (let (($x208 (and $x207 $x199)))
 (let (($x209 (= $x208 true)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x102 (concat ?x101 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x108 (concat ?x107 (concat ?x104 ?x102))))
 (let ((?x136 (bvadd ?x108 (_ bv4 32))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem ?x136))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv2 32))) ?x140))))
 (let (($x147 (= (_ bv0 32) ?x146)))
 (let ((?x148 (ite $x147 (_ bv0 32) (_ bv1 32))))
 (let (($x153 (bvuge ?x148 (_ bv1 32))))
 (let (($x154 (= $x152 $x153)))
 (let (($x81 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x120 (and $x81 $x116)))
 (let (($x155 (=> $x120 $x154)))
 (let (($x149 (= ?x148 (_ bv0 32))))
 (let (($x150 (= $x135 $x149)))
 (let (($x151 (=> $x120 $x150)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv1 32))) (select input.dst.llvm-mem ?x108))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv2 32))) ?x125))))
 (let (($x132 (= input.spec-%var-l-0.2.1.2.0 ?x131)))
 (let (($x133 (=> $x120 $x132)))
 (let (($x109 (= (_ bv0 32) ?x108)))
 (let ((?x110 (ite $x109 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x110 (_ bv1 32))))
 (let (($x118 (= $x116 $x117)))
 (let (($x119 (=> $x81 $x118)))
 (let (($x114 (and $x81 $x97)))
 (let (($x115 (=> $x114 $x41)))
 (let (($x111 (= ?x110 (_ bv0 32))))
 (let (($x112 (= $x97 $x111)))
 (let (($x113 (=> $x81 $x112)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x87)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x90)))
 (let (($x94 (= input.spec-%var-l-0.2.0 ?x93)))
 (let (($x95 (=> $x81 $x94)))
 (let ((?x77 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x82 (bvuge ?x77 (_ bv1 32))))
 (let (($x83 (= $x81 $x82)))
 (let (($x76 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x80 (=> $x76 $x41)))
 (let (($x78 (= ?x77 (_ bv0 32))))
 (let (($x79 (= $x76 $x78)))
 (let (($x161 (and (and (and (and (and (and $x79 $x80) $x83) $x95) $x113) $x115) $x119)))
 (let (($x164 (and (and (and $x161 $x133) $x151) $x155)))
 (let (($x165 (= $x164 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x70 (concat ?x67 (concat ?x63 ?x61)))))
 (let (($x72 (= ?x71 input.dst.llvm-%l)))
 (let (($x73 (= $x72 true)))
 (let ((?x38 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x51 (bvugt ?x38 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x38 (_ bv3 32)))))
 (let (($x57 (=> (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x51)))))))
 (let (($x9 (=> (and $x6 (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x50 $x51)))))))
 (let (($x40 (= $x9 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x7)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x15 $x29)))
 (let (($x44 (and $x14 $x35)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x37 $x44)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x28)))))))
 (let (($x10 (and $x11 $x17)))
 (let (($x20 (= $x10 true)))
 (let (($x58 (and $x20 $x40)))
 (let (($x74 (and $x58 $x73)))
 (let (($x166 (and $x74 $x165)))
 (let (($x210 (and $x166 $x209)))
 (let (($x236 (and $x210 $x235)))
 (let (($x272 (and $x236 $x271)))
 (let (($x273 (and $x41 $x272)))
 (let (($x19 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x274 (and $x19 $x273)))
 (let (($x278 (=> $x274 $x277)))
 (not $x278)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x6 (not $x18)))
 (let (($x275 (or $x18 $x6)))
 (let (($x276 (= $x275 false)))
 (let (($x277 (= $x276 true)))
 (let (($x259 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x260 (= $x196 $x259)))
 (let (($x152 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x116 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x185 (and $x116 $x152)))
 (let (($x261 (=> $x185 $x260)))
 (let (($x256 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x191 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x257 (= $x191 $x256)))
 (let (($x258 (=> $x185 $x257)))
 (let (($x253 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x254 (=> $x185 $x253)))
 (let (($x249 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x250 (= $x152 $x249)))
 (let (($x251 (=> $x116 $x250)))
 (let (($x41 (= false false)))
 (let (($x135 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x180 (and $x116 $x135)))
 (let (($x181 (=> $x180 $x41)))
 (let (($x246 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x247 (= $x135 $x246)))
 (let (($x248 (=> $x116 $x247)))
 (let (($x243 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x244 (=> $x116 $x243)))
 (let (($x240 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x241 (= $x116 $x240)))
 (let (($x97 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x170 (=> $x97 $x41)))
 (let (($x238 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x239 (= $x97 $x238)))
 (let (($x267 (and (and (and (and (and (and $x239 $x170) $x241) $x244) $x248) $x181) $x251)))
 (let (($x270 (and (and (and $x267 $x254) $x258) $x261)))
 (let (($x271 (= $x270 true)))
 (let (($x225 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x226 (= $x152 $x225)))
 (let (($x227 (=> $x116 $x226)))
 (let (($x222 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x223 (= $x135 $x222)))
 (let (($x224 (=> $x116 $x223)))
 (let (($x219 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x220 (=> $x116 $x219)))
 (let (($x216 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x217 (= $x116 $x216)))
 (let (($x214 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x215 (= $x97 $x214)))
 (let (($x212 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x233 (and (and (and (and (and (and $x212 $x215) $x170) $x217) $x220) $x224) $x181)))
 (let (($x234 (and $x233 $x227)))
 (let (($x235 (= $x234 true)))
 (let (($x197 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x198 (= $x196 $x197)))
 (let (($x199 (=> $x185 $x198)))
 (let (($x193 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x194 (= $x191 $x193)))
 (let (($x195 (=> $x185 $x194)))
 (let (($x188 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x189 (=> $x185 $x188)))
 (let (($x182 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x183 (= $x152 $x182)))
 (let (($x184 (=> $x116 $x183)))
 (let (($x177 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x178 (= $x135 $x177)))
 (let (($x179 (=> $x116 $x178)))
 (let (($x174 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x175 (=> $x116 $x174)))
 (let (($x171 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x172 (= $x116 $x171)))
 (let (($x201 (and (and (= $x97 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x170) $x172)))
 (let (($x207 (and (and (and (and (and (and $x201 $x175) $x179) $x181) $x184) $x189) $x195)))
 (let (($x208 (and $x207 $x199)))
 (let (($x209 (= $x208 true)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x102 (concat ?x101 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x108 (concat ?x107 (concat ?x104 ?x102))))
 (let ((?x136 (bvadd ?x108 (_ bv4 32))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem ?x136))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv2 32))) ?x140))))
 (let (($x147 (= (_ bv0 32) ?x146)))
 (let ((?x148 (ite $x147 (_ bv0 32) (_ bv1 32))))
 (let (($x153 (bvuge ?x148 (_ bv1 32))))
 (let (($x154 (= $x152 $x153)))
 (let (($x81 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x120 (and $x81 $x116)))
 (let (($x155 (=> $x120 $x154)))
 (let (($x149 (= ?x148 (_ bv0 32))))
 (let (($x150 (= $x135 $x149)))
 (let (($x151 (=> $x120 $x150)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv1 32))) (select input.dst.llvm-mem ?x108))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv2 32))) ?x125))))
 (let (($x132 (= input.spec-%var-l-0.2.1.2.0 ?x131)))
 (let (($x133 (=> $x120 $x132)))
 (let (($x109 (= (_ bv0 32) ?x108)))
 (let ((?x110 (ite $x109 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x110 (_ bv1 32))))
 (let (($x118 (= $x116 $x117)))
 (let (($x119 (=> $x81 $x118)))
 (let (($x114 (and $x81 $x97)))
 (let (($x115 (=> $x114 $x41)))
 (let (($x111 (= ?x110 (_ bv0 32))))
 (let (($x112 (= $x97 $x111)))
 (let (($x113 (=> $x81 $x112)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x87)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x90)))
 (let (($x94 (= input.spec-%var-l-0.2.0 ?x93)))
 (let (($x95 (=> $x81 $x94)))
 (let ((?x77 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x82 (bvuge ?x77 (_ bv1 32))))
 (let (($x83 (= $x81 $x82)))
 (let (($x76 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x80 (=> $x76 $x41)))
 (let (($x78 (= ?x77 (_ bv0 32))))
 (let (($x79 (= $x76 $x78)))
 (let (($x161 (and (and (and (and (and (and $x79 $x80) $x83) $x95) $x113) $x115) $x119)))
 (let (($x164 (and (and (and $x161 $x133) $x151) $x155)))
 (let (($x165 (= $x164 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x70 (concat ?x67 (concat ?x63 ?x61)))))
 (let (($x72 (= ?x71 input.dst.llvm-%l)))
 (let (($x73 (= $x72 true)))
 (let ((?x38 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x51 (bvugt ?x38 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x38 (_ bv3 32)))))
 (let (($x57 (=> (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x51)))))))
 (let (($x9 (=> (and $x6 (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x50 $x51)))))))
 (let (($x40 (= $x9 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x7)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x15 $x29)))
 (let (($x44 (and $x14 $x35)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x37 $x44)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x28)))))))
 (let (($x10 (and $x11 $x17)))
 (let (($x20 (= $x10 true)))
 (let (($x58 (and $x20 $x40)))
 (let (($x74 (and $x58 $x73)))
 (let (($x166 (and $x74 $x165)))
 (let (($x210 (and $x166 $x209)))
 (let (($x236 (and $x210 $x235)))
 (let (($x272 (and $x236 $x271)))
 (let (($x273 (and $x41 $x272)))
 (let (($x19 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x274 (and $x19 $x273)))
 (let (($x278 (=> $x274 $x277)))
 (not $x278)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%var-node_val-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv7 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffefc)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000005 #x51))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffefc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffeff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791879/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x35 (not $x47)))
 (let (($x291 (or $x47 $x35)))
 (let (($x292 (= $x291 false)))
 (let (($x293 (= $x292 true)))
 (let (($x197 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x148 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x115 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x188 (and $x115 $x148)))
 (let (($x211 (and $x188 $x197)))
 (let (($x212 (not $x211)))
 (let (($x193 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x209 (and $x188 $x193)))
 (let (($x210 (not $x209)))
 (let (($x276 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x277 (= $x197 $x276)))
 (let (($x278 (=> $x188 $x277)))
 (let (($x273 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x274 (= $x193 $x273)))
 (let (($x275 (=> $x188 $x274)))
 (let (($x270 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x271 (=> $x188 $x270)))
 (let (($x269 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x259 (= $x148 $x269)))
 (let (($x260 (=> $x115 $x259)))
 (let (($x54 (= false false)))
 (let (($x132 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x184 (and $x115 $x132)))
 (let (($x205 (=> $x184 $x54)))
 (let (($x256 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x257 (= $x132 $x256)))
 (let (($x258 (=> $x115 $x257)))
 (let (($x254 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x268 (=> $x115 $x254)))
 (let (($x267 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x252 (= $x115 $x267)))
 (let (($x97 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x176 (=> $x97 $x54)))
 (let (($x250 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x251 (= $x97 $x250)))
 (let (($x281 (and (and (and (and (and (and $x251 $x176) $x252) $x268) $x258) $x205) $x260)))
 (let (($x286 (and (and (and (and (and $x281 $x271) $x275) $x278) $x210) $x212)))
 (let (($x287 (= $x286 true)))
 (let (($x263 (not $x188)))
 (let (($x262 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x240 (= $x148 $x262)))
 (let (($x241 (=> $x115 $x240)))
 (let (($x237 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x238 (= $x132 $x237)))
 (let (($x239 (=> $x115 $x238)))
 (let (($x234 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x235 (=> $x115 $x234)))
 (let (($x225 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x226 (= $x115 $x225)))
 (let (($x232 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x233 (= $x97 $x232)))
 (let (($x223 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x246 (and (and (and (and (and (and $x223 $x233) $x176) $x226) $x235) $x239) $x205)))
 (let (($x248 (and (and $x246 $x241) $x263)))
 (let (($x265 (= $x248 true)))
 (let (($x198 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x199 (= $x197 $x198)))
 (let (($x208 (=> $x188 $x199)))
 (let (($x195 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x207 (= $x193 $x195)))
 (let (($x196 (=> $x188 $x207)))
 (let (($x190 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x191 (=> $x188 $x190)))
 (let (($x185 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x186 (= $x148 $x185)))
 (let (($x187 (=> $x115 $x186)))
 (let (($x204 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x182 (= $x132 $x204)))
 (let (($x183 (=> $x115 $x182)))
 (let (($x203 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x180 (=> $x115 $x203)))
 (let (($x177 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x178 (= $x115 $x177)))
 (let (($x214 (and (and (= $x97 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x176) $x178)))
 (let (($x230 (and (and (and (and (and (and $x214 $x180) $x183) $x205) $x187) $x191) $x196)))
 (let (($x220 (and (and (and $x230 $x208) $x210) $x212)))
 (let (($x231 (= $x220 true)))
 (let (($x83 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x118 (and $x83 $x115)))
 (let (($x153 (and $x118 $x132)))
 (let (($x154 (not $x153)))
 (let (($x163 (and $x118 $x148)))
 (let (($x152 (not $x163)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x104 (concat ?x103 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x108 (concat ?x105 (concat ?x101 ?x104))))
 (let ((?x133 (bvadd ?x108 (_ bv4 32))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv1 32))) (select input.dst.llvm-mem ?x133))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv2 32))) ?x136))))
 (let (($x137 (= (_ bv0 32) ?x139)))
 (let ((?x140 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x140 (_ bv1 32))))
 (let (($x150 (= $x148 $x149)))
 (let (($x151 (=> $x118 $x150)))
 (let (($x143 (= ?x140 (_ bv0 32))))
 (let (($x146 (= $x132 $x143)))
 (let (($x147 (=> $x118 $x146)))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv1 32))) (select input.dst.llvm-mem ?x108))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv2 32))) ?x129))))
 (let (($x125 (= input.spec-%var-l-0.2.1.2.0 ?x122)))
 (let (($x128 (=> $x118 $x125)))
 (let (($x109 (= (_ bv0 32) ?x108)))
 (let ((?x110 (ite $x109 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x110 (_ bv1 32))))
 (let (($x116 (= $x115 $x160)))
 (let (($x117 (=> $x83 $x116)))
 (let (($x159 (and $x83 $x97)))
 (let (($x114 (=> $x159 $x54)))
 (let (($x111 (= ?x110 (_ bv0 32))))
 (let (($x112 (= $x97 $x111)))
 (let (($x113 (=> $x83 $x112)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x85)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x87)))
 (let (($x95 (= input.spec-%var-l-0.2.0 ?x94)))
 (let (($x158 (=> $x83 $x95)))
 (let ((?x80 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge ?x80 (_ bv1 32))))
 (let (($x91 (= $x83 $x157)))
 (let (($x41 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x82 (=> $x41 $x54)))
 (let (($x156 (= ?x80 (_ bv0 32))))
 (let (($x81 (= $x41 $x156)))
 (let (($x168 (and (and (and (and (and (and $x81 $x82) $x91) $x158) $x113) $x114) $x117)))
 (let (($x172 (and (and (and (and (and $x168 $x128) $x147) $x151) $x152) $x154)))
 (let (($x201 (= $x172 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x74 (concat ?x71 (concat ?x63 ?x67)))))
 (let (($x76 (= ?x75 input.dst.llvm-%l)))
 (let (($x77 (= $x76 true)))
 (let ((?x31 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x55 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x31 (_ bv3 32)))))
 (let (($x69 (=> (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x55)))))))
 (let (($x34 (=> (and $x35 (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x10 $x55)))))))
 (let (($x17 (= $x34 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x29)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x51 $x18)))
 (let (($x12 (and $x32 $x14)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x56 $x12)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x45)))))))
 (let (($x30 (and $x13 $x39)))
 (let (($x38 (= $x30 true)))
 (let (($x70 (and $x38 $x17)))
 (let (($x78 (and $x70 $x77)))
 (let (($x173 (and $x78 $x201)))
 (let (($x221 (and $x173 $x231)))
 (let (($x266 (and $x221 $x265)))
 (let (($x288 (and $x266 $x287)))
 (let (($x289 (and $x54 $x288)))
 (let (($x23 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x290 (and $x23 $x289)))
 (let (($x294 (=> $x290 $x293)))
 (not $x294))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x35 (not $x47)))
 (let (($x291 (or $x47 $x35)))
 (let (($x292 (= $x291 false)))
 (let (($x293 (= $x292 true)))
 (let (($x197 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x148 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x115 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x188 (and $x115 $x148)))
 (let (($x211 (and $x188 $x197)))
 (let (($x212 (not $x211)))
 (let (($x193 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x209 (and $x188 $x193)))
 (let (($x210 (not $x209)))
 (let (($x276 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x277 (= $x197 $x276)))
 (let (($x278 (=> $x188 $x277)))
 (let (($x273 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x274 (= $x193 $x273)))
 (let (($x275 (=> $x188 $x274)))
 (let (($x270 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x271 (=> $x188 $x270)))
 (let (($x269 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x259 (= $x148 $x269)))
 (let (($x260 (=> $x115 $x259)))
 (let (($x54 (= false false)))
 (let (($x132 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x184 (and $x115 $x132)))
 (let (($x205 (=> $x184 $x54)))
 (let (($x256 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x257 (= $x132 $x256)))
 (let (($x258 (=> $x115 $x257)))
 (let (($x254 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x268 (=> $x115 $x254)))
 (let (($x267 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x252 (= $x115 $x267)))
 (let (($x97 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x176 (=> $x97 $x54)))
 (let (($x250 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x251 (= $x97 $x250)))
 (let (($x281 (and (and (and (and (and (and $x251 $x176) $x252) $x268) $x258) $x205) $x260)))
 (let (($x286 (and (and (and (and (and $x281 $x271) $x275) $x278) $x210) $x212)))
 (let (($x287 (= $x286 true)))
 (let (($x263 (not $x188)))
 (let (($x262 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x240 (= $x148 $x262)))
 (let (($x241 (=> $x115 $x240)))
 (let (($x237 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x238 (= $x132 $x237)))
 (let (($x239 (=> $x115 $x238)))
 (let (($x234 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x235 (=> $x115 $x234)))
 (let (($x225 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x226 (= $x115 $x225)))
 (let (($x232 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x233 (= $x97 $x232)))
 (let (($x223 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x246 (and (and (and (and (and (and $x223 $x233) $x176) $x226) $x235) $x239) $x205)))
 (let (($x248 (and (and $x246 $x241) $x263)))
 (let (($x265 (= $x248 true)))
 (let (($x198 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x199 (= $x197 $x198)))
 (let (($x208 (=> $x188 $x199)))
 (let (($x195 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x207 (= $x193 $x195)))
 (let (($x196 (=> $x188 $x207)))
 (let (($x190 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x191 (=> $x188 $x190)))
 (let (($x185 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x186 (= $x148 $x185)))
 (let (($x187 (=> $x115 $x186)))
 (let (($x204 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x182 (= $x132 $x204)))
 (let (($x183 (=> $x115 $x182)))
 (let (($x203 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x180 (=> $x115 $x203)))
 (let (($x177 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x178 (= $x115 $x177)))
 (let (($x214 (and (and (= $x97 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x176) $x178)))
 (let (($x230 (and (and (and (and (and (and $x214 $x180) $x183) $x205) $x187) $x191) $x196)))
 (let (($x220 (and (and (and $x230 $x208) $x210) $x212)))
 (let (($x231 (= $x220 true)))
 (let (($x83 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x118 (and $x83 $x115)))
 (let (($x153 (and $x118 $x132)))
 (let (($x154 (not $x153)))
 (let (($x163 (and $x118 $x148)))
 (let (($x152 (not $x163)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x104 (concat ?x103 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x108 (concat ?x105 (concat ?x101 ?x104))))
 (let ((?x133 (bvadd ?x108 (_ bv4 32))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv1 32))) (select input.dst.llvm-mem ?x133))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv2 32))) ?x136))))
 (let (($x137 (= (_ bv0 32) ?x139)))
 (let ((?x140 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x140 (_ bv1 32))))
 (let (($x150 (= $x148 $x149)))
 (let (($x151 (=> $x118 $x150)))
 (let (($x143 (= ?x140 (_ bv0 32))))
 (let (($x146 (= $x132 $x143)))
 (let (($x147 (=> $x118 $x146)))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv1 32))) (select input.dst.llvm-mem ?x108))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv2 32))) ?x129))))
 (let (($x125 (= input.spec-%var-l-0.2.1.2.0 ?x122)))
 (let (($x128 (=> $x118 $x125)))
 (let (($x109 (= (_ bv0 32) ?x108)))
 (let ((?x110 (ite $x109 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x110 (_ bv1 32))))
 (let (($x116 (= $x115 $x160)))
 (let (($x117 (=> $x83 $x116)))
 (let (($x159 (and $x83 $x97)))
 (let (($x114 (=> $x159 $x54)))
 (let (($x111 (= ?x110 (_ bv0 32))))
 (let (($x112 (= $x97 $x111)))
 (let (($x113 (=> $x83 $x112)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x85)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x87)))
 (let (($x95 (= input.spec-%var-l-0.2.0 ?x94)))
 (let (($x158 (=> $x83 $x95)))
 (let ((?x80 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge ?x80 (_ bv1 32))))
 (let (($x91 (= $x83 $x157)))
 (let (($x41 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x82 (=> $x41 $x54)))
 (let (($x156 (= ?x80 (_ bv0 32))))
 (let (($x81 (= $x41 $x156)))
 (let (($x168 (and (and (and (and (and (and $x81 $x82) $x91) $x158) $x113) $x114) $x117)))
 (let (($x172 (and (and (and (and (and $x168 $x128) $x147) $x151) $x152) $x154)))
 (let (($x201 (= $x172 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x74 (concat ?x71 (concat ?x63 ?x67)))))
 (let (($x76 (= ?x75 input.dst.llvm-%l)))
 (let (($x77 (= $x76 true)))
 (let ((?x31 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x55 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x31 (_ bv3 32)))))
 (let (($x69 (=> (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x55)))))))
 (let (($x34 (=> (and $x35 (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x10 $x55)))))))
 (let (($x17 (= $x34 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x29)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x51 $x18)))
 (let (($x12 (and $x32 $x14)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x56 $x12)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x45)))))))
 (let (($x30 (and $x13 $x39)))
 (let (($x38 (= $x30 true)))
 (let (($x70 (and $x38 $x17)))
 (let (($x78 (and $x70 $x77)))
 (let (($x173 (and $x78 $x201)))
 (let (($x221 (and $x173 $x231)))
 (let (($x266 (and $x221 $x265)))
 (let (($x288 (and $x266 $x287)))
 (let (($x289 (and $x54 $x288)))
 (let (($x23 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x290 (and $x23 $x289)))
 (let (($x294 (=> $x290 $x293)))
 (not $x294))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%var-node_val-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffeffc)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000005 #x62))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffeffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffefff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv7 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791879/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x37 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x15 (not $x37)))
 (let (($x284 (or $x37 $x15)))
 (let (($x285 (not $x284)))
 (let (($x157 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x86 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x278 (or $x86 $x157)))
 (let (($x286 (or $x278 $x285)))
 (let (($x287 (= $x286 true)))
 (let (($x60 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x192 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x280 (= $x192 $x60)))
 (let (($x170 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x116 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x229 (and $x116 $x170)))
 (let (($x269 (=> $x229 $x280)))
 (let (($x256 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x189 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x257 (= $x189 $x256)))
 (let (($x258 (=> $x229 $x257)))
 (let (($x268 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x22 (=> $x229 $x268)))
 (let (($x252 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x21 (= $x170 $x252)))
 (let (($x253 (=> $x116 $x21)))
 (let (($x12 (= false false)))
 (let (($x132 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x182 (and $x116 $x132)))
 (let (($x183 (=> $x182 $x12)))
 (let (($x251 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x132 $x251)))
 (let (($x267 (=> $x116 $x279)))
 (let (($x266 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x249 (=> $x116 $x266)))
 (let (($x263 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x248 (= $x116 $x263)))
 (let (($x100 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x213 (=> $x100 $x12)))
 (let (($x241 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x247 (= $x100 $x241)))
 (let (($x271 (and (and (and (and (and (and $x247 $x213) $x248) $x249) $x267) $x183) $x253)))
 (let (($x273 (and (and (and $x271 $x22) $x258) $x269)))
 (let (($x274 (= $x273 true)))
 (let (($x244 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x227 (= $x170 $x244)))
 (let (($x234 (=> $x116 $x227)))
 (let (($x243 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x225 (= $x132 $x243)))
 (let (($x226 (=> $x116 $x225)))
 (let (($x232 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x233 (=> $x116 $x232)))
 (let (($x222 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x223 (= $x116 $x222)))
 (let (($x231 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x221 (= $x100 $x231)))
 (let (($x212 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x239 (and (and (and (and (and (and $x212 $x221) $x213) $x223) $x233) $x226) $x183)))
 (let (($x245 (and $x239 $x234)))
 (let (($x246 (= $x245 true)))
 (let (($x193 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x194 (= $x192 $x193)))
 (let (($x195 (=> $x229 $x194)))
 (let (($x190 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x191 (= $x189 $x190)))
 (let (($x217 (=> $x229 $x191)))
 (let (($x187 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x216 (=> $x229 $x187)))
 (let (($x228 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x184 (= $x170 $x228)))
 (let (($x205 (=> $x116 $x184)))
 (let (($x215 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x181 (= $x132 $x215)))
 (let (($x204 (=> $x116 $x181)))
 (let (($x179 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x203 (=> $x116 $x179)))
 (let (($x177 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x178 (= $x116 $x177)))
 (let (($x196 (and (and (= $x100 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x213) $x178)))
 (let (($x218 (and (and (and (and (and (and $x196 $x203) $x204) $x183) $x205) $x216) $x217)))
 (let (($x209 (and $x218 $x195)))
 (let (($x210 (= $x209 true)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x104 (concat ?x106 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x112 (concat ?x111 (concat ?x108 ?x104))))
 (let ((?x133 (bvadd ?x112 (_ bv4 32))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv1 32))) (select input.dst.llvm-mem ?x133))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv2 32))) ?x145))))
 (let (($x137 (= (_ bv0 32) ?x139)))
 (let ((?x140 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x148 (bvuge ?x140 (_ bv1 32))))
 (let (($x149 (= $x170 $x148)))
 (let (($x119 (and $x86 $x116)))
 (let (($x150 (=> $x119 $x149)))
 (let (($x143 (= ?x140 (_ bv0 32))))
 (let (($x146 (= $x132 $x143)))
 (let (($x147 (=> $x119 $x146)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv1 32))) (select input.dst.llvm-mem ?x112))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv2 32))) ?x120))))
 (let (($x128 (= input.spec-%var-l-0.2.1.2.0 ?x125)))
 (let (($x169 (=> $x119 $x128)))
 (let (($x113 (= (_ bv0 32) ?x112)))
 (let ((?x166 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x166 (_ bv1 32))))
 (let (($x168 (= $x116 $x117)))
 (let (($x118 (=> $x86 $x168)))
 (let (($x115 (and $x86 $x100)))
 (let (($x160 (=> $x115 $x12)))
 (let (($x159 (= ?x166 (_ bv0 32))))
 (let (($x114 (= $x100 $x159)))
 (let (($x167 (=> $x86 $x114)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x87)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x158)))
 (let (($x98 (= input.spec-%var-l-0.2.0 ?x97)))
 (let (($x102 (=> $x86 $x98)))
 (let ((?x91 (ite $x37 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge ?x91 (_ bv1 32))))
 (let (($x88 (= $x86 $x84)))
 (let (($x152 (and (and (and (and (= $x157 (= ?x91 (_ bv0 32))) (=> $x157 $x12)) $x88) $x102) $x167)))
 (let (($x201 (and (and (and (and (and $x152 $x160) $x118) $x169) $x147) $x150)))
 (let (($x173 (= $x201 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x156 (concat ?x79 (concat ?x75 ?x61)))))
 (let (($x54 (= ?x81 input.dst.llvm-%l)))
 (let (($x82 (= $x54 true)))
 (let (($x68 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x71 (= $x68 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x69)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x57 $x40)))
 (let (($x17 (and $x58 $x34)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x38 $x17)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x31)))))))
 (let (($x65 (and $x55 $x70)))
 (let (($x73 (= $x65 true)))
 (let (($x62 (and $x73 $x71)))
 (let (($x155 (and $x62 $x82)))
 (let (($x174 (and $x155 $x173)))
 (let (($x219 (and $x174 $x210)))
 (let (($x262 (and $x219 $x246)))
 (let (($x275 (and $x262 $x274)))
 (let (($x283 (and $x12 $x275)))
 (let (($x14 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x276 (and $x14 $x283)))
 (let ((?x46 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x19 (bvugt ?x46 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x46 (_ bv3 32)))))
 (let (($x32 (=> (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x19)))))))
 (let (($x11 (=> (and $x15 (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x13 $x19)))))))
 (let (($x277 (and $x11 $x276)))
 (let (($x288 (=> $x277 $x287)))
 (not $x288))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x37 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x15 (not $x37)))
 (let (($x284 (or $x37 $x15)))
 (let (($x285 (not $x284)))
 (let (($x157 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x86 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x278 (or $x86 $x157)))
 (let (($x286 (or $x278 $x285)))
 (let (($x287 (= $x286 true)))
 (let (($x60 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x192 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x280 (= $x192 $x60)))
 (let (($x170 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x116 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x229 (and $x116 $x170)))
 (let (($x269 (=> $x229 $x280)))
 (let (($x256 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x189 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x257 (= $x189 $x256)))
 (let (($x258 (=> $x229 $x257)))
 (let (($x268 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x22 (=> $x229 $x268)))
 (let (($x252 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x21 (= $x170 $x252)))
 (let (($x253 (=> $x116 $x21)))
 (let (($x12 (= false false)))
 (let (($x132 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x182 (and $x116 $x132)))
 (let (($x183 (=> $x182 $x12)))
 (let (($x251 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x132 $x251)))
 (let (($x267 (=> $x116 $x279)))
 (let (($x266 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x249 (=> $x116 $x266)))
 (let (($x263 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x248 (= $x116 $x263)))
 (let (($x100 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x213 (=> $x100 $x12)))
 (let (($x241 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x247 (= $x100 $x241)))
 (let (($x271 (and (and (and (and (and (and $x247 $x213) $x248) $x249) $x267) $x183) $x253)))
 (let (($x273 (and (and (and $x271 $x22) $x258) $x269)))
 (let (($x274 (= $x273 true)))
 (let (($x244 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x227 (= $x170 $x244)))
 (let (($x234 (=> $x116 $x227)))
 (let (($x243 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x225 (= $x132 $x243)))
 (let (($x226 (=> $x116 $x225)))
 (let (($x232 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x233 (=> $x116 $x232)))
 (let (($x222 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x223 (= $x116 $x222)))
 (let (($x231 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x221 (= $x100 $x231)))
 (let (($x212 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x239 (and (and (and (and (and (and $x212 $x221) $x213) $x223) $x233) $x226) $x183)))
 (let (($x245 (and $x239 $x234)))
 (let (($x246 (= $x245 true)))
 (let (($x193 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x194 (= $x192 $x193)))
 (let (($x195 (=> $x229 $x194)))
 (let (($x190 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x191 (= $x189 $x190)))
 (let (($x217 (=> $x229 $x191)))
 (let (($x187 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x216 (=> $x229 $x187)))
 (let (($x228 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x184 (= $x170 $x228)))
 (let (($x205 (=> $x116 $x184)))
 (let (($x215 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x181 (= $x132 $x215)))
 (let (($x204 (=> $x116 $x181)))
 (let (($x179 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x203 (=> $x116 $x179)))
 (let (($x177 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x178 (= $x116 $x177)))
 (let (($x196 (and (and (= $x100 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x213) $x178)))
 (let (($x218 (and (and (and (and (and (and $x196 $x203) $x204) $x183) $x205) $x216) $x217)))
 (let (($x209 (and $x218 $x195)))
 (let (($x210 (= $x209 true)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x104 (concat ?x106 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x112 (concat ?x111 (concat ?x108 ?x104))))
 (let ((?x133 (bvadd ?x112 (_ bv4 32))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv1 32))) (select input.dst.llvm-mem ?x133))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv2 32))) ?x145))))
 (let (($x137 (= (_ bv0 32) ?x139)))
 (let ((?x140 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x148 (bvuge ?x140 (_ bv1 32))))
 (let (($x149 (= $x170 $x148)))
 (let (($x119 (and $x86 $x116)))
 (let (($x150 (=> $x119 $x149)))
 (let (($x143 (= ?x140 (_ bv0 32))))
 (let (($x146 (= $x132 $x143)))
 (let (($x147 (=> $x119 $x146)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv1 32))) (select input.dst.llvm-mem ?x112))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv2 32))) ?x120))))
 (let (($x128 (= input.spec-%var-l-0.2.1.2.0 ?x125)))
 (let (($x169 (=> $x119 $x128)))
 (let (($x113 (= (_ bv0 32) ?x112)))
 (let ((?x166 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x166 (_ bv1 32))))
 (let (($x168 (= $x116 $x117)))
 (let (($x118 (=> $x86 $x168)))
 (let (($x115 (and $x86 $x100)))
 (let (($x160 (=> $x115 $x12)))
 (let (($x159 (= ?x166 (_ bv0 32))))
 (let (($x114 (= $x100 $x159)))
 (let (($x167 (=> $x86 $x114)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x87)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x158)))
 (let (($x98 (= input.spec-%var-l-0.2.0 ?x97)))
 (let (($x102 (=> $x86 $x98)))
 (let ((?x91 (ite $x37 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge ?x91 (_ bv1 32))))
 (let (($x88 (= $x86 $x84)))
 (let (($x152 (and (and (and (and (= $x157 (= ?x91 (_ bv0 32))) (=> $x157 $x12)) $x88) $x102) $x167)))
 (let (($x201 (and (and (and (and (and $x152 $x160) $x118) $x169) $x147) $x150)))
 (let (($x173 (= $x201 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x156 (concat ?x79 (concat ?x75 ?x61)))))
 (let (($x54 (= ?x81 input.dst.llvm-%l)))
 (let (($x82 (= $x54 true)))
 (let (($x68 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x71 (= $x68 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x69)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x57 $x40)))
 (let (($x17 (and $x58 $x34)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x38 $x17)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x31)))))))
 (let (($x65 (and $x55 $x70)))
 (let (($x73 (= $x65 true)))
 (let (($x62 (and $x73 $x71)))
 (let (($x155 (and $x62 $x82)))
 (let (($x174 (and $x155 $x173)))
 (let (($x219 (and $x174 $x210)))
 (let (($x262 (and $x219 $x246)))
 (let (($x275 (and $x262 $x274)))
 (let (($x283 (and $x12 $x275)))
 (let (($x14 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x276 (and $x14 $x283)))
 (let ((?x46 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x19 (bvugt ?x46 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x46 (_ bv3 32)))))
 (let (($x32 (=> (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x19)))))))
 (let (($x11 (=> (and $x15 (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x13 $x19)))))))
 (let (($x277 (and $x11 $x276)))
 (let (($x288 (=> $x277 $x287)))
 (not $x288))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791879/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var433X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var433X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var433X.0 () (_ BitVec 32))
(declare-fun input.ind-%var433X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var430X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var430X.0 () (_ BitVec 32))
(declare-fun input.ind-%var430X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.ind-%var427X () (_ BitVec 32))
(declare-fun input.ind-%var427X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var427X.0 () (_ BitVec 32))
(declare-fun input.ind-%var427X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var424X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var424X.0 () (_ BitVec 32))
(declare-fun input.ind-%var424X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var421X () (_ BitVec 32))
(declare-fun input.ind-%var418X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var418X.0 () (_ BitVec 32))
(declare-fun input.ind-%var418X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x567 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var433X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x568 (concat ?x567 (select input.dst.llvm-mem (bvadd input.ind-%var433X (_ bv4 32))))))
 (let ((?x570 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var433X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x573 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var433X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x574 (concat ?x573 (concat ?x570 ?x568))))
 (let (($x575 (= input.ind-%var433X.2.1 ?x574)))
 (let (($x547 (bvuge input.ind-%var433X.0 (_ bv1 32))))
 (let (($x576 (=> $x547 $x575)))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd input.ind-%var433X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var433X))))
 (let ((?x557 (concat (select input.dst.llvm-mem (bvadd input.ind-%var433X (_ bv2 32))) ?x554)))
 (let ((?x560 (concat (select input.dst.llvm-mem (bvadd input.ind-%var433X (_ bv3 32))) ?x557)))
 (let (($x561 (= input.ind-%var433X.2.0 ?x560)))
 (let (($x562 (=> $x547 $x561)))
 (let (($x542 (= (_ bv0 32) input.ind-%var433X)))
 (let ((?x543 (ite $x542 (_ bv0 32) (_ bv1 32))))
 (let (($x548 (bvuge ?x543 (_ bv1 32))))
 (let (($x549 (= $x547 $x548)))
 (let (($x79 (= false false)))
 (let (($x540 (= input.ind-%var433X.0 (_ bv0 32))))
 (let (($x546 (=> $x540 $x79)))
 (let (($x544 (= ?x543 (_ bv0 32))))
 (let (($x545 (= $x540 $x544)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x146 (concat ?x143 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x49 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x51 (bvadd ?x49 (_ bv3 32))))
 (let ((?x149 (concat (select input.dst.llvm-mem ?x51) (concat ?x172 ?x146))))
 (let (($x538 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1 ?x149)))
 (let (($x581 (and (and (and (and (and $x538 $x545) $x546) $x549) $x562) $x576)))
 (let (($x530 (= input.ind-%var430X.2.1 input.ind-%var430X.2.1)))
 (let (($x524 (bvuge input.ind-%var430X.0 (_ bv1 32))))
 (let (($x531 (=> $x524 $x530)))
 (let (($x527 (= input.ind-%var430X.2.0 input.ind-%var430X.2.0)))
 (let (($x528 (=> $x524 $x527)))
 (let (($x525 (= $x524 $x524)))
 (let (($x521 (= input.ind-%var430X.0 (_ bv0 32))))
 (let (($x523 (=> $x521 $x79)))
 (let (($x522 (= $x521 $x521)))
 (let (($x454 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x536 (and (and (and (and (and $x454 $x522) $x523) $x525) $x528) $x531)))
 (let (($x582 (and $x536 $x581)))
 (let (($x72 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x583 (and $x72 $x582)))
 (let (($x519 (not true)))
 (let ((?x502 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var427X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x503 (concat ?x502 (select input.dst.llvm-mem (bvadd input.ind-%var427X (_ bv4 32))))))
 (let ((?x505 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var427X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x508 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var427X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x509 (concat ?x508 (concat ?x505 ?x503))))
 (let (($x510 (= input.ind-%var427X.2.1 ?x509)))
 (let (($x482 (bvuge input.ind-%var427X.0 (_ bv1 32))))
 (let (($x511 (=> $x482 $x510)))
 (let ((?x489 (concat (select input.dst.llvm-mem (bvadd input.ind-%var427X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var427X))))
 (let ((?x492 (concat (select input.dst.llvm-mem (bvadd input.ind-%var427X (_ bv2 32))) ?x489)))
 (let ((?x495 (concat (select input.dst.llvm-mem (bvadd input.ind-%var427X (_ bv3 32))) ?x492)))
 (let (($x496 (= input.ind-%var427X.2.0 ?x495)))
 (let (($x497 (=> $x482 $x496)))
 (let (($x477 (= (_ bv0 32) input.ind-%var427X)))
 (let ((?x478 (ite $x477 (_ bv0 32) (_ bv1 32))))
 (let (($x483 (bvuge ?x478 (_ bv1 32))))
 (let (($x484 (= $x482 $x483)))
 (let (($x475 (= input.ind-%var427X.0 (_ bv0 32))))
 (let (($x481 (=> $x475 $x79)))
 (let (($x479 (= ?x478 (_ bv0 32))))
 (let (($x480 (= $x475 $x479)))
 (let (($x473 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1 ?x149)))
 (let (($x516 (and (and (and (and (and $x473 $x480) $x481) $x484) $x497) $x511)))
 (let (($x465 (= input.ind-%var424X.2.1 input.ind-%var424X.2.1)))
 (let (($x459 (bvuge input.ind-%var424X.0 (_ bv1 32))))
 (let (($x466 (=> $x459 $x465)))
 (let (($x462 (= input.ind-%var424X.2.0 input.ind-%var424X.2.0)))
 (let (($x463 (=> $x459 $x462)))
 (let (($x460 (= $x459 $x459)))
 (let (($x456 (= input.ind-%var424X.0 (_ bv0 32))))
 (let (($x458 (=> $x456 $x79)))
 (let (($x471 (and (and (and (and (and $x454 (= $x456 $x456)) $x458) $x460) $x463) $x466)))
 (let (($x517 (and $x471 $x516)))
 (let (($x518 (and $x72 $x517)))
 (let ((?x436 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var421X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x437 (concat ?x436 (select input.dst.llvm-mem (bvadd input.ind-%var421X (_ bv4 32))))))
 (let ((?x439 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var421X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x442 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var421X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x443 (concat ?x442 (concat ?x439 ?x437))))
 (let (($x444 (= ?x443 ?x443)))
 (let (($x414 (= (_ bv0 32) input.ind-%var421X)))
 (let ((?x415 (ite $x414 (_ bv0 32) (_ bv1 32))))
 (let (($x419 (bvuge ?x415 (_ bv1 32))))
 (let (($x445 (=> $x419 $x444)))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.ind-%var421X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var421X))))
 (let ((?x427 (concat (select input.dst.llvm-mem (bvadd input.ind-%var421X (_ bv2 32))) ?x424)))
 (let ((?x430 (concat (select input.dst.llvm-mem (bvadd input.ind-%var421X (_ bv3 32))) ?x427)))
 (let (($x431 (= ?x430 ?x430)))
 (let (($x432 (=> $x419 $x431)))
 (let (($x420 (= $x419 $x419)))
 (let (($x416 (= ?x415 (_ bv0 32))))
 (let (($x418 (=> $x416 $x79)))
 (let (($x417 (= $x416 $x416)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x215 (concat ?x180 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x198 (concat ?x183 (concat ?x204 ?x215))))
 (let (($x412 (= ?x198 ?x149)))
 (let (($x450 (and (and (and (and (and $x412 $x417) $x418) $x420) $x432) $x445)))
 (let (($x405 (= input.ind-%var418X.2.1 input.ind-%var418X.2.1)))
 (let (($x399 (bvuge input.ind-%var418X.0 (_ bv1 32))))
 (let (($x406 (=> $x399 $x405)))
 (let (($x402 (= input.ind-%var418X.2.0 input.ind-%var418X.2.0)))
 (let (($x403 (=> $x399 $x402)))
 (let (($x400 (= $x399 $x399)))
 (let (($x396 (= input.ind-%var418X.0 (_ bv0 32))))
 (let (($x398 (=> $x396 $x79)))
 (let (($x397 (= $x396 $x396)))
 (let (($x394 (= input.spec-%var-l-0.2.1 input.spec-%var-l-0.2.1)))
 (let (($x411 (and (and (and (and (and $x394 $x397) $x398) $x400) $x403) $x406)))
 (let (($x451 (and $x411 $x450)))
 (let (($x18 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x452 (and $x18 $x451)))
 (let (($x586 (or (or (or $x452 $x518) $x519) $x583)))
 (let (($x587 (and true $x586)))
 (let (($x588 (= $x587 true)))
 (let (($x371 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x306 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x372 (= $x306 $x371)))
 (let (($x282 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x194 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x66 (and $x194 $x282)))
 (let (($x373 (=> $x66 $x372)))
 (let (($x368 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x301 (= input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x369 (= $x301 $x368)))
 (let (($x370 (=> $x66 $x369)))
 (let (($x365 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x366 (=> $x66 $x365)))
 (let (($x361 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x362 (= $x282 $x361)))
 (let (($x363 (=> $x194 $x362)))
 (let (($x210 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x294 (and $x194 $x210)))
 (let (($x295 (=> $x294 $x79)))
 (let (($x358 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x359 (= $x210 $x358)))
 (let (($x360 (=> $x194 $x359)))
 (let (($x355 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x356 (=> $x194 $x355)))
 (let (($x248 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x289 (=> $x248 $x79)))
 (let (($x352 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x353 (= $x194 $x352)))
 (let (($x350 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x351 (= $x248 $x350)))
 (let (($x379 (and (and (and (and (and (and $x351 $x353) $x289) $x356) $x360) $x295) $x363)))
 (let (($x382 (and (and (and $x379 $x366) $x370) $x373)))
 (let (($x383 (=> $x72 $x382)))
 (let (($x384 (= $x383 true)))
 (let (($x336 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x337 (= $x282 $x336)))
 (let (($x338 (=> $x194 $x337)))
 (let (($x333 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x334 (= $x210 $x333)))
 (let (($x335 (=> $x194 $x334)))
 (let (($x330 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0)))
 (let (($x331 (=> $x194 $x330)))
 (let (($x327 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x328 (= $x194 $x327)))
 (let (($x325 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x326 (= $x248 $x325)))
 (let (($x323 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x344 (and (and (and (and (and (and $x323 $x326) $x328) $x289) $x331) $x335) $x295)))
 (let (($x345 (and $x344 $x338)))
 (let (($x346 (=> $x72 $x345)))
 (let (($x347 (= $x346 true)))
 (let (($x307 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x308 (= $x306 $x307)))
 (let (($x309 (=> $x66 $x308)))
 (let (($x303 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x304 (= $x301 $x303)))
 (let (($x305 (=> $x66 $x304)))
 (let (($x298 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x299 (=> $x66 $x298)))
 (let (($x43 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x7 (= $x282 $x43)))
 (let (($x48 (=> $x194 $x7)))
 (let (($x291 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x292 (= $x210 $x291)))
 (let (($x293 (=> $x194 $x292)))
 (let (($x39 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x67 (=> $x194 $x39)))
 (let (($x287 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x288 (= $x194 $x287)))
 (let (($x285 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x286 (= $x248 $x285)))
 (let (($x315 (and (and (and (and (and (and $x286 $x288) $x289) $x67) $x293) $x295) $x48)))
 (let (($x318 (and (and (and $x315 $x299) $x305) $x309)))
 (let (($x319 (=> $x72 $x318)))
 (let (($x320 (= $x319 true)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x198 (_ bv4 32))))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x198 (_ bv4 32)) (_ bv2 32))) ?x231)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x198 (_ bv4 32)) (_ bv3 32))) ?x264)))
 (let ((?x224 (bvadd ?x236 (_ bv4 32))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv1 32))) (select input.dst.llvm-mem ?x224))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv2 32))) ?x242))))
 (let (($x227 (= (_ bv0 32) ?x244)))
 (let ((?x234 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x255 (bvuge ?x234 (_ bv1 32))))
 (let (($x256 (= $x282 $x255)))
 (let (($x195 (and $x72 $x194)))
 (let (($x257 (=> $x195 $x256)))
 (let (($x240 (= (_ bv0 32) ?x236)))
 (let ((?x241 (ite $x240 (_ bv0 32) (_ bv1 32))))
 (let (($x254 (= ?x241 (_ bv0 32))))
 (let (($x268 (= $x248 $x254)))
 (let (($x22 (=> $x72 $x268)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem ?x236))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv2 32))) ?x251))))
 (let (($x253 (= input.spec-%var-l-0.2.1.2.1.2.0 ?x21)))
 (let (($x271 (=> $x195 $x253)))
 (let (($x260 (and $x72 $x248)))
 (let (($x265 (=> $x260 $x79)))
 (let (($x247 (bvuge ?x241 (_ bv1 32))))
 (let (($x259 (= $x194 $x247)))
 (let (($x263 (=> $x72 $x259)))
 (let (($x245 (= ?x234 (_ bv0 32))))
 (let (($x246 (= $x210 $x245)))
 (let (($x262 (=> $x195 $x246)))
 (let (($x54 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x33 (=> $x54 $x79)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem ?x198))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv2 32))) ?x208))))
 (let (($x218 (= input.spec-%var-l-0.2.1.2.0 ?x217)))
 (let (($x192 (=> $x72 $x218)))
 (let (($x228 (= (_ bv0 32) ?x198)))
 (let ((?x184 (ite $x228 (_ bv0 32) (_ bv1 32))))
 (let (($x229 (bvuge ?x184 (_ bv1 32))))
 (let (($x185 (= $x72 $x229)))
 (let (($x205 (= ?x184 (_ bv0 32))))
 (let (($x199 (= $x54 $x205)))
 (let (($x273 (and (and (and (and (and (and $x199 $x185) $x192) $x33) $x262) $x263) $x265)))
 (let (($x283 (and (and (and $x273 $x271) $x22) $x257)))
 (let (($x276 (=> $x18 $x283)))
 (let (($x277 (= $x276 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x124 (concat ?x161 (concat ?x127 ?x119)))))
 (let (($x178 (= ?x120 input.dst.llvm-%l)))
 (let (($x196 (= $x178 true)))
 (let (($x201 (= (bvand ?x149 (_ bv4294967288 32)) ?x149)))
 (let (($x139 (= (bvand ?x49 (_ bv4294967292 32)) ?x49)))
 (let (($x173 (and $x139 $x201)))
 (let (($x144 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x142 (and true $x144)))
 (let (($x136 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x49 (bvsub ?x49 (_ bv4 32))) (bvult ?x49 (bvsub ?x49 (_ bv4 32))))))
 (let (($x202 (and (and (and $x136 $x142) $x139) $x173)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x38 (not $x34)))
 (let (($x176 (=> $x38 $x202)))
 (let (($x129 (= input.dst.llvm-%l ?x120)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x171)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x167 $x115)))
 (let (($x117 (and $x160 $x116)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x99 $x117)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x104)))))))
 (let (($x118 (and $x114 $x168)))
 (let (($x125 (and $x118 $x129)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x95)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x87)))
 (let (($x102 (= input.spec-%var-l-0.2.0 ?x98)))
 (let (($x163 (=> $x18 $x102)))
 (let ((?x12 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge ?x12 (_ bv1 32))))
 (let (($x88 (= $x18 $x84)))
 (let (($x90 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x86 (=> $x90 $x79)))
 (let (($x93 (= ?x12 (_ bv0 32))))
 (let (($x151 (= $x90 $x93)))
 (let (($x101 (and (and (and $x151 $x86) $x88) $x163)))
 (let (($x128 (and $x101 $x125)))
 (let (($x83 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x169 (and $x83 $x128)))
 (let (($x213 (and $x169 $x176)))
 (let (($x207 (= $x213 true)))
 (let (($x91 (= $x38 true)))
 (let (($x157 (= $x83 true)))
 (let (($x164 (and $x157 $x91)))
 (let (($x177 (and $x164 $x207)))
 (let (($x214 (and $x177 $x196)))
 (let (($x278 (and $x214 $x277)))
 (let (($x321 (and $x278 $x320)))
 (let (($x348 (and $x321 $x347)))
 (let (($x385 (and $x348 $x384)))
 (let (($x386 (and $x18 $x385)))
 (let (($x387 (and $x79 $x386)))
 (let (($x29 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x58 (=> $x72 $x29)))
 (let (($x6 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x75 (= $x72 $x6)))
 (let (($x68 (and (and (= $x54 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x33) $x75)))
 (let (($x30 (and $x68 $x58)))
 (let (($x388 (and $x30 $x387)))
 (let (($x14 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x35 (= $x72 $x14)))
 (let (($x156 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x63 (= $x54 $x156)))
 (let (($x17 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x24 (and (and (and $x17 $x63) $x33) $x35)))
 (let (($x389 (and $x24 $x388)))
 (let (($x76 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x41 (=> $x72 $x76)))
 (let (($x77 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x31 (= $x72 $x77)))
 (let (($x50 (and (and (= $x54 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))) $x33) $x31)))
 (let (($x70 (and $x50 $x41)))
 (let (($x390 (and $x70 $x389)))
 (let (($x20 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x391 (and $x20 $x390)))
 (let (($x52 (bvugt ?x49 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x5 (=> (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x52)))))))
 (let (($x26 (=> (and $x38 (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x59 $x52)))))))
 (let (($x392 (and $x26 $x391)))
 (let (($x589 (=> $x392 $x588)))
 (not $x589))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var433X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var433X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var433X.0 () (_ BitVec 32))
(declare-fun input.ind-%var433X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var430X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var430X.0 () (_ BitVec 32))
(declare-fun input.ind-%var430X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.ind-%var427X () (_ BitVec 32))
(declare-fun input.ind-%var427X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var427X.0 () (_ BitVec 32))
(declare-fun input.ind-%var427X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var424X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var424X.0 () (_ BitVec 32))
(declare-fun input.ind-%var424X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var421X () (_ BitVec 32))
(declare-fun input.ind-%var418X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var418X.0 () (_ BitVec 32))
(declare-fun input.ind-%var418X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x567 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var433X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x568 (concat ?x567 (select input.dst.llvm-mem (bvadd input.ind-%var433X (_ bv4 32))))))
 (let ((?x570 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var433X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x573 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var433X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x574 (concat ?x573 (concat ?x570 ?x568))))
 (let (($x575 (= input.ind-%var433X.2.1 ?x574)))
 (let (($x547 (bvuge input.ind-%var433X.0 (_ bv1 32))))
 (let (($x576 (=> $x547 $x575)))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd input.ind-%var433X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var433X))))
 (let ((?x557 (concat (select input.dst.llvm-mem (bvadd input.ind-%var433X (_ bv2 32))) ?x554)))
 (let ((?x560 (concat (select input.dst.llvm-mem (bvadd input.ind-%var433X (_ bv3 32))) ?x557)))
 (let (($x561 (= input.ind-%var433X.2.0 ?x560)))
 (let (($x562 (=> $x547 $x561)))
 (let (($x542 (= (_ bv0 32) input.ind-%var433X)))
 (let ((?x543 (ite $x542 (_ bv0 32) (_ bv1 32))))
 (let (($x548 (bvuge ?x543 (_ bv1 32))))
 (let (($x549 (= $x547 $x548)))
 (let (($x79 (= false false)))
 (let (($x540 (= input.ind-%var433X.0 (_ bv0 32))))
 (let (($x546 (=> $x540 $x79)))
 (let (($x544 (= ?x543 (_ bv0 32))))
 (let (($x545 (= $x540 $x544)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x146 (concat ?x143 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x49 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x51 (bvadd ?x49 (_ bv3 32))))
 (let ((?x149 (concat (select input.dst.llvm-mem ?x51) (concat ?x172 ?x146))))
 (let (($x538 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1 ?x149)))
 (let (($x581 (and (and (and (and (and $x538 $x545) $x546) $x549) $x562) $x576)))
 (let (($x530 (= input.ind-%var430X.2.1 input.ind-%var430X.2.1)))
 (let (($x524 (bvuge input.ind-%var430X.0 (_ bv1 32))))
 (let (($x531 (=> $x524 $x530)))
 (let (($x527 (= input.ind-%var430X.2.0 input.ind-%var430X.2.0)))
 (let (($x528 (=> $x524 $x527)))
 (let (($x525 (= $x524 $x524)))
 (let (($x521 (= input.ind-%var430X.0 (_ bv0 32))))
 (let (($x523 (=> $x521 $x79)))
 (let (($x522 (= $x521 $x521)))
 (let (($x454 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x536 (and (and (and (and (and $x454 $x522) $x523) $x525) $x528) $x531)))
 (let (($x582 (and $x536 $x581)))
 (let (($x72 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x583 (and $x72 $x582)))
 (let (($x519 (not true)))
 (let ((?x502 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var427X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x503 (concat ?x502 (select input.dst.llvm-mem (bvadd input.ind-%var427X (_ bv4 32))))))
 (let ((?x505 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var427X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x508 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var427X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x509 (concat ?x508 (concat ?x505 ?x503))))
 (let (($x510 (= input.ind-%var427X.2.1 ?x509)))
 (let (($x482 (bvuge input.ind-%var427X.0 (_ bv1 32))))
 (let (($x511 (=> $x482 $x510)))
 (let ((?x489 (concat (select input.dst.llvm-mem (bvadd input.ind-%var427X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var427X))))
 (let ((?x492 (concat (select input.dst.llvm-mem (bvadd input.ind-%var427X (_ bv2 32))) ?x489)))
 (let ((?x495 (concat (select input.dst.llvm-mem (bvadd input.ind-%var427X (_ bv3 32))) ?x492)))
 (let (($x496 (= input.ind-%var427X.2.0 ?x495)))
 (let (($x497 (=> $x482 $x496)))
 (let (($x477 (= (_ bv0 32) input.ind-%var427X)))
 (let ((?x478 (ite $x477 (_ bv0 32) (_ bv1 32))))
 (let (($x483 (bvuge ?x478 (_ bv1 32))))
 (let (($x484 (= $x482 $x483)))
 (let (($x475 (= input.ind-%var427X.0 (_ bv0 32))))
 (let (($x481 (=> $x475 $x79)))
 (let (($x479 (= ?x478 (_ bv0 32))))
 (let (($x480 (= $x475 $x479)))
 (let (($x473 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1 ?x149)))
 (let (($x516 (and (and (and (and (and $x473 $x480) $x481) $x484) $x497) $x511)))
 (let (($x465 (= input.ind-%var424X.2.1 input.ind-%var424X.2.1)))
 (let (($x459 (bvuge input.ind-%var424X.0 (_ bv1 32))))
 (let (($x466 (=> $x459 $x465)))
 (let (($x462 (= input.ind-%var424X.2.0 input.ind-%var424X.2.0)))
 (let (($x463 (=> $x459 $x462)))
 (let (($x460 (= $x459 $x459)))
 (let (($x456 (= input.ind-%var424X.0 (_ bv0 32))))
 (let (($x458 (=> $x456 $x79)))
 (let (($x471 (and (and (and (and (and $x454 (= $x456 $x456)) $x458) $x460) $x463) $x466)))
 (let (($x517 (and $x471 $x516)))
 (let (($x518 (and $x72 $x517)))
 (let ((?x436 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var421X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x437 (concat ?x436 (select input.dst.llvm-mem (bvadd input.ind-%var421X (_ bv4 32))))))
 (let ((?x439 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var421X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x442 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var421X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x443 (concat ?x442 (concat ?x439 ?x437))))
 (let (($x444 (= ?x443 ?x443)))
 (let (($x414 (= (_ bv0 32) input.ind-%var421X)))
 (let ((?x415 (ite $x414 (_ bv0 32) (_ bv1 32))))
 (let (($x419 (bvuge ?x415 (_ bv1 32))))
 (let (($x445 (=> $x419 $x444)))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.ind-%var421X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var421X))))
 (let ((?x427 (concat (select input.dst.llvm-mem (bvadd input.ind-%var421X (_ bv2 32))) ?x424)))
 (let ((?x430 (concat (select input.dst.llvm-mem (bvadd input.ind-%var421X (_ bv3 32))) ?x427)))
 (let (($x431 (= ?x430 ?x430)))
 (let (($x432 (=> $x419 $x431)))
 (let (($x420 (= $x419 $x419)))
 (let (($x416 (= ?x415 (_ bv0 32))))
 (let (($x418 (=> $x416 $x79)))
 (let (($x417 (= $x416 $x416)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x215 (concat ?x180 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x198 (concat ?x183 (concat ?x204 ?x215))))
 (let (($x412 (= ?x198 ?x149)))
 (let (($x450 (and (and (and (and (and $x412 $x417) $x418) $x420) $x432) $x445)))
 (let (($x405 (= input.ind-%var418X.2.1 input.ind-%var418X.2.1)))
 (let (($x399 (bvuge input.ind-%var418X.0 (_ bv1 32))))
 (let (($x406 (=> $x399 $x405)))
 (let (($x402 (= input.ind-%var418X.2.0 input.ind-%var418X.2.0)))
 (let (($x403 (=> $x399 $x402)))
 (let (($x400 (= $x399 $x399)))
 (let (($x396 (= input.ind-%var418X.0 (_ bv0 32))))
 (let (($x398 (=> $x396 $x79)))
 (let (($x397 (= $x396 $x396)))
 (let (($x394 (= input.spec-%var-l-0.2.1 input.spec-%var-l-0.2.1)))
 (let (($x411 (and (and (and (and (and $x394 $x397) $x398) $x400) $x403) $x406)))
 (let (($x451 (and $x411 $x450)))
 (let (($x18 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x452 (and $x18 $x451)))
 (let (($x586 (or (or (or $x452 $x518) $x519) $x583)))
 (let (($x587 (and true $x586)))
 (let (($x588 (= $x587 true)))
 (let (($x371 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x306 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x372 (= $x306 $x371)))
 (let (($x282 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x194 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x66 (and $x194 $x282)))
 (let (($x373 (=> $x66 $x372)))
 (let (($x368 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x301 (= input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x369 (= $x301 $x368)))
 (let (($x370 (=> $x66 $x369)))
 (let (($x365 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x366 (=> $x66 $x365)))
 (let (($x361 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x362 (= $x282 $x361)))
 (let (($x363 (=> $x194 $x362)))
 (let (($x210 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x294 (and $x194 $x210)))
 (let (($x295 (=> $x294 $x79)))
 (let (($x358 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x359 (= $x210 $x358)))
 (let (($x360 (=> $x194 $x359)))
 (let (($x355 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x356 (=> $x194 $x355)))
 (let (($x248 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x289 (=> $x248 $x79)))
 (let (($x352 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x353 (= $x194 $x352)))
 (let (($x350 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x351 (= $x248 $x350)))
 (let (($x379 (and (and (and (and (and (and $x351 $x353) $x289) $x356) $x360) $x295) $x363)))
 (let (($x382 (and (and (and $x379 $x366) $x370) $x373)))
 (let (($x383 (=> $x72 $x382)))
 (let (($x384 (= $x383 true)))
 (let (($x336 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x337 (= $x282 $x336)))
 (let (($x338 (=> $x194 $x337)))
 (let (($x333 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x334 (= $x210 $x333)))
 (let (($x335 (=> $x194 $x334)))
 (let (($x330 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0)))
 (let (($x331 (=> $x194 $x330)))
 (let (($x327 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x328 (= $x194 $x327)))
 (let (($x325 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x326 (= $x248 $x325)))
 (let (($x323 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x344 (and (and (and (and (and (and $x323 $x326) $x328) $x289) $x331) $x335) $x295)))
 (let (($x345 (and $x344 $x338)))
 (let (($x346 (=> $x72 $x345)))
 (let (($x347 (= $x346 true)))
 (let (($x307 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x308 (= $x306 $x307)))
 (let (($x309 (=> $x66 $x308)))
 (let (($x303 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x304 (= $x301 $x303)))
 (let (($x305 (=> $x66 $x304)))
 (let (($x298 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x299 (=> $x66 $x298)))
 (let (($x43 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x7 (= $x282 $x43)))
 (let (($x48 (=> $x194 $x7)))
 (let (($x291 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x292 (= $x210 $x291)))
 (let (($x293 (=> $x194 $x292)))
 (let (($x39 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x67 (=> $x194 $x39)))
 (let (($x287 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x288 (= $x194 $x287)))
 (let (($x285 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x286 (= $x248 $x285)))
 (let (($x315 (and (and (and (and (and (and $x286 $x288) $x289) $x67) $x293) $x295) $x48)))
 (let (($x318 (and (and (and $x315 $x299) $x305) $x309)))
 (let (($x319 (=> $x72 $x318)))
 (let (($x320 (= $x319 true)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x198 (_ bv4 32))))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x198 (_ bv4 32)) (_ bv2 32))) ?x231)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x198 (_ bv4 32)) (_ bv3 32))) ?x264)))
 (let ((?x224 (bvadd ?x236 (_ bv4 32))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv1 32))) (select input.dst.llvm-mem ?x224))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv2 32))) ?x242))))
 (let (($x227 (= (_ bv0 32) ?x244)))
 (let ((?x234 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x255 (bvuge ?x234 (_ bv1 32))))
 (let (($x256 (= $x282 $x255)))
 (let (($x195 (and $x72 $x194)))
 (let (($x257 (=> $x195 $x256)))
 (let (($x240 (= (_ bv0 32) ?x236)))
 (let ((?x241 (ite $x240 (_ bv0 32) (_ bv1 32))))
 (let (($x254 (= ?x241 (_ bv0 32))))
 (let (($x268 (= $x248 $x254)))
 (let (($x22 (=> $x72 $x268)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem ?x236))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv2 32))) ?x251))))
 (let (($x253 (= input.spec-%var-l-0.2.1.2.1.2.0 ?x21)))
 (let (($x271 (=> $x195 $x253)))
 (let (($x260 (and $x72 $x248)))
 (let (($x265 (=> $x260 $x79)))
 (let (($x247 (bvuge ?x241 (_ bv1 32))))
 (let (($x259 (= $x194 $x247)))
 (let (($x263 (=> $x72 $x259)))
 (let (($x245 (= ?x234 (_ bv0 32))))
 (let (($x246 (= $x210 $x245)))
 (let (($x262 (=> $x195 $x246)))
 (let (($x54 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x33 (=> $x54 $x79)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem ?x198))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv2 32))) ?x208))))
 (let (($x218 (= input.spec-%var-l-0.2.1.2.0 ?x217)))
 (let (($x192 (=> $x72 $x218)))
 (let (($x228 (= (_ bv0 32) ?x198)))
 (let ((?x184 (ite $x228 (_ bv0 32) (_ bv1 32))))
 (let (($x229 (bvuge ?x184 (_ bv1 32))))
 (let (($x185 (= $x72 $x229)))
 (let (($x205 (= ?x184 (_ bv0 32))))
 (let (($x199 (= $x54 $x205)))
 (let (($x273 (and (and (and (and (and (and $x199 $x185) $x192) $x33) $x262) $x263) $x265)))
 (let (($x283 (and (and (and $x273 $x271) $x22) $x257)))
 (let (($x276 (=> $x18 $x283)))
 (let (($x277 (= $x276 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x124 (concat ?x161 (concat ?x127 ?x119)))))
 (let (($x178 (= ?x120 input.dst.llvm-%l)))
 (let (($x196 (= $x178 true)))
 (let (($x201 (= (bvand ?x149 (_ bv4294967288 32)) ?x149)))
 (let (($x139 (= (bvand ?x49 (_ bv4294967292 32)) ?x49)))
 (let (($x173 (and $x139 $x201)))
 (let (($x144 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x142 (and true $x144)))
 (let (($x136 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x49 (bvsub ?x49 (_ bv4 32))) (bvult ?x49 (bvsub ?x49 (_ bv4 32))))))
 (let (($x202 (and (and (and $x136 $x142) $x139) $x173)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x38 (not $x34)))
 (let (($x176 (=> $x38 $x202)))
 (let (($x129 (= input.dst.llvm-%l ?x120)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x171)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x167 $x115)))
 (let (($x117 (and $x160 $x116)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x99 $x117)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x104)))))))
 (let (($x118 (and $x114 $x168)))
 (let (($x125 (and $x118 $x129)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x95)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x87)))
 (let (($x102 (= input.spec-%var-l-0.2.0 ?x98)))
 (let (($x163 (=> $x18 $x102)))
 (let ((?x12 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge ?x12 (_ bv1 32))))
 (let (($x88 (= $x18 $x84)))
 (let (($x90 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x86 (=> $x90 $x79)))
 (let (($x93 (= ?x12 (_ bv0 32))))
 (let (($x151 (= $x90 $x93)))
 (let (($x101 (and (and (and $x151 $x86) $x88) $x163)))
 (let (($x128 (and $x101 $x125)))
 (let (($x83 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x169 (and $x83 $x128)))
 (let (($x213 (and $x169 $x176)))
 (let (($x207 (= $x213 true)))
 (let (($x91 (= $x38 true)))
 (let (($x157 (= $x83 true)))
 (let (($x164 (and $x157 $x91)))
 (let (($x177 (and $x164 $x207)))
 (let (($x214 (and $x177 $x196)))
 (let (($x278 (and $x214 $x277)))
 (let (($x321 (and $x278 $x320)))
 (let (($x348 (and $x321 $x347)))
 (let (($x385 (and $x348 $x384)))
 (let (($x386 (and $x18 $x385)))
 (let (($x387 (and $x79 $x386)))
 (let (($x29 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x58 (=> $x72 $x29)))
 (let (($x6 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x75 (= $x72 $x6)))
 (let (($x68 (and (and (= $x54 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x33) $x75)))
 (let (($x30 (and $x68 $x58)))
 (let (($x388 (and $x30 $x387)))
 (let (($x14 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x35 (= $x72 $x14)))
 (let (($x156 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x63 (= $x54 $x156)))
 (let (($x17 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x24 (and (and (and $x17 $x63) $x33) $x35)))
 (let (($x389 (and $x24 $x388)))
 (let (($x76 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x41 (=> $x72 $x76)))
 (let (($x77 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x31 (= $x72 $x77)))
 (let (($x50 (and (and (= $x54 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))) $x33) $x31)))
 (let (($x70 (and $x50 $x41)))
 (let (($x390 (and $x70 $x389)))
 (let (($x20 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x391 (and $x20 $x390)))
 (let (($x52 (bvugt ?x49 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x5 (=> (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x52)))))))
 (let (($x26 (=> (and $x38 (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x59 $x52)))))))
 (let (($x392 (and $x26 $x391)))
 (let (($x589 (=> $x392 $x588)))
 (not $x589))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791879/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var493X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var493X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var493X.0 () (_ BitVec 32))
(declare-fun input.ind-%var493X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var490X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var490X.0 () (_ BitVec 32))
(declare-fun input.ind-%var490X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.ind-%var487X () (_ BitVec 32))
(declare-fun input.ind-%var487X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var487X.0 () (_ BitVec 32))
(declare-fun input.ind-%var487X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var484X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var484X.0 () (_ BitVec 32))
(declare-fun input.ind-%var484X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var481X () (_ BitVec 32))
(declare-fun input.ind-%var478X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var478X.0 () (_ BitVec 32))
(declare-fun input.ind-%var478X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x572 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var493X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x573 (concat ?x572 (select input.dst.llvm-mem (bvadd input.ind-%var493X (_ bv4 32))))))
 (let ((?x570 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var493X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x565 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var493X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x568 (concat ?x565 (concat ?x570 ?x573))))
 (let (($x571 (= input.ind-%var493X.2.1 ?x568)))
 (let (($x547 (bvuge input.ind-%var493X.0 (_ bv1 32))))
 (let (($x574 (=> $x547 $x571)))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd input.ind-%var493X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var493X))))
 (let ((?x553 (concat (select input.dst.llvm-mem (bvadd input.ind-%var493X (_ bv2 32))) ?x555)))
 (let ((?x557 (concat (select input.dst.llvm-mem (bvadd input.ind-%var493X (_ bv3 32))) ?x553)))
 (let (($x560 (= input.ind-%var493X.2.0 ?x557)))
 (let (($x561 (=> $x547 $x560)))
 (let (($x544 (= (_ bv0 32) input.ind-%var493X)))
 (let ((?x545 (ite $x544 (_ bv0 32) (_ bv1 32))))
 (let (($x548 (bvuge ?x545 (_ bv1 32))))
 (let (($x549 (= $x547 $x548)))
 (let (($x10 (= false false)))
 (let (($x542 (= input.ind-%var493X.0 (_ bv0 32))))
 (let (($x578 (=> $x542 $x10)))
 (let (($x577 (= ?x545 (_ bv0 32))))
 (let (($x546 (= $x542 $x577)))
 (let (($x540 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1 input.dst.llvm-%l)))
 (let (($x583 (and (and (and (and (and $x540 $x546) $x578) $x549) $x561) $x574)))
 (let (($x535 (= input.ind-%var490X.2.1 input.ind-%var490X.2.1)))
 (let (($x524 (bvuge input.ind-%var490X.0 (_ bv1 32))))
 (let (($x529 (=> $x524 $x535)))
 (let (($x526 (= input.ind-%var490X.2.0 input.ind-%var490X.2.0)))
 (let (($x527 (=> $x524 $x526)))
 (let (($x525 (= $x524 $x524)))
 (let (($x532 (= input.ind-%var490X.0 (_ bv0 32))))
 (let (($x533 (=> $x532 $x10)))
 (let (($x523 (= $x532 $x532)))
 (let (($x467 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x538 (and (and (and (and (and $x467 $x523) $x533) $x525) $x527) $x529)))
 (let (($x586 (and $x538 $x583)))
 (let (($x77 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x587 (and $x77 $x586)))
 (let (($x521 (not true)))
 (let ((?x504 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var487X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x505 (concat ?x504 (select input.dst.llvm-mem (bvadd input.ind-%var487X (_ bv4 32))))))
 (let ((?x502 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var487X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x506 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var487X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x509 (concat ?x506 (concat ?x502 ?x505))))
 (let (($x510 (= input.ind-%var487X.2.1 ?x509)))
 (let (($x484 (bvuge input.ind-%var487X.0 (_ bv1 32))))
 (let (($x511 (=> $x484 $x510)))
 (let ((?x487 (concat (select input.dst.llvm-mem (bvadd input.ind-%var487X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var487X))))
 (let ((?x489 (concat (select input.dst.llvm-mem (bvadd input.ind-%var487X (_ bv2 32))) ?x487)))
 (let ((?x496 (concat (select input.dst.llvm-mem (bvadd input.ind-%var487X (_ bv3 32))) ?x489)))
 (let (($x497 (= input.ind-%var487X.2.0 ?x496)))
 (let (($x515 (=> $x484 $x497)))
 (let (($x512 (= (_ bv0 32) input.ind-%var487X)))
 (let ((?x481 (ite $x512 (_ bv0 32) (_ bv1 32))))
 (let (($x514 (bvuge ?x481 (_ bv1 32))))
 (let (($x485 (= $x484 $x514)))
 (let (($x479 (= input.ind-%var487X.0 (_ bv0 32))))
 (let (($x483 (=> $x479 $x10)))
 (let (($x513 (= ?x481 (_ bv0 32))))
 (let (($x482 (= $x479 $x513)))
 (let (($x477 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1 input.dst.llvm-%l)))
 (let (($x519 (and (and (and (and (and $x477 $x482) $x483) $x485) $x515) $x511)))
 (let (($x465 (= input.ind-%var484X.2.1 input.ind-%var484X.2.1)))
 (let (($x469 (bvuge input.ind-%var484X.0 (_ bv1 32))))
 (let (($x466 (=> $x469 $x465)))
 (let (($x463 (= input.ind-%var484X.2.0 input.ind-%var484X.2.0)))
 (let (($x470 (=> $x469 $x463)))
 (let (($x461 (= $x469 $x469)))
 (let (($x468 (= input.ind-%var484X.0 (_ bv0 32))))
 (let (($x460 (=> $x468 $x10)))
 (let (($x475 (and (and (and (and (and $x467 (= $x468 $x468)) $x460) $x461) $x470) $x466)))
 (let (($x585 (and $x475 $x519)))
 (let (($x520 (and $x77 $x585)))
 (let ((?x438 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var481X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x439 (concat ?x438 (select input.dst.llvm-mem (bvadd input.ind-%var481X (_ bv4 32))))))
 (let ((?x436 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var481X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x440 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var481X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x443 (concat ?x440 (concat ?x436 ?x439))))
 (let (($x444 (= ?x443 ?x443)))
 (let (($x446 (= (_ bv0 32) input.ind-%var481X)))
 (let ((?x418 (ite $x446 (_ bv0 32) (_ bv1 32))))
 (let (($x448 (bvuge ?x418 (_ bv1 32))))
 (let (($x445 (=> $x448 $x444)))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd input.ind-%var481X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var481X))))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.ind-%var481X (_ bv2 32))) ?x422)))
 (let ((?x431 (concat (select input.dst.llvm-mem (bvadd input.ind-%var481X (_ bv3 32))) ?x424)))
 (let (($x432 (= ?x431 ?x431)))
 (let (($x449 (=> $x448 $x432)))
 (let (($x428 (= $x448 $x448)))
 (let (($x447 (= ?x418 (_ bv0 32))))
 (let (($x420 (=> $x447 $x10)))
 (let (($x419 (= $x447 $x447)))
 (let ((?x203 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x215 (concat ?x203 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x199 (concat ?x205 (concat ?x198 ?x215))))
 (let (($x416 (= ?x199 input.dst.llvm-%l)))
 (let (($x454 (and (and (and (and (and $x416 $x419) $x420) $x428) $x449) $x445)))
 (let (($x405 (= input.ind-%var478X.2.1 input.ind-%var478X.2.1)))
 (let (($x409 (bvuge input.ind-%var478X.0 (_ bv1 32))))
 (let (($x406 (=> $x409 $x405)))
 (let (($x403 (= input.ind-%var478X.2.0 input.ind-%var478X.2.0)))
 (let (($x410 (=> $x409 $x403)))
 (let (($x401 (= $x409 $x409)))
 (let (($x408 (= input.ind-%var478X.0 (_ bv0 32))))
 (let (($x400 (=> $x408 $x10)))
 (let (($x399 (= $x408 $x408)))
 (let (($x407 (= input.spec-%var-l-0.2.1 input.spec-%var-l-0.2.1)))
 (let (($x415 (and (and (and (and (and $x407 $x399) $x400) $x401) $x410) $x406)))
 (let (($x455 (and $x415 $x454)))
 (let (($x157 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x456 (and $x157 $x455)))
 (let (($x590 (or (or (or $x456 $x520) $x521) $x587)))
 (let (($x56 (and true $x590)))
 (let (($x81 (= $x56 true)))
 (let (($x368 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x303 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x369 (= $x303 $x368)))
 (let (($x254 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x195 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x48 (and $x195 $x254)))
 (let (($x370 (=> $x48 $x369)))
 (let (($x366 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x299 (= input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x380 (= $x299 $x366)))
 (let (($x367 (=> $x48 $x380)))
 (let (($x379 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x364 (=> $x48 $x379)))
 (let (($x378 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x361 (= $x254 $x378)))
 (let (($x362 (=> $x195 $x361)))
 (let (($x219 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x294 (and $x195 $x219)))
 (let (($x295 (=> $x294 $x10)))
 (let (($x359 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x360 (= $x219 $x359)))
 (let (($x377 (=> $x195 $x360)))
 (let (($x376 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x357 (=> $x195 $x376)))
 (let (($x269 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x39 (=> $x269 $x10)))
 (let (($x354 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x355 (= $x195 $x354)))
 (let (($x374 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x375 (= $x269 $x374)))
 (let (($x383 (and (and (and (and (and (and $x375 $x355) $x39) $x357) $x377) $x295) $x362)))
 (let (($x386 (and (and (and $x383 $x364) $x367) $x370)))
 (let (($x387 (=> $x77 $x386)))
 (let (($x388 (= $x387 true)))
 (let (($x343 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x344 (= $x254 $x343)))
 (let (($x336 (=> $x195 $x344)))
 (let (($x333 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x334 (= $x219 $x333)))
 (let (($x335 (=> $x195 $x334)))
 (let (($x331 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0)))
 (let (($x342 (=> $x195 $x331)))
 (let (($x341 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x329 (= $x195 $x341)))
 (let (($x328 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x340 (= $x269 $x328)))
 (let (($x339 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x348 (and (and (and (and (and (and $x339 $x340) $x329) $x39) $x342) $x335) $x295)))
 (let (($x349 (and $x348 $x336)))
 (let (($x350 (=> $x77 $x349)))
 (let (($x351 (= $x350 true)))
 (let (($x304 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x305 (= $x303 $x304)))
 (let (($x317 (=> $x48 $x305)))
 (let (($x300 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x301 (= $x299 $x300)))
 (let (($x302 (=> $x48 $x301)))
 (let (($x296 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x297 (=> $x48 $x296)))
 (let (($x314 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x43 (= $x254 $x314)))
 (let (($x7 (=> $x195 $x43)))
 (let (($x292 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x293 (= $x219 $x292)))
 (let (($x313 (=> $x195 $x293)))
 (let (($x312 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x290 (=> $x195 $x312)))
 (let (($x311 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x42 (= $x195 $x311)))
 (let (($x310 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x289 (= $x269 $x310)))
 (let (($x319 (and (and (and (and (and (and $x289 $x42) $x39) $x290) $x313) $x295) $x7)))
 (let (($x322 (and (and (and $x319 $x297) $x302) $x317)))
 (let (($x323 (=> $x77 $x322)))
 (let (($x324 (= $x323 true)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x199 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x199 (_ bv4 32))))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x199 (_ bv4 32)) (_ bv2 32))) ?x212)))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x199 (_ bv4 32)) (_ bv3 32))) ?x231)))
 (let ((?x238 (bvadd ?x224 (_ bv4 32))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x233))))
 (let (($x234 (= (_ bv0 32) ?x227)))
 (let ((?x245 (ite $x234 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (bvuge ?x245 (_ bv1 32))))
 (let (($x22 (= $x254 $x268)))
 (let (($x209 (and $x77 $x195)))
 (let (($x275 (=> $x209 $x22)))
 (let (($x240 (= (_ bv0 32) ?x224)))
 (let ((?x241 (ite $x240 (_ bv0 32) (_ bv1 32))))
 (let (($x253 (= ?x241 (_ bv0 32))))
 (let (($x271 (= $x269 $x253)))
 (let (($x274 (=> $x77 $x271)))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv1 32))) (select input.dst.llvm-mem ?x224))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv2 32))) ?x252))))
 (let (($x261 (= input.spec-%var-l-0.2.1.2.1.2.0 ?x251)))
 (let (($x21 (=> $x209 $x261)))
 (let (($x248 (and $x77 $x269)))
 (let (($x260 (=> $x248 $x10)))
 (let (($x247 (bvuge ?x241 (_ bv1 32))))
 (let (($x259 (= $x195 $x247)))
 (let (($x263 (=> $x77 $x259)))
 (let (($x246 (= ?x245 (_ bv0 32))))
 (let (($x262 (= $x219 $x246)))
 (let (($x280 (=> $x209 $x262)))
 (let (($x23 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x72 (=> $x23 $x10)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem ?x199))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv2 32))) ?x186))))
 (let (($x60 (= input.spec-%var-l-0.2.1.2.0 ?x272)))
 (let (($x193 (=> $x77 $x60)))
 (let (($x229 (= (_ bv0 32) ?x199)))
 (let ((?x185 (ite $x229 (_ bv0 32) (_ bv1 32))))
 (let (($x191 (bvuge ?x185 (_ bv1 32))))
 (let (($x188 (= $x77 $x191)))
 (let (($x258 (= ?x185 (_ bv0 32))))
 (let (($x190 (= $x23 $x258)))
 (let (($x276 (and (and (and (and (and (and $x190 $x188) $x193) $x72) $x280) $x263) $x260)))
 (let (($x284 (and (and (and $x276 $x21) $x274) $x275)))
 (let (($x285 (=> $x157 $x284)))
 (let (($x286 (= $x285 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x128 (concat ?x120 (concat ?x119 ?x123)))))
 (let (($x182 (= ?x169 input.dst.llvm-%l)))
 (let (($x183 (= $x182 true)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x137 (concat ?x143 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x37 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x16 (bvadd ?x37 (_ bv3 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem ?x16) (concat ?x170 ?x137))))
 (let (($x202 (= (bvand ?x201 (_ bv4294967288 32)) ?x201)))
 (let (($x147 (= (bvand ?x37 (_ bv4294967292 32)) ?x37)))
 (let (($x176 (and $x147 $x202)))
 (let (($x162 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x139 (and true $x162)))
 (let (($x138 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x37 (bvsub ?x37 (_ bv4 32))) (bvult ?x37 (bvsub ?x37 (_ bv4 32))))))
 (let (($x177 (and (and (and $x138 $x139) $x147) $x176)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x38 (not $x34)))
 (let (($x178 (=> $x38 $x177)))
 (let (($x131 (= input.dst.llvm-%l ?x169)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x168)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x160 $x116)))
 (let (($x126 (and $x117 $x118)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x107 $x126)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x166)))))))
 (let (($x121 (and $x115 $x124)))
 (let (($x154 (and $x121 $x131)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x85)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x165)))
 (let (($x102 (= input.spec-%var-l-0.2.0 ?x98)))
 (let (($x163 (=> $x157 $x102)))
 (let ((?x86 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x88 (bvuge ?x86 (_ bv1 32))))
 (let (($x100 (= $x157 $x88)))
 (let (($x151 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x84 (=> $x151 $x10)))
 (let (($x105 (= ?x86 (_ bv0 32))))
 (let (($x18 (= $x151 $x105)))
 (let (($x103 (and (and (and $x18 $x84) $x100) $x163)))
 (let (($x132 (and $x103 $x154)))
 (let (($x45 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x133 (and $x45 $x132)))
 (let (($x196 (and $x133 $x178)))
 (let (($x214 (= $x196 true)))
 (let (($x12 (= $x34 true)))
 (let (($x90 (= $x45 true)))
 (let (($x93 (and $x90 $x12)))
 (let (($x179 (and $x93 $x214)))
 (let (($x181 (and $x179 $x183)))
 (let (($x287 (and $x181 $x286)))
 (let (($x325 (and $x287 $x324)))
 (let (($x352 (and $x325 $x351)))
 (let (($x389 (and $x352 $x388)))
 (let (($x390 (and $x157 $x389)))
 (let (($x391 (and $x10 $x390)))
 (let (($x29 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x58 (=> $x77 $x29)))
 (let (($x75 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x68 (= $x77 $x75)))
 (let (($x82 (and (and (= $x23 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x72) $x68)))
 (let (($x155 (and $x82 $x58)))
 (let (($x392 (and $x155 $x391)))
 (let (($x14 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x35 (= $x77 $x14)))
 (let (($x71 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x62 (= $x23 $x71)))
 (let (($x156 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x36 (and (and (and $x156 $x62) $x72) $x35)))
 (let (($x393 (and $x36 $x392)))
 (let (($x76 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x41 (=> $x77 $x76)))
 (let (($x31 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x50 (= $x77 $x31)))
 (let (($x78 (and (and (= $x23 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))) $x72) $x50)))
 (let (($x17 (and $x78 $x41)))
 (let (($x394 (and $x17 $x393)))
 (let (($x54 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x395 (and $x54 $x394)))
 (let (($x61 (bvugt ?x37 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x20 (=> (bvule ?x37 (bvsub (bvadd ?x37 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x61)))))))
 (let (($x40 (=> (and $x38 (bvule ?x37 (bvsub (bvadd ?x37 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x32 $x61)))))))
 (let (($x396 (and $x40 $x395)))
 (let (($x110 (=> $x396 $x81)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var493X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var493X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var493X.0 () (_ BitVec 32))
(declare-fun input.ind-%var493X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var490X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var490X.0 () (_ BitVec 32))
(declare-fun input.ind-%var490X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.ind-%var487X () (_ BitVec 32))
(declare-fun input.ind-%var487X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var487X.0 () (_ BitVec 32))
(declare-fun input.ind-%var487X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var484X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var484X.0 () (_ BitVec 32))
(declare-fun input.ind-%var484X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var481X () (_ BitVec 32))
(declare-fun input.ind-%var478X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var478X.0 () (_ BitVec 32))
(declare-fun input.ind-%var478X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x572 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var493X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x573 (concat ?x572 (select input.dst.llvm-mem (bvadd input.ind-%var493X (_ bv4 32))))))
 (let ((?x570 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var493X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x565 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var493X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x568 (concat ?x565 (concat ?x570 ?x573))))
 (let (($x571 (= input.ind-%var493X.2.1 ?x568)))
 (let (($x547 (bvuge input.ind-%var493X.0 (_ bv1 32))))
 (let (($x574 (=> $x547 $x571)))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd input.ind-%var493X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var493X))))
 (let ((?x553 (concat (select input.dst.llvm-mem (bvadd input.ind-%var493X (_ bv2 32))) ?x555)))
 (let ((?x557 (concat (select input.dst.llvm-mem (bvadd input.ind-%var493X (_ bv3 32))) ?x553)))
 (let (($x560 (= input.ind-%var493X.2.0 ?x557)))
 (let (($x561 (=> $x547 $x560)))
 (let (($x544 (= (_ bv0 32) input.ind-%var493X)))
 (let ((?x545 (ite $x544 (_ bv0 32) (_ bv1 32))))
 (let (($x548 (bvuge ?x545 (_ bv1 32))))
 (let (($x549 (= $x547 $x548)))
 (let (($x10 (= false false)))
 (let (($x542 (= input.ind-%var493X.0 (_ bv0 32))))
 (let (($x578 (=> $x542 $x10)))
 (let (($x577 (= ?x545 (_ bv0 32))))
 (let (($x546 (= $x542 $x577)))
 (let (($x540 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1 input.dst.llvm-%l)))
 (let (($x583 (and (and (and (and (and $x540 $x546) $x578) $x549) $x561) $x574)))
 (let (($x535 (= input.ind-%var490X.2.1 input.ind-%var490X.2.1)))
 (let (($x524 (bvuge input.ind-%var490X.0 (_ bv1 32))))
 (let (($x529 (=> $x524 $x535)))
 (let (($x526 (= input.ind-%var490X.2.0 input.ind-%var490X.2.0)))
 (let (($x527 (=> $x524 $x526)))
 (let (($x525 (= $x524 $x524)))
 (let (($x532 (= input.ind-%var490X.0 (_ bv0 32))))
 (let (($x533 (=> $x532 $x10)))
 (let (($x523 (= $x532 $x532)))
 (let (($x467 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x538 (and (and (and (and (and $x467 $x523) $x533) $x525) $x527) $x529)))
 (let (($x586 (and $x538 $x583)))
 (let (($x77 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x587 (and $x77 $x586)))
 (let (($x521 (not true)))
 (let ((?x504 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var487X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x505 (concat ?x504 (select input.dst.llvm-mem (bvadd input.ind-%var487X (_ bv4 32))))))
 (let ((?x502 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var487X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x506 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var487X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x509 (concat ?x506 (concat ?x502 ?x505))))
 (let (($x510 (= input.ind-%var487X.2.1 ?x509)))
 (let (($x484 (bvuge input.ind-%var487X.0 (_ bv1 32))))
 (let (($x511 (=> $x484 $x510)))
 (let ((?x487 (concat (select input.dst.llvm-mem (bvadd input.ind-%var487X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var487X))))
 (let ((?x489 (concat (select input.dst.llvm-mem (bvadd input.ind-%var487X (_ bv2 32))) ?x487)))
 (let ((?x496 (concat (select input.dst.llvm-mem (bvadd input.ind-%var487X (_ bv3 32))) ?x489)))
 (let (($x497 (= input.ind-%var487X.2.0 ?x496)))
 (let (($x515 (=> $x484 $x497)))
 (let (($x512 (= (_ bv0 32) input.ind-%var487X)))
 (let ((?x481 (ite $x512 (_ bv0 32) (_ bv1 32))))
 (let (($x514 (bvuge ?x481 (_ bv1 32))))
 (let (($x485 (= $x484 $x514)))
 (let (($x479 (= input.ind-%var487X.0 (_ bv0 32))))
 (let (($x483 (=> $x479 $x10)))
 (let (($x513 (= ?x481 (_ bv0 32))))
 (let (($x482 (= $x479 $x513)))
 (let (($x477 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1 input.dst.llvm-%l)))
 (let (($x519 (and (and (and (and (and $x477 $x482) $x483) $x485) $x515) $x511)))
 (let (($x465 (= input.ind-%var484X.2.1 input.ind-%var484X.2.1)))
 (let (($x469 (bvuge input.ind-%var484X.0 (_ bv1 32))))
 (let (($x466 (=> $x469 $x465)))
 (let (($x463 (= input.ind-%var484X.2.0 input.ind-%var484X.2.0)))
 (let (($x470 (=> $x469 $x463)))
 (let (($x461 (= $x469 $x469)))
 (let (($x468 (= input.ind-%var484X.0 (_ bv0 32))))
 (let (($x460 (=> $x468 $x10)))
 (let (($x475 (and (and (and (and (and $x467 (= $x468 $x468)) $x460) $x461) $x470) $x466)))
 (let (($x585 (and $x475 $x519)))
 (let (($x520 (and $x77 $x585)))
 (let ((?x438 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var481X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x439 (concat ?x438 (select input.dst.llvm-mem (bvadd input.ind-%var481X (_ bv4 32))))))
 (let ((?x436 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var481X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x440 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var481X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x443 (concat ?x440 (concat ?x436 ?x439))))
 (let (($x444 (= ?x443 ?x443)))
 (let (($x446 (= (_ bv0 32) input.ind-%var481X)))
 (let ((?x418 (ite $x446 (_ bv0 32) (_ bv1 32))))
 (let (($x448 (bvuge ?x418 (_ bv1 32))))
 (let (($x445 (=> $x448 $x444)))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd input.ind-%var481X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var481X))))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.ind-%var481X (_ bv2 32))) ?x422)))
 (let ((?x431 (concat (select input.dst.llvm-mem (bvadd input.ind-%var481X (_ bv3 32))) ?x424)))
 (let (($x432 (= ?x431 ?x431)))
 (let (($x449 (=> $x448 $x432)))
 (let (($x428 (= $x448 $x448)))
 (let (($x447 (= ?x418 (_ bv0 32))))
 (let (($x420 (=> $x447 $x10)))
 (let (($x419 (= $x447 $x447)))
 (let ((?x203 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x215 (concat ?x203 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x199 (concat ?x205 (concat ?x198 ?x215))))
 (let (($x416 (= ?x199 input.dst.llvm-%l)))
 (let (($x454 (and (and (and (and (and $x416 $x419) $x420) $x428) $x449) $x445)))
 (let (($x405 (= input.ind-%var478X.2.1 input.ind-%var478X.2.1)))
 (let (($x409 (bvuge input.ind-%var478X.0 (_ bv1 32))))
 (let (($x406 (=> $x409 $x405)))
 (let (($x403 (= input.ind-%var478X.2.0 input.ind-%var478X.2.0)))
 (let (($x410 (=> $x409 $x403)))
 (let (($x401 (= $x409 $x409)))
 (let (($x408 (= input.ind-%var478X.0 (_ bv0 32))))
 (let (($x400 (=> $x408 $x10)))
 (let (($x399 (= $x408 $x408)))
 (let (($x407 (= input.spec-%var-l-0.2.1 input.spec-%var-l-0.2.1)))
 (let (($x415 (and (and (and (and (and $x407 $x399) $x400) $x401) $x410) $x406)))
 (let (($x455 (and $x415 $x454)))
 (let (($x157 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x456 (and $x157 $x455)))
 (let (($x590 (or (or (or $x456 $x520) $x521) $x587)))
 (let (($x56 (and true $x590)))
 (let (($x81 (= $x56 true)))
 (let (($x368 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x303 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x369 (= $x303 $x368)))
 (let (($x254 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x195 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x48 (and $x195 $x254)))
 (let (($x370 (=> $x48 $x369)))
 (let (($x366 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x299 (= input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x380 (= $x299 $x366)))
 (let (($x367 (=> $x48 $x380)))
 (let (($x379 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x364 (=> $x48 $x379)))
 (let (($x378 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x361 (= $x254 $x378)))
 (let (($x362 (=> $x195 $x361)))
 (let (($x219 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x294 (and $x195 $x219)))
 (let (($x295 (=> $x294 $x10)))
 (let (($x359 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x360 (= $x219 $x359)))
 (let (($x377 (=> $x195 $x360)))
 (let (($x376 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x357 (=> $x195 $x376)))
 (let (($x269 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x39 (=> $x269 $x10)))
 (let (($x354 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x355 (= $x195 $x354)))
 (let (($x374 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x375 (= $x269 $x374)))
 (let (($x383 (and (and (and (and (and (and $x375 $x355) $x39) $x357) $x377) $x295) $x362)))
 (let (($x386 (and (and (and $x383 $x364) $x367) $x370)))
 (let (($x387 (=> $x77 $x386)))
 (let (($x388 (= $x387 true)))
 (let (($x343 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x344 (= $x254 $x343)))
 (let (($x336 (=> $x195 $x344)))
 (let (($x333 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x334 (= $x219 $x333)))
 (let (($x335 (=> $x195 $x334)))
 (let (($x331 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0)))
 (let (($x342 (=> $x195 $x331)))
 (let (($x341 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x329 (= $x195 $x341)))
 (let (($x328 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x340 (= $x269 $x328)))
 (let (($x339 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x348 (and (and (and (and (and (and $x339 $x340) $x329) $x39) $x342) $x335) $x295)))
 (let (($x349 (and $x348 $x336)))
 (let (($x350 (=> $x77 $x349)))
 (let (($x351 (= $x350 true)))
 (let (($x304 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x305 (= $x303 $x304)))
 (let (($x317 (=> $x48 $x305)))
 (let (($x300 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x301 (= $x299 $x300)))
 (let (($x302 (=> $x48 $x301)))
 (let (($x296 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x297 (=> $x48 $x296)))
 (let (($x314 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x43 (= $x254 $x314)))
 (let (($x7 (=> $x195 $x43)))
 (let (($x292 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x293 (= $x219 $x292)))
 (let (($x313 (=> $x195 $x293)))
 (let (($x312 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x290 (=> $x195 $x312)))
 (let (($x311 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x42 (= $x195 $x311)))
 (let (($x310 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x289 (= $x269 $x310)))
 (let (($x319 (and (and (and (and (and (and $x289 $x42) $x39) $x290) $x313) $x295) $x7)))
 (let (($x322 (and (and (and $x319 $x297) $x302) $x317)))
 (let (($x323 (=> $x77 $x322)))
 (let (($x324 (= $x323 true)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x199 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x199 (_ bv4 32))))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x199 (_ bv4 32)) (_ bv2 32))) ?x212)))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x199 (_ bv4 32)) (_ bv3 32))) ?x231)))
 (let ((?x238 (bvadd ?x224 (_ bv4 32))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x233))))
 (let (($x234 (= (_ bv0 32) ?x227)))
 (let ((?x245 (ite $x234 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (bvuge ?x245 (_ bv1 32))))
 (let (($x22 (= $x254 $x268)))
 (let (($x209 (and $x77 $x195)))
 (let (($x275 (=> $x209 $x22)))
 (let (($x240 (= (_ bv0 32) ?x224)))
 (let ((?x241 (ite $x240 (_ bv0 32) (_ bv1 32))))
 (let (($x253 (= ?x241 (_ bv0 32))))
 (let (($x271 (= $x269 $x253)))
 (let (($x274 (=> $x77 $x271)))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv1 32))) (select input.dst.llvm-mem ?x224))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv2 32))) ?x252))))
 (let (($x261 (= input.spec-%var-l-0.2.1.2.1.2.0 ?x251)))
 (let (($x21 (=> $x209 $x261)))
 (let (($x248 (and $x77 $x269)))
 (let (($x260 (=> $x248 $x10)))
 (let (($x247 (bvuge ?x241 (_ bv1 32))))
 (let (($x259 (= $x195 $x247)))
 (let (($x263 (=> $x77 $x259)))
 (let (($x246 (= ?x245 (_ bv0 32))))
 (let (($x262 (= $x219 $x246)))
 (let (($x280 (=> $x209 $x262)))
 (let (($x23 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x72 (=> $x23 $x10)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem ?x199))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv2 32))) ?x186))))
 (let (($x60 (= input.spec-%var-l-0.2.1.2.0 ?x272)))
 (let (($x193 (=> $x77 $x60)))
 (let (($x229 (= (_ bv0 32) ?x199)))
 (let ((?x185 (ite $x229 (_ bv0 32) (_ bv1 32))))
 (let (($x191 (bvuge ?x185 (_ bv1 32))))
 (let (($x188 (= $x77 $x191)))
 (let (($x258 (= ?x185 (_ bv0 32))))
 (let (($x190 (= $x23 $x258)))
 (let (($x276 (and (and (and (and (and (and $x190 $x188) $x193) $x72) $x280) $x263) $x260)))
 (let (($x284 (and (and (and $x276 $x21) $x274) $x275)))
 (let (($x285 (=> $x157 $x284)))
 (let (($x286 (= $x285 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x128 (concat ?x120 (concat ?x119 ?x123)))))
 (let (($x182 (= ?x169 input.dst.llvm-%l)))
 (let (($x183 (= $x182 true)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x137 (concat ?x143 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x37 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x16 (bvadd ?x37 (_ bv3 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem ?x16) (concat ?x170 ?x137))))
 (let (($x202 (= (bvand ?x201 (_ bv4294967288 32)) ?x201)))
 (let (($x147 (= (bvand ?x37 (_ bv4294967292 32)) ?x37)))
 (let (($x176 (and $x147 $x202)))
 (let (($x162 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x139 (and true $x162)))
 (let (($x138 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x37 (bvsub ?x37 (_ bv4 32))) (bvult ?x37 (bvsub ?x37 (_ bv4 32))))))
 (let (($x177 (and (and (and $x138 $x139) $x147) $x176)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x38 (not $x34)))
 (let (($x178 (=> $x38 $x177)))
 (let (($x131 (= input.dst.llvm-%l ?x169)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x168)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x160 $x116)))
 (let (($x126 (and $x117 $x118)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x107 $x126)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x166)))))))
 (let (($x121 (and $x115 $x124)))
 (let (($x154 (and $x121 $x131)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x85)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x165)))
 (let (($x102 (= input.spec-%var-l-0.2.0 ?x98)))
 (let (($x163 (=> $x157 $x102)))
 (let ((?x86 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x88 (bvuge ?x86 (_ bv1 32))))
 (let (($x100 (= $x157 $x88)))
 (let (($x151 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x84 (=> $x151 $x10)))
 (let (($x105 (= ?x86 (_ bv0 32))))
 (let (($x18 (= $x151 $x105)))
 (let (($x103 (and (and (and $x18 $x84) $x100) $x163)))
 (let (($x132 (and $x103 $x154)))
 (let (($x45 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x133 (and $x45 $x132)))
 (let (($x196 (and $x133 $x178)))
 (let (($x214 (= $x196 true)))
 (let (($x12 (= $x34 true)))
 (let (($x90 (= $x45 true)))
 (let (($x93 (and $x90 $x12)))
 (let (($x179 (and $x93 $x214)))
 (let (($x181 (and $x179 $x183)))
 (let (($x287 (and $x181 $x286)))
 (let (($x325 (and $x287 $x324)))
 (let (($x352 (and $x325 $x351)))
 (let (($x389 (and $x352 $x388)))
 (let (($x390 (and $x157 $x389)))
 (let (($x391 (and $x10 $x390)))
 (let (($x29 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x58 (=> $x77 $x29)))
 (let (($x75 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x68 (= $x77 $x75)))
 (let (($x82 (and (and (= $x23 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x72) $x68)))
 (let (($x155 (and $x82 $x58)))
 (let (($x392 (and $x155 $x391)))
 (let (($x14 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x35 (= $x77 $x14)))
 (let (($x71 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x62 (= $x23 $x71)))
 (let (($x156 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x36 (and (and (and $x156 $x62) $x72) $x35)))
 (let (($x393 (and $x36 $x392)))
 (let (($x76 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x41 (=> $x77 $x76)))
 (let (($x31 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x50 (= $x77 $x31)))
 (let (($x78 (and (and (= $x23 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))) $x72) $x50)))
 (let (($x17 (and $x78 $x41)))
 (let (($x394 (and $x17 $x393)))
 (let (($x54 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x395 (and $x54 $x394)))
 (let (($x61 (bvugt ?x37 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x20 (=> (bvule ?x37 (bvsub (bvadd ?x37 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x61)))))))
 (let (($x40 (=> (and $x38 (bvule ?x37 (bvsub (bvadd ?x37 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x32 $x61)))))))
 (let (($x396 (and $x40 $x395)))
 (let (($x110 (=> $x396 $x81)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791879/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var553X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var553X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var553X.0 () (_ BitVec 32))
(declare-fun input.ind-%var553X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var550X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var550X.0 () (_ BitVec 32))
(declare-fun input.ind-%var550X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var547X () (_ BitVec 32))
(declare-fun input.ind-%var547X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var547X.0 () (_ BitVec 32))
(declare-fun input.ind-%var547X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var544X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var544X.0 () (_ BitVec 32))
(declare-fun input.ind-%var544X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var541X () (_ BitVec 32))
(declare-fun input.ind-%var538X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var538X.0 () (_ BitVec 32))
(declare-fun input.ind-%var538X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x486 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var553X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x490 (concat ?x486 (select input.dst.llvm-mem (bvadd input.ind-%var553X (_ bv4 32))))))
 (let ((?x494 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var553X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x496 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var553X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x497 (concat ?x496 (concat ?x494 ?x490))))
 (let (($x515 (= input.ind-%var553X.2.1 ?x497)))
 (let (($x476 (bvuge input.ind-%var553X.0 (_ bv1 32))))
 (let (($x584 (=> $x476 $x515)))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd input.ind-%var553X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var553X))))
 (let ((?x483 (concat (select input.dst.llvm-mem (bvadd input.ind-%var553X (_ bv2 32))) ?x513)))
 (let ((?x514 (concat (select input.dst.llvm-mem (bvadd input.ind-%var553X (_ bv3 32))) ?x483)))
 (let (($x485 (= input.ind-%var553X.2.0 ?x514)))
 (let (($x518 (=> $x476 $x485)))
 (let (($x474 (= (_ bv0 32) input.ind-%var553X)))
 (let ((?x464 (ite $x474 (_ bv0 32) (_ bv1 32))))
 (let (($x477 (bvuge ?x464 (_ bv1 32))))
 (let (($x478 (= $x476 $x477)))
 (let (($x71 (= false false)))
 (let (($x463 (= input.ind-%var553X.0 (_ bv0 32))))
 (let (($x475 (=> $x463 $x71)))
 (let (($x465 (= ?x464 (_ bv0 32))))
 (let (($x466 (= $x463 $x465)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x102 (concat ?x98 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x34 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x23 (bvadd ?x34 (_ bv3 32))))
 (let ((?x152 (concat (select input.dst.llvm-mem ?x23) (concat ?x103 ?x102))))
 (let (($x473 (= input.spec-%var-node_next-0.L2%9%bbentry ?x152)))
 (let (($x501 (and (and (and (and (and $x473 $x466) $x475) $x478) $x518) $x584)))
 (let (($x458 (= input.ind-%var550X.2.1 input.ind-%var550X.2.1)))
 (let (($x445 (bvuge input.ind-%var550X.0 (_ bv1 32))))
 (let (($x468 (=> $x445 $x458)))
 (let (($x456 (= input.ind-%var550X.2.0 input.ind-%var550X.2.0)))
 (let (($x457 (=> $x445 $x456)))
 (let (($x454 (= $x445 $x445)))
 (let (($x434 (= input.ind-%var550X.0 (_ bv0 32))))
 (let (($x444 (=> $x434 $x71)))
 (let (($x471 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x434 $x434)) $x444)))
 (let (($x469 (and (and (and $x471 $x454) $x457) $x468)))
 (let (($x502 (and $x469 $x501)))
 (let (($x441 (not true)))
 (let ((?x425 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var547X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x426 (concat ?x425 (select input.dst.llvm-mem (bvadd input.ind-%var547X (_ bv4 32))))))
 (let ((?x422 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var547X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x432 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var547X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x449 (concat ?x432 (concat ?x422 ?x426))))
 (let (($x453 (= input.ind-%var547X.2.1 ?x449)))
 (let (($x404 (bvuge input.ind-%var547X.0 (_ bv1 32))))
 (let (($x433 (=> $x404 $x453)))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd input.ind-%var547X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var547X))))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd input.ind-%var547X (_ bv2 32))) ?x418)))
 (let ((?x448 (concat (select input.dst.llvm-mem (bvadd input.ind-%var547X (_ bv3 32))) ?x450)))
 (let (($x428 (= input.ind-%var547X.2.0 ?x448)))
 (let (($x452 (=> $x404 $x428)))
 (let (($x413 (= (_ bv0 32) input.ind-%var547X)))
 (let ((?x402 (ite $x413 (_ bv0 32) (_ bv1 32))))
 (let (($x405 (bvuge ?x402 (_ bv1 32))))
 (let (($x406 (= $x404 $x405)))
 (let (($x409 (= input.ind-%var547X.0 (_ bv0 32))))
 (let (($x414 (=> $x409 $x71)))
 (let (($x403 (= ?x402 (_ bv0 32))))
 (let (($x410 (= $x409 $x403)))
 (let (($x400 (= input.spec-%tmpvar-0.L2%9%bbentry ?x152)))
 (let (($x442 (and (and (and (and (and $x400 $x410) $x414) $x406) $x452) $x433)))
 (let (($x395 (= input.ind-%var544X.2.1 input.ind-%var544X.2.1)))
 (let (($x389 (bvuge input.ind-%var544X.0 (_ bv1 32))))
 (let (($x396 (=> $x389 $x395)))
 (let (($x392 (= input.ind-%var544X.2.0 input.ind-%var544X.2.0)))
 (let (($x393 (=> $x389 $x392)))
 (let (($x390 (= $x389 $x389)))
 (let (($x386 (= input.ind-%var544X.0 (_ bv0 32))))
 (let (($x388 (=> $x386 $x71)))
 (let (($x407 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x386 $x386)) $x388)))
 (let (($x399 (and (and (and $x407 $x390) $x393) $x396)))
 (let (($x438 (and $x399 $x442)))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var541X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x373 (concat ?x377 (select input.dst.llvm-mem (bvadd input.ind-%var541X (_ bv4 32))))))
 (let ((?x378 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var541X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var541X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x363 (concat ?x383 (concat ?x378 ?x373))))
 (let (($x379 (= ?x363 ?x363)))
 (let (($x348 (= (_ bv0 32) input.ind-%var541X)))
 (let ((?x343 (ite $x348 (_ bv0 32) (_ bv1 32))))
 (let (($x350 (bvuge ?x343 (_ bv1 32))))
 (let (($x364 (=> $x350 $x379)))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd input.ind-%var541X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var541X))))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd input.ind-%var541X (_ bv2 32))) ?x375)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd input.ind-%var541X (_ bv3 32))) ?x381)))
 (let (($x357 (= ?x376 ?x376)))
 (let (($x372 (=> $x350 $x357)))
 (let (($x351 (= $x350 $x350)))
 (let (($x344 (= ?x343 (_ bv0 32))))
 (let (($x349 (=> $x344 $x71)))
 (let (($x366 (and (and (and (= input.dst.llvm-%l ?x152) (= $x344 $x344)) $x349) $x351)))
 (let (($x367 (and (and $x366 $x372) $x364)))
 (let (($x330 (= input.ind-%var538X.2.1 input.ind-%var538X.2.1)))
 (let (($x340 (bvuge input.ind-%var538X.0 (_ bv1 32))))
 (let (($x331 (=> $x340 $x330)))
 (let (($x329 (= input.ind-%var538X.2.0 input.ind-%var538X.2.0)))
 (let (($x338 (=> $x340 $x329)))
 (let (($x337 (= $x340 $x340)))
 (let (($x339 (= input.ind-%var538X.0 (_ bv0 32))))
 (let (($x328 (=> $x339 $x71)))
 (let (($x346 (and (and (= input.spec-%var-l-0 input.spec-%var-l-0) (= $x339 $x339)) $x328)))
 (let (($x334 (and (and (and $x346 $x337) $x338) $x331)))
 (let (($x385 (and $x334 $x367)))
 (let (($x507 (or (or (or $x385 $x438) $x441) $x502)))
 (let (($x505 (and true $x507)))
 (let (($x500 (= $x505 true)))
 (let (($x315 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x280 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x66 (= $x280 $x315)))
 (let (($x192 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x232 (and $x140 $x192)))
 (let (($x296 (=> $x232 $x66)))
 (let (($x7 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x227 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x319 (= $x227 $x7)))
 (let (($x48 (=> $x232 $x319)))
 (let (($x318 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x314 (=> $x232 $x318)))
 (let (($x313 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x309 (= $x192 $x313)))
 (let (($x294 (=> $x140 $x309)))
 (let (($x205 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x224 (and $x140 $x205)))
 (let (($x238 (=> $x224 $x71)))
 (let (($x291 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x292 (= $x205 $x291)))
 (let (($x293 (=> $x140 $x292)))
 (let (($x312 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x290 (=> $x140 $x312)))
 (let (($x39 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x307 (= $x140 $x39)))
 (let (($x134 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x222 (=> $x134 $x71)))
 (let (($x42 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x306 (= $x134 $x42)))
 (let (($x300 (and (and (and (and (and (and $x306 $x222) $x307) $x290) $x293) $x238) $x294)))
 (let (($x321 (and (and (and $x300 $x314) $x48) $x296)))
 (let (($x303 (= $x321 true)))
 (let (($x278 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x254 (= $x192 $x278)))
 (let (($x268 (=> $x140 $x254)))
 (let (($x253 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x271 (= $x205 $x253)))
 (let (($x274 (=> $x140 $x271)))
 (let (($x261 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x21 (=> $x140 $x261)))
 (let (($x252 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x281 (= $x140 $x252)))
 (let (($x270 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x273 (= $x134 $x270)))
 (let (($x267 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x287 (and (and (and (and (and (and $x267 $x273) $x222) $x281) $x21) $x274) $x238)))
 (let (($x288 (and $x287 $x268)))
 (let (($x310 (= $x288 true)))
 (let (($x257 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x240 (= $x280 $x257)))
 (let (($x241 (=> $x232 $x240)))
 (let (($x245 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x246 (= $x227 $x245)))
 (let (($x262 (=> $x232 $x246)))
 (let (($x239 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x233 (=> $x232 $x239)))
 (let (($x226 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x244 (= $x192 $x226)))
 (let (($x237 (=> $x140 $x244)))
 (let (($x223 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x212 (= $x205 $x223)))
 (let (($x231 (=> $x140 $x212)))
 (let (($x211 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x221 (=> $x140 $x211)))
 (let (($x264 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x236 (= $x140 $x264)))
 (let (($x259 (and (and (= $x134 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x222) $x236)))
 (let (($x276 (and (and (and (and (and (and $x259 $x221) $x231) $x238) $x237) $x233) $x262)))
 (let (($x265 (and $x276 $x241)))
 (let (($x250 (= $x265 true)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x142 (concat ?x138 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x213 (concat ?x139 (concat ?x174 ?x142))))
 (let ((?x197 (bvadd ?x213 (_ bv4 32))))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x230))))
 (let (($x190 (= (_ bv0 32) ?x258)))
 (let ((?x191 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge ?x191 (_ bv1 32))))
 (let (($x206 (= $x192 $x208)))
 (let (($x124 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x149 (and $x124 $x140)))
 (let (($x187 (=> $x149 $x206)))
 (let (($x188 (= ?x191 (_ bv0 32))))
 (let (($x282 (= $x205 $x188)))
 (let (($x218 (=> $x149 $x282)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem ?x213))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv2 32))) ?x177))))
 (let (($x181 (= input.spec-%var-l-0.2.1.2.0 ?x183)))
 (let (($x204 (=> $x149 $x181)))
 (let (($x175 (= (_ bv0 32) ?x213)))
 (let ((?x148 (ite $x175 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x148 (_ bv1 32))))
 (let (($x172 (= $x140 $x143)))
 (let (($x137 (=> $x124 $x172)))
 (let (($x146 (and $x124 $x134)))
 (let (($x170 (=> $x146 $x71)))
 (let (($x147 (= ?x148 (_ bv0 32))))
 (let (($x207 (= $x134 $x147)))
 (let (($x150 (=> $x124 $x207)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x127)))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x122)))
 (let (($x154 (= input.spec-%var-l-0.2.0 ?x131)))
 (let (($x132 (=> $x124 $x154)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x117 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x117 (_ bv1 32))))
 (let (($x125 (= $x124 $x121)))
 (let (($x13 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x126 (=> $x13 $x71)))
 (let (($x168 (= ?x117 (_ bv0 32))))
 (let (($x118 (= $x13 $x168)))
 (let (($x60 (and (and (and (and (and (and $x118 $x126) $x125) $x132) $x150) $x170) $x137)))
 (let (($x256 (and (and (and $x60 $x204) $x218) $x187)))
 (let (($x194 (= $x256 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x83 (concat ?x90 (concat ?x155 ?x29)))))
 (let (($x160 (= ?x151 input.dst.llvm-%l)))
 (let (($x171 (= $x160 true)))
 (let (($x113 (= (bvand ?x152 (_ bv4294967288 32)) ?x152)))
 (let (($x158 (= (bvand ?x34 (_ bv4294967292 32)) ?x34)))
 (let (($x166 (and $x158 $x113)))
 (let (($x96 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x94 (and true $x96)))
 (let (($x108 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x34 (bvsub ?x34 (_ bv4 32))) (bvult ?x34 (bvsub ?x34 (_ bv4 32))))))
 (let (($x99 (and (and (and $x108 $x94) $x158) $x166)))
 (let (($x69 (not $x57)))
 (let (($x167 (=> $x69 $x99)))
 (let (($x86 (= input.dst.llvm-%l ?x151)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x64)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x41 $x36)))
 (let (($x30 (and $x74 $x6)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x25 $x30)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x46)))))))
 (let (($x68 (and $x16 $x75)))
 (let (($x105 (and $x68 $x86)))
 (let (($x18 (and true $x105)))
 (let (($x27 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x84 (and $x27 $x18)))
 (let (($x115 (and $x84 $x167)))
 (let (($x106 (= $x115 true)))
 (let (($x156 (= $x69 true)))
 (let (($x31 (= $x27 true)))
 (let (($x17 (and $x31 $x156)))
 (let (($x107 (and $x17 $x106)))
 (let (($x116 (and $x107 $x171)))
 (let (($x195 (and $x116 $x194)))
 (let (($x249 (and $x195 $x250)))
 (let (($x289 (and $x249 $x310)))
 (let (($x304 (and $x289 $x303)))
 (let (($x305 (and $x13 $x304)))
 (let (($x317 (and $x71 $x305)))
 (let (($x11 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x322 (and $x11 $x317)))
 (let (($x35 (bvugt ?x34 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x51 (=> (bvule ?x34 (bvsub (bvadd ?x34 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x35)))))))
 (let (($x49 (=> (and $x69 (bvule ?x34 (bvsub (bvadd ?x34 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x63 $x35)))))))
 (let (($x323 (and $x49 $x322)))
 (let (($x509 (=> $x323 $x500)))
 (not $x509))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var553X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var553X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var553X.0 () (_ BitVec 32))
(declare-fun input.ind-%var553X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var550X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var550X.0 () (_ BitVec 32))
(declare-fun input.ind-%var550X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var547X () (_ BitVec 32))
(declare-fun input.ind-%var547X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var547X.0 () (_ BitVec 32))
(declare-fun input.ind-%var547X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var544X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var544X.0 () (_ BitVec 32))
(declare-fun input.ind-%var544X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var541X () (_ BitVec 32))
(declare-fun input.ind-%var538X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var538X.0 () (_ BitVec 32))
(declare-fun input.ind-%var538X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x486 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var553X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x490 (concat ?x486 (select input.dst.llvm-mem (bvadd input.ind-%var553X (_ bv4 32))))))
 (let ((?x494 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var553X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x496 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var553X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x497 (concat ?x496 (concat ?x494 ?x490))))
 (let (($x515 (= input.ind-%var553X.2.1 ?x497)))
 (let (($x476 (bvuge input.ind-%var553X.0 (_ bv1 32))))
 (let (($x584 (=> $x476 $x515)))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd input.ind-%var553X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var553X))))
 (let ((?x483 (concat (select input.dst.llvm-mem (bvadd input.ind-%var553X (_ bv2 32))) ?x513)))
 (let ((?x514 (concat (select input.dst.llvm-mem (bvadd input.ind-%var553X (_ bv3 32))) ?x483)))
 (let (($x485 (= input.ind-%var553X.2.0 ?x514)))
 (let (($x518 (=> $x476 $x485)))
 (let (($x474 (= (_ bv0 32) input.ind-%var553X)))
 (let ((?x464 (ite $x474 (_ bv0 32) (_ bv1 32))))
 (let (($x477 (bvuge ?x464 (_ bv1 32))))
 (let (($x478 (= $x476 $x477)))
 (let (($x71 (= false false)))
 (let (($x463 (= input.ind-%var553X.0 (_ bv0 32))))
 (let (($x475 (=> $x463 $x71)))
 (let (($x465 (= ?x464 (_ bv0 32))))
 (let (($x466 (= $x463 $x465)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x102 (concat ?x98 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x34 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x23 (bvadd ?x34 (_ bv3 32))))
 (let ((?x152 (concat (select input.dst.llvm-mem ?x23) (concat ?x103 ?x102))))
 (let (($x473 (= input.spec-%var-node_next-0.L2%9%bbentry ?x152)))
 (let (($x501 (and (and (and (and (and $x473 $x466) $x475) $x478) $x518) $x584)))
 (let (($x458 (= input.ind-%var550X.2.1 input.ind-%var550X.2.1)))
 (let (($x445 (bvuge input.ind-%var550X.0 (_ bv1 32))))
 (let (($x468 (=> $x445 $x458)))
 (let (($x456 (= input.ind-%var550X.2.0 input.ind-%var550X.2.0)))
 (let (($x457 (=> $x445 $x456)))
 (let (($x454 (= $x445 $x445)))
 (let (($x434 (= input.ind-%var550X.0 (_ bv0 32))))
 (let (($x444 (=> $x434 $x71)))
 (let (($x471 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x434 $x434)) $x444)))
 (let (($x469 (and (and (and $x471 $x454) $x457) $x468)))
 (let (($x502 (and $x469 $x501)))
 (let (($x441 (not true)))
 (let ((?x425 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var547X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x426 (concat ?x425 (select input.dst.llvm-mem (bvadd input.ind-%var547X (_ bv4 32))))))
 (let ((?x422 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var547X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x432 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var547X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x449 (concat ?x432 (concat ?x422 ?x426))))
 (let (($x453 (= input.ind-%var547X.2.1 ?x449)))
 (let (($x404 (bvuge input.ind-%var547X.0 (_ bv1 32))))
 (let (($x433 (=> $x404 $x453)))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd input.ind-%var547X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var547X))))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd input.ind-%var547X (_ bv2 32))) ?x418)))
 (let ((?x448 (concat (select input.dst.llvm-mem (bvadd input.ind-%var547X (_ bv3 32))) ?x450)))
 (let (($x428 (= input.ind-%var547X.2.0 ?x448)))
 (let (($x452 (=> $x404 $x428)))
 (let (($x413 (= (_ bv0 32) input.ind-%var547X)))
 (let ((?x402 (ite $x413 (_ bv0 32) (_ bv1 32))))
 (let (($x405 (bvuge ?x402 (_ bv1 32))))
 (let (($x406 (= $x404 $x405)))
 (let (($x409 (= input.ind-%var547X.0 (_ bv0 32))))
 (let (($x414 (=> $x409 $x71)))
 (let (($x403 (= ?x402 (_ bv0 32))))
 (let (($x410 (= $x409 $x403)))
 (let (($x400 (= input.spec-%tmpvar-0.L2%9%bbentry ?x152)))
 (let (($x442 (and (and (and (and (and $x400 $x410) $x414) $x406) $x452) $x433)))
 (let (($x395 (= input.ind-%var544X.2.1 input.ind-%var544X.2.1)))
 (let (($x389 (bvuge input.ind-%var544X.0 (_ bv1 32))))
 (let (($x396 (=> $x389 $x395)))
 (let (($x392 (= input.ind-%var544X.2.0 input.ind-%var544X.2.0)))
 (let (($x393 (=> $x389 $x392)))
 (let (($x390 (= $x389 $x389)))
 (let (($x386 (= input.ind-%var544X.0 (_ bv0 32))))
 (let (($x388 (=> $x386 $x71)))
 (let (($x407 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x386 $x386)) $x388)))
 (let (($x399 (and (and (and $x407 $x390) $x393) $x396)))
 (let (($x438 (and $x399 $x442)))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var541X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x373 (concat ?x377 (select input.dst.llvm-mem (bvadd input.ind-%var541X (_ bv4 32))))))
 (let ((?x378 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var541X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var541X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x363 (concat ?x383 (concat ?x378 ?x373))))
 (let (($x379 (= ?x363 ?x363)))
 (let (($x348 (= (_ bv0 32) input.ind-%var541X)))
 (let ((?x343 (ite $x348 (_ bv0 32) (_ bv1 32))))
 (let (($x350 (bvuge ?x343 (_ bv1 32))))
 (let (($x364 (=> $x350 $x379)))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd input.ind-%var541X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var541X))))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd input.ind-%var541X (_ bv2 32))) ?x375)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd input.ind-%var541X (_ bv3 32))) ?x381)))
 (let (($x357 (= ?x376 ?x376)))
 (let (($x372 (=> $x350 $x357)))
 (let (($x351 (= $x350 $x350)))
 (let (($x344 (= ?x343 (_ bv0 32))))
 (let (($x349 (=> $x344 $x71)))
 (let (($x366 (and (and (and (= input.dst.llvm-%l ?x152) (= $x344 $x344)) $x349) $x351)))
 (let (($x367 (and (and $x366 $x372) $x364)))
 (let (($x330 (= input.ind-%var538X.2.1 input.ind-%var538X.2.1)))
 (let (($x340 (bvuge input.ind-%var538X.0 (_ bv1 32))))
 (let (($x331 (=> $x340 $x330)))
 (let (($x329 (= input.ind-%var538X.2.0 input.ind-%var538X.2.0)))
 (let (($x338 (=> $x340 $x329)))
 (let (($x337 (= $x340 $x340)))
 (let (($x339 (= input.ind-%var538X.0 (_ bv0 32))))
 (let (($x328 (=> $x339 $x71)))
 (let (($x346 (and (and (= input.spec-%var-l-0 input.spec-%var-l-0) (= $x339 $x339)) $x328)))
 (let (($x334 (and (and (and $x346 $x337) $x338) $x331)))
 (let (($x385 (and $x334 $x367)))
 (let (($x507 (or (or (or $x385 $x438) $x441) $x502)))
 (let (($x505 (and true $x507)))
 (let (($x500 (= $x505 true)))
 (let (($x315 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x280 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x66 (= $x280 $x315)))
 (let (($x192 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x232 (and $x140 $x192)))
 (let (($x296 (=> $x232 $x66)))
 (let (($x7 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x227 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x319 (= $x227 $x7)))
 (let (($x48 (=> $x232 $x319)))
 (let (($x318 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x314 (=> $x232 $x318)))
 (let (($x313 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x309 (= $x192 $x313)))
 (let (($x294 (=> $x140 $x309)))
 (let (($x205 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x224 (and $x140 $x205)))
 (let (($x238 (=> $x224 $x71)))
 (let (($x291 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x292 (= $x205 $x291)))
 (let (($x293 (=> $x140 $x292)))
 (let (($x312 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x290 (=> $x140 $x312)))
 (let (($x39 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x307 (= $x140 $x39)))
 (let (($x134 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x222 (=> $x134 $x71)))
 (let (($x42 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x306 (= $x134 $x42)))
 (let (($x300 (and (and (and (and (and (and $x306 $x222) $x307) $x290) $x293) $x238) $x294)))
 (let (($x321 (and (and (and $x300 $x314) $x48) $x296)))
 (let (($x303 (= $x321 true)))
 (let (($x278 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x254 (= $x192 $x278)))
 (let (($x268 (=> $x140 $x254)))
 (let (($x253 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x271 (= $x205 $x253)))
 (let (($x274 (=> $x140 $x271)))
 (let (($x261 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x21 (=> $x140 $x261)))
 (let (($x252 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x281 (= $x140 $x252)))
 (let (($x270 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x273 (= $x134 $x270)))
 (let (($x267 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x287 (and (and (and (and (and (and $x267 $x273) $x222) $x281) $x21) $x274) $x238)))
 (let (($x288 (and $x287 $x268)))
 (let (($x310 (= $x288 true)))
 (let (($x257 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x240 (= $x280 $x257)))
 (let (($x241 (=> $x232 $x240)))
 (let (($x245 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x246 (= $x227 $x245)))
 (let (($x262 (=> $x232 $x246)))
 (let (($x239 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x233 (=> $x232 $x239)))
 (let (($x226 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x244 (= $x192 $x226)))
 (let (($x237 (=> $x140 $x244)))
 (let (($x223 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x212 (= $x205 $x223)))
 (let (($x231 (=> $x140 $x212)))
 (let (($x211 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x221 (=> $x140 $x211)))
 (let (($x264 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x236 (= $x140 $x264)))
 (let (($x259 (and (and (= $x134 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x222) $x236)))
 (let (($x276 (and (and (and (and (and (and $x259 $x221) $x231) $x238) $x237) $x233) $x262)))
 (let (($x265 (and $x276 $x241)))
 (let (($x250 (= $x265 true)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x142 (concat ?x138 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x213 (concat ?x139 (concat ?x174 ?x142))))
 (let ((?x197 (bvadd ?x213 (_ bv4 32))))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x230))))
 (let (($x190 (= (_ bv0 32) ?x258)))
 (let ((?x191 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge ?x191 (_ bv1 32))))
 (let (($x206 (= $x192 $x208)))
 (let (($x124 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x149 (and $x124 $x140)))
 (let (($x187 (=> $x149 $x206)))
 (let (($x188 (= ?x191 (_ bv0 32))))
 (let (($x282 (= $x205 $x188)))
 (let (($x218 (=> $x149 $x282)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem ?x213))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv2 32))) ?x177))))
 (let (($x181 (= input.spec-%var-l-0.2.1.2.0 ?x183)))
 (let (($x204 (=> $x149 $x181)))
 (let (($x175 (= (_ bv0 32) ?x213)))
 (let ((?x148 (ite $x175 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x148 (_ bv1 32))))
 (let (($x172 (= $x140 $x143)))
 (let (($x137 (=> $x124 $x172)))
 (let (($x146 (and $x124 $x134)))
 (let (($x170 (=> $x146 $x71)))
 (let (($x147 (= ?x148 (_ bv0 32))))
 (let (($x207 (= $x134 $x147)))
 (let (($x150 (=> $x124 $x207)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x127)))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x122)))
 (let (($x154 (= input.spec-%var-l-0.2.0 ?x131)))
 (let (($x132 (=> $x124 $x154)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x117 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x117 (_ bv1 32))))
 (let (($x125 (= $x124 $x121)))
 (let (($x13 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x126 (=> $x13 $x71)))
 (let (($x168 (= ?x117 (_ bv0 32))))
 (let (($x118 (= $x13 $x168)))
 (let (($x60 (and (and (and (and (and (and $x118 $x126) $x125) $x132) $x150) $x170) $x137)))
 (let (($x256 (and (and (and $x60 $x204) $x218) $x187)))
 (let (($x194 (= $x256 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x83 (concat ?x90 (concat ?x155 ?x29)))))
 (let (($x160 (= ?x151 input.dst.llvm-%l)))
 (let (($x171 (= $x160 true)))
 (let (($x113 (= (bvand ?x152 (_ bv4294967288 32)) ?x152)))
 (let (($x158 (= (bvand ?x34 (_ bv4294967292 32)) ?x34)))
 (let (($x166 (and $x158 $x113)))
 (let (($x96 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x94 (and true $x96)))
 (let (($x108 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x34 (bvsub ?x34 (_ bv4 32))) (bvult ?x34 (bvsub ?x34 (_ bv4 32))))))
 (let (($x99 (and (and (and $x108 $x94) $x158) $x166)))
 (let (($x69 (not $x57)))
 (let (($x167 (=> $x69 $x99)))
 (let (($x86 (= input.dst.llvm-%l ?x151)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x64)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x41 $x36)))
 (let (($x30 (and $x74 $x6)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x25 $x30)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x46)))))))
 (let (($x68 (and $x16 $x75)))
 (let (($x105 (and $x68 $x86)))
 (let (($x18 (and true $x105)))
 (let (($x27 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x84 (and $x27 $x18)))
 (let (($x115 (and $x84 $x167)))
 (let (($x106 (= $x115 true)))
 (let (($x156 (= $x69 true)))
 (let (($x31 (= $x27 true)))
 (let (($x17 (and $x31 $x156)))
 (let (($x107 (and $x17 $x106)))
 (let (($x116 (and $x107 $x171)))
 (let (($x195 (and $x116 $x194)))
 (let (($x249 (and $x195 $x250)))
 (let (($x289 (and $x249 $x310)))
 (let (($x304 (and $x289 $x303)))
 (let (($x305 (and $x13 $x304)))
 (let (($x317 (and $x71 $x305)))
 (let (($x11 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x322 (and $x11 $x317)))
 (let (($x35 (bvugt ?x34 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x51 (=> (bvule ?x34 (bvsub (bvadd ?x34 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x35)))))))
 (let (($x49 (=> (and $x69 (bvule ?x34 (bvsub (bvadd ?x34 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x63 $x35)))))))
 (let (($x323 (and $x49 $x322)))
 (let (($x509 (=> $x323 $x500)))
 (not $x509))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791879/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var611X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var611X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var611X.0 () (_ BitVec 32))
(declare-fun input.ind-%var611X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var608X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var608X.0 () (_ BitVec 32))
(declare-fun input.ind-%var608X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var605X () (_ BitVec 32))
(declare-fun input.ind-%var605X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var605X.0 () (_ BitVec 32))
(declare-fun input.ind-%var605X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var602X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var602X.0 () (_ BitVec 32))
(declare-fun input.ind-%var602X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var599X () (_ BitVec 32))
(declare-fun input.ind-%var596X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var596X.0 () (_ BitVec 32))
(declare-fun input.ind-%var596X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x489 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var611X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x496 (concat ?x489 (select input.dst.llvm-mem (bvadd input.ind-%var611X (_ bv4 32))))))
 (let ((?x494 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var611X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x495 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var611X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x490 (concat ?x495 (concat ?x494 ?x496))))
 (let (($x487 (= input.ind-%var611X.2.1 ?x490)))
 (let (($x476 (bvuge input.ind-%var611X.0 (_ bv1 32))))
 (let (($x497 (=> $x476 $x487)))
 (let ((?x482 (concat (select input.dst.llvm-mem (bvadd input.ind-%var611X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var611X))))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd input.ind-%var611X (_ bv2 32))) ?x482)))
 (let ((?x483 (concat (select input.dst.llvm-mem (bvadd input.ind-%var611X (_ bv3 32))) ?x481)))
 (let (($x514 (= input.ind-%var611X.2.0 ?x483)))
 (let (($x485 (=> $x476 $x514)))
 (let (($x465 (= (_ bv0 32) input.ind-%var611X)))
 (let ((?x466 (ite $x465 (_ bv0 32) (_ bv1 32))))
 (let (($x477 (bvuge ?x466 (_ bv1 32))))
 (let (($x478 (= $x476 $x477)))
 (let (($x27 (= false false)))
 (let (($x474 (= input.ind-%var611X.0 (_ bv0 32))))
 (let (($x499 (=> $x474 $x27)))
 (let (($x498 (= ?x466 (_ bv0 32))))
 (let (($x475 (= $x474 $x498)))
 (let (($x463 (= input.spec-%var-node_next-0.L2%9%bbentry input.dst.llvm-%l)))
 (let (($x507 (and (and (and (and (and $x463 $x475) $x499) $x478) $x485) $x497)))
 (let (($x472 (= input.ind-%var608X.2.1 input.ind-%var608X.2.1)))
 (let (($x445 (bvuge input.ind-%var608X.0 (_ bv1 32))))
 (let (($x467 (=> $x445 $x472)))
 (let (($x455 (= input.ind-%var608X.2.0 input.ind-%var608X.2.0)))
 (let (($x456 (=> $x445 $x455)))
 (let (($x454 (= $x445 $x445)))
 (let (($x459 (= input.ind-%var608X.0 (_ bv0 32))))
 (let (($x471 (=> $x459 $x27)))
 (let (($x468 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x459 $x459)) $x471)))
 (let (($x473 (and (and (and $x468 $x454) $x456) $x467)))
 (let (($x505 (and $x473 $x507)))
 (let (($x434 (not true)))
 (let ((?x429 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var605X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x422 (concat ?x429 (select input.dst.llvm-mem (bvadd input.ind-%var605X (_ bv4 32))))))
 (let ((?x425 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var605X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x424 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var605X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x449 (concat ?x424 (concat ?x425 ?x422))))
 (let (($x453 (= input.ind-%var605X.2.1 ?x449)))
 (let (($x406 (bvuge input.ind-%var605X.0 (_ bv1 32))))
 (let (($x433 (=> $x406 $x453)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd input.ind-%var605X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var605X))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd input.ind-%var605X (_ bv2 32))) ?x417)))
 (let ((?x428 (concat (select input.dst.llvm-mem (bvadd input.ind-%var605X (_ bv3 32))) ?x418)))
 (let (($x452 (= input.ind-%var605X.2.0 ?x428)))
 (let (($x436 (=> $x406 $x452)))
 (let (($x437 (= (_ bv0 32) input.ind-%var605X)))
 (let ((?x414 (ite $x437 (_ bv0 32) (_ bv1 32))))
 (let (($x435 (bvuge ?x414 (_ bv1 32))))
 (let (($x415 (= $x406 $x435)))
 (let (($x403 (= input.ind-%var605X.0 (_ bv0 32))))
 (let (($x405 (=> $x403 $x27)))
 (let (($x440 (= ?x414 (_ bv0 32))))
 (let (($x404 (= $x403 $x440)))
 (let (($x413 (= input.spec-%tmpvar-0.L2%9%bbentry input.dst.llvm-%l)))
 (let (($x504 (and (and (and (and (and $x413 $x404) $x405) $x415) $x436) $x433)))
 (let (($x395 (= input.ind-%var602X.2.1 input.ind-%var602X.2.1)))
 (let (($x398 (bvuge input.ind-%var602X.0 (_ bv1 32))))
 (let (($x396 (=> $x398 $x395)))
 (let (($x393 (= input.ind-%var602X.2.0 input.ind-%var602X.2.0)))
 (let (($x408 (=> $x398 $x393)))
 (let (($x391 (= $x398 $x398)))
 (let (($x407 (= input.ind-%var602X.0 (_ bv0 32))))
 (let (($x390 (=> $x407 $x27)))
 (let (($x411 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x407 $x407)) $x390)))
 (let (($x409 (and (and (and $x411 $x391) $x408) $x396)))
 (let (($x439 (and $x409 $x504)))
 (let ((?x382 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var599X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x378 (concat ?x382 (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv4 32))))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var599X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var599X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x363 (concat ?x361 (concat ?x377 ?x378))))
 (let (($x379 (= ?x363 ?x363)))
 (let (($x384 (= (_ bv0 32) input.ind-%var599X)))
 (let ((?x349 (ite $x384 (_ bv0 32) (_ bv1 32))))
 (let (($x366 (bvuge ?x349 (_ bv1 32))))
 (let (($x364 (=> $x366 $x379)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var599X))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv2 32))) ?x353)))
 (let ((?x357 (concat (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv3 32))) ?x375)))
 (let (($x372 (= ?x357 ?x357)))
 (let (($x380 (=> $x366 $x372)))
 (let (($x371 (= $x366 $x366)))
 (let (($x365 (= ?x349 (_ bv0 32))))
 (let (($x351 (=> $x365 $x27)))
 (let (($x385 (and (and (= input.dst.llvm-%l input.dst.llvm-%l) (= $x365 $x365)) $x351)))
 (let (($x370 (and (and (and $x385 $x371) $x380) $x364)))
 (let (($x330 (= input.ind-%var596X.2.1 input.ind-%var596X.2.1)))
 (let (($x332 (bvuge input.ind-%var596X.0 (_ bv1 32))))
 (let (($x331 (=> $x332 $x330)))
 (let (($x338 (= input.ind-%var596X.2.0 input.ind-%var596X.2.0)))
 (let (($x333 (=> $x332 $x338)))
 (let (($x341 (= $x332 $x332)))
 (let (($x346 (= input.ind-%var596X.0 (_ bv0 32))))
 (let (($x337 (=> $x346 $x27)))
 (let (($x335 (and (and (= input.spec-%var-l-0 input.spec-%var-l-0) (= $x346 $x346)) $x337)))
 (let (($x343 (and (and (and $x335 $x341) $x333) $x331)))
 (let (($x386 (and $x343 $x370)))
 (let (($x510 (or (or (or $x386 $x439) $x434) $x505)))
 (let (($x38 (and true $x510)))
 (let (($x73 (= $x38 true)))
 (let (($x7 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x245 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x319 (= $x245 $x7)))
 (let (($x188 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x272 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x237 (and $x272 $x188)))
 (let (($x48 (=> $x237 $x319)))
 (let (($x314 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x233 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x301 (= $x233 $x314)))
 (let (($x43 (=> $x237 $x301)))
 (let (($x300 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x295 (=> $x237 $x300)))
 (let (($x316 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x313 (= $x188 $x316)))
 (let (($x309 (=> $x272 $x313)))
 (let (($x204 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x224 (and $x272 $x204)))
 (let (($x238 (=> $x224 $x27)))
 (let (($x292 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x293 (= $x204 $x292)))
 (let (($x299 (=> $x272 $x293)))
 (let (($x298 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x308 (=> $x272 $x298)))
 (let (($x67 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x312 (= $x272 $x67)))
 (let (($x136 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x259 (=> $x136 $x27)))
 (let (($x307 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x320 (= $x136 $x307)))
 (let (($x303 (and (and (and (and (and (and $x320 $x259) $x312) $x308) $x299) $x238) $x309)))
 (let (($x317 (and (and (and $x303 $x295) $x43) $x48)))
 (let (($x322 (= $x317 true)))
 (let (($x286 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x287 (= $x188 $x286)))
 (let (($x278 (=> $x272 $x287)))
 (let (($x253 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x271 (= $x204 $x253)))
 (let (($x274 (=> $x272 $x271)))
 (let (($x21 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x285 (=> $x272 $x21)))
 (let (($x284 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x251 (= $x272 $x284)))
 (let (($x252 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x281 (= $x136 $x252)))
 (let (($x22 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x311 (and (and (and (and (and (and $x22 $x281) $x259) $x251) $x285) $x274) $x238)))
 (let (($x42 (and $x311 $x278)))
 (let (($x306 (= $x42 true)))
 (let (($x246 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x262 (= $x245 $x246)))
 (let (($x276 (=> $x237 $x262)))
 (let (($x242 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x227 (= $x233 $x242)))
 (let (($x234 (=> $x237 $x227)))
 (let (($x243 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x225 (=> $x237 $x243)))
 (let (($x269 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x226 (= $x188 $x269)))
 (let (($x244 (=> $x272 $x226)))
 (let (($x212 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x231 (= $x204 $x212)))
 (let (($x283 (=> $x272 $x231)))
 (let (($x263 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x235 (=> $x272 $x263)))
 (let (($x220 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x211 (= $x272 $x220)))
 (let (($x257 (and (and (= $x136 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x259) $x211)))
 (let (($x279 (and (and (and (and (and (and $x257 $x235) $x283) $x238) $x244) $x225) $x234)))
 (let (($x267 (and $x279 $x276)))
 (let (($x266 (= $x267 true)))
 (let ((?x174 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x135 (concat ?x174 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x175 (concat ?x213 (concat ?x141 ?x135))))
 (let ((?x193 (bvadd ?x175 (_ bv4 32))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem ?x193))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv2 32))) ?x229))))
 (let (($x230 (= (_ bv0 32) ?x198)))
 (let ((?x199 (ite $x230 (_ bv0 32) (_ bv1 32))))
 (let (($x282 (bvuge ?x199 (_ bv1 32))))
 (let (($x218 (= $x188 $x282)))
 (let (($x189 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x137 (and $x189 $x272)))
 (let (($x255 (=> $x137 $x218)))
 (let (($x258 (= ?x199 (_ bv0 32))))
 (let (($x190 (= $x204 $x258)))
 (let (($x191 (=> $x137 $x190)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x182))))
 (let (($x214 (= input.spec-%var-l-0.2.1.2.0 ?x177)))
 (let (($x183 (=> $x137 $x214)))
 (let (($x148 (= (_ bv0 32) ?x175)))
 (let ((?x147 (ite $x148 (_ bv0 32) (_ bv1 32))))
 (let (($x140 (bvuge ?x147 (_ bv1 32))))
 (let (($x143 (= $x272 $x140)))
 (let (($x172 (=> $x189 $x143)))
 (let (($x146 (and $x189 $x136)))
 (let (($x170 (=> $x146 $x27)))
 (let (($x207 (= ?x147 (_ bv0 32))))
 (let (($x150 (= $x136 $x207)))
 (let (($x217 (=> $x189 $x150)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x120)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x122)))
 (let (($x186 (= input.spec-%var-l-0.2.0 ?x132)))
 (let (($x133 (=> $x189 $x186)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x216 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x129 (bvuge ?x216 (_ bv1 32))))
 (let (($x169 (= $x189 $x129)))
 (let (($x156 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x125 (=> $x156 $x27)))
 (let (($x124 (= ?x216 (_ bv0 32))))
 (let (($x121 (= $x156 $x124)))
 (let (($x194 (and (and (and (and (and (and $x121 $x125) $x169) $x133) $x217) $x170) $x172)))
 (let (($x210 (and (and (and $x194 $x183) $x191) $x255)))
 (let (($x219 (= $x210 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x101 (concat ?x18 (concat ?x12 ?x29)))))
 (let (($x118 (= ?x88 input.dst.llvm-%l)))
 (let (($x71 (= $x118 true)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x152 (concat ?x104 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x62 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x19 (bvadd ?x62 (_ bv3 32))))
 (let ((?x167 (concat (select input.dst.llvm-mem ?x19) (concat ?x113 ?x152))))
 (let (($x106 (= (bvand ?x167 (_ bv4294967288 32)) ?x167)))
 (let (($x98 (= (bvand ?x62 (_ bv4294967292 32)) ?x62)))
 (let (($x107 (and $x98 $x106)))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x163 (and true $x109)))
 (let (($x114 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x62 (bvsub ?x62 (_ bv4 32))) (bvult ?x62 (bvsub ?x62 (_ bv4 32))))))
 (let (($x116 (and (and (and $x114 $x163) $x98) $x107)))
 (let (($x69 (not $x57)))
 (let (($x61 (=> $x69 $x116)))
 (let (($x100 (= input.dst.llvm-%l ?x88)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x93)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x30 $x68)))
 (let (($x164 (and $x82 $x83)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x72 $x164)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x25)))))))
 (let (($x90 (and $x6 $x45)))
 (let (($x108 (and $x90 $x100)))
 (let (($x95 (and true $x108)))
 (let (($x26 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x200 (and $x26 $x95)))
 (let (($x13 (and $x200 $x61)))
 (let (($x117 (= $x13 true)))
 (let (($x77 (= $x57 true)))
 (let (($x76 (= $x26 true)))
 (let (($x70 (and $x76 $x77)))
 (let (($x168 (and $x70 $x117)))
 (let (($x126 (and $x168 $x71)))
 (let (($x222 (and $x126 $x219)))
 (let (($x270 (and $x222 $x266)))
 (let (($x297 (and $x270 $x306)))
 (let (($x323 (and $x297 $x322)))
 (let (($x324 (and $x156 $x323)))
 (let (($x325 (and $x27 $x324)))
 (let (($x44 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x326 (and $x44 $x325)))
 (let (($x55 (bvugt ?x62 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x11 (=> (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x55)))))))
 (let (($x10 (=> (and $x69 (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x79 $x55)))))))
 (let (($x339 (and $x10 $x326)))
 (let (($x15 (=> $x339 $x73)))
 (not $x15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var611X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var611X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var611X.0 () (_ BitVec 32))
(declare-fun input.ind-%var611X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var608X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var608X.0 () (_ BitVec 32))
(declare-fun input.ind-%var608X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var605X () (_ BitVec 32))
(declare-fun input.ind-%var605X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var605X.0 () (_ BitVec 32))
(declare-fun input.ind-%var605X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var602X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var602X.0 () (_ BitVec 32))
(declare-fun input.ind-%var602X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var599X () (_ BitVec 32))
(declare-fun input.ind-%var596X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var596X.0 () (_ BitVec 32))
(declare-fun input.ind-%var596X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x489 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var611X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x496 (concat ?x489 (select input.dst.llvm-mem (bvadd input.ind-%var611X (_ bv4 32))))))
 (let ((?x494 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var611X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x495 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var611X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x490 (concat ?x495 (concat ?x494 ?x496))))
 (let (($x487 (= input.ind-%var611X.2.1 ?x490)))
 (let (($x476 (bvuge input.ind-%var611X.0 (_ bv1 32))))
 (let (($x497 (=> $x476 $x487)))
 (let ((?x482 (concat (select input.dst.llvm-mem (bvadd input.ind-%var611X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var611X))))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd input.ind-%var611X (_ bv2 32))) ?x482)))
 (let ((?x483 (concat (select input.dst.llvm-mem (bvadd input.ind-%var611X (_ bv3 32))) ?x481)))
 (let (($x514 (= input.ind-%var611X.2.0 ?x483)))
 (let (($x485 (=> $x476 $x514)))
 (let (($x465 (= (_ bv0 32) input.ind-%var611X)))
 (let ((?x466 (ite $x465 (_ bv0 32) (_ bv1 32))))
 (let (($x477 (bvuge ?x466 (_ bv1 32))))
 (let (($x478 (= $x476 $x477)))
 (let (($x27 (= false false)))
 (let (($x474 (= input.ind-%var611X.0 (_ bv0 32))))
 (let (($x499 (=> $x474 $x27)))
 (let (($x498 (= ?x466 (_ bv0 32))))
 (let (($x475 (= $x474 $x498)))
 (let (($x463 (= input.spec-%var-node_next-0.L2%9%bbentry input.dst.llvm-%l)))
 (let (($x507 (and (and (and (and (and $x463 $x475) $x499) $x478) $x485) $x497)))
 (let (($x472 (= input.ind-%var608X.2.1 input.ind-%var608X.2.1)))
 (let (($x445 (bvuge input.ind-%var608X.0 (_ bv1 32))))
 (let (($x467 (=> $x445 $x472)))
 (let (($x455 (= input.ind-%var608X.2.0 input.ind-%var608X.2.0)))
 (let (($x456 (=> $x445 $x455)))
 (let (($x454 (= $x445 $x445)))
 (let (($x459 (= input.ind-%var608X.0 (_ bv0 32))))
 (let (($x471 (=> $x459 $x27)))
 (let (($x468 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x459 $x459)) $x471)))
 (let (($x473 (and (and (and $x468 $x454) $x456) $x467)))
 (let (($x505 (and $x473 $x507)))
 (let (($x434 (not true)))
 (let ((?x429 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var605X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x422 (concat ?x429 (select input.dst.llvm-mem (bvadd input.ind-%var605X (_ bv4 32))))))
 (let ((?x425 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var605X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x424 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var605X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x449 (concat ?x424 (concat ?x425 ?x422))))
 (let (($x453 (= input.ind-%var605X.2.1 ?x449)))
 (let (($x406 (bvuge input.ind-%var605X.0 (_ bv1 32))))
 (let (($x433 (=> $x406 $x453)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd input.ind-%var605X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var605X))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd input.ind-%var605X (_ bv2 32))) ?x417)))
 (let ((?x428 (concat (select input.dst.llvm-mem (bvadd input.ind-%var605X (_ bv3 32))) ?x418)))
 (let (($x452 (= input.ind-%var605X.2.0 ?x428)))
 (let (($x436 (=> $x406 $x452)))
 (let (($x437 (= (_ bv0 32) input.ind-%var605X)))
 (let ((?x414 (ite $x437 (_ bv0 32) (_ bv1 32))))
 (let (($x435 (bvuge ?x414 (_ bv1 32))))
 (let (($x415 (= $x406 $x435)))
 (let (($x403 (= input.ind-%var605X.0 (_ bv0 32))))
 (let (($x405 (=> $x403 $x27)))
 (let (($x440 (= ?x414 (_ bv0 32))))
 (let (($x404 (= $x403 $x440)))
 (let (($x413 (= input.spec-%tmpvar-0.L2%9%bbentry input.dst.llvm-%l)))
 (let (($x504 (and (and (and (and (and $x413 $x404) $x405) $x415) $x436) $x433)))
 (let (($x395 (= input.ind-%var602X.2.1 input.ind-%var602X.2.1)))
 (let (($x398 (bvuge input.ind-%var602X.0 (_ bv1 32))))
 (let (($x396 (=> $x398 $x395)))
 (let (($x393 (= input.ind-%var602X.2.0 input.ind-%var602X.2.0)))
 (let (($x408 (=> $x398 $x393)))
 (let (($x391 (= $x398 $x398)))
 (let (($x407 (= input.ind-%var602X.0 (_ bv0 32))))
 (let (($x390 (=> $x407 $x27)))
 (let (($x411 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x407 $x407)) $x390)))
 (let (($x409 (and (and (and $x411 $x391) $x408) $x396)))
 (let (($x439 (and $x409 $x504)))
 (let ((?x382 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var599X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x378 (concat ?x382 (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv4 32))))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var599X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var599X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x363 (concat ?x361 (concat ?x377 ?x378))))
 (let (($x379 (= ?x363 ?x363)))
 (let (($x384 (= (_ bv0 32) input.ind-%var599X)))
 (let ((?x349 (ite $x384 (_ bv0 32) (_ bv1 32))))
 (let (($x366 (bvuge ?x349 (_ bv1 32))))
 (let (($x364 (=> $x366 $x379)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var599X))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv2 32))) ?x353)))
 (let ((?x357 (concat (select input.dst.llvm-mem (bvadd input.ind-%var599X (_ bv3 32))) ?x375)))
 (let (($x372 (= ?x357 ?x357)))
 (let (($x380 (=> $x366 $x372)))
 (let (($x371 (= $x366 $x366)))
 (let (($x365 (= ?x349 (_ bv0 32))))
 (let (($x351 (=> $x365 $x27)))
 (let (($x385 (and (and (= input.dst.llvm-%l input.dst.llvm-%l) (= $x365 $x365)) $x351)))
 (let (($x370 (and (and (and $x385 $x371) $x380) $x364)))
 (let (($x330 (= input.ind-%var596X.2.1 input.ind-%var596X.2.1)))
 (let (($x332 (bvuge input.ind-%var596X.0 (_ bv1 32))))
 (let (($x331 (=> $x332 $x330)))
 (let (($x338 (= input.ind-%var596X.2.0 input.ind-%var596X.2.0)))
 (let (($x333 (=> $x332 $x338)))
 (let (($x341 (= $x332 $x332)))
 (let (($x346 (= input.ind-%var596X.0 (_ bv0 32))))
 (let (($x337 (=> $x346 $x27)))
 (let (($x335 (and (and (= input.spec-%var-l-0 input.spec-%var-l-0) (= $x346 $x346)) $x337)))
 (let (($x343 (and (and (and $x335 $x341) $x333) $x331)))
 (let (($x386 (and $x343 $x370)))
 (let (($x510 (or (or (or $x386 $x439) $x434) $x505)))
 (let (($x38 (and true $x510)))
 (let (($x73 (= $x38 true)))
 (let (($x7 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x245 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x319 (= $x245 $x7)))
 (let (($x188 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x272 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x237 (and $x272 $x188)))
 (let (($x48 (=> $x237 $x319)))
 (let (($x314 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x233 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x301 (= $x233 $x314)))
 (let (($x43 (=> $x237 $x301)))
 (let (($x300 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x295 (=> $x237 $x300)))
 (let (($x316 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x313 (= $x188 $x316)))
 (let (($x309 (=> $x272 $x313)))
 (let (($x204 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x224 (and $x272 $x204)))
 (let (($x238 (=> $x224 $x27)))
 (let (($x292 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x293 (= $x204 $x292)))
 (let (($x299 (=> $x272 $x293)))
 (let (($x298 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x308 (=> $x272 $x298)))
 (let (($x67 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x312 (= $x272 $x67)))
 (let (($x136 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x259 (=> $x136 $x27)))
 (let (($x307 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x320 (= $x136 $x307)))
 (let (($x303 (and (and (and (and (and (and $x320 $x259) $x312) $x308) $x299) $x238) $x309)))
 (let (($x317 (and (and (and $x303 $x295) $x43) $x48)))
 (let (($x322 (= $x317 true)))
 (let (($x286 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x287 (= $x188 $x286)))
 (let (($x278 (=> $x272 $x287)))
 (let (($x253 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x271 (= $x204 $x253)))
 (let (($x274 (=> $x272 $x271)))
 (let (($x21 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x285 (=> $x272 $x21)))
 (let (($x284 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x251 (= $x272 $x284)))
 (let (($x252 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x281 (= $x136 $x252)))
 (let (($x22 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x311 (and (and (and (and (and (and $x22 $x281) $x259) $x251) $x285) $x274) $x238)))
 (let (($x42 (and $x311 $x278)))
 (let (($x306 (= $x42 true)))
 (let (($x246 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x262 (= $x245 $x246)))
 (let (($x276 (=> $x237 $x262)))
 (let (($x242 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x227 (= $x233 $x242)))
 (let (($x234 (=> $x237 $x227)))
 (let (($x243 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x225 (=> $x237 $x243)))
 (let (($x269 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x226 (= $x188 $x269)))
 (let (($x244 (=> $x272 $x226)))
 (let (($x212 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x231 (= $x204 $x212)))
 (let (($x283 (=> $x272 $x231)))
 (let (($x263 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x235 (=> $x272 $x263)))
 (let (($x220 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x211 (= $x272 $x220)))
 (let (($x257 (and (and (= $x136 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x259) $x211)))
 (let (($x279 (and (and (and (and (and (and $x257 $x235) $x283) $x238) $x244) $x225) $x234)))
 (let (($x267 (and $x279 $x276)))
 (let (($x266 (= $x267 true)))
 (let ((?x174 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x135 (concat ?x174 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x175 (concat ?x213 (concat ?x141 ?x135))))
 (let ((?x193 (bvadd ?x175 (_ bv4 32))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem ?x193))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv2 32))) ?x229))))
 (let (($x230 (= (_ bv0 32) ?x198)))
 (let ((?x199 (ite $x230 (_ bv0 32) (_ bv1 32))))
 (let (($x282 (bvuge ?x199 (_ bv1 32))))
 (let (($x218 (= $x188 $x282)))
 (let (($x189 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x137 (and $x189 $x272)))
 (let (($x255 (=> $x137 $x218)))
 (let (($x258 (= ?x199 (_ bv0 32))))
 (let (($x190 (= $x204 $x258)))
 (let (($x191 (=> $x137 $x190)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x182))))
 (let (($x214 (= input.spec-%var-l-0.2.1.2.0 ?x177)))
 (let (($x183 (=> $x137 $x214)))
 (let (($x148 (= (_ bv0 32) ?x175)))
 (let ((?x147 (ite $x148 (_ bv0 32) (_ bv1 32))))
 (let (($x140 (bvuge ?x147 (_ bv1 32))))
 (let (($x143 (= $x272 $x140)))
 (let (($x172 (=> $x189 $x143)))
 (let (($x146 (and $x189 $x136)))
 (let (($x170 (=> $x146 $x27)))
 (let (($x207 (= ?x147 (_ bv0 32))))
 (let (($x150 (= $x136 $x207)))
 (let (($x217 (=> $x189 $x150)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x120)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x122)))
 (let (($x186 (= input.spec-%var-l-0.2.0 ?x132)))
 (let (($x133 (=> $x189 $x186)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x216 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x129 (bvuge ?x216 (_ bv1 32))))
 (let (($x169 (= $x189 $x129)))
 (let (($x156 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x125 (=> $x156 $x27)))
 (let (($x124 (= ?x216 (_ bv0 32))))
 (let (($x121 (= $x156 $x124)))
 (let (($x194 (and (and (and (and (and (and $x121 $x125) $x169) $x133) $x217) $x170) $x172)))
 (let (($x210 (and (and (and $x194 $x183) $x191) $x255)))
 (let (($x219 (= $x210 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x101 (concat ?x18 (concat ?x12 ?x29)))))
 (let (($x118 (= ?x88 input.dst.llvm-%l)))
 (let (($x71 (= $x118 true)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x152 (concat ?x104 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x62 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x19 (bvadd ?x62 (_ bv3 32))))
 (let ((?x167 (concat (select input.dst.llvm-mem ?x19) (concat ?x113 ?x152))))
 (let (($x106 (= (bvand ?x167 (_ bv4294967288 32)) ?x167)))
 (let (($x98 (= (bvand ?x62 (_ bv4294967292 32)) ?x62)))
 (let (($x107 (and $x98 $x106)))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x163 (and true $x109)))
 (let (($x114 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x62 (bvsub ?x62 (_ bv4 32))) (bvult ?x62 (bvsub ?x62 (_ bv4 32))))))
 (let (($x116 (and (and (and $x114 $x163) $x98) $x107)))
 (let (($x69 (not $x57)))
 (let (($x61 (=> $x69 $x116)))
 (let (($x100 (= input.dst.llvm-%l ?x88)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x93)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x30 $x68)))
 (let (($x164 (and $x82 $x83)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x72 $x164)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x25)))))))
 (let (($x90 (and $x6 $x45)))
 (let (($x108 (and $x90 $x100)))
 (let (($x95 (and true $x108)))
 (let (($x26 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x200 (and $x26 $x95)))
 (let (($x13 (and $x200 $x61)))
 (let (($x117 (= $x13 true)))
 (let (($x77 (= $x57 true)))
 (let (($x76 (= $x26 true)))
 (let (($x70 (and $x76 $x77)))
 (let (($x168 (and $x70 $x117)))
 (let (($x126 (and $x168 $x71)))
 (let (($x222 (and $x126 $x219)))
 (let (($x270 (and $x222 $x266)))
 (let (($x297 (and $x270 $x306)))
 (let (($x323 (and $x297 $x322)))
 (let (($x324 (and $x156 $x323)))
 (let (($x325 (and $x27 $x324)))
 (let (($x44 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x326 (and $x44 $x325)))
 (let (($x55 (bvugt ?x62 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x11 (=> (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x55)))))))
 (let (($x10 (=> (and $x69 (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x79 $x55)))))))
 (let (($x339 (and $x10 $x326)))
 (let (($x15 (=> $x339 $x73)))
 (not $x15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791879/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x69 (not $x57)))
 (let (($x307 (or $x57 $x69)))
 (let (($x320 (= $x307 true)))
 (let (($x261 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x191 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x21 (= $x191 $x261)))
 (let (($x207 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x121 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x215 (and $x121 $x207)))
 (let (($x285 (=> $x215 $x21)))
 (let (($x284 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x198 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x251 (= $x198 $x284)))
 (let (($x288 (=> $x215 $x251)))
 (let (($x281 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x254 (=> $x215 $x281)))
 (let (($x273 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x22 (= $x207 $x273)))
 (let (($x275 (=> $x121 $x22)))
 (let (($x26 (= false false)))
 (let (($x133 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x204 (and $x121 $x133)))
 (let (($x193 (=> $x204 $x26)))
 (let (($x267 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x266 (= $x133 $x267)))
 (let (($x270 (=> $x121 $x266)))
 (let (($x246 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x262 (=> $x121 $x246)))
 (let (($x234 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x279 (= $x121 $x234)))
 (let (($x85 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x201 (=> $x85 $x26)))
 (let (($x242 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x227 (= $x85 $x242)))
 (let (($x289 (and (and (and (and (and (and $x227 $x201) $x279) $x262) $x270) $x193) $x275)))
 (let (($x287 (and (and (and $x289 $x254) $x288) $x285)))
 (let (($x278 (= $x287 true)))
 (let (($x269 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x226 (= $x207 $x269)))
 (let (($x244 (=> $x121 $x226)))
 (let (($x224 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x238 (= $x133 $x224)))
 (let (($x265 (=> $x121 $x238)))
 (let (($x231 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x283 (=> $x121 $x231)))
 (let (($x240 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x223 (= $x121 $x240)))
 (let (($x263 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x235 (= $x85 $x263)))
 (let (($x257 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x225 (and (and (and (and (and (and $x257 $x235) $x201) $x223) $x283) $x265) $x193)))
 (let (($x249 (and $x225 $x244)))
 (let (($x239 (= $x249 true)))
 (let (($x209 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x188 (= $x191 $x209)))
 (let (($x282 (=> $x215 $x188)))
 (let (($x199 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x258 (= $x198 $x199)))
 (let (($x190 (=> $x215 $x258)))
 (let (($x184 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x229 (=> $x215 $x184)))
 (let (($x180 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x203 (= $x207 $x180)))
 (let (($x185 (=> $x121 $x203)))
 (let (($x183 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x195 (= $x133 $x183)))
 (let (($x181 (=> $x121 $x195)))
 (let (($x202 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x177 (=> $x121 $x202)))
 (let (($x179 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x149 (= $x121 $x179)))
 (let (($x255 (and (and (= $x85 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x201) $x149)))
 (let (($x236 (and (and (and (and (and (and $x255 $x177) $x181) $x193) $x185) $x229) $x190)))
 (let (($x259 (and $x236 $x282)))
 (let (($x280 (= $x259 true)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x106 (concat ?x115 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x168 (concat ?x117 (concat ?x116 ?x106))))
 (let ((?x206 (bvadd ?x168 (_ bv4 32))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x145))))
 (let (($x135 (= (_ bv0 32) ?x139)))
 (let ((?x142 (ite $x135 (_ bv0 32) (_ bv1 32))))
 (let (($x150 (bvuge ?x142 (_ bv1 32))))
 (let (($x217 (= $x207 $x150)))
 (let (($x92 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x189 (and $x92 $x121)))
 (let (($x187 (=> $x189 $x217)))
 (let (($x175 (= ?x142 (_ bv0 32))))
 (let (($x148 (= $x133 $x175)))
 (let (($x147 (=> $x189 $x148)))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x154))))
 (let (($x122 (= input.spec-%var-l-0.2.1.2.0 ?x120)))
 (let (($x132 (=> $x189 $x122)))
 (let (($x118 (= (_ bv0 32) ?x168)))
 (let ((?x71 (ite $x118 (_ bv0 32) (_ bv1 32))))
 (let (($x27 (bvuge ?x71 (_ bv1 32))))
 (let (($x125 (= $x121 $x27)))
 (let (($x192 (=> $x92 $x125)))
 (let (($x216 (and $x92 $x85)))
 (let (($x124 (=> $x216 $x26)))
 (let (($x126 (= ?x71 (_ bv0 32))))
 (let (($x31 (= $x85 $x126)))
 (let (($x156 (=> $x92 $x31)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x160)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x98)))
 (let (($x113 (= input.spec-%var-l-0.2.0 ?x112)))
 (let (($x102 (=> $x92 $x113)))
 (let ((?x87 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x97 (bvuge ?x87 (_ bv1 32))))
 (let (($x158 (= $x92 $x97)))
 (let (($x89 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x114 (=> $x89 $x26)))
 (let (($x96 (= ?x87 (_ bv0 32))))
 (let (($x94 (= $x89 $x96)))
 (let (($x143 (and (and (and (and (and (and $x94 $x114) $x158) $x102) $x156) $x124) $x192)))
 (let (($x137 (and (and (and $x143 $x132) $x147) $x187)))
 (let (($x60 (= $x137 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x84 (concat ?x12 (concat ?x86 ?x157)))))
 (let (($x100 (= ?x88 input.dst.llvm-%l)))
 (let (($x108 (= $x100 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x68)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x50 $x30)))
 (let (($x93 (and $x75 $x82)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x70 $x93)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x33)))))))
 (let (($x164 (and $x6 $x83)))
 (let (($x45 (= $x164 true)))
 (let (($x95 (and $x45 $x108)))
 (let (($x176 (and $x95 $x60)))
 (let (($x220 (and $x176 $x280)))
 (let (($x233 (and $x220 $x239)))
 (let (($x42 (and $x233 $x278)))
 (let (($x306 (and $x26 $x42)))
 (let (($x54 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x297 (and $x54 $x306)))
 (let ((?x78 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x49 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x78 (_ bv3 32)))))
 (let (($x44 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x49)))))))
 (let (($x23 (=> (and $x69 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x51 $x49)))))))
 (let (($x39 (and $x23 $x297)))
 (let (($x302 (=> $x39 $x320)))
 (not $x302)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x69 (not $x57)))
 (let (($x307 (or $x57 $x69)))
 (let (($x320 (= $x307 true)))
 (let (($x261 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x191 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x21 (= $x191 $x261)))
 (let (($x207 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x121 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x215 (and $x121 $x207)))
 (let (($x285 (=> $x215 $x21)))
 (let (($x284 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x198 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x251 (= $x198 $x284)))
 (let (($x288 (=> $x215 $x251)))
 (let (($x281 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x254 (=> $x215 $x281)))
 (let (($x273 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x22 (= $x207 $x273)))
 (let (($x275 (=> $x121 $x22)))
 (let (($x26 (= false false)))
 (let (($x133 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x204 (and $x121 $x133)))
 (let (($x193 (=> $x204 $x26)))
 (let (($x267 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x266 (= $x133 $x267)))
 (let (($x270 (=> $x121 $x266)))
 (let (($x246 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x262 (=> $x121 $x246)))
 (let (($x234 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x279 (= $x121 $x234)))
 (let (($x85 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x201 (=> $x85 $x26)))
 (let (($x242 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x227 (= $x85 $x242)))
 (let (($x289 (and (and (and (and (and (and $x227 $x201) $x279) $x262) $x270) $x193) $x275)))
 (let (($x287 (and (and (and $x289 $x254) $x288) $x285)))
 (let (($x278 (= $x287 true)))
 (let (($x269 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x226 (= $x207 $x269)))
 (let (($x244 (=> $x121 $x226)))
 (let (($x224 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x238 (= $x133 $x224)))
 (let (($x265 (=> $x121 $x238)))
 (let (($x231 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x283 (=> $x121 $x231)))
 (let (($x240 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x223 (= $x121 $x240)))
 (let (($x263 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x235 (= $x85 $x263)))
 (let (($x257 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x225 (and (and (and (and (and (and $x257 $x235) $x201) $x223) $x283) $x265) $x193)))
 (let (($x249 (and $x225 $x244)))
 (let (($x239 (= $x249 true)))
 (let (($x209 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x188 (= $x191 $x209)))
 (let (($x282 (=> $x215 $x188)))
 (let (($x199 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x258 (= $x198 $x199)))
 (let (($x190 (=> $x215 $x258)))
 (let (($x184 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x229 (=> $x215 $x184)))
 (let (($x180 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x203 (= $x207 $x180)))
 (let (($x185 (=> $x121 $x203)))
 (let (($x183 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x195 (= $x133 $x183)))
 (let (($x181 (=> $x121 $x195)))
 (let (($x202 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x177 (=> $x121 $x202)))
 (let (($x179 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x149 (= $x121 $x179)))
 (let (($x255 (and (and (= $x85 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x201) $x149)))
 (let (($x236 (and (and (and (and (and (and $x255 $x177) $x181) $x193) $x185) $x229) $x190)))
 (let (($x259 (and $x236 $x282)))
 (let (($x280 (= $x259 true)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x106 (concat ?x115 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x168 (concat ?x117 (concat ?x116 ?x106))))
 (let ((?x206 (bvadd ?x168 (_ bv4 32))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x145))))
 (let (($x135 (= (_ bv0 32) ?x139)))
 (let ((?x142 (ite $x135 (_ bv0 32) (_ bv1 32))))
 (let (($x150 (bvuge ?x142 (_ bv1 32))))
 (let (($x217 (= $x207 $x150)))
 (let (($x92 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x189 (and $x92 $x121)))
 (let (($x187 (=> $x189 $x217)))
 (let (($x175 (= ?x142 (_ bv0 32))))
 (let (($x148 (= $x133 $x175)))
 (let (($x147 (=> $x189 $x148)))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x154))))
 (let (($x122 (= input.spec-%var-l-0.2.1.2.0 ?x120)))
 (let (($x132 (=> $x189 $x122)))
 (let (($x118 (= (_ bv0 32) ?x168)))
 (let ((?x71 (ite $x118 (_ bv0 32) (_ bv1 32))))
 (let (($x27 (bvuge ?x71 (_ bv1 32))))
 (let (($x125 (= $x121 $x27)))
 (let (($x192 (=> $x92 $x125)))
 (let (($x216 (and $x92 $x85)))
 (let (($x124 (=> $x216 $x26)))
 (let (($x126 (= ?x71 (_ bv0 32))))
 (let (($x31 (= $x85 $x126)))
 (let (($x156 (=> $x92 $x31)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x160)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x98)))
 (let (($x113 (= input.spec-%var-l-0.2.0 ?x112)))
 (let (($x102 (=> $x92 $x113)))
 (let ((?x87 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x97 (bvuge ?x87 (_ bv1 32))))
 (let (($x158 (= $x92 $x97)))
 (let (($x89 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x114 (=> $x89 $x26)))
 (let (($x96 (= ?x87 (_ bv0 32))))
 (let (($x94 (= $x89 $x96)))
 (let (($x143 (and (and (and (and (and (and $x94 $x114) $x158) $x102) $x156) $x124) $x192)))
 (let (($x137 (and (and (and $x143 $x132) $x147) $x187)))
 (let (($x60 (= $x137 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x84 (concat ?x12 (concat ?x86 ?x157)))))
 (let (($x100 (= ?x88 input.dst.llvm-%l)))
 (let (($x108 (= $x100 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x68)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x50 $x30)))
 (let (($x93 (and $x75 $x82)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x70 $x93)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x33)))))))
 (let (($x164 (and $x6 $x83)))
 (let (($x45 (= $x164 true)))
 (let (($x95 (and $x45 $x108)))
 (let (($x176 (and $x95 $x60)))
 (let (($x220 (and $x176 $x280)))
 (let (($x233 (and $x220 $x239)))
 (let (($x42 (and $x233 $x278)))
 (let (($x306 (and $x26 $x42)))
 (let (($x54 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x297 (and $x54 $x306)))
 (let ((?x78 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x49 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x78 (_ bv3 32)))))
 (let (($x44 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x49)))))))
 (let (($x23 (=> (and $x69 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x51 $x49)))))))
 (let (($x39 (and $x23 $x297)))
 (let (($x302 (=> $x39 $x320)))
 (not $x302)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791879/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var739X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var739X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var739X.0 () (_ BitVec 32))
(declare-fun input.ind-%var739X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var736X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var736X.0 () (_ BitVec 32))
(declare-fun input.ind-%var736X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.ind-%var733X () (_ BitVec 32))
(declare-fun input.ind-%var733X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var733X.0 () (_ BitVec 32))
(declare-fun input.ind-%var733X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var730X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var730X.0 () (_ BitVec 32))
(declare-fun input.ind-%var730X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var727X () (_ BitVec 32))
(declare-fun input.ind-%var724X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var724X.0 () (_ BitVec 32))
(declare-fun input.ind-%var724X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x580 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var739X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x567 (concat ?x580 (select input.dst.llvm-mem (bvadd input.ind-%var739X (_ bv4 32))))))
 (let ((?x569 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var739X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x572 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var739X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x563 (concat ?x572 (concat ?x569 ?x567))))
 (let (($x573 (= input.ind-%var739X.2.1 ?x563)))
 (let (($x576 (bvuge input.ind-%var739X.0 (_ bv1 32))))
 (let (($x566 (=> $x576 $x573)))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd input.ind-%var739X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var739X))))
 (let ((?x558 (concat (select input.dst.llvm-mem (bvadd input.ind-%var739X (_ bv2 32))) ?x554)))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd input.ind-%var739X (_ bv3 32))) ?x558)))
 (let (($x553 (= input.ind-%var739X.2.0 ?x555)))
 (let (($x557 (=> $x576 $x553)))
 (let (($x545 (= (_ bv0 32) input.ind-%var739X)))
 (let ((?x577 (ite $x545 (_ bv0 32) (_ bv1 32))))
 (let (($x547 (bvuge ?x577 (_ bv1 32))))
 (let (($x548 (= $x576 $x547)))
 (let (($x41 (= false false)))
 (let (($x543 (= input.ind-%var739X.0 (_ bv0 32))))
 (let (($x578 (=> $x543 $x41)))
 (let (($x546 (= ?x577 (_ bv0 32))))
 (let (($x575 (= $x543 $x546)))
 (let ((?x217 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x187 (concat ?x217 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x63 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x37 (bvadd ?x63 (_ bv3 32))))
 (let ((?x178 (concat (select input.dst.llvm-mem ?x37) (concat ?x60 ?x187))))
 (let (($x541 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1 ?x178)))
 (let (($x586 (and (and (and (and (and $x541 $x575) $x578) $x548) $x557) $x566)))
 (let (($x527 (= input.ind-%var736X.2.1 input.ind-%var736X.2.1)))
 (let (($x531 (bvuge input.ind-%var736X.0 (_ bv1 32))))
 (let (($x537 (=> $x531 $x527)))
 (let (($x536 (= input.ind-%var736X.2.0 input.ind-%var736X.2.0)))
 (let (($x534 (=> $x531 $x536)))
 (let (($x524 (= $x531 $x531)))
 (let (($x523 (= input.ind-%var736X.0 (_ bv0 32))))
 (let (($x533 (=> $x523 $x41)))
 (let (($x530 (= $x523 $x523)))
 (let (($x472 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x539 (and (and (and (and (and $x472 $x530) $x533) $x524) $x534) $x537)))
 (let (($x587 (and $x539 $x586)))
 (let (($x36 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x590 (and $x36 $x587)))
 (let (($x522 (not true)))
 (let ((?x505 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var733X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x510 (concat ?x505 (select input.dst.llvm-mem (bvadd input.ind-%var733X (_ bv4 32))))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var733X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var733X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x53 (concat ?x59 (concat ?x73 ?x510))))
 (let (($x46 (= input.ind-%var733X.2.1 ?x53)))
 (let (($x481 (bvuge input.ind-%var733X.0 (_ bv1 32))))
 (let (($x155 (=> $x481 $x46)))
 (let ((?x486 (concat (select input.dst.llvm-mem (bvadd input.ind-%var733X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var733X))))
 (let ((?x494 (concat (select input.dst.llvm-mem (bvadd input.ind-%var733X (_ bv2 32))) ?x486)))
 (let ((?x493 (concat (select input.dst.llvm-mem (bvadd input.ind-%var733X (_ bv3 32))) ?x494)))
 (let (($x496 (= input.ind-%var733X.2.0 ?x493)))
 (let (($x488 (=> $x481 $x496)))
 (let (($x512 (= (_ bv0 32) input.ind-%var733X)))
 (let ((?x517 (ite $x512 (_ bv0 32) (_ bv1 32))))
 (let (($x483 (bvuge ?x517 (_ bv1 32))))
 (let (($x514 (= $x481 $x483)))
 (let (($x513 (= input.ind-%var733X.0 (_ bv0 32))))
 (let (($x482 (=> $x513 $x41)))
 (let (($x484 (= ?x517 (_ bv0 32))))
 (let (($x479 (= $x513 $x484)))
 (let (($x503 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1 ?x178)))
 (let (($x588 (and (and (and (and (and $x503 $x479) $x482) $x514) $x488) $x155)))
 (let (($x475 (= input.ind-%var730X.2.1 input.ind-%var730X.2.1)))
 (let (($x470 (bvuge input.ind-%var730X.0 (_ bv1 32))))
 (let (($x515 (=> $x470 $x475)))
 (let (($x465 (= input.ind-%var730X.2.0 input.ind-%var730X.2.0)))
 (let (($x466 (=> $x470 $x465)))
 (let (($x474 (= $x470 $x470)))
 (let (($x473 (= input.ind-%var730X.0 (_ bv0 32))))
 (let (($x463 (=> $x473 $x41)))
 (let (($x478 (and (and (and (and (and $x472 (= $x473 $x473)) $x463) $x474) $x466) $x515)))
 (let (($x521 (and $x478 $x588)))
 (let (($x589 (and $x36 $x521)))
 (let ((?x439 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var727X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x500 (concat ?x439 (select input.dst.llvm-mem (bvadd input.ind-%var727X (_ bv4 32))))))
 (let ((?x509 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var727X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x444 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var727X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x458 (concat ?x444 (concat ?x509 ?x500))))
 (let (($x471 (= ?x458 ?x458)))
 (let (($x451 (= (_ bv0 32) input.ind-%var727X)))
 (let ((?x417 (ite $x451 (_ bv0 32) (_ bv1 32))))
 (let (($x436 (bvuge ?x417 (_ bv1 32))))
 (let (($x468 (=> $x436 $x471)))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.ind-%var727X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var727X))))
 (let ((?x432 (concat (select input.dst.llvm-mem (bvadd input.ind-%var727X (_ bv2 32))) ?x424)))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd input.ind-%var727X (_ bv3 32))) ?x432)))
 (let (($x423 (= ?x422 ?x422)))
 (let (($x449 (=> $x436 $x423)))
 (let (($x441 (= $x436 $x436)))
 (let (($x418 (= ?x417 (_ bv0 32))))
 (let (($x452 (=> $x418 $x41)))
 (let (($x428 (= $x418 $x418)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x222 (concat ?x193 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x205 (concat ?x215 (concat ?x203 ?x222))))
 (let (($x447 (= ?x205 ?x178)))
 (let (($x455 (and (and (and (and (and $x447 $x428) $x452) $x441) $x449) $x468)))
 (let (($x415 (= input.ind-%var724X.2.1 input.ind-%var724X.2.1)))
 (let (($x404 (bvuge input.ind-%var724X.0 (_ bv1 32))))
 (let (($x508 (=> $x404 $x415)))
 (let (($x438 (= input.ind-%var724X.2.0 input.ind-%var724X.2.0)))
 (let (($x406 (=> $x404 $x438)))
 (let (($x442 (= $x404 $x404)))
 (let (($x437 (= input.ind-%var724X.0 (_ bv0 32))))
 (let (($x440 (=> $x437 $x41)))
 (let (($x414 (= $x437 $x437)))
 (let (($x403 (= input.spec-%var-l-0.2.1 input.spec-%var-l-0.2.1)))
 (let (($x416 (and (and (and (and (and $x403 $x414) $x440) $x442) $x406) $x508)))
 (let (($x456 (and $x416 $x455)))
 (let (($x96 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x461 (and $x96 $x456)))
 (let (($x110 (or (or (or $x461 $x589) $x522) $x590)))
 (let (($x153 (and true $x110)))
 (let (($x47 (= $x153 true)))
 (let (($x386 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x317 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x387 (= $x317 $x386)))
 (let (($x261 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x257 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x300 (and $x257 $x261)))
 (let (($x397 (=> $x300 $x387)))
 (let (($x379 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x364 (= $x43 $x379)))
 (let (($x370 (=> $x300 $x364)))
 (let (($x378 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x359 (=> $x300 $x378)))
 (let (($x377 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x383 (= $x261 $x377)))
 (let (($x382 (=> $x257 $x383)))
 (let (($x235 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x316 (and $x257 $x235)))
 (let (($x313 (=> $x316 $x41)))
 (let (($x373 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x361 (= $x235 $x373)))
 (let (($x360 (=> $x257 $x361)))
 (let (($x380 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x369 (=> $x257 $x380)))
 (let (($x276 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x308 (=> $x276 $x41)))
 (let (($x375 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x357 (= $x257 $x375)))
 (let (($x356 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x353 (= $x276 $x356)))
 (let (($x411 (and (and (and (and (and (and $x353 $x357) $x308) $x369) $x360) $x313) $x382)))
 (let (($x400 (and (and (and $x411 $x359) $x370) $x397)))
 (let (($x392 (=> $x36 $x400)))
 (let (($x393 (= $x392 true)))
 (let (($x365 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x350 (= $x261 $x365)))
 (let (($x367 (=> $x257 $x350)))
 (let (($x336 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x384 (= $x235 $x336)))
 (let (($x349 (=> $x257 $x384)))
 (let (($x331 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0)))
 (let (($x343 (=> $x257 $x331)))
 (let (($x348 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x345 (= $x257 $x348)))
 (let (($x338 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x333 (= $x276 $x338)))
 (let (($x347 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x381 (and (and (and (and (and (and $x347 $x333) $x345) $x308) $x343) $x349) $x313)))
 (let (($x376 (and $x381 $x367)))
 (let (($x374 (=> $x36 $x376)))
 (let (($x352 (= $x374 true)))
 (let (($x322 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x323 (= $x317 $x322)))
 (let (($x324 (=> $x300 $x323)))
 (let (($x7 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x319 (= $x43 $x7)))
 (let (($x48 (=> $x300 $x319)))
 (let (($x318 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x314 (=> $x300 $x318)))
 (let (($x309 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x303 (= $x261 $x309)))
 (let (($x294 (=> $x257 $x303)))
 (let (($x299 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x296 (= $x235 $x299)))
 (let (($x321 (=> $x257 $x296)))
 (let (($x291 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x292 (=> $x257 $x291)))
 (let (($x290 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x298 (= $x257 $x290)))
 (let (($x312 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x315 (= $x276 $x312)))
 (let (($x328 (and (and (and (and (and (and $x315 $x298) $x308) $x292) $x321) $x313) $x294)))
 (let (($x334 (and (and (and $x328 $x314) $x48) $x324)))
 (let (($x337 (=> $x36 $x334)))
 (let (($x335 (= $x337 true)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x205 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x205 (_ bv4 32))))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x205 (_ bv4 32)) (_ bv2 32))) ?x248)))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x205 (_ bv4 32)) (_ bv3 32))) ?x283)))
 (let ((?x238 (bvadd ?x224 (_ bv4 32))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x269))))
 (let (($x242 (= (_ bv0 32) ?x260)))
 (let ((?x227 (ite $x242 (_ bv0 32) (_ bv1 32))))
 (let (($x21 (bvuge ?x227 (_ bv1 32))))
 (let (($x285 (= $x261 $x21)))
 (let (($x221 (and $x36 $x257)))
 (let (($x287 (=> $x221 $x285)))
 (let (($x277 (= (_ bv0 32) ?x224)))
 (let ((?x245 (ite $x277 (_ bv0 32) (_ bv1 32))))
 (let (($x251 (= ?x245 (_ bv0 32))))
 (let (($x288 (= $x276 $x251)))
 (let (($x286 (=> $x36 $x288)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv1 32))) (select input.dst.llvm-mem ?x224))))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv2 32))) ?x22))))
 (let (($x268 (= input.spec-%var-l-0.2.1.2.1.2.0 ?x311)))
 (let (($x284 (=> $x221 $x268)))
 (let (($x267 (and $x36 $x276)))
 (let (($x266 (=> $x267 $x41)))
 (let (($x246 (bvuge ?x245 (_ bv1 32))))
 (let (($x262 (= $x257 $x246)))
 (let (($x253 (=> $x36 $x262)))
 (let (($x310 (= ?x227 (_ bv0 32))))
 (let (($x234 (= $x235 $x310)))
 (let (($x279 (=> $x221 $x234)))
 (let (($x64 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x80 (=> $x64 $x41)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x190))))
 (let (($x280 (= input.spec-%var-l-0.2.1.2.0 ?x259)))
 (let (($x220 (=> $x36 $x280)))
 (let (($x197 (= (_ bv0 32) ?x205)))
 (let ((?x184 (ite $x197 (_ bv0 32) (_ bv1 32))))
 (let (($x228 (bvuge ?x184 (_ bv1 32))))
 (let (($x198 (= $x36 $x228)))
 (let (($x229 (= ?x184 (_ bv0 32))))
 (let (($x264 (= $x64 $x229)))
 (let (($x307 (and (and (and (and (and (and $x264 $x198) $x220) $x80) $x279) $x253) $x266)))
 (let (($x67 (and (and (and $x307 $x284) $x286) $x287)))
 (let (($x40 (=> $x96 $x67)))
 (let (($x34 (= $x40 true)))
 (let ((?x208 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x172 (concat ?x120 (concat ?x169 ?x208)))))
 (let (($x214 (= ?x186 input.dst.llvm-%l)))
 (let (($x183 (= $x214 true)))
 (let (($x201 (= (bvand ?x178 (_ bv4294967288 32)) ?x178)))
 (let (($x194 (= (bvand ?x63 (_ bv4294967292 32)) ?x63)))
 (let (($x218 (and $x194 $x201)))
 (let (($x142 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x175 (and true $x142)))
 (let (($x134 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x63 (bvsub ?x63 (_ bv4 32))) (bvult ?x63 (bvsub ?x63 (_ bv4 32))))))
 (let (($x255 (and (and (and $x134 $x175) $x194) $x218)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x69 (not $x57)))
 (let (($x182 (=> $x69 $x255)))
 (let (($x133 (= input.dst.llvm-%l ?x186)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x189)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x27 $x192)))
 (let (($x130 (and $x143 $x129)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x61 $x130)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x31)))))))
 (let (($x128 (and $x121 $x119)))
 (let (($x206 (and $x128 $x133)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x112)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x104)))
 (let (($x117 (= input.spec-%var-l-0.2.0 ?x13)))
 (let (($x107 (=> $x96 $x117)))
 (let ((?x170 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x170 (_ bv1 32))))
 (let (($x109 (= $x96 $x165)))
 (let (($x158 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x103 (=> $x158 $x41)))
 (let (($x171 (= ?x170 (_ bv0 32))))
 (let (($x99 (= $x158 $x171)))
 (let (($x115 (and (and (and $x99 $x103) $x109) $x107)))
 (let (($x144 (and $x115 $x206)))
 (let (($x114 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x174 (and $x114 $x144)))
 (let (($x202 (and $x174 $x182)))
 (let (($x177 (= $x202 true)))
 (let (($x92 (= $x69 true)))
 (let (($x146 (= $x114 true)))
 (let (($x97 (and $x146 $x92)))
 (let (($x210 (and $x97 $x177)))
 (let (($x195 (and $x210 $x183)))
 (let (($x76 (and $x195 $x34)))
 (let (($x332 (and $x76 $x335)))
 (let (($x354 (and $x332 $x352)))
 (let (($x408 (and $x354 $x393)))
 (let (($x412 (and $x96 $x408)))
 (let (($x394 (and $x41 $x412)))
 (let (($x100 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x108 (=> $x36 $x100)))
 (let (($x105 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x29 (= $x36 $x105)))
 (let (($x200 (and (and (= $x64 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x80) $x29)))
 (let (($x89 (and $x200 $x108)))
 (let (($x395 (and $x89 $x394)))
 (let (($x151 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x84 (= $x36 $x151)))
 (let (($x45 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x90 (= $x64 $x45)))
 (let (($x83 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x12 (and (and (and $x83 $x90) $x80) $x84)))
 (let (($x396 (and $x12 $x395)))
 (let (($x72 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x30 (=> $x36 $x72)))
 (let (($x6 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x77 (= $x36 $x6)))
 (let (($x68 (and (and (= $x64 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))) $x80) $x77)))
 (let (($x82 (and $x68 $x30)))
 (let (($x409 (and $x82 $x396)))
 (let (($x28 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x401 (and $x28 $x409)))
 (let (($x10 (bvugt ?x63 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x54 (=> (bvule ?x63 (bvsub (bvadd ?x63 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x10)))))))
 (let (($x19 (=> (and $x69 (bvule ?x63 (bvsub (bvadd ?x63 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x11 $x10)))))))
 (let (($x413 (and $x19 $x401)))
 (let (($x159 (=> $x413 $x47)))
 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var739X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var739X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var739X.0 () (_ BitVec 32))
(declare-fun input.ind-%var739X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var736X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var736X.0 () (_ BitVec 32))
(declare-fun input.ind-%var736X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.ind-%var733X () (_ BitVec 32))
(declare-fun input.ind-%var733X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var733X.0 () (_ BitVec 32))
(declare-fun input.ind-%var733X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var730X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var730X.0 () (_ BitVec 32))
(declare-fun input.ind-%var730X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var727X () (_ BitVec 32))
(declare-fun input.ind-%var724X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var724X.0 () (_ BitVec 32))
(declare-fun input.ind-%var724X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x580 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var739X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x567 (concat ?x580 (select input.dst.llvm-mem (bvadd input.ind-%var739X (_ bv4 32))))))
 (let ((?x569 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var739X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x572 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var739X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x563 (concat ?x572 (concat ?x569 ?x567))))
 (let (($x573 (= input.ind-%var739X.2.1 ?x563)))
 (let (($x576 (bvuge input.ind-%var739X.0 (_ bv1 32))))
 (let (($x566 (=> $x576 $x573)))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd input.ind-%var739X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var739X))))
 (let ((?x558 (concat (select input.dst.llvm-mem (bvadd input.ind-%var739X (_ bv2 32))) ?x554)))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd input.ind-%var739X (_ bv3 32))) ?x558)))
 (let (($x553 (= input.ind-%var739X.2.0 ?x555)))
 (let (($x557 (=> $x576 $x553)))
 (let (($x545 (= (_ bv0 32) input.ind-%var739X)))
 (let ((?x577 (ite $x545 (_ bv0 32) (_ bv1 32))))
 (let (($x547 (bvuge ?x577 (_ bv1 32))))
 (let (($x548 (= $x576 $x547)))
 (let (($x41 (= false false)))
 (let (($x543 (= input.ind-%var739X.0 (_ bv0 32))))
 (let (($x578 (=> $x543 $x41)))
 (let (($x546 (= ?x577 (_ bv0 32))))
 (let (($x575 (= $x543 $x546)))
 (let ((?x217 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x187 (concat ?x217 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x63 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x37 (bvadd ?x63 (_ bv3 32))))
 (let ((?x178 (concat (select input.dst.llvm-mem ?x37) (concat ?x60 ?x187))))
 (let (($x541 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1 ?x178)))
 (let (($x586 (and (and (and (and (and $x541 $x575) $x578) $x548) $x557) $x566)))
 (let (($x527 (= input.ind-%var736X.2.1 input.ind-%var736X.2.1)))
 (let (($x531 (bvuge input.ind-%var736X.0 (_ bv1 32))))
 (let (($x537 (=> $x531 $x527)))
 (let (($x536 (= input.ind-%var736X.2.0 input.ind-%var736X.2.0)))
 (let (($x534 (=> $x531 $x536)))
 (let (($x524 (= $x531 $x531)))
 (let (($x523 (= input.ind-%var736X.0 (_ bv0 32))))
 (let (($x533 (=> $x523 $x41)))
 (let (($x530 (= $x523 $x523)))
 (let (($x472 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x539 (and (and (and (and (and $x472 $x530) $x533) $x524) $x534) $x537)))
 (let (($x587 (and $x539 $x586)))
 (let (($x36 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x590 (and $x36 $x587)))
 (let (($x522 (not true)))
 (let ((?x505 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var733X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x510 (concat ?x505 (select input.dst.llvm-mem (bvadd input.ind-%var733X (_ bv4 32))))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var733X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var733X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x53 (concat ?x59 (concat ?x73 ?x510))))
 (let (($x46 (= input.ind-%var733X.2.1 ?x53)))
 (let (($x481 (bvuge input.ind-%var733X.0 (_ bv1 32))))
 (let (($x155 (=> $x481 $x46)))
 (let ((?x486 (concat (select input.dst.llvm-mem (bvadd input.ind-%var733X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var733X))))
 (let ((?x494 (concat (select input.dst.llvm-mem (bvadd input.ind-%var733X (_ bv2 32))) ?x486)))
 (let ((?x493 (concat (select input.dst.llvm-mem (bvadd input.ind-%var733X (_ bv3 32))) ?x494)))
 (let (($x496 (= input.ind-%var733X.2.0 ?x493)))
 (let (($x488 (=> $x481 $x496)))
 (let (($x512 (= (_ bv0 32) input.ind-%var733X)))
 (let ((?x517 (ite $x512 (_ bv0 32) (_ bv1 32))))
 (let (($x483 (bvuge ?x517 (_ bv1 32))))
 (let (($x514 (= $x481 $x483)))
 (let (($x513 (= input.ind-%var733X.0 (_ bv0 32))))
 (let (($x482 (=> $x513 $x41)))
 (let (($x484 (= ?x517 (_ bv0 32))))
 (let (($x479 (= $x513 $x484)))
 (let (($x503 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1 ?x178)))
 (let (($x588 (and (and (and (and (and $x503 $x479) $x482) $x514) $x488) $x155)))
 (let (($x475 (= input.ind-%var730X.2.1 input.ind-%var730X.2.1)))
 (let (($x470 (bvuge input.ind-%var730X.0 (_ bv1 32))))
 (let (($x515 (=> $x470 $x475)))
 (let (($x465 (= input.ind-%var730X.2.0 input.ind-%var730X.2.0)))
 (let (($x466 (=> $x470 $x465)))
 (let (($x474 (= $x470 $x470)))
 (let (($x473 (= input.ind-%var730X.0 (_ bv0 32))))
 (let (($x463 (=> $x473 $x41)))
 (let (($x478 (and (and (and (and (and $x472 (= $x473 $x473)) $x463) $x474) $x466) $x515)))
 (let (($x521 (and $x478 $x588)))
 (let (($x589 (and $x36 $x521)))
 (let ((?x439 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var727X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x500 (concat ?x439 (select input.dst.llvm-mem (bvadd input.ind-%var727X (_ bv4 32))))))
 (let ((?x509 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var727X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x444 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var727X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x458 (concat ?x444 (concat ?x509 ?x500))))
 (let (($x471 (= ?x458 ?x458)))
 (let (($x451 (= (_ bv0 32) input.ind-%var727X)))
 (let ((?x417 (ite $x451 (_ bv0 32) (_ bv1 32))))
 (let (($x436 (bvuge ?x417 (_ bv1 32))))
 (let (($x468 (=> $x436 $x471)))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.ind-%var727X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var727X))))
 (let ((?x432 (concat (select input.dst.llvm-mem (bvadd input.ind-%var727X (_ bv2 32))) ?x424)))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd input.ind-%var727X (_ bv3 32))) ?x432)))
 (let (($x423 (= ?x422 ?x422)))
 (let (($x449 (=> $x436 $x423)))
 (let (($x441 (= $x436 $x436)))
 (let (($x418 (= ?x417 (_ bv0 32))))
 (let (($x452 (=> $x418 $x41)))
 (let (($x428 (= $x418 $x418)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x222 (concat ?x193 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x205 (concat ?x215 (concat ?x203 ?x222))))
 (let (($x447 (= ?x205 ?x178)))
 (let (($x455 (and (and (and (and (and $x447 $x428) $x452) $x441) $x449) $x468)))
 (let (($x415 (= input.ind-%var724X.2.1 input.ind-%var724X.2.1)))
 (let (($x404 (bvuge input.ind-%var724X.0 (_ bv1 32))))
 (let (($x508 (=> $x404 $x415)))
 (let (($x438 (= input.ind-%var724X.2.0 input.ind-%var724X.2.0)))
 (let (($x406 (=> $x404 $x438)))
 (let (($x442 (= $x404 $x404)))
 (let (($x437 (= input.ind-%var724X.0 (_ bv0 32))))
 (let (($x440 (=> $x437 $x41)))
 (let (($x414 (= $x437 $x437)))
 (let (($x403 (= input.spec-%var-l-0.2.1 input.spec-%var-l-0.2.1)))
 (let (($x416 (and (and (and (and (and $x403 $x414) $x440) $x442) $x406) $x508)))
 (let (($x456 (and $x416 $x455)))
 (let (($x96 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x461 (and $x96 $x456)))
 (let (($x110 (or (or (or $x461 $x589) $x522) $x590)))
 (let (($x153 (and true $x110)))
 (let (($x47 (= $x153 true)))
 (let (($x386 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x317 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x387 (= $x317 $x386)))
 (let (($x261 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x257 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x300 (and $x257 $x261)))
 (let (($x397 (=> $x300 $x387)))
 (let (($x379 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x364 (= $x43 $x379)))
 (let (($x370 (=> $x300 $x364)))
 (let (($x378 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x359 (=> $x300 $x378)))
 (let (($x377 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x383 (= $x261 $x377)))
 (let (($x382 (=> $x257 $x383)))
 (let (($x235 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x316 (and $x257 $x235)))
 (let (($x313 (=> $x316 $x41)))
 (let (($x373 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x361 (= $x235 $x373)))
 (let (($x360 (=> $x257 $x361)))
 (let (($x380 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x369 (=> $x257 $x380)))
 (let (($x276 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x308 (=> $x276 $x41)))
 (let (($x375 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x357 (= $x257 $x375)))
 (let (($x356 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x353 (= $x276 $x356)))
 (let (($x411 (and (and (and (and (and (and $x353 $x357) $x308) $x369) $x360) $x313) $x382)))
 (let (($x400 (and (and (and $x411 $x359) $x370) $x397)))
 (let (($x392 (=> $x36 $x400)))
 (let (($x393 (= $x392 true)))
 (let (($x365 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x350 (= $x261 $x365)))
 (let (($x367 (=> $x257 $x350)))
 (let (($x336 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x384 (= $x235 $x336)))
 (let (($x349 (=> $x257 $x384)))
 (let (($x331 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0)))
 (let (($x343 (=> $x257 $x331)))
 (let (($x348 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x345 (= $x257 $x348)))
 (let (($x338 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x333 (= $x276 $x338)))
 (let (($x347 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x381 (and (and (and (and (and (and $x347 $x333) $x345) $x308) $x343) $x349) $x313)))
 (let (($x376 (and $x381 $x367)))
 (let (($x374 (=> $x36 $x376)))
 (let (($x352 (= $x374 true)))
 (let (($x322 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x323 (= $x317 $x322)))
 (let (($x324 (=> $x300 $x323)))
 (let (($x7 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x319 (= $x43 $x7)))
 (let (($x48 (=> $x300 $x319)))
 (let (($x318 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x314 (=> $x300 $x318)))
 (let (($x309 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x303 (= $x261 $x309)))
 (let (($x294 (=> $x257 $x303)))
 (let (($x299 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x296 (= $x235 $x299)))
 (let (($x321 (=> $x257 $x296)))
 (let (($x291 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x292 (=> $x257 $x291)))
 (let (($x290 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x298 (= $x257 $x290)))
 (let (($x312 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x315 (= $x276 $x312)))
 (let (($x328 (and (and (and (and (and (and $x315 $x298) $x308) $x292) $x321) $x313) $x294)))
 (let (($x334 (and (and (and $x328 $x314) $x48) $x324)))
 (let (($x337 (=> $x36 $x334)))
 (let (($x335 (= $x337 true)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x205 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x205 (_ bv4 32))))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x205 (_ bv4 32)) (_ bv2 32))) ?x248)))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x205 (_ bv4 32)) (_ bv3 32))) ?x283)))
 (let ((?x238 (bvadd ?x224 (_ bv4 32))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x269))))
 (let (($x242 (= (_ bv0 32) ?x260)))
 (let ((?x227 (ite $x242 (_ bv0 32) (_ bv1 32))))
 (let (($x21 (bvuge ?x227 (_ bv1 32))))
 (let (($x285 (= $x261 $x21)))
 (let (($x221 (and $x36 $x257)))
 (let (($x287 (=> $x221 $x285)))
 (let (($x277 (= (_ bv0 32) ?x224)))
 (let ((?x245 (ite $x277 (_ bv0 32) (_ bv1 32))))
 (let (($x251 (= ?x245 (_ bv0 32))))
 (let (($x288 (= $x276 $x251)))
 (let (($x286 (=> $x36 $x288)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv1 32))) (select input.dst.llvm-mem ?x224))))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x224 (_ bv2 32))) ?x22))))
 (let (($x268 (= input.spec-%var-l-0.2.1.2.1.2.0 ?x311)))
 (let (($x284 (=> $x221 $x268)))
 (let (($x267 (and $x36 $x276)))
 (let (($x266 (=> $x267 $x41)))
 (let (($x246 (bvuge ?x245 (_ bv1 32))))
 (let (($x262 (= $x257 $x246)))
 (let (($x253 (=> $x36 $x262)))
 (let (($x310 (= ?x227 (_ bv0 32))))
 (let (($x234 (= $x235 $x310)))
 (let (($x279 (=> $x221 $x234)))
 (let (($x64 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x80 (=> $x64 $x41)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x190))))
 (let (($x280 (= input.spec-%var-l-0.2.1.2.0 ?x259)))
 (let (($x220 (=> $x36 $x280)))
 (let (($x197 (= (_ bv0 32) ?x205)))
 (let ((?x184 (ite $x197 (_ bv0 32) (_ bv1 32))))
 (let (($x228 (bvuge ?x184 (_ bv1 32))))
 (let (($x198 (= $x36 $x228)))
 (let (($x229 (= ?x184 (_ bv0 32))))
 (let (($x264 (= $x64 $x229)))
 (let (($x307 (and (and (and (and (and (and $x264 $x198) $x220) $x80) $x279) $x253) $x266)))
 (let (($x67 (and (and (and $x307 $x284) $x286) $x287)))
 (let (($x40 (=> $x96 $x67)))
 (let (($x34 (= $x40 true)))
 (let ((?x208 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x172 (concat ?x120 (concat ?x169 ?x208)))))
 (let (($x214 (= ?x186 input.dst.llvm-%l)))
 (let (($x183 (= $x214 true)))
 (let (($x201 (= (bvand ?x178 (_ bv4294967288 32)) ?x178)))
 (let (($x194 (= (bvand ?x63 (_ bv4294967292 32)) ?x63)))
 (let (($x218 (and $x194 $x201)))
 (let (($x142 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x175 (and true $x142)))
 (let (($x134 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x63 (bvsub ?x63 (_ bv4 32))) (bvult ?x63 (bvsub ?x63 (_ bv4 32))))))
 (let (($x255 (and (and (and $x134 $x175) $x194) $x218)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x69 (not $x57)))
 (let (($x182 (=> $x69 $x255)))
 (let (($x133 (= input.dst.llvm-%l ?x186)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x189)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x27 $x192)))
 (let (($x130 (and $x143 $x129)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x61 $x130)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x31)))))))
 (let (($x128 (and $x121 $x119)))
 (let (($x206 (and $x128 $x133)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x112)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x104)))
 (let (($x117 (= input.spec-%var-l-0.2.0 ?x13)))
 (let (($x107 (=> $x96 $x117)))
 (let ((?x170 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x170 (_ bv1 32))))
 (let (($x109 (= $x96 $x165)))
 (let (($x158 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x103 (=> $x158 $x41)))
 (let (($x171 (= ?x170 (_ bv0 32))))
 (let (($x99 (= $x158 $x171)))
 (let (($x115 (and (and (and $x99 $x103) $x109) $x107)))
 (let (($x144 (and $x115 $x206)))
 (let (($x114 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x174 (and $x114 $x144)))
 (let (($x202 (and $x174 $x182)))
 (let (($x177 (= $x202 true)))
 (let (($x92 (= $x69 true)))
 (let (($x146 (= $x114 true)))
 (let (($x97 (and $x146 $x92)))
 (let (($x210 (and $x97 $x177)))
 (let (($x195 (and $x210 $x183)))
 (let (($x76 (and $x195 $x34)))
 (let (($x332 (and $x76 $x335)))
 (let (($x354 (and $x332 $x352)))
 (let (($x408 (and $x354 $x393)))
 (let (($x412 (and $x96 $x408)))
 (let (($x394 (and $x41 $x412)))
 (let (($x100 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x108 (=> $x36 $x100)))
 (let (($x105 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x29 (= $x36 $x105)))
 (let (($x200 (and (and (= $x64 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x80) $x29)))
 (let (($x89 (and $x200 $x108)))
 (let (($x395 (and $x89 $x394)))
 (let (($x151 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x84 (= $x36 $x151)))
 (let (($x45 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x90 (= $x64 $x45)))
 (let (($x83 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x12 (and (and (and $x83 $x90) $x80) $x84)))
 (let (($x396 (and $x12 $x395)))
 (let (($x72 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x30 (=> $x36 $x72)))
 (let (($x6 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x77 (= $x36 $x6)))
 (let (($x68 (and (and (= $x64 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))) $x80) $x77)))
 (let (($x82 (and $x68 $x30)))
 (let (($x409 (and $x82 $x396)))
 (let (($x28 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x401 (and $x28 $x409)))
 (let (($x10 (bvugt ?x63 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x54 (=> (bvule ?x63 (bvsub (bvadd ?x63 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x10)))))))
 (let (($x19 (=> (and $x69 (bvule ?x63 (bvsub (bvadd ?x63 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x11 $x10)))))))
 (let (($x413 (and $x19 $x401)))
 (let (($x159 (=> $x413 $x47)))
 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791879/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var797X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var797X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var797X.0 () (_ BitVec 32))
(declare-fun input.ind-%var797X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var794X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var794X.0 () (_ BitVec 32))
(declare-fun input.ind-%var794X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.ind-%var791X () (_ BitVec 32))
(declare-fun input.ind-%var791X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var791X.0 () (_ BitVec 32))
(declare-fun input.ind-%var791X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var788X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var788X.0 () (_ BitVec 32))
(declare-fun input.ind-%var788X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var785X () (_ BitVec 32))
(declare-fun input.ind-%var782X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var782X.0 () (_ BitVec 32))
(declare-fun input.ind-%var782X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x564 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var797X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x572 (concat ?x564 (select input.dst.llvm-mem (bvadd input.ind-%var797X (_ bv4 32))))))
 (let ((?x569 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var797X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x582 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var797X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x567 (concat ?x582 (concat ?x569 ?x572))))
 (let (($x570 (= input.ind-%var797X.2.1 ?x567)))
 (let (($x576 (bvuge input.ind-%var797X.0 (_ bv1 32))))
 (let (($x563 (=> $x576 $x570)))
 (let ((?x556 (concat (select input.dst.llvm-mem (bvadd input.ind-%var797X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var797X))))
 (let ((?x551 (concat (select input.dst.llvm-mem (bvadd input.ind-%var797X (_ bv2 32))) ?x556)))
 (let ((?x558 (concat (select input.dst.llvm-mem (bvadd input.ind-%var797X (_ bv3 32))) ?x551)))
 (let (($x555 (= input.ind-%var797X.2.0 ?x558)))
 (let (($x553 (=> $x576 $x555)))
 (let (($x546 (= (_ bv0 32) input.ind-%var797X)))
 (let ((?x575 (ite $x546 (_ bv0 32) (_ bv1 32))))
 (let (($x547 (bvuge ?x575 (_ bv1 32))))
 (let (($x548 (= $x576 $x547)))
 (let (($x75 (= false false)))
 (let (($x545 (= input.ind-%var797X.0 (_ bv0 32))))
 (let (($x571 (=> $x545 $x75)))
 (let (($x568 (= ?x575 (_ bv0 32))))
 (let (($x578 (= $x545 $x568)))
 (let (($x543 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1 input.dst.llvm-%l)))
 (let (($x590 (and (and (and (and (and $x543 $x578) $x571) $x548) $x553) $x563)))
 (let (($x538 (= input.ind-%var794X.2.1 input.ind-%var794X.2.1)))
 (let (($x531 (bvuge input.ind-%var794X.0 (_ bv1 32))))
 (let (($x526 (=> $x531 $x538)))
 (let (($x525 (= input.ind-%var794X.2.0 input.ind-%var794X.2.0)))
 (let (($x536 (=> $x531 $x525)))
 (let (($x524 (= $x531 $x531)))
 (let (($x528 (= input.ind-%var794X.0 (_ bv0 32))))
 (let (($x535 (=> $x528 $x75)))
 (let (($x533 (= $x528 $x528)))
 (let (($x499 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x541 (and (and (and (and (and $x499 $x533) $x535) $x524) $x536) $x526)))
 (let (($x110 (and $x541 $x590)))
 (let (($x6 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x153 (and $x6 $x110)))
 (let (($x523 (not true)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var791X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x73 (concat ?x38 (select input.dst.llvm-mem (bvadd input.ind-%var791X (_ bv4 32))))))
 (let ((?x505 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var791X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var791X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x53 (concat ?x15 (concat ?x505 ?x73))))
 (let (($x46 (= input.ind-%var791X.2.1 ?x53)))
 (let (($x514 (bvuge input.ind-%var791X.0 (_ bv1 32))))
 (let (($x155 (=> $x514 $x46)))
 (let ((?x518 (concat (select input.dst.llvm-mem (bvadd input.ind-%var791X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var791X))))
 (let ((?x486 (concat (select input.dst.llvm-mem (bvadd input.ind-%var791X (_ bv2 32))) ?x518)))
 (let ((?x496 (concat (select input.dst.llvm-mem (bvadd input.ind-%var791X (_ bv3 32))) ?x486)))
 (let (($x488 (= input.ind-%var791X.2.0 ?x496)))
 (let (($x520 (=> $x514 $x488)))
 (let (($x511 (= (_ bv0 32) input.ind-%var791X)))
 (let ((?x482 (ite $x511 (_ bv0 32) (_ bv1 32))))
 (let (($x585 (bvuge ?x482 (_ bv1 32))))
 (let (($x485 (= $x514 $x585)))
 (let (($x484 (= input.ind-%var791X.0 (_ bv0 32))))
 (let (($x483 (=> $x484 $x75)))
 (let (($x519 (= ?x482 (_ bv0 32))))
 (let (($x481 (= $x484 $x519)))
 (let (($x512 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1 input.dst.llvm-%l)))
 (let (($x522 (and (and (and (and (and $x512 $x481) $x483) $x485) $x520) $x155)))
 (let (($x475 (= input.ind-%var788X.2.1 input.ind-%var788X.2.1)))
 (let (($x476 (bvuge input.ind-%var788X.0 (_ bv1 32))))
 (let (($x515 (=> $x476 $x475)))
 (let (($x466 (= input.ind-%var788X.2.0 input.ind-%var788X.2.0)))
 (let (($x477 (=> $x476 $x466)))
 (let (($x464 (= $x476 $x476)))
 (let (($x584 (= input.ind-%var788X.0 (_ bv0 32))))
 (let (($x474 (=> $x584 $x75)))
 (let (($x513 (and (and (and (and (and $x499 (= $x584 $x584)) $x474) $x464) $x477) $x515)))
 (let (($x81 (and $x513 $x522)))
 (let (($x532 (and $x6 $x81)))
 (let ((?x434 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var785X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x509 (concat ?x434 (select input.dst.llvm-mem (bvadd input.ind-%var785X (_ bv4 32))))))
 (let ((?x439 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var785X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x443 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var785X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x458 (concat ?x443 (concat ?x439 ?x509))))
 (let (($x471 (= ?x458 ?x458)))
 (let (($x445 (= (_ bv0 32) input.ind-%var785X)))
 (let ((?x452 (ite $x445 (_ bv0 32) (_ bv1 32))))
 (let (($x469 (bvuge ?x452 (_ bv1 32))))
 (let (($x468 (=> $x469 $x471)))
 (let ((?x430 (concat (select input.dst.llvm-mem (bvadd input.ind-%var785X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var785X))))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.ind-%var785X (_ bv2 32))) ?x430)))
 (let ((?x423 (concat (select input.dst.llvm-mem (bvadd input.ind-%var785X (_ bv3 32))) ?x424)))
 (let (($x449 (= ?x423 ?x423)))
 (let (($x460 (=> $x469 $x449)))
 (let (($x429 (= $x469 $x469)))
 (let (($x454 (= ?x452 (_ bv0 32))))
 (let (($x441 (=> $x454 $x75)))
 (let (($x436 (= $x454 $x454)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x222 (concat ?x219 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x264 (concat ?x229 (concat ?x205 ?x222))))
 (let (($x418 (= ?x264 input.dst.llvm-%l)))
 (let (($x472 (and (and (and (and (and $x418 $x436) $x441) $x429) $x460) $x468)))
 (let (($x415 (= input.ind-%var782X.2.1 input.ind-%var782X.2.1)))
 (let (($x448 (bvuge input.ind-%var782X.0 (_ bv1 32))))
 (let (($x508 (=> $x448 $x415)))
 (let (($x406 (= input.ind-%var782X.2.0 input.ind-%var782X.2.0)))
 (let (($x446 (=> $x448 $x406)))
 (let (($x405 (= $x448 $x448)))
 (let (($x450 (= input.ind-%var782X.0 (_ bv0 32))))
 (let (($x442 (=> $x450 $x75)))
 (let (($x404 (= $x450 $x450)))
 (let (($x420 (= input.spec-%var-l-0.2.1 input.spec-%var-l-0.2.1)))
 (let (($x417 (and (and (and (and (and $x420 $x404) $x442) $x405) $x446) $x508)))
 (let (($x467 (and $x417 $x472)))
 (let (($x146 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x473 (and $x146 $x467)))
 (let (($x161 (or (or (or $x473 $x532) $x523) $x153)))
 (let (($x35 (and true $x161)))
 (let (($x62 (= $x35 true)))
 (let (($x379 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x7 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x364 (= $x7 $x379)))
 (let (($x251 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x221 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x294 (and $x221 $x251)))
 (let (($x370 (=> $x294 $x364)))
 (let (($x359 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x314 (= input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x398 (= $x314 $x359)))
 (let (($x363 (=> $x294 $x398)))
 (let (($x411 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x362 (=> $x294 $x411)))
 (let (($x390 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x377 (= $x251 $x390)))
 (let (($x383 (=> $x221 $x377)))
 (let (($x250 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x316 (and $x221 $x250)))
 (let (($x313 (=> $x316 $x75)))
 (let (($x361 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x360 (= $x250 $x361)))
 (let (($x399 (=> $x221 $x360)))
 (let (($x389 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x358 (=> $x221 $x389)))
 (let (($x39 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x291 (=> $x39 $x75)))
 (let (($x372 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x380 (= $x221 $x372)))
 (let (($x388 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x407 (= $x39 $x388)))
 (let (($x392 (and (and (and (and (and (and $x407 $x380) $x291) $x358) $x399) $x313) $x383)))
 (let (($x412 (and (and (and $x392 $x362) $x363) $x370)))
 (let (($x394 (=> $x6 $x412)))
 (let (($x395 (= $x394 true)))
 (let (($x368 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x381 (= $x251 $x368)))
 (let (($x365 (=> $x221 $x381)))
 (let (($x336 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x384 (= $x250 $x336)))
 (let (($x349 (=> $x221 $x384)))
 (let (($x343 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0)))
 (let (($x371 (=> $x221 $x343)))
 (let (($x366 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x330 (= $x221 $x366)))
 (let (($x345 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x385 (= $x39 $x345)))
 (let (($x351 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x354 (and (and (and (and (and (and $x351 $x385) $x330) $x291) $x371) $x349) $x313)))
 (let (($x355 (and $x354 $x365)))
 (let (($x356 (=> $x6 $x355)))
 (let (($x353 (= $x356 true)))
 (let (($x319 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x48 (= $x7 $x319)))
 (let (($x340 (=> $x294 $x48)))
 (let (($x301 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x43 (= $x314 $x301)))
 (let (($x305 (=> $x294 $x43)))
 (let (($x295 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x304 (=> $x294 $x295)))
 (let (($x342 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x309 (= $x251 $x342)))
 (let (($x303 (=> $x221 $x309)))
 (let (($x296 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x321 (= $x250 $x296)))
 (let (($x327 (=> $x221 $x321)))
 (let (($x339 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x293 (=> $x221 $x339)))
 (let (($x326 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x66 (= $x221 $x326)))
 (let (($x325 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x308 (= $x39 $x325)))
 (let (($x337 (and (and (and (and (and (and $x308 $x66) $x291) $x293) $x327) $x313) $x303)))
 (let (($x341 (and (and (and $x337 $x304) $x305) $x340)))
 (let (($x347 (=> $x6 $x341)))
 (let (($x329 (= $x347 true)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x264 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x264 (_ bv4 32))))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x264 (_ bv4 32)) (_ bv2 32))) ?x240)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x264 (_ bv4 32)) (_ bv3 32))) ?x248)))
 (let ((?x239 (bvadd ?x238 (_ bv4 32))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem ?x239))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv2 32))) ?x243))))
 (let (($x227 (= (_ bv0 32) ?x242)))
 (let ((?x310 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x288 (bvuge ?x310 (_ bv1 32))))
 (let (($x286 (= $x251 $x288)))
 (let (($x263 (and $x6 $x221)))
 (let (($x302 (=> $x263 $x286)))
 (let (($x277 (= (_ bv0 32) ?x238)))
 (let ((?x245 (ite $x277 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (= ?x245 (_ bv0 32))))
 (let (($x284 (= $x39 $x268)))
 (let (($x320 (=> $x6 $x284)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x254))))
 (let (($x252 (= input.spec-%var-l-0.2.1.2.1.2.0 ?x22)))
 (let (($x311 (=> $x263 $x252)))
 (let (($x276 (and $x6 $x39)))
 (let (($x267 (=> $x276 $x75)))
 (let (($x246 (bvuge ?x245 (_ bv1 32))))
 (let (($x262 (= $x221 $x246)))
 (let (($x253 (=> $x6 $x262)))
 (let (($x234 (= ?x310 (_ bv0 32))))
 (let (($x279 (= $x250 $x234)))
 (let (($x297 (=> $x263 $x279)))
 (let (($x33 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x36 (=> $x33 $x75)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem ?x264))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv2 32))) ?x230))))
 (let (($x306 (= input.spec-%var-l-0.2.1.2.0 ?x42)))
 (let (($x211 (=> $x6 $x306)))
 (let (($x228 (= (_ bv0 32) ?x264)))
 (let ((?x198 (ite $x228 (_ bv0 32) (_ bv1 32))))
 (let (($x282 (bvuge ?x198 (_ bv1 32))))
 (let (($x236 (= $x6 $x282)))
 (let (($x278 (= ?x198 (_ bv0 32))))
 (let (($x188 (= $x33 $x278)))
 (let (($x40 (and (and (and (and (and (and $x188 $x236) $x211) $x36) $x297) $x253) $x267)))
 (let (($x58 (and (and (and $x40 $x311) $x320) $x302)))
 (let (($x312 (=> $x146 $x58)))
 (let (($x315 (= $x312 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x174 (concat ?x144 (concat ?x186 (concat ?x208 ?x131)))))
 (let (($x247 (= ?x174 input.dst.llvm-%l)))
 (let (($x215 (= $x247 true)))
 (let ((?x217 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x207 (concat ?x217 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x79 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x9 (bvadd ?x79 (_ bv3 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem ?x9) (concat ?x176 ?x207))))
 (let (($x255 (= (bvand ?x201 (_ bv4294967288 32)) ?x201)))
 (let (($x137 (= (bvand ?x79 (_ bv4294967292 32)) ?x79)))
 (let (($x182 (and $x137 $x255)))
 (let (($x147 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x194 (and true $x147)))
 (let (($x135 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x79 (bvsub ?x79 (_ bv4 32))) (bvult ?x79 (bvsub ?x79 (_ bv4 32))))))
 (let (($x210 (and (and (and $x135 $x194) $x137) $x182)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x69 (not $x57)))
 (let (($x214 (=> $x69 $x210)))
 (let (($x138 (= input.dst.llvm-%l ?x174)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x119)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x143 $x129)))
 (let (($x132 (and $x130 $x128)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x126 $x132)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x192 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x216 $x124)))))))
 (let (($x123 (and $x192 $x172)))
 (let (($x213 (and $x123 $x138)))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x102)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x111)))
 (let (($x117 (= input.spec-%var-l-0.2.0 ?x13)))
 (let (($x107 (=> $x146 $x117)))
 (let ((?x103 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x109 (bvuge ?x103 (_ bv1 32))))
 (let (($x167 (= $x146 $x109)))
 (let (($x99 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x165 (=> $x99 $x75)))
 (let (($x116 (= ?x103 (_ bv0 32))))
 (let (($x96 (= $x99 $x116)))
 (let (($x118 (and (and (and $x96 $x165) $x167) $x107)))
 (let (($x136 (and $x118 $x213)))
 (let (($x87 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x162 (and $x87 $x136)))
 (let (($x183 (and $x162 $x214)))
 (let (($x195 (= $x183 true)))
 (let (($x170 (= $x57 true)))
 (let (($x158 (= $x87 true)))
 (let (($x171 (and $x158 $x170)))
 (let (($x181 (and $x171 $x195)))
 (let (($x180 (and $x181 $x215)))
 (let (($x290 (and $x180 $x315)))
 (let (($x338 (and $x290 $x329)))
 (let (($x375 (and $x338 $x353)))
 (let (($x396 (and $x375 $x395)))
 (let (($x409 (and $x146 $x396)))
 (let (($x401 (and $x75 $x409)))
 (let (($x100 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x108 (=> $x6 $x100)))
 (let (($x29 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x200 (= $x6 $x29)))
 (let (($x94 (and (and (= $x33 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x36) $x200)))
 (let (($x26 (and $x94 $x108)))
 (let (($x413 (and $x26 $x401)))
 (let (($x151 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x84 (= $x6 $x151)))
 (let (($x18 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x91 (= $x33 $x18)))
 (let (($x45 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x86 (and (and (and $x45 $x91) $x36) $x84)))
 (let (($x402 (and $x86 $x413)))
 (let (($x72 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x30 (=> $x6 $x72)))
 (let (($x77 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x68 (= $x6 $x77)))
 (let (($x93 (and (and (= $x33 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))) $x36) $x68)))
 (let (($x83 (and $x93 $x30)))
 (let (($x403 (and $x83 $x402)))
 (let (($x64 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x410 (and $x64 $x403)))
 (let (($x23 (bvugt ?x79 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x28 (=> (bvule ?x79 (bvsub (bvadd ?x79 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x23)))))))
 (let (($x24 (=> (and $x69 (bvule ?x79 (bvsub (bvadd ?x79 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x44 $x23)))))))
 (let (($x437 (and $x24 $x410)))
 (let (($x166 (=> $x437 $x62)))
 (not $x166))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var797X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var797X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var797X.0 () (_ BitVec 32))
(declare-fun input.ind-%var797X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var794X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var794X.0 () (_ BitVec 32))
(declare-fun input.ind-%var794X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.ind-%var791X () (_ BitVec 32))
(declare-fun input.ind-%var791X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var791X.0 () (_ BitVec 32))
(declare-fun input.ind-%var791X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var788X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var788X.0 () (_ BitVec 32))
(declare-fun input.ind-%var788X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var785X () (_ BitVec 32))
(declare-fun input.ind-%var782X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var782X.0 () (_ BitVec 32))
(declare-fun input.ind-%var782X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x564 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var797X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x572 (concat ?x564 (select input.dst.llvm-mem (bvadd input.ind-%var797X (_ bv4 32))))))
 (let ((?x569 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var797X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x582 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var797X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x567 (concat ?x582 (concat ?x569 ?x572))))
 (let (($x570 (= input.ind-%var797X.2.1 ?x567)))
 (let (($x576 (bvuge input.ind-%var797X.0 (_ bv1 32))))
 (let (($x563 (=> $x576 $x570)))
 (let ((?x556 (concat (select input.dst.llvm-mem (bvadd input.ind-%var797X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var797X))))
 (let ((?x551 (concat (select input.dst.llvm-mem (bvadd input.ind-%var797X (_ bv2 32))) ?x556)))
 (let ((?x558 (concat (select input.dst.llvm-mem (bvadd input.ind-%var797X (_ bv3 32))) ?x551)))
 (let (($x555 (= input.ind-%var797X.2.0 ?x558)))
 (let (($x553 (=> $x576 $x555)))
 (let (($x546 (= (_ bv0 32) input.ind-%var797X)))
 (let ((?x575 (ite $x546 (_ bv0 32) (_ bv1 32))))
 (let (($x547 (bvuge ?x575 (_ bv1 32))))
 (let (($x548 (= $x576 $x547)))
 (let (($x75 (= false false)))
 (let (($x545 (= input.ind-%var797X.0 (_ bv0 32))))
 (let (($x571 (=> $x545 $x75)))
 (let (($x568 (= ?x575 (_ bv0 32))))
 (let (($x578 (= $x545 $x568)))
 (let (($x543 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1 input.dst.llvm-%l)))
 (let (($x590 (and (and (and (and (and $x543 $x578) $x571) $x548) $x553) $x563)))
 (let (($x538 (= input.ind-%var794X.2.1 input.ind-%var794X.2.1)))
 (let (($x531 (bvuge input.ind-%var794X.0 (_ bv1 32))))
 (let (($x526 (=> $x531 $x538)))
 (let (($x525 (= input.ind-%var794X.2.0 input.ind-%var794X.2.0)))
 (let (($x536 (=> $x531 $x525)))
 (let (($x524 (= $x531 $x531)))
 (let (($x528 (= input.ind-%var794X.0 (_ bv0 32))))
 (let (($x535 (=> $x528 $x75)))
 (let (($x533 (= $x528 $x528)))
 (let (($x499 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x541 (and (and (and (and (and $x499 $x533) $x535) $x524) $x536) $x526)))
 (let (($x110 (and $x541 $x590)))
 (let (($x6 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x153 (and $x6 $x110)))
 (let (($x523 (not true)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var791X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x73 (concat ?x38 (select input.dst.llvm-mem (bvadd input.ind-%var791X (_ bv4 32))))))
 (let ((?x505 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var791X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var791X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x53 (concat ?x15 (concat ?x505 ?x73))))
 (let (($x46 (= input.ind-%var791X.2.1 ?x53)))
 (let (($x514 (bvuge input.ind-%var791X.0 (_ bv1 32))))
 (let (($x155 (=> $x514 $x46)))
 (let ((?x518 (concat (select input.dst.llvm-mem (bvadd input.ind-%var791X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var791X))))
 (let ((?x486 (concat (select input.dst.llvm-mem (bvadd input.ind-%var791X (_ bv2 32))) ?x518)))
 (let ((?x496 (concat (select input.dst.llvm-mem (bvadd input.ind-%var791X (_ bv3 32))) ?x486)))
 (let (($x488 (= input.ind-%var791X.2.0 ?x496)))
 (let (($x520 (=> $x514 $x488)))
 (let (($x511 (= (_ bv0 32) input.ind-%var791X)))
 (let ((?x482 (ite $x511 (_ bv0 32) (_ bv1 32))))
 (let (($x585 (bvuge ?x482 (_ bv1 32))))
 (let (($x485 (= $x514 $x585)))
 (let (($x484 (= input.ind-%var791X.0 (_ bv0 32))))
 (let (($x483 (=> $x484 $x75)))
 (let (($x519 (= ?x482 (_ bv0 32))))
 (let (($x481 (= $x484 $x519)))
 (let (($x512 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1 input.dst.llvm-%l)))
 (let (($x522 (and (and (and (and (and $x512 $x481) $x483) $x485) $x520) $x155)))
 (let (($x475 (= input.ind-%var788X.2.1 input.ind-%var788X.2.1)))
 (let (($x476 (bvuge input.ind-%var788X.0 (_ bv1 32))))
 (let (($x515 (=> $x476 $x475)))
 (let (($x466 (= input.ind-%var788X.2.0 input.ind-%var788X.2.0)))
 (let (($x477 (=> $x476 $x466)))
 (let (($x464 (= $x476 $x476)))
 (let (($x584 (= input.ind-%var788X.0 (_ bv0 32))))
 (let (($x474 (=> $x584 $x75)))
 (let (($x513 (and (and (and (and (and $x499 (= $x584 $x584)) $x474) $x464) $x477) $x515)))
 (let (($x81 (and $x513 $x522)))
 (let (($x532 (and $x6 $x81)))
 (let ((?x434 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var785X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x509 (concat ?x434 (select input.dst.llvm-mem (bvadd input.ind-%var785X (_ bv4 32))))))
 (let ((?x439 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var785X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x443 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var785X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x458 (concat ?x443 (concat ?x439 ?x509))))
 (let (($x471 (= ?x458 ?x458)))
 (let (($x445 (= (_ bv0 32) input.ind-%var785X)))
 (let ((?x452 (ite $x445 (_ bv0 32) (_ bv1 32))))
 (let (($x469 (bvuge ?x452 (_ bv1 32))))
 (let (($x468 (=> $x469 $x471)))
 (let ((?x430 (concat (select input.dst.llvm-mem (bvadd input.ind-%var785X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var785X))))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.ind-%var785X (_ bv2 32))) ?x430)))
 (let ((?x423 (concat (select input.dst.llvm-mem (bvadd input.ind-%var785X (_ bv3 32))) ?x424)))
 (let (($x449 (= ?x423 ?x423)))
 (let (($x460 (=> $x469 $x449)))
 (let (($x429 (= $x469 $x469)))
 (let (($x454 (= ?x452 (_ bv0 32))))
 (let (($x441 (=> $x454 $x75)))
 (let (($x436 (= $x454 $x454)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x222 (concat ?x219 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x264 (concat ?x229 (concat ?x205 ?x222))))
 (let (($x418 (= ?x264 input.dst.llvm-%l)))
 (let (($x472 (and (and (and (and (and $x418 $x436) $x441) $x429) $x460) $x468)))
 (let (($x415 (= input.ind-%var782X.2.1 input.ind-%var782X.2.1)))
 (let (($x448 (bvuge input.ind-%var782X.0 (_ bv1 32))))
 (let (($x508 (=> $x448 $x415)))
 (let (($x406 (= input.ind-%var782X.2.0 input.ind-%var782X.2.0)))
 (let (($x446 (=> $x448 $x406)))
 (let (($x405 (= $x448 $x448)))
 (let (($x450 (= input.ind-%var782X.0 (_ bv0 32))))
 (let (($x442 (=> $x450 $x75)))
 (let (($x404 (= $x450 $x450)))
 (let (($x420 (= input.spec-%var-l-0.2.1 input.spec-%var-l-0.2.1)))
 (let (($x417 (and (and (and (and (and $x420 $x404) $x442) $x405) $x446) $x508)))
 (let (($x467 (and $x417 $x472)))
 (let (($x146 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x473 (and $x146 $x467)))
 (let (($x161 (or (or (or $x473 $x532) $x523) $x153)))
 (let (($x35 (and true $x161)))
 (let (($x62 (= $x35 true)))
 (let (($x379 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x7 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x364 (= $x7 $x379)))
 (let (($x251 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x221 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x294 (and $x221 $x251)))
 (let (($x370 (=> $x294 $x364)))
 (let (($x359 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x314 (= input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x398 (= $x314 $x359)))
 (let (($x363 (=> $x294 $x398)))
 (let (($x411 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x362 (=> $x294 $x411)))
 (let (($x390 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x377 (= $x251 $x390)))
 (let (($x383 (=> $x221 $x377)))
 (let (($x250 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x316 (and $x221 $x250)))
 (let (($x313 (=> $x316 $x75)))
 (let (($x361 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x360 (= $x250 $x361)))
 (let (($x399 (=> $x221 $x360)))
 (let (($x389 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x358 (=> $x221 $x389)))
 (let (($x39 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x291 (=> $x39 $x75)))
 (let (($x372 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x380 (= $x221 $x372)))
 (let (($x388 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x407 (= $x39 $x388)))
 (let (($x392 (and (and (and (and (and (and $x407 $x380) $x291) $x358) $x399) $x313) $x383)))
 (let (($x412 (and (and (and $x392 $x362) $x363) $x370)))
 (let (($x394 (=> $x6 $x412)))
 (let (($x395 (= $x394 true)))
 (let (($x368 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x381 (= $x251 $x368)))
 (let (($x365 (=> $x221 $x381)))
 (let (($x336 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x384 (= $x250 $x336)))
 (let (($x349 (=> $x221 $x384)))
 (let (($x343 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0)))
 (let (($x371 (=> $x221 $x343)))
 (let (($x366 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x330 (= $x221 $x366)))
 (let (($x345 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x385 (= $x39 $x345)))
 (let (($x351 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x354 (and (and (and (and (and (and $x351 $x385) $x330) $x291) $x371) $x349) $x313)))
 (let (($x355 (and $x354 $x365)))
 (let (($x356 (=> $x6 $x355)))
 (let (($x353 (= $x356 true)))
 (let (($x319 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x48 (= $x7 $x319)))
 (let (($x340 (=> $x294 $x48)))
 (let (($x301 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x43 (= $x314 $x301)))
 (let (($x305 (=> $x294 $x43)))
 (let (($x295 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x304 (=> $x294 $x295)))
 (let (($x342 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x309 (= $x251 $x342)))
 (let (($x303 (=> $x221 $x309)))
 (let (($x296 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x321 (= $x250 $x296)))
 (let (($x327 (=> $x221 $x321)))
 (let (($x339 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x293 (=> $x221 $x339)))
 (let (($x326 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x66 (= $x221 $x326)))
 (let (($x325 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x308 (= $x39 $x325)))
 (let (($x337 (and (and (and (and (and (and $x308 $x66) $x291) $x293) $x327) $x313) $x303)))
 (let (($x341 (and (and (and $x337 $x304) $x305) $x340)))
 (let (($x347 (=> $x6 $x341)))
 (let (($x329 (= $x347 true)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x264 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x264 (_ bv4 32))))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x264 (_ bv4 32)) (_ bv2 32))) ?x240)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x264 (_ bv4 32)) (_ bv3 32))) ?x248)))
 (let ((?x239 (bvadd ?x238 (_ bv4 32))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem ?x239))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv2 32))) ?x243))))
 (let (($x227 (= (_ bv0 32) ?x242)))
 (let ((?x310 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x288 (bvuge ?x310 (_ bv1 32))))
 (let (($x286 (= $x251 $x288)))
 (let (($x263 (and $x6 $x221)))
 (let (($x302 (=> $x263 $x286)))
 (let (($x277 (= (_ bv0 32) ?x238)))
 (let ((?x245 (ite $x277 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (= ?x245 (_ bv0 32))))
 (let (($x284 (= $x39 $x268)))
 (let (($x320 (=> $x6 $x284)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x254))))
 (let (($x252 (= input.spec-%var-l-0.2.1.2.1.2.0 ?x22)))
 (let (($x311 (=> $x263 $x252)))
 (let (($x276 (and $x6 $x39)))
 (let (($x267 (=> $x276 $x75)))
 (let (($x246 (bvuge ?x245 (_ bv1 32))))
 (let (($x262 (= $x221 $x246)))
 (let (($x253 (=> $x6 $x262)))
 (let (($x234 (= ?x310 (_ bv0 32))))
 (let (($x279 (= $x250 $x234)))
 (let (($x297 (=> $x263 $x279)))
 (let (($x33 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x36 (=> $x33 $x75)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem ?x264))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv2 32))) ?x230))))
 (let (($x306 (= input.spec-%var-l-0.2.1.2.0 ?x42)))
 (let (($x211 (=> $x6 $x306)))
 (let (($x228 (= (_ bv0 32) ?x264)))
 (let ((?x198 (ite $x228 (_ bv0 32) (_ bv1 32))))
 (let (($x282 (bvuge ?x198 (_ bv1 32))))
 (let (($x236 (= $x6 $x282)))
 (let (($x278 (= ?x198 (_ bv0 32))))
 (let (($x188 (= $x33 $x278)))
 (let (($x40 (and (and (and (and (and (and $x188 $x236) $x211) $x36) $x297) $x253) $x267)))
 (let (($x58 (and (and (and $x40 $x311) $x320) $x302)))
 (let (($x312 (=> $x146 $x58)))
 (let (($x315 (= $x312 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x174 (concat ?x144 (concat ?x186 (concat ?x208 ?x131)))))
 (let (($x247 (= ?x174 input.dst.llvm-%l)))
 (let (($x215 (= $x247 true)))
 (let ((?x217 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x207 (concat ?x217 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x79 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x9 (bvadd ?x79 (_ bv3 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem ?x9) (concat ?x176 ?x207))))
 (let (($x255 (= (bvand ?x201 (_ bv4294967288 32)) ?x201)))
 (let (($x137 (= (bvand ?x79 (_ bv4294967292 32)) ?x79)))
 (let (($x182 (and $x137 $x255)))
 (let (($x147 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x194 (and true $x147)))
 (let (($x135 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x79 (bvsub ?x79 (_ bv4 32))) (bvult ?x79 (bvsub ?x79 (_ bv4 32))))))
 (let (($x210 (and (and (and $x135 $x194) $x137) $x182)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x69 (not $x57)))
 (let (($x214 (=> $x69 $x210)))
 (let (($x138 (= input.dst.llvm-%l ?x174)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x119)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x143 $x129)))
 (let (($x132 (and $x130 $x128)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x126 $x132)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x192 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x216 $x124)))))))
 (let (($x123 (and $x192 $x172)))
 (let (($x213 (and $x123 $x138)))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x102)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x111)))
 (let (($x117 (= input.spec-%var-l-0.2.0 ?x13)))
 (let (($x107 (=> $x146 $x117)))
 (let ((?x103 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x109 (bvuge ?x103 (_ bv1 32))))
 (let (($x167 (= $x146 $x109)))
 (let (($x99 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x165 (=> $x99 $x75)))
 (let (($x116 (= ?x103 (_ bv0 32))))
 (let (($x96 (= $x99 $x116)))
 (let (($x118 (and (and (and $x96 $x165) $x167) $x107)))
 (let (($x136 (and $x118 $x213)))
 (let (($x87 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x162 (and $x87 $x136)))
 (let (($x183 (and $x162 $x214)))
 (let (($x195 (= $x183 true)))
 (let (($x170 (= $x57 true)))
 (let (($x158 (= $x87 true)))
 (let (($x171 (and $x158 $x170)))
 (let (($x181 (and $x171 $x195)))
 (let (($x180 (and $x181 $x215)))
 (let (($x290 (and $x180 $x315)))
 (let (($x338 (and $x290 $x329)))
 (let (($x375 (and $x338 $x353)))
 (let (($x396 (and $x375 $x395)))
 (let (($x409 (and $x146 $x396)))
 (let (($x401 (and $x75 $x409)))
 (let (($x100 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x108 (=> $x6 $x100)))
 (let (($x29 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x200 (= $x6 $x29)))
 (let (($x94 (and (and (= $x33 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x36) $x200)))
 (let (($x26 (and $x94 $x108)))
 (let (($x413 (and $x26 $x401)))
 (let (($x151 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x84 (= $x6 $x151)))
 (let (($x18 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x91 (= $x33 $x18)))
 (let (($x45 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x86 (and (and (and $x45 $x91) $x36) $x84)))
 (let (($x402 (and $x86 $x413)))
 (let (($x72 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x30 (=> $x6 $x72)))
 (let (($x77 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x68 (= $x6 $x77)))
 (let (($x93 (and (and (= $x33 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))) $x36) $x68)))
 (let (($x83 (and $x93 $x30)))
 (let (($x403 (and $x83 $x402)))
 (let (($x64 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x410 (and $x64 $x403)))
 (let (($x23 (bvugt ?x79 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x28 (=> (bvule ?x79 (bvsub (bvadd ?x79 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x23)))))))
 (let (($x24 (=> (and $x69 (bvule ?x79 (bvsub (bvadd ?x79 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x44 $x23)))))))
 (let (($x437 (and $x24 $x410)))
 (let (($x166 (=> $x437 $x62)))
 (not $x166))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791879/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var855X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var855X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var855X.0 () (_ BitVec 32))
(declare-fun input.ind-%var855X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var852X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var852X.0 () (_ BitVec 32))
(declare-fun input.ind-%var852X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var849X () (_ BitVec 32))
(declare-fun input.ind-%var849X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var849X.0 () (_ BitVec 32))
(declare-fun input.ind-%var849X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var846X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var846X.0 () (_ BitVec 32))
(declare-fun input.ind-%var846X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var843X () (_ BitVec 32))
(declare-fun input.ind-%var840X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var840X.0 () (_ BitVec 32))
(declare-fun input.ind-%var840X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x495 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var855X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x491 (concat ?x495 (select input.dst.llvm-mem (bvadd input.ind-%var855X (_ bv4 32))))))
 (let ((?x518 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var855X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x488 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var855X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x520 (concat ?x488 (concat ?x518 ?x491))))
 (let (($x56 (= input.ind-%var855X.2.1 ?x520)))
 (let (($x512 (bvuge input.ind-%var855X.0 (_ bv1 32))))
 (let (($x490 (=> $x512 $x56)))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd input.ind-%var855X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var855X))))
 (let ((?x521 (concat (select input.dst.llvm-mem (bvadd input.ind-%var855X (_ bv2 32))) ?x481)))
 (let ((?x485 (concat (select input.dst.llvm-mem (bvadd input.ind-%var855X (_ bv3 32))) ?x521)))
 (let (($x589 (= input.ind-%var855X.2.0 ?x485)))
 (let (($x492 (=> $x512 $x589)))
 (let (($x498 (= (_ bv0 32) input.ind-%var855X)))
 (let ((?x475 (ite $x498 (_ bv0 32) (_ bv1 32))))
 (let (($x517 (bvuge ?x475 (_ bv1 32))))
 (let (($x484 (= $x512 $x517)))
 (let (($x25 (= false false)))
 (let (($x477 (= input.ind-%var855X.0 (_ bv0 32))))
 (let (($x516 (=> $x477 $x25)))
 (let (($x515 (= ?x475 (_ bv0 32))))
 (let (($x513 (= $x477 $x515)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x107 (concat ?x117 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x51 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x8 (bvadd ?x51 (_ bv3 32))))
 (let ((?x272 (concat (select input.dst.llvm-mem ?x8) (concat ?x31 ?x107))))
 (let (($x465 (= input.spec-%var-node_next-0.L2%9%bbentry ?x272)))
 (let (($x505 (and (and (and (and (and $x465 $x513) $x516) $x484) $x492) $x490)))
 (let (($x584 (= input.ind-%var852X.2.1 input.ind-%var852X.2.1)))
 (let (($x472 (bvuge input.ind-%var852X.0 (_ bv1 32))))
 (let (($x470 (=> $x472 $x584)))
 (let (($x462 (= input.ind-%var852X.2.0 input.ind-%var852X.2.0)))
 (let (($x499 (=> $x472 $x462)))
 (let (($x467 (= $x472 $x472)))
 (let (($x458 (= input.ind-%var852X.0 (_ bv0 32))))
 (let (($x468 (=> $x458 $x25)))
 (let (($x474 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x458 $x458)) $x468)))
 (let (($x464 (and (and (and $x474 $x467) $x499) $x470)))
 (let (($x59 (and $x464 $x505)))
 (let (($x509 (not true)))
 (let ((?x425 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var849X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x431 (concat ?x425 (select input.dst.llvm-mem (bvadd input.ind-%var849X (_ bv4 32))))))
 (let ((?x424 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var849X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x460 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var849X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x457 (concat ?x460 (concat ?x424 ?x431))))
 (let (($x453 (= input.ind-%var849X.2.1 ?x457)))
 (let (($x415 (bvuge input.ind-%var849X.0 (_ bv1 32))))
 (let (($x500 (=> $x415 $x453)))
 (let ((?x454 (concat (select input.dst.llvm-mem (bvadd input.ind-%var849X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var849X))))
 (let ((?x441 (concat (select input.dst.llvm-mem (bvadd input.ind-%var849X (_ bv2 32))) ?x454)))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd input.ind-%var849X (_ bv3 32))) ?x441)))
 (let (($x461 (= input.ind-%var849X.2.0 ?x429)))
 (let (($x432 (=> $x415 $x461)))
 (let (($x438 (= (_ bv0 32) input.ind-%var849X)))
 (let ((?x406 (ite $x438 (_ bv0 32) (_ bv1 32))))
 (let (($x508 (bvuge ?x406 (_ bv1 32))))
 (let (($x417 (= $x415 $x508)))
 (let (($x405 (= input.ind-%var849X.0 (_ bv0 32))))
 (let (($x435 (=> $x405 $x25)))
 (let (($x446 (= ?x406 (_ bv0 32))))
 (let (($x451 (= $x405 $x446)))
 (let (($x447 (= input.spec-%tmpvar-0.L2%9%bbentry ?x272)))
 (let (($x434 (and (and (and (and (and $x447 $x451) $x435) $x417) $x432) $x500)))
 (let (($x437 (= input.ind-%var846X.2.1 input.ind-%var846X.2.1)))
 (let (($x409 (bvuge input.ind-%var846X.0 (_ bv1 32))))
 (let (($x414 (=> $x409 $x437)))
 (let (($x402 (= input.ind-%var846X.2.0 input.ind-%var846X.2.0)))
 (let (($x403 (=> $x409 $x402)))
 (let (($x401 (= $x409 $x409)))
 (let (($x394 (= input.ind-%var846X.0 (_ bv0 32))))
 (let (($x396 (=> $x394 $x25)))
 (let (($x440 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x394 $x394)) $x396)))
 (let (($x416 (and (and (and $x440 $x401) $x403) $x414)))
 (let (($x459 (and $x416 $x434)))
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var843X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x400 (concat ?x397 (select input.dst.llvm-mem (bvadd input.ind-%var843X (_ bv4 32))))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var843X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x382 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var843X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x411 (concat ?x382 (concat ?x377 ?x400))))
 (let (($x362 (= ?x411 ?x411)))
 (let (($x368 (= (_ bv0 32) input.ind-%var843X)))
 (let ((?x381 (ite $x368 (_ bv0 32) (_ bv1 32))))
 (let (($x353 (bvuge ?x381 (_ bv1 32))))
 (let (($x393 (=> $x353 $x362)))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd input.ind-%var843X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var843X))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd input.ind-%var843X (_ bv2 32))) ?x372)))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd input.ind-%var843X (_ bv3 32))) ?x386)))
 (let (($x387 (= ?x358 ?x358)))
 (let (($x373 (=> $x353 $x387)))
 (let (($x375 (= $x353 $x353)))
 (let (($x365 (= ?x381 (_ bv0 32))))
 (let (($x356 (=> $x365 $x25)))
 (let (($x398 (and (and (and (= input.dst.llvm-%l ?x272) (= $x365 $x365)) $x356) $x375)))
 (let (($x408 (and (and $x398 $x373) $x393)))
 (let (($x343 (= input.ind-%var840X.2.1 input.ind-%var840X.2.1)))
 (let (($x350 (bvuge input.ind-%var840X.0 (_ bv1 32))))
 (let (($x371 (=> $x350 $x343)))
 (let (($x367 (= input.ind-%var840X.2.0 input.ind-%var840X.2.0)))
 (let (($x376 (=> $x350 $x367)))
 (let (($x366 (= $x350 $x350)))
 (let (($x348 (= input.ind-%var840X.0 (_ bv0 32))))
 (let (($x385 (=> $x348 $x25)))
 (let (($x344 (and (and (= input.spec-%var-l-0 input.spec-%var-l-0) (= $x348 $x348)) $x385)))
 (let (($x349 (and (and (and $x344 $x366) $x376) $x371)))
 (let (($x379 (and $x349 $x408)))
 (let (($x73 (or (or (or $x379 $x459) $x509) $x59)))
 (let (($x497 (and true $x73)))
 (let (($x53 (= $x497 true)))
 (let (($x300 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x287 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x295 (= $x287 $x300)))
 (let (($x190 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x217 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (and $x217 $x190)))
 (let (($x304 (=> $x226 $x295)))
 (let (($x337 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x227 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x294 (= $x227 $x337)))
 (let (($x328 (=> $x226 $x294)))
 (let (($x342 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x309 (=> $x226 $x342)))
 (let (($x324 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x316 (= $x190 $x324)))
 (let (($x313 (=> $x217 $x316)))
 (let (($x185 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x239 (and $x217 $x185)))
 (let (($x249 (=> $x239 $x25)))
 (let (($x296 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x321 (= $x185 $x296)))
 (let (($x327 (=> $x217 $x321)))
 (let (($x293 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x323 (=> $x217 $x293)))
 (let (($x322 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x292 (= $x217 $x322)))
 (let (($x134 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x283 (=> $x134 $x25)))
 (let (($x317 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x291 (= $x134 $x317)))
 (let (($x43 (and (and (and (and (and (and $x291 $x283) $x292) $x323) $x327) $x249) $x313)))
 (let (($x7 (and (and (and $x43 $x309) $x328) $x304)))
 (let (($x319 (= $x7 true)))
 (let (($x251 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x288 (= $x190 $x251)))
 (let (($x286 (=> $x217 $x288)))
 (let (($x284 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x320 (= $x185 $x284)))
 (let (($x76 (=> $x217 $x320)))
 (let (($x311 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x34 (=> $x217 $x311)))
 (let (($x274 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x22 (= $x217 $x274)))
 (let (($x307 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x254 (= $x134 $x307)))
 (let (($x270 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x298 (and (and (and (and (and (and $x270 $x254) $x283) $x22) $x34) $x76) $x249)))
 (let (($x325 (and $x298 $x286)))
 (let (($x308 (= $x325 true)))
 (let (($x277 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x245 (= $x287 $x277)))
 (let (($x246 (=> $x226 $x245)))
 (let (($x234 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x227 $x234)))
 (let (($x297 (=> $x226 $x279)))
 (let (($x243 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x269 (=> $x226 $x243)))
 (let (($x260 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x190 $x260)))
 (let (($x265 (=> $x217 $x225)))
 (let (($x240 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x248 (= $x185 $x240)))
 (let (($x238 (=> $x217 $x248)))
 (let (($x212 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x231 (=> $x217 $x212)))
 (let (($x224 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x223 (= $x217 $x224)))
 (let (($x253 (and (and (= $x134 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x283) $x223)))
 (let (($x266 (and (and (and (and (and (and $x253 $x231) $x238) $x249) $x265) $x269) $x297)))
 (let (($x273 (and $x266 $x246)))
 (let (($x271 (= $x273 true)))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x142 (concat ?x175 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x149 (concat ?x202 (concat ?x148 ?x142))))
 (let ((?x205 (bvadd ?x149 (_ bv4 32))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x222))))
 (let (($x282 (= (_ bv0 32) ?x188)))
 (let ((?x236 (ite $x282 (_ bv0 32) (_ bv1 32))))
 (let (($x209 (bvuge ?x236 (_ bv1 32))))
 (let (($x199 (= $x190 $x209)))
 (let (($x123 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x201 (and $x123 $x217)))
 (let (($x258 (=> $x201 $x199)))
 (let (($x261 (= ?x236 (_ bv0 32))))
 (let (($x280 (= $x185 $x261)))
 (let (($x220 (=> $x201 $x280)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv1 32))) (select input.dst.llvm-mem ?x149))))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv2 32))) ?x214))))
 (let (($x203 (= input.spec-%var-l-0.2.1.2.0 ?x180)))
 (let (($x184 (=> $x201 $x203)))
 (let (($x173 (= (_ bv0 32) ?x149)))
 (let ((?x137 (ite $x173 (_ bv0 32) (_ bv1 32))))
 (let (($x60 (bvuge ?x137 (_ bv1 32))))
 (let (($x207 (= $x217 $x60)))
 (let (($x178 (=> $x123 $x207)))
 (let (($x176 (and $x123 $x134)))
 (let (($x150 (=> $x176 $x25)))
 (let (($x177 (= ?x137 (_ bv0 32))))
 (let (($x196 (= $x134 $x177)))
 (let (($x187 (=> $x123 $x196)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x208)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x133)))
 (let (($x136 (= input.spec-%var-l-0.2.0 ?x213)))
 (let (($x162 (=> $x123 $x136)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x119 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x206 (bvuge ?x119 (_ bv1 32))))
 (let (($x144 (= $x123 $x206)))
 (let (($x80 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x172 (=> $x80 $x25)))
 (let (($x128 (= ?x119 (_ bv0 32))))
 (let (($x132 (= $x80 $x128)))
 (let (($x211 (and (and (and (and (and (and $x132 $x172) $x144) $x162) $x187) $x150) $x178)))
 (let (($x257 (and (and (and $x211 $x184) $x220) $x258)))
 (let (($x221 (= $x257 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x99 (concat ?x170 (concat ?x92 ?x108)))))
 (let (($x189 (= ?x103 input.dst.llvm-%l)))
 (let (($x129 (= $x189 true)))
 (let (($x124 (= (bvand ?x272 (_ bv4294967288 32)) ?x272)))
 (let (($x102 (= (bvand ?x51 (_ bv4294967292 32)) ?x51)))
 (let (($x121 (and $x102 $x124)))
 (let (($x98 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x152 (and true $x98)))
 (let (($x163 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x51 (bvsub ?x51 (_ bv4 32))) (bvult ?x51 (bvsub ?x51 (_ bv4 32))))))
 (let (($x27 (and (and (and $x163 $x152) $x102) $x121)))
 (let (($x69 (not $x57)))
 (let (($x192 (=> $x69 $x27)))
 (let (($x116 (= input.dst.llvm-%l ?x103)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x105)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x84 $x157)))
 (let (($x29 (and $x95 $x89)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x50 $x29)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x164 $x45)))))))
 (let (($x94 (and $x151 $x200)))
 (let (($x96 (and $x94 $x116)))
 (let (($x165 (and true $x96)))
 (let (($x82 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x115 (and $x82 $x165)))
 (let (($x71 (and $x115 $x192)))
 (let (($x126 (= $x71 true)))
 (let (($x77 (= $x69 true)))
 (let (($x6 (= $x82 true)))
 (let (($x68 (and $x6 $x77)))
 (let (($x143 (and $x68 $x126)))
 (let (($x130 (and $x143 $x129)))
 (let (($x263 (and $x130 $x221)))
 (let (($x275 (and $x263 $x271)))
 (let (($x326 (and $x275 $x308)))
 (let (($x48 (and $x326 $x319)))
 (let (($x340 (and $x80 $x48)))
 (let (($x341 (and $x25 $x340)))
 (let (($x33 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x347 (and $x33 $x341)))
 (let (($x19 (bvugt ?x51 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x64 (=> (bvule ?x51 (bvsub (bvadd ?x51 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x19)))))))
 (let (($x37 (=> (and $x69 (bvule ?x51 (bvsub (bvadd ?x51 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x54 $x19)))))))
 (let (($x329 (and $x37 $x347)))
 (let (($x46 (=> $x329 $x53)))
 (not $x46))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var855X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var855X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var855X.0 () (_ BitVec 32))
(declare-fun input.ind-%var855X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var852X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var852X.0 () (_ BitVec 32))
(declare-fun input.ind-%var852X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var849X () (_ BitVec 32))
(declare-fun input.ind-%var849X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var849X.0 () (_ BitVec 32))
(declare-fun input.ind-%var849X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var846X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var846X.0 () (_ BitVec 32))
(declare-fun input.ind-%var846X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var843X () (_ BitVec 32))
(declare-fun input.ind-%var840X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var840X.0 () (_ BitVec 32))
(declare-fun input.ind-%var840X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x495 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var855X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x491 (concat ?x495 (select input.dst.llvm-mem (bvadd input.ind-%var855X (_ bv4 32))))))
 (let ((?x518 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var855X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x488 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var855X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x520 (concat ?x488 (concat ?x518 ?x491))))
 (let (($x56 (= input.ind-%var855X.2.1 ?x520)))
 (let (($x512 (bvuge input.ind-%var855X.0 (_ bv1 32))))
 (let (($x490 (=> $x512 $x56)))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd input.ind-%var855X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var855X))))
 (let ((?x521 (concat (select input.dst.llvm-mem (bvadd input.ind-%var855X (_ bv2 32))) ?x481)))
 (let ((?x485 (concat (select input.dst.llvm-mem (bvadd input.ind-%var855X (_ bv3 32))) ?x521)))
 (let (($x589 (= input.ind-%var855X.2.0 ?x485)))
 (let (($x492 (=> $x512 $x589)))
 (let (($x498 (= (_ bv0 32) input.ind-%var855X)))
 (let ((?x475 (ite $x498 (_ bv0 32) (_ bv1 32))))
 (let (($x517 (bvuge ?x475 (_ bv1 32))))
 (let (($x484 (= $x512 $x517)))
 (let (($x25 (= false false)))
 (let (($x477 (= input.ind-%var855X.0 (_ bv0 32))))
 (let (($x516 (=> $x477 $x25)))
 (let (($x515 (= ?x475 (_ bv0 32))))
 (let (($x513 (= $x477 $x515)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x107 (concat ?x117 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x51 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x8 (bvadd ?x51 (_ bv3 32))))
 (let ((?x272 (concat (select input.dst.llvm-mem ?x8) (concat ?x31 ?x107))))
 (let (($x465 (= input.spec-%var-node_next-0.L2%9%bbentry ?x272)))
 (let (($x505 (and (and (and (and (and $x465 $x513) $x516) $x484) $x492) $x490)))
 (let (($x584 (= input.ind-%var852X.2.1 input.ind-%var852X.2.1)))
 (let (($x472 (bvuge input.ind-%var852X.0 (_ bv1 32))))
 (let (($x470 (=> $x472 $x584)))
 (let (($x462 (= input.ind-%var852X.2.0 input.ind-%var852X.2.0)))
 (let (($x499 (=> $x472 $x462)))
 (let (($x467 (= $x472 $x472)))
 (let (($x458 (= input.ind-%var852X.0 (_ bv0 32))))
 (let (($x468 (=> $x458 $x25)))
 (let (($x474 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x458 $x458)) $x468)))
 (let (($x464 (and (and (and $x474 $x467) $x499) $x470)))
 (let (($x59 (and $x464 $x505)))
 (let (($x509 (not true)))
 (let ((?x425 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var849X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x431 (concat ?x425 (select input.dst.llvm-mem (bvadd input.ind-%var849X (_ bv4 32))))))
 (let ((?x424 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var849X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x460 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var849X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x457 (concat ?x460 (concat ?x424 ?x431))))
 (let (($x453 (= input.ind-%var849X.2.1 ?x457)))
 (let (($x415 (bvuge input.ind-%var849X.0 (_ bv1 32))))
 (let (($x500 (=> $x415 $x453)))
 (let ((?x454 (concat (select input.dst.llvm-mem (bvadd input.ind-%var849X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var849X))))
 (let ((?x441 (concat (select input.dst.llvm-mem (bvadd input.ind-%var849X (_ bv2 32))) ?x454)))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd input.ind-%var849X (_ bv3 32))) ?x441)))
 (let (($x461 (= input.ind-%var849X.2.0 ?x429)))
 (let (($x432 (=> $x415 $x461)))
 (let (($x438 (= (_ bv0 32) input.ind-%var849X)))
 (let ((?x406 (ite $x438 (_ bv0 32) (_ bv1 32))))
 (let (($x508 (bvuge ?x406 (_ bv1 32))))
 (let (($x417 (= $x415 $x508)))
 (let (($x405 (= input.ind-%var849X.0 (_ bv0 32))))
 (let (($x435 (=> $x405 $x25)))
 (let (($x446 (= ?x406 (_ bv0 32))))
 (let (($x451 (= $x405 $x446)))
 (let (($x447 (= input.spec-%tmpvar-0.L2%9%bbentry ?x272)))
 (let (($x434 (and (and (and (and (and $x447 $x451) $x435) $x417) $x432) $x500)))
 (let (($x437 (= input.ind-%var846X.2.1 input.ind-%var846X.2.1)))
 (let (($x409 (bvuge input.ind-%var846X.0 (_ bv1 32))))
 (let (($x414 (=> $x409 $x437)))
 (let (($x402 (= input.ind-%var846X.2.0 input.ind-%var846X.2.0)))
 (let (($x403 (=> $x409 $x402)))
 (let (($x401 (= $x409 $x409)))
 (let (($x394 (= input.ind-%var846X.0 (_ bv0 32))))
 (let (($x396 (=> $x394 $x25)))
 (let (($x440 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x394 $x394)) $x396)))
 (let (($x416 (and (and (and $x440 $x401) $x403) $x414)))
 (let (($x459 (and $x416 $x434)))
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var843X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x400 (concat ?x397 (select input.dst.llvm-mem (bvadd input.ind-%var843X (_ bv4 32))))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var843X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x382 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var843X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x411 (concat ?x382 (concat ?x377 ?x400))))
 (let (($x362 (= ?x411 ?x411)))
 (let (($x368 (= (_ bv0 32) input.ind-%var843X)))
 (let ((?x381 (ite $x368 (_ bv0 32) (_ bv1 32))))
 (let (($x353 (bvuge ?x381 (_ bv1 32))))
 (let (($x393 (=> $x353 $x362)))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd input.ind-%var843X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var843X))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd input.ind-%var843X (_ bv2 32))) ?x372)))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd input.ind-%var843X (_ bv3 32))) ?x386)))
 (let (($x387 (= ?x358 ?x358)))
 (let (($x373 (=> $x353 $x387)))
 (let (($x375 (= $x353 $x353)))
 (let (($x365 (= ?x381 (_ bv0 32))))
 (let (($x356 (=> $x365 $x25)))
 (let (($x398 (and (and (and (= input.dst.llvm-%l ?x272) (= $x365 $x365)) $x356) $x375)))
 (let (($x408 (and (and $x398 $x373) $x393)))
 (let (($x343 (= input.ind-%var840X.2.1 input.ind-%var840X.2.1)))
 (let (($x350 (bvuge input.ind-%var840X.0 (_ bv1 32))))
 (let (($x371 (=> $x350 $x343)))
 (let (($x367 (= input.ind-%var840X.2.0 input.ind-%var840X.2.0)))
 (let (($x376 (=> $x350 $x367)))
 (let (($x366 (= $x350 $x350)))
 (let (($x348 (= input.ind-%var840X.0 (_ bv0 32))))
 (let (($x385 (=> $x348 $x25)))
 (let (($x344 (and (and (= input.spec-%var-l-0 input.spec-%var-l-0) (= $x348 $x348)) $x385)))
 (let (($x349 (and (and (and $x344 $x366) $x376) $x371)))
 (let (($x379 (and $x349 $x408)))
 (let (($x73 (or (or (or $x379 $x459) $x509) $x59)))
 (let (($x497 (and true $x73)))
 (let (($x53 (= $x497 true)))
 (let (($x300 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x287 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x295 (= $x287 $x300)))
 (let (($x190 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x217 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (and $x217 $x190)))
 (let (($x304 (=> $x226 $x295)))
 (let (($x337 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x227 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x294 (= $x227 $x337)))
 (let (($x328 (=> $x226 $x294)))
 (let (($x342 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x309 (=> $x226 $x342)))
 (let (($x324 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x316 (= $x190 $x324)))
 (let (($x313 (=> $x217 $x316)))
 (let (($x185 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x239 (and $x217 $x185)))
 (let (($x249 (=> $x239 $x25)))
 (let (($x296 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x321 (= $x185 $x296)))
 (let (($x327 (=> $x217 $x321)))
 (let (($x293 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x323 (=> $x217 $x293)))
 (let (($x322 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x292 (= $x217 $x322)))
 (let (($x134 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x283 (=> $x134 $x25)))
 (let (($x317 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x291 (= $x134 $x317)))
 (let (($x43 (and (and (and (and (and (and $x291 $x283) $x292) $x323) $x327) $x249) $x313)))
 (let (($x7 (and (and (and $x43 $x309) $x328) $x304)))
 (let (($x319 (= $x7 true)))
 (let (($x251 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x288 (= $x190 $x251)))
 (let (($x286 (=> $x217 $x288)))
 (let (($x284 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x320 (= $x185 $x284)))
 (let (($x76 (=> $x217 $x320)))
 (let (($x311 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x34 (=> $x217 $x311)))
 (let (($x274 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x22 (= $x217 $x274)))
 (let (($x307 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x254 (= $x134 $x307)))
 (let (($x270 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x298 (and (and (and (and (and (and $x270 $x254) $x283) $x22) $x34) $x76) $x249)))
 (let (($x325 (and $x298 $x286)))
 (let (($x308 (= $x325 true)))
 (let (($x277 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x245 (= $x287 $x277)))
 (let (($x246 (=> $x226 $x245)))
 (let (($x234 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x227 $x234)))
 (let (($x297 (=> $x226 $x279)))
 (let (($x243 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x269 (=> $x226 $x243)))
 (let (($x260 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x190 $x260)))
 (let (($x265 (=> $x217 $x225)))
 (let (($x240 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x248 (= $x185 $x240)))
 (let (($x238 (=> $x217 $x248)))
 (let (($x212 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x231 (=> $x217 $x212)))
 (let (($x224 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x223 (= $x217 $x224)))
 (let (($x253 (and (and (= $x134 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x283) $x223)))
 (let (($x266 (and (and (and (and (and (and $x253 $x231) $x238) $x249) $x265) $x269) $x297)))
 (let (($x273 (and $x266 $x246)))
 (let (($x271 (= $x273 true)))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x142 (concat ?x175 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x149 (concat ?x202 (concat ?x148 ?x142))))
 (let ((?x205 (bvadd ?x149 (_ bv4 32))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x222))))
 (let (($x282 (= (_ bv0 32) ?x188)))
 (let ((?x236 (ite $x282 (_ bv0 32) (_ bv1 32))))
 (let (($x209 (bvuge ?x236 (_ bv1 32))))
 (let (($x199 (= $x190 $x209)))
 (let (($x123 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x201 (and $x123 $x217)))
 (let (($x258 (=> $x201 $x199)))
 (let (($x261 (= ?x236 (_ bv0 32))))
 (let (($x280 (= $x185 $x261)))
 (let (($x220 (=> $x201 $x280)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv1 32))) (select input.dst.llvm-mem ?x149))))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv2 32))) ?x214))))
 (let (($x203 (= input.spec-%var-l-0.2.1.2.0 ?x180)))
 (let (($x184 (=> $x201 $x203)))
 (let (($x173 (= (_ bv0 32) ?x149)))
 (let ((?x137 (ite $x173 (_ bv0 32) (_ bv1 32))))
 (let (($x60 (bvuge ?x137 (_ bv1 32))))
 (let (($x207 (= $x217 $x60)))
 (let (($x178 (=> $x123 $x207)))
 (let (($x176 (and $x123 $x134)))
 (let (($x150 (=> $x176 $x25)))
 (let (($x177 (= ?x137 (_ bv0 32))))
 (let (($x196 (= $x134 $x177)))
 (let (($x187 (=> $x123 $x196)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x208)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x133)))
 (let (($x136 (= input.spec-%var-l-0.2.0 ?x213)))
 (let (($x162 (=> $x123 $x136)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x119 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x206 (bvuge ?x119 (_ bv1 32))))
 (let (($x144 (= $x123 $x206)))
 (let (($x80 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x172 (=> $x80 $x25)))
 (let (($x128 (= ?x119 (_ bv0 32))))
 (let (($x132 (= $x80 $x128)))
 (let (($x211 (and (and (and (and (and (and $x132 $x172) $x144) $x162) $x187) $x150) $x178)))
 (let (($x257 (and (and (and $x211 $x184) $x220) $x258)))
 (let (($x221 (= $x257 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x99 (concat ?x170 (concat ?x92 ?x108)))))
 (let (($x189 (= ?x103 input.dst.llvm-%l)))
 (let (($x129 (= $x189 true)))
 (let (($x124 (= (bvand ?x272 (_ bv4294967288 32)) ?x272)))
 (let (($x102 (= (bvand ?x51 (_ bv4294967292 32)) ?x51)))
 (let (($x121 (and $x102 $x124)))
 (let (($x98 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x152 (and true $x98)))
 (let (($x163 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x51 (bvsub ?x51 (_ bv4 32))) (bvult ?x51 (bvsub ?x51 (_ bv4 32))))))
 (let (($x27 (and (and (and $x163 $x152) $x102) $x121)))
 (let (($x69 (not $x57)))
 (let (($x192 (=> $x69 $x27)))
 (let (($x116 (= input.dst.llvm-%l ?x103)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x105)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x84 $x157)))
 (let (($x29 (and $x95 $x89)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x50 $x29)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x164 $x45)))))))
 (let (($x94 (and $x151 $x200)))
 (let (($x96 (and $x94 $x116)))
 (let (($x165 (and true $x96)))
 (let (($x82 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x115 (and $x82 $x165)))
 (let (($x71 (and $x115 $x192)))
 (let (($x126 (= $x71 true)))
 (let (($x77 (= $x69 true)))
 (let (($x6 (= $x82 true)))
 (let (($x68 (and $x6 $x77)))
 (let (($x143 (and $x68 $x126)))
 (let (($x130 (and $x143 $x129)))
 (let (($x263 (and $x130 $x221)))
 (let (($x275 (and $x263 $x271)))
 (let (($x326 (and $x275 $x308)))
 (let (($x48 (and $x326 $x319)))
 (let (($x340 (and $x80 $x48)))
 (let (($x341 (and $x25 $x340)))
 (let (($x33 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x347 (and $x33 $x341)))
 (let (($x19 (bvugt ?x51 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x64 (=> (bvule ?x51 (bvsub (bvadd ?x51 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x19)))))))
 (let (($x37 (=> (and $x69 (bvule ?x51 (bvsub (bvadd ?x51 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x54 $x19)))))))
 (let (($x329 (and $x37 $x347)))
 (let (($x46 (=> $x329 $x53)))
 (not $x46))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791879/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var913X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var913X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var913X.0 () (_ BitVec 32))
(declare-fun input.ind-%var913X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var910X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var910X.0 () (_ BitVec 32))
(declare-fun input.ind-%var910X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var907X () (_ BitVec 32))
(declare-fun input.ind-%var907X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var907X.0 () (_ BitVec 32))
(declare-fun input.ind-%var907X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var904X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var904X.0 () (_ BitVec 32))
(declare-fun input.ind-%var904X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var901X () (_ BitVec 32))
(declare-fun input.ind-%var898X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var898X.0 () (_ BitVec 32))
(declare-fun input.ind-%var898X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x496 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var913X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x488 (concat ?x496 (select input.dst.llvm-mem (bvadd input.ind-%var913X (_ bv4 32))))))
 (let ((?x518 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var913X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x506 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var913X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x491 (concat ?x506 (concat ?x518 ?x488))))
 (let (($x486 (= input.ind-%var913X.2.1 ?x491)))
 (let (($x512 (bvuge input.ind-%var913X.0 (_ bv1 32))))
 (let (($x520 (=> $x512 $x486)))
 (let ((?x588 (concat (select input.dst.llvm-mem (bvadd input.ind-%var913X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var913X))))
 (let ((?x519 (concat (select input.dst.llvm-mem (bvadd input.ind-%var913X (_ bv2 32))) ?x588)))
 (let ((?x521 (concat (select input.dst.llvm-mem (bvadd input.ind-%var913X (_ bv3 32))) ?x519)))
 (let (($x485 (= input.ind-%var913X.2.0 ?x521)))
 (let (($x589 (=> $x512 $x485)))
 (let (($x515 (= (_ bv0 32) input.ind-%var913X)))
 (let ((?x513 (ite $x515 (_ bv0 32) (_ bv1 32))))
 (let (($x517 (bvuge ?x513 (_ bv1 32))))
 (let (($x484 (= $x512 $x517)))
 (let (($x82 (= false false)))
 (let (($x498 (= input.ind-%var913X.0 (_ bv0 32))))
 (let (($x510 (=> $x498 $x82)))
 (let (($x487 (= ?x513 (_ bv0 32))))
 (let (($x516 (= $x498 $x487)))
 (let (($x477 (= input.spec-%var-node_next-0.L2%9%bbentry input.dst.llvm-%l)))
 (let (($x73 (and (and (and (and (and $x477 $x516) $x510) $x484) $x589) $x520)))
 (let (($x476 (= input.ind-%var910X.2.1 input.ind-%var910X.2.1)))
 (let (($x472 (bvuge input.ind-%var910X.0 (_ bv1 32))))
 (let (($x463 (=> $x472 $x476)))
 (let (($x473 (= input.ind-%var910X.2.0 input.ind-%var910X.2.0)))
 (let (($x462 (=> $x472 $x473)))
 (let (($x467 (= $x472 $x472)))
 (let (($x478 (= input.ind-%var910X.0 (_ bv0 32))))
 (let (($x474 (=> $x478 $x82)))
 (let (($x470 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x478 $x478)) $x474)))
 (let (($x465 (and (and (and $x470 $x467) $x462) $x463)))
 (let (($x497 (and $x465 $x73)))
 (let (($x458 (not true)))
 (let ((?x430 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var907X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x424 (concat ?x430 (select input.dst.llvm-mem (bvadd input.ind-%var907X (_ bv4 32))))))
 (let ((?x425 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var907X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x423 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var907X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x457 (concat ?x423 (concat ?x425 ?x424))))
 (let (($x453 (= input.ind-%var907X.2.1 ?x457)))
 (let (($x417 (bvuge input.ind-%var907X.0 (_ bv1 32))))
 (let (($x500 (=> $x417 $x453)))
 (let ((?x445 (concat (select input.dst.llvm-mem (bvadd input.ind-%var907X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var907X))))
 (let ((?x454 (concat (select input.dst.llvm-mem (bvadd input.ind-%var907X (_ bv2 32))) ?x445)))
 (let ((?x461 (concat (select input.dst.llvm-mem (bvadd input.ind-%var907X (_ bv3 32))) ?x454)))
 (let (($x432 (= input.ind-%var907X.2.0 ?x461)))
 (let (($x444 (=> $x417 $x432)))
 (let (($x443 (= (_ bv0 32) input.ind-%var907X)))
 (let ((?x435 (ite $x443 (_ bv0 32) (_ bv1 32))))
 (let (($x439 (bvuge ?x435 (_ bv1 32))))
 (let (($x418 (= $x417 $x439)))
 (let (($x446 (= input.ind-%var907X.0 (_ bv0 32))))
 (let (($x508 (=> $x446 $x82)))
 (let (($x504 (= ?x435 (_ bv0 32))))
 (let (($x415 (= $x446 $x504)))
 (let (($x438 (= input.spec-%tmpvar-0.L2%9%bbentry input.dst.llvm-%l)))
 (let (($x65 (and (and (and (and (and $x438 $x415) $x508) $x418) $x444) $x500)))
 (let (($x437 (= input.ind-%var904X.2.1 input.ind-%var904X.2.1)))
 (let (($x450 (bvuge input.ind-%var904X.0 (_ bv1 32))))
 (let (($x414 (=> $x450 $x437)))
 (let (($x403 (= input.ind-%var904X.2.0 input.ind-%var904X.2.0)))
 (let (($x404 (=> $x450 $x403)))
 (let (($x413 (= $x450 $x450)))
 (let (($x440 (= input.ind-%var904X.0 (_ bv0 32))))
 (let (($x401 (=> $x440 $x82)))
 (let (($x442 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x440 $x440)) $x401)))
 (let (($x405 (and (and (and $x442 $x413) $x404) $x414)))
 (let (($x433 (and $x405 $x65)))
 (let ((?x390 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var901X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x377 (concat ?x390 (select input.dst.llvm-mem (bvadd input.ind-%var901X (_ bv4 32))))))
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var901X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var901X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x411 (concat ?x383 (concat ?x397 ?x377))))
 (let (($x362 (= ?x411 ?x411)))
 (let (($x378 (= (_ bv0 32) input.ind-%var901X)))
 (let ((?x356 (ite $x378 (_ bv0 32) (_ bv1 32))))
 (let (($x398 (bvuge ?x356 (_ bv1 32))))
 (let (($x393 (=> $x398 $x362)))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd input.ind-%var901X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var901X))))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd input.ind-%var901X (_ bv2 32))) ?x388)))
 (let ((?x387 (concat (select input.dst.llvm-mem (bvadd input.ind-%var901X (_ bv3 32))) ?x372)))
 (let (($x373 (= ?x387 ?x387)))
 (let (($x363 (=> $x398 $x373)))
 (let (($x369 (= $x398 $x398)))
 (let (($x359 (= ?x356 (_ bv0 32))))
 (let (($x375 (=> $x359 $x82)))
 (let (($x379 (and (and (= input.dst.llvm-%l input.dst.llvm-%l) (= $x359 $x359)) $x375)))
 (let (($x412 (and (and (and $x379 $x369) $x363) $x393)))
 (let (($x343 (= input.ind-%var898X.2.1 input.ind-%var898X.2.1)))
 (let (($x336 (bvuge input.ind-%var898X.0 (_ bv1 32))))
 (let (($x371 (=> $x336 $x343)))
 (let (($x376 (= input.ind-%var898X.2.0 input.ind-%var898X.2.0)))
 (let (($x384 (=> $x336 $x376)))
 (let (($x330 (= $x336 $x336)))
 (let (($x344 (= input.ind-%var898X.0 (_ bv0 32))))
 (let (($x366 (=> $x344 $x82)))
 (let (($x352 (and (and (= input.spec-%var-l-0 input.spec-%var-l-0) (= $x344 $x344)) $x366)))
 (let (($x381 (and (and (and $x352 $x330) $x384) $x371)))
 (let (($x394 (and $x381 $x412)))
 (let (($x155 (or (or (or $x394 $x433) $x458) $x497)))
 (let (($x49 (and true $x155)))
 (let (($x63 (= $x49 true)))
 (let (($x337 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x234 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x294 (= $x234 $x337)))
 (let (($x261 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x306 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x265 (and $x306 $x261)))
 (let (($x328 (=> $x265 $x294)))
 (let (($x309 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x269 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x305 (= $x269 $x309)))
 (let (($x303 (=> $x265 $x305)))
 (let (($x43 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x334 (=> $x265 $x43)))
 (let (($x301 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x324 (= $x261 $x301)))
 (let (($x316 (=> $x306 $x324)))
 (let (($x184 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x239 (and $x306 $x184)))
 (let (($x249 (=> $x239 $x82)))
 (let (($x321 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x327 (= $x184 $x321)))
 (let (($x346 (=> $x306 $x327)))
 (let (($x314 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x299 (=> $x306 $x314)))
 (let (($x339 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x293 (= $x306 $x339)))
 (let (($x145 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x253 (=> $x145 $x82)))
 (let (($x292 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x318 (= $x145 $x292)))
 (let (($x319 (and (and (and (and (and (and $x318 $x253) $x293) $x299) $x346) $x249) $x316)))
 (let (($x341 (and (and (and $x319 $x334) $x303) $x328)))
 (let (($x347 (= $x341 true)))
 (let (($x290 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x298 (= $x261 $x290)))
 (let (($x251 (=> $x306 $x298)))
 (let (($x284 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x320 (= $x184 $x284)))
 (let (($x76 (=> $x306 $x320)))
 (let (($x34 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x315 (=> $x306 $x34)))
 (let (($x312 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x252 (= $x306 $x312)))
 (let (($x274 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x22 (= $x145 $x274)))
 (let (($x302 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x66 (and (and (and (and (and (and $x302 $x22) $x253) $x252) $x315) $x76) $x249)))
 (let (($x317 (and $x66 $x251)))
 (let (($x291 (= $x317 true)))
 (let (($x279 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x297 (= $x234 $x279)))
 (let (($x266 (=> $x265 $x297)))
 (let (($x242 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x227 (= $x269 $x242)))
 (let (($x310 (=> $x265 $x227)))
 (let (($x244 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x233 (=> $x265 $x244)))
 (let (($x276 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x260 (= $x261 $x276)))
 (let (($x225 (=> $x306 $x260)))
 (let (($x248 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x238 (= $x184 $x248)))
 (let (($x39 (=> $x306 $x238)))
 (let (($x67 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x241 (=> $x306 $x67)))
 (let (($x237 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x212 (= $x306 $x237)))
 (let (($x277 (and (and (= $x145 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x253) $x212)))
 (let (($x289 (and (and (and (and (and (and $x277 $x241) $x39) $x249) $x225) $x233) $x310)))
 (let (($x270 (and $x289 $x266)))
 (let (($x281 (= $x270 true)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x135 (concat ?x148 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x173 (concat ?x149 (concat ?x139 ?x135))))
 (let ((?x21 (bvadd ?x173 (_ bv4 32))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv1 32))) (select input.dst.llvm-mem ?x21))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv2 32))) ?x198))))
 (let (($x222 (= (_ bv0 32) ?x193)))
 (let ((?x228 (ite $x222 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x228 (_ bv1 32))))
 (let (($x220 (= $x261 $x280)))
 (let (($x230 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x178 (and $x230 $x306)))
 (let (($x285 (=> $x178 $x220)))
 (let (($x188 (= ?x228 (_ bv0 32))))
 (let (($x282 (= $x184 $x188)))
 (let (($x236 (=> $x178 $x282)))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem ?x173))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv2 32))) ?x215))))
 (let (($x181 (= input.spec-%var-l-0.2.1.2.0 ?x214)))
 (let (($x180 (=> $x178 $x181)))
 (let (($x137 (= (_ bv0 32) ?x173)))
 (let ((?x177 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x217 (bvuge ?x177 (_ bv1 32))))
 (let (($x60 (= $x306 $x217)))
 (let (($x207 (=> $x230 $x60)))
 (let (($x176 (and $x230 $x145)))
 (let (($x150 (=> $x176 $x82)))
 (let (($x196 (= ?x177 (_ bv0 32))))
 (let (($x187 (= $x145 $x196)))
 (let (($x42 (=> $x230 $x187)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x169)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x133)))
 (let (($x259 (= input.spec-%var-l-0.2.0 ?x162)))
 (let (($x141 (=> $x230 $x259)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x191 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x191 (_ bv1 32))))
 (let (($x138 (= $x230 $x174)))
 (let (($x77 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x144 (=> $x77 $x82)))
 (let (($x123 (= ?x191 (_ bv0 32))))
 (let (($x206 (= $x77 $x123)))
 (let (($x221 (and (and (and (and (and (and $x206 $x144) $x138) $x141) $x42) $x150) $x207)))
 (let (($x250 (and (and (and $x221 $x180) $x236) $x285)))
 (let (($x232 (= $x250 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x167 (concat ?x146 (concat ?x165 (concat ?x171 ?x108)))))
 (let (($x132 (= ?x167 input.dst.llvm-%l)))
 (let (($x25 (= $x132 true)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x272 (concat ?x156 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x11 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x5 (bvadd ?x11 (_ bv3 32))))
 (let ((?x192 (concat (select input.dst.llvm-mem ?x5) (concat ?x124 ?x272))))
 (let (($x126 (= (bvand ?x192 (_ bv4294967288 32)) ?x192)))
 (let (($x117 (= (bvand ?x11 (_ bv4294967292 32)) ?x11)))
 (let (($x143 (and $x117 $x126)))
 (let (($x125 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x118 (and true $x125)))
 (let (($x106 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x11 (bvsub ?x11 (_ bv4 32))) (bvult ?x11 (bvsub ?x11 (_ bv4 32))))))
 (let (($x130 (and (and (and $x106 $x118) $x117) $x143)))
 (let (($x69 (not $x57)))
 (let (($x41 (=> $x69 $x130)))
 (let (($x168 (= input.dst.llvm-%l ?x167)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x114)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x29 $x94)))
 (let (($x87 (and $x88 $x99)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x18 $x87)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x50)))))))
 (let (($x170 (and $x89 $x158)))
 (let (($x163 (and $x170 $x168)))
 (let (($x104 (and true $x163)))
 (let (($x30 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x112 (and $x30 $x104)))
 (let (($x80 (and $x112 $x41)))
 (let (($x119 (= $x80 true)))
 (let (($x83 (= $x57 true)))
 (let (($x101 (= $x30 true)))
 (let (($x164 (and $x101 $x83)))
 (let (($x128 (and $x164 $x119)))
 (let (($x172 (and $x128 $x25)))
 (let (($x283 (and $x172 $x232)))
 (let (($x307 (and $x283 $x281)))
 (let (($x335 (and $x307 $x291)))
 (let (($x329 (and $x335 $x347)))
 (let (($x338 (and $x77 $x329)))
 (let (($x333 (and $x82 $x338)))
 (let (($x36 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x351 (and $x36 $x333)))
 (let (($x24 (bvugt ?x11 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x33 (=> (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x24)))))))
 (let (($x9 (=> (and $x69 (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x28 $x24)))))))
 (let (($x348 (and $x9 $x351)))
 (let (($x93 (=> $x348 $x63)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var913X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var913X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var913X.0 () (_ BitVec 32))
(declare-fun input.ind-%var913X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var910X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var910X.0 () (_ BitVec 32))
(declare-fun input.ind-%var910X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var907X () (_ BitVec 32))
(declare-fun input.ind-%var907X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var907X.0 () (_ BitVec 32))
(declare-fun input.ind-%var907X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var904X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var904X.0 () (_ BitVec 32))
(declare-fun input.ind-%var904X.2.0 () (_ BitVec 32))
(declare-fun input.ind-%var901X () (_ BitVec 32))
(declare-fun input.ind-%var898X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var898X.0 () (_ BitVec 32))
(declare-fun input.ind-%var898X.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x496 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var913X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x488 (concat ?x496 (select input.dst.llvm-mem (bvadd input.ind-%var913X (_ bv4 32))))))
 (let ((?x518 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var913X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x506 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var913X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x491 (concat ?x506 (concat ?x518 ?x488))))
 (let (($x486 (= input.ind-%var913X.2.1 ?x491)))
 (let (($x512 (bvuge input.ind-%var913X.0 (_ bv1 32))))
 (let (($x520 (=> $x512 $x486)))
 (let ((?x588 (concat (select input.dst.llvm-mem (bvadd input.ind-%var913X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var913X))))
 (let ((?x519 (concat (select input.dst.llvm-mem (bvadd input.ind-%var913X (_ bv2 32))) ?x588)))
 (let ((?x521 (concat (select input.dst.llvm-mem (bvadd input.ind-%var913X (_ bv3 32))) ?x519)))
 (let (($x485 (= input.ind-%var913X.2.0 ?x521)))
 (let (($x589 (=> $x512 $x485)))
 (let (($x515 (= (_ bv0 32) input.ind-%var913X)))
 (let ((?x513 (ite $x515 (_ bv0 32) (_ bv1 32))))
 (let (($x517 (bvuge ?x513 (_ bv1 32))))
 (let (($x484 (= $x512 $x517)))
 (let (($x82 (= false false)))
 (let (($x498 (= input.ind-%var913X.0 (_ bv0 32))))
 (let (($x510 (=> $x498 $x82)))
 (let (($x487 (= ?x513 (_ bv0 32))))
 (let (($x516 (= $x498 $x487)))
 (let (($x477 (= input.spec-%var-node_next-0.L2%9%bbentry input.dst.llvm-%l)))
 (let (($x73 (and (and (and (and (and $x477 $x516) $x510) $x484) $x589) $x520)))
 (let (($x476 (= input.ind-%var910X.2.1 input.ind-%var910X.2.1)))
 (let (($x472 (bvuge input.ind-%var910X.0 (_ bv1 32))))
 (let (($x463 (=> $x472 $x476)))
 (let (($x473 (= input.ind-%var910X.2.0 input.ind-%var910X.2.0)))
 (let (($x462 (=> $x472 $x473)))
 (let (($x467 (= $x472 $x472)))
 (let (($x478 (= input.ind-%var910X.0 (_ bv0 32))))
 (let (($x474 (=> $x478 $x82)))
 (let (($x470 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x478 $x478)) $x474)))
 (let (($x465 (and (and (and $x470 $x467) $x462) $x463)))
 (let (($x497 (and $x465 $x73)))
 (let (($x458 (not true)))
 (let ((?x430 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var907X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x424 (concat ?x430 (select input.dst.llvm-mem (bvadd input.ind-%var907X (_ bv4 32))))))
 (let ((?x425 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var907X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x423 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var907X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x457 (concat ?x423 (concat ?x425 ?x424))))
 (let (($x453 (= input.ind-%var907X.2.1 ?x457)))
 (let (($x417 (bvuge input.ind-%var907X.0 (_ bv1 32))))
 (let (($x500 (=> $x417 $x453)))
 (let ((?x445 (concat (select input.dst.llvm-mem (bvadd input.ind-%var907X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var907X))))
 (let ((?x454 (concat (select input.dst.llvm-mem (bvadd input.ind-%var907X (_ bv2 32))) ?x445)))
 (let ((?x461 (concat (select input.dst.llvm-mem (bvadd input.ind-%var907X (_ bv3 32))) ?x454)))
 (let (($x432 (= input.ind-%var907X.2.0 ?x461)))
 (let (($x444 (=> $x417 $x432)))
 (let (($x443 (= (_ bv0 32) input.ind-%var907X)))
 (let ((?x435 (ite $x443 (_ bv0 32) (_ bv1 32))))
 (let (($x439 (bvuge ?x435 (_ bv1 32))))
 (let (($x418 (= $x417 $x439)))
 (let (($x446 (= input.ind-%var907X.0 (_ bv0 32))))
 (let (($x508 (=> $x446 $x82)))
 (let (($x504 (= ?x435 (_ bv0 32))))
 (let (($x415 (= $x446 $x504)))
 (let (($x438 (= input.spec-%tmpvar-0.L2%9%bbentry input.dst.llvm-%l)))
 (let (($x65 (and (and (and (and (and $x438 $x415) $x508) $x418) $x444) $x500)))
 (let (($x437 (= input.ind-%var904X.2.1 input.ind-%var904X.2.1)))
 (let (($x450 (bvuge input.ind-%var904X.0 (_ bv1 32))))
 (let (($x414 (=> $x450 $x437)))
 (let (($x403 (= input.ind-%var904X.2.0 input.ind-%var904X.2.0)))
 (let (($x404 (=> $x450 $x403)))
 (let (($x413 (= $x450 $x450)))
 (let (($x440 (= input.ind-%var904X.0 (_ bv0 32))))
 (let (($x401 (=> $x440 $x82)))
 (let (($x442 (and (and (= input.spec-%var-l-0.2.1 input.spec-%var-l-0) (= $x440 $x440)) $x401)))
 (let (($x405 (and (and (and $x442 $x413) $x404) $x414)))
 (let (($x433 (and $x405 $x65)))
 (let ((?x390 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var901X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x377 (concat ?x390 (select input.dst.llvm-mem (bvadd input.ind-%var901X (_ bv4 32))))))
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var901X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var901X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x411 (concat ?x383 (concat ?x397 ?x377))))
 (let (($x362 (= ?x411 ?x411)))
 (let (($x378 (= (_ bv0 32) input.ind-%var901X)))
 (let ((?x356 (ite $x378 (_ bv0 32) (_ bv1 32))))
 (let (($x398 (bvuge ?x356 (_ bv1 32))))
 (let (($x393 (=> $x398 $x362)))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd input.ind-%var901X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var901X))))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd input.ind-%var901X (_ bv2 32))) ?x388)))
 (let ((?x387 (concat (select input.dst.llvm-mem (bvadd input.ind-%var901X (_ bv3 32))) ?x372)))
 (let (($x373 (= ?x387 ?x387)))
 (let (($x363 (=> $x398 $x373)))
 (let (($x369 (= $x398 $x398)))
 (let (($x359 (= ?x356 (_ bv0 32))))
 (let (($x375 (=> $x359 $x82)))
 (let (($x379 (and (and (= input.dst.llvm-%l input.dst.llvm-%l) (= $x359 $x359)) $x375)))
 (let (($x412 (and (and (and $x379 $x369) $x363) $x393)))
 (let (($x343 (= input.ind-%var898X.2.1 input.ind-%var898X.2.1)))
 (let (($x336 (bvuge input.ind-%var898X.0 (_ bv1 32))))
 (let (($x371 (=> $x336 $x343)))
 (let (($x376 (= input.ind-%var898X.2.0 input.ind-%var898X.2.0)))
 (let (($x384 (=> $x336 $x376)))
 (let (($x330 (= $x336 $x336)))
 (let (($x344 (= input.ind-%var898X.0 (_ bv0 32))))
 (let (($x366 (=> $x344 $x82)))
 (let (($x352 (and (and (= input.spec-%var-l-0 input.spec-%var-l-0) (= $x344 $x344)) $x366)))
 (let (($x381 (and (and (and $x352 $x330) $x384) $x371)))
 (let (($x394 (and $x381 $x412)))
 (let (($x155 (or (or (or $x394 $x433) $x458) $x497)))
 (let (($x49 (and true $x155)))
 (let (($x63 (= $x49 true)))
 (let (($x337 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x234 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x294 (= $x234 $x337)))
 (let (($x261 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x306 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x265 (and $x306 $x261)))
 (let (($x328 (=> $x265 $x294)))
 (let (($x309 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x269 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x305 (= $x269 $x309)))
 (let (($x303 (=> $x265 $x305)))
 (let (($x43 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x334 (=> $x265 $x43)))
 (let (($x301 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x324 (= $x261 $x301)))
 (let (($x316 (=> $x306 $x324)))
 (let (($x184 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x239 (and $x306 $x184)))
 (let (($x249 (=> $x239 $x82)))
 (let (($x321 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x327 (= $x184 $x321)))
 (let (($x346 (=> $x306 $x327)))
 (let (($x314 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x299 (=> $x306 $x314)))
 (let (($x339 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x293 (= $x306 $x339)))
 (let (($x145 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x253 (=> $x145 $x82)))
 (let (($x292 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x318 (= $x145 $x292)))
 (let (($x319 (and (and (and (and (and (and $x318 $x253) $x293) $x299) $x346) $x249) $x316)))
 (let (($x341 (and (and (and $x319 $x334) $x303) $x328)))
 (let (($x347 (= $x341 true)))
 (let (($x290 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x298 (= $x261 $x290)))
 (let (($x251 (=> $x306 $x298)))
 (let (($x284 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x320 (= $x184 $x284)))
 (let (($x76 (=> $x306 $x320)))
 (let (($x34 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x315 (=> $x306 $x34)))
 (let (($x312 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x252 (= $x306 $x312)))
 (let (($x274 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x22 (= $x145 $x274)))
 (let (($x302 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x66 (and (and (and (and (and (and $x302 $x22) $x253) $x252) $x315) $x76) $x249)))
 (let (($x317 (and $x66 $x251)))
 (let (($x291 (= $x317 true)))
 (let (($x279 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x297 (= $x234 $x279)))
 (let (($x266 (=> $x265 $x297)))
 (let (($x242 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x227 (= $x269 $x242)))
 (let (($x310 (=> $x265 $x227)))
 (let (($x244 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.1.2.0)))
 (let (($x233 (=> $x265 $x244)))
 (let (($x276 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x260 (= $x261 $x276)))
 (let (($x225 (=> $x306 $x260)))
 (let (($x248 (= input.spec-%tmpvar-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x238 (= $x184 $x248)))
 (let (($x39 (=> $x306 $x238)))
 (let (($x67 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L2%9%bbentry.2.0)))
 (let (($x241 (=> $x306 $x67)))
 (let (($x237 (bvuge input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x212 (= $x306 $x237)))
 (let (($x277 (and (and (= $x145 (= input.spec-%tmpvar-0.L2%9%bbentry.0 (_ bv0 32))) $x253) $x212)))
 (let (($x289 (and (and (and (and (and (and $x277 $x241) $x39) $x249) $x225) $x233) $x310)))
 (let (($x270 (and $x289 $x266)))
 (let (($x281 (= $x270 true)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x135 (concat ?x148 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x173 (concat ?x149 (concat ?x139 ?x135))))
 (let ((?x21 (bvadd ?x173 (_ bv4 32))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv1 32))) (select input.dst.llvm-mem ?x21))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv2 32))) ?x198))))
 (let (($x222 (= (_ bv0 32) ?x193)))
 (let ((?x228 (ite $x222 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x228 (_ bv1 32))))
 (let (($x220 (= $x261 $x280)))
 (let (($x230 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x178 (and $x230 $x306)))
 (let (($x285 (=> $x178 $x220)))
 (let (($x188 (= ?x228 (_ bv0 32))))
 (let (($x282 (= $x184 $x188)))
 (let (($x236 (=> $x178 $x282)))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem ?x173))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv2 32))) ?x215))))
 (let (($x181 (= input.spec-%var-l-0.2.1.2.0 ?x214)))
 (let (($x180 (=> $x178 $x181)))
 (let (($x137 (= (_ bv0 32) ?x173)))
 (let ((?x177 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x217 (bvuge ?x177 (_ bv1 32))))
 (let (($x60 (= $x306 $x217)))
 (let (($x207 (=> $x230 $x60)))
 (let (($x176 (and $x230 $x145)))
 (let (($x150 (=> $x176 $x82)))
 (let (($x196 (= ?x177 (_ bv0 32))))
 (let (($x187 (= $x145 $x196)))
 (let (($x42 (=> $x230 $x187)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x169)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x133)))
 (let (($x259 (= input.spec-%var-l-0.2.0 ?x162)))
 (let (($x141 (=> $x230 $x259)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x191 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x191 (_ bv1 32))))
 (let (($x138 (= $x230 $x174)))
 (let (($x77 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x144 (=> $x77 $x82)))
 (let (($x123 (= ?x191 (_ bv0 32))))
 (let (($x206 (= $x77 $x123)))
 (let (($x221 (and (and (and (and (and (and $x206 $x144) $x138) $x141) $x42) $x150) $x207)))
 (let (($x250 (and (and (and $x221 $x180) $x236) $x285)))
 (let (($x232 (= $x250 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x167 (concat ?x146 (concat ?x165 (concat ?x171 ?x108)))))
 (let (($x132 (= ?x167 input.dst.llvm-%l)))
 (let (($x25 (= $x132 true)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x272 (concat ?x156 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x11 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x5 (bvadd ?x11 (_ bv3 32))))
 (let ((?x192 (concat (select input.dst.llvm-mem ?x5) (concat ?x124 ?x272))))
 (let (($x126 (= (bvand ?x192 (_ bv4294967288 32)) ?x192)))
 (let (($x117 (= (bvand ?x11 (_ bv4294967292 32)) ?x11)))
 (let (($x143 (and $x117 $x126)))
 (let (($x125 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x118 (and true $x125)))
 (let (($x106 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x11 (bvsub ?x11 (_ bv4 32))) (bvult ?x11 (bvsub ?x11 (_ bv4 32))))))
 (let (($x130 (and (and (and $x106 $x118) $x117) $x143)))
 (let (($x69 (not $x57)))
 (let (($x41 (=> $x69 $x130)))
 (let (($x168 (= input.dst.llvm-%l ?x167)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x114)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x29 $x94)))
 (let (($x87 (and $x88 $x99)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x18 $x87)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x50)))))))
 (let (($x170 (and $x89 $x158)))
 (let (($x163 (and $x170 $x168)))
 (let (($x104 (and true $x163)))
 (let (($x30 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x112 (and $x30 $x104)))
 (let (($x80 (and $x112 $x41)))
 (let (($x119 (= $x80 true)))
 (let (($x83 (= $x57 true)))
 (let (($x101 (= $x30 true)))
 (let (($x164 (and $x101 $x83)))
 (let (($x128 (and $x164 $x119)))
 (let (($x172 (and $x128 $x25)))
 (let (($x283 (and $x172 $x232)))
 (let (($x307 (and $x283 $x281)))
 (let (($x335 (and $x307 $x291)))
 (let (($x329 (and $x335 $x347)))
 (let (($x338 (and $x77 $x329)))
 (let (($x333 (and $x82 $x338)))
 (let (($x36 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x351 (and $x36 $x333)))
 (let (($x24 (bvugt ?x11 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x33 (=> (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x24)))))))
 (let (($x9 (=> (and $x69 (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x28 $x24)))))))
 (let (($x348 (and $x9 $x351)))
 (let (($x93 (=> $x348 $x63)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791879/query
