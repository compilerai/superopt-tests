==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708107/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x218 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x362 (not $x218)))
 (let (($x400 (or $x218 $x362)))
 (let (($x401 (= $x400 false)))
 (let (($x402 (= $x401 true)))
 (let ((?x381 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x383 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x386 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x389 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x390 (concat ?x389 (concat ?x386 (concat ?x383 ?x381)))))
 (let (($x391 (= ?x390 input.dst.llvm-%l)))
 (let (($x392 (= $x391 true)))
 (let (($x393 (= $x392 true)))
 (let ((?x363 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x370 (bvugt ?x363 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x369 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x363 (_ bv3 32)))))
 (let (($x376 (=> (bvule ?x363 (bvsub (bvadd ?x363 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x369 $x370)))))))
 (let (($x364 (=> (and $x362 (bvule ?x363 (bvsub (bvadd ?x363 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x369 $x370)))))))
 (let (($x365 (= $x364 true)))
 (let (($x377 (= $x365 true)))
 (let (($x378 (= $x377 true)))
 (let (($x15 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x352 (=> $x15 true)))
 (let ((?x325 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x326 (concat ?x325 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x328 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x331 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x334 (ite (= (_ bv0 32) (concat ?x331 (concat ?x328 ?x326))) (_ bv0 32) (_ bv1 32))))
 (let (($x350 (= $x15 (bvuge ?x334 (_ bv1 32)))))
 (let (($x20 (= false false)))
 (let (($x30 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x17 (=> $x30 $x20)))
 (let (($x319 (= $x30 (= ?x334 (_ bv0 32)))))
 (let (($x320 (and $x319 $x17)))
 (let (($x351 (and $x320 $x350)))
 (let (($x354 (and $x351 $x352)))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x272)))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x275)))
 (let (($x279 (= input.spec-%var-l-0.2.0 ?x278)))
 (let (($x355 (and $x279 $x354)))
 (let (($x230 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x356 (=> $x230 $x355)))
 (let (($x232 (= $x230 (bvuge (ite $x218 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x217 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x222 (=> $x217 $x20)))
 (let (($x221 (= $x217 (= (ite $x218 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x223 (and $x221 $x222)))
 (let (($x233 (and $x223 $x232)))
 (let (($x357 (and $x233 $x356)))
 (let (($x358 (= $x357 true)))
 (let (($x359 (= $x358 true)))
 (let (($x360 (= $x359 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x147)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x142 $x145)))
 (let (($x149 (and $x146 $x148)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x140 $x149)))
 (let (($x151 (= $x150 true)))
 (let (($x152 (= $x151 true)))
 (let (($x153 (= $x152 true)))
 (let (($x361 (and $x153 $x360)))
 (let (($x379 (and $x361 $x378)))
 (let (($x394 (and $x379 $x393)))
 (let (($x395 (and $x20 $x394)))
 (let (($x67 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x73 (=> $x67 true)))
 (let (($x133 (= $x67 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x57 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x57 $x20)))
 (let (($x127 (= $x57 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x130 (and $x127 $x63)))
 (let (($x134 (and $x130 $x133)))
 (let (($x132 (and $x134 $x73)))
 (let (($x120 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x135 (and $x120 $x132)))
 (let (($x136 (=> $x15 $x135)))
 (let (($x114 (= $x15 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x109 (= $x30 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x110 (and $x109 $x17)))
 (let (($x115 (and $x110 $x114)))
 (let (($x137 (and $x115 $x136)))
 (let (($x396 (and $x137 $x395)))
 (let (($x97 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x99 (and $x97 true)))
 (let (($x100 (=> $x15 $x99)))
 (let (($x92 (= $x15 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x87 (= $x30 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x88 (and $x87 $x17)))
 (let (($x93 (and $x88 $x92)))
 (let (($x101 (and $x93 $x100)))
 (let (($x80 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x102 (and $x80 $x101)))
 (let (($x397 (and $x102 $x396)))
 (let (($x69 (= $x67 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x58 (= $x57 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x64 (and $x58 $x63)))
 (let (($x70 (and $x64 $x69)))
 (let (($x74 (and $x70 $x73)))
 (let (($x31 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x71 (and $x31 $x74)))
 (let (($x72 (=> $x15 $x71)))
 (let (($x38 (= $x15 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x27 (= $x30 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x13 (and $x27 $x17)))
 (let (($x11 (and $x13 $x38)))
 (let (($x75 (and $x11 $x72)))
 (let (($x398 (and $x75 $x397)))
 (let (($x8 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x399 (and $x8 $x398)))
 (let (($x403 (=> $x399 $x402)))
 (not $x403)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x218 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x362 (not $x218)))
 (let (($x400 (or $x218 $x362)))
 (let (($x401 (= $x400 false)))
 (let (($x402 (= $x401 true)))
 (let ((?x381 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x383 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x386 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x389 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x390 (concat ?x389 (concat ?x386 (concat ?x383 ?x381)))))
 (let (($x391 (= ?x390 input.dst.llvm-%l)))
 (let (($x392 (= $x391 true)))
 (let (($x393 (= $x392 true)))
 (let ((?x363 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x370 (bvugt ?x363 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x369 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x363 (_ bv3 32)))))
 (let (($x376 (=> (bvule ?x363 (bvsub (bvadd ?x363 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x369 $x370)))))))
 (let (($x364 (=> (and $x362 (bvule ?x363 (bvsub (bvadd ?x363 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x369 $x370)))))))
 (let (($x365 (= $x364 true)))
 (let (($x377 (= $x365 true)))
 (let (($x378 (= $x377 true)))
 (let (($x15 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x352 (=> $x15 true)))
 (let ((?x325 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x326 (concat ?x325 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x328 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x331 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x334 (ite (= (_ bv0 32) (concat ?x331 (concat ?x328 ?x326))) (_ bv0 32) (_ bv1 32))))
 (let (($x350 (= $x15 (bvuge ?x334 (_ bv1 32)))))
 (let (($x20 (= false false)))
 (let (($x30 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x17 (=> $x30 $x20)))
 (let (($x319 (= $x30 (= ?x334 (_ bv0 32)))))
 (let (($x320 (and $x319 $x17)))
 (let (($x351 (and $x320 $x350)))
 (let (($x354 (and $x351 $x352)))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x272)))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x275)))
 (let (($x279 (= input.spec-%var-l-0.2.0 ?x278)))
 (let (($x355 (and $x279 $x354)))
 (let (($x230 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x356 (=> $x230 $x355)))
 (let (($x232 (= $x230 (bvuge (ite $x218 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x217 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x222 (=> $x217 $x20)))
 (let (($x221 (= $x217 (= (ite $x218 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x223 (and $x221 $x222)))
 (let (($x233 (and $x223 $x232)))
 (let (($x357 (and $x233 $x356)))
 (let (($x358 (= $x357 true)))
 (let (($x359 (= $x358 true)))
 (let (($x360 (= $x359 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x147)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x142 $x145)))
 (let (($x149 (and $x146 $x148)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x140 $x149)))
 (let (($x151 (= $x150 true)))
 (let (($x152 (= $x151 true)))
 (let (($x153 (= $x152 true)))
 (let (($x361 (and $x153 $x360)))
 (let (($x379 (and $x361 $x378)))
 (let (($x394 (and $x379 $x393)))
 (let (($x395 (and $x20 $x394)))
 (let (($x67 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x73 (=> $x67 true)))
 (let (($x133 (= $x67 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x57 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x57 $x20)))
 (let (($x127 (= $x57 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x130 (and $x127 $x63)))
 (let (($x134 (and $x130 $x133)))
 (let (($x132 (and $x134 $x73)))
 (let (($x120 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x135 (and $x120 $x132)))
 (let (($x136 (=> $x15 $x135)))
 (let (($x114 (= $x15 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x109 (= $x30 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x110 (and $x109 $x17)))
 (let (($x115 (and $x110 $x114)))
 (let (($x137 (and $x115 $x136)))
 (let (($x396 (and $x137 $x395)))
 (let (($x97 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x99 (and $x97 true)))
 (let (($x100 (=> $x15 $x99)))
 (let (($x92 (= $x15 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x87 (= $x30 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x88 (and $x87 $x17)))
 (let (($x93 (and $x88 $x92)))
 (let (($x101 (and $x93 $x100)))
 (let (($x80 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x102 (and $x80 $x101)))
 (let (($x397 (and $x102 $x396)))
 (let (($x69 (= $x67 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x58 (= $x57 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x64 (and $x58 $x63)))
 (let (($x70 (and $x64 $x69)))
 (let (($x74 (and $x70 $x73)))
 (let (($x31 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x71 (and $x31 $x74)))
 (let (($x72 (=> $x15 $x71)))
 (let (($x38 (= $x15 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x27 (= $x30 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x13 (and $x27 $x17)))
 (let (($x11 (and $x13 $x38)))
 (let (($x75 (and $x11 $x72)))
 (let (($x398 (and $x75 $x397)))
 (let (($x8 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x399 (and $x8 $x398)))
 (let (($x403 (=> $x399 $x402)))
 (not $x403)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffbfc)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000004 #xba))
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffbff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffbfc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708107/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x170 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x348 (not $x170)))
 (let (($x53 (or $x170 $x348)))
 (let (($x54 (= $x53 false)))
 (let (($x55 (= $x54 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x94 (concat ?x84 (concat ?x81 ?x128)))))
 (let (($x96 (= ?x95 input.dst.llvm-%l)))
 (let (($x39 (= $x96 true)))
 (let (($x16 (= $x39 true)))
 (let ((?x7 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x117 (bvugt ?x7 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x7 (_ bv3 32)))))
 (let (($x123 (=> (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x117)))))))
 (let (($x10 (=> (and $x348 (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x116 $x117)))))))
 (let (($x105 (= $x10 true)))
 (let (($x124 (= $x105 true)))
 (let (($x59 (= $x124 true)))
 (let (($x74 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x338 (=> $x74 false)))
 (let ((?x298 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x299 (concat ?x298 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x291 (ite (= (_ bv0 32) (concat ?x300 (concat ?x296 ?x299))) (_ bv0 32) (_ bv1 32))))
 (let (($x337 (= $x74 (bvuge ?x291 (_ bv1 32)))))
 (let (($x60 (= false false)))
 (let (($x56 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x61 (=> $x56 $x60)))
 (let (($x280 (= $x56 (= ?x291 (_ bv0 32)))))
 (let (($x281 (and $x280 $x61)))
 (let (($x349 (and $x281 $x337)))
 (let (($x347 (and $x349 $x338)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x253)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x248)))
 (let (($x242 (= input.spec-%var-l-0.2.0 ?x257)))
 (let (($x343 (and $x242 $x347)))
 (let (($x180 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x344 (=> $x180 $x343)))
 (let (($x181 (= $x180 (bvuge (ite $x170 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x169 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x167 (=> $x169 $x60)))
 (let (($x164 (= $x169 (= (ite $x170 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x171 (and $x164 $x167)))
 (let (($x184 (and $x171 $x181)))
 (let (($x340 (and $x184 $x344)))
 (let (($x341 (= $x340 true)))
 (let (($x339 (= $x341 true)))
 (let (($x342 (= $x339 true)))
 (let ((?x362 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x363 (= (_ bv0 32) ?x362)))
 (let ((?x359 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x360 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x359)))
 (let (($x357 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x361 (and $x357 $x360)))
 (let (($x366 (and $x361 $x363)))
 (let (($x355 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x367 (and $x355 $x366)))
 (let (($x375 (= $x367 true)))
 (let (($x368 (= $x375 true)))
 (let (($x369 (= $x368 true)))
 (let (($x345 (and $x369 $x342)))
 (let (($x62 (and $x345 $x59)))
 (let (($x35 (and $x62 $x16)))
 (let (($x12 (and $x60 $x35)))
 (let (($x127 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x135 (=> $x127 false)))
 (let (($x319 (= $x127 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x108 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x119 (=> $x108 $x60)))
 (let (($x326 (= $x108 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x333 (and $x326 $x119)))
 (let (($x320 (and $x333 $x319)))
 (let (($x335 (and $x320 $x135)))
 (let (($x330 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x353 (and $x330 $x335)))
 (let (($x350 (=> $x74 $x353)))
 (let (($x272 (= $x74 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x273 (= $x56 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x274 (and $x273 $x61)))
 (let (($x275 (and $x274 $x272)))
 (let (($x351 (and $x275 $x350)))
 (let (($x23 (and $x351 $x12)))
 (let (($x220 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x222 (and $x220 false)))
 (let (($x223 (=> $x74 $x222)))
 (let (($x216 (= $x74 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x149 (= $x56 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x150 (and $x149 $x61)))
 (let (($x217 (and $x150 $x216)))
 (let (($x230 (and $x217 $x223)))
 (let (($x142 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x231 (and $x142 $x230)))
 (let (($x34 (and $x231 $x23)))
 (let (($x129 (= $x127 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x109 (= $x108 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x120 (and $x109 $x119)))
 (let (($x133 (and $x120 $x129)))
 (let (($x136 (and $x133 $x135)))
 (let (($x91 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x134 (and $x91 $x136)))
 (let (($x132 (=> $x74 $x134)))
 (let (($x73 (= $x74 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x57 (= $x56 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x58 (and $x57 $x61)))
 (let (($x71 (and $x58 $x73)))
 (let (($x137 (and $x71 $x132)))
 (let (($x36 (and $x137 $x34)))
 (let (($x30 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x52 (and $x30 $x36)))
 (let (($x65 (=> $x52 $x55)))
 (not $x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x170 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x348 (not $x170)))
 (let (($x53 (or $x170 $x348)))
 (let (($x54 (= $x53 false)))
 (let (($x55 (= $x54 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x94 (concat ?x84 (concat ?x81 ?x128)))))
 (let (($x96 (= ?x95 input.dst.llvm-%l)))
 (let (($x39 (= $x96 true)))
 (let (($x16 (= $x39 true)))
 (let ((?x7 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x117 (bvugt ?x7 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x7 (_ bv3 32)))))
 (let (($x123 (=> (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x117)))))))
 (let (($x10 (=> (and $x348 (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x116 $x117)))))))
 (let (($x105 (= $x10 true)))
 (let (($x124 (= $x105 true)))
 (let (($x59 (= $x124 true)))
 (let (($x74 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x338 (=> $x74 false)))
 (let ((?x298 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x299 (concat ?x298 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x291 (ite (= (_ bv0 32) (concat ?x300 (concat ?x296 ?x299))) (_ bv0 32) (_ bv1 32))))
 (let (($x337 (= $x74 (bvuge ?x291 (_ bv1 32)))))
 (let (($x60 (= false false)))
 (let (($x56 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x61 (=> $x56 $x60)))
 (let (($x280 (= $x56 (= ?x291 (_ bv0 32)))))
 (let (($x281 (and $x280 $x61)))
 (let (($x349 (and $x281 $x337)))
 (let (($x347 (and $x349 $x338)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x253)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x248)))
 (let (($x242 (= input.spec-%var-l-0.2.0 ?x257)))
 (let (($x343 (and $x242 $x347)))
 (let (($x180 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x344 (=> $x180 $x343)))
 (let (($x181 (= $x180 (bvuge (ite $x170 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x169 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x167 (=> $x169 $x60)))
 (let (($x164 (= $x169 (= (ite $x170 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x171 (and $x164 $x167)))
 (let (($x184 (and $x171 $x181)))
 (let (($x340 (and $x184 $x344)))
 (let (($x341 (= $x340 true)))
 (let (($x339 (= $x341 true)))
 (let (($x342 (= $x339 true)))
 (let ((?x362 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x363 (= (_ bv0 32) ?x362)))
 (let ((?x359 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x360 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x359)))
 (let (($x357 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x361 (and $x357 $x360)))
 (let (($x366 (and $x361 $x363)))
 (let (($x355 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x367 (and $x355 $x366)))
 (let (($x375 (= $x367 true)))
 (let (($x368 (= $x375 true)))
 (let (($x369 (= $x368 true)))
 (let (($x345 (and $x369 $x342)))
 (let (($x62 (and $x345 $x59)))
 (let (($x35 (and $x62 $x16)))
 (let (($x12 (and $x60 $x35)))
 (let (($x127 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x135 (=> $x127 false)))
 (let (($x319 (= $x127 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x108 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x119 (=> $x108 $x60)))
 (let (($x326 (= $x108 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x333 (and $x326 $x119)))
 (let (($x320 (and $x333 $x319)))
 (let (($x335 (and $x320 $x135)))
 (let (($x330 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x353 (and $x330 $x335)))
 (let (($x350 (=> $x74 $x353)))
 (let (($x272 (= $x74 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x273 (= $x56 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x274 (and $x273 $x61)))
 (let (($x275 (and $x274 $x272)))
 (let (($x351 (and $x275 $x350)))
 (let (($x23 (and $x351 $x12)))
 (let (($x220 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x222 (and $x220 false)))
 (let (($x223 (=> $x74 $x222)))
 (let (($x216 (= $x74 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x149 (= $x56 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x150 (and $x149 $x61)))
 (let (($x217 (and $x150 $x216)))
 (let (($x230 (and $x217 $x223)))
 (let (($x142 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x231 (and $x142 $x230)))
 (let (($x34 (and $x231 $x23)))
 (let (($x129 (= $x127 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x109 (= $x108 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x120 (and $x109 $x119)))
 (let (($x133 (and $x120 $x129)))
 (let (($x136 (and $x133 $x135)))
 (let (($x91 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x134 (and $x91 $x136)))
 (let (($x132 (=> $x74 $x134)))
 (let (($x73 (= $x74 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x57 (= $x56 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x58 (and $x57 $x61)))
 (let (($x71 (and $x58 $x73)))
 (let (($x137 (and $x71 $x132)))
 (let (($x36 (and $x137 $x34)))
 (let (($x30 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x52 (and $x30 $x36)))
 (let (($x65 (=> $x52 $x55)))
 (not $x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708107/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x20 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x30 (not $x20)))
 (let (($x405 (or $x20 $x30)))
 (let (($x406 (not $x405)))
 (let (($x77 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x33 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x126 (or $x33 $x77)))
 (let (($x407 (or $x126 $x406)))
 (let (($x408 (= $x407 true)))
 (let (($x409 (= $x408 true)))
 (let ((?x144 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x11 (concat ?x38 (concat ?x156 (concat ?x146 ?x144)))))
 (let (($x68 (= ?x11 input.dst.llvm-%l)))
 (let (($x69 (= $x68 true)))
 (let (($x80 (= $x69 true)))
 (let (($x274 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x327 (=> $x274 true)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x67 (concat ?x63 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x5 (ite (= (_ bv0 32) (concat ?x285 (concat ?x288 ?x67))) (_ bv0 32) (_ bv1 32))))
 (let (($x162 (= $x274 (bvuge ?x5 (_ bv1 32)))))
 (let (($x221 (= false false)))
 (let (($x216 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x220 (=> $x216 $x221)))
 (let (($x238 (= $x216 (= ?x5 (_ bv0 32)))))
 (let (($x245 (and $x238 $x220)))
 (let (($x331 (and $x245 $x162)))
 (let (($x97 (and $x331 $x327)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x308)))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x268)))
 (let (($x264 (= input.spec-%var-l-0.2.0 ?x262)))
 (let (($x328 (and $x264 $x97)))
 (let (($x324 (=> $x33 $x328)))
 (let (($x225 (= $x33 (bvuge (ite $x20 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x163 (=> $x77 $x221)))
 (let (($x104 (= $x77 (= (ite $x20 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x160 (and $x104 $x163)))
 (let (($x154 (and $x160 $x225)))
 (let (($x110 (and $x154 $x324)))
 (let (($x115 (= $x110 true)))
 (let (($x334 (= $x115 true)))
 (let (($x329 (= $x334 true)))
 (let (($x96 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x39 (= $x96 true)))
 (let (($x16 (= $x39 true)))
 (let (($x35 (= $x16 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x94)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x124 $x62)))
 (let (($x84 (and $x90 $x83)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x105 $x84)))
 (let (($x81 (= $x78 true)))
 (let (($x128 (= $x81 true)))
 (let (($x82 (= $x128 true)))
 (let (($x12 (and $x82 $x35)))
 (let (($x140 (and $x12 $x329)))
 (let (($x85 (and $x140 $x80)))
 (let (($x86 (and $x221 $x85)))
 (let (($x375 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x170 (=> $x375 true)))
 (let (($x118 (= $x375 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x356 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x362 (=> $x356 $x221)))
 (let (($x106 (= $x356 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x112 (and $x106 $x362)))
 (let (($x121 (and $x112 $x118)))
 (let (($x117 (and $x121 $x170)))
 (let (($x340 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x122 (and $x340 $x117)))
 (let (($x50 (=> $x274 $x122)))
 (let (($x337 (= $x274 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x291 (= $x216 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x287 (and $x291 $x220)))
 (let (($x349 (and $x287 $x337)))
 (let (($x123 (and $x349 $x50)))
 (let (($x99 (and $x123 $x86)))
 (let (($x293 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x300 (and $x293 true)))
 (let (($x295 (=> $x274 $x300)))
 (let (($x253 (= $x274 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x249 (= $x216 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x250 (and $x249 $x220)))
 (let (($x248 (and $x250 $x253)))
 (let (($x296 (and $x248 $x295)))
 (let (($x178 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x302 (and $x178 $x296)))
 (let (($x100 (and $x302 $x99)))
 (let (($x369 (= $x375 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x357 (= $x356 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x363 (and $x357 $x362)))
 (let (($x173 (and $x363 $x369)))
 (let (($x165 (and $x173 $x170)))
 (let (($x332 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x169 (and $x332 $x165)))
 (let (($x372 (=> $x274 $x169)))
 (let (($x273 (= $x274 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x217 (= $x216 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x222 (and $x217 $x220)))
 (let (($x269 (and $x222 $x273)))
 (let (($x166 (and $x269 $x372)))
 (let (($x101 (and $x166 $x100)))
 (let (($x135 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x102 (and $x135 $x101)))
 (let ((?x41 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x87 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x41 (_ bv3 32)))))
 (let (($x109 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x87)))))))
 (let (($x57 (=> (and $x30 (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x88 $x87)))))))
 (let (($x125 (and $x57 $x102)))
 (let (($x410 (=> $x125 $x409)))
 (not $x410))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x20 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x30 (not $x20)))
 (let (($x405 (or $x20 $x30)))
 (let (($x406 (not $x405)))
 (let (($x77 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x33 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x126 (or $x33 $x77)))
 (let (($x407 (or $x126 $x406)))
 (let (($x408 (= $x407 true)))
 (let (($x409 (= $x408 true)))
 (let ((?x144 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x11 (concat ?x38 (concat ?x156 (concat ?x146 ?x144)))))
 (let (($x68 (= ?x11 input.dst.llvm-%l)))
 (let (($x69 (= $x68 true)))
 (let (($x80 (= $x69 true)))
 (let (($x274 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x327 (=> $x274 true)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x67 (concat ?x63 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x5 (ite (= (_ bv0 32) (concat ?x285 (concat ?x288 ?x67))) (_ bv0 32) (_ bv1 32))))
 (let (($x162 (= $x274 (bvuge ?x5 (_ bv1 32)))))
 (let (($x221 (= false false)))
 (let (($x216 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x220 (=> $x216 $x221)))
 (let (($x238 (= $x216 (= ?x5 (_ bv0 32)))))
 (let (($x245 (and $x238 $x220)))
 (let (($x331 (and $x245 $x162)))
 (let (($x97 (and $x331 $x327)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x308)))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x268)))
 (let (($x264 (= input.spec-%var-l-0.2.0 ?x262)))
 (let (($x328 (and $x264 $x97)))
 (let (($x324 (=> $x33 $x328)))
 (let (($x225 (= $x33 (bvuge (ite $x20 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x163 (=> $x77 $x221)))
 (let (($x104 (= $x77 (= (ite $x20 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x160 (and $x104 $x163)))
 (let (($x154 (and $x160 $x225)))
 (let (($x110 (and $x154 $x324)))
 (let (($x115 (= $x110 true)))
 (let (($x334 (= $x115 true)))
 (let (($x329 (= $x334 true)))
 (let (($x96 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x39 (= $x96 true)))
 (let (($x16 (= $x39 true)))
 (let (($x35 (= $x16 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x94)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x124 $x62)))
 (let (($x84 (and $x90 $x83)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x105 $x84)))
 (let (($x81 (= $x78 true)))
 (let (($x128 (= $x81 true)))
 (let (($x82 (= $x128 true)))
 (let (($x12 (and $x82 $x35)))
 (let (($x140 (and $x12 $x329)))
 (let (($x85 (and $x140 $x80)))
 (let (($x86 (and $x221 $x85)))
 (let (($x375 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x170 (=> $x375 true)))
 (let (($x118 (= $x375 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x356 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x362 (=> $x356 $x221)))
 (let (($x106 (= $x356 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x112 (and $x106 $x362)))
 (let (($x121 (and $x112 $x118)))
 (let (($x117 (and $x121 $x170)))
 (let (($x340 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x122 (and $x340 $x117)))
 (let (($x50 (=> $x274 $x122)))
 (let (($x337 (= $x274 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x291 (= $x216 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x287 (and $x291 $x220)))
 (let (($x349 (and $x287 $x337)))
 (let (($x123 (and $x349 $x50)))
 (let (($x99 (and $x123 $x86)))
 (let (($x293 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x300 (and $x293 true)))
 (let (($x295 (=> $x274 $x300)))
 (let (($x253 (= $x274 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x249 (= $x216 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x250 (and $x249 $x220)))
 (let (($x248 (and $x250 $x253)))
 (let (($x296 (and $x248 $x295)))
 (let (($x178 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x302 (and $x178 $x296)))
 (let (($x100 (and $x302 $x99)))
 (let (($x369 (= $x375 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x357 (= $x356 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x363 (and $x357 $x362)))
 (let (($x173 (and $x363 $x369)))
 (let (($x165 (and $x173 $x170)))
 (let (($x332 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x169 (and $x332 $x165)))
 (let (($x372 (=> $x274 $x169)))
 (let (($x273 (= $x274 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x217 (= $x216 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x222 (and $x217 $x220)))
 (let (($x269 (and $x222 $x273)))
 (let (($x166 (and $x269 $x372)))
 (let (($x101 (and $x166 $x100)))
 (let (($x135 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x102 (and $x135 $x101)))
 (let ((?x41 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x87 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x41 (_ bv3 32)))))
 (let (($x109 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x87)))))))
 (let (($x57 (=> (and $x30 (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x88 $x87)))))))
 (let (($x125 (and $x57 $x102)))
 (let (($x410 (=> $x125 $x409)))
 (not $x410))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708107/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x518 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x522 (concat (select input.dst.llvm-mem (bvadd ?x518 (_ bv1 32))) (select input.dst.llvm-mem ?x518))))
 (let ((?x528 (concat (select input.dst.llvm-mem (bvadd ?x518 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x518 (_ bv2 32))) ?x522))))
 (let ((?x508 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x510 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x513 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x516 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x507 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x423 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x424 (concat ?x423 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x426 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x73 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x362 (bvadd ?x73 (_ bv3 32))))
 (let ((?x429 (concat (select input.dst.llvm-mem ?x362) (concat ?x426 ?x424))))
 (let (($x529 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x429 ?x507 false (concat ?x516 (concat ?x513 (concat ?x510 ?x508))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x528)))
 (let (($x478 (= $x529 true)))
 (let (($x479 (= $x478 true)))
 (let ((?x251 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x252 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x277 (concat ?x231 (concat ?x377 (concat ?x252 ?x251)))))
 (let (($x443 (= ?x277 input.dst.llvm-%l)))
 (let (($x444 (= $x443 true)))
 (let (($x445 (= $x444 true)))
 (let (($x431 (= (bvand ?x429 (_ bv4294967288 32)) ?x429)))
 (let (($x420 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x432 (and $x420 $x431)))
 (let (($x416 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x417 (and true $x416)))
 (let (($x367 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv4 32))) (bvult ?x73 (bvsub ?x73 (_ bv4 32))))))
 (let (($x435 (and (and (and $x367 $x417) $x420) $x432)))
 (let (($x436 (= true $x435)))
 (let (($x13 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x108 (not $x13)))
 (let (($x437 (=> $x108 $x436)))
 (let (($x330 (= input.dst.llvm-%l ?x277)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x111)))
 (let ((?x358 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x361 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x358)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (and $x345 $x361)))
 (let (($x181 (and $x116 $x171)))
 (let (($x342 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x342 $x181)))
 (let (($x325 (and $x184 $x330)))
 (let (($x11 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x323 (and $x11 $x325)))
 (let (($x369 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x338 (=> $x369 true)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x322 (concat ?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x320 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x279 (ite (= (_ bv0 32) (concat ?x44 (concat ?x320 ?x322))) (_ bv0 32) (_ bv1 32))))
 (let (($x280 (= $x369 (bvuge ?x279 (_ bv1 32)))))
 (let (($x150 (= false false)))
 (let (($x135 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x88 (=> $x135 $x150)))
 (let (($x229 (= $x135 (= ?x279 (_ bv0 32)))))
 (let (($x263 (and $x229 $x88)))
 (let (($x281 (and $x263 $x280)))
 (let (($x343 (and $x281 $x338)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x179)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x137)))
 (let (($x236 (= input.spec-%var-l-0.2.0 ?x306)))
 (let (($x341 (and $x236 $x343)))
 (let (($x396 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x339 (=> $x396 $x341)))
 (let (($x389 (= $x396 (bvuge (ite $x13 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x365 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x399 (=> $x365 $x150)))
 (let (($x397 (= $x365 (= (ite $x13 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x395 (and $x397 $x399)))
 (let (($x379 (and $x395 $x389)))
 (let (($x335 (and $x379 $x339)))
 (let (($x350 (and $x335 $x323)))
 (let (($x438 (and $x350 $x437)))
 (let (($x439 (= $x438 true)))
 (let (($x440 (= $x439 true)))
 (let (($x441 (= $x440 true)))
 (let (($x85 (= $x108 true)))
 (let (($x86 (= $x85 true)))
 (let (($x99 (= $x86 true)))
 (let (($x68 (= $x11 true)))
 (let (($x69 (= $x68 true)))
 (let (($x80 (= $x69 true)))
 (let (($x100 (and $x80 $x99)))
 (let (($x442 (and $x100 $x441)))
 (let (($x446 (and $x442 $x445)))
 (let (($x447 (and $x396 $x446)))
 (let (($x448 (and $x150 $x447)))
 (let (($x51 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x123 (=> $x51 true)))
 (let (($x219 (= $x51 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x287 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x348 (=> $x287 $x150)))
 (let (($x324 (= $x287 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x334 (and $x324 $x348)))
 (let (($x38 (and $x334 $x219)))
 (let (($x140 (and $x38 $x123)))
 (let (($x245 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x152 (and $x245 $x140)))
 (let (($x156 (=> $x369 $x152)))
 (let (($x284 (= $x369 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x288 (= $x135 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x93 (and $x288 $x88)))
 (let (($x25 (and $x93 $x284)))
 (let (($x145 (and $x25 $x156)))
 (let (($x449 (and $x145 $x448)))
 (let (($x53 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 input.spec-%var-node-0.L1%9%bbentry.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 false smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0)))
 (let (($x103 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x33 (and $x103 $x53)))
 (let (($x32 (=> $x369 $x33)))
 (let (($x35 (= $x369 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x89 (= $x135 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x95 (and $x89 $x88)))
 (let (($x12 (and $x95 $x35)))
 (let (($x225 (and $x12 $x32)))
 (let (($x94 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x154 (and $x94 $x225)))
 (let (($x450 (and $x154 $x449)))
 (let (($x121 (= $x51 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x346 (= $x287 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x7 (and $x346 $x348)))
 (let (($x117 (and $x7 $x121)))
 (let (($x10 (and $x117 $x123)))
 (let (($x248 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x122 (and $x248 $x10)))
 (let (($x50 (=> $x369 $x122)))
 (let (($x180 (= $x369 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x274 (= $x135 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x114 (and $x274 $x88)))
 (let (($x326 (and $x114 $x180)))
 (let (($x105 (and $x326 $x50)))
 (let (($x451 (and $x105 $x450)))
 (let (($x169 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x452 (and $x169 $x451)))
 (let (($x109 (bvugt ?x73 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x362)))
 (let (($x20 (=> (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x109)))))))
 (let (($x363 (=> (and $x108 (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x41 $x109)))))))
 (let (($x453 (and $x363 $x452)))
 (let (($x480 (=> $x453 $x479)))
 (not $x480))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x518 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x522 (concat (select input.dst.llvm-mem (bvadd ?x518 (_ bv1 32))) (select input.dst.llvm-mem ?x518))))
 (let ((?x528 (concat (select input.dst.llvm-mem (bvadd ?x518 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x518 (_ bv2 32))) ?x522))))
 (let ((?x508 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x510 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x513 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x516 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x507 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x423 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x424 (concat ?x423 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x426 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x73 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x362 (bvadd ?x73 (_ bv3 32))))
 (let ((?x429 (concat (select input.dst.llvm-mem ?x362) (concat ?x426 ?x424))))
 (let (($x529 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x429 ?x507 false (concat ?x516 (concat ?x513 (concat ?x510 ?x508))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x528)))
 (let (($x478 (= $x529 true)))
 (let (($x479 (= $x478 true)))
 (let ((?x251 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x252 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x277 (concat ?x231 (concat ?x377 (concat ?x252 ?x251)))))
 (let (($x443 (= ?x277 input.dst.llvm-%l)))
 (let (($x444 (= $x443 true)))
 (let (($x445 (= $x444 true)))
 (let (($x431 (= (bvand ?x429 (_ bv4294967288 32)) ?x429)))
 (let (($x420 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x432 (and $x420 $x431)))
 (let (($x416 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x417 (and true $x416)))
 (let (($x367 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv4 32))) (bvult ?x73 (bvsub ?x73 (_ bv4 32))))))
 (let (($x435 (and (and (and $x367 $x417) $x420) $x432)))
 (let (($x436 (= true $x435)))
 (let (($x13 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x108 (not $x13)))
 (let (($x437 (=> $x108 $x436)))
 (let (($x330 (= input.dst.llvm-%l ?x277)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x111)))
 (let ((?x358 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x361 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x358)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (and $x345 $x361)))
 (let (($x181 (and $x116 $x171)))
 (let (($x342 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x342 $x181)))
 (let (($x325 (and $x184 $x330)))
 (let (($x11 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x323 (and $x11 $x325)))
 (let (($x369 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x338 (=> $x369 true)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x322 (concat ?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x320 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x279 (ite (= (_ bv0 32) (concat ?x44 (concat ?x320 ?x322))) (_ bv0 32) (_ bv1 32))))
 (let (($x280 (= $x369 (bvuge ?x279 (_ bv1 32)))))
 (let (($x150 (= false false)))
 (let (($x135 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x88 (=> $x135 $x150)))
 (let (($x229 (= $x135 (= ?x279 (_ bv0 32)))))
 (let (($x263 (and $x229 $x88)))
 (let (($x281 (and $x263 $x280)))
 (let (($x343 (and $x281 $x338)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x179)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x137)))
 (let (($x236 (= input.spec-%var-l-0.2.0 ?x306)))
 (let (($x341 (and $x236 $x343)))
 (let (($x396 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x339 (=> $x396 $x341)))
 (let (($x389 (= $x396 (bvuge (ite $x13 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x365 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x399 (=> $x365 $x150)))
 (let (($x397 (= $x365 (= (ite $x13 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x395 (and $x397 $x399)))
 (let (($x379 (and $x395 $x389)))
 (let (($x335 (and $x379 $x339)))
 (let (($x350 (and $x335 $x323)))
 (let (($x438 (and $x350 $x437)))
 (let (($x439 (= $x438 true)))
 (let (($x440 (= $x439 true)))
 (let (($x441 (= $x440 true)))
 (let (($x85 (= $x108 true)))
 (let (($x86 (= $x85 true)))
 (let (($x99 (= $x86 true)))
 (let (($x68 (= $x11 true)))
 (let (($x69 (= $x68 true)))
 (let (($x80 (= $x69 true)))
 (let (($x100 (and $x80 $x99)))
 (let (($x442 (and $x100 $x441)))
 (let (($x446 (and $x442 $x445)))
 (let (($x447 (and $x396 $x446)))
 (let (($x448 (and $x150 $x447)))
 (let (($x51 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x123 (=> $x51 true)))
 (let (($x219 (= $x51 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x287 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x348 (=> $x287 $x150)))
 (let (($x324 (= $x287 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x334 (and $x324 $x348)))
 (let (($x38 (and $x334 $x219)))
 (let (($x140 (and $x38 $x123)))
 (let (($x245 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x152 (and $x245 $x140)))
 (let (($x156 (=> $x369 $x152)))
 (let (($x284 (= $x369 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x288 (= $x135 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x93 (and $x288 $x88)))
 (let (($x25 (and $x93 $x284)))
 (let (($x145 (and $x25 $x156)))
 (let (($x449 (and $x145 $x448)))
 (let (($x53 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 input.spec-%var-node-0.L1%9%bbentry.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 false smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0)))
 (let (($x103 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x33 (and $x103 $x53)))
 (let (($x32 (=> $x369 $x33)))
 (let (($x35 (= $x369 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x89 (= $x135 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x95 (and $x89 $x88)))
 (let (($x12 (and $x95 $x35)))
 (let (($x225 (and $x12 $x32)))
 (let (($x94 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x154 (and $x94 $x225)))
 (let (($x450 (and $x154 $x449)))
 (let (($x121 (= $x51 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x346 (= $x287 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x7 (and $x346 $x348)))
 (let (($x117 (and $x7 $x121)))
 (let (($x10 (and $x117 $x123)))
 (let (($x248 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x122 (and $x248 $x10)))
 (let (($x50 (=> $x369 $x122)))
 (let (($x180 (= $x369 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x274 (= $x135 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x114 (and $x274 $x88)))
 (let (($x326 (and $x114 $x180)))
 (let (($x105 (and $x326 $x50)))
 (let (($x451 (and $x105 $x450)))
 (let (($x169 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x452 (and $x169 $x451)))
 (let (($x109 (bvugt ?x73 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x362)))
 (let (($x20 (=> (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x109)))))))
 (let (($x363 (=> (and $x108 (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x41 $x109)))))))
 (let (($x453 (and $x363 $x452)))
 (let (($x480 (=> $x453 $x479)))
 (not $x480))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 #b00000000000000000000000000000000)
(= smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_40)
(= input.dst.llvm-mem @fun_37)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc @fun_42)
(function @fun_40
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (default false))
(function @fun_37
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_37 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
(function @fun_42
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_42 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 false #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_13032 (_ BitVec 32)) (BOUND_VARIABLE_13033 (_ BitVec 32)) (BOUND_VARIABLE_13034 (_ BitVec 32)) (BOUND_VARIABLE_13035 Bool) (BOUND_VARIABLE_13036 (_ BitVec 32)) (BOUND_VARIABLE_13037 (_ BitVec 32)) (BOUND_VARIABLE_13038 (_ BitVec 32)) (BOUND_VARIABLE_13039 (_ BitVec 32)) (BOUND_VARIABLE_13040 (_ BitVec 32)) (BOUND_VARIABLE_13041 (_ BitVec 32)) (BOUND_VARIABLE_13042 Bool) (BOUND_VARIABLE_13043 (_ BitVec 32)) (BOUND_VARIABLE_13044 (_ BitVec 32)) (BOUND_VARIABLE_13045 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4290652428 32) (_ bv64 8)) (_ bv4290652429 32) (_ bv4 8)) (_ bv4290652430 32) (_ bv128 8)) (_ bv4290652431 32) (_ bv4 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv75498560 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4290652428 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4290652428 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4290652431 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc ((BOUND_VARIABLE_13032 (_ BitVec 32)) (BOUND_VARIABLE_13033 (_ BitVec 32)) (BOUND_VARIABLE_13034 (_ BitVec 32)) (BOUND_VARIABLE_13035 Bool) (BOUND_VARIABLE_13036 (_ BitVec 32)) (BOUND_VARIABLE_13037 (_ BitVec 32)) (BOUND_VARIABLE_13038 (_ BitVec 32)) (BOUND_VARIABLE_13039 (_ BitVec 32)) (BOUND_VARIABLE_13040 (_ BitVec 32)) (BOUND_VARIABLE_13041 (_ BitVec 32)) (BOUND_VARIABLE_13042 Bool) (BOUND_VARIABLE_13043 (_ BitVec 32)) (BOUND_VARIABLE_13044 (_ BitVec 32)) (BOUND_VARIABLE_13045 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x10100010)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x1010000f)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x10)
              #x10100013
              #x90)
       #x10100013
       #x90))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x10101010)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x10101010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x10100013)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x10101010)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x90101010)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x10100010)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x1010000f)
              (= x!8 #x10101010)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x10101010)
              (= x!12 #x1010000f)
              (= x!13 #x10101090))
      false
      false))
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00000000)
              (= x!13 #x00000000))
      true
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708107/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x329 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x92 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x98))))
 (let ((?x321 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x292 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x357 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x336 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x63 (concat ?x336 (concat ?x357 (concat ?x292 ?x321)))))
 (let ((?x302 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x303 (concat ?x302 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x180 (bvadd ?x56 (_ bv3 32))))
 (let ((?x455 (concat (select input.dst.llvm-mem ?x180) (concat ?x106 ?x303))))
 (let (($x601 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x455 ?x63 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x337 ?x329 false)))
 (let (($x121 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x574 (=> $x121 $x601)))
 (let (($x548 (= $x121 (bvuge (ite (= (_ bv0 32) ?x455) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x150 (= false false)))
 (let (($x254 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x287 (=> $x254 $x150)))
 (let (($x541 (= $x254 (= (ite (= (_ bv0 32) ?x455) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x542 (and $x541 $x287)))
 (let (($x549 (and $x542 $x548)))
 (let (($x575 (and $x549 $x574)))
 (let (($x576 (= $x575 true)))
 (let (($x589 (= $x576 true)))
 (let ((?x307 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x305 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x297 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x293 (concat ?x297 (concat ?x14 (concat ?x305 ?x307)))))
 (let (($x465 (= ?x293 input.dst.llvm-%l)))
 (let (($x461 (= $x465 true)))
 (let (($x462 (= $x461 true)))
 (let (($x467 (= (bvand ?x455 (_ bv4294967288 32)) ?x455)))
 (let (($x222 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x475 (and $x222 $x467)))
 (let (($x360 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x173 (and true $x360)))
 (let (($x77 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x473 (and (and (and $x77 $x173) $x222) $x475)))
 (let (($x469 (= true $x473)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x13 (not $x18)))
 (let (($x470 (=> $x13 $x469)))
 (let (($x62 (= input.dst.llvm-%l ?x293)))
 (let ((?x271 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x272 (= (_ bv0 32) ?x271)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x261)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x75 $x270)))
 (let (($x276 (and $x70 $x272)))
 (let (($x294 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x294 $x276)))
 (let (($x83 (and $x241 $x62)))
 (let (($x277 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x84 (and $x277 $x83)))
 (let ((?x403 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x404 (concat ?x403 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x388 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x392 (concat ?x383 (concat ?x388 ?x404))))
 (let (($x110 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x392 ?x63 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x337 ?x329 false)))
 (let (($x201 (=> $x121 $x110)))
 (let (($x243 (= $x121 (bvuge (ite (= (_ bv0 32) ?x392) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x28 (= $x254 (= (ite (= (_ bv0 32) ?x392) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x224 (and $x28 $x287)))
 (let (($x228 (and $x224 $x243)))
 (let (($x266 (and $x228 $x201)))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x298)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x134)))
 (let (($x31 (= input.spec-%var-l-0.2.0 ?x36)))
 (let (($x235 (and $x31 $x266)))
 (let (($x529 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x372 (=> $x529 $x235)))
 (let (($x479 (= $x529 (bvuge (ite $x18 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x526 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x520 (=> $x526 $x150)))
 (let (($x524 (= $x526 (= (ite $x18 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x521 (and $x524 $x520)))
 (let (($x480 (and $x521 $x479)))
 (let (($x275 (and $x480 $x372)))
 (let (($x78 (and $x275 $x84)))
 (let (($x468 (and $x78 $x470)))
 (let (($x471 (= $x468 true)))
 (let (($x474 (= $x471 true)))
 (let (($x477 (= $x474 true)))
 (let (($x350 (= $x13 true)))
 (let (($x352 (= $x350 true)))
 (let (($x351 (= $x352 true)))
 (let (($x330 (= $x277 true)))
 (let (($x325 (= $x330 true)))
 (let (($x323 (= $x325 true)))
 (let (($x354 (and $x323 $x351)))
 (let (($x464 (and $x354 $x477)))
 (let (($x458 (and $x464 $x462)))
 (let (($x459 (and $x529 $x458)))
 (let (($x457 (and $x150 $x459)))
 (let (($x242 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.spec-%tmpvar-0.L1%9%bbentry.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 false)))
 (let (($x288 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x148 (=> $x288 $x242)))
 (let (($x116 (= $x288 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x205 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x225 (=> $x205 $x150)))
 (let (($x335 (= $x205 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x345 (and $x335 $x225)))
 (let (($x111 (and $x345 $x116)))
 (let (($x231 (and $x111 $x148)))
 (let (($x347 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x181 (and $x347 $x231)))
 (let (($x184 (=> $x121 $x181)))
 (let (($x286 (= $x121 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x234 (= $x254 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x213 (and $x234 $x287)))
 (let (($x289 (and $x213 $x286)))
 (let (($x256 (and $x289 $x184)))
 (let (($x460 (and $x256 $x457)))
 (let (($x172 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x161 (and $x172 true)))
 (let (($x179 (=> $x121 $x161)))
 (let (($x315 (= $x121 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x396 (= $x254 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x400 (and $x396 $x287)))
 (let (($x316 (and $x400 $x315)))
 (let (($x137 (and $x316 $x179)))
 (let (($x6 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x306 (and $x6 $x137)))
 (let (($x463 (and $x306 $x460)))
 (let (($x219 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.spec-%var-node_next-0.L1%9%bbentry.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 false)))
 (let (($x334 (=> $x288 $x219)))
 (let (($x67 (= $x288 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x268 (= $x205 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x154 (and $x268 $x225)))
 (let (($x284 (and $x154 $x67)))
 (let (($x115 (and $x284 $x334)))
 (let (($x12 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x328 (and $x12 $x115)))
 (let (($x324 (=> $x121 $x328)))
 (let (($x168 (= $x121 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x348 (= $x254 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x57 (and $x348 $x287)))
 (let (($x135 (and $x57 $x168)))
 (let (($x140 (and $x135 $x324)))
 (let (($x466 (and $x140 $x463)))
 (let (($x114 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x482 (and $x114 $x466)))
 (let (($x118 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x88 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x118)))))))
 (let (($x368 (=> (and $x13 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x109 $x118)))))))
 (let (($x493 (and $x368 $x482)))
 (let (($x597 (=> $x493 $x589)))
 (not $x597))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x329 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x92 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x98))))
 (let ((?x321 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x292 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x357 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x336 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x63 (concat ?x336 (concat ?x357 (concat ?x292 ?x321)))))
 (let ((?x302 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x303 (concat ?x302 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x180 (bvadd ?x56 (_ bv3 32))))
 (let ((?x455 (concat (select input.dst.llvm-mem ?x180) (concat ?x106 ?x303))))
 (let (($x601 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x455 ?x63 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x337 ?x329 false)))
 (let (($x121 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x574 (=> $x121 $x601)))
 (let (($x548 (= $x121 (bvuge (ite (= (_ bv0 32) ?x455) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x150 (= false false)))
 (let (($x254 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x287 (=> $x254 $x150)))
 (let (($x541 (= $x254 (= (ite (= (_ bv0 32) ?x455) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x542 (and $x541 $x287)))
 (let (($x549 (and $x542 $x548)))
 (let (($x575 (and $x549 $x574)))
 (let (($x576 (= $x575 true)))
 (let (($x589 (= $x576 true)))
 (let ((?x307 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x305 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x297 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x293 (concat ?x297 (concat ?x14 (concat ?x305 ?x307)))))
 (let (($x465 (= ?x293 input.dst.llvm-%l)))
 (let (($x461 (= $x465 true)))
 (let (($x462 (= $x461 true)))
 (let (($x467 (= (bvand ?x455 (_ bv4294967288 32)) ?x455)))
 (let (($x222 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x475 (and $x222 $x467)))
 (let (($x360 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x173 (and true $x360)))
 (let (($x77 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x473 (and (and (and $x77 $x173) $x222) $x475)))
 (let (($x469 (= true $x473)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x13 (not $x18)))
 (let (($x470 (=> $x13 $x469)))
 (let (($x62 (= input.dst.llvm-%l ?x293)))
 (let ((?x271 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x272 (= (_ bv0 32) ?x271)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x261)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x75 $x270)))
 (let (($x276 (and $x70 $x272)))
 (let (($x294 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x294 $x276)))
 (let (($x83 (and $x241 $x62)))
 (let (($x277 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x84 (and $x277 $x83)))
 (let ((?x403 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x404 (concat ?x403 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x388 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x392 (concat ?x383 (concat ?x388 ?x404))))
 (let (($x110 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x392 ?x63 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x337 ?x329 false)))
 (let (($x201 (=> $x121 $x110)))
 (let (($x243 (= $x121 (bvuge (ite (= (_ bv0 32) ?x392) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x28 (= $x254 (= (ite (= (_ bv0 32) ?x392) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x224 (and $x28 $x287)))
 (let (($x228 (and $x224 $x243)))
 (let (($x266 (and $x228 $x201)))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x298)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x134)))
 (let (($x31 (= input.spec-%var-l-0.2.0 ?x36)))
 (let (($x235 (and $x31 $x266)))
 (let (($x529 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x372 (=> $x529 $x235)))
 (let (($x479 (= $x529 (bvuge (ite $x18 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x526 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x520 (=> $x526 $x150)))
 (let (($x524 (= $x526 (= (ite $x18 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x521 (and $x524 $x520)))
 (let (($x480 (and $x521 $x479)))
 (let (($x275 (and $x480 $x372)))
 (let (($x78 (and $x275 $x84)))
 (let (($x468 (and $x78 $x470)))
 (let (($x471 (= $x468 true)))
 (let (($x474 (= $x471 true)))
 (let (($x477 (= $x474 true)))
 (let (($x350 (= $x13 true)))
 (let (($x352 (= $x350 true)))
 (let (($x351 (= $x352 true)))
 (let (($x330 (= $x277 true)))
 (let (($x325 (= $x330 true)))
 (let (($x323 (= $x325 true)))
 (let (($x354 (and $x323 $x351)))
 (let (($x464 (and $x354 $x477)))
 (let (($x458 (and $x464 $x462)))
 (let (($x459 (and $x529 $x458)))
 (let (($x457 (and $x150 $x459)))
 (let (($x242 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.spec-%tmpvar-0.L1%9%bbentry.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 false)))
 (let (($x288 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x148 (=> $x288 $x242)))
 (let (($x116 (= $x288 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x205 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x225 (=> $x205 $x150)))
 (let (($x335 (= $x205 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x345 (and $x335 $x225)))
 (let (($x111 (and $x345 $x116)))
 (let (($x231 (and $x111 $x148)))
 (let (($x347 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x181 (and $x347 $x231)))
 (let (($x184 (=> $x121 $x181)))
 (let (($x286 (= $x121 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x234 (= $x254 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x213 (and $x234 $x287)))
 (let (($x289 (and $x213 $x286)))
 (let (($x256 (and $x289 $x184)))
 (let (($x460 (and $x256 $x457)))
 (let (($x172 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x161 (and $x172 true)))
 (let (($x179 (=> $x121 $x161)))
 (let (($x315 (= $x121 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x396 (= $x254 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x400 (and $x396 $x287)))
 (let (($x316 (and $x400 $x315)))
 (let (($x137 (and $x316 $x179)))
 (let (($x6 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x306 (and $x6 $x137)))
 (let (($x463 (and $x306 $x460)))
 (let (($x219 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.spec-%var-node_next-0.L1%9%bbentry.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 false)))
 (let (($x334 (=> $x288 $x219)))
 (let (($x67 (= $x288 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x268 (= $x205 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x154 (and $x268 $x225)))
 (let (($x284 (and $x154 $x67)))
 (let (($x115 (and $x284 $x334)))
 (let (($x12 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x328 (and $x12 $x115)))
 (let (($x324 (=> $x121 $x328)))
 (let (($x168 (= $x121 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x348 (= $x254 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x57 (and $x348 $x287)))
 (let (($x135 (and $x57 $x168)))
 (let (($x140 (and $x135 $x324)))
 (let (($x466 (and $x140 $x463)))
 (let (($x114 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x482 (and $x114 $x466)))
 (let (($x118 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x88 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x118)))))))
 (let (($x368 (=> (and $x13 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x109 $x118)))))))
 (let (($x493 (and $x368 $x482)))
 (let (($x597 (=> $x493 $x589)))
 (not $x597))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708107/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x358 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv1 32))) (select input.dst.llvm-mem ?x358))))
 (let ((?x397 (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv2 32))) ?x361))))
 (let ((?x283 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x280 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x311 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x279 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x389 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x279 false (concat ?x262 (concat ?x311 (concat ?x280 ?x283))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x397)))
 (let (($x73 (= $x389 true)))
 (let (($x240 (= $x73 true)))
 (let ((?x402 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x390 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x60 (concat ?x216 (concat ?x390 ?x402)))))
 (let (($x212 (= ?x119 input.dst.llvm-%l)))
 (let (($x247 (= $x212 true)))
 (let (($x313 (= $x247 true)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x45 (concat ?x24 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x364 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x274 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x249 (bvadd ?x274 (_ bv3 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem ?x249) (concat ?x364 ?x45))))
 (let (($x370 (= (bvand ?x141 (_ bv4294967288 32)) ?x141)))
 (let (($x371 (= (bvand ?x274 (_ bv4294967292 32)) ?x274)))
 (let (($x233 (and $x371 $x370)))
 (let (($x29 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x185 (and true $x29)))
 (let (($x167 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x274 (bvsub ?x274 (_ bv4 32))) (bvult ?x274 (bvsub ?x274 (_ bv4 32))))))
 (let (($x103 (and (and (and $x167 $x185) $x371) $x233)))
 (let (($x50 (= true $x103)))
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x87 (not $x56)))
 (let (($x41 (=> $x87 $x50)))
 (let (($x130 (= input.dst.llvm-%l ?x119)))
 (let ((?x199 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x199)))
 (let ((?x232 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x232)))
 (let (($x378 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x378 $x193)))
 (let (($x398 (and $x139 $x194)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x382 (and $x66 $x398)))
 (let (($x380 (and $x382 $x130)))
 (let (($x162 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x127 (and $x162 $x380)))
 (let (($x145 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x144 (=> $x145 true)))
 (let ((?x508 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x511 (concat ?x508 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x517 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x525 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x125 (ite (= (_ bv0 32) (concat ?x525 (concat ?x517 ?x511))) (_ bv0 32) (_ bv1 32))))
 (let (($x146 (= $x145 (bvuge ?x125 (_ bv1 32)))))
 (let (($x225 (= false false)))
 (let (($x33 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x154 (=> $x33 $x225)))
 (let (($x444 (= $x33 (= ?x125 (_ bv0 32)))))
 (let (($x445 (and $x444 $x154)))
 (let (($x332 (and $x445 $x146)))
 (let (($x61 (and $x332 $x144)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x236)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x86)))
 (let (($x421 (= input.spec-%var-l-0.2.0 ?x94)))
 (let (($x178 (and $x421 $x61)))
 (let (($x461 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x120 (=> $x461 $x178)))
 (let (($x458 (= $x461 (bvuge (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x475 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x468 (=> $x475 $x225)))
 (let (($x470 (= $x475 (= (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x471 (and $x470 $x468)))
 (let (($x459 (and $x471 $x458)))
 (let (($x326 (and $x459 $x120)))
 (let (($x23 (and $x326 $x127)))
 (let (($x37 (and $x23 $x41)))
 (let (($x76 (= $x37 true)))
 (let (($x74 (= $x76 true)))
 (let (($x215 (= $x74 true)))
 (let (($x26 (= $x56 true)))
 (let (($x98 (= $x26 true)))
 (let (($x295 (= $x98 true)))
 (let (($x300 (= $x162 true)))
 (let (($x5 (= $x300 true)))
 (let (($x48 (= $x5 true)))
 (let (($x337 (and $x48 $x295)))
 (let (($x250 (and $x337 $x215)))
 (let (($x309 (and $x250 $x313)))
 (let (($x214 (and $x461 $x309)))
 (let (($x304 (and $x225 $x214)))
 (let (($x234 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x347 (=> $x234 true)))
 (let (($x49 (= $x234 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x315 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x137 (=> $x315 $x225)))
 (let (($x228 (= $x315 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x336 (and $x228 $x137)))
 (let (($x292 (and $x336 $x49)))
 (let (($x357 (and $x292 $x347)))
 (let (($x385 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x321 (and $x385 $x357)))
 (let (($x278 (=> $x145 $x321)))
 (let (($x196 (= $x145 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x208 (= $x33 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x384 (and $x208 $x154)))
 (let (($x403 (and $x384 $x196)))
 (let (($x273 (and $x403 $x278)))
 (let (($x267 (and $x273 $x304)))
 (let (($x529 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 input.spec-%var-node-0.L1%9%bbentry.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 false smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0)))
 (let (($x354 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x523 (and $x354 $x529)))
 (let (($x524 (=> $x145 $x523)))
 (let (($x325 (= $x145 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x256 (= $x33 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x257 (and $x256 $x154)))
 (let (($x323 (and $x257 $x325)))
 (let (($x520 (and $x323 $x524)))
 (let (($x111 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x521 (and $x111 $x520)))
 (let (($x200 (and $x521 $x267)))
 (let (($x223 (= $x234 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x316 (= $x315 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x306 (and $x316 $x137)))
 (let (($x286 (and $x306 $x223)))
 (let (($x341 (and $x286 $x347)))
 (let (($x328 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x289 (and $x328 $x341)))
 (let (($x263 (=> $x145 $x289)))
 (let (($x152 (= $x145 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x268 (= $x33 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x288 (and $x268 $x154)))
 (let (($x151 (and $x288 $x152)))
 (let (($x339 (and $x151 $x263)))
 (let (($x226 (and $x339 $x200)))
 (let (($x287 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x239 (and $x287 $x226)))
 (let (($x369 (bvugt ?x274 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x344 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x249)))
 (let (($x114 (=> (bvule ?x274 (bvsub (bvadd ?x274 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x344 $x369)))))))
 (let (($x128 (=> (and $x87 (bvule ?x274 (bvsub (bvadd ?x274 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x344 $x369)))))))
 (let (($x133 (and $x128 $x239)))
 (let (($x244 (=> $x133 $x240)))
 (not $x244))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x358 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv1 32))) (select input.dst.llvm-mem ?x358))))
 (let ((?x397 (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv2 32))) ?x361))))
 (let ((?x283 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x280 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x311 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x279 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x389 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x279 false (concat ?x262 (concat ?x311 (concat ?x280 ?x283))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x397)))
 (let (($x73 (= $x389 true)))
 (let (($x240 (= $x73 true)))
 (let ((?x402 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x390 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x60 (concat ?x216 (concat ?x390 ?x402)))))
 (let (($x212 (= ?x119 input.dst.llvm-%l)))
 (let (($x247 (= $x212 true)))
 (let (($x313 (= $x247 true)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x45 (concat ?x24 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x364 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x274 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x249 (bvadd ?x274 (_ bv3 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem ?x249) (concat ?x364 ?x45))))
 (let (($x370 (= (bvand ?x141 (_ bv4294967288 32)) ?x141)))
 (let (($x371 (= (bvand ?x274 (_ bv4294967292 32)) ?x274)))
 (let (($x233 (and $x371 $x370)))
 (let (($x29 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x185 (and true $x29)))
 (let (($x167 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x274 (bvsub ?x274 (_ bv4 32))) (bvult ?x274 (bvsub ?x274 (_ bv4 32))))))
 (let (($x103 (and (and (and $x167 $x185) $x371) $x233)))
 (let (($x50 (= true $x103)))
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x87 (not $x56)))
 (let (($x41 (=> $x87 $x50)))
 (let (($x130 (= input.dst.llvm-%l ?x119)))
 (let ((?x199 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x199)))
 (let ((?x232 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x232)))
 (let (($x378 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x378 $x193)))
 (let (($x398 (and $x139 $x194)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x382 (and $x66 $x398)))
 (let (($x380 (and $x382 $x130)))
 (let (($x162 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x127 (and $x162 $x380)))
 (let (($x145 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x144 (=> $x145 true)))
 (let ((?x508 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x511 (concat ?x508 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x517 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x525 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x125 (ite (= (_ bv0 32) (concat ?x525 (concat ?x517 ?x511))) (_ bv0 32) (_ bv1 32))))
 (let (($x146 (= $x145 (bvuge ?x125 (_ bv1 32)))))
 (let (($x225 (= false false)))
 (let (($x33 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x154 (=> $x33 $x225)))
 (let (($x444 (= $x33 (= ?x125 (_ bv0 32)))))
 (let (($x445 (and $x444 $x154)))
 (let (($x332 (and $x445 $x146)))
 (let (($x61 (and $x332 $x144)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x236)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x86)))
 (let (($x421 (= input.spec-%var-l-0.2.0 ?x94)))
 (let (($x178 (and $x421 $x61)))
 (let (($x461 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x120 (=> $x461 $x178)))
 (let (($x458 (= $x461 (bvuge (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x475 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x468 (=> $x475 $x225)))
 (let (($x470 (= $x475 (= (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x471 (and $x470 $x468)))
 (let (($x459 (and $x471 $x458)))
 (let (($x326 (and $x459 $x120)))
 (let (($x23 (and $x326 $x127)))
 (let (($x37 (and $x23 $x41)))
 (let (($x76 (= $x37 true)))
 (let (($x74 (= $x76 true)))
 (let (($x215 (= $x74 true)))
 (let (($x26 (= $x56 true)))
 (let (($x98 (= $x26 true)))
 (let (($x295 (= $x98 true)))
 (let (($x300 (= $x162 true)))
 (let (($x5 (= $x300 true)))
 (let (($x48 (= $x5 true)))
 (let (($x337 (and $x48 $x295)))
 (let (($x250 (and $x337 $x215)))
 (let (($x309 (and $x250 $x313)))
 (let (($x214 (and $x461 $x309)))
 (let (($x304 (and $x225 $x214)))
 (let (($x234 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x347 (=> $x234 true)))
 (let (($x49 (= $x234 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x315 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x137 (=> $x315 $x225)))
 (let (($x228 (= $x315 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x336 (and $x228 $x137)))
 (let (($x292 (and $x336 $x49)))
 (let (($x357 (and $x292 $x347)))
 (let (($x385 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x321 (and $x385 $x357)))
 (let (($x278 (=> $x145 $x321)))
 (let (($x196 (= $x145 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x208 (= $x33 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x384 (and $x208 $x154)))
 (let (($x403 (and $x384 $x196)))
 (let (($x273 (and $x403 $x278)))
 (let (($x267 (and $x273 $x304)))
 (let (($x529 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 input.spec-%var-node-0.L1%9%bbentry.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 false smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0)))
 (let (($x354 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x523 (and $x354 $x529)))
 (let (($x524 (=> $x145 $x523)))
 (let (($x325 (= $x145 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x256 (= $x33 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x257 (and $x256 $x154)))
 (let (($x323 (and $x257 $x325)))
 (let (($x520 (and $x323 $x524)))
 (let (($x111 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x521 (and $x111 $x520)))
 (let (($x200 (and $x521 $x267)))
 (let (($x223 (= $x234 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x316 (= $x315 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x306 (and $x316 $x137)))
 (let (($x286 (and $x306 $x223)))
 (let (($x341 (and $x286 $x347)))
 (let (($x328 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x289 (and $x328 $x341)))
 (let (($x263 (=> $x145 $x289)))
 (let (($x152 (= $x145 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x268 (= $x33 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x288 (and $x268 $x154)))
 (let (($x151 (and $x288 $x152)))
 (let (($x339 (and $x151 $x263)))
 (let (($x226 (and $x339 $x200)))
 (let (($x287 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x239 (and $x287 $x226)))
 (let (($x369 (bvugt ?x274 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x344 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x249)))
 (let (($x114 (=> (bvule ?x274 (bvsub (bvadd ?x274 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x344 $x369)))))))
 (let (($x128 (=> (and $x87 (bvule ?x274 (bvsub (bvadd ?x274 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x344 $x369)))))))
 (let (($x133 (and $x128 $x239)))
 (let (($x244 (=> $x133 $x240)))
 (not $x244))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708107/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x488 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x282))))
 (let ((?x187 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x253 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x411 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x67 (concat ?x93 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x64 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x355 (bvadd ?x64 (_ bv3 32))))
 (let ((?x264 (concat (select input.dst.llvm-mem ?x355) (concat ?x71 ?x67))))
 (let (($x531 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x264 ?x411 false (concat ?x253 (concat ?x221 (concat ?x149 ?x187))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x488)))
 (let (($x399 (= $x531 true)))
 (let (($x395 (= $x399 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x412 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x426 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x441 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x431 (concat ?x441 (concat ?x426 (concat ?x412 ?x82)))))
 (let (($x134 (= ?x431 input.dst.llvm-%l)))
 (let (($x383 (= $x134 true)))
 (let (($x387 (= $x383 true)))
 (let (($x101 (= (bvand ?x264 (_ bv4294967288 32)) ?x264)))
 (let (($x11 (= (bvand ?x64 (_ bv4294967292 32)) ?x64)))
 (let (($x124 (and $x11 $x101)))
 (let (($x420 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x433 (and true $x420)))
 (let (($x437 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x64 (bvsub ?x64 (_ bv4 32))) (bvult ?x64 (bvsub ?x64 (_ bv4 32))))))
 (let (($x126 (and (and (and $x437 $x433) $x11) $x124)))
 (let (($x406 (= true $x126)))
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x87 (not $x56)))
 (let (($x376 (=> $x87 $x406)))
 (let (($x436 (= input.dst.llvm-%l ?x431)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x248)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x423 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let (($x447 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x413 (and $x447 $x423)))
 (let (($x367 (and $x413 $x30)))
 (let (($x510 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x510 $x367)))
 (let (($x429 (and $x220 $x436)))
 (let (($x195 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x430 (and $x195 $x429)))
 (let (($x263 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x451 (=> $x263 true)))
 (let ((?x597 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x574 (concat ?x597 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x601 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x493 (ite (= (_ bv0 32) (concat ?x252 (concat ?x601 ?x574))) (_ bv0 32) (_ bv1 32))))
 (let (($x515 (= $x263 (bvuge ?x493 (_ bv1 32)))))
 (let (($x137 (= false false)))
 (let (($x161 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x306 (=> $x161 $x137)))
 (let (($x465 (= $x161 (= ?x493 (_ bv0 32)))))
 (let (($x457 (and $x465 $x306)))
 (let (($x450 (and $x457 $x515)))
 (let (($x512 (and $x450 $x451)))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x275)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x294)))
 (let (($x62 (= input.spec-%var-l-0.2.0 ?x293)))
 (let (($x505 (and $x62 $x512)))
 (let (($x99 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x504 (=> $x99 $x505)))
 (let (($x238 (= $x99 (bvuge (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x317 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x283 (=> $x317 $x137)))
 (let (($x280 (= $x317 (= (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x281 (and $x280 $x283)))
 (let (($x353 (and $x281 $x238)))
 (let (($x516 (and $x353 $x504)))
 (let (($x435 (and $x516 $x430)))
 (let (($x333 (and $x435 $x376)))
 (let (($x102 (= $x333 true)))
 (let (($x218 (= $x102 true)))
 (let (($x68 (= $x218 true)))
 (let (($x402 (= $x87 true)))
 (let (($x43 (= $x402 true)))
 (let (($x409 (= $x43 true)))
 (let (($x216 (= $x195 true)))
 (let (($x17 (= $x216 true)))
 (let (($x390 (= $x17 true)))
 (let (($x119 (and $x390 $x409)))
 (let (($x298 (and $x119 $x68)))
 (let (($x198 (and $x298 $x387)))
 (let (($x404 (and $x317 $x198)))
 (let (($x393 (and $x137 $x404)))
 (let (($x208 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x385 (=> $x208 true)))
 (let (($x232 (= $x208 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x52 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x520 (=> $x52 $x137)))
 (let (($x178 (= $x52 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x95 (and $x178 $x520)))
 (let (($x193 (and $x95 $x232)))
 (let (($x378 (and $x193 $x385)))
 (let (($x444 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x139 (and $x444 $x378)))
 (let (($x199 (=> $x263 $x139)))
 (let (($x511 (= $x263 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x514 (= $x161 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x517 (and $x514 $x306)))
 (let (($x519 (and $x517 $x511)))
 (let (($x194 (and $x519 $x199)))
 (let (($x21 (and $x194 $x393)))
 (let (($x459 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 input.spec-%var-node-0.L1%9%bbentry.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 false smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0)))
 (let (($x473 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x471 (and $x473 $x459)))
 (let (($x461 (=> $x263 $x471)))
 (let (($x98 (= $x263 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x162 (= $x161 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x300 (and $x162 $x306)))
 (let (($x295 (and $x300 $x98)))
 (let (($x462 (and $x295 $x461)))
 (let (($x292 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x458 (and $x292 $x462)))
 (let (($x19 (and $x458 $x21)))
 (let (($x388 (= $x208 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x34 (= $x52 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x521 (and $x34 $x520)))
 (let (($x196 (and $x521 $x388)))
 (let (($x227 (and $x196 $x385)))
 (let (($x323 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x403 (and $x323 $x227)))
 (let (($x392 (=> $x263 $x403)))
 (let (($x289 (= $x263 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x316 (= $x161 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x234 (and $x316 $x306)))
 (let (($x339 (and $x234 $x289)))
 (let (($x243 (and $x339 $x392)))
 (let (($x100 (and $x243 $x19)))
 (let (($x154 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x6 (and $x154 $x100)))
 (let (($x368 (bvugt ?x64 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x355)))
 (let (($x287 (=> (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x368)))))))
 (let (($x180 (=> (and $x87 (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x88 $x368)))))))
 (let (($x28 (and $x180 $x6)))
 (let (($x396 (=> $x28 $x395)))
 (not $x396))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x488 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x282))))
 (let ((?x187 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x253 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x411 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x67 (concat ?x93 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x64 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x355 (bvadd ?x64 (_ bv3 32))))
 (let ((?x264 (concat (select input.dst.llvm-mem ?x355) (concat ?x71 ?x67))))
 (let (($x531 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x264 ?x411 false (concat ?x253 (concat ?x221 (concat ?x149 ?x187))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x488)))
 (let (($x399 (= $x531 true)))
 (let (($x395 (= $x399 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x412 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x426 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x441 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x431 (concat ?x441 (concat ?x426 (concat ?x412 ?x82)))))
 (let (($x134 (= ?x431 input.dst.llvm-%l)))
 (let (($x383 (= $x134 true)))
 (let (($x387 (= $x383 true)))
 (let (($x101 (= (bvand ?x264 (_ bv4294967288 32)) ?x264)))
 (let (($x11 (= (bvand ?x64 (_ bv4294967292 32)) ?x64)))
 (let (($x124 (and $x11 $x101)))
 (let (($x420 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x433 (and true $x420)))
 (let (($x437 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x64 (bvsub ?x64 (_ bv4 32))) (bvult ?x64 (bvsub ?x64 (_ bv4 32))))))
 (let (($x126 (and (and (and $x437 $x433) $x11) $x124)))
 (let (($x406 (= true $x126)))
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x87 (not $x56)))
 (let (($x376 (=> $x87 $x406)))
 (let (($x436 (= input.dst.llvm-%l ?x431)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x248)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x423 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let (($x447 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x413 (and $x447 $x423)))
 (let (($x367 (and $x413 $x30)))
 (let (($x510 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x510 $x367)))
 (let (($x429 (and $x220 $x436)))
 (let (($x195 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x430 (and $x195 $x429)))
 (let (($x263 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x451 (=> $x263 true)))
 (let ((?x597 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x574 (concat ?x597 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x601 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x493 (ite (= (_ bv0 32) (concat ?x252 (concat ?x601 ?x574))) (_ bv0 32) (_ bv1 32))))
 (let (($x515 (= $x263 (bvuge ?x493 (_ bv1 32)))))
 (let (($x137 (= false false)))
 (let (($x161 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x306 (=> $x161 $x137)))
 (let (($x465 (= $x161 (= ?x493 (_ bv0 32)))))
 (let (($x457 (and $x465 $x306)))
 (let (($x450 (and $x457 $x515)))
 (let (($x512 (and $x450 $x451)))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x275)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x294)))
 (let (($x62 (= input.spec-%var-l-0.2.0 ?x293)))
 (let (($x505 (and $x62 $x512)))
 (let (($x99 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x504 (=> $x99 $x505)))
 (let (($x238 (= $x99 (bvuge (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x317 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x283 (=> $x317 $x137)))
 (let (($x280 (= $x317 (= (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x281 (and $x280 $x283)))
 (let (($x353 (and $x281 $x238)))
 (let (($x516 (and $x353 $x504)))
 (let (($x435 (and $x516 $x430)))
 (let (($x333 (and $x435 $x376)))
 (let (($x102 (= $x333 true)))
 (let (($x218 (= $x102 true)))
 (let (($x68 (= $x218 true)))
 (let (($x402 (= $x87 true)))
 (let (($x43 (= $x402 true)))
 (let (($x409 (= $x43 true)))
 (let (($x216 (= $x195 true)))
 (let (($x17 (= $x216 true)))
 (let (($x390 (= $x17 true)))
 (let (($x119 (and $x390 $x409)))
 (let (($x298 (and $x119 $x68)))
 (let (($x198 (and $x298 $x387)))
 (let (($x404 (and $x317 $x198)))
 (let (($x393 (and $x137 $x404)))
 (let (($x208 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x385 (=> $x208 true)))
 (let (($x232 (= $x208 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x52 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x520 (=> $x52 $x137)))
 (let (($x178 (= $x52 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x95 (and $x178 $x520)))
 (let (($x193 (and $x95 $x232)))
 (let (($x378 (and $x193 $x385)))
 (let (($x444 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x139 (and $x444 $x378)))
 (let (($x199 (=> $x263 $x139)))
 (let (($x511 (= $x263 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x514 (= $x161 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x517 (and $x514 $x306)))
 (let (($x519 (and $x517 $x511)))
 (let (($x194 (and $x519 $x199)))
 (let (($x21 (and $x194 $x393)))
 (let (($x459 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 input.spec-%var-node-0.L1%9%bbentry.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 false smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0)))
 (let (($x473 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x471 (and $x473 $x459)))
 (let (($x461 (=> $x263 $x471)))
 (let (($x98 (= $x263 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x162 (= $x161 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x300 (and $x162 $x306)))
 (let (($x295 (and $x300 $x98)))
 (let (($x462 (and $x295 $x461)))
 (let (($x292 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x458 (and $x292 $x462)))
 (let (($x19 (and $x458 $x21)))
 (let (($x388 (= $x208 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x34 (= $x52 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x521 (and $x34 $x520)))
 (let (($x196 (and $x521 $x388)))
 (let (($x227 (and $x196 $x385)))
 (let (($x323 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x403 (and $x323 $x227)))
 (let (($x392 (=> $x263 $x403)))
 (let (($x289 (= $x263 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x316 (= $x161 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x234 (and $x316 $x306)))
 (let (($x339 (and $x234 $x289)))
 (let (($x243 (and $x339 $x392)))
 (let (($x100 (and $x243 $x19)))
 (let (($x154 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x6 (and $x154 $x100)))
 (let (($x368 (bvugt ?x64 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x355)))
 (let (($x287 (=> (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x368)))))))
 (let (($x180 (=> (and $x87 (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x88 $x368)))))))
 (let (($x28 (and $x180 $x6)))
 (let (($x396 (=> $x28 $x395)))
 (not $x396))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708107/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x351 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv1 32))) (select input.dst.llvm-mem ?x351))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv2 32))) ?x147))))
 (let ((?x224 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x526 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x31 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x377 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x31 false (concat ?x526 (concat ?x80 (concat ?x179 ?x224))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x299)))
 (let (($x332 (= $x377 true)))
 (let (($x143 (= $x332 true)))
 (let ((?x345 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x359 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x356 (concat ?x359 (concat ?x14 (concat ?x271 ?x345)))))
 (let (($x446 (= ?x356 input.dst.llvm-%l)))
 (let (($x452 (= $x446 true)))
 (let (($x508 (= $x452 true)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x223 (concat ?x213 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x463 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x109 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x122 (bvadd ?x109 (_ bv3 32))))
 (let ((?x460 (concat (select input.dst.llvm-mem ?x122) (concat ?x463 ?x223))))
 (let (($x513 (= (bvand ?x460 (_ bv4294967288 32)) ?x460)))
 (let (($x181 (= (bvand ?x109 (_ bv4294967292 32)) ?x109)))
 (let (($x548 (and $x181 $x513)))
 (let (($x246 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x312 (and true $x246)))
 (let (($x476 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x109 (bvsub ?x109 (_ bv4 32))) (bvult ?x109 (bvsub ?x109 (_ bv4 32))))))
 (let (($x542 (and (and (and $x476 $x312) $x181) $x548)))
 (let (($x482 (= true $x542)))
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x87 (not $x56)))
 (let (($x547 (=> $x87 $x482)))
 (let (($x472 (= input.dst.llvm-%l ?x356)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x135)))
 (let ((?x401 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x401)))
 (let (($x477 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (and $x477 $x165)))
 (let (($x158 (and $x297 $x35)))
 (let (($x455 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x335 (and $x455 $x158)))
 (let (($x290 (and $x335 $x472)))
 (let (($x425 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x166 (and $x425 $x290)))
 (let (($x392 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x474 (=> $x392 true)))
 (let ((?x241 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x170 (concat ?x241 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x240 (ite (= (_ bv0 32) (concat ?x18 (concat ?x254 ?x170))) (_ bv0 32) (_ bv1 32))))
 (let (($x157 (= $x392 (bvuge ?x240 (_ bv1 32)))))
 (let (($x520 (= false false)))
 (let (($x523 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x521 (=> $x523 $x520)))
 (let (($x171 (= $x523 (= ?x240 (_ bv0 32)))))
 (let (($x361 (and $x171 $x521)))
 (let (($x456 (and $x361 $x157)))
 (let (($x112 (and $x456 $x474)))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x408)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x164)))
 (let (($x45 (= input.spec-%var-l-0.2.0 ?x15)))
 (let (($x77 (and $x45 $x112)))
 (let (($x97 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x160 (=> $x97 $x77)))
 (let (($x285 (= $x97 (bvuge (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x117 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x187 (=> $x117 $x520)))
 (let (($x149 (= $x117 (= (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x20 (and $x149 $x187)))
 (let (($x40 (and $x20 $x285)))
 (let (($x81 (and $x40 $x160)))
 (let (($x454 (and $x81 $x166)))
 (let (($x168 (and $x454 $x547)))
 (let (($x509 (= $x168 true)))
 (let (($x116 (= $x509 true)))
 (let (($x111 (= $x116 true)))
 (let (($x82 (= $x56 true)))
 (let (($x424 (= $x82 true)))
 (let (($x432 (= $x424 true)))
 (let (($x426 (= $x425 true)))
 (let (($x169 (= $x426 true)))
 (let (($x412 (= $x169 true)))
 (let (($x431 (and $x412 $x432)))
 (let (($x421 (and $x431 $x111)))
 (let (($x528 (and $x421 $x508)))
 (let (($x481 (and $x117 $x528)))
 (let (($x125 (and $x520 $x481)))
 (let (($x514 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x444 (=> $x514 true)))
 (let (($x251 (= $x514 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x206 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x462 (=> $x206 $x520)))
 (let (($x505 (= $x206 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x506 (and $x505 $x462)))
 (let (($x423 (and $x506 $x251)))
 (let (($x447 (and $x423 $x444)))
 (let (($x465 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x413 (and $x465 $x447)))
 (let (($x248 (=> $x392 $x413)))
 (let (($x574 (= $x392 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x575 (= $x523 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x601 (and $x575 $x521)))
 (let (($x576 (and $x601 $x574)))
 (let (($x30 (and $x576 $x248)))
 (let (($x445 (and $x30 $x125)))
 (let (($x353 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 input.spec-%var-node-0.L1%9%bbentry.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 false smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0)))
 (let (($x311 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x281 (and $x311 $x353)))
 (let (($x99 (=> $x392 $x281)))
 (let (($x43 (= $x392 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x195 (= $x523 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x216 (and $x195 $x521)))
 (let (($x409 (and $x216 $x43)))
 (let (($x25 (and $x409 $x99)))
 (let (($x193 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x238 (and $x193 $x25)))
 (let (($x217 (and $x238 $x445)))
 (let (($x449 (= $x514 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x236 (= $x206 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x458 (and $x236 $x462)))
 (let (($x511 (and $x458 $x449)))
 (let (($x144 (and $x511 $x444)))
 (let (($x295 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x519 (and $x295 $x144)))
 (let (($x59 (=> $x392 $x519)))
 (let (($x403 (= $x392 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x34 (= $x523 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x208 (and $x34 $x521)))
 (let (($x243 (and $x208 $x403)))
 (let (($x61 (and $x243 $x59)))
 (let (($x478 (and $x61 $x217)))
 (let (($x306 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x414 (and $x306 $x478)))
 (let (($x128 (bvugt ?x109 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x154 (=> (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x114 $x128)))))))
 (let (($x249 (=> (and $x87 (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x114 $x128)))))))
 (let (($x146 (and $x249 $x414)))
 (let (($x524 (=> $x146 $x143)))
 (not $x524))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x351 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv1 32))) (select input.dst.llvm-mem ?x351))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv2 32))) ?x147))))
 (let ((?x224 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x526 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x31 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x377 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x31 false (concat ?x526 (concat ?x80 (concat ?x179 ?x224))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x299)))
 (let (($x332 (= $x377 true)))
 (let (($x143 (= $x332 true)))
 (let ((?x345 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x359 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x356 (concat ?x359 (concat ?x14 (concat ?x271 ?x345)))))
 (let (($x446 (= ?x356 input.dst.llvm-%l)))
 (let (($x452 (= $x446 true)))
 (let (($x508 (= $x452 true)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x223 (concat ?x213 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x463 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x109 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x122 (bvadd ?x109 (_ bv3 32))))
 (let ((?x460 (concat (select input.dst.llvm-mem ?x122) (concat ?x463 ?x223))))
 (let (($x513 (= (bvand ?x460 (_ bv4294967288 32)) ?x460)))
 (let (($x181 (= (bvand ?x109 (_ bv4294967292 32)) ?x109)))
 (let (($x548 (and $x181 $x513)))
 (let (($x246 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x312 (and true $x246)))
 (let (($x476 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x109 (bvsub ?x109 (_ bv4 32))) (bvult ?x109 (bvsub ?x109 (_ bv4 32))))))
 (let (($x542 (and (and (and $x476 $x312) $x181) $x548)))
 (let (($x482 (= true $x542)))
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x87 (not $x56)))
 (let (($x547 (=> $x87 $x482)))
 (let (($x472 (= input.dst.llvm-%l ?x356)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x135)))
 (let ((?x401 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x401)))
 (let (($x477 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (and $x477 $x165)))
 (let (($x158 (and $x297 $x35)))
 (let (($x455 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x335 (and $x455 $x158)))
 (let (($x290 (and $x335 $x472)))
 (let (($x425 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x166 (and $x425 $x290)))
 (let (($x392 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x474 (=> $x392 true)))
 (let ((?x241 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x170 (concat ?x241 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x240 (ite (= (_ bv0 32) (concat ?x18 (concat ?x254 ?x170))) (_ bv0 32) (_ bv1 32))))
 (let (($x157 (= $x392 (bvuge ?x240 (_ bv1 32)))))
 (let (($x520 (= false false)))
 (let (($x523 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x521 (=> $x523 $x520)))
 (let (($x171 (= $x523 (= ?x240 (_ bv0 32)))))
 (let (($x361 (and $x171 $x521)))
 (let (($x456 (and $x361 $x157)))
 (let (($x112 (and $x456 $x474)))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x408)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x164)))
 (let (($x45 (= input.spec-%var-l-0.2.0 ?x15)))
 (let (($x77 (and $x45 $x112)))
 (let (($x97 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x160 (=> $x97 $x77)))
 (let (($x285 (= $x97 (bvuge (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x117 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x187 (=> $x117 $x520)))
 (let (($x149 (= $x117 (= (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x20 (and $x149 $x187)))
 (let (($x40 (and $x20 $x285)))
 (let (($x81 (and $x40 $x160)))
 (let (($x454 (and $x81 $x166)))
 (let (($x168 (and $x454 $x547)))
 (let (($x509 (= $x168 true)))
 (let (($x116 (= $x509 true)))
 (let (($x111 (= $x116 true)))
 (let (($x82 (= $x56 true)))
 (let (($x424 (= $x82 true)))
 (let (($x432 (= $x424 true)))
 (let (($x426 (= $x425 true)))
 (let (($x169 (= $x426 true)))
 (let (($x412 (= $x169 true)))
 (let (($x431 (and $x412 $x432)))
 (let (($x421 (and $x431 $x111)))
 (let (($x528 (and $x421 $x508)))
 (let (($x481 (and $x117 $x528)))
 (let (($x125 (and $x520 $x481)))
 (let (($x514 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x444 (=> $x514 true)))
 (let (($x251 (= $x514 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x206 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x462 (=> $x206 $x520)))
 (let (($x505 (= $x206 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x506 (and $x505 $x462)))
 (let (($x423 (and $x506 $x251)))
 (let (($x447 (and $x423 $x444)))
 (let (($x465 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x413 (and $x465 $x447)))
 (let (($x248 (=> $x392 $x413)))
 (let (($x574 (= $x392 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x575 (= $x523 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x601 (and $x575 $x521)))
 (let (($x576 (and $x601 $x574)))
 (let (($x30 (and $x576 $x248)))
 (let (($x445 (and $x30 $x125)))
 (let (($x353 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 input.spec-%var-node-0.L1%9%bbentry.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 false smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0)))
 (let (($x311 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x281 (and $x311 $x353)))
 (let (($x99 (=> $x392 $x281)))
 (let (($x43 (= $x392 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x195 (= $x523 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x216 (and $x195 $x521)))
 (let (($x409 (and $x216 $x43)))
 (let (($x25 (and $x409 $x99)))
 (let (($x193 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x238 (and $x193 $x25)))
 (let (($x217 (and $x238 $x445)))
 (let (($x449 (= $x514 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x236 (= $x206 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x458 (and $x236 $x462)))
 (let (($x511 (and $x458 $x449)))
 (let (($x144 (and $x511 $x444)))
 (let (($x295 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x519 (and $x295 $x144)))
 (let (($x59 (=> $x392 $x519)))
 (let (($x403 (= $x392 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x34 (= $x523 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x208 (and $x34 $x521)))
 (let (($x243 (and $x208 $x403)))
 (let (($x61 (and $x243 $x59)))
 (let (($x478 (and $x61 $x217)))
 (let (($x306 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x414 (and $x306 $x478)))
 (let (($x128 (bvugt ?x109 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x154 (=> (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x114 $x128)))))))
 (let (($x249 (=> (and $x87 (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x114 $x128)))))))
 (let (($x146 (and $x249 $x414)))
 (let (($x524 (=> $x146 $x143)))
 (not $x524))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 #b00000000000000000000000000000000)
(= smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_37)
(= input.dst.llvm-mem @fun_34)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc @fun_39)
(function @fun_37
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (default false))
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
(function @fun_39
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_39 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 false #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_8709 (_ BitVec 32)) (BOUND_VARIABLE_8710 (_ BitVec 32)) (BOUND_VARIABLE_8711 (_ BitVec 32)) (BOUND_VARIABLE_8712 Bool) (BOUND_VARIABLE_8713 (_ BitVec 32)) (BOUND_VARIABLE_8714 (_ BitVec 32)) (BOUND_VARIABLE_8715 (_ BitVec 32)) (BOUND_VARIABLE_8716 (_ BitVec 32)) (BOUND_VARIABLE_8717 (_ BitVec 32)) (BOUND_VARIABLE_8718 (_ BitVec 32)) (BOUND_VARIABLE_8719 Bool) (BOUND_VARIABLE_8720 (_ BitVec 32)) (BOUND_VARIABLE_8721 (_ BitVec 32)) (BOUND_VARIABLE_8722 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc ((BOUND_VARIABLE_8709 (_ BitVec 32)) (BOUND_VARIABLE_8710 (_ BitVec 32)) (BOUND_VARIABLE_8711 (_ BitVec 32)) (BOUND_VARIABLE_8712 Bool) (BOUND_VARIABLE_8713 (_ BitVec 32)) (BOUND_VARIABLE_8714 (_ BitVec 32)) (BOUND_VARIABLE_8715 (_ BitVec 32)) (BOUND_VARIABLE_8716 (_ BitVec 32)) (BOUND_VARIABLE_8717 (_ BitVec 32)) (BOUND_VARIABLE_8718 (_ BitVec 32)) (BOUND_VARIABLE_8719 Bool) (BOUND_VARIABLE_8720 (_ BitVec 32)) (BOUND_VARIABLE_8721 (_ BitVec 32)) (BOUND_VARIABLE_8722 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x0000000f)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.1.2 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-1c5bf2eea97f9b196fc8853558d2dc-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xff)
                                #x00000003
                                #x00)
                         #x00000002
                         #x00)
                  #x00000001
                  #x00)))
  (store a!1 #x00000000 #x00)))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x0000000f)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #xffffffff)
              (= x!12 #x0000000f)
              (= x!13 #xffffffff))
      false
      false))
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.1c5bf2eea97f9b196fc8853558d2dc ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00000000)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708107/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x510 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x597 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x457 (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv1 32))) (select input.dst.llvm-mem ?x597))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv2 32))) ?x457))))
 (let ((?x63 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x589 (concat ?x113 (concat ?x49 (concat ?x92 ?x63)))))
 (let (($x533 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l ?x589 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x86 ?x510 false)))
 (let (($x377 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x204 (=> $x377 $x533)))
 (let (($x143 (= $x377 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x462 (= false false)))
 (let (($x527 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x277 (=> $x527 $x462)))
 (let (($x342 (= $x527 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x242 (and $x342 $x277)))
 (let (($x524 (and $x242 $x143)))
 (let (($x203 (and $x524 $x204)))
 (let (($x237 (= $x203 true)))
 (let (($x176 (= $x237 true)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x371 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x469 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x473 (concat ?x469 (concat ?x371 (concat ?x55 ?x138)))))
 (let (($x5 (= ?x473 input.dst.llvm-%l)))
 (let (($x357 (= $x5 true)))
 (let (($x321 (= $x357 true)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x85 (concat ?x107 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x522 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x344 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x150 (bvadd ?x344 (_ bv3 32))))
 (let ((?x470 (concat (select input.dst.llvm-mem ?x150) (concat ?x522 ?x85))))
 (let (($x22 (= (bvand ?x470 (_ bv4294967288 32)) ?x470)))
 (let (($x162 (= (bvand ?x344 (_ bv4294967292 32)) ?x344)))
 (let (($x347 (and $x162 $x22)))
 (let (($x323 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x196 (and true $x323)))
 (let (($x262 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x344 (bvsub ?x344 (_ bv4 32))) (bvult ?x344 (bvsub ?x344 (_ bv4 32))))))
 (let (($x328 (and (and (and $x262 $x196) $x162) $x347)))
 (let (($x468 (= true $x328)))
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x87 (not $x56)))
 (let (($x286 (=> $x87 $x468)))
 (let (($x326 (= input.dst.llvm-%l ?x473)))
 (let ((?x389 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x389)))
 (let ((?x329 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x397 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x329)))
 (let (($x365 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x388 (and $x365 $x397)))
 (let (($x156 (and $x388 $x163)))
 (let (($x464 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x374 (and $x464 $x156)))
 (let (($x378 (and $x374 $x326)))
 (let (($x356 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x139 (and $x356 $x378)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x53 (concat ?x123 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x396 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x501 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x399 (concat ?x501 (concat ?x396 ?x53))))
 (let (($x504 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x399 ?x589 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x86 ?x510 false)))
 (let (($x59 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x59 $x504)))
 (let (($x233 (= $x59 (bvuge (ite (= (_ bv0 32) ?x399) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x471 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x458 (=> $x471 $x462)))
 (let (($x308 (= $x471 (= (ite (= (_ bv0 32) ?x399) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x205 (and $x308 $x458)))
 (let (($x212 (and $x205 $x233)))
 (let (($x250 (and $x212 $x226)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x67)))
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x58)))
 (let (($x93 (= input.spec-%var-l-0.2.0 ?x443)))
 (let (($x370 (and $x93 $x250)))
 (let (($x384 (=> $x377 $x370)))
 (let (($x42 (and $x524 $x384)))
 (let (($x199 (and $x42 $x139)))
 (let (($x256 (and $x199 $x286)))
 (let (($x480 (= $x256 true)))
 (let (($x337 (= $x480 true)))
 (let (($x467 (= $x337 true)))
 (let (($x454 (= $x56 true)))
 (let (($x106 (= $x454 true)))
 (let (($x222 (= $x106 true)))
 (let (($x472 (= $x356 true)))
 (let (($x290 (= $x472 true)))
 (let (($x166 (= $x290 true)))
 (let (($x360 (and $x166 $x222)))
 (let (($x273 (and $x360 $x467)))
 (let (($x79 (and $x273 $x321)))
 (let (($x278 (and $x527 $x79)))
 (let (($x48 (and $x462 $x278)))
 (let (($x310 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.spec-%tmpvar-0.L1%9%bbentry.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 false)))
 (let (($x575 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x153 (=> $x575 $x310)))
 (let (($x297 (= $x575 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x270 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x25 (=> $x270 $x462)))
 (let (($x81 (= $x270 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x477 (and $x81 $x25)))
 (let (($x135 (and $x477 $x297)))
 (let (($x359 (and $x135 $x153)))
 (let (($x303 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x158 (and $x303 $x359)))
 (let (($x335 (=> $x59 $x158)))
 (let (($x375 (= $x59 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x121 (= $x471 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x241 (and $x121 $x458)))
 (let (($x7 (and $x241 $x375)))
 (let (($x51 (and $x7 $x335)))
 (let (($x475 (and $x51 $x48)))
 (let (($x142 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x29 (and $x142 true)))
 (let (($x408 (=> $x59 $x29)))
 (let (($x46 (= $x59 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x97 (= $x471 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x27 (and $x97 $x458)))
 (let (($x185 (and $x27 $x46)))
 (let (($x164 (and $x185 $x408)))
 (let (($x253 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x15 (and $x253 $x164)))
 (let (($x231 (and $x15 $x475)))
 (let (($x251 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.spec-%var-node_next-0.L1%9%bbentry.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 false)))
 (let (($x506 (=> $x575 $x251)))
 (let (($x16 (= $x575 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x275 (= $x270 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x238 (and $x275 $x25)))
 (let (($x574 (and $x238 $x16)))
 (let (($x516 (and $x574 $x506)))
 (let (($x409 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x512 (and $x409 $x516)))
 (let (($x505 (=> $x59 $x512)))
 (let (($x519 (= $x59 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x236 (= $x471 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x514 (and $x236 $x458)))
 (let (($x61 (and $x514 $x519)))
 (let (($x447 (and $x61 $x505)))
 (let (($x350 (and $x447 $x231)))
 (let (($x521 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x319 (and $x521 $x350)))
 (let (($x180 (bvugt ?x344 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x306 (=> (bvule ?x344 (bvsub (bvadd ?x344 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x287 $x180)))))))
 (let (($x355 (=> (and $x87 (bvule ?x344 (bvsub (bvadd ?x344 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x287 $x180)))))))
 (let (($x191 (and $x355 $x319)))
 (let (($x485 (=> $x191 $x176)))
 (not $x485))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x510 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x597 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x457 (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv1 32))) (select input.dst.llvm-mem ?x597))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv2 32))) ?x457))))
 (let ((?x63 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x589 (concat ?x113 (concat ?x49 (concat ?x92 ?x63)))))
 (let (($x533 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l ?x589 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x86 ?x510 false)))
 (let (($x377 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x204 (=> $x377 $x533)))
 (let (($x143 (= $x377 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x462 (= false false)))
 (let (($x527 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x277 (=> $x527 $x462)))
 (let (($x342 (= $x527 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x242 (and $x342 $x277)))
 (let (($x524 (and $x242 $x143)))
 (let (($x203 (and $x524 $x204)))
 (let (($x237 (= $x203 true)))
 (let (($x176 (= $x237 true)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x371 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x469 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x473 (concat ?x469 (concat ?x371 (concat ?x55 ?x138)))))
 (let (($x5 (= ?x473 input.dst.llvm-%l)))
 (let (($x357 (= $x5 true)))
 (let (($x321 (= $x357 true)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x85 (concat ?x107 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x522 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x344 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x150 (bvadd ?x344 (_ bv3 32))))
 (let ((?x470 (concat (select input.dst.llvm-mem ?x150) (concat ?x522 ?x85))))
 (let (($x22 (= (bvand ?x470 (_ bv4294967288 32)) ?x470)))
 (let (($x162 (= (bvand ?x344 (_ bv4294967292 32)) ?x344)))
 (let (($x347 (and $x162 $x22)))
 (let (($x323 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x196 (and true $x323)))
 (let (($x262 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x344 (bvsub ?x344 (_ bv4 32))) (bvult ?x344 (bvsub ?x344 (_ bv4 32))))))
 (let (($x328 (and (and (and $x262 $x196) $x162) $x347)))
 (let (($x468 (= true $x328)))
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x87 (not $x56)))
 (let (($x286 (=> $x87 $x468)))
 (let (($x326 (= input.dst.llvm-%l ?x473)))
 (let ((?x389 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x389)))
 (let ((?x329 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x397 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x329)))
 (let (($x365 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x388 (and $x365 $x397)))
 (let (($x156 (and $x388 $x163)))
 (let (($x464 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x374 (and $x464 $x156)))
 (let (($x378 (and $x374 $x326)))
 (let (($x356 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x139 (and $x356 $x378)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x53 (concat ?x123 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x396 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x501 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x399 (concat ?x501 (concat ?x396 ?x53))))
 (let (($x504 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x399 ?x589 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x86 ?x510 false)))
 (let (($x59 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x226 (=> $x59 $x504)))
 (let (($x233 (= $x59 (bvuge (ite (= (_ bv0 32) ?x399) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x471 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x458 (=> $x471 $x462)))
 (let (($x308 (= $x471 (= (ite (= (_ bv0 32) ?x399) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x205 (and $x308 $x458)))
 (let (($x212 (and $x205 $x233)))
 (let (($x250 (and $x212 $x226)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x67)))
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x58)))
 (let (($x93 (= input.spec-%var-l-0.2.0 ?x443)))
 (let (($x370 (and $x93 $x250)))
 (let (($x384 (=> $x377 $x370)))
 (let (($x42 (and $x524 $x384)))
 (let (($x199 (and $x42 $x139)))
 (let (($x256 (and $x199 $x286)))
 (let (($x480 (= $x256 true)))
 (let (($x337 (= $x480 true)))
 (let (($x467 (= $x337 true)))
 (let (($x454 (= $x56 true)))
 (let (($x106 (= $x454 true)))
 (let (($x222 (= $x106 true)))
 (let (($x472 (= $x356 true)))
 (let (($x290 (= $x472 true)))
 (let (($x166 (= $x290 true)))
 (let (($x360 (and $x166 $x222)))
 (let (($x273 (and $x360 $x467)))
 (let (($x79 (and $x273 $x321)))
 (let (($x278 (and $x527 $x79)))
 (let (($x48 (and $x462 $x278)))
 (let (($x310 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.spec-%tmpvar-0.L1%9%bbentry.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 false)))
 (let (($x575 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x153 (=> $x575 $x310)))
 (let (($x297 (= $x575 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x270 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x25 (=> $x270 $x462)))
 (let (($x81 (= $x270 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x477 (and $x81 $x25)))
 (let (($x135 (and $x477 $x297)))
 (let (($x359 (and $x135 $x153)))
 (let (($x303 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x158 (and $x303 $x359)))
 (let (($x335 (=> $x59 $x158)))
 (let (($x375 (= $x59 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x121 (= $x471 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x241 (and $x121 $x458)))
 (let (($x7 (and $x241 $x375)))
 (let (($x51 (and $x7 $x335)))
 (let (($x475 (and $x51 $x48)))
 (let (($x142 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x29 (and $x142 true)))
 (let (($x408 (=> $x59 $x29)))
 (let (($x46 (= $x59 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x97 (= $x471 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x27 (and $x97 $x458)))
 (let (($x185 (and $x27 $x46)))
 (let (($x164 (and $x185 $x408)))
 (let (($x253 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x15 (and $x253 $x164)))
 (let (($x231 (and $x15 $x475)))
 (let (($x251 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.spec-%var-node_next-0.L1%9%bbentry.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 false)))
 (let (($x506 (=> $x575 $x251)))
 (let (($x16 (= $x575 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x275 (= $x270 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x238 (and $x275 $x25)))
 (let (($x574 (and $x238 $x16)))
 (let (($x516 (and $x574 $x506)))
 (let (($x409 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x512 (and $x409 $x516)))
 (let (($x505 (=> $x59 $x512)))
 (let (($x519 (= $x59 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x236 (= $x471 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x514 (and $x236 $x458)))
 (let (($x61 (and $x514 $x519)))
 (let (($x447 (and $x61 $x505)))
 (let (($x350 (and $x447 $x231)))
 (let (($x521 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x319 (and $x521 $x350)))
 (let (($x180 (bvugt ?x344 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x306 (=> (bvule ?x344 (bvsub (bvadd ?x344 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x287 $x180)))))))
 (let (($x355 (=> (and $x87 (bvule ?x344 (bvsub (bvadd ?x344 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x287 $x180)))))))
 (let (($x191 (and $x355 $x319)))
 (let (($x485 (=> $x191 $x176)))
 (not $x485))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708107/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x87 (not $x56)))
 (let (($x417 (or $x56 $x87)))
 (let (($x428 (= $x417 true)))
 (let (($x420 (= $x428 true)))
 (let ((?x379 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x502 (concat ?x9 (concat ?x23 (concat ?x10 ?x379)))))
 (let (($x362 (= ?x502 input.dst.llvm-%l)))
 (let (($x498 (= $x362 true)))
 (let (($x382 (= $x498 true)))
 (let (($x30 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x172 (=> $x30 true)))
 (let ((?x452 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x481 (concat ?x452 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x352 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x148 (ite (= (_ bv0 32) (concat ?x352 (concat ?x183 ?x481))) (_ bv0 32) (_ bv1 32))))
 (let (($x367 (= $x30 (bvuge ?x148 (_ bv1 32)))))
 (let (($x25 (= false false)))
 (let (($x281 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x238 (=> $x281 $x25)))
 (let (($x445 (= $x281 (= ?x148 (_ bv0 32)))))
 (let (($x508 (and $x445 $x238)))
 (let (($x220 (and $x508 $x367)))
 (let (($x348 (and $x220 $x172)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x83)))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x45)))
 (let (($x243 (= input.spec-%var-l-0.2.0 ?x424)))
 (let (($x314 (and $x243 $x348)))
 (let (($x347 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x161 (=> $x347 $x314)))
 (let (($x468 (= $x347 (bvuge (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x334 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x258 (=> $x334 $x25)))
 (let (($x522 (= $x334 (= (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x107 (and $x522 $x258)))
 (let (($x286 (and $x107 $x468)))
 (let (($x234 (and $x286 $x161)))
 (let (($x263 (= $x234 true)))
 (let (($x269 (= $x263 true)))
 (let (($x227 (= $x269 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x39)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x212 $x62)))
 (let (($x209 (and $x113 $x49)))
 (let (($x233 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x233 $x209)))
 (let (($x63 (= $x92 true)))
 (let (($x152 (= $x63 true)))
 (let (($x292 (= $x152 true)))
 (let (($x403 (and $x292 $x227)))
 (let (($x145 (and $x403 $x382)))
 (let (($x118 (and $x25 $x145)))
 (let (($x121 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x303 (=> $x121 true)))
 (let (($x400 (= $x121 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x46 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x164 (=> $x46 $x25)))
 (let (($x13 (= $x46 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x53 (and $x13 $x164)))
 (let (($x338 (and $x53 $x400)))
 (let (($x399 (and $x338 $x303)))
 (let (($x443 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x32 (and $x443 $x399)))
 (let (($x308 (=> $x30 $x32)))
 (let (($x140 (= $x30 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x84 (= $x281 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x255 (and $x84 $x238)))
 (let (($x433 (and $x255 $x140)))
 (let (($x205 (and $x433 $x308)))
 (let (($x442 (and $x205 $x118)))
 (let (($x360 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x527 (and $x360 true)))
 (let (($x351 (=> $x30 $x527)))
 (let (($x290 (= $x30 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x51 (= $x281 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x307 (and $x51 $x238)))
 (let (($x166 (and $x307 $x290)))
 (let (($x159 (and $x166 $x351)))
 (let (($x135 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x342 (and $x135 $x159)))
 (let (($x439 (and $x342 $x442)))
 (let (($x57 (= $x121 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x185 (= $x46 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x15 (and $x185 $x164)))
 (let (($x375 (and $x15 $x57)))
 (let (($x77 (and $x375 $x303)))
 (let (($x512 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x7 (and $x512 $x77)))
 (let (($x361 (=> $x30 $x7)))
 (let (($x413 (= $x30 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x275 (= $x281 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x575 (and $x275 $x238)))
 (let (($x440 (and $x575 $x413)))
 (let (($x160 (and $x440 $x361)))
 (let (($x418 (and $x160 $x439)))
 (let (($x458 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x416 (and $x458 $x418)))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x249 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x88 (_ bv3 32)))))
 (let (($x521 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x154 $x249)))))))
 (let (($x122 (=> (and $x87 (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x154 $x249)))))))
 (let (($x438 (and $x122 $x416)))
 (let (($x427 (=> $x438 $x420)))
 (not $x427))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x87 (not $x56)))
 (let (($x417 (or $x56 $x87)))
 (let (($x428 (= $x417 true)))
 (let (($x420 (= $x428 true)))
 (let ((?x379 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x502 (concat ?x9 (concat ?x23 (concat ?x10 ?x379)))))
 (let (($x362 (= ?x502 input.dst.llvm-%l)))
 (let (($x498 (= $x362 true)))
 (let (($x382 (= $x498 true)))
 (let (($x30 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x172 (=> $x30 true)))
 (let ((?x452 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x481 (concat ?x452 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x352 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x148 (ite (= (_ bv0 32) (concat ?x352 (concat ?x183 ?x481))) (_ bv0 32) (_ bv1 32))))
 (let (($x367 (= $x30 (bvuge ?x148 (_ bv1 32)))))
 (let (($x25 (= false false)))
 (let (($x281 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x238 (=> $x281 $x25)))
 (let (($x445 (= $x281 (= ?x148 (_ bv0 32)))))
 (let (($x508 (and $x445 $x238)))
 (let (($x220 (and $x508 $x367)))
 (let (($x348 (and $x220 $x172)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x83)))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x45)))
 (let (($x243 (= input.spec-%var-l-0.2.0 ?x424)))
 (let (($x314 (and $x243 $x348)))
 (let (($x347 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x161 (=> $x347 $x314)))
 (let (($x468 (= $x347 (bvuge (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x334 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x258 (=> $x334 $x25)))
 (let (($x522 (= $x334 (= (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x107 (and $x522 $x258)))
 (let (($x286 (and $x107 $x468)))
 (let (($x234 (and $x286 $x161)))
 (let (($x263 (= $x234 true)))
 (let (($x269 (= $x263 true)))
 (let (($x227 (= $x269 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x39)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x212 $x62)))
 (let (($x209 (and $x113 $x49)))
 (let (($x233 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x233 $x209)))
 (let (($x63 (= $x92 true)))
 (let (($x152 (= $x63 true)))
 (let (($x292 (= $x152 true)))
 (let (($x403 (and $x292 $x227)))
 (let (($x145 (and $x403 $x382)))
 (let (($x118 (and $x25 $x145)))
 (let (($x121 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x303 (=> $x121 true)))
 (let (($x400 (= $x121 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x46 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x164 (=> $x46 $x25)))
 (let (($x13 (= $x46 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x53 (and $x13 $x164)))
 (let (($x338 (and $x53 $x400)))
 (let (($x399 (and $x338 $x303)))
 (let (($x443 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x32 (and $x443 $x399)))
 (let (($x308 (=> $x30 $x32)))
 (let (($x140 (= $x30 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x84 (= $x281 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x255 (and $x84 $x238)))
 (let (($x433 (and $x255 $x140)))
 (let (($x205 (and $x433 $x308)))
 (let (($x442 (and $x205 $x118)))
 (let (($x360 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x527 (and $x360 true)))
 (let (($x351 (=> $x30 $x527)))
 (let (($x290 (= $x30 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32)))))
 (let (($x51 (= $x281 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32)))))
 (let (($x307 (and $x51 $x238)))
 (let (($x166 (and $x307 $x290)))
 (let (($x159 (and $x166 $x351)))
 (let (($x135 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x342 (and $x135 $x159)))
 (let (($x439 (and $x342 $x442)))
 (let (($x57 (= $x121 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32)))))
 (let (($x185 (= $x46 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32)))))
 (let (($x15 (and $x185 $x164)))
 (let (($x375 (and $x15 $x57)))
 (let (($x77 (and $x375 $x303)))
 (let (($x512 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x7 (and $x512 $x77)))
 (let (($x361 (=> $x30 $x7)))
 (let (($x413 (= $x30 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32)))))
 (let (($x275 (= $x281 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32)))))
 (let (($x575 (and $x275 $x238)))
 (let (($x440 (and $x575 $x413)))
 (let (($x160 (and $x440 $x361)))
 (let (($x418 (and $x160 $x439)))
 (let (($x458 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x416 (and $x458 $x418)))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x249 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x88 (_ bv3 32)))))
 (let (($x521 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x154 $x249)))))))
 (let (($x122 (=> (and $x87 (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x154 $x249)))))))
 (let (($x438 (and $x122 $x416)))
 (let (($x427 (=> $x438 $x420)))
 (not $x427))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708107/query
