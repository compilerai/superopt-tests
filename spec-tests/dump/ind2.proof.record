==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x10 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x10 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x126 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x191 (not $x126)))
 (let (($x229 (or $x126 $x191)))
 (let (($x230 (= $x229 false)))
 (let (($x231 (= $x230 true)))
 (let ((?x210 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x218 (concat ?x215 (concat ?x212 ?x210)))))
 (let (($x220 (= ?x219 input.dst.llvm-%l)))
 (let (($x221 (= $x220 true)))
 (let (($x222 (= $x221 true)))
 (let ((?x192 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x199 (bvugt ?x192 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x192 (_ bv3 32)))))
 (let (($x205 (=> (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x199)))))))
 (let (($x193 (=> (and $x191 (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x198 $x199)))))))
 (let (($x194 (= $x193 true)))
 (let (($x206 (= $x194 true)))
 (let (($x207 (= $x206 true)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x155 (concat ?x154 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x161 (concat ?x160 (concat ?x157 ?x155))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem ?x161))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv2 32))) ?x173))))
 (let (($x180 (= input.spec-%var-l-0.2.1.2.0 ?x179)))
 (let (($x181 (and $x180 true)))
 (let (($x25 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x182 (=> $x25 $x181)))
 (let (($x162 (= (_ bv0 32) ?x161)))
 (let ((?x163 (ite $x162 (_ bv0 32) (_ bv1 32))))
 (let (($x167 (bvuge ?x163 (_ bv1 32))))
 (let (($x168 (= $x25 $x167)))
 (let (($x20 (= false false)))
 (let (($x12 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x29 (=> $x12 $x20)))
 (let (($x164 (= ?x163 (_ bv0 32))))
 (let (($x165 (= $x12 $x164)))
 (let (($x166 (and $x165 $x29)))
 (let (($x169 (and $x166 $x168)))
 (let (($x183 (and $x169 $x182)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x141)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x145)))
 (let (($x149 (= input.spec-%var-l-0.2.0 ?x148)))
 (let (($x184 (and $x149 $x183)))
 (let (($x132 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x185 (=> $x132 $x184)))
 (let ((?x127 (ite $x126 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x127 (_ bv1 32))))
 (let (($x134 (= $x132 $x133)))
 (let (($x124 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x130 (=> $x124 $x20)))
 (let (($x128 (= ?x127 (_ bv0 32))))
 (let (($x129 (= $x124 $x128)))
 (let (($x131 (and $x129 $x130)))
 (let (($x135 (and $x131 $x134)))
 (let (($x186 (and $x135 $x185)))
 (let (($x187 (= $x186 true)))
 (let (($x188 (= $x187 true)))
 (let (($x189 (= $x188 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x115)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x110 $x113)))
 (let (($x117 (and $x114 $x116)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x96 $x117)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x103)))))))
 (let (($x119 (and $x109 $x118)))
 (let (($x120 (= $x119 true)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let (($x190 (and $x122 $x189)))
 (let (($x208 (and $x190 $x207)))
 (let (($x223 (and $x208 $x222)))
 (let (($x224 (and $x20 $x223)))
 (let (($x86 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x87 (and $x86 true)))
 (let (($x18 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x88 (=> $x18 $x87)))
 (let (($x82 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x83 (= $x18 $x82)))
 (let (($x36 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x13 (=> $x36 $x20)))
 (let (($x79 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x80 (= $x36 $x79)))
 (let (($x81 (and $x80 $x13)))
 (let (($x84 (and $x81 $x83)))
 (let (($x89 (and $x84 $x88)))
 (let (($x77 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x90 (and $x77 $x89)))
 (let (($x91 (=> $x25 $x90)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x74 (= $x25 $x73)))
 (let (($x70 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x71 (= $x12 $x70)))
 (let (($x72 (and $x71 $x29)))
 (let (($x75 (and $x72 $x74)))
 (let (($x92 (and $x75 $x91)))
 (let (($x225 (and $x92 $x224)))
 (let (($x63 (=> $x18 true)))
 (let (($x60 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x61 (= $x18 $x60)))
 (let (($x57 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x58 (= $x36 $x57)))
 (let (($x59 (and $x58 $x13)))
 (let (($x62 (and $x59 $x61)))
 (let (($x64 (and $x62 $x63)))
 (let (($x55 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x65 (and $x55 $x64)))
 (let (($x66 (=> $x25 $x65)))
 (let (($x51 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x52 (= $x25 $x51)))
 (let (($x31 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x10 (= $x12 $x31)))
 (let (($x50 (and $x10 $x29)))
 (let (($x53 (and $x50 $x52)))
 (let (($x67 (and $x53 $x66)))
 (let (($x5 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x68 (and $x5 $x67)))
 (let (($x226 (and $x68 $x225)))
 (let (($x34 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x14 (and $x34 true)))
 (let (($x30 (=> $x18 $x14)))
 (let (($x44 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x8 (= $x18 $x44)))
 (let (($x16 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x38 (= $x36 $x16)))
 (let (($x37 (and $x38 $x13)))
 (let (($x6 (and $x37 $x8)))
 (let (($x41 (and $x6 $x30)))
 (let (($x7 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x45 (and $x7 $x41)))
 (let (($x17 (=> $x25 $x45)))
 (let (($x49 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x26 (= $x25 $x49)))
 (let (($x11 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x47 (= $x12 $x11)))
 (let (($x32 (and $x47 $x29)))
 (let (($x40 (and $x32 $x26)))
 (let (($x28 (and $x40 $x17)))
 (let (($x227 (and $x28 $x226)))
 (let (($x19 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x228 (and $x19 $x227)))
 (let (($x232 (=> $x228 $x231)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x126 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x191 (not $x126)))
 (let (($x229 (or $x126 $x191)))
 (let (($x230 (= $x229 false)))
 (let (($x231 (= $x230 true)))
 (let ((?x210 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x218 (concat ?x215 (concat ?x212 ?x210)))))
 (let (($x220 (= ?x219 input.dst.llvm-%l)))
 (let (($x221 (= $x220 true)))
 (let (($x222 (= $x221 true)))
 (let ((?x192 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x199 (bvugt ?x192 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x192 (_ bv3 32)))))
 (let (($x205 (=> (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x199)))))))
 (let (($x193 (=> (and $x191 (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x198 $x199)))))))
 (let (($x194 (= $x193 true)))
 (let (($x206 (= $x194 true)))
 (let (($x207 (= $x206 true)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x155 (concat ?x154 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x161 (concat ?x160 (concat ?x157 ?x155))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem ?x161))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv2 32))) ?x173))))
 (let (($x180 (= input.spec-%var-l-0.2.1.2.0 ?x179)))
 (let (($x181 (and $x180 true)))
 (let (($x25 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x182 (=> $x25 $x181)))
 (let (($x162 (= (_ bv0 32) ?x161)))
 (let ((?x163 (ite $x162 (_ bv0 32) (_ bv1 32))))
 (let (($x167 (bvuge ?x163 (_ bv1 32))))
 (let (($x168 (= $x25 $x167)))
 (let (($x20 (= false false)))
 (let (($x12 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x29 (=> $x12 $x20)))
 (let (($x164 (= ?x163 (_ bv0 32))))
 (let (($x165 (= $x12 $x164)))
 (let (($x166 (and $x165 $x29)))
 (let (($x169 (and $x166 $x168)))
 (let (($x183 (and $x169 $x182)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x141)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x145)))
 (let (($x149 (= input.spec-%var-l-0.2.0 ?x148)))
 (let (($x184 (and $x149 $x183)))
 (let (($x132 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x185 (=> $x132 $x184)))
 (let ((?x127 (ite $x126 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x127 (_ bv1 32))))
 (let (($x134 (= $x132 $x133)))
 (let (($x124 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x130 (=> $x124 $x20)))
 (let (($x128 (= ?x127 (_ bv0 32))))
 (let (($x129 (= $x124 $x128)))
 (let (($x131 (and $x129 $x130)))
 (let (($x135 (and $x131 $x134)))
 (let (($x186 (and $x135 $x185)))
 (let (($x187 (= $x186 true)))
 (let (($x188 (= $x187 true)))
 (let (($x189 (= $x188 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x115)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x110 $x113)))
 (let (($x117 (and $x114 $x116)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x96 $x117)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x103)))))))
 (let (($x119 (and $x109 $x118)))
 (let (($x120 (= $x119 true)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let (($x190 (and $x122 $x189)))
 (let (($x208 (and $x190 $x207)))
 (let (($x223 (and $x208 $x222)))
 (let (($x224 (and $x20 $x223)))
 (let (($x86 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x87 (and $x86 true)))
 (let (($x18 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x88 (=> $x18 $x87)))
 (let (($x82 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x83 (= $x18 $x82)))
 (let (($x36 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x13 (=> $x36 $x20)))
 (let (($x79 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x80 (= $x36 $x79)))
 (let (($x81 (and $x80 $x13)))
 (let (($x84 (and $x81 $x83)))
 (let (($x89 (and $x84 $x88)))
 (let (($x77 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x90 (and $x77 $x89)))
 (let (($x91 (=> $x25 $x90)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x74 (= $x25 $x73)))
 (let (($x70 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x71 (= $x12 $x70)))
 (let (($x72 (and $x71 $x29)))
 (let (($x75 (and $x72 $x74)))
 (let (($x92 (and $x75 $x91)))
 (let (($x225 (and $x92 $x224)))
 (let (($x63 (=> $x18 true)))
 (let (($x60 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x61 (= $x18 $x60)))
 (let (($x57 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x58 (= $x36 $x57)))
 (let (($x59 (and $x58 $x13)))
 (let (($x62 (and $x59 $x61)))
 (let (($x64 (and $x62 $x63)))
 (let (($x55 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x65 (and $x55 $x64)))
 (let (($x66 (=> $x25 $x65)))
 (let (($x51 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x52 (= $x25 $x51)))
 (let (($x31 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x10 (= $x12 $x31)))
 (let (($x50 (and $x10 $x29)))
 (let (($x53 (and $x50 $x52)))
 (let (($x67 (and $x53 $x66)))
 (let (($x5 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x68 (and $x5 $x67)))
 (let (($x226 (and $x68 $x225)))
 (let (($x34 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x14 (and $x34 true)))
 (let (($x30 (=> $x18 $x14)))
 (let (($x44 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x8 (= $x18 $x44)))
 (let (($x16 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x38 (= $x36 $x16)))
 (let (($x37 (and $x38 $x13)))
 (let (($x6 (and $x37 $x8)))
 (let (($x41 (and $x6 $x30)))
 (let (($x7 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x45 (and $x7 $x41)))
 (let (($x17 (=> $x25 $x45)))
 (let (($x49 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x26 (= $x25 $x49)))
 (let (($x11 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x47 (= $x12 $x11)))
 (let (($x32 (and $x47 $x29)))
 (let (($x40 (and $x32 $x26)))
 (let (($x28 (and $x40 $x17)))
 (let (($x227 (and $x28 $x226)))
 (let (($x19 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x228 (and $x19 $x227)))
 (let (($x232 (=> $x228 $x231)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00040000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xfe)
                                #xfea60005
                                #xff)
                         #xfea60003
                         #xff)
                  #x00040000
                  #xff)))
  (store (store (store a!1 #xfea60006 #xff) #x00040002 #xa5) #x00040001 #xff)))
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xfefefefe)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #xfefefefe)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #xfefefefe)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #xfefefefe)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #xfefefefe)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfea5ffff)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #xfefefefe)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xfefefefe)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00040003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00040000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv7 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x127 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x195 (not $x127)))
 (let (($x232 (or $x127 $x195)))
 (let (($x233 (= $x232 false)))
 (let (($x94 (= $x233 true)))
 (let ((?x215 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x221 (concat ?x216 (concat ?x212 ?x215)))))
 (let (($x223 (= ?x222 input.dst.llvm-%l)))
 (let (($x224 (= $x223 true)))
 (let (($x225 (= $x224 true)))
 (let ((?x196 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x202 (bvugt ?x196 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x196 (_ bv3 32)))))
 (let (($x207 (=> (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x201 $x202)))))))
 (let (($x204 (=> (and $x195 (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x201 $x202)))))))
 (let (($x197 (= $x204 true)))
 (let (($x208 (= $x197 true)))
 (let (($x217 (= $x208 true)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x154 (concat ?x153 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x163 (concat ?x162 (concat ?x155 ?x154))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x172))))
 (let (($x182 (= input.spec-%var-l-0.2.1.2.0 ?x181)))
 (let (($x183 (and $x182 false)))
 (let (($x20 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x184 (=> $x20 $x183)))
 (let (($x164 (= (_ bv0 32) ?x163)))
 (let ((?x165 (ite $x164 (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge ?x165 (_ bv1 32))))
 (let (($x177 (= $x20 $x169)))
 (let (($x24 (= false false)))
 (let (($x19 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x32 (=> $x19 $x24)))
 (let (($x166 (= ?x165 (_ bv0 32))))
 (let (($x167 (= $x19 $x166)))
 (let (($x168 (and $x167 $x32)))
 (let (($x178 (and $x168 $x177)))
 (let (($x185 (and $x178 $x184)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x139)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x145)))
 (let (($x151 (= input.spec-%var-l-0.2.0 ?x150)))
 (let (($x186 (and $x151 $x185)))
 (let (($x133 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x187 (=> $x133 $x186)))
 (let ((?x128 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x134 (bvuge ?x128 (_ bv1 32))))
 (let (($x135 (= $x133 $x134)))
 (let (($x125 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x131 (=> $x125 $x24)))
 (let (($x129 (= ?x128 (_ bv0 32))))
 (let (($x130 (= $x125 $x129)))
 (let (($x132 (and $x130 $x131)))
 (let (($x136 (and $x132 $x135)))
 (let (($x188 (and $x136 $x187)))
 (let (($x189 (= $x188 true)))
 (let (($x190 (= $x189 true)))
 (let (($x191 (= $x190 true)))
 (let ((?x116 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x116)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x111 $x114)))
 (let (($x118 (and $x115 $x117)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x108 $x118)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x105)))))))
 (let (($x120 (and $x110 $x119)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let (($x192 (and $x123 $x191)))
 (let (($x218 (and $x192 $x217)))
 (let (($x226 (and $x218 $x225)))
 (let (($x227 (and $x24 $x226)))
 (let (($x85 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x86 (and $x85 false)))
 (let (($x37 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x87 (=> $x37 $x86)))
 (let (($x81 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x82 (= $x37 $x81)))
 (let (($x22 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x38 (=> $x22 $x24)))
 (let (($x78 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x79 (= $x22 $x78)))
 (let (($x80 (and $x79 $x38)))
 (let (($x83 (and $x80 $x82)))
 (let (($x88 (and $x83 $x87)))
 (let (($x76 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x89 (and $x76 $x88)))
 (let (($x90 (=> $x20 $x89)))
 (let (($x72 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x73 (= $x20 $x72)))
 (let (($x69 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x70 (= $x19 $x69)))
 (let (($x71 (and $x70 $x32)))
 (let (($x74 (and $x71 $x73)))
 (let (($x91 (and $x74 $x90)))
 (let (($x228 (and $x91 $x227)))
 (let (($x62 (=> $x37 false)))
 (let (($x59 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x60 (= $x37 $x59)))
 (let (($x56 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x57 (= $x22 $x56)))
 (let (($x58 (and $x57 $x38)))
 (let (($x61 (and $x58 $x60)))
 (let (($x63 (and $x61 $x62)))
 (let (($x54 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x64 (and $x54 $x63)))
 (let (($x65 (=> $x20 $x64)))
 (let (($x50 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x51 (= $x20 $x50)))
 (let (($x33 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x31 (= $x19 $x33)))
 (let (($x10 (and $x31 $x32)))
 (let (($x52 (and $x10 $x51)))
 (let (($x66 (and $x52 $x65)))
 (let (($x43 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x67 (and $x43 $x66)))
 (let (($x229 (and $x67 $x228)))
 (let (($x39 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x34 (and $x39 false)))
 (let (($x14 (=> $x37 $x34)))
 (let (($x18 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x44 (= $x37 $x18)))
 (let (($x15 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x16 (= $x22 $x15)))
 (let (($x13 (and $x16 $x38)))
 (let (($x8 (and $x13 $x44)))
 (let (($x30 (and $x8 $x14)))
 (let (($x48 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x41 (and $x48 $x30)))
 (let (($x45 (=> $x20 $x41)))
 (let (($x25 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x49 (= $x20 $x25)))
 (let (($x12 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x47 (= $x19 $x12)))
 (let (($x29 (and $x47 $x32)))
 (let (($x26 (and $x29 $x49)))
 (let (($x17 (and $x26 $x45)))
 (let (($x230 (and $x17 $x229)))
 (let (($x21 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x231 (and $x21 $x230)))
 (let (($x209 (=> $x231 $x94)))
 (not $x209)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x127 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x195 (not $x127)))
 (let (($x232 (or $x127 $x195)))
 (let (($x233 (= $x232 false)))
 (let (($x94 (= $x233 true)))
 (let ((?x215 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x221 (concat ?x216 (concat ?x212 ?x215)))))
 (let (($x223 (= ?x222 input.dst.llvm-%l)))
 (let (($x224 (= $x223 true)))
 (let (($x225 (= $x224 true)))
 (let ((?x196 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x202 (bvugt ?x196 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x196 (_ bv3 32)))))
 (let (($x207 (=> (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x201 $x202)))))))
 (let (($x204 (=> (and $x195 (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x201 $x202)))))))
 (let (($x197 (= $x204 true)))
 (let (($x208 (= $x197 true)))
 (let (($x217 (= $x208 true)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x154 (concat ?x153 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x163 (concat ?x162 (concat ?x155 ?x154))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x172))))
 (let (($x182 (= input.spec-%var-l-0.2.1.2.0 ?x181)))
 (let (($x183 (and $x182 false)))
 (let (($x20 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x184 (=> $x20 $x183)))
 (let (($x164 (= (_ bv0 32) ?x163)))
 (let ((?x165 (ite $x164 (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge ?x165 (_ bv1 32))))
 (let (($x177 (= $x20 $x169)))
 (let (($x24 (= false false)))
 (let (($x19 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x32 (=> $x19 $x24)))
 (let (($x166 (= ?x165 (_ bv0 32))))
 (let (($x167 (= $x19 $x166)))
 (let (($x168 (and $x167 $x32)))
 (let (($x178 (and $x168 $x177)))
 (let (($x185 (and $x178 $x184)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x139)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x145)))
 (let (($x151 (= input.spec-%var-l-0.2.0 ?x150)))
 (let (($x186 (and $x151 $x185)))
 (let (($x133 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x187 (=> $x133 $x186)))
 (let ((?x128 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x134 (bvuge ?x128 (_ bv1 32))))
 (let (($x135 (= $x133 $x134)))
 (let (($x125 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x131 (=> $x125 $x24)))
 (let (($x129 (= ?x128 (_ bv0 32))))
 (let (($x130 (= $x125 $x129)))
 (let (($x132 (and $x130 $x131)))
 (let (($x136 (and $x132 $x135)))
 (let (($x188 (and $x136 $x187)))
 (let (($x189 (= $x188 true)))
 (let (($x190 (= $x189 true)))
 (let (($x191 (= $x190 true)))
 (let ((?x116 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x116)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x111 $x114)))
 (let (($x118 (and $x115 $x117)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x108 $x118)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x105)))))))
 (let (($x120 (and $x110 $x119)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let (($x192 (and $x123 $x191)))
 (let (($x218 (and $x192 $x217)))
 (let (($x226 (and $x218 $x225)))
 (let (($x227 (and $x24 $x226)))
 (let (($x85 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x86 (and $x85 false)))
 (let (($x37 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x87 (=> $x37 $x86)))
 (let (($x81 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x82 (= $x37 $x81)))
 (let (($x22 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x38 (=> $x22 $x24)))
 (let (($x78 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x79 (= $x22 $x78)))
 (let (($x80 (and $x79 $x38)))
 (let (($x83 (and $x80 $x82)))
 (let (($x88 (and $x83 $x87)))
 (let (($x76 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x89 (and $x76 $x88)))
 (let (($x90 (=> $x20 $x89)))
 (let (($x72 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x73 (= $x20 $x72)))
 (let (($x69 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x70 (= $x19 $x69)))
 (let (($x71 (and $x70 $x32)))
 (let (($x74 (and $x71 $x73)))
 (let (($x91 (and $x74 $x90)))
 (let (($x228 (and $x91 $x227)))
 (let (($x62 (=> $x37 false)))
 (let (($x59 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x60 (= $x37 $x59)))
 (let (($x56 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x57 (= $x22 $x56)))
 (let (($x58 (and $x57 $x38)))
 (let (($x61 (and $x58 $x60)))
 (let (($x63 (and $x61 $x62)))
 (let (($x54 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x64 (and $x54 $x63)))
 (let (($x65 (=> $x20 $x64)))
 (let (($x50 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x51 (= $x20 $x50)))
 (let (($x33 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x31 (= $x19 $x33)))
 (let (($x10 (and $x31 $x32)))
 (let (($x52 (and $x10 $x51)))
 (let (($x66 (and $x52 $x65)))
 (let (($x43 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x67 (and $x43 $x66)))
 (let (($x229 (and $x67 $x228)))
 (let (($x39 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x34 (and $x39 false)))
 (let (($x14 (=> $x37 $x34)))
 (let (($x18 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x44 (= $x37 $x18)))
 (let (($x15 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x16 (= $x22 $x15)))
 (let (($x13 (and $x16 $x38)))
 (let (($x8 (and $x13 $x44)))
 (let (($x30 (and $x8 $x14)))
 (let (($x48 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x41 (and $x48 $x30)))
 (let (($x45 (=> $x20 $x41)))
 (let (($x25 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x49 (= $x20 $x25)))
 (let (($x12 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x47 (= $x19 $x12)))
 (let (($x29 (and $x47 $x32)))
 (let (($x26 (and $x29 $x49)))
 (let (($x17 (and $x26 $x45)))
 (let (($x230 (and $x17 $x229)))
 (let (($x21 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x231 (and $x21 $x230)))
 (let (($x209 (=> $x231 $x94)))
 (not $x209)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%var-l-0.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv7 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7dfe8000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
                     #x7dfe8001
                     #x7f)
              #x7dfe8002
              #x9e)
       #x7dfe8003
       #x58))
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x589e7f00)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7dfe8003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7dfe8000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x29 (not $x35)))
 (let (($x234 (or $x35 $x29)))
 (let (($x235 (not $x234)))
 (let (($x161 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x156 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x147 (or $x156 $x161)))
 (let (($x236 (or $x147 $x235)))
 (let (($x237 (= $x236 true)))
 (let (($x238 (= $x237 true)))
 (let ((?x210 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x229 (concat ?x228 (concat ?x225 (concat ?x222 ?x210)))))
 (let (($x230 (= ?x229 input.dst.llvm-%l)))
 (let (($x231 (= $x230 true)))
 (let (($x232 (= $x231 true)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x181 (concat ?x176 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x187 (concat ?x186 (concat ?x183 ?x181))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x201))))
 (let (($x204 (= input.spec-%var-l-0.2.1.2.0 ?x207)))
 (let (($x197 (and $x204 true)))
 (let (($x14 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x208 (=> $x14 $x197)))
 (let (($x188 (= (_ bv0 32) ?x187)))
 (let ((?x189 (ite $x188 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x189 (_ bv1 32))))
 (let (($x196 (= $x14 $x195)))
 (let (($x9 (= false false)))
 (let (($x18 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x39 (=> $x18 $x9)))
 (let (($x190 (= ?x189 (_ bv0 32))))
 (let (($x191 (= $x18 $x190)))
 (let (($x192 (and $x191 $x39)))
 (let (($x198 (and $x192 $x196)))
 (let (($x217 (and $x198 $x208)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x168)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x179)))
 (let (($x175 (= input.spec-%var-l-0.2.0 ?x173)))
 (let (($x218 (and $x175 $x217)))
 (let (($x220 (=> $x156 $x218)))
 (let ((?x162 (ite $x35 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x162 (_ bv1 32))))
 (let (($x158 (= $x156 $x154)))
 (let (($x157 (=> $x161 $x9)))
 (let (($x152 (= ?x162 (_ bv0 32))))
 (let (($x155 (= $x161 $x152)))
 (let (($x153 (and $x155 $x157)))
 (let (($x163 (and $x153 $x158)))
 (let (($x221 (and $x163 $x220)))
 (let (($x213 (= $x221 true)))
 (let (($x216 (= $x213 true)))
 (let (($x211 (= $x216 true)))
 (let (($x139 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x145 (= $x139 true)))
 (let (($x150 (= $x145 true)))
 (let (($x151 (= $x150 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x136)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x132 $x134)))
 (let (($x148 (and $x135 $x146)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x120 $x148)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x125)))))))
 (let (($x140 (and $x131 $x149)))
 (let (($x138 (= $x140 true)))
 (let (($x141 (= $x138 true)))
 (let (($x143 (= $x141 true)))
 (let (($x159 (and $x143 $x151)))
 (let (($x212 (and $x159 $x211)))
 (let (($x233 (and $x212 $x232)))
 (let (($x94 (and $x9 $x233)))
 (let (($x111 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x112 (and $x111 true)))
 (let (($x53 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x113 (=> $x53 $x112)))
 (let (($x95 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x110 (= $x53 $x95)))
 (let (($x33 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x51 (=> $x33 $x9)))
 (let (($x106 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x107 (= $x33 $x106)))
 (let (($x109 (and $x107 $x51)))
 (let (($x98 (and $x109 $x110)))
 (let (($x114 (and $x98 $x113)))
 (let (($x100 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x115 (and $x100 $x114)))
 (let (($x116 (=> $x14 $x115)))
 (let (($x96 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x102 (= $x14 $x96)))
 (let (($x91 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x99 (= $x18 $x91)))
 (let (($x101 (and $x99 $x39)))
 (let (($x103 (and $x101 $x102)))
 (let (($x117 (and $x103 $x116)))
 (let (($x209 (and $x117 $x94)))
 (let (($x84 (=> $x53 true)))
 (let (($x81 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x82 (= $x53 $x81)))
 (let (($x78 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x79 (= $x33 $x78)))
 (let (($x80 (and $x79 $x51)))
 (let (($x83 (and $x80 $x82)))
 (let (($x85 (and $x83 $x84)))
 (let (($x76 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x86 (and $x76 $x85)))
 (let (($x87 (=> $x14 $x86)))
 (let (($x72 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x73 (= $x14 $x72)))
 (let (($x69 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x70 (= $x18 $x69)))
 (let (($x71 (and $x70 $x39)))
 (let (($x74 (and $x71 $x73)))
 (let (($x88 (and $x74 $x87)))
 (let (($x67 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x89 (and $x67 $x88)))
 (let (($x137 (and $x89 $x209)))
 (let (($x59 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x60 (and $x59 true)))
 (let (($x61 (=> $x53 $x60)))
 (let (($x54 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x55 (= $x53 $x54)))
 (let (($x10 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x50 (= $x33 $x10)))
 (let (($x52 (and $x50 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x62 (and $x56 $x61)))
 (let (($x43 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x63 (and $x43 $x62)))
 (let (($x64 (=> $x14 $x63)))
 (let (($x30 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x41 (= $x14 $x30)))
 (let (($x8 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x6 (= $x18 $x8)))
 (let (($x34 (and $x6 $x39)))
 (let (($x45 (and $x34 $x41)))
 (let (($x65 (and $x45 $x64)))
 (let (($x92 (and $x65 $x137)))
 (let (($x13 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x97 (and $x13 $x92)))
 (let ((?x19 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x42 (bvugt ?x19 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x19 (_ bv3 32)))))
 (let (($x16 (=> (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x42)))))))
 (let (($x12 (=> (and $x29 (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x40 $x42)))))))
 (let (($x214 (and $x12 $x97)))
 (let (($x239 (=> $x214 $x238)))
 (not $x239))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x29 (not $x35)))
 (let (($x234 (or $x35 $x29)))
 (let (($x235 (not $x234)))
 (let (($x161 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x156 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x147 (or $x156 $x161)))
 (let (($x236 (or $x147 $x235)))
 (let (($x237 (= $x236 true)))
 (let (($x238 (= $x237 true)))
 (let ((?x210 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x229 (concat ?x228 (concat ?x225 (concat ?x222 ?x210)))))
 (let (($x230 (= ?x229 input.dst.llvm-%l)))
 (let (($x231 (= $x230 true)))
 (let (($x232 (= $x231 true)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x181 (concat ?x176 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x187 (concat ?x186 (concat ?x183 ?x181))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x201))))
 (let (($x204 (= input.spec-%var-l-0.2.1.2.0 ?x207)))
 (let (($x197 (and $x204 true)))
 (let (($x14 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x208 (=> $x14 $x197)))
 (let (($x188 (= (_ bv0 32) ?x187)))
 (let ((?x189 (ite $x188 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x189 (_ bv1 32))))
 (let (($x196 (= $x14 $x195)))
 (let (($x9 (= false false)))
 (let (($x18 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x39 (=> $x18 $x9)))
 (let (($x190 (= ?x189 (_ bv0 32))))
 (let (($x191 (= $x18 $x190)))
 (let (($x192 (and $x191 $x39)))
 (let (($x198 (and $x192 $x196)))
 (let (($x217 (and $x198 $x208)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x168)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x179)))
 (let (($x175 (= input.spec-%var-l-0.2.0 ?x173)))
 (let (($x218 (and $x175 $x217)))
 (let (($x220 (=> $x156 $x218)))
 (let ((?x162 (ite $x35 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x162 (_ bv1 32))))
 (let (($x158 (= $x156 $x154)))
 (let (($x157 (=> $x161 $x9)))
 (let (($x152 (= ?x162 (_ bv0 32))))
 (let (($x155 (= $x161 $x152)))
 (let (($x153 (and $x155 $x157)))
 (let (($x163 (and $x153 $x158)))
 (let (($x221 (and $x163 $x220)))
 (let (($x213 (= $x221 true)))
 (let (($x216 (= $x213 true)))
 (let (($x211 (= $x216 true)))
 (let (($x139 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x145 (= $x139 true)))
 (let (($x150 (= $x145 true)))
 (let (($x151 (= $x150 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x136)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x132 $x134)))
 (let (($x148 (and $x135 $x146)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x120 $x148)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x125)))))))
 (let (($x140 (and $x131 $x149)))
 (let (($x138 (= $x140 true)))
 (let (($x141 (= $x138 true)))
 (let (($x143 (= $x141 true)))
 (let (($x159 (and $x143 $x151)))
 (let (($x212 (and $x159 $x211)))
 (let (($x233 (and $x212 $x232)))
 (let (($x94 (and $x9 $x233)))
 (let (($x111 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x112 (and $x111 true)))
 (let (($x53 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x113 (=> $x53 $x112)))
 (let (($x95 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x110 (= $x53 $x95)))
 (let (($x33 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x51 (=> $x33 $x9)))
 (let (($x106 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x107 (= $x33 $x106)))
 (let (($x109 (and $x107 $x51)))
 (let (($x98 (and $x109 $x110)))
 (let (($x114 (and $x98 $x113)))
 (let (($x100 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x115 (and $x100 $x114)))
 (let (($x116 (=> $x14 $x115)))
 (let (($x96 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x102 (= $x14 $x96)))
 (let (($x91 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x99 (= $x18 $x91)))
 (let (($x101 (and $x99 $x39)))
 (let (($x103 (and $x101 $x102)))
 (let (($x117 (and $x103 $x116)))
 (let (($x209 (and $x117 $x94)))
 (let (($x84 (=> $x53 true)))
 (let (($x81 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x82 (= $x53 $x81)))
 (let (($x78 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x79 (= $x33 $x78)))
 (let (($x80 (and $x79 $x51)))
 (let (($x83 (and $x80 $x82)))
 (let (($x85 (and $x83 $x84)))
 (let (($x76 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x86 (and $x76 $x85)))
 (let (($x87 (=> $x14 $x86)))
 (let (($x72 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x73 (= $x14 $x72)))
 (let (($x69 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x70 (= $x18 $x69)))
 (let (($x71 (and $x70 $x39)))
 (let (($x74 (and $x71 $x73)))
 (let (($x88 (and $x74 $x87)))
 (let (($x67 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x89 (and $x67 $x88)))
 (let (($x137 (and $x89 $x209)))
 (let (($x59 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x60 (and $x59 true)))
 (let (($x61 (=> $x53 $x60)))
 (let (($x54 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x55 (= $x53 $x54)))
 (let (($x10 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x50 (= $x33 $x10)))
 (let (($x52 (and $x50 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x62 (and $x56 $x61)))
 (let (($x43 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x63 (and $x43 $x62)))
 (let (($x64 (=> $x14 $x63)))
 (let (($x30 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x41 (= $x14 $x30)))
 (let (($x8 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x6 (= $x18 $x8)))
 (let (($x34 (and $x6 $x39)))
 (let (($x45 (and $x34 $x41)))
 (let (($x65 (and $x45 $x64)))
 (let (($x92 (and $x65 $x137)))
 (let (($x13 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x97 (and $x13 $x92)))
 (let ((?x19 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x42 (bvugt ?x19 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x19 (_ bv3 32)))))
 (let (($x16 (=> (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x42)))))))
 (let (($x12 (=> (and $x29 (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x40 $x42)))))))
 (let (($x214 (and $x12 $x97)))
 (let (($x239 (=> $x214 $x238)))
 (not $x239))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var1057X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var1057X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1057X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1057X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1054X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1054X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1054X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var1051X () (_ BitVec 32))
(declare-fun ind-%var1051X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1051X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1051X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1048X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1048X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1048X.0 () (_ BitVec 32))
(declare-fun ind-%var1045X () (_ BitVec 32))
(declare-fun ind-%var1042X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1042X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1042X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1057X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1057X (_ bv4 32))))))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1057X (_ bv4 32)) (_ bv2 32))) ?x414)))
 (let ((?x420 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1057X (_ bv4 32)) (_ bv3 32))) ?x417)))
 (let (($x421 (= ind-%var1057X.2.1 ?x420)))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd ind-%var1057X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1057X))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd ind-%var1057X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1057X (_ bv2 32))) ?x401))))
 (let (($x408 (= ind-%var1057X.2.0 ?x407)))
 (let (($x60 (= false false)))
 (let (($x394 (= (_ bv0 32) ind-%var1057X)))
 (let ((?x395 (ite $x394 (_ bv0 32) (_ bv1 32))))
 (let (($x396 (= ind-%var1057X.0 ?x395)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x46 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x52 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x44 (bvadd ?x52 (_ bv3 32))))
 (let ((?x245 (concat (select input.dst.llvm-mem ?x44) (concat ?x242 ?x46))))
 (let (($x391 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 ?x245)))
 (let (($x425 (and (and (and (and $x391 $x396) $x60) $x408) $x421)))
 (let (($x385 (= ind-%var1054X.2.1 ind-%var1054X.2.1)))
 (let (($x383 (= ind-%var1054X.2.0 ind-%var1054X.2.0)))
 (let (($x381 (= ind-%var1054X.0 ind-%var1054X.0)))
 (let (($x331 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x389 (and (and (and (and $x331 $x381) $x60) $x383) $x385)))
 (let (($x20 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x54 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x329 (and $x54 $x20)))
 (let (($x427 (and (and $x329 $x389) $x425)))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1051X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1051X (_ bv4 32))))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1051X (_ bv4 32)) (_ bv2 32))) ?x366)))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1051X (_ bv4 32)) (_ bv3 32))) ?x369)))
 (let (($x373 (= ind-%var1051X.2.1 ?x372)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ind-%var1051X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1051X))))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ind-%var1051X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1051X (_ bv2 32))) ?x353))))
 (let (($x360 (= ind-%var1051X.2.0 ?x359)))
 (let (($x346 (= (_ bv0 32) ind-%var1051X)))
 (let ((?x347 (ite $x346 (_ bv0 32) (_ bv1 32))))
 (let (($x348 (= ind-%var1051X.0 ?x347)))
 (let (($x343 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 ?x245)))
 (let (($x377 (and (and (and (and $x343 $x348) $x60) $x360) $x373)))
 (let (($x337 (= ind-%var1048X.2.1 ind-%var1048X.2.1)))
 (let (($x335 (= ind-%var1048X.2.0 ind-%var1048X.2.0)))
 (let (($x340 (and (and (and $x331 (= ind-%var1048X.0 ind-%var1048X.0)) $x60) $x335)))
 (let (($x341 (and $x340 $x337)))
 (let (($x379 (and (and $x329 $x341) $x377)))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1045X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1045X (_ bv4 32))))))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1045X (_ bv4 32)) (_ bv2 32))) ?x315)))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1045X (_ bv4 32)) (_ bv3 32))) ?x318)))
 (let (($x322 (= ?x321 ?x321)))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd ind-%var1045X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1045X))))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ind-%var1045X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1045X (_ bv2 32))) ?x303))))
 (let (($x310 (= ?x309 ?x309)))
 (let (($x297 (= (_ bv0 32) ind-%var1045X)))
 (let ((?x298 (ite $x297 (_ bv0 32) (_ bv1 32))))
 (let (($x299 (= ?x298 ?x298)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x156 (concat ?x153 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x170 (concat ?x180 (concat ?x158 ?x156))))
 (let ((?x284 (bvadd ?x170 (_ bv4 32))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv1 32))) (select input.dst.llvm-mem ?x284))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv2 32))) ?x288))))
 (let (($x295 (= ?x294 ?x245)))
 (let (($x326 (and (and (and (and $x295 $x299) $x60) $x310) $x322)))
 (let (($x279 (= ind-%var1042X.2.1 ind-%var1042X.2.1)))
 (let (($x277 (= ind-%var1042X.2.0 ind-%var1042X.2.0)))
 (let (($x275 (= ind-%var1042X.0 ind-%var1042X.0)))
 (let (($x273 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x283 (and (and (and (and $x273 $x275) $x60) $x277) $x279)))
 (let (($x130 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x270 (and $x130 $x54)))
 (let (($x328 (and (and $x270 $x283) $x326)))
 (let (($x429 (or (or $x328 $x379) $x427)))
 (let (($x430 (= $x429 true)))
 (let (($x431 (= $x430 true)))
 (let ((?x212 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x226 (concat ?x223 (concat ?x219 (concat ?x228 ?x212)))))
 (let (($x259 (= ?x226 input.dst.llvm-%l)))
 (let (($x260 (= $x259 true)))
 (let (($x261 (= $x260 true)))
 (let (($x247 (= (bvand ?x245 (_ bv4294967288 32)) ?x245)))
 (let (($x239 (= (bvand ?x52 (_ bv4294967292 32)) ?x52)))
 (let (($x248 (and $x239 $x247)))
 (let (($x235 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x236 (and true $x235)))
 (let (($x92 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x52 (bvsub ?x52 (_ bv4 32))) (bvult ?x52 (bvsub ?x52 (_ bv4 32))))))
 (let (($x251 (and (and (and $x92 $x236) $x239) $x248)))
 (let (($x252 (= true $x251)))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x35 (not $x23)))
 (let (($x253 (=> $x35 $x252)))
 (let (($x229 (= input.dst.llvm-%l ?x226)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x218)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x197)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x217 (and $x204 $x208)))
 (let (($x221 (and $x217 $x220)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x196 $x221)))
 (let (($x203 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x207 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x202 $x203)))))))
 (let (($x216 (and $x207 $x213)))
 (let (($x230 (and $x216 $x229)))
 (let (($x125 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x231 (and $x125 $x230)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x185))))
 (let (($x181 (= input.spec-%var-l-0.2.1.2.0 ?x174)))
 (let (($x184 (and $x181 true)))
 (let (($x187 (=> $x54 $x184)))
 (let (($x169 (= (_ bv0 32) ?x170)))
 (let ((?x177 (ite $x169 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x177 (_ bv1 32))))
 (let (($x168 (= $x54 $x165)))
 (let (($x66 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x49 (=> $x66 $x60)))
 (let (($x178 (= ?x177 (_ bv0 32))))
 (let (($x166 (= $x66 $x178)))
 (let (($x167 (and $x166 $x49)))
 (let (($x179 (and $x167 $x168)))
 (let (($x188 (and $x179 $x187)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x142)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x162 (= input.spec-%var-l-0.2.0 ?x161)))
 (let (($x189 (and $x162 $x188)))
 (let (($x190 (=> $x130 $x189)))
 (let ((?x133 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x148 (bvuge ?x133 (_ bv1 32))))
 (let (($x149 (= $x130 $x148)))
 (let (($x132 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x136 (=> $x132 $x60)))
 (let (($x134 (= ?x133 (_ bv0 32))))
 (let (($x135 (= $x132 $x134)))
 (let (($x146 (and $x135 $x136)))
 (let (($x140 (and $x146 $x149)))
 (let (($x191 (and $x140 $x190)))
 (let (($x232 (and $x191 $x231)))
 (let (($x254 (and $x232 $x253)))
 (let (($x255 (= $x254 true)))
 (let (($x256 (= $x255 true)))
 (let (($x257 (= $x256 true)))
 (let (($x129 (= $x35 true)))
 (let (($x131 (= $x129 true)))
 (let (($x119 (= $x131 true)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x120 (and $x128 $x119)))
 (let (($x258 (and $x120 $x257)))
 (let (($x262 (and $x258 $x261)))
 (let (($x263 (and $x130 $x262)))
 (let (($x264 (and $x60 $x263)))
 (let (($x112 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x113 (and $x112 true)))
 (let (($x114 (=> $x20 $x113)))
 (let (($x110 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x98 (= $x20 $x110)))
 (let (($x26 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x6 (=> $x26 $x60)))
 (let (($x107 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x109 (= $x26 $x107)))
 (let (($x95 (and $x109 $x6)))
 (let (($x108 (and $x95 $x98)))
 (let (($x115 (and $x108 $x114)))
 (let (($x105 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x116 (and $x105 $x115)))
 (let (($x117 (=> $x54 $x116)))
 (let (($x102 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x103 (= $x54 $x102)))
 (let (($x99 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x101 (= $x66 $x99)))
 (let (($x96 (and $x101 $x49)))
 (let (($x104 (and $x96 $x103)))
 (let (($x121 (and $x104 $x117)))
 (let (($x265 (and $x121 $x264)))
 (let (($x85 (=> $x20 true)))
 (let (($x82 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x83 (= $x20 $x82)))
 (let (($x79 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x80 (= $x26 $x79)))
 (let (($x81 (and $x80 $x6)))
 (let (($x84 (and $x81 $x83)))
 (let (($x86 (and $x84 $x85)))
 (let (($x77 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x87 (and $x77 $x86)))
 (let (($x88 (=> $x54 $x87)))
 (let (($x73 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x74 (= $x54 $x73)))
 (let (($x70 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x71 (= $x66 $x70)))
 (let (($x72 (and $x71 $x49)))
 (let (($x75 (and $x72 $x74)))
 (let (($x89 (and $x75 $x88)))
 (let (($x18 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x90 (and $x18 $x89)))
 (let (($x266 (and $x90 $x265)))
 (let (($x64 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x56 (and $x64 true)))
 (let (($x33 (=> $x20 $x56)))
 (let (($x61 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x42 (= $x20 $x61)))
 (let (($x37 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x30 (= $x26 $x37)))
 (let (($x25 (and $x30 $x6)))
 (let (($x57 (and $x25 $x42)))
 (let (($x51 (and $x57 $x33)))
 (let (($x63 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x14 (and $x63 $x51)))
 (let (($x59 (=> $x54 $x14)))
 (let (($x68 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x32 (= $x54 $x68)))
 (let (($x38 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x58 (= $x66 $x38)))
 (let (($x43 (and $x58 $x49)))
 (let (($x11 (and $x43 $x32)))
 (let (($x62 (and $x11 $x59)))
 (let (($x267 (and $x62 $x266)))
 (let (($x69 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x268 (and $x69 $x267)))
 (let (($x24 (bvugt ?x52 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x45 (=> (bvule ?x52 (bvsub (bvadd ?x52 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x24)))))))
 (let (($x29 (=> (and $x35 (bvule ?x52 (bvsub (bvadd ?x52 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x10 $x24)))))))
 (let (($x269 (and $x29 $x268)))
 (let (($x432 (=> $x269 $x431)))
 (not $x432)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var1057X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var1057X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1057X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1057X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1054X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1054X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1054X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var1051X () (_ BitVec 32))
(declare-fun ind-%var1051X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1051X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1051X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1048X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1048X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1048X.0 () (_ BitVec 32))
(declare-fun ind-%var1045X () (_ BitVec 32))
(declare-fun ind-%var1042X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1042X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1042X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1057X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1057X (_ bv4 32))))))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1057X (_ bv4 32)) (_ bv2 32))) ?x414)))
 (let ((?x420 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1057X (_ bv4 32)) (_ bv3 32))) ?x417)))
 (let (($x421 (= ind-%var1057X.2.1 ?x420)))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd ind-%var1057X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1057X))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd ind-%var1057X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1057X (_ bv2 32))) ?x401))))
 (let (($x408 (= ind-%var1057X.2.0 ?x407)))
 (let (($x60 (= false false)))
 (let (($x394 (= (_ bv0 32) ind-%var1057X)))
 (let ((?x395 (ite $x394 (_ bv0 32) (_ bv1 32))))
 (let (($x396 (= ind-%var1057X.0 ?x395)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x46 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x52 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x44 (bvadd ?x52 (_ bv3 32))))
 (let ((?x245 (concat (select input.dst.llvm-mem ?x44) (concat ?x242 ?x46))))
 (let (($x391 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 ?x245)))
 (let (($x425 (and (and (and (and $x391 $x396) $x60) $x408) $x421)))
 (let (($x385 (= ind-%var1054X.2.1 ind-%var1054X.2.1)))
 (let (($x383 (= ind-%var1054X.2.0 ind-%var1054X.2.0)))
 (let (($x381 (= ind-%var1054X.0 ind-%var1054X.0)))
 (let (($x331 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x389 (and (and (and (and $x331 $x381) $x60) $x383) $x385)))
 (let (($x20 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x54 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x329 (and $x54 $x20)))
 (let (($x427 (and (and $x329 $x389) $x425)))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1051X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1051X (_ bv4 32))))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1051X (_ bv4 32)) (_ bv2 32))) ?x366)))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1051X (_ bv4 32)) (_ bv3 32))) ?x369)))
 (let (($x373 (= ind-%var1051X.2.1 ?x372)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ind-%var1051X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1051X))))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ind-%var1051X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1051X (_ bv2 32))) ?x353))))
 (let (($x360 (= ind-%var1051X.2.0 ?x359)))
 (let (($x346 (= (_ bv0 32) ind-%var1051X)))
 (let ((?x347 (ite $x346 (_ bv0 32) (_ bv1 32))))
 (let (($x348 (= ind-%var1051X.0 ?x347)))
 (let (($x343 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 ?x245)))
 (let (($x377 (and (and (and (and $x343 $x348) $x60) $x360) $x373)))
 (let (($x337 (= ind-%var1048X.2.1 ind-%var1048X.2.1)))
 (let (($x335 (= ind-%var1048X.2.0 ind-%var1048X.2.0)))
 (let (($x340 (and (and (and $x331 (= ind-%var1048X.0 ind-%var1048X.0)) $x60) $x335)))
 (let (($x341 (and $x340 $x337)))
 (let (($x379 (and (and $x329 $x341) $x377)))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1045X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1045X (_ bv4 32))))))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1045X (_ bv4 32)) (_ bv2 32))) ?x315)))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1045X (_ bv4 32)) (_ bv3 32))) ?x318)))
 (let (($x322 (= ?x321 ?x321)))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd ind-%var1045X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1045X))))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ind-%var1045X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1045X (_ bv2 32))) ?x303))))
 (let (($x310 (= ?x309 ?x309)))
 (let (($x297 (= (_ bv0 32) ind-%var1045X)))
 (let ((?x298 (ite $x297 (_ bv0 32) (_ bv1 32))))
 (let (($x299 (= ?x298 ?x298)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x156 (concat ?x153 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x170 (concat ?x180 (concat ?x158 ?x156))))
 (let ((?x284 (bvadd ?x170 (_ bv4 32))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv1 32))) (select input.dst.llvm-mem ?x284))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv2 32))) ?x288))))
 (let (($x295 (= ?x294 ?x245)))
 (let (($x326 (and (and (and (and $x295 $x299) $x60) $x310) $x322)))
 (let (($x279 (= ind-%var1042X.2.1 ind-%var1042X.2.1)))
 (let (($x277 (= ind-%var1042X.2.0 ind-%var1042X.2.0)))
 (let (($x275 (= ind-%var1042X.0 ind-%var1042X.0)))
 (let (($x273 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x283 (and (and (and (and $x273 $x275) $x60) $x277) $x279)))
 (let (($x130 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x270 (and $x130 $x54)))
 (let (($x328 (and (and $x270 $x283) $x326)))
 (let (($x429 (or (or $x328 $x379) $x427)))
 (let (($x430 (= $x429 true)))
 (let (($x431 (= $x430 true)))
 (let ((?x212 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x226 (concat ?x223 (concat ?x219 (concat ?x228 ?x212)))))
 (let (($x259 (= ?x226 input.dst.llvm-%l)))
 (let (($x260 (= $x259 true)))
 (let (($x261 (= $x260 true)))
 (let (($x247 (= (bvand ?x245 (_ bv4294967288 32)) ?x245)))
 (let (($x239 (= (bvand ?x52 (_ bv4294967292 32)) ?x52)))
 (let (($x248 (and $x239 $x247)))
 (let (($x235 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x236 (and true $x235)))
 (let (($x92 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x52 (bvsub ?x52 (_ bv4 32))) (bvult ?x52 (bvsub ?x52 (_ bv4 32))))))
 (let (($x251 (and (and (and $x92 $x236) $x239) $x248)))
 (let (($x252 (= true $x251)))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x35 (not $x23)))
 (let (($x253 (=> $x35 $x252)))
 (let (($x229 (= input.dst.llvm-%l ?x226)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x218)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x197)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x217 (and $x204 $x208)))
 (let (($x221 (and $x217 $x220)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x196 $x221)))
 (let (($x203 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x207 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x202 $x203)))))))
 (let (($x216 (and $x207 $x213)))
 (let (($x230 (and $x216 $x229)))
 (let (($x125 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x231 (and $x125 $x230)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x185))))
 (let (($x181 (= input.spec-%var-l-0.2.1.2.0 ?x174)))
 (let (($x184 (and $x181 true)))
 (let (($x187 (=> $x54 $x184)))
 (let (($x169 (= (_ bv0 32) ?x170)))
 (let ((?x177 (ite $x169 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x177 (_ bv1 32))))
 (let (($x168 (= $x54 $x165)))
 (let (($x66 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x49 (=> $x66 $x60)))
 (let (($x178 (= ?x177 (_ bv0 32))))
 (let (($x166 (= $x66 $x178)))
 (let (($x167 (and $x166 $x49)))
 (let (($x179 (and $x167 $x168)))
 (let (($x188 (and $x179 $x187)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x142)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x162 (= input.spec-%var-l-0.2.0 ?x161)))
 (let (($x189 (and $x162 $x188)))
 (let (($x190 (=> $x130 $x189)))
 (let ((?x133 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x148 (bvuge ?x133 (_ bv1 32))))
 (let (($x149 (= $x130 $x148)))
 (let (($x132 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x136 (=> $x132 $x60)))
 (let (($x134 (= ?x133 (_ bv0 32))))
 (let (($x135 (= $x132 $x134)))
 (let (($x146 (and $x135 $x136)))
 (let (($x140 (and $x146 $x149)))
 (let (($x191 (and $x140 $x190)))
 (let (($x232 (and $x191 $x231)))
 (let (($x254 (and $x232 $x253)))
 (let (($x255 (= $x254 true)))
 (let (($x256 (= $x255 true)))
 (let (($x257 (= $x256 true)))
 (let (($x129 (= $x35 true)))
 (let (($x131 (= $x129 true)))
 (let (($x119 (= $x131 true)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x120 (and $x128 $x119)))
 (let (($x258 (and $x120 $x257)))
 (let (($x262 (and $x258 $x261)))
 (let (($x263 (and $x130 $x262)))
 (let (($x264 (and $x60 $x263)))
 (let (($x112 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x113 (and $x112 true)))
 (let (($x114 (=> $x20 $x113)))
 (let (($x110 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x98 (= $x20 $x110)))
 (let (($x26 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x6 (=> $x26 $x60)))
 (let (($x107 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x109 (= $x26 $x107)))
 (let (($x95 (and $x109 $x6)))
 (let (($x108 (and $x95 $x98)))
 (let (($x115 (and $x108 $x114)))
 (let (($x105 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x116 (and $x105 $x115)))
 (let (($x117 (=> $x54 $x116)))
 (let (($x102 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x103 (= $x54 $x102)))
 (let (($x99 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x101 (= $x66 $x99)))
 (let (($x96 (and $x101 $x49)))
 (let (($x104 (and $x96 $x103)))
 (let (($x121 (and $x104 $x117)))
 (let (($x265 (and $x121 $x264)))
 (let (($x85 (=> $x20 true)))
 (let (($x82 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x83 (= $x20 $x82)))
 (let (($x79 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x80 (= $x26 $x79)))
 (let (($x81 (and $x80 $x6)))
 (let (($x84 (and $x81 $x83)))
 (let (($x86 (and $x84 $x85)))
 (let (($x77 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x87 (and $x77 $x86)))
 (let (($x88 (=> $x54 $x87)))
 (let (($x73 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x74 (= $x54 $x73)))
 (let (($x70 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x71 (= $x66 $x70)))
 (let (($x72 (and $x71 $x49)))
 (let (($x75 (and $x72 $x74)))
 (let (($x89 (and $x75 $x88)))
 (let (($x18 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x90 (and $x18 $x89)))
 (let (($x266 (and $x90 $x265)))
 (let (($x64 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x56 (and $x64 true)))
 (let (($x33 (=> $x20 $x56)))
 (let (($x61 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x42 (= $x20 $x61)))
 (let (($x37 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x30 (= $x26 $x37)))
 (let (($x25 (and $x30 $x6)))
 (let (($x57 (and $x25 $x42)))
 (let (($x51 (and $x57 $x33)))
 (let (($x63 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x14 (and $x63 $x51)))
 (let (($x59 (=> $x54 $x14)))
 (let (($x68 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x32 (= $x54 $x68)))
 (let (($x38 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x58 (= $x66 $x38)))
 (let (($x43 (and $x58 $x49)))
 (let (($x11 (and $x43 $x32)))
 (let (($x62 (and $x11 $x59)))
 (let (($x267 (and $x62 $x266)))
 (let (($x69 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x268 (and $x69 $x267)))
 (let (($x24 (bvugt ?x52 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x45 (=> (bvule ?x52 (bvsub (bvadd ?x52 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x24)))))))
 (let (($x29 (=> (and $x35 (bvule ?x52 (bvsub (bvadd ?x52 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x10 $x24)))))))
 (let (($x269 (and $x29 $x268)))
 (let (($x432 (=> $x269 $x431)))
 (not $x432)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= ind-%var1057X #b11000000000000000000000000000000)
(= ind-%var1057X.2.1 #b10000000000000000000000000000000)
(= ind-%var1057X.2.0 #b10000000000000000000000000000000)
(= ind-%var1057X.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= ind-%var1051X #b11000000000000000000000000000000)
(= ind-%var1051X.2.1 #b10000000000000000000000000000000)
(= ind-%var1051X.2.0 #b10000000000000000000000000000000)
(= ind-%var1051X.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_51)
(function @fun_51
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_51 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2367ada4)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #xa1f5e3cf)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x36a096bd)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x62ac1929)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x5316471b)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xb0)
                                #x2367adb7
                                #x23)
                         #x2367adb6
                         #x67)
                  #x2367ada7
                  #x23)))
(let ((a!2 (store (store (store (store a!1 #x2367adb6 #x67) #x2367adb7 #x23)
                         #x2367adb5
                         #xad)
                  #x2367ada5
                  #xad)))
  (store (store a!2 #x2367ada6 #x67) #x2367adb5 #xad))))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun ind-%var1057X () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1057X.2.1 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun ind-%var1057X.2.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun ind-%var1057X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32)
    #x2367adb0)
  (define-fun ind-%var1051X () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1051X.2.1 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun ind-%var1051X.2.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun ind-%var1051X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32)
    #x2367adb0)
  (define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2367ada7)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x2367adb0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2367ada4)
  (define-fun ind-%var1054X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1042X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1048X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1054X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1045X () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1048X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1042X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1054X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1048X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1042X.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun ind-%var1057X () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv7 32) (_ bv255 8)) (_ bv6 32) (_ bv255 8)) (_ bv5 32) (_ bv255 8)) (_ bv8 32) (_ bv255 8)) (_ bv2684354564 32) (_ bv64 8)) (_ bv2684354565 32) (_ bv5 8)) (_ bv2684354566 32) (_ bv136 8)) (_ bv2684354567 32) (_ bv63 8)))
(define-fun ind-%var1057X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1057X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1057X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1065878848 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1054X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1054X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1054X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1051X () (_ BitVec 32) (_ bv1 32))
(define-fun ind-%var1051X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1051X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1051X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1048X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1048X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1048X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1045X () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1042X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1042X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1042X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv65536 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2684354564 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2684354564 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2684354567 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x279 (=> $x32 false)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x240 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x243 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x5 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x12 (bvadd ?x5 (_ bv3 32))))
 (let ((?x247 (concat (select input.dst.llvm-mem ?x12) (concat ?x243 ?x240))))
 (let (($x274 (= (_ bv0 32) ?x247)))
 (let ((?x275 (ite $x274 (_ bv0 32) (_ bv1 32))))
 (let (($x277 (bvuge ?x275 (_ bv1 32))))
 (let (($x282 (= $x32 $x277)))
 (let (($x43 (= false false)))
 (let (($x38 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x54 (=> $x38 $x43)))
 (let (($x280 (= ?x275 (_ bv0 32))))
 (let (($x281 (= $x38 $x280)))
 (let (($x276 (and $x281 $x54)))
 (let (($x278 (and $x276 $x282)))
 (let (($x283 (and $x278 $x279)))
 (let (($x327 (= $x283 true)))
 (let (($x284 (= $x327 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x232 (concat ?x231 (concat ?x226 (concat ?x212 ?x227)))))
 (let (($x263 (= ?x232 input.dst.llvm-%l)))
 (let (($x264 (= $x263 true)))
 (let (($x265 (= $x264 true)))
 (let (($x251 (= (bvand ?x247 (_ bv4294967288 32)) ?x247)))
 (let (($x241 (= (bvand ?x5 (_ bv4294967292 32)) ?x5)))
 (let (($x252 (and $x241 $x251)))
 (let (($x238 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x239 (and true $x238)))
 (let (($x234 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x5 (bvsub ?x5 (_ bv4 32))) (bvult ?x5 (bvsub ?x5 (_ bv4 32))))))
 (let (($x255 (and (and (and $x234 $x239) $x241) $x252)))
 (let (($x256 (= true $x255)))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x35 (not $x23)))
 (let (($x257 (=> $x35 $x256)))
 (let (($x94 (= input.dst.llvm-%l ?x232)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x216 (= (_ bv0 32) ?x213)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x220 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x218)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x217 $x220)))
 (let (($x210 (and $x221 $x216)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x202 $x210)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x208 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x199 $x201)))))))
 (let (($x225 (and $x208 $x223)))
 (let (($x233 (and $x225 $x94)))
 (let (($x129 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x209 (and $x129 $x233)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x153 (concat ?x157 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x177 (concat ?x169 (concat ?x156 ?x153))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x171))))
 (let (($x187 (= input.spec-%var-l-0.2.1.2.0 ?x184)))
 (let (($x188 (and $x187 true)))
 (let (($x189 (=> $x32 $x188)))
 (let (($x178 (= (_ bv0 32) ?x177)))
 (let ((?x166 (ite $x178 (_ bv0 32) (_ bv1 32))))
 (let (($x179 (bvuge ?x166 (_ bv1 32))))
 (let (($x172 (= $x32 $x179)))
 (let (($x167 (= ?x166 (_ bv0 32))))
 (let (($x165 (= $x38 $x167)))
 (let (($x168 (and $x165 $x54)))
 (let (($x176 (and $x168 $x172)))
 (let (($x190 (and $x176 $x189)))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x143)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x164 (= input.spec-%var-l-0.2.0 ?x152)))
 (let (($x191 (and $x164 $x190)))
 (let (($x126 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x198 (=> $x126 $x191)))
 (let ((?x136 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x140 (bvuge ?x136 (_ bv1 32))))
 (let (($x138 (= $x126 $x140)))
 (let (($x135 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x148 (=> $x135 $x43)))
 (let (($x146 (= ?x136 (_ bv0 32))))
 (let (($x130 (= $x135 $x146)))
 (let (($x149 (and $x130 $x148)))
 (let (($x159 (and $x149 $x138)))
 (let (($x193 (and $x159 $x198)))
 (let (($x137 (and $x193 $x209)))
 (let (($x258 (and $x137 $x257)))
 (let (($x259 (= $x258 true)))
 (let (($x260 (= $x259 true)))
 (let (($x261 (= $x260 true)))
 (let (($x122 (= $x35 true)))
 (let (($x132 (= $x122 true)))
 (let (($x133 (= $x132 true)))
 (let (($x131 (= $x129 true)))
 (let (($x119 (= $x131 true)))
 (let (($x120 (= $x119 true)))
 (let (($x134 (and $x120 $x133)))
 (let (($x262 (and $x134 $x261)))
 (let (($x266 (and $x262 $x265)))
 (let (($x267 (and $x126 $x266)))
 (let (($x268 (and $x43 $x267)))
 (let (($x114 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x115 (and $x114 true)))
 (let (($x42 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x116 (=> $x42 $x115)))
 (let (($x108 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x111 (= $x42 $x108)))
 (let (($x37 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x20 (=> $x37 $x43)))
 (let (($x95 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x110 (= $x37 $x95)))
 (let (($x98 (and $x110 $x20)))
 (let (($x112 (and $x98 $x111)))
 (let (($x117 (and $x112 $x116)))
 (let (($x107 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x121 (and $x107 $x117)))
 (let (($x123 (=> $x32 $x121)))
 (let (($x104 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x100 (= $x32 $x104)))
 (let (($x96 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x102 (= $x38 $x96)))
 (let (($x103 (and $x102 $x54)))
 (let (($x105 (and $x103 $x100)))
 (let (($x124 (and $x105 $x123)))
 (let (($x269 (and $x124 $x268)))
 (let (($x87 (=> $x42 true)))
 (let (($x84 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x85 (= $x42 $x84)))
 (let (($x81 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x82 (= $x37 $x81)))
 (let (($x83 (and $x82 $x20)))
 (let (($x86 (and $x83 $x85)))
 (let (($x88 (and $x86 $x87)))
 (let (($x79 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x89 (and $x79 $x88)))
 (let (($x90 (=> $x32 $x89)))
 (let (($x75 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x76 (= $x32 $x75)))
 (let (($x72 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x73 (= $x38 $x72)))
 (let (($x74 (and $x73 $x54)))
 (let (($x77 (and $x74 $x76)))
 (let (($x91 (and $x77 $x90)))
 (let (($x70 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x99 (and $x70 $x91)))
 (let (($x270 (and $x99 $x269)))
 (let (($x33 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x51 (and $x33 true)))
 (let (($x14 (=> $x42 $x51)))
 (let (($x57 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x31 (= $x42 $x57)))
 (let (($x6 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x25 (= $x37 $x6)))
 (let (($x61 (and $x25 $x20)))
 (let (($x39 (and $x61 $x31)))
 (let (($x59 (and $x39 $x14)))
 (let (($x26 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x62 (and $x26 $x59)))
 (let (($x16 (=> $x32 $x62)))
 (let (($x11 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x28 (= $x32 $x11)))
 (let (($x60 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x49 (= $x38 $x60)))
 (let (($x68 (and $x49 $x54)))
 (let (($x47 (and $x68 $x28)))
 (let (($x18 (and $x47 $x16)))
 (let (($x271 (and $x18 $x270)))
 (let (($x66 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x272 (and $x66 $x271)))
 (let (($x65 (bvugt ?x5 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x69 (=> (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x65)))))))
 (let (($x48 (=> (and $x35 (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x55 $x65)))))))
 (let (($x273 (and $x48 $x272)))
 (let (($x292 (=> $x273 $x284)))
 (not $x292))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x279 (=> $x32 false)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x240 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x243 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x5 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x12 (bvadd ?x5 (_ bv3 32))))
 (let ((?x247 (concat (select input.dst.llvm-mem ?x12) (concat ?x243 ?x240))))
 (let (($x274 (= (_ bv0 32) ?x247)))
 (let ((?x275 (ite $x274 (_ bv0 32) (_ bv1 32))))
 (let (($x277 (bvuge ?x275 (_ bv1 32))))
 (let (($x282 (= $x32 $x277)))
 (let (($x43 (= false false)))
 (let (($x38 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x54 (=> $x38 $x43)))
 (let (($x280 (= ?x275 (_ bv0 32))))
 (let (($x281 (= $x38 $x280)))
 (let (($x276 (and $x281 $x54)))
 (let (($x278 (and $x276 $x282)))
 (let (($x283 (and $x278 $x279)))
 (let (($x327 (= $x283 true)))
 (let (($x284 (= $x327 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x232 (concat ?x231 (concat ?x226 (concat ?x212 ?x227)))))
 (let (($x263 (= ?x232 input.dst.llvm-%l)))
 (let (($x264 (= $x263 true)))
 (let (($x265 (= $x264 true)))
 (let (($x251 (= (bvand ?x247 (_ bv4294967288 32)) ?x247)))
 (let (($x241 (= (bvand ?x5 (_ bv4294967292 32)) ?x5)))
 (let (($x252 (and $x241 $x251)))
 (let (($x238 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x239 (and true $x238)))
 (let (($x234 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x5 (bvsub ?x5 (_ bv4 32))) (bvult ?x5 (bvsub ?x5 (_ bv4 32))))))
 (let (($x255 (and (and (and $x234 $x239) $x241) $x252)))
 (let (($x256 (= true $x255)))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x35 (not $x23)))
 (let (($x257 (=> $x35 $x256)))
 (let (($x94 (= input.dst.llvm-%l ?x232)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x216 (= (_ bv0 32) ?x213)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x220 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x218)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x217 $x220)))
 (let (($x210 (and $x221 $x216)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x202 $x210)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x208 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x199 $x201)))))))
 (let (($x225 (and $x208 $x223)))
 (let (($x233 (and $x225 $x94)))
 (let (($x129 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x209 (and $x129 $x233)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x153 (concat ?x157 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x177 (concat ?x169 (concat ?x156 ?x153))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x171))))
 (let (($x187 (= input.spec-%var-l-0.2.1.2.0 ?x184)))
 (let (($x188 (and $x187 true)))
 (let (($x189 (=> $x32 $x188)))
 (let (($x178 (= (_ bv0 32) ?x177)))
 (let ((?x166 (ite $x178 (_ bv0 32) (_ bv1 32))))
 (let (($x179 (bvuge ?x166 (_ bv1 32))))
 (let (($x172 (= $x32 $x179)))
 (let (($x167 (= ?x166 (_ bv0 32))))
 (let (($x165 (= $x38 $x167)))
 (let (($x168 (and $x165 $x54)))
 (let (($x176 (and $x168 $x172)))
 (let (($x190 (and $x176 $x189)))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x143)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x164 (= input.spec-%var-l-0.2.0 ?x152)))
 (let (($x191 (and $x164 $x190)))
 (let (($x126 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x198 (=> $x126 $x191)))
 (let ((?x136 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x140 (bvuge ?x136 (_ bv1 32))))
 (let (($x138 (= $x126 $x140)))
 (let (($x135 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x148 (=> $x135 $x43)))
 (let (($x146 (= ?x136 (_ bv0 32))))
 (let (($x130 (= $x135 $x146)))
 (let (($x149 (and $x130 $x148)))
 (let (($x159 (and $x149 $x138)))
 (let (($x193 (and $x159 $x198)))
 (let (($x137 (and $x193 $x209)))
 (let (($x258 (and $x137 $x257)))
 (let (($x259 (= $x258 true)))
 (let (($x260 (= $x259 true)))
 (let (($x261 (= $x260 true)))
 (let (($x122 (= $x35 true)))
 (let (($x132 (= $x122 true)))
 (let (($x133 (= $x132 true)))
 (let (($x131 (= $x129 true)))
 (let (($x119 (= $x131 true)))
 (let (($x120 (= $x119 true)))
 (let (($x134 (and $x120 $x133)))
 (let (($x262 (and $x134 $x261)))
 (let (($x266 (and $x262 $x265)))
 (let (($x267 (and $x126 $x266)))
 (let (($x268 (and $x43 $x267)))
 (let (($x114 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x115 (and $x114 true)))
 (let (($x42 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x116 (=> $x42 $x115)))
 (let (($x108 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x111 (= $x42 $x108)))
 (let (($x37 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x20 (=> $x37 $x43)))
 (let (($x95 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x110 (= $x37 $x95)))
 (let (($x98 (and $x110 $x20)))
 (let (($x112 (and $x98 $x111)))
 (let (($x117 (and $x112 $x116)))
 (let (($x107 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x121 (and $x107 $x117)))
 (let (($x123 (=> $x32 $x121)))
 (let (($x104 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x100 (= $x32 $x104)))
 (let (($x96 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x102 (= $x38 $x96)))
 (let (($x103 (and $x102 $x54)))
 (let (($x105 (and $x103 $x100)))
 (let (($x124 (and $x105 $x123)))
 (let (($x269 (and $x124 $x268)))
 (let (($x87 (=> $x42 true)))
 (let (($x84 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x85 (= $x42 $x84)))
 (let (($x81 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x82 (= $x37 $x81)))
 (let (($x83 (and $x82 $x20)))
 (let (($x86 (and $x83 $x85)))
 (let (($x88 (and $x86 $x87)))
 (let (($x79 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x89 (and $x79 $x88)))
 (let (($x90 (=> $x32 $x89)))
 (let (($x75 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x76 (= $x32 $x75)))
 (let (($x72 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x73 (= $x38 $x72)))
 (let (($x74 (and $x73 $x54)))
 (let (($x77 (and $x74 $x76)))
 (let (($x91 (and $x77 $x90)))
 (let (($x70 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x99 (and $x70 $x91)))
 (let (($x270 (and $x99 $x269)))
 (let (($x33 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x51 (and $x33 true)))
 (let (($x14 (=> $x42 $x51)))
 (let (($x57 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x31 (= $x42 $x57)))
 (let (($x6 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x25 (= $x37 $x6)))
 (let (($x61 (and $x25 $x20)))
 (let (($x39 (and $x61 $x31)))
 (let (($x59 (and $x39 $x14)))
 (let (($x26 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x62 (and $x26 $x59)))
 (let (($x16 (=> $x32 $x62)))
 (let (($x11 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x28 (= $x32 $x11)))
 (let (($x60 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x49 (= $x38 $x60)))
 (let (($x68 (and $x49 $x54)))
 (let (($x47 (and $x68 $x28)))
 (let (($x18 (and $x47 $x16)))
 (let (($x271 (and $x18 $x270)))
 (let (($x66 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x272 (and $x66 $x271)))
 (let (($x65 (bvugt ?x5 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x69 (=> (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x65)))))))
 (let (($x48 (=> (and $x35 (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x55 $x65)))))))
 (let (($x273 (and $x48 $x272)))
 (let (($x292 (=> $x273 $x284)))
 (not $x292))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-0.2.1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (= (@fun_19 #b10000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x01a2e290)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x1560c951)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #xd0faf1e7)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x46d22fed)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x9b504b5f)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x01)
                                #x01a2c294
                                #x90)
                         #x01a2c295
                         #xc2)
                  #x01a2c296
                  #xa2)))
  (store (store (store a!1 #x01a2e290 #x90) #x01a2e292 #xa2) #x01a2e291 #xc2)))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x01a2e293)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x01a2c290)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x01a2e290)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv2273325368 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv3221225796 32) (_ bv56 8)) (_ bv3221225797 32) (_ bv49 8)) (_ bv3221225798 32) (_ bv128 8)) (_ bv3221225799 32) (_ bv135 8)) (_ bv2273325372 32) (_ bv8 8)))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3221225796 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3221225796 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3221225799 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var1268X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var1268X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1268X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1268X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1265X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1265X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1265X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var1262X () (_ BitVec 32))
(declare-fun ind-%var1262X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1262X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1262X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1259X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1259X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1259X.0 () (_ BitVec 32))
(declare-fun ind-%var1256X () (_ BitVec 32))
(declare-fun ind-%var1253X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1253X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1253X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1268X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1268X (_ bv4 32))))))
 (let ((?x446 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1268X (_ bv4 32)) (_ bv2 32))) ?x443)))
 (let ((?x449 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1268X (_ bv4 32)) (_ bv3 32))) ?x446)))
 (let (($x450 (= ind-%var1268X.2.1 ?x449)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ind-%var1268X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1268X))))
 (let ((?x436 (concat (select input.dst.llvm-mem (bvadd ind-%var1268X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1268X (_ bv2 32))) ?x36))))
 (let (($x437 (= ind-%var1268X.2.0 ?x436)))
 (let (($x68 (= false false)))
 (let (($x425 (= (_ bv0 32) ind-%var1268X)))
 (let ((?x427 (ite $x425 (_ bv0 32) (_ bv1 32))))
 (let (($x429 (= ind-%var1268X.0 ?x427)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x242 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x7 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x34 (bvadd ?x7 (_ bv3 32))))
 (let ((?x251 (concat (select input.dst.llvm-mem ?x34) (concat ?x245 ?x242))))
 (let ((?x320 (bvadd ?x251 (_ bv4 32))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x320 (_ bv1 32))) (select input.dst.llvm-mem ?x320))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x320 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x320 (_ bv2 32))) ?x314))))
 (let (($x417 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 ?x326)))
 (let (($x454 (and (and (and (and $x417 $x429) $x68) $x437) $x450)))
 (let (($x415 (= ind-%var1265X.2.1 ind-%var1265X.2.1)))
 (let (($x418 (= ind-%var1265X.2.0 ind-%var1265X.2.0)))
 (let (($x409 (= ind-%var1265X.0 ind-%var1265X.0)))
 (let (($x376 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0.2.1.2.1)))
 (let (($x411 (and (and (and (and $x376 $x409) $x68) $x418) $x415)))
 (let (($x31 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x28 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x359 (and $x28 $x31)))
 (let (($x456 (and (and $x359 $x411) $x454)))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1262X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1262X (_ bv4 32))))))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1262X (_ bv4 32)) (_ bv2 32))) ?x422)))
 (let ((?x403 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1262X (_ bv4 32)) (_ bv3 32))) ?x405)))
 (let (($x399 (= ind-%var1262X.2.1 ?x403)))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd ind-%var1262X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1262X))))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ind-%var1262X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1262X (_ bv2 32))) ?x383))))
 (let (($x391 (= ind-%var1262X.2.0 ?x390)))
 (let (($x379 (= (_ bv0 32) ind-%var1262X)))
 (let ((?x428 (ite $x379 (_ bv0 32) (_ bv1 32))))
 (let (($x380 (= ind-%var1262X.0 ?x428)))
 (let (($x372 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 ?x326)))
 (let (($x404 (and (and (and (and $x372 $x380) $x68) $x391) $x399)))
 (let (($x368 (= ind-%var1259X.2.1 ind-%var1259X.2.1)))
 (let (($x371 (= ind-%var1259X.2.0 ind-%var1259X.2.0)))
 (let (($x363 (and (and (and $x376 (= ind-%var1259X.0 ind-%var1259X.0)) $x68) $x371)))
 (let (($x366 (and $x363 $x368)))
 (let (($x408 (and (and $x359 $x366) $x404)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1256X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1256X (_ bv4 32))))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1256X (_ bv4 32)) (_ bv2 32))) ?x347)))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1256X (_ bv4 32)) (_ bv3 32))) ?x375)))
 (let (($x354 (= ?x358 ?x358)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ind-%var1256X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1256X))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ind-%var1256X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1256X (_ bv2 32))) ?x334))))
 (let (($x342 (= ?x378 ?x378)))
 (let (($x330 (= (_ bv0 32) ind-%var1256X)))
 (let ((?x331 (ite $x330 (_ bv0 32) (_ bv1 32))))
 (let (($x332 (= ?x331 ?x331)))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x157 (concat ?x158 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x166 (concat ?x178 (concat ?x153 ?x157))))
 (let ((?x305 (bvadd ?x166 (_ bv4 32))))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem ?x305))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv2 32))) ?x303))))
 (let (($x328 (= ?x319 ?x326)))
 (let (($x350 (and (and (and (and $x328 $x332) $x68) $x342) $x354)))
 (let (($x323 (= ind-%var1253X.2.1 ind-%var1253X.2.1)))
 (let (($x298 (= ind-%var1253X.2.0 ind-%var1253X.2.0)))
 (let (($x296 (= ind-%var1253X.0 ind-%var1253X.0)))
 (let (($x294 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1.2.1)))
 (let (($x304 (and (and (and (and $x294 $x296) $x68) $x298) $x323)))
 (let (($x131 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x288 (and $x131 $x28)))
 (let (($x356 (and (and $x288 $x304) $x350)))
 (let (($x458 (or (or $x356 $x408) $x456)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x205))))
 (let (($x285 (= input.spec-%var-l-0.2.1.2.0 ?x287)))
 (let (($x459 (and $x285 $x458)))
 (let (($x460 (=> $x28 $x459)))
 (let (($x276 (= (_ bv0 32) ?x251)))
 (let ((?x277 (ite $x276 (_ bv0 32) (_ bv1 32))))
 (let (($x283 (bvuge ?x277 (_ bv1 32))))
 (let (($x327 (= $x28 $x283)))
 (let (($x60 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x32 (=> $x60 $x68)))
 (let (($x282 (= ?x277 (_ bv0 32))))
 (let (($x278 (= $x60 $x282)))
 (let (($x279 (and $x278 $x32)))
 (let (($x284 (and $x279 $x327)))
 (let (($x461 (and $x284 $x460)))
 (let (($x462 (= $x461 true)))
 (let (($x463 (= $x462 true)))
 (let ((?x228 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x232 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x209 (concat ?x232 (concat ?x227 ?x228)))))
 (let (($x267 (= ?x137 input.dst.llvm-%l)))
 (let (($x268 (= $x267 true)))
 (let (($x269 (= $x268 true)))
 (let (($x255 (= (bvand ?x251 (_ bv4294967288 32)) ?x251)))
 (let (($x46 (= (bvand ?x7 (_ bv4294967292 32)) ?x7)))
 (let (($x256 (and $x46 $x255)))
 (let (($x244 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x241 (and true $x244)))
 (let (($x237 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x7 (bvsub ?x7 (_ bv4 32))) (bvult ?x7 (bvsub ?x7 (_ bv4 32))))))
 (let (($x259 (and (and (and $x237 $x241) $x46) $x256)))
 (let (($x260 (= true $x259)))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x35 (not $x23)))
 (let (($x261 (=> $x35 $x260)))
 (let (($x214 (= input.dst.llvm-%l ?x137)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x225 (= (_ bv0 32) ?x223)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x213)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x221 $x216)))
 (let (($x230 (and $x210 $x225)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x199 $x230)))
 (let (($x204 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x220 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x196 $x204)))))))
 (let (($x222 (and $x220 $x231)))
 (let (($x92 (and $x222 $x214)))
 (let (($x122 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x97 (and $x122 $x92)))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv1 32))) (select input.dst.llvm-mem ?x166))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv2 32))) ?x175))))
 (let (($x189 (= input.spec-%var-l-0.2.1.2.0 ?x188)))
 (let (($x190 (and $x189 true)))
 (let (($x191 (=> $x28 $x190)))
 (let (($x167 (= (_ bv0 32) ?x166)))
 (let ((?x165 (ite $x167 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x165 (_ bv1 32))))
 (let (($x174 (= $x28 $x176)))
 (let (($x168 (= ?x165 (_ bv0 32))))
 (let (($x179 (= $x60 $x168)))
 (let (($x172 (and $x179 $x32)))
 (let (($x181 (and $x172 $x174)))
 (let (($x198 (and $x181 $x191)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x145)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x170 (= input.spec-%var-l-0.2.0 ?x180)))
 (let (($x193 (and $x170 $x198)))
 (let (($x203 (=> $x131 $x193)))
 (let ((?x148 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x148 (_ bv1 32))))
 (let (($x160 (= $x131 $x159)))
 (let (($x130 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x140 (=> $x130 $x68)))
 (let (($x149 (= ?x148 (_ bv0 32))))
 (let (($x126 (= $x130 $x149)))
 (let (($x138 (and $x126 $x140)))
 (let (($x161 (and $x138 $x160)))
 (let (($x206 (and $x161 $x203)))
 (let (($x147 (and $x206 $x97)))
 (let (($x262 (and $x147 $x261)))
 (let (($x263 (= $x262 true)))
 (let (($x264 (= $x263 true)))
 (let (($x265 (= $x264 true)))
 (let (($x125 (= $x35 true)))
 (let (($x135 (= $x125 true)))
 (let (($x136 (= $x135 true)))
 (let (($x132 (= $x122 true)))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x146 (and $x134 $x136)))
 (let (($x266 (and $x146 $x265)))
 (let (($x270 (and $x266 $x269)))
 (let (($x271 (and $x131 $x270)))
 (let (($x272 (and $x68 $x271)))
 (let (($x116 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x117 (and $x116 true)))
 (let (($x121 (=> $x31 $x117)))
 (let (($x112 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x113 (= $x31 $x112)))
 (let (($x6 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x42 (=> $x6 $x68)))
 (let (($x98 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x108 (= $x6 $x98)))
 (let (($x111 (and $x108 $x42)))
 (let (($x114 (and $x111 $x113)))
 (let (($x123 (and $x114 $x121)))
 (let (($x95 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x124 (and $x95 $x123)))
 (let (($x127 (=> $x28 $x124)))
 (let (($x105 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x106 (= $x28 $x105)))
 (let (($x103 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x104 (= $x60 $x103)))
 (let (($x100 (and $x104 $x32)))
 (let (($x107 (and $x100 $x106)))
 (let (($x128 (and $x107 $x127)))
 (let (($x273 (and $x128 $x272)))
 (let (($x89 (=> $x31 true)))
 (let (($x86 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x87 (= $x31 $x86)))
 (let (($x83 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x84 (= $x6 $x83)))
 (let (($x85 (and $x84 $x42)))
 (let (($x88 (and $x85 $x87)))
 (let (($x90 (and $x88 $x89)))
 (let (($x81 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x91 (and $x81 $x90)))
 (let (($x99 (=> $x28 $x91)))
 (let (($x77 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x78 (= $x28 $x77)))
 (let (($x74 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x75 (= $x60 $x74)))
 (let (($x76 (and $x75 $x32)))
 (let (($x79 (and $x76 $x78)))
 (let (($x101 (and $x79 $x99)))
 (let (($x72 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x96 (and $x72 $x101)))
 (let (($x274 (and $x96 $x273)))
 (let (($x14 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x59 (and $x14 true)))
 (let (($x62 (=> $x31 $x59)))
 (let (($x39 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x64 (= $x31 $x39)))
 (let (($x20 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x61 (= $x6 $x20)))
 (let (($x57 (and $x61 $x42)))
 (let (($x56 (and $x57 $x64)))
 (let (($x16 (and $x56 $x62)))
 (let (($x37 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x18 (and $x37 $x16)))
 (let (($x22 (=> $x28 $x18)))
 (let (($x47 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x63 (= $x28 $x47)))
 (let (($x43 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x54 (= $x60 $x43)))
 (let (($x11 (and $x54 $x32)))
 (let (($x67 (and $x11 $x63)))
 (let (($x70 (and $x67 $x22)))
 (let (($x275 (and $x70 $x274)))
 (let (($x38 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x280 (and $x38 $x275)))
 (let (($x29 (bvugt ?x7 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x66 (=> (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x29)))))))
 (let (($x44 (=> (and $x35 (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x45 $x29)))))))
 (let (($x281 (and $x44 $x280)))
 (let (($x464 (=> $x281 $x463)))
 (not $x464))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var1268X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var1268X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1268X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1268X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1265X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1265X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1265X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var1262X () (_ BitVec 32))
(declare-fun ind-%var1262X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1262X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1262X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1259X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1259X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1259X.0 () (_ BitVec 32))
(declare-fun ind-%var1256X () (_ BitVec 32))
(declare-fun ind-%var1253X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1253X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1253X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1268X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1268X (_ bv4 32))))))
 (let ((?x446 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1268X (_ bv4 32)) (_ bv2 32))) ?x443)))
 (let ((?x449 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1268X (_ bv4 32)) (_ bv3 32))) ?x446)))
 (let (($x450 (= ind-%var1268X.2.1 ?x449)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ind-%var1268X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1268X))))
 (let ((?x436 (concat (select input.dst.llvm-mem (bvadd ind-%var1268X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1268X (_ bv2 32))) ?x36))))
 (let (($x437 (= ind-%var1268X.2.0 ?x436)))
 (let (($x68 (= false false)))
 (let (($x425 (= (_ bv0 32) ind-%var1268X)))
 (let ((?x427 (ite $x425 (_ bv0 32) (_ bv1 32))))
 (let (($x429 (= ind-%var1268X.0 ?x427)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x242 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x7 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x34 (bvadd ?x7 (_ bv3 32))))
 (let ((?x251 (concat (select input.dst.llvm-mem ?x34) (concat ?x245 ?x242))))
 (let ((?x320 (bvadd ?x251 (_ bv4 32))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x320 (_ bv1 32))) (select input.dst.llvm-mem ?x320))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x320 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x320 (_ bv2 32))) ?x314))))
 (let (($x417 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 ?x326)))
 (let (($x454 (and (and (and (and $x417 $x429) $x68) $x437) $x450)))
 (let (($x415 (= ind-%var1265X.2.1 ind-%var1265X.2.1)))
 (let (($x418 (= ind-%var1265X.2.0 ind-%var1265X.2.0)))
 (let (($x409 (= ind-%var1265X.0 ind-%var1265X.0)))
 (let (($x376 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0.2.1.2.1)))
 (let (($x411 (and (and (and (and $x376 $x409) $x68) $x418) $x415)))
 (let (($x31 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x28 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x359 (and $x28 $x31)))
 (let (($x456 (and (and $x359 $x411) $x454)))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1262X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1262X (_ bv4 32))))))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1262X (_ bv4 32)) (_ bv2 32))) ?x422)))
 (let ((?x403 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1262X (_ bv4 32)) (_ bv3 32))) ?x405)))
 (let (($x399 (= ind-%var1262X.2.1 ?x403)))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd ind-%var1262X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1262X))))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ind-%var1262X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1262X (_ bv2 32))) ?x383))))
 (let (($x391 (= ind-%var1262X.2.0 ?x390)))
 (let (($x379 (= (_ bv0 32) ind-%var1262X)))
 (let ((?x428 (ite $x379 (_ bv0 32) (_ bv1 32))))
 (let (($x380 (= ind-%var1262X.0 ?x428)))
 (let (($x372 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 ?x326)))
 (let (($x404 (and (and (and (and $x372 $x380) $x68) $x391) $x399)))
 (let (($x368 (= ind-%var1259X.2.1 ind-%var1259X.2.1)))
 (let (($x371 (= ind-%var1259X.2.0 ind-%var1259X.2.0)))
 (let (($x363 (and (and (and $x376 (= ind-%var1259X.0 ind-%var1259X.0)) $x68) $x371)))
 (let (($x366 (and $x363 $x368)))
 (let (($x408 (and (and $x359 $x366) $x404)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1256X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1256X (_ bv4 32))))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1256X (_ bv4 32)) (_ bv2 32))) ?x347)))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1256X (_ bv4 32)) (_ bv3 32))) ?x375)))
 (let (($x354 (= ?x358 ?x358)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ind-%var1256X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1256X))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ind-%var1256X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1256X (_ bv2 32))) ?x334))))
 (let (($x342 (= ?x378 ?x378)))
 (let (($x330 (= (_ bv0 32) ind-%var1256X)))
 (let ((?x331 (ite $x330 (_ bv0 32) (_ bv1 32))))
 (let (($x332 (= ?x331 ?x331)))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x157 (concat ?x158 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x166 (concat ?x178 (concat ?x153 ?x157))))
 (let ((?x305 (bvadd ?x166 (_ bv4 32))))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem ?x305))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv2 32))) ?x303))))
 (let (($x328 (= ?x319 ?x326)))
 (let (($x350 (and (and (and (and $x328 $x332) $x68) $x342) $x354)))
 (let (($x323 (= ind-%var1253X.2.1 ind-%var1253X.2.1)))
 (let (($x298 (= ind-%var1253X.2.0 ind-%var1253X.2.0)))
 (let (($x296 (= ind-%var1253X.0 ind-%var1253X.0)))
 (let (($x294 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1.2.1)))
 (let (($x304 (and (and (and (and $x294 $x296) $x68) $x298) $x323)))
 (let (($x131 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x288 (and $x131 $x28)))
 (let (($x356 (and (and $x288 $x304) $x350)))
 (let (($x458 (or (or $x356 $x408) $x456)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x205))))
 (let (($x285 (= input.spec-%var-l-0.2.1.2.0 ?x287)))
 (let (($x459 (and $x285 $x458)))
 (let (($x460 (=> $x28 $x459)))
 (let (($x276 (= (_ bv0 32) ?x251)))
 (let ((?x277 (ite $x276 (_ bv0 32) (_ bv1 32))))
 (let (($x283 (bvuge ?x277 (_ bv1 32))))
 (let (($x327 (= $x28 $x283)))
 (let (($x60 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x32 (=> $x60 $x68)))
 (let (($x282 (= ?x277 (_ bv0 32))))
 (let (($x278 (= $x60 $x282)))
 (let (($x279 (and $x278 $x32)))
 (let (($x284 (and $x279 $x327)))
 (let (($x461 (and $x284 $x460)))
 (let (($x462 (= $x461 true)))
 (let (($x463 (= $x462 true)))
 (let ((?x228 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x232 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x209 (concat ?x232 (concat ?x227 ?x228)))))
 (let (($x267 (= ?x137 input.dst.llvm-%l)))
 (let (($x268 (= $x267 true)))
 (let (($x269 (= $x268 true)))
 (let (($x255 (= (bvand ?x251 (_ bv4294967288 32)) ?x251)))
 (let (($x46 (= (bvand ?x7 (_ bv4294967292 32)) ?x7)))
 (let (($x256 (and $x46 $x255)))
 (let (($x244 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x241 (and true $x244)))
 (let (($x237 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x7 (bvsub ?x7 (_ bv4 32))) (bvult ?x7 (bvsub ?x7 (_ bv4 32))))))
 (let (($x259 (and (and (and $x237 $x241) $x46) $x256)))
 (let (($x260 (= true $x259)))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x35 (not $x23)))
 (let (($x261 (=> $x35 $x260)))
 (let (($x214 (= input.dst.llvm-%l ?x137)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x225 (= (_ bv0 32) ?x223)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x213)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x221 $x216)))
 (let (($x230 (and $x210 $x225)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x199 $x230)))
 (let (($x204 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x220 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x196 $x204)))))))
 (let (($x222 (and $x220 $x231)))
 (let (($x92 (and $x222 $x214)))
 (let (($x122 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x97 (and $x122 $x92)))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv1 32))) (select input.dst.llvm-mem ?x166))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv2 32))) ?x175))))
 (let (($x189 (= input.spec-%var-l-0.2.1.2.0 ?x188)))
 (let (($x190 (and $x189 true)))
 (let (($x191 (=> $x28 $x190)))
 (let (($x167 (= (_ bv0 32) ?x166)))
 (let ((?x165 (ite $x167 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x165 (_ bv1 32))))
 (let (($x174 (= $x28 $x176)))
 (let (($x168 (= ?x165 (_ bv0 32))))
 (let (($x179 (= $x60 $x168)))
 (let (($x172 (and $x179 $x32)))
 (let (($x181 (and $x172 $x174)))
 (let (($x198 (and $x181 $x191)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x145)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x170 (= input.spec-%var-l-0.2.0 ?x180)))
 (let (($x193 (and $x170 $x198)))
 (let (($x203 (=> $x131 $x193)))
 (let ((?x148 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x148 (_ bv1 32))))
 (let (($x160 (= $x131 $x159)))
 (let (($x130 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x140 (=> $x130 $x68)))
 (let (($x149 (= ?x148 (_ bv0 32))))
 (let (($x126 (= $x130 $x149)))
 (let (($x138 (and $x126 $x140)))
 (let (($x161 (and $x138 $x160)))
 (let (($x206 (and $x161 $x203)))
 (let (($x147 (and $x206 $x97)))
 (let (($x262 (and $x147 $x261)))
 (let (($x263 (= $x262 true)))
 (let (($x264 (= $x263 true)))
 (let (($x265 (= $x264 true)))
 (let (($x125 (= $x35 true)))
 (let (($x135 (= $x125 true)))
 (let (($x136 (= $x135 true)))
 (let (($x132 (= $x122 true)))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x146 (and $x134 $x136)))
 (let (($x266 (and $x146 $x265)))
 (let (($x270 (and $x266 $x269)))
 (let (($x271 (and $x131 $x270)))
 (let (($x272 (and $x68 $x271)))
 (let (($x116 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x117 (and $x116 true)))
 (let (($x121 (=> $x31 $x117)))
 (let (($x112 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x113 (= $x31 $x112)))
 (let (($x6 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x42 (=> $x6 $x68)))
 (let (($x98 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x108 (= $x6 $x98)))
 (let (($x111 (and $x108 $x42)))
 (let (($x114 (and $x111 $x113)))
 (let (($x123 (and $x114 $x121)))
 (let (($x95 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x124 (and $x95 $x123)))
 (let (($x127 (=> $x28 $x124)))
 (let (($x105 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x106 (= $x28 $x105)))
 (let (($x103 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x104 (= $x60 $x103)))
 (let (($x100 (and $x104 $x32)))
 (let (($x107 (and $x100 $x106)))
 (let (($x128 (and $x107 $x127)))
 (let (($x273 (and $x128 $x272)))
 (let (($x89 (=> $x31 true)))
 (let (($x86 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x87 (= $x31 $x86)))
 (let (($x83 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x84 (= $x6 $x83)))
 (let (($x85 (and $x84 $x42)))
 (let (($x88 (and $x85 $x87)))
 (let (($x90 (and $x88 $x89)))
 (let (($x81 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x91 (and $x81 $x90)))
 (let (($x99 (=> $x28 $x91)))
 (let (($x77 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x78 (= $x28 $x77)))
 (let (($x74 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x75 (= $x60 $x74)))
 (let (($x76 (and $x75 $x32)))
 (let (($x79 (and $x76 $x78)))
 (let (($x101 (and $x79 $x99)))
 (let (($x72 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x96 (and $x72 $x101)))
 (let (($x274 (and $x96 $x273)))
 (let (($x14 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x59 (and $x14 true)))
 (let (($x62 (=> $x31 $x59)))
 (let (($x39 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x64 (= $x31 $x39)))
 (let (($x20 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x61 (= $x6 $x20)))
 (let (($x57 (and $x61 $x42)))
 (let (($x56 (and $x57 $x64)))
 (let (($x16 (and $x56 $x62)))
 (let (($x37 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x18 (and $x37 $x16)))
 (let (($x22 (=> $x28 $x18)))
 (let (($x47 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x63 (= $x28 $x47)))
 (let (($x43 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x54 (= $x60 $x43)))
 (let (($x11 (and $x54 $x32)))
 (let (($x67 (and $x11 $x63)))
 (let (($x70 (and $x67 $x22)))
 (let (($x275 (and $x70 $x274)))
 (let (($x38 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x280 (and $x38 $x275)))
 (let (($x29 (bvugt ?x7 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x66 (=> (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x29)))))))
 (let (($x44 (=> (and $x35 (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x45 $x29)))))))
 (let (($x281 (and $x44 $x280)))
 (let (($x464 (=> $x281 $x463)))
 (not $x464))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var1410X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var1410X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1410X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1410X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1407X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1407X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1407X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var1404X () (_ BitVec 32))
(declare-fun ind-%var1404X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1404X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1404X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1401X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1401X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1401X.0 () (_ BitVec 32))
(declare-fun ind-%var1398X () (_ BitVec 32))
(declare-fun ind-%var1395X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1395X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1395X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1410X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1410X (_ bv4 32))))))
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1410X (_ bv4 32)) (_ bv2 32))) ?x415)))
 (let ((?x421 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1410X (_ bv4 32)) (_ bv3 32))) ?x414)))
 (let (($x425 (= ind-%var1410X.2.1 ?x421)))
 (let ((?x403 (concat (select input.dst.llvm-mem (bvadd ind-%var1410X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1410X))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ind-%var1410X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1410X (_ bv2 32))) ?x403))))
 (let (($x416 (= ind-%var1410X.2.0 ?x409)))
 (let (($x11 (= false false)))
 (let (($x423 (= (_ bv0 32) ind-%var1410X)))
 (let ((?x397 (ite $x423 (_ bv0 32) (_ bv1 32))))
 (let (($x395 (= ind-%var1410X.0 ?x397)))
 (let (($x393 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x452 (and (and (and (and $x393 $x395) $x11) $x416) $x425)))
 (let (($x383 (= ind-%var1407X.2.1 ind-%var1407X.2.1)))
 (let (($x382 (= ind-%var1407X.2.0 ind-%var1407X.2.0)))
 (let (($x384 (= ind-%var1407X.0 ind-%var1407X.0)))
 (let (($x340 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x401 (and (and (and (and $x340 $x384) $x11) $x382) $x383)))
 (let (($x64 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x63 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x341 (and $x63 $x64)))
 (let (($x434 (and (and $x341 $x401) $x452)))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1404X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1404X (_ bv4 32))))))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1404X (_ bv4 32)) (_ bv2 32))) ?x366)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1404X (_ bv4 32)) (_ bv3 32))) ?x372)))
 (let (($x428 (= ind-%var1404X.2.1 ?x379)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ind-%var1404X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1404X))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ind-%var1404X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1404X (_ bv2 32))) ?x356))))
 (let (($x365 (= ind-%var1404X.2.0 ?x364)))
 (let (($x346 (= (_ bv0 32) ind-%var1404X)))
 (let ((?x344 (ite $x346 (_ bv0 32) (_ bv1 32))))
 (let (($x347 (= ind-%var1404X.0 ?x344)))
 (let (($x348 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x381 (and (and (and (and $x348 $x347) $x11) $x365) $x428)))
 (let (($x378 (= ind-%var1401X.2.1 ind-%var1401X.2.1)))
 (let (($x334 (= ind-%var1401X.2.0 ind-%var1401X.2.0)))
 (let (($x343 (and (and (and $x340 (= ind-%var1401X.0 ind-%var1401X.0)) $x11) $x334)))
 (let (($x349 (and $x343 $x378)))
 (let (($x426 (and (and $x341 $x349) $x381)))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1398X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1398X (_ bv4 32))))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1398X (_ bv4 32)) (_ bv2 32))) ?x317)))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1398X (_ bv4 32)) (_ bv3 32))) ?x314)))
 (let (($x329 (= ?x328 ?x328)))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ind-%var1398X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1398X))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ind-%var1398X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1398X (_ bv2 32))) ?x309))))
 (let (($x320 (= ?x319 ?x319)))
 (let (($x304 (= (_ bv0 32) ind-%var1398X)))
 (let ((?x353 (ite $x304 (_ bv0 32) (_ bv1 32))))
 (let (($x305 (= ?x353 ?x353)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x158 (concat ?x156 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x165 (concat ?x167 (concat ?x157 ?x158))))
 (let ((?x285 (bvadd ?x165 (_ bv4 32))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem ?x285))))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv2 32))) ?x295))))
 (let (($x299 (= ?x308 input.dst.llvm-%l)))
 (let (($x355 (and (and (and (and $x299 $x305) $x11) $x320) $x329)))
 (let (($x13 (= ind-%var1395X.2.1 ind-%var1395X.2.1)))
 (let (($x9 (= ind-%var1395X.2.0 ind-%var1395X.2.0)))
 (let (($x286 (= ind-%var1395X.0 ind-%var1395X.0)))
 (let (($x284 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x287 (and (and (and (and $x284 $x286) $x11) $x9) $x13)))
 (let (($x132 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x279 (and $x132 $x63)))
 (let (($x337 (and (and $x279 $x287) $x355)))
 (let (($x192 (or (or $x337 $x426) $x434)))
 (let (($x211 (= $x192 true)))
 (let (($x432 (= $x211 true)))
 (let ((?x212 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x97 (concat ?x137 (concat ?x228 ?x212)))))
 (let (($x271 (= ?x147 input.dst.llvm-%l)))
 (let (($x272 (= $x271 true)))
 (let (($x273 (= $x272 true)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x243 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x10 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x19 (bvadd ?x10 (_ bv3 32))))
 (let ((?x255 (concat (select input.dst.llvm-mem ?x19) (concat ?x247 ?x243))))
 (let (($x259 (= (bvand ?x255 (_ bv4294967288 32)) ?x255)))
 (let (($x240 (= (bvand ?x10 (_ bv4294967292 32)) ?x10)))
 (let (($x260 (and $x240 $x259)))
 (let (($x246 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x46 (and true $x246)))
 (let (($x250 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x10 (bvsub ?x10 (_ bv4 32))) (bvult ?x10 (bvsub ?x10 (_ bv4 32))))))
 (let (($x263 (and (and (and $x250 $x46) $x240) $x260)))
 (let (($x264 (= true $x263)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x265 (=> $x5 $x264)))
 (let (($x236 (= input.dst.llvm-%l ?x147)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x231)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x225 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x223)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (and $x210 $x225)))
 (let (($x233 (and $x230 $x222)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x196 $x233)))
 (let (($x217 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x216 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x202 $x217)))))))
 (let (($x229 (and $x216 $x209)))
 (let (($x234 (and $x229 $x236)))
 (let (($x125 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x235 (and $x125 $x234)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x182))))
 (let (($x191 (= input.spec-%var-l-0.2.1.2.0 ?x190)))
 (let (($x198 (and $x191 true)))
 (let (($x193 (=> $x63 $x198)))
 (let (($x168 (= (_ bv0 32) ?x165)))
 (let ((?x179 (ite $x168 (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge ?x179 (_ bv1 32))))
 (let (($x184 (= $x63 $x181)))
 (let (($x43 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x28 (=> $x43 $x11)))
 (let (($x172 (= ?x179 (_ bv0 32))))
 (let (($x176 (= $x43 $x172)))
 (let (($x174 (and $x176 $x28)))
 (let (($x187 (and $x174 $x184)))
 (let (($x203 (and $x187 $x193)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x141)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x177 (= input.spec-%var-l-0.2.0 ?x169)))
 (let (($x206 (and $x177 $x203)))
 (let (($x201 (=> $x132 $x206)))
 (let ((?x140 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge ?x140 (_ bv1 32))))
 (let (($x162 (= $x132 $x161)))
 (let (($x126 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x159 (=> $x126 $x11)))
 (let (($x138 (= ?x140 (_ bv0 32))))
 (let (($x131 (= $x126 $x138)))
 (let (($x160 (and $x131 $x159)))
 (let (($x152 (and $x160 $x162)))
 (let (($x207 (and $x152 $x201)))
 (let (($x249 (and $x207 $x235)))
 (let (($x266 (and $x249 $x265)))
 (let (($x267 (= $x266 true)))
 (let (($x268 (= $x267 true)))
 (let (($x269 (= $x268 true)))
 (let (($x129 (= $x7 true)))
 (let (($x130 (= $x129 true)))
 (let (($x148 (= $x130 true)))
 (let (($x135 (= $x125 true)))
 (let (($x136 (= $x135 true)))
 (let (($x146 (= $x136 true)))
 (let (($x149 (and $x146 $x148)))
 (let (($x270 (and $x149 $x269)))
 (let (($x274 (and $x270 $x273)))
 (let (($x275 (and $x132 $x274)))
 (let (($x280 (and $x11 $x275)))
 (let (($x121 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x123 (and $x121 true)))
 (let (($x124 (=> $x64 $x123)))
 (let (($x114 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x115 (= $x64 $x114)))
 (let (($x20 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x31 (=> $x20 $x11)))
 (let (($x111 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x112 (= $x20 $x111)))
 (let (($x113 (and $x112 $x31)))
 (let (($x116 (and $x113 $x115)))
 (let (($x127 (and $x116 $x124)))
 (let (($x98 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x128 (and $x98 $x127)))
 (let (($x119 (=> $x63 $x128)))
 (let (($x107 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x109 (= $x63 $x107)))
 (let (($x100 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x105 (= $x43 $x100)))
 (let (($x106 (and $x105 $x28)))
 (let (($x95 (and $x106 $x109)))
 (let (($x120 (and $x95 $x119)))
 (let (($x281 (and $x120 $x280)))
 (let (($x91 (=> $x64 true)))
 (let (($x88 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x89 (= $x64 $x88)))
 (let (($x85 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x20 $x85)))
 (let (($x87 (and $x86 $x31)))
 (let (($x90 (and $x87 $x89)))
 (let (($x99 (and $x90 $x91)))
 (let (($x83 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x101 (and $x83 $x99)))
 (let (($x96 (=> $x63 $x101)))
 (let (($x79 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x80 (= $x63 $x79)))
 (let (($x76 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x77 (= $x43 $x76)))
 (let (($x78 (and $x77 $x28)))
 (let (($x81 (and $x78 $x80)))
 (let (($x102 (and $x81 $x96)))
 (let (($x74 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x103 (and $x74 $x102)))
 (let (($x276 (and $x103 $x281)))
 (let (($x62 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x16 (and $x62 true)))
 (let (($x18 (=> $x64 $x16)))
 (let (($x56 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x33 (= $x64 $x56)))
 (let (($x42 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x57 (= $x20 $x42)))
 (let (($x39 (and $x57 $x31)))
 (let (($x51 (and $x39 $x33)))
 (let (($x22 (and $x51 $x18)))
 (let (($x6 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x70 (and $x6 $x22)))
 (let (($x71 (=> $x63 $x70)))
 (let (($x67 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x26 (= $x63 $x67)))
 (let (($x68 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x32 (= $x43 $x68)))
 (let (($x47 (and $x32 $x28)))
 (let (($x41 (and $x47 $x26)))
 (let (($x72 (and $x41 $x71)))
 (let (($x277 (and $x72 $x276)))
 (let (($x60 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x282 (and $x60 $x277)))
 (let (($x48 (bvugt ?x10 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x38 (=> (bvule ?x10 (bvsub (bvadd ?x10 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x48)))))))
 (let (($x12 (=> (and $x5 (bvule ?x10 (bvsub (bvadd ?x10 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x69 $x48)))))))
 (let (($x278 (and $x12 $x282)))
 (let (($x433 (=> $x278 $x432)))
 (not $x433)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var1410X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var1410X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1410X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1410X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1407X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1407X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1407X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var1404X () (_ BitVec 32))
(declare-fun ind-%var1404X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1404X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1404X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1401X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1401X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1401X.0 () (_ BitVec 32))
(declare-fun ind-%var1398X () (_ BitVec 32))
(declare-fun ind-%var1395X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1395X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1395X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1410X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1410X (_ bv4 32))))))
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1410X (_ bv4 32)) (_ bv2 32))) ?x415)))
 (let ((?x421 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1410X (_ bv4 32)) (_ bv3 32))) ?x414)))
 (let (($x425 (= ind-%var1410X.2.1 ?x421)))
 (let ((?x403 (concat (select input.dst.llvm-mem (bvadd ind-%var1410X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1410X))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ind-%var1410X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1410X (_ bv2 32))) ?x403))))
 (let (($x416 (= ind-%var1410X.2.0 ?x409)))
 (let (($x11 (= false false)))
 (let (($x423 (= (_ bv0 32) ind-%var1410X)))
 (let ((?x397 (ite $x423 (_ bv0 32) (_ bv1 32))))
 (let (($x395 (= ind-%var1410X.0 ?x397)))
 (let (($x393 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x452 (and (and (and (and $x393 $x395) $x11) $x416) $x425)))
 (let (($x383 (= ind-%var1407X.2.1 ind-%var1407X.2.1)))
 (let (($x382 (= ind-%var1407X.2.0 ind-%var1407X.2.0)))
 (let (($x384 (= ind-%var1407X.0 ind-%var1407X.0)))
 (let (($x340 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x401 (and (and (and (and $x340 $x384) $x11) $x382) $x383)))
 (let (($x64 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x63 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x341 (and $x63 $x64)))
 (let (($x434 (and (and $x341 $x401) $x452)))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1404X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1404X (_ bv4 32))))))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1404X (_ bv4 32)) (_ bv2 32))) ?x366)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1404X (_ bv4 32)) (_ bv3 32))) ?x372)))
 (let (($x428 (= ind-%var1404X.2.1 ?x379)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ind-%var1404X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1404X))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ind-%var1404X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1404X (_ bv2 32))) ?x356))))
 (let (($x365 (= ind-%var1404X.2.0 ?x364)))
 (let (($x346 (= (_ bv0 32) ind-%var1404X)))
 (let ((?x344 (ite $x346 (_ bv0 32) (_ bv1 32))))
 (let (($x347 (= ind-%var1404X.0 ?x344)))
 (let (($x348 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x381 (and (and (and (and $x348 $x347) $x11) $x365) $x428)))
 (let (($x378 (= ind-%var1401X.2.1 ind-%var1401X.2.1)))
 (let (($x334 (= ind-%var1401X.2.0 ind-%var1401X.2.0)))
 (let (($x343 (and (and (and $x340 (= ind-%var1401X.0 ind-%var1401X.0)) $x11) $x334)))
 (let (($x349 (and $x343 $x378)))
 (let (($x426 (and (and $x341 $x349) $x381)))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1398X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1398X (_ bv4 32))))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1398X (_ bv4 32)) (_ bv2 32))) ?x317)))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1398X (_ bv4 32)) (_ bv3 32))) ?x314)))
 (let (($x329 (= ?x328 ?x328)))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ind-%var1398X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1398X))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ind-%var1398X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1398X (_ bv2 32))) ?x309))))
 (let (($x320 (= ?x319 ?x319)))
 (let (($x304 (= (_ bv0 32) ind-%var1398X)))
 (let ((?x353 (ite $x304 (_ bv0 32) (_ bv1 32))))
 (let (($x305 (= ?x353 ?x353)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x158 (concat ?x156 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x165 (concat ?x167 (concat ?x157 ?x158))))
 (let ((?x285 (bvadd ?x165 (_ bv4 32))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem ?x285))))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv2 32))) ?x295))))
 (let (($x299 (= ?x308 input.dst.llvm-%l)))
 (let (($x355 (and (and (and (and $x299 $x305) $x11) $x320) $x329)))
 (let (($x13 (= ind-%var1395X.2.1 ind-%var1395X.2.1)))
 (let (($x9 (= ind-%var1395X.2.0 ind-%var1395X.2.0)))
 (let (($x286 (= ind-%var1395X.0 ind-%var1395X.0)))
 (let (($x284 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x287 (and (and (and (and $x284 $x286) $x11) $x9) $x13)))
 (let (($x132 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x279 (and $x132 $x63)))
 (let (($x337 (and (and $x279 $x287) $x355)))
 (let (($x192 (or (or $x337 $x426) $x434)))
 (let (($x211 (= $x192 true)))
 (let (($x432 (= $x211 true)))
 (let ((?x212 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x97 (concat ?x137 (concat ?x228 ?x212)))))
 (let (($x271 (= ?x147 input.dst.llvm-%l)))
 (let (($x272 (= $x271 true)))
 (let (($x273 (= $x272 true)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x243 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x10 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x19 (bvadd ?x10 (_ bv3 32))))
 (let ((?x255 (concat (select input.dst.llvm-mem ?x19) (concat ?x247 ?x243))))
 (let (($x259 (= (bvand ?x255 (_ bv4294967288 32)) ?x255)))
 (let (($x240 (= (bvand ?x10 (_ bv4294967292 32)) ?x10)))
 (let (($x260 (and $x240 $x259)))
 (let (($x246 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x46 (and true $x246)))
 (let (($x250 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x10 (bvsub ?x10 (_ bv4 32))) (bvult ?x10 (bvsub ?x10 (_ bv4 32))))))
 (let (($x263 (and (and (and $x250 $x46) $x240) $x260)))
 (let (($x264 (= true $x263)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x265 (=> $x5 $x264)))
 (let (($x236 (= input.dst.llvm-%l ?x147)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x231)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x225 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x223)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (and $x210 $x225)))
 (let (($x233 (and $x230 $x222)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x196 $x233)))
 (let (($x217 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x216 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x202 $x217)))))))
 (let (($x229 (and $x216 $x209)))
 (let (($x234 (and $x229 $x236)))
 (let (($x125 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x235 (and $x125 $x234)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x182))))
 (let (($x191 (= input.spec-%var-l-0.2.1.2.0 ?x190)))
 (let (($x198 (and $x191 true)))
 (let (($x193 (=> $x63 $x198)))
 (let (($x168 (= (_ bv0 32) ?x165)))
 (let ((?x179 (ite $x168 (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge ?x179 (_ bv1 32))))
 (let (($x184 (= $x63 $x181)))
 (let (($x43 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x28 (=> $x43 $x11)))
 (let (($x172 (= ?x179 (_ bv0 32))))
 (let (($x176 (= $x43 $x172)))
 (let (($x174 (and $x176 $x28)))
 (let (($x187 (and $x174 $x184)))
 (let (($x203 (and $x187 $x193)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x141)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x177 (= input.spec-%var-l-0.2.0 ?x169)))
 (let (($x206 (and $x177 $x203)))
 (let (($x201 (=> $x132 $x206)))
 (let ((?x140 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge ?x140 (_ bv1 32))))
 (let (($x162 (= $x132 $x161)))
 (let (($x126 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x159 (=> $x126 $x11)))
 (let (($x138 (= ?x140 (_ bv0 32))))
 (let (($x131 (= $x126 $x138)))
 (let (($x160 (and $x131 $x159)))
 (let (($x152 (and $x160 $x162)))
 (let (($x207 (and $x152 $x201)))
 (let (($x249 (and $x207 $x235)))
 (let (($x266 (and $x249 $x265)))
 (let (($x267 (= $x266 true)))
 (let (($x268 (= $x267 true)))
 (let (($x269 (= $x268 true)))
 (let (($x129 (= $x7 true)))
 (let (($x130 (= $x129 true)))
 (let (($x148 (= $x130 true)))
 (let (($x135 (= $x125 true)))
 (let (($x136 (= $x135 true)))
 (let (($x146 (= $x136 true)))
 (let (($x149 (and $x146 $x148)))
 (let (($x270 (and $x149 $x269)))
 (let (($x274 (and $x270 $x273)))
 (let (($x275 (and $x132 $x274)))
 (let (($x280 (and $x11 $x275)))
 (let (($x121 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x123 (and $x121 true)))
 (let (($x124 (=> $x64 $x123)))
 (let (($x114 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x115 (= $x64 $x114)))
 (let (($x20 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x31 (=> $x20 $x11)))
 (let (($x111 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x112 (= $x20 $x111)))
 (let (($x113 (and $x112 $x31)))
 (let (($x116 (and $x113 $x115)))
 (let (($x127 (and $x116 $x124)))
 (let (($x98 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x128 (and $x98 $x127)))
 (let (($x119 (=> $x63 $x128)))
 (let (($x107 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x109 (= $x63 $x107)))
 (let (($x100 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x105 (= $x43 $x100)))
 (let (($x106 (and $x105 $x28)))
 (let (($x95 (and $x106 $x109)))
 (let (($x120 (and $x95 $x119)))
 (let (($x281 (and $x120 $x280)))
 (let (($x91 (=> $x64 true)))
 (let (($x88 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x89 (= $x64 $x88)))
 (let (($x85 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x20 $x85)))
 (let (($x87 (and $x86 $x31)))
 (let (($x90 (and $x87 $x89)))
 (let (($x99 (and $x90 $x91)))
 (let (($x83 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x101 (and $x83 $x99)))
 (let (($x96 (=> $x63 $x101)))
 (let (($x79 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x80 (= $x63 $x79)))
 (let (($x76 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x77 (= $x43 $x76)))
 (let (($x78 (and $x77 $x28)))
 (let (($x81 (and $x78 $x80)))
 (let (($x102 (and $x81 $x96)))
 (let (($x74 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x103 (and $x74 $x102)))
 (let (($x276 (and $x103 $x281)))
 (let (($x62 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x16 (and $x62 true)))
 (let (($x18 (=> $x64 $x16)))
 (let (($x56 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x33 (= $x64 $x56)))
 (let (($x42 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x57 (= $x20 $x42)))
 (let (($x39 (and $x57 $x31)))
 (let (($x51 (and $x39 $x33)))
 (let (($x22 (and $x51 $x18)))
 (let (($x6 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x70 (and $x6 $x22)))
 (let (($x71 (=> $x63 $x70)))
 (let (($x67 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x26 (= $x63 $x67)))
 (let (($x68 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x32 (= $x43 $x68)))
 (let (($x47 (and $x32 $x28)))
 (let (($x41 (and $x47 $x26)))
 (let (($x72 (and $x41 $x71)))
 (let (($x277 (and $x72 $x276)))
 (let (($x60 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x282 (and $x60 $x277)))
 (let (($x48 (bvugt ?x10 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x38 (=> (bvule ?x10 (bvsub (bvadd ?x10 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x48)))))))
 (let (($x12 (=> (and $x5 (bvule ?x10 (bvsub (bvadd ?x10 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x69 $x48)))))))
 (let (($x278 (and $x12 $x282)))
 (let (($x433 (=> $x278 $x432)))
 (not $x433)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var1545X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var1545X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1545X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1545X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1542X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1542X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1542X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var1539X () (_ BitVec 32))
(declare-fun ind-%var1539X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1539X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1539X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1536X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1536X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1536X.0 () (_ BitVec 32))
(declare-fun ind-%var1533X () (_ BitVec 32))
(declare-fun ind-%var1530X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1530X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1530X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1545X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1545X (_ bv4 32))))))
 (let ((?x419 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1545X (_ bv4 32)) (_ bv2 32))) ?x411)))
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1545X (_ bv4 32)) (_ bv3 32))) ?x419)))
 (let (($x421 (= ind-%var1545X.2.1 ?x414)))
 (let ((?x404 (concat (select input.dst.llvm-mem (bvadd ind-%var1545X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1545X))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ind-%var1545X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1545X (_ bv2 32))) ?x404))))
 (let (($x416 (= ind-%var1545X.2.0 ?x409)))
 (let (($x47 (= false false)))
 (let (($x395 (= (_ bv0 32) ind-%var1545X)))
 (let ((?x427 (ite $x395 (_ bv0 32) (_ bv1 32))))
 (let (($x429 (= ind-%var1545X.0 ?x427)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x245 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x55 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x8 (bvadd ?x55 (_ bv3 32))))
 (let ((?x259 (concat (select input.dst.llvm-mem ?x8) (concat ?x251 ?x245))))
 (let (($x402 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 ?x259)))
 (let (($x192 (and (and (and (and $x402 $x429) $x47) $x416) $x421)))
 (let (($x383 (= ind-%var1542X.2.1 ind-%var1542X.2.1)))
 (let (($x391 (= ind-%var1542X.2.0 ind-%var1542X.2.0)))
 (let (($x387 (= ind-%var1542X.0 ind-%var1542X.0)))
 (let (($x352 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0)))
 (let (($x393 (and (and (and (and $x352 $x387) $x47) $x391) $x383)))
 (let (($x33 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x26 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x339 (and $x26 $x33)))
 (let (($x432 (and (and $x339 $x393) $x192)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1539X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1539X (_ bv4 32))))))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1539X (_ bv4 32)) (_ bv2 32))) ?x369)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1539X (_ bv4 32)) (_ bv3 32))) ?x363)))
 (let (($x428 (= ind-%var1539X.2.1 ?x379)))
 (let ((?x354 (concat (select input.dst.llvm-mem (bvadd ind-%var1539X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1539X))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ind-%var1539X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1539X (_ bv2 32))) ?x354))))
 (let (($x398 (= ind-%var1539X.2.0 ?x365)))
 (let (($x380 (= (_ bv0 32) ind-%var1539X)))
 (let ((?x400 (ite $x380 (_ bv0 32) (_ bv1 32))))
 (let (($x375 (= ind-%var1539X.0 ?x400)))
 (let (($x346 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 ?x259)))
 (let (($x388 (and (and (and (and $x346 $x375) $x47) $x398) $x428)))
 (let (($x349 (= ind-%var1536X.2.1 ind-%var1536X.2.1)))
 (let (($x336 (= ind-%var1536X.2.0 ind-%var1536X.2.0)))
 (let (($x348 (and (and (and $x352 (= ind-%var1536X.0 ind-%var1536X.0)) $x47) $x336)))
 (let (($x374 (and $x348 $x349)))
 (let (($x385 (and (and $x339 $x374) $x388)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1533X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1533X (_ bv4 32))))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1533X (_ bv4 32)) (_ bv2 32))) ?x316)))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1533X (_ bv4 32)) (_ bv3 32))) ?x322)))
 (let (($x329 (= ?x328 ?x328)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ind-%var1533X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1533X))))
 (let ((?x320 (concat (select input.dst.llvm-mem (bvadd ind-%var1533X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1533X (_ bv2 32))) ?x311))))
 (let (($x332 (= ?x320 ?x320)))
 (let (($x330 (= (_ bv0 32) ind-%var1533X)))
 (let ((?x331 (ite $x330 (_ bv0 32) (_ bv1 32))))
 (let (($x303 (= ?x331 ?x331)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x156 (concat ?x153 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x179 (concat ?x168 (concat ?x158 ?x156))))
 (let ((?x296 (bvadd ?x179 (_ bv4 32))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x288))))
 (let (($x353 (= ?x304 ?x259)))
 (let (($x335 (and (and (and (and $x353 $x303) $x47) $x332) $x329)))
 (let (($x287 (= ind-%var1530X.2.1 ind-%var1530X.2.1)))
 (let (($x293 (= ind-%var1530X.2.0 ind-%var1530X.2.0)))
 (let (($x9 (= ind-%var1530X.0 ind-%var1530X.0)))
 (let (($x205 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0)))
 (let (($x298 (and (and (and (and $x205 $x9) $x47) $x293) $x287)))
 (let (($x162 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x290 (and $x162 $x26)))
 (let (($x338 (and (and $x290 $x298) $x335)))
 (let (($x431 (or (or $x338 $x385) $x432)))
 (let (($x23 (= $x431 true)))
 (let (($x218 (= $x23 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x249 (concat ?x235 (concat ?x147 (concat ?x212 ?x227)))))
 (let (($x275 (= ?x249 input.dst.llvm-%l)))
 (let (($x280 (= $x275 true)))
 (let (($x281 (= $x280 true)))
 (let (($x263 (= (bvand ?x259 (_ bv4294967288 32)) ?x259)))
 (let (($x242 (= (bvand ?x55 (_ bv4294967292 32)) ?x55)))
 (let (($x264 (and $x242 $x263)))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x240 (and true $x248)))
 (let (($x254 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x55 (bvsub ?x55 (_ bv4 32))) (bvult ?x55 (bvsub ?x55 (_ bv4 32))))))
 (let (($x267 (and (and (and $x254 $x240) $x242) $x264)))
 (let (($x268 (= true $x267)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x269 (=> $x5 $x268)))
 (let (($x239 (= input.dst.llvm-%l ?x249)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x229 (= (_ bv0 32) ?x209)))
 (let ((?x231 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x231)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (and $x230 $x222)))
 (let (($x92 (and $x233 $x229)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x202 $x92)))
 (let (($x221 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x225 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x199 $x221)))))))
 (let (($x94 (and $x225 $x97)))
 (let (($x237 (and $x94 $x239)))
 (let (($x129 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x238 (and $x129 $x237)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x185))))
 (let (($x193 (= input.spec-%var-l-0.2.1.2.0 ?x198)))
 (let (($x203 (and $x193 true)))
 (let (($x206 (=> $x26 $x203)))
 (let (($x172 (= (_ bv0 32) ?x179)))
 (let ((?x176 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x176 (_ bv1 32))))
 (let (($x188 (= $x26 $x187)))
 (let (($x68 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x68 $x47)))
 (let (($x174 (= ?x176 (_ bv0 32))))
 (let (($x181 (= $x68 $x174)))
 (let (($x184 (and $x181 $x63)))
 (let (($x189 (and $x184 $x188)))
 (let (($x201 (and $x189 $x206)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x139)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x166 (= input.spec-%var-l-0.2.0 ?x178)))
 (let (($x207 (and $x166 $x201)))
 (let (($x204 (=> $x162 $x207)))
 (let ((?x131 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x152 (bvuge ?x131 (_ bv1 32))))
 (let (($x164 (= $x162 $x152)))
 (let (($x135 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x132 (=> $x135 $x47)))
 (let (($x159 (= ?x131 (_ bv0 32))))
 (let (($x160 (= $x135 $x159)))
 (let (($x161 (and $x160 $x132)))
 (let (($x180 (and $x161 $x164)))
 (let (($x208 (and $x180 $x204)))
 (let (($x253 (and $x208 $x238)))
 (let (($x270 (and $x253 $x269)))
 (let (($x271 (= $x270 true)))
 (let (($x272 (= $x271 true)))
 (let (($x273 (= $x272 true)))
 (let (($x122 (= $x5 true)))
 (let (($x126 (= $x122 true)))
 (let (($x140 (= $x126 true)))
 (let (($x130 (= $x129 true)))
 (let (($x148 (= $x130 true)))
 (let (($x149 (= $x148 true)))
 (let (($x138 (and $x149 $x140)))
 (let (($x274 (and $x138 $x273)))
 (let (($x276 (and $x274 $x281)))
 (let (($x277 (and $x135 $x276)))
 (let (($x282 (and $x47 $x277)))
 (let (($x124 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x127 (and $x124 true)))
 (let (($x128 (=> $x33 $x127)))
 (let (($x116 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x117 (= $x33 $x116)))
 (let (($x42 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x64 (=> $x42 $x47)))
 (let (($x113 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x114 (= $x42 $x113)))
 (let (($x115 (and $x114 $x64)))
 (let (($x121 (and $x115 $x117)))
 (let (($x119 (and $x121 $x128)))
 (let (($x111 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x120 (and $x111 $x119)))
 (let (($x133 (=> $x26 $x120)))
 (let (($x95 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x110 (= $x26 $x95)))
 (let (($x106 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x107 (= $x68 $x106)))
 (let (($x109 (and $x107 $x63)))
 (let (($x98 (and $x109 $x110)))
 (let (($x134 (and $x98 $x133)))
 (let (($x278 (and $x134 $x282)))
 (let (($x101 (=> $x33 true)))
 (let (($x90 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x91 (= $x33 $x90)))
 (let (($x87 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x88 (= $x42 $x87)))
 (let (($x89 (and $x88 $x64)))
 (let (($x99 (and $x89 $x91)))
 (let (($x96 (and $x99 $x101)))
 (let (($x85 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x102 (and $x85 $x96)))
 (let (($x103 (=> $x26 $x102)))
 (let (($x81 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x82 (= $x26 $x81)))
 (let (($x78 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x79 (= $x68 $x78)))
 (let (($x80 (and $x79 $x63)))
 (let (($x83 (and $x80 $x82)))
 (let (($x104 (and $x83 $x103)))
 (let (($x76 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x100 (and $x76 $x104)))
 (let (($x279 (and $x100 $x278)))
 (let (($x18 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x22 (and $x18 true)))
 (let (($x70 (=> $x33 $x22)))
 (let (($x51 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x14 (= $x33 $x51)))
 (let (($x31 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x39 (= $x42 $x31)))
 (let (($x56 (and $x39 $x64)))
 (let (($x59 (and $x56 $x14)))
 (let (($x71 (and $x59 $x70)))
 (let (($x20 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x72 (and $x20 $x71)))
 (let (($x73 (=> $x26 $x72)))
 (let (($x41 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x37 (= $x26 $x41)))
 (let (($x11 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x28 (= $x68 $x11)))
 (let (($x67 (and $x28 $x63)))
 (let (($x30 (and $x67 $x37)))
 (let (($x74 (and $x30 $x73)))
 (let (($x283 (and $x74 $x279)))
 (let (($x43 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x327 (and $x43 $x283)))
 (let (($x44 (bvugt ?x55 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x60 (=> (bvule ?x55 (bvsub (bvadd ?x55 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x44)))))))
 (let (($x34 (=> (and $x5 (bvule ?x55 (bvsub (bvadd ?x55 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x66 $x44)))))))
 (let (($x284 (and $x34 $x327)))
 (let (($x232 (=> $x284 $x218)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var1545X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var1545X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1545X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1545X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1542X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1542X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1542X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var1539X () (_ BitVec 32))
(declare-fun ind-%var1539X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1539X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1539X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1536X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1536X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1536X.0 () (_ BitVec 32))
(declare-fun ind-%var1533X () (_ BitVec 32))
(declare-fun ind-%var1530X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1530X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1530X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1545X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1545X (_ bv4 32))))))
 (let ((?x419 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1545X (_ bv4 32)) (_ bv2 32))) ?x411)))
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1545X (_ bv4 32)) (_ bv3 32))) ?x419)))
 (let (($x421 (= ind-%var1545X.2.1 ?x414)))
 (let ((?x404 (concat (select input.dst.llvm-mem (bvadd ind-%var1545X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1545X))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ind-%var1545X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1545X (_ bv2 32))) ?x404))))
 (let (($x416 (= ind-%var1545X.2.0 ?x409)))
 (let (($x47 (= false false)))
 (let (($x395 (= (_ bv0 32) ind-%var1545X)))
 (let ((?x427 (ite $x395 (_ bv0 32) (_ bv1 32))))
 (let (($x429 (= ind-%var1545X.0 ?x427)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x245 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x55 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x8 (bvadd ?x55 (_ bv3 32))))
 (let ((?x259 (concat (select input.dst.llvm-mem ?x8) (concat ?x251 ?x245))))
 (let (($x402 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 ?x259)))
 (let (($x192 (and (and (and (and $x402 $x429) $x47) $x416) $x421)))
 (let (($x383 (= ind-%var1542X.2.1 ind-%var1542X.2.1)))
 (let (($x391 (= ind-%var1542X.2.0 ind-%var1542X.2.0)))
 (let (($x387 (= ind-%var1542X.0 ind-%var1542X.0)))
 (let (($x352 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0)))
 (let (($x393 (and (and (and (and $x352 $x387) $x47) $x391) $x383)))
 (let (($x33 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x26 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x339 (and $x26 $x33)))
 (let (($x432 (and (and $x339 $x393) $x192)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1539X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1539X (_ bv4 32))))))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1539X (_ bv4 32)) (_ bv2 32))) ?x369)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1539X (_ bv4 32)) (_ bv3 32))) ?x363)))
 (let (($x428 (= ind-%var1539X.2.1 ?x379)))
 (let ((?x354 (concat (select input.dst.llvm-mem (bvadd ind-%var1539X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1539X))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ind-%var1539X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1539X (_ bv2 32))) ?x354))))
 (let (($x398 (= ind-%var1539X.2.0 ?x365)))
 (let (($x380 (= (_ bv0 32) ind-%var1539X)))
 (let ((?x400 (ite $x380 (_ bv0 32) (_ bv1 32))))
 (let (($x375 (= ind-%var1539X.0 ?x400)))
 (let (($x346 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 ?x259)))
 (let (($x388 (and (and (and (and $x346 $x375) $x47) $x398) $x428)))
 (let (($x349 (= ind-%var1536X.2.1 ind-%var1536X.2.1)))
 (let (($x336 (= ind-%var1536X.2.0 ind-%var1536X.2.0)))
 (let (($x348 (and (and (and $x352 (= ind-%var1536X.0 ind-%var1536X.0)) $x47) $x336)))
 (let (($x374 (and $x348 $x349)))
 (let (($x385 (and (and $x339 $x374) $x388)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1533X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1533X (_ bv4 32))))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1533X (_ bv4 32)) (_ bv2 32))) ?x316)))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1533X (_ bv4 32)) (_ bv3 32))) ?x322)))
 (let (($x329 (= ?x328 ?x328)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ind-%var1533X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1533X))))
 (let ((?x320 (concat (select input.dst.llvm-mem (bvadd ind-%var1533X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1533X (_ bv2 32))) ?x311))))
 (let (($x332 (= ?x320 ?x320)))
 (let (($x330 (= (_ bv0 32) ind-%var1533X)))
 (let ((?x331 (ite $x330 (_ bv0 32) (_ bv1 32))))
 (let (($x303 (= ?x331 ?x331)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x156 (concat ?x153 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x179 (concat ?x168 (concat ?x158 ?x156))))
 (let ((?x296 (bvadd ?x179 (_ bv4 32))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x288))))
 (let (($x353 (= ?x304 ?x259)))
 (let (($x335 (and (and (and (and $x353 $x303) $x47) $x332) $x329)))
 (let (($x287 (= ind-%var1530X.2.1 ind-%var1530X.2.1)))
 (let (($x293 (= ind-%var1530X.2.0 ind-%var1530X.2.0)))
 (let (($x9 (= ind-%var1530X.0 ind-%var1530X.0)))
 (let (($x205 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0)))
 (let (($x298 (and (and (and (and $x205 $x9) $x47) $x293) $x287)))
 (let (($x162 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x290 (and $x162 $x26)))
 (let (($x338 (and (and $x290 $x298) $x335)))
 (let (($x431 (or (or $x338 $x385) $x432)))
 (let (($x23 (= $x431 true)))
 (let (($x218 (= $x23 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x249 (concat ?x235 (concat ?x147 (concat ?x212 ?x227)))))
 (let (($x275 (= ?x249 input.dst.llvm-%l)))
 (let (($x280 (= $x275 true)))
 (let (($x281 (= $x280 true)))
 (let (($x263 (= (bvand ?x259 (_ bv4294967288 32)) ?x259)))
 (let (($x242 (= (bvand ?x55 (_ bv4294967292 32)) ?x55)))
 (let (($x264 (and $x242 $x263)))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x240 (and true $x248)))
 (let (($x254 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x55 (bvsub ?x55 (_ bv4 32))) (bvult ?x55 (bvsub ?x55 (_ bv4 32))))))
 (let (($x267 (and (and (and $x254 $x240) $x242) $x264)))
 (let (($x268 (= true $x267)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x269 (=> $x5 $x268)))
 (let (($x239 (= input.dst.llvm-%l ?x249)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x229 (= (_ bv0 32) ?x209)))
 (let ((?x231 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x231)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (and $x230 $x222)))
 (let (($x92 (and $x233 $x229)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x202 $x92)))
 (let (($x221 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x225 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x199 $x221)))))))
 (let (($x94 (and $x225 $x97)))
 (let (($x237 (and $x94 $x239)))
 (let (($x129 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x238 (and $x129 $x237)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x185))))
 (let (($x193 (= input.spec-%var-l-0.2.1.2.0 ?x198)))
 (let (($x203 (and $x193 true)))
 (let (($x206 (=> $x26 $x203)))
 (let (($x172 (= (_ bv0 32) ?x179)))
 (let ((?x176 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x176 (_ bv1 32))))
 (let (($x188 (= $x26 $x187)))
 (let (($x68 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x68 $x47)))
 (let (($x174 (= ?x176 (_ bv0 32))))
 (let (($x181 (= $x68 $x174)))
 (let (($x184 (and $x181 $x63)))
 (let (($x189 (and $x184 $x188)))
 (let (($x201 (and $x189 $x206)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x139)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x166 (= input.spec-%var-l-0.2.0 ?x178)))
 (let (($x207 (and $x166 $x201)))
 (let (($x204 (=> $x162 $x207)))
 (let ((?x131 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x152 (bvuge ?x131 (_ bv1 32))))
 (let (($x164 (= $x162 $x152)))
 (let (($x135 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x132 (=> $x135 $x47)))
 (let (($x159 (= ?x131 (_ bv0 32))))
 (let (($x160 (= $x135 $x159)))
 (let (($x161 (and $x160 $x132)))
 (let (($x180 (and $x161 $x164)))
 (let (($x208 (and $x180 $x204)))
 (let (($x253 (and $x208 $x238)))
 (let (($x270 (and $x253 $x269)))
 (let (($x271 (= $x270 true)))
 (let (($x272 (= $x271 true)))
 (let (($x273 (= $x272 true)))
 (let (($x122 (= $x5 true)))
 (let (($x126 (= $x122 true)))
 (let (($x140 (= $x126 true)))
 (let (($x130 (= $x129 true)))
 (let (($x148 (= $x130 true)))
 (let (($x149 (= $x148 true)))
 (let (($x138 (and $x149 $x140)))
 (let (($x274 (and $x138 $x273)))
 (let (($x276 (and $x274 $x281)))
 (let (($x277 (and $x135 $x276)))
 (let (($x282 (and $x47 $x277)))
 (let (($x124 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x127 (and $x124 true)))
 (let (($x128 (=> $x33 $x127)))
 (let (($x116 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x117 (= $x33 $x116)))
 (let (($x42 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x64 (=> $x42 $x47)))
 (let (($x113 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x114 (= $x42 $x113)))
 (let (($x115 (and $x114 $x64)))
 (let (($x121 (and $x115 $x117)))
 (let (($x119 (and $x121 $x128)))
 (let (($x111 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x120 (and $x111 $x119)))
 (let (($x133 (=> $x26 $x120)))
 (let (($x95 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x110 (= $x26 $x95)))
 (let (($x106 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x107 (= $x68 $x106)))
 (let (($x109 (and $x107 $x63)))
 (let (($x98 (and $x109 $x110)))
 (let (($x134 (and $x98 $x133)))
 (let (($x278 (and $x134 $x282)))
 (let (($x101 (=> $x33 true)))
 (let (($x90 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x91 (= $x33 $x90)))
 (let (($x87 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x88 (= $x42 $x87)))
 (let (($x89 (and $x88 $x64)))
 (let (($x99 (and $x89 $x91)))
 (let (($x96 (and $x99 $x101)))
 (let (($x85 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x102 (and $x85 $x96)))
 (let (($x103 (=> $x26 $x102)))
 (let (($x81 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x82 (= $x26 $x81)))
 (let (($x78 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x79 (= $x68 $x78)))
 (let (($x80 (and $x79 $x63)))
 (let (($x83 (and $x80 $x82)))
 (let (($x104 (and $x83 $x103)))
 (let (($x76 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x100 (and $x76 $x104)))
 (let (($x279 (and $x100 $x278)))
 (let (($x18 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x22 (and $x18 true)))
 (let (($x70 (=> $x33 $x22)))
 (let (($x51 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x14 (= $x33 $x51)))
 (let (($x31 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x39 (= $x42 $x31)))
 (let (($x56 (and $x39 $x64)))
 (let (($x59 (and $x56 $x14)))
 (let (($x71 (and $x59 $x70)))
 (let (($x20 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x72 (and $x20 $x71)))
 (let (($x73 (=> $x26 $x72)))
 (let (($x41 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x37 (= $x26 $x41)))
 (let (($x11 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x28 (= $x68 $x11)))
 (let (($x67 (and $x28 $x63)))
 (let (($x30 (and $x67 $x37)))
 (let (($x74 (and $x30 $x73)))
 (let (($x283 (and $x74 $x279)))
 (let (($x43 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x327 (and $x43 $x283)))
 (let (($x44 (bvugt ?x55 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x60 (=> (bvule ?x55 (bvsub (bvadd ?x55 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x44)))))))
 (let (($x34 (=> (and $x5 (bvule ?x55 (bvsub (bvadd ?x55 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x66 $x44)))))))
 (let (($x284 (and $x34 $x327)))
 (let (($x232 (=> $x284 $x218)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var1680X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var1680X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1680X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1680X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1677X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1677X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1677X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var1674X () (_ BitVec 32))
(declare-fun ind-%var1674X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1674X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1674X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1671X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1671X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1671X.0 () (_ BitVec 32))
(declare-fun ind-%var1668X () (_ BitVec 32))
(declare-fun ind-%var1665X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1665X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1665X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x455 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1680X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1680X (_ bv4 32))))))
 (let ((?x420 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1680X (_ bv4 32)) (_ bv2 32))) ?x455)))
 (let ((?x419 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1680X (_ bv4 32)) (_ bv3 32))) ?x420)))
 (let (($x414 (= ind-%var1680X.2.1 ?x419)))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd ind-%var1680X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1680X))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ind-%var1680X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1680X (_ bv2 32))) ?x405))))
 (let (($x416 (= ind-%var1680X.2.0 ?x409)))
 (let (($x67 (= false false)))
 (let (($x429 (= (_ bv0 32) ind-%var1680X)))
 (let ((?x425 (ite $x429 (_ bv0 32) (_ bv1 32))))
 (let (($x452 (= ind-%var1680X.0 ?x425)))
 (let (($x397 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x431 (and (and (and (and $x397 $x452) $x67) $x416) $x414)))
 (let (($x383 (= ind-%var1677X.2.1 ind-%var1677X.2.1)))
 (let (($x392 (= ind-%var1677X.2.0 ind-%var1677X.2.0)))
 (let (($x382 (= ind-%var1677X.0 ind-%var1677X.0)))
 (let (($x357 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0)))
 (let (($x402 (and (and (and (and $x357 $x382) $x67) $x392) $x383)))
 (let (($x14 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x37 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x334 (and $x37 $x14)))
 (let (($x218 (and (and $x334 $x402) $x431)))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1674X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1674X (_ bv4 32))))))
 (let ((?x373 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1674X (_ bv4 32)) (_ bv2 32))) ?x368)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1674X (_ bv4 32)) (_ bv3 32))) ?x373)))
 (let (($x428 (= ind-%var1674X.2.1 ?x379)))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ind-%var1674X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1674X))))
 (let ((?x398 (concat (select input.dst.llvm-mem (bvadd ind-%var1674X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1674X (_ bv2 32))) ?x359))))
 (let (($x435 (= ind-%var1674X.2.0 ?x398)))
 (let (($x381 (= (_ bv0 32) ind-%var1674X)))
 (let ((?x426 (ite $x381 (_ bv0 32) (_ bv1 32))))
 (let (($x361 (= ind-%var1674X.0 ?x426)))
 (let (($x380 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x390 (and (and (and (and $x380 $x361) $x67) $x435) $x428)))
 (let (($x374 (= ind-%var1671X.2.1 ind-%var1671X.2.1)))
 (let (($x378 (= ind-%var1671X.2.0 ind-%var1671X.2.0)))
 (let (($x346 (and (and (and $x357 (= ind-%var1671X.0 ind-%var1671X.0)) $x67) $x378)))
 (let (($x344 (and $x346 $x374)))
 (let (($x401 (and (and $x334 $x344) $x390)))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1668X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1668X (_ bv4 32))))))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1668X (_ bv4 32)) (_ bv2 32))) ?x315)))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1668X (_ bv4 32)) (_ bv3 32))) ?x318)))
 (let (($x329 (= ?x328 ?x328)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ind-%var1668X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1668X))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ind-%var1668X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1668X (_ bv2 32))) ?x302))))
 (let (($x341 (= ?x332 ?x332)))
 (let (($x355 (= (_ bv0 32) ind-%var1668X)))
 (let ((?x337 (ite $x355 (_ bv0 32) (_ bv1 32))))
 (let (($x301 (= ?x337 ?x337)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x153 (concat ?x157 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x176 (concat ?x172 (concat ?x156 ?x153))))
 (let ((?x295 (bvadd ?x176 (_ bv4 32))))
 (let ((?x324 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv1 32))) (select input.dst.llvm-mem ?x295))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv2 32))) ?x324))))
 (let (($x331 (= ?x330 input.dst.llvm-%l)))
 (let (($x342 (and (and (and (and $x331 $x301) $x67) $x341) $x329)))
 (let (($x298 (= ind-%var1665X.2.1 ind-%var1665X.2.1)))
 (let (($x13 (= ind-%var1665X.2.0 ind-%var1665X.2.0)))
 (let (($x293 (= ind-%var1665X.0 ind-%var1665X.0)))
 (let (($x285 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0)))
 (let (($x323 (and (and (and (and $x285 $x293) $x67) $x13) $x298)))
 (let (($x164 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x219 (and $x164 $x37)))
 (let (($x333 (and (and $x219 $x323) $x342)))
 (let (($x24 (or (or $x333 $x401) $x218)))
 (let (($x35 (= $x24 true)))
 (let (($x213 (= $x35 true)))
 (let ((?x228 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x253 (concat ?x238 (concat ?x249 (concat ?x227 ?x228)))))
 (let (($x277 (= ?x253 input.dst.llvm-%l)))
 (let (($x282 (= $x277 true)))
 (let (($x278 (= $x282 true)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x247 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x45 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x17 (bvadd ?x45 (_ bv3 32))))
 (let ((?x263 (concat (select input.dst.llvm-mem ?x17) (concat ?x255 ?x247))))
 (let (($x267 (= (bvand ?x263 (_ bv4294967288 32)) ?x263)))
 (let (($x243 (= (bvand ?x45 (_ bv4294967292 32)) ?x45)))
 (let (($x268 (and $x243 $x267)))
 (let (($x252 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x242 (and true $x252)))
 (let (($x258 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x45 (bvsub ?x45 (_ bv4 32))) (bvult ?x45 (bvsub ?x45 (_ bv4 32))))))
 (let (($x271 (and (and (and $x258 $x242) $x243) $x268)))
 (let (($x272 (= true $x271)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x273 (=> $x5 $x272)))
 (let (($x241 (= input.dst.llvm-%l ?x253)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x97)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x233 $x229)))
 (let (($x234 (and $x92 $x94)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x199 $x234)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x222 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x196 $x210)))))))
 (let (($x214 (and $x222 $x235)))
 (let (($x250 (and $x214 $x241)))
 (let (($x122 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x244 (and $x122 $x250)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x171))))
 (let (($x206 (= input.spec-%var-l-0.2.1.2.0 ?x203)))
 (let (($x201 (and $x206 true)))
 (let (($x207 (=> $x37 $x201)))
 (let (($x174 (= (_ bv0 32) ?x176)))
 (let ((?x181 (ite $x174 (_ bv0 32) (_ bv1 32))))
 (let (($x189 (bvuge ?x181 (_ bv1 32))))
 (let (($x190 (= $x37 $x189)))
 (let (($x11 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x26 (=> $x11 $x67)))
 (let (($x184 (= ?x181 (_ bv0 32))))
 (let (($x187 (= $x11 $x184)))
 (let (($x188 (and $x187 $x26)))
 (let (($x191 (and $x188 $x190)))
 (let (($x204 (and $x191 $x207)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x144)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x165 (= input.spec-%var-l-0.2.0 ?x167)))
 (let (($x208 (and $x165 $x204)))
 (let (($x217 (=> $x164 $x208)))
 (let ((?x160 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x180 (bvuge ?x160 (_ bv1 32))))
 (let (($x170 (= $x164 $x180)))
 (let (($x130 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x162 (=> $x130 $x67)))
 (let (($x132 (= ?x160 (_ bv0 32))))
 (let (($x161 (= $x130 $x132)))
 (let (($x152 (and $x161 $x162)))
 (let (($x169 (and $x152 $x170)))
 (let (($x220 (and $x169 $x217)))
 (let (($x257 (and $x220 $x244)))
 (let (($x274 (and $x257 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x280 (= $x275 true)))
 (let (($x281 (= $x280 true)))
 (let (($x125 (= $x7 true)))
 (let (($x135 (= $x125 true)))
 (let (($x131 (= $x135 true)))
 (let (($x126 (= $x122 true)))
 (let (($x140 (= $x126 true)))
 (let (($x138 (= $x140 true)))
 (let (($x159 (and $x138 $x131)))
 (let (($x276 (and $x159 $x281)))
 (let (($x279 (and $x276 $x278)))
 (let (($x283 (and $x130 $x279)))
 (let (($x327 (and $x67 $x283)))
 (let (($x128 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x119 (and $x128 true)))
 (let (($x120 (=> $x14 $x119)))
 (let (($x121 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x123 (= $x14 $x121)))
 (let (($x31 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x33 (=> $x31 $x67)))
 (let (($x115 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x116 (= $x31 $x115)))
 (let (($x117 (and $x116 $x33)))
 (let (($x124 (and $x117 $x123)))
 (let (($x133 (and $x124 $x120)))
 (let (($x113 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x134 (and $x113 $x133)))
 (let (($x136 (=> $x37 $x134)))
 (let (($x98 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x108 (= $x37 $x98)))
 (let (($x109 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x95 (= $x11 $x109)))
 (let (($x110 (and $x95 $x26)))
 (let (($x111 (and $x110 $x108)))
 (let (($x146 (and $x111 $x136)))
 (let (($x284 (and $x146 $x327)))
 (let (($x102 (=> $x14 true)))
 (let (($x99 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x101 (= $x14 $x99)))
 (let (($x89 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x90 (= $x31 $x89)))
 (let (($x91 (and $x90 $x33)))
 (let (($x96 (and $x91 $x101)))
 (let (($x103 (and $x96 $x102)))
 (let (($x87 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x104 (and $x87 $x103)))
 (let (($x100 (=> $x37 $x104)))
 (let (($x83 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x84 (= $x37 $x83)))
 (let (($x80 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x81 (= $x11 $x80)))
 (let (($x82 (and $x81 $x26)))
 (let (($x85 (and $x82 $x84)))
 (let (($x105 (and $x85 $x100)))
 (let (($x78 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x106 (and $x78 $x105)))
 (let (($x290 (and $x106 $x284)))
 (let (($x70 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x71 (and $x70 true)))
 (let (($x72 (=> $x14 $x71)))
 (let (($x59 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x62 (= $x14 $x59)))
 (let (($x64 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x56 (= $x31 $x64)))
 (let (($x51 (and $x56 $x33)))
 (let (($x16 (and $x51 $x62)))
 (let (($x73 (and $x16 $x72)))
 (let (($x42 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x74 (and $x42 $x73)))
 (let (($x75 (=> $x37 $x74)))
 (let (($x30 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x6 (= $x37 $x30)))
 (let (($x47 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x63 (= $x11 $x47)))
 (let (($x41 (and $x63 $x26)))
 (let (($x25 (and $x41 $x6)))
 (let (($x76 (and $x25 $x75)))
 (let (($x286 (and $x76 $x290)))
 (let (($x68 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x292 (and $x68 $x286)))
 (let (($x12 (bvugt ?x45 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x43 (=> (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x12)))))))
 (let (($x19 (=> (and $x5 (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x38 $x12)))))))
 (let (($x205 (and $x19 $x292)))
 (let (($x137 (=> $x205 $x213)))
 (not $x137)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var1680X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var1680X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1680X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1680X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1677X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1677X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1677X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var1674X () (_ BitVec 32))
(declare-fun ind-%var1674X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1674X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1674X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1671X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1671X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1671X.0 () (_ BitVec 32))
(declare-fun ind-%var1668X () (_ BitVec 32))
(declare-fun ind-%var1665X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1665X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1665X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x455 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1680X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1680X (_ bv4 32))))))
 (let ((?x420 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1680X (_ bv4 32)) (_ bv2 32))) ?x455)))
 (let ((?x419 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1680X (_ bv4 32)) (_ bv3 32))) ?x420)))
 (let (($x414 (= ind-%var1680X.2.1 ?x419)))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd ind-%var1680X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1680X))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ind-%var1680X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1680X (_ bv2 32))) ?x405))))
 (let (($x416 (= ind-%var1680X.2.0 ?x409)))
 (let (($x67 (= false false)))
 (let (($x429 (= (_ bv0 32) ind-%var1680X)))
 (let ((?x425 (ite $x429 (_ bv0 32) (_ bv1 32))))
 (let (($x452 (= ind-%var1680X.0 ?x425)))
 (let (($x397 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x431 (and (and (and (and $x397 $x452) $x67) $x416) $x414)))
 (let (($x383 (= ind-%var1677X.2.1 ind-%var1677X.2.1)))
 (let (($x392 (= ind-%var1677X.2.0 ind-%var1677X.2.0)))
 (let (($x382 (= ind-%var1677X.0 ind-%var1677X.0)))
 (let (($x357 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0)))
 (let (($x402 (and (and (and (and $x357 $x382) $x67) $x392) $x383)))
 (let (($x14 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x37 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x334 (and $x37 $x14)))
 (let (($x218 (and (and $x334 $x402) $x431)))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1674X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1674X (_ bv4 32))))))
 (let ((?x373 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1674X (_ bv4 32)) (_ bv2 32))) ?x368)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1674X (_ bv4 32)) (_ bv3 32))) ?x373)))
 (let (($x428 (= ind-%var1674X.2.1 ?x379)))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ind-%var1674X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1674X))))
 (let ((?x398 (concat (select input.dst.llvm-mem (bvadd ind-%var1674X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1674X (_ bv2 32))) ?x359))))
 (let (($x435 (= ind-%var1674X.2.0 ?x398)))
 (let (($x381 (= (_ bv0 32) ind-%var1674X)))
 (let ((?x426 (ite $x381 (_ bv0 32) (_ bv1 32))))
 (let (($x361 (= ind-%var1674X.0 ?x426)))
 (let (($x380 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x390 (and (and (and (and $x380 $x361) $x67) $x435) $x428)))
 (let (($x374 (= ind-%var1671X.2.1 ind-%var1671X.2.1)))
 (let (($x378 (= ind-%var1671X.2.0 ind-%var1671X.2.0)))
 (let (($x346 (and (and (and $x357 (= ind-%var1671X.0 ind-%var1671X.0)) $x67) $x378)))
 (let (($x344 (and $x346 $x374)))
 (let (($x401 (and (and $x334 $x344) $x390)))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1668X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1668X (_ bv4 32))))))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1668X (_ bv4 32)) (_ bv2 32))) ?x315)))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1668X (_ bv4 32)) (_ bv3 32))) ?x318)))
 (let (($x329 (= ?x328 ?x328)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ind-%var1668X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1668X))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ind-%var1668X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1668X (_ bv2 32))) ?x302))))
 (let (($x341 (= ?x332 ?x332)))
 (let (($x355 (= (_ bv0 32) ind-%var1668X)))
 (let ((?x337 (ite $x355 (_ bv0 32) (_ bv1 32))))
 (let (($x301 (= ?x337 ?x337)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x153 (concat ?x157 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x176 (concat ?x172 (concat ?x156 ?x153))))
 (let ((?x295 (bvadd ?x176 (_ bv4 32))))
 (let ((?x324 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv1 32))) (select input.dst.llvm-mem ?x295))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv2 32))) ?x324))))
 (let (($x331 (= ?x330 input.dst.llvm-%l)))
 (let (($x342 (and (and (and (and $x331 $x301) $x67) $x341) $x329)))
 (let (($x298 (= ind-%var1665X.2.1 ind-%var1665X.2.1)))
 (let (($x13 (= ind-%var1665X.2.0 ind-%var1665X.2.0)))
 (let (($x293 (= ind-%var1665X.0 ind-%var1665X.0)))
 (let (($x285 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0)))
 (let (($x323 (and (and (and (and $x285 $x293) $x67) $x13) $x298)))
 (let (($x164 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x219 (and $x164 $x37)))
 (let (($x333 (and (and $x219 $x323) $x342)))
 (let (($x24 (or (or $x333 $x401) $x218)))
 (let (($x35 (= $x24 true)))
 (let (($x213 (= $x35 true)))
 (let ((?x228 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x253 (concat ?x238 (concat ?x249 (concat ?x227 ?x228)))))
 (let (($x277 (= ?x253 input.dst.llvm-%l)))
 (let (($x282 (= $x277 true)))
 (let (($x278 (= $x282 true)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x247 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x45 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x17 (bvadd ?x45 (_ bv3 32))))
 (let ((?x263 (concat (select input.dst.llvm-mem ?x17) (concat ?x255 ?x247))))
 (let (($x267 (= (bvand ?x263 (_ bv4294967288 32)) ?x263)))
 (let (($x243 (= (bvand ?x45 (_ bv4294967292 32)) ?x45)))
 (let (($x268 (and $x243 $x267)))
 (let (($x252 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x242 (and true $x252)))
 (let (($x258 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x45 (bvsub ?x45 (_ bv4 32))) (bvult ?x45 (bvsub ?x45 (_ bv4 32))))))
 (let (($x271 (and (and (and $x258 $x242) $x243) $x268)))
 (let (($x272 (= true $x271)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x273 (=> $x5 $x272)))
 (let (($x241 (= input.dst.llvm-%l ?x253)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x97)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x233 $x229)))
 (let (($x234 (and $x92 $x94)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x199 $x234)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x222 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x196 $x210)))))))
 (let (($x214 (and $x222 $x235)))
 (let (($x250 (and $x214 $x241)))
 (let (($x122 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x244 (and $x122 $x250)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x171))))
 (let (($x206 (= input.spec-%var-l-0.2.1.2.0 ?x203)))
 (let (($x201 (and $x206 true)))
 (let (($x207 (=> $x37 $x201)))
 (let (($x174 (= (_ bv0 32) ?x176)))
 (let ((?x181 (ite $x174 (_ bv0 32) (_ bv1 32))))
 (let (($x189 (bvuge ?x181 (_ bv1 32))))
 (let (($x190 (= $x37 $x189)))
 (let (($x11 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x26 (=> $x11 $x67)))
 (let (($x184 (= ?x181 (_ bv0 32))))
 (let (($x187 (= $x11 $x184)))
 (let (($x188 (and $x187 $x26)))
 (let (($x191 (and $x188 $x190)))
 (let (($x204 (and $x191 $x207)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x144)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x165 (= input.spec-%var-l-0.2.0 ?x167)))
 (let (($x208 (and $x165 $x204)))
 (let (($x217 (=> $x164 $x208)))
 (let ((?x160 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x180 (bvuge ?x160 (_ bv1 32))))
 (let (($x170 (= $x164 $x180)))
 (let (($x130 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x162 (=> $x130 $x67)))
 (let (($x132 (= ?x160 (_ bv0 32))))
 (let (($x161 (= $x130 $x132)))
 (let (($x152 (and $x161 $x162)))
 (let (($x169 (and $x152 $x170)))
 (let (($x220 (and $x169 $x217)))
 (let (($x257 (and $x220 $x244)))
 (let (($x274 (and $x257 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x280 (= $x275 true)))
 (let (($x281 (= $x280 true)))
 (let (($x125 (= $x7 true)))
 (let (($x135 (= $x125 true)))
 (let (($x131 (= $x135 true)))
 (let (($x126 (= $x122 true)))
 (let (($x140 (= $x126 true)))
 (let (($x138 (= $x140 true)))
 (let (($x159 (and $x138 $x131)))
 (let (($x276 (and $x159 $x281)))
 (let (($x279 (and $x276 $x278)))
 (let (($x283 (and $x130 $x279)))
 (let (($x327 (and $x67 $x283)))
 (let (($x128 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x119 (and $x128 true)))
 (let (($x120 (=> $x14 $x119)))
 (let (($x121 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x123 (= $x14 $x121)))
 (let (($x31 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x33 (=> $x31 $x67)))
 (let (($x115 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x116 (= $x31 $x115)))
 (let (($x117 (and $x116 $x33)))
 (let (($x124 (and $x117 $x123)))
 (let (($x133 (and $x124 $x120)))
 (let (($x113 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x134 (and $x113 $x133)))
 (let (($x136 (=> $x37 $x134)))
 (let (($x98 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x108 (= $x37 $x98)))
 (let (($x109 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x95 (= $x11 $x109)))
 (let (($x110 (and $x95 $x26)))
 (let (($x111 (and $x110 $x108)))
 (let (($x146 (and $x111 $x136)))
 (let (($x284 (and $x146 $x327)))
 (let (($x102 (=> $x14 true)))
 (let (($x99 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x101 (= $x14 $x99)))
 (let (($x89 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x90 (= $x31 $x89)))
 (let (($x91 (and $x90 $x33)))
 (let (($x96 (and $x91 $x101)))
 (let (($x103 (and $x96 $x102)))
 (let (($x87 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x104 (and $x87 $x103)))
 (let (($x100 (=> $x37 $x104)))
 (let (($x83 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x84 (= $x37 $x83)))
 (let (($x80 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x81 (= $x11 $x80)))
 (let (($x82 (and $x81 $x26)))
 (let (($x85 (and $x82 $x84)))
 (let (($x105 (and $x85 $x100)))
 (let (($x78 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x106 (and $x78 $x105)))
 (let (($x290 (and $x106 $x284)))
 (let (($x70 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x71 (and $x70 true)))
 (let (($x72 (=> $x14 $x71)))
 (let (($x59 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x62 (= $x14 $x59)))
 (let (($x64 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x56 (= $x31 $x64)))
 (let (($x51 (and $x56 $x33)))
 (let (($x16 (and $x51 $x62)))
 (let (($x73 (and $x16 $x72)))
 (let (($x42 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x74 (and $x42 $x73)))
 (let (($x75 (=> $x37 $x74)))
 (let (($x30 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x6 (= $x37 $x30)))
 (let (($x47 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x63 (= $x11 $x47)))
 (let (($x41 (and $x63 $x26)))
 (let (($x25 (and $x41 $x6)))
 (let (($x76 (and $x25 $x75)))
 (let (($x286 (and $x76 $x290)))
 (let (($x68 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x292 (and $x68 $x286)))
 (let (($x12 (bvugt ?x45 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x43 (=> (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x12)))))))
 (let (($x19 (=> (and $x5 (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x38 $x12)))))))
 (let (($x205 (and $x19 $x292)))
 (let (($x137 (=> $x205 $x213)))
 (not $x137)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= ind-%var1680X #b10000000000000000000000000000000)
(= ind-%var1680X.2.1 #b10000000000000000000000000000000)
(= ind-%var1680X.2.0 #b10000000000000000000000000000000)
(= ind-%var1680X.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= ind-%var1674X #b10000000000000000000000000000000)
(= ind-%var1674X.2.1 #b10000000000000000000000000000000)
(= ind-%var1674X.2.0 #b10000000000000000000000000000000)
(= ind-%var1674X.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-l-0.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun ind-%var1680X () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1680X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1680X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1680X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1674X () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1674X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1674X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1674X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00010003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1677X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1665X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1665X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1665X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1671X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1671X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1671X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1668X () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1677X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1677X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun ind-%var1680X () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv7 32) (_ bv255 8)) (_ bv6 32) (_ bv255 8)) (_ bv5 32) (_ bv255 8)))
(define-fun ind-%var1680X.2.1 () (_ BitVec 32) (_ bv4278190080 32))
(define-fun ind-%var1680X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1680X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1677X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1677X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1677X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1674X () (_ BitVec 32) (_ bv1 32))
(define-fun ind-%var1674X.2.1 () (_ BitVec 32) (_ bv4278190080 32))
(define-fun ind-%var1674X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1674X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1671X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1671X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1671X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1668X () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1665X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1665X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1665X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x170 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x289 (=> $x170 false)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x161 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge ?x161 (_ bv1 32))))
 (let (($x177 (= $x170 $x169)))
 (let (($x41 (= false false)))
 (let (($x126 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x164 (=> $x126 $x41)))
 (let (($x162 (= ?x161 (_ bv0 32))))
 (let (($x152 (= $x126 $x162)))
 (let (($x180 (and $x152 $x164)))
 (let (($x178 (and $x180 $x177)))
 (let (($x293 (and $x178 $x289)))
 (let (($x340 (= $x293 true)))
 (let (($x296 (= $x340 true)))
 (let ((?x212 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x253 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x244 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x257 (concat ?x244 (concat ?x253 (concat ?x228 ?x212)))))
 (let (($x283 (= ?x257 input.dst.llvm-%l)))
 (let (($x327 (= $x283 true)))
 (let (($x284 (= $x327 true)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x251 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x69 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x53 (bvadd ?x69 (_ bv3 32))))
 (let ((?x267 (concat (select input.dst.llvm-mem ?x53) (concat ?x259 ?x251))))
 (let (($x271 (= (bvand ?x267 (_ bv4294967288 32)) ?x267)))
 (let (($x245 (= (bvand ?x69 (_ bv4294967292 32)) ?x69)))
 (let (($x272 (and $x245 $x271)))
 (let (($x256 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x243 (and true $x256)))
 (let (($x262 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x69 (bvsub ?x69 (_ bv4 32))) (bvult ?x69 (bvsub ?x69 (_ bv4 32))))))
 (let (($x275 (and (and (and $x262 $x243) $x245) $x272)))
 (let (($x280 (= true $x275)))
 (let (($x5 (not $x7)))
 (let (($x281 (=> $x5 $x280)))
 (let (($x46 (= input.dst.llvm-%l ?x257)))
 (let ((?x235 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x214 (= (_ bv0 32) ?x235)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (and $x92 $x94)))
 (let (($x237 (and $x234 $x214)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x238 (and $x196 $x237)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x202 $x230)))))))
 (let (($x236 (and $x229 $x238)))
 (let (($x254 (and $x236 $x46)))
 (let (($x125 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x246 (and $x125 $x254)))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x157 (concat ?x158 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x181 (concat ?x174 (concat ?x153 ?x157))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x175))))
 (let (($x207 (= input.spec-%var-l-0.2.1.2.0 ?x201)))
 (let (($x204 (and $x207 true)))
 (let (($x6 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x208 (=> $x6 $x204)))
 (let (($x184 (= (_ bv0 32) ?x181)))
 (let ((?x187 (ite $x184 (_ bv0 32) (_ bv1 32))))
 (let (($x191 (bvuge ?x187 (_ bv1 32))))
 (let (($x198 (= $x6 $x191)))
 (let (($x47 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x37 (=> $x47 $x41)))
 (let (($x188 (= ?x187 (_ bv0 32))))
 (let (($x189 (= $x47 $x188)))
 (let (($x190 (and $x189 $x37)))
 (let (($x193 (and $x190 $x198)))
 (let (($x217 (and $x193 $x208)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x150)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x179 (= input.spec-%var-l-0.2.0 ?x168)))
 (let (($x220 (and $x179 $x217)))
 (let (($x221 (=> $x170 $x220)))
 (let (($x216 (and $x178 $x221)))
 (let (($x261 (and $x216 $x246)))
 (let (($x276 (and $x261 $x281)))
 (let (($x277 (= $x276 true)))
 (let (($x282 (= $x277 true)))
 (let (($x278 (= $x282 true)))
 (let (($x129 (= $x7 true)))
 (let (($x130 (= $x129 true)))
 (let (($x160 (= $x130 true)))
 (let (($x135 (= $x125 true)))
 (let (($x131 (= $x135 true)))
 (let (($x159 (= $x131 true)))
 (let (($x132 (and $x159 $x160)))
 (let (($x279 (and $x132 $x278)))
 (let (($x290 (and $x279 $x284)))
 (let (($x286 (and $x126 $x290)))
 (let (($x292 (and $x41 $x286)))
 (let (($x120 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x133 (and $x120 true)))
 (let (($x62 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x134 (=> $x62 $x133)))
 (let (($x124 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x127 (= $x62 $x124)))
 (let (($x64 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x14 (=> $x64 $x41)))
 (let (($x117 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x121 (= $x64 $x117)))
 (let (($x123 (and $x121 $x14)))
 (let (($x128 (and $x123 $x127)))
 (let (($x136 (and $x128 $x134)))
 (let (($x115 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x146 (and $x115 $x136)))
 (let (($x148 (=> $x6 $x146)))
 (let (($x111 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x112 (= $x6 $x111)))
 (let (($x110 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x98 (= $x47 $x110)))
 (let (($x108 (and $x98 $x37)))
 (let (($x113 (and $x108 $x112)))
 (let (($x149 (and $x113 $x148)))
 (let (($x205 (and $x149 $x292)))
 (let (($x104 (=> $x62 true)))
 (let (($x96 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x102 (= $x62 $x96)))
 (let (($x91 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x99 (= $x64 $x91)))
 (let (($x101 (and $x99 $x14)))
 (let (($x103 (and $x101 $x102)))
 (let (($x100 (and $x103 $x104)))
 (let (($x89 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x105 (and $x89 $x100)))
 (let (($x106 (=> $x6 $x105)))
 (let (($x85 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x86 (= $x6 $x85)))
 (let (($x82 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x83 (= $x47 $x82)))
 (let (($x84 (and $x83 $x37)))
 (let (($x87 (and $x84 $x86)))
 (let (($x107 (and $x87 $x106)))
 (let (($x80 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x109 (and $x80 $x107)))
 (let (($x219 (and $x109 $x205)))
 (let (($x72 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x73 (and $x72 true)))
 (let (($x74 (=> $x62 $x73)))
 (let (($x16 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x18 (= $x62 $x16)))
 (let (($x33 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x51 (= $x64 $x33)))
 (let (($x59 (and $x51 $x14)))
 (let (($x22 (and $x59 $x18)))
 (let (($x75 (and $x22 $x74)))
 (let (($x31 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x76 (and $x31 $x75)))
 (let (($x77 (=> $x6 $x76)))
 (let (($x25 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x20 (= $x6 $x25)))
 (let (($x67 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x26 (= $x47 $x67)))
 (let (($x30 (and $x26 $x37)))
 (let (($x61 (and $x30 $x20)))
 (let (($x78 (and $x61 $x77)))
 (let (($x9 (and $x78 $x219)))
 (let (($x11 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x351 (and $x11 $x9)))
 (let (($x34 (bvugt ?x69 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x68 (=> (bvule ?x69 (bvsub (bvadd ?x69 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x34)))))))
 (let (($x8 (=> (and $x5 (bvule ?x69 (bvsub (bvadd ?x69 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x60 $x34)))))))
 (let (($x285 (and $x8 $x351)))
 (let (($x297 (=> $x285 $x296)))
 (not $x297))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x170 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x289 (=> $x170 false)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x161 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge ?x161 (_ bv1 32))))
 (let (($x177 (= $x170 $x169)))
 (let (($x41 (= false false)))
 (let (($x126 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x164 (=> $x126 $x41)))
 (let (($x162 (= ?x161 (_ bv0 32))))
 (let (($x152 (= $x126 $x162)))
 (let (($x180 (and $x152 $x164)))
 (let (($x178 (and $x180 $x177)))
 (let (($x293 (and $x178 $x289)))
 (let (($x340 (= $x293 true)))
 (let (($x296 (= $x340 true)))
 (let ((?x212 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x253 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x244 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x257 (concat ?x244 (concat ?x253 (concat ?x228 ?x212)))))
 (let (($x283 (= ?x257 input.dst.llvm-%l)))
 (let (($x327 (= $x283 true)))
 (let (($x284 (= $x327 true)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x251 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x69 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x53 (bvadd ?x69 (_ bv3 32))))
 (let ((?x267 (concat (select input.dst.llvm-mem ?x53) (concat ?x259 ?x251))))
 (let (($x271 (= (bvand ?x267 (_ bv4294967288 32)) ?x267)))
 (let (($x245 (= (bvand ?x69 (_ bv4294967292 32)) ?x69)))
 (let (($x272 (and $x245 $x271)))
 (let (($x256 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x243 (and true $x256)))
 (let (($x262 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x69 (bvsub ?x69 (_ bv4 32))) (bvult ?x69 (bvsub ?x69 (_ bv4 32))))))
 (let (($x275 (and (and (and $x262 $x243) $x245) $x272)))
 (let (($x280 (= true $x275)))
 (let (($x5 (not $x7)))
 (let (($x281 (=> $x5 $x280)))
 (let (($x46 (= input.dst.llvm-%l ?x257)))
 (let ((?x235 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x214 (= (_ bv0 32) ?x235)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (and $x92 $x94)))
 (let (($x237 (and $x234 $x214)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x238 (and $x196 $x237)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x202 $x230)))))))
 (let (($x236 (and $x229 $x238)))
 (let (($x254 (and $x236 $x46)))
 (let (($x125 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x246 (and $x125 $x254)))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x157 (concat ?x158 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x181 (concat ?x174 (concat ?x153 ?x157))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x175))))
 (let (($x207 (= input.spec-%var-l-0.2.1.2.0 ?x201)))
 (let (($x204 (and $x207 true)))
 (let (($x6 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x208 (=> $x6 $x204)))
 (let (($x184 (= (_ bv0 32) ?x181)))
 (let ((?x187 (ite $x184 (_ bv0 32) (_ bv1 32))))
 (let (($x191 (bvuge ?x187 (_ bv1 32))))
 (let (($x198 (= $x6 $x191)))
 (let (($x47 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x37 (=> $x47 $x41)))
 (let (($x188 (= ?x187 (_ bv0 32))))
 (let (($x189 (= $x47 $x188)))
 (let (($x190 (and $x189 $x37)))
 (let (($x193 (and $x190 $x198)))
 (let (($x217 (and $x193 $x208)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x150)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x179 (= input.spec-%var-l-0.2.0 ?x168)))
 (let (($x220 (and $x179 $x217)))
 (let (($x221 (=> $x170 $x220)))
 (let (($x216 (and $x178 $x221)))
 (let (($x261 (and $x216 $x246)))
 (let (($x276 (and $x261 $x281)))
 (let (($x277 (= $x276 true)))
 (let (($x282 (= $x277 true)))
 (let (($x278 (= $x282 true)))
 (let (($x129 (= $x7 true)))
 (let (($x130 (= $x129 true)))
 (let (($x160 (= $x130 true)))
 (let (($x135 (= $x125 true)))
 (let (($x131 (= $x135 true)))
 (let (($x159 (= $x131 true)))
 (let (($x132 (and $x159 $x160)))
 (let (($x279 (and $x132 $x278)))
 (let (($x290 (and $x279 $x284)))
 (let (($x286 (and $x126 $x290)))
 (let (($x292 (and $x41 $x286)))
 (let (($x120 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x133 (and $x120 true)))
 (let (($x62 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x134 (=> $x62 $x133)))
 (let (($x124 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x127 (= $x62 $x124)))
 (let (($x64 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x14 (=> $x64 $x41)))
 (let (($x117 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x121 (= $x64 $x117)))
 (let (($x123 (and $x121 $x14)))
 (let (($x128 (and $x123 $x127)))
 (let (($x136 (and $x128 $x134)))
 (let (($x115 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x146 (and $x115 $x136)))
 (let (($x148 (=> $x6 $x146)))
 (let (($x111 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x112 (= $x6 $x111)))
 (let (($x110 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x98 (= $x47 $x110)))
 (let (($x108 (and $x98 $x37)))
 (let (($x113 (and $x108 $x112)))
 (let (($x149 (and $x113 $x148)))
 (let (($x205 (and $x149 $x292)))
 (let (($x104 (=> $x62 true)))
 (let (($x96 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x102 (= $x62 $x96)))
 (let (($x91 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x99 (= $x64 $x91)))
 (let (($x101 (and $x99 $x14)))
 (let (($x103 (and $x101 $x102)))
 (let (($x100 (and $x103 $x104)))
 (let (($x89 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x105 (and $x89 $x100)))
 (let (($x106 (=> $x6 $x105)))
 (let (($x85 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x86 (= $x6 $x85)))
 (let (($x82 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x83 (= $x47 $x82)))
 (let (($x84 (and $x83 $x37)))
 (let (($x87 (and $x84 $x86)))
 (let (($x107 (and $x87 $x106)))
 (let (($x80 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x109 (and $x80 $x107)))
 (let (($x219 (and $x109 $x205)))
 (let (($x72 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x73 (and $x72 true)))
 (let (($x74 (=> $x62 $x73)))
 (let (($x16 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x18 (= $x62 $x16)))
 (let (($x33 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x51 (= $x64 $x33)))
 (let (($x59 (and $x51 $x14)))
 (let (($x22 (and $x59 $x18)))
 (let (($x75 (and $x22 $x74)))
 (let (($x31 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x76 (and $x31 $x75)))
 (let (($x77 (=> $x6 $x76)))
 (let (($x25 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x20 (= $x6 $x25)))
 (let (($x67 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x26 (= $x47 $x67)))
 (let (($x30 (and $x26 $x37)))
 (let (($x61 (and $x30 $x20)))
 (let (($x78 (and $x61 $x77)))
 (let (($x9 (and $x78 $x219)))
 (let (($x11 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x351 (and $x11 $x9)))
 (let (($x34 (bvugt ?x69 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x68 (=> (bvule ?x69 (bvsub (bvadd ?x69 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x34)))))))
 (let (($x8 (=> (and $x5 (bvule ?x69 (bvsub (bvadd ?x69 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x60 $x34)))))))
 (let (($x285 (and $x8 $x351)))
 (let (($x297 (=> $x285 $x296)))
 (not $x297))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x269 (or $x7 $x5)))
 (let (($x266 (= $x269 true)))
 (let (($x256 (= $x266 true)))
 (let ((?x244 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x253 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x257 (concat ?x212 (concat ?x253 ?x244)))))
 (let (($x254 (= ?x46 input.dst.llvm-%l)))
 (let (($x246 (= $x254 true)))
 (let (($x261 (= $x246 true)))
 (let ((?x186 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x171 (concat ?x186 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x201 (concat ?x183 (concat ?x182 ?x171))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x202))))
 (let (($x195 (= input.spec-%var-l-0.2.1.2.0 ?x229)))
 (let (($x196 (and $x195 true)))
 (let (($x20 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x92 (=> $x20 $x196)))
 (let (($x207 (= (_ bv0 32) ?x201)))
 (let ((?x204 (ite $x207 (_ bv0 32) (_ bv1 32))))
 (let (($x221 (bvuge ?x204 (_ bv1 32))))
 (let (($x216 (= $x20 $x221)))
 (let (($x30 (= false false)))
 (let (($x67 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x6 (=> $x67 $x30)))
 (let (($x208 (= ?x204 (_ bv0 32))))
 (let (($x217 (= $x67 $x208)))
 (let (($x220 (and $x217 $x6)))
 (let (($x210 (and $x220 $x216)))
 (let (($x97 (and $x210 $x92)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x163)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x188)))
 (let (($x198 (= input.spec-%var-l-0.2.0 ?x191)))
 (let (($x94 (and $x198 $x97)))
 (let (($x176 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x234 (=> $x176 $x94)))
 (let ((?x150 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x150 (_ bv1 32))))
 (let (($x154 (= $x176 $x174)))
 (let (($x145 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x179 (=> $x145 $x30)))
 (let (($x151 (= ?x150 (_ bv0 32))))
 (let (($x168 (= $x145 $x151)))
 (let (($x172 (and $x168 $x179)))
 (let (($x153 (and $x172 $x154)))
 (let (($x235 (and $x153 $x234)))
 (let (($x214 (= $x235 true)))
 (let (($x237 (= $x214 true)))
 (let (($x238 (= $x237 true)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x178)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x180 $x169)))
 (let (($x167 (and $x177 $x166)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x131 $x167)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x164 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x160 $x132)))))))
 (let (($x141 (and $x164 $x165)))
 (let (($x143 (= $x141 true)))
 (let (($x144 (= $x143 true)))
 (let (($x142 (= $x144 true)))
 (let (($x236 (and $x142 $x238)))
 (let (($x240 (and $x236 $x261)))
 (let (($x258 (and $x30 $x240)))
 (let (($x134 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x136 (and $x134 true)))
 (let (($x18 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x146 (=> $x18 $x136)))
 (let (($x128 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x119 (= $x18 $x128)))
 (let (($x33 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x62 (=> $x33 $x30)))
 (let (($x123 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x124 (= $x33 $x123)))
 (let (($x127 (and $x124 $x62)))
 (let (($x120 (and $x127 $x119)))
 (let (($x148 (and $x120 $x146)))
 (let (($x117 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x149 (and $x117 $x148)))
 (let (($x140 (=> $x20 $x149)))
 (let (($x113 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x114 (= $x20 $x113)))
 (let (($x108 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x111 (= $x67 $x108)))
 (let (($x112 (and $x111 $x6)))
 (let (($x115 (and $x112 $x114)))
 (let (($x138 (and $x115 $x140)))
 (let (($x248 (and $x138 $x258)))
 (let (($x105 (=> $x18 true)))
 (let (($x103 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x104 (= $x18 $x103)))
 (let (($x101 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x96 (= $x33 $x101)))
 (let (($x102 (and $x96 $x62)))
 (let (($x100 (and $x102 $x104)))
 (let (($x106 (and $x100 $x105)))
 (let (($x91 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x107 (and $x91 $x106)))
 (let (($x109 (=> $x20 $x107)))
 (let (($x87 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x88 (= $x20 $x87)))
 (let (($x84 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x85 (= $x67 $x84)))
 (let (($x86 (and $x85 $x6)))
 (let (($x89 (and $x86 $x88)))
 (let (($x95 (and $x89 $x109)))
 (let (($x82 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x110 (and $x82 $x95)))
 (let (($x265 (and $x110 $x248)))
 (let (($x74 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x75 (and $x74 true)))
 (let (($x76 (=> $x18 $x75)))
 (let (($x22 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x70 (= $x18 $x22)))
 (let (($x14 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x59 (= $x33 $x14)))
 (let (($x16 (and $x59 $x62)))
 (let (($x71 (and $x16 $x70)))
 (let (($x77 (and $x71 $x76)))
 (let (($x64 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x78 (and $x64 $x77)))
 (let (($x79 (=> $x20 $x78)))
 (let (($x61 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x42 (= $x20 $x61)))
 (let (($x41 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x37 (= $x67 $x41)))
 (let (($x25 (and $x37 $x6)))
 (let (($x57 (and $x25 $x42)))
 (let (($x80 (and $x57 $x79)))
 (let (($x262 (and $x80 $x265)))
 (let (($x47 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x242 (and $x47 $x262)))
 (let ((?x66 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x19 (bvugt ?x66 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x66 (_ bv3 32)))))
 (let (($x11 (=> (bvule ?x66 (bvsub (bvadd ?x66 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x19)))))))
 (let (($x17 (=> (and $x5 (bvule ?x66 (bvsub (bvadd ?x66 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x43 $x19)))))))
 (let (($x252 (and $x17 $x242)))
 (let (($x243 (=> $x252 $x256)))
 (not $x243))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x269 (or $x7 $x5)))
 (let (($x266 (= $x269 true)))
 (let (($x256 (= $x266 true)))
 (let ((?x244 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x253 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x257 (concat ?x212 (concat ?x253 ?x244)))))
 (let (($x254 (= ?x46 input.dst.llvm-%l)))
 (let (($x246 (= $x254 true)))
 (let (($x261 (= $x246 true)))
 (let ((?x186 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x171 (concat ?x186 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x201 (concat ?x183 (concat ?x182 ?x171))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x202))))
 (let (($x195 (= input.spec-%var-l-0.2.1.2.0 ?x229)))
 (let (($x196 (and $x195 true)))
 (let (($x20 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x92 (=> $x20 $x196)))
 (let (($x207 (= (_ bv0 32) ?x201)))
 (let ((?x204 (ite $x207 (_ bv0 32) (_ bv1 32))))
 (let (($x221 (bvuge ?x204 (_ bv1 32))))
 (let (($x216 (= $x20 $x221)))
 (let (($x30 (= false false)))
 (let (($x67 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x6 (=> $x67 $x30)))
 (let (($x208 (= ?x204 (_ bv0 32))))
 (let (($x217 (= $x67 $x208)))
 (let (($x220 (and $x217 $x6)))
 (let (($x210 (and $x220 $x216)))
 (let (($x97 (and $x210 $x92)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x163)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x188)))
 (let (($x198 (= input.spec-%var-l-0.2.0 ?x191)))
 (let (($x94 (and $x198 $x97)))
 (let (($x176 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x234 (=> $x176 $x94)))
 (let ((?x150 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x150 (_ bv1 32))))
 (let (($x154 (= $x176 $x174)))
 (let (($x145 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x179 (=> $x145 $x30)))
 (let (($x151 (= ?x150 (_ bv0 32))))
 (let (($x168 (= $x145 $x151)))
 (let (($x172 (and $x168 $x179)))
 (let (($x153 (and $x172 $x154)))
 (let (($x235 (and $x153 $x234)))
 (let (($x214 (= $x235 true)))
 (let (($x237 (= $x214 true)))
 (let (($x238 (= $x237 true)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x178)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x180 $x169)))
 (let (($x167 (and $x177 $x166)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x131 $x167)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x164 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x160 $x132)))))))
 (let (($x141 (and $x164 $x165)))
 (let (($x143 (= $x141 true)))
 (let (($x144 (= $x143 true)))
 (let (($x142 (= $x144 true)))
 (let (($x236 (and $x142 $x238)))
 (let (($x240 (and $x236 $x261)))
 (let (($x258 (and $x30 $x240)))
 (let (($x134 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x136 (and $x134 true)))
 (let (($x18 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x146 (=> $x18 $x136)))
 (let (($x128 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x119 (= $x18 $x128)))
 (let (($x33 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x62 (=> $x33 $x30)))
 (let (($x123 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x124 (= $x33 $x123)))
 (let (($x127 (and $x124 $x62)))
 (let (($x120 (and $x127 $x119)))
 (let (($x148 (and $x120 $x146)))
 (let (($x117 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x149 (and $x117 $x148)))
 (let (($x140 (=> $x20 $x149)))
 (let (($x113 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x114 (= $x20 $x113)))
 (let (($x108 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x111 (= $x67 $x108)))
 (let (($x112 (and $x111 $x6)))
 (let (($x115 (and $x112 $x114)))
 (let (($x138 (and $x115 $x140)))
 (let (($x248 (and $x138 $x258)))
 (let (($x105 (=> $x18 true)))
 (let (($x103 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x104 (= $x18 $x103)))
 (let (($x101 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x96 (= $x33 $x101)))
 (let (($x102 (and $x96 $x62)))
 (let (($x100 (and $x102 $x104)))
 (let (($x106 (and $x100 $x105)))
 (let (($x91 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x107 (and $x91 $x106)))
 (let (($x109 (=> $x20 $x107)))
 (let (($x87 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x88 (= $x20 $x87)))
 (let (($x84 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x85 (= $x67 $x84)))
 (let (($x86 (and $x85 $x6)))
 (let (($x89 (and $x86 $x88)))
 (let (($x95 (and $x89 $x109)))
 (let (($x82 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x110 (and $x82 $x95)))
 (let (($x265 (and $x110 $x248)))
 (let (($x74 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x75 (and $x74 true)))
 (let (($x76 (=> $x18 $x75)))
 (let (($x22 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x70 (= $x18 $x22)))
 (let (($x14 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x59 (= $x33 $x14)))
 (let (($x16 (and $x59 $x62)))
 (let (($x71 (and $x16 $x70)))
 (let (($x77 (and $x71 $x76)))
 (let (($x64 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x78 (and $x64 $x77)))
 (let (($x79 (=> $x20 $x78)))
 (let (($x61 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x42 (= $x20 $x61)))
 (let (($x41 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x37 (= $x67 $x41)))
 (let (($x25 (and $x37 $x6)))
 (let (($x57 (and $x25 $x42)))
 (let (($x80 (and $x57 $x79)))
 (let (($x262 (and $x80 $x265)))
 (let (($x47 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x242 (and $x47 $x262)))
 (let ((?x66 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x19 (bvugt ?x66 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x66 (_ bv3 32)))))
 (let (($x11 (=> (bvule ?x66 (bvsub (bvadd ?x66 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x19)))))))
 (let (($x17 (=> (and $x5 (bvule ?x66 (bvsub (bvadd ?x66 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x43 $x19)))))))
 (let (($x252 (and $x17 $x242)))
 (let (($x243 (=> $x252 $x256)))
 (not $x243))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var1961X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var1961X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1961X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1961X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1958X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1958X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1958X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var1955X () (_ BitVec 32))
(declare-fun ind-%var1955X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1955X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1955X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1952X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1952X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1952X.0 () (_ BitVec 32))
(declare-fun ind-%var1949X () (_ BitVec 32))
(declare-fun ind-%var1946X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1946X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1946X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1961X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1961X (_ bv4 32))))))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1961X (_ bv4 32)) (_ bv2 32))) ?x413)))
 (let ((?x420 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1961X (_ bv4 32)) (_ bv3 32))) ?x415)))
 (let (($x419 (= ind-%var1961X.2.1 ?x420)))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ind-%var1961X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1961X))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ind-%var1961X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1961X (_ bv2 32))) ?x399))))
 (let (($x416 (= ind-%var1961X.2.0 ?x409)))
 (let (($x25 (= false false)))
 (let (($x452 (= (_ bv0 32) ind-%var1961X)))
 (let ((?x421 (ite $x452 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (= ind-%var1961X.0 ?x421)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x255 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x38 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x58 (bvadd ?x38 (_ bv3 32))))
 (let ((?x271 (concat (select input.dst.llvm-mem ?x58) (concat ?x263 ?x255))))
 (let (($x427 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 ?x271)))
 (let (($x24 (and (and (and (and $x427 $x192) $x25) $x416) $x419)))
 (let (($x383 (= ind-%var1958X.2.1 ind-%var1958X.2.1)))
 (let (($x406 (= ind-%var1958X.2.0 ind-%var1958X.2.0)))
 (let (($x391 (= ind-%var1958X.0 ind-%var1958X.0)))
 (let (($x345 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x397 (and (and (and (and $x345 $x391) $x25) $x406) $x383)))
 (let (($x70 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x42 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x336 (and $x42 $x70)))
 (let (($x213 (and (and $x336 $x397) $x24)))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1955X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1955X (_ bv4 32))))))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1955X (_ bv4 32)) (_ bv2 32))) ?x407)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1955X (_ bv4 32)) (_ bv3 32))) ?x366)))
 (let (($x428 (= ind-%var1955X.2.1 ?x379)))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd ind-%var1955X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1955X))))
 (let ((?x435 (concat (select input.dst.llvm-mem (bvadd ind-%var1955X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1955X (_ bv2 32))) ?x350))))
 (let (($x433 (= ind-%var1955X.2.0 ?x435)))
 (let (($x388 (= (_ bv0 32) ind-%var1955X)))
 (let ((?x385 (ite $x388 (_ bv0 32) (_ bv1 32))))
 (let (($x376 (= ind-%var1955X.0 ?x385)))
 (let (($x381 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 ?x271)))
 (let (($x430 (and (and (and (and $x381 $x376) $x25) $x433) $x428)))
 (let (($x344 (= ind-%var1952X.2.1 ind-%var1952X.2.1)))
 (let (($x349 (= ind-%var1952X.2.0 ind-%var1952X.2.0)))
 (let (($x380 (and (and (and $x345 (= ind-%var1952X.0 ind-%var1952X.0)) $x25) $x349)))
 (let (($x400 (and $x380 $x344)))
 (let (($x393 (and (and $x336 $x400) $x430)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1949X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1949X (_ bv4 32))))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1949X (_ bv4 32)) (_ bv2 32))) ?x313)))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1949X (_ bv4 32)) (_ bv3 32))) ?x317)))
 (let (($x329 (= ?x328 ?x328)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ind-%var1949X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1949X))))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ind-%var1949X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1949X (_ bv2 32))) ?x306))))
 (let (($x339 (= ?x341 ?x341)))
 (let (($x335 (= (_ bv0 32) ind-%var1949X)))
 (let ((?x338 (ite $x335 (_ bv0 32) (_ bv1 32))))
 (let (($x309 (= ?x338 ?x338)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x184 (concat ?x181 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x188 (concat ?x163 (concat ?x155 ?x184))))
 (let ((?x288 (bvadd ?x188 (_ bv4 32))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x307))))
 (let (($x337 (= ?x355 ?x271)))
 (let (($x389 (and (and (and (and $x337 $x309) $x25) $x339) $x329)))
 (let (($x323 (= ind-%var1946X.2.1 ind-%var1946X.2.1)))
 (let (($x287 (= ind-%var1946X.2.0 ind-%var1946X.2.0)))
 (let (($x48 (= ind-%var1946X.0 ind-%var1946X.0)))
 (let (($x231 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x305 (and (and (and (and $x231 $x48) $x25) $x287) $x323)))
 (let (($x130 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x297 (and $x130 $x42)))
 (let (($x343 (and (and $x297 $x305) $x389)))
 (let (($x65 (or (or $x343 $x393) $x213)))
 (let (($x10 (= $x65 true)))
 (let (($x223 (= $x10 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x265 (concat ?x248 (concat ?x261 (concat ?x46 ?x227)))))
 (let (($x286 (= ?x265 input.dst.llvm-%l)))
 (let (($x292 (= $x286 true)))
 (let (($x205 (= $x292 true)))
 (let (($x275 (= (bvand ?x271 (_ bv4294967288 32)) ?x271)))
 (let (($x247 (= (bvand ?x38 (_ bv4294967292 32)) ?x38)))
 (let (($x280 (and $x247 $x275)))
 (let (($x260 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x245 (and true $x260)))
 (let (($x45 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x38 (bvsub ?x38 (_ bv4 32))) (bvult ?x38 (bvsub ?x38 (_ bv4 32))))))
 (let (($x277 (and (and (and $x45 $x245) $x247) $x280)))
 (let (($x282 (= true $x277)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x278 (=> $x5 $x282)))
 (let (($x262 (= input.dst.llvm-%l ?x265)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x257)))
 (let ((?x238 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x238)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (and $x237 $x236)))
 (let (($x212 (and $x241 $x228)))
 (let (($x225 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x225 $x212)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x214 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x195 $x196)))))))
 (let (($x253 (and $x214 $x239)))
 (let (($x242 (and $x253 $x262)))
 (let (($x122 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x252 (and $x122 $x242)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x173))))
 (let (($x221 (= input.spec-%var-l-0.2.1.2.0 ?x220)))
 (let (($x216 (and $x221 true)))
 (let (($x210 (=> $x42 $x216)))
 (let (($x191 (= (_ bv0 32) ?x188)))
 (let ((?x198 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x198 (_ bv1 32))))
 (let (($x182 (= $x42 $x185)))
 (let (($x41 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x20 (=> $x41 $x25)))
 (let (($x193 (= ?x198 (_ bv0 32))))
 (let (($x175 (= $x41 $x193)))
 (let (($x183 (and $x175 $x20)))
 (let (($x206 (and $x183 $x182)))
 (let (($x199 (and $x206 $x210)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x150)))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x172)))
 (let (($x153 (= input.spec-%var-l-0.2.0 ?x154)))
 (let (($x233 (and $x153 $x199)))
 (let (($x230 (=> $x130 $x233)))
 (let ((?x169 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x169 (_ bv1 32))))
 (let (($x141 (= $x130 $x165)))
 (let (($x170 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x166 (=> $x170 $x25)))
 (let (($x177 (= ?x169 (_ bv0 32))))
 (let (($x178 (= $x170 $x177)))
 (let (($x167 (and $x178 $x166)))
 (let (($x143 (and $x167 $x141)))
 (let (($x222 (and $x143 $x230)))
 (let (($x269 (and $x222 $x252)))
 (let (($x279 (and $x269 $x278)))
 (let (($x283 (= $x279 true)))
 (let (($x327 (= $x283 true)))
 (let (($x284 (= $x327 true)))
 (let (($x164 (= $x5 true)))
 (let (($x135 (= $x164 true)))
 (let (($x131 (= $x135 true)))
 (let (($x126 (= $x122 true)))
 (let (($x161 (= $x126 true)))
 (let (($x162 (= $x161 true)))
 (let (($x180 (and $x162 $x131)))
 (let (($x290 (and $x180 $x284)))
 (let (($x219 (and $x290 $x205)))
 (let (($x9 (and $x130 $x219)))
 (let (($x351 (and $x25 $x9)))
 (let (($x146 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x148 (and $x146 true)))
 (let (($x149 (=> $x70 $x148)))
 (let (($x120 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x133 (= $x70 $x120)))
 (let (($x14 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x18 (=> $x14 $x25)))
 (let (($x127 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x128 (= $x14 $x127)))
 (let (($x119 (and $x128 $x18)))
 (let (($x134 (and $x119 $x133)))
 (let (($x140 (and $x134 $x149)))
 (let (($x123 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x138 (and $x123 $x140)))
 (let (($x159 (=> $x42 $x138)))
 (let (($x115 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x116 (= $x42 $x115)))
 (let (($x112 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x113 (= $x41 $x112)))
 (let (($x114 (and $x113 $x20)))
 (let (($x117 (and $x114 $x116)))
 (let (($x129 (and $x117 $x159)))
 (let (($x285 (and $x129 $x351)))
 (let (($x107 (=> $x70 true)))
 (let (($x100 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x105 (= $x70 $x100)))
 (let (($x102 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x103 (= $x14 $x102)))
 (let (($x104 (and $x103 $x18)))
 (let (($x106 (and $x104 $x105)))
 (let (($x109 (and $x106 $x107)))
 (let (($x101 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x95 (and $x101 $x109)))
 (let (($x110 (=> $x42 $x95)))
 (let (($x89 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x90 (= $x42 $x89)))
 (let (($x86 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x87 (= $x41 $x86)))
 (let (($x88 (and $x87 $x20)))
 (let (($x91 (and $x88 $x90)))
 (let (($x98 (and $x91 $x110)))
 (let (($x84 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x108 (and $x84 $x98)))
 (let (($x289 (and $x108 $x285)))
 (let (($x76 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x77 (and $x76 true)))
 (let (($x78 (=> $x70 $x77)))
 (let (($x71 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x72 (= $x70 $x71)))
 (let (($x62 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x16 (= $x14 $x62)))
 (let (($x22 (and $x16 $x18)))
 (let (($x73 (and $x22 $x72)))
 (let (($x79 (and $x73 $x78)))
 (let (($x33 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x80 (and $x33 $x79)))
 (let (($x81 (=> $x42 $x80)))
 (let (($x57 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x31 (= $x42 $x57)))
 (let (($x30 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x6 (= $x41 $x30)))
 (let (($x61 (and $x6 $x20)))
 (let (($x39 (and $x61 $x31)))
 (let (($x82 (and $x39 $x81)))
 (let (($x293 (and $x82 $x289)))
 (let (($x67 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x340 (and $x67 $x293)))
 (let (($x8 (bvugt ?x38 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x47 (=> (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x8)))))))
 (let (($x53 (=> (and $x5 (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x68 $x8)))))))
 (let (($x296 (and $x53 $x340)))
 (let (($x147 (=> $x296 $x223)))
 (not $x147)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var1961X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var1961X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1961X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1961X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1958X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1958X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1958X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var1955X () (_ BitVec 32))
(declare-fun ind-%var1955X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1955X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1955X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var1952X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1952X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1952X.0 () (_ BitVec 32))
(declare-fun ind-%var1949X () (_ BitVec 32))
(declare-fun ind-%var1946X.2.1 () (_ BitVec 32))
(declare-fun ind-%var1946X.2.0 () (_ BitVec 32))
(declare-fun ind-%var1946X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1961X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1961X (_ bv4 32))))))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1961X (_ bv4 32)) (_ bv2 32))) ?x413)))
 (let ((?x420 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1961X (_ bv4 32)) (_ bv3 32))) ?x415)))
 (let (($x419 (= ind-%var1961X.2.1 ?x420)))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ind-%var1961X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1961X))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ind-%var1961X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1961X (_ bv2 32))) ?x399))))
 (let (($x416 (= ind-%var1961X.2.0 ?x409)))
 (let (($x25 (= false false)))
 (let (($x452 (= (_ bv0 32) ind-%var1961X)))
 (let ((?x421 (ite $x452 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (= ind-%var1961X.0 ?x421)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x255 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x38 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x58 (bvadd ?x38 (_ bv3 32))))
 (let ((?x271 (concat (select input.dst.llvm-mem ?x58) (concat ?x263 ?x255))))
 (let (($x427 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 ?x271)))
 (let (($x24 (and (and (and (and $x427 $x192) $x25) $x416) $x419)))
 (let (($x383 (= ind-%var1958X.2.1 ind-%var1958X.2.1)))
 (let (($x406 (= ind-%var1958X.2.0 ind-%var1958X.2.0)))
 (let (($x391 (= ind-%var1958X.0 ind-%var1958X.0)))
 (let (($x345 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x397 (and (and (and (and $x345 $x391) $x25) $x406) $x383)))
 (let (($x70 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x42 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x336 (and $x42 $x70)))
 (let (($x213 (and (and $x336 $x397) $x24)))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1955X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1955X (_ bv4 32))))))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1955X (_ bv4 32)) (_ bv2 32))) ?x407)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1955X (_ bv4 32)) (_ bv3 32))) ?x366)))
 (let (($x428 (= ind-%var1955X.2.1 ?x379)))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd ind-%var1955X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1955X))))
 (let ((?x435 (concat (select input.dst.llvm-mem (bvadd ind-%var1955X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1955X (_ bv2 32))) ?x350))))
 (let (($x433 (= ind-%var1955X.2.0 ?x435)))
 (let (($x388 (= (_ bv0 32) ind-%var1955X)))
 (let ((?x385 (ite $x388 (_ bv0 32) (_ bv1 32))))
 (let (($x376 (= ind-%var1955X.0 ?x385)))
 (let (($x381 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 ?x271)))
 (let (($x430 (and (and (and (and $x381 $x376) $x25) $x433) $x428)))
 (let (($x344 (= ind-%var1952X.2.1 ind-%var1952X.2.1)))
 (let (($x349 (= ind-%var1952X.2.0 ind-%var1952X.2.0)))
 (let (($x380 (and (and (and $x345 (= ind-%var1952X.0 ind-%var1952X.0)) $x25) $x349)))
 (let (($x400 (and $x380 $x344)))
 (let (($x393 (and (and $x336 $x400) $x430)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1949X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var1949X (_ bv4 32))))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1949X (_ bv4 32)) (_ bv2 32))) ?x313)))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var1949X (_ bv4 32)) (_ bv3 32))) ?x317)))
 (let (($x329 (= ?x328 ?x328)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ind-%var1949X (_ bv1 32))) (select input.dst.llvm-mem ind-%var1949X))))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ind-%var1949X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var1949X (_ bv2 32))) ?x306))))
 (let (($x339 (= ?x341 ?x341)))
 (let (($x335 (= (_ bv0 32) ind-%var1949X)))
 (let ((?x338 (ite $x335 (_ bv0 32) (_ bv1 32))))
 (let (($x309 (= ?x338 ?x338)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x184 (concat ?x181 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x188 (concat ?x163 (concat ?x155 ?x184))))
 (let ((?x288 (bvadd ?x188 (_ bv4 32))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x307))))
 (let (($x337 (= ?x355 ?x271)))
 (let (($x389 (and (and (and (and $x337 $x309) $x25) $x339) $x329)))
 (let (($x323 (= ind-%var1946X.2.1 ind-%var1946X.2.1)))
 (let (($x287 (= ind-%var1946X.2.0 ind-%var1946X.2.0)))
 (let (($x48 (= ind-%var1946X.0 ind-%var1946X.0)))
 (let (($x231 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x305 (and (and (and (and $x231 $x48) $x25) $x287) $x323)))
 (let (($x130 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x297 (and $x130 $x42)))
 (let (($x343 (and (and $x297 $x305) $x389)))
 (let (($x65 (or (or $x343 $x393) $x213)))
 (let (($x10 (= $x65 true)))
 (let (($x223 (= $x10 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x265 (concat ?x248 (concat ?x261 (concat ?x46 ?x227)))))
 (let (($x286 (= ?x265 input.dst.llvm-%l)))
 (let (($x292 (= $x286 true)))
 (let (($x205 (= $x292 true)))
 (let (($x275 (= (bvand ?x271 (_ bv4294967288 32)) ?x271)))
 (let (($x247 (= (bvand ?x38 (_ bv4294967292 32)) ?x38)))
 (let (($x280 (and $x247 $x275)))
 (let (($x260 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x245 (and true $x260)))
 (let (($x45 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x38 (bvsub ?x38 (_ bv4 32))) (bvult ?x38 (bvsub ?x38 (_ bv4 32))))))
 (let (($x277 (and (and (and $x45 $x245) $x247) $x280)))
 (let (($x282 (= true $x277)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x278 (=> $x5 $x282)))
 (let (($x262 (= input.dst.llvm-%l ?x265)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x257)))
 (let ((?x238 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x238)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (and $x237 $x236)))
 (let (($x212 (and $x241 $x228)))
 (let (($x225 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x225 $x212)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x214 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x195 $x196)))))))
 (let (($x253 (and $x214 $x239)))
 (let (($x242 (and $x253 $x262)))
 (let (($x122 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x252 (and $x122 $x242)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x173))))
 (let (($x221 (= input.spec-%var-l-0.2.1.2.0 ?x220)))
 (let (($x216 (and $x221 true)))
 (let (($x210 (=> $x42 $x216)))
 (let (($x191 (= (_ bv0 32) ?x188)))
 (let ((?x198 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x198 (_ bv1 32))))
 (let (($x182 (= $x42 $x185)))
 (let (($x41 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x20 (=> $x41 $x25)))
 (let (($x193 (= ?x198 (_ bv0 32))))
 (let (($x175 (= $x41 $x193)))
 (let (($x183 (and $x175 $x20)))
 (let (($x206 (and $x183 $x182)))
 (let (($x199 (and $x206 $x210)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x150)))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x172)))
 (let (($x153 (= input.spec-%var-l-0.2.0 ?x154)))
 (let (($x233 (and $x153 $x199)))
 (let (($x230 (=> $x130 $x233)))
 (let ((?x169 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x169 (_ bv1 32))))
 (let (($x141 (= $x130 $x165)))
 (let (($x170 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x166 (=> $x170 $x25)))
 (let (($x177 (= ?x169 (_ bv0 32))))
 (let (($x178 (= $x170 $x177)))
 (let (($x167 (and $x178 $x166)))
 (let (($x143 (and $x167 $x141)))
 (let (($x222 (and $x143 $x230)))
 (let (($x269 (and $x222 $x252)))
 (let (($x279 (and $x269 $x278)))
 (let (($x283 (= $x279 true)))
 (let (($x327 (= $x283 true)))
 (let (($x284 (= $x327 true)))
 (let (($x164 (= $x5 true)))
 (let (($x135 (= $x164 true)))
 (let (($x131 (= $x135 true)))
 (let (($x126 (= $x122 true)))
 (let (($x161 (= $x126 true)))
 (let (($x162 (= $x161 true)))
 (let (($x180 (and $x162 $x131)))
 (let (($x290 (and $x180 $x284)))
 (let (($x219 (and $x290 $x205)))
 (let (($x9 (and $x130 $x219)))
 (let (($x351 (and $x25 $x9)))
 (let (($x146 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x148 (and $x146 true)))
 (let (($x149 (=> $x70 $x148)))
 (let (($x120 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x133 (= $x70 $x120)))
 (let (($x14 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x18 (=> $x14 $x25)))
 (let (($x127 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x128 (= $x14 $x127)))
 (let (($x119 (and $x128 $x18)))
 (let (($x134 (and $x119 $x133)))
 (let (($x140 (and $x134 $x149)))
 (let (($x123 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x138 (and $x123 $x140)))
 (let (($x159 (=> $x42 $x138)))
 (let (($x115 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x116 (= $x42 $x115)))
 (let (($x112 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x113 (= $x41 $x112)))
 (let (($x114 (and $x113 $x20)))
 (let (($x117 (and $x114 $x116)))
 (let (($x129 (and $x117 $x159)))
 (let (($x285 (and $x129 $x351)))
 (let (($x107 (=> $x70 true)))
 (let (($x100 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x105 (= $x70 $x100)))
 (let (($x102 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x103 (= $x14 $x102)))
 (let (($x104 (and $x103 $x18)))
 (let (($x106 (and $x104 $x105)))
 (let (($x109 (and $x106 $x107)))
 (let (($x101 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x95 (and $x101 $x109)))
 (let (($x110 (=> $x42 $x95)))
 (let (($x89 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x90 (= $x42 $x89)))
 (let (($x86 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x87 (= $x41 $x86)))
 (let (($x88 (and $x87 $x20)))
 (let (($x91 (and $x88 $x90)))
 (let (($x98 (and $x91 $x110)))
 (let (($x84 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x108 (and $x84 $x98)))
 (let (($x289 (and $x108 $x285)))
 (let (($x76 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x77 (and $x76 true)))
 (let (($x78 (=> $x70 $x77)))
 (let (($x71 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x72 (= $x70 $x71)))
 (let (($x62 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x16 (= $x14 $x62)))
 (let (($x22 (and $x16 $x18)))
 (let (($x73 (and $x22 $x72)))
 (let (($x79 (and $x73 $x78)))
 (let (($x33 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x80 (and $x33 $x79)))
 (let (($x81 (=> $x42 $x80)))
 (let (($x57 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x31 (= $x42 $x57)))
 (let (($x30 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x6 (= $x41 $x30)))
 (let (($x61 (and $x6 $x20)))
 (let (($x39 (and $x61 $x31)))
 (let (($x82 (and $x39 $x81)))
 (let (($x293 (and $x82 $x289)))
 (let (($x67 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x340 (and $x67 $x293)))
 (let (($x8 (bvugt ?x38 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x47 (=> (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x8)))))))
 (let (($x53 (=> (and $x5 (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x68 $x8)))))))
 (let (($x296 (and $x53 $x340)))
 (let (($x147 (=> $x296 $x223)))
 (not $x147)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= ind-%var1961X #b11000000000000000000000000000000)
(= ind-%var1961X.2.1 #b10000000000000000000000000000000)
(= ind-%var1961X.2.0 #b10000000000000000000000000000000)
(= ind-%var1961X.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= ind-%var1955X #b11000000000000000000000000000000)
(= ind-%var1955X.2.1 #b10000000000000000000000000000000)
(= ind-%var1955X.2.0 #b10000000000000000000000000000000)
(= ind-%var1955X.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_51)
(function @fun_51
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_51 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2367ada4)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #xa1f5e3cf)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x36a096bd)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x62ac1929)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x5316471b)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xb0)
                                #x2367adb7
                                #x23)
                         #x2367adb6
                         #x67)
                  #x2367ada7
                  #x23)))
(let ((a!2 (store (store (store (store a!1 #x2367adb6 #x67) #x2367adb7 #x23)
                         #x2367adb5
                         #xad)
                  #x2367ada5
                  #xad)))
  (store (store a!2 #x2367ada6 #x67) #x2367adb5 #xad))))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun ind-%var1961X () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1961X.2.1 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun ind-%var1961X.2.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun ind-%var1961X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32)
    #x2367adb0)
  (define-fun ind-%var1955X () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1955X.2.1 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun ind-%var1955X.2.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun ind-%var1955X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32)
    #x2367adb0)
  (define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2367ada7)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xb0b0b0b0)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x2367adb0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2367ada4)
  (define-fun ind-%var1949X () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1958X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1952X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1946X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1946X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1952X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1952X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1958X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1958X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var1946X.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun ind-%var1961X () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv7 32) (_ bv255 8)) (_ bv6 32) (_ bv255 8)) (_ bv5 32) (_ bv255 8)) (_ bv8 32) (_ bv255 8)) (_ bv2684354564 32) (_ bv64 8)) (_ bv2684354565 32) (_ bv5 8)) (_ bv2684354566 32) (_ bv136 8)) (_ bv2684354567 32) (_ bv63 8)))
(define-fun ind-%var1961X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1961X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1961X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1065878848 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1958X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1958X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1958X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1955X () (_ BitVec 32) (_ bv1 32))
(define-fun ind-%var1955X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1955X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1955X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1952X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1952X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1952X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1949X () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1946X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1946X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun ind-%var1946X.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv65536 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2684354564 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2684354564 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2684354567 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var2069X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var2069X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2069X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2069X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2066X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2066X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2066X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var2063X () (_ BitVec 32))
(declare-fun ind-%var2063X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2063X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2063X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2060X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2060X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2060X.0 () (_ BitVec 32))
(declare-fun ind-%var2057X () (_ BitVec 32))
(declare-fun ind-%var2054X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2054X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2054X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x444 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2069X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2069X (_ bv4 32))))))
 (let ((?x442 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2069X (_ bv4 32)) (_ bv2 32))) ?x444)))
 (let ((?x446 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2069X (_ bv4 32)) (_ bv3 32))) ?x442)))
 (let (($x449 (= ind-%var2069X.2.1 ?x446)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ind-%var2069X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2069X))))
 (let ((?x436 (concat (select input.dst.llvm-mem (bvadd ind-%var2069X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2069X (_ bv2 32))) ?x69))))
 (let (($x437 (= ind-%var2069X.2.0 ?x436)))
 (let (($x61 (= false false)))
 (let (($x24 (= (_ bv0 32) ind-%var2069X)))
 (let ((?x213 (ite $x24 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (= ind-%var2069X.0 ?x213)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x259 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x60 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x49 (bvadd ?x60 (_ bv3 32))))
 (let ((?x275 (concat (select input.dst.llvm-mem ?x49) (concat ?x267 ?x259))))
 (let ((?x318 (bvadd ?x275 (_ bv4 32))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x389 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x326))))
 (let (($x415 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 ?x389)))
 (let (($x458 (and (and (and (and $x415 $x65) $x61) $x437) $x449)))
 (let (($x417 (= ind-%var2066X.2.1 ind-%var2066X.2.1)))
 (let (($x412 (= ind-%var2066X.2.0 ind-%var2066X.2.0)))
 (let (($x432 (= ind-%var2066X.0 ind-%var2066X.0)))
 (let (($x232 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0.2.1.2.1)))
 (let (($x451 (and (and (and (and $x232 $x432) $x61) $x412) $x417)))
 (let (($x72 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x31 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x435 (and $x31 $x72)))
 (let (($x460 (and (and $x435 $x451) $x458)))
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2063X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2063X (_ bv4 32))))))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2063X (_ bv4 32)) (_ bv2 32))) ?x414)))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2063X (_ bv4 32)) (_ bv3 32))) ?x405)))
 (let (($x394 (= ind-%var2063X.2.1 ?x422)))
 (let ((?x406 (concat (select input.dst.llvm-mem (bvadd ind-%var2063X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2063X))))
 (let ((?x395 (concat (select input.dst.llvm-mem (bvadd ind-%var2063X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2063X (_ bv2 32))) ?x406))))
 (let (($x427 (= ind-%var2063X.2.0 ?x395)))
 (let (($x393 (= (_ bv0 32) ind-%var2063X)))
 (let ((?x137 (ite $x393 (_ bv0 32) (_ bv1 32))))
 (let (($x211 (= ind-%var2063X.0 ?x137)))
 (let (($x379 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 ?x389)))
 (let (($x403 (and (and (and (and $x379 $x211) $x61) $x427) $x394)))
 (let (($x367 (= ind-%var2060X.2.1 ind-%var2060X.2.1)))
 (let (($x373 (= ind-%var2060X.2.0 ind-%var2060X.2.0)))
 (let (($x369 (and (and (and $x232 (= ind-%var2060X.0 ind-%var2060X.0)) $x61) $x373)))
 (let (($x407 (and $x369 $x367)))
 (let (($x416 (and (and $x435 $x407) $x403)))
 (let ((?x385 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2057X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2057X (_ bv4 32))))))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2057X (_ bv4 32)) (_ bv2 32))) ?x385)))
 (let ((?x398 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2057X (_ bv4 32)) (_ bv3 32))) ?x401)))
 (let (($x358 (= ?x398 ?x398)))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ind-%var2057X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2057X))))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ind-%var2057X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2057X (_ bv2 32))) ?x346))))
 (let (($x375 (= ?x382 ?x382)))
 (let (($x384 (= (_ bv0 32) ind-%var2057X)))
 (let ((?x345 (ite $x384 (_ bv0 32) (_ bv1 32))))
 (let (($x348 (= ?x345 ?x345)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x181 (concat ?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x198 (concat ?x191 (concat ?x184 ?x181))))
 (let ((?x319 (bvadd ?x198 (_ bv4 32))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv1 32))) (select input.dst.llvm-mem ?x319))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv2 32))) ?x306))))
 (let (($x343 (= ?x315 ?x389)))
 (let (($x365 (and (and (and (and $x343 $x348) $x61) $x375) $x358)))
 (let (($x342 (= ind-%var2054X.2.1 ind-%var2054X.2.1)))
 (let (($x338 (= ind-%var2054X.2.0 ind-%var2054X.2.0)))
 (let (($x301 (= ind-%var2054X.0 ind-%var2054X.0)))
 (let (($x355 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1.2.1)))
 (let (($x325 (and (and (and (and $x355 $x301) $x61) $x338) $x342)))
 (let (($x126 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x307 (and $x126 $x31)))
 (let (($x359 (and (and $x307 $x325) $x365)))
 (let (($x462 (or (or $x359 $x416) $x460)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv1 32))) (select input.dst.llvm-mem ?x275))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv2 32))) ?x288))))
 (let (($x308 (= input.spec-%var-l-0.2.1.2.0 ?x294)))
 (let (($x463 (and $x308 $x462)))
 (let (($x464 (=> $x31 $x463)))
 (let (($x249 (= (_ bv0 32) ?x275)))
 (let ((?x48 (ite $x249 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (bvuge ?x48 (_ bv1 32))))
 (let (($x353 (= $x31 $x287)))
 (let (($x30 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x42 (=> $x30 $x61)))
 (let (($x352 (= ?x48 (_ bv0 32))))
 (let (($x295 (= $x30 $x352)))
 (let (($x299 (and $x295 $x42)))
 (let (($x298 (and $x299 $x353)))
 (let (($x465 (and $x298 $x464)))
 (let (($x52 (= $x465 true)))
 (let (($x197 (= $x52 true)))
 (let ((?x224 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x265 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x269 (concat ?x252 (concat ?x265 (concat ?x227 ?x224)))))
 (let (($x9 (= ?x269 input.dst.llvm-%l)))
 (let (($x351 (= $x9 true)))
 (let (($x285 (= $x351 true)))
 (let (($x277 (= (bvand ?x275 (_ bv4294967288 32)) ?x275)))
 (let (($x251 (= (bvand ?x60 (_ bv4294967292 32)) ?x60)))
 (let (($x282 (and $x251 $x277)))
 (let (($x264 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x247 (and true $x264)))
 (let (($x270 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x60 (bvsub ?x60 (_ bv4 32))) (bvult ?x60 (bvsub ?x60 (_ bv4 32))))))
 (let (($x283 (and (and (and $x270 $x247) $x251) $x282)))
 (let (($x327 (= true $x283)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x284 (=> $x5 $x327)))
 (let (($x256 (= input.dst.llvm-%l ?x269)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x253 (= (_ bv0 32) ?x239)))
 (let ((?x257 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x257)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x241 $x228)))
 (let (($x258 (and $x212 $x253)))
 (let (($x195 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (and $x195 $x258)))
 (let (($x234 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x236 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x234)))))))
 (let (($x246 (and $x236 $x248)))
 (let (($x266 (and $x246 $x256)))
 (let (($x164 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x243 (and $x164 $x266)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem ?x198))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv2 32))) ?x171))))
 (let (($x210 (= input.spec-%var-l-0.2.1.2.0 ?x216)))
 (let (($x199 (and $x210 true)))
 (let (($x233 (=> $x31 $x199)))
 (let (($x193 (= (_ bv0 32) ?x198)))
 (let ((?x175 (ite $x193 (_ bv0 32) (_ bv1 32))))
 (let (($x206 (bvuge ?x175 (_ bv1 32))))
 (let (($x208 (= $x31 $x206)))
 (let (($x183 (= ?x175 (_ bv0 32))))
 (let (($x185 (= $x30 $x183)))
 (let (($x182 (and $x185 $x42)))
 (let (($x217 (and $x182 $x208)))
 (let (($x230 (and $x217 $x233)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x139)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x172)))
 (let (($x158 (= input.spec-%var-l-0.2.0 ?x156)))
 (let (($x222 (and $x158 $x230)))
 (let (($x202 (=> $x126 $x222)))
 (let ((?x166 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x166 (_ bv1 32))))
 (let (($x144 (= $x126 $x143)))
 (let (($x178 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x165 (=> $x178 $x61)))
 (let (($x167 (= ?x166 (_ bv0 32))))
 (let (($x130 (= $x178 $x167)))
 (let (($x141 (and $x130 $x165)))
 (let (($x176 (and $x141 $x144)))
 (let (($x200 (and $x176 $x202)))
 (let (($x273 (and $x200 $x243)))
 (let (($x290 (and $x273 $x284)))
 (let (($x286 (= $x290 true)))
 (let (($x292 (= $x286 true)))
 (let (($x205 (= $x292 true)))
 (let (($x152 (= $x5 true)))
 (let (($x170 (= $x152 true)))
 (let (($x169 (= $x170 true)))
 (let (($x135 (= $x164 true)))
 (let (($x131 (= $x135 true)))
 (let (($x180 (= $x131 true)))
 (let (($x177 (and $x180 $x169)))
 (let (($x219 (and $x177 $x205)))
 (let (($x289 (and $x219 $x285)))
 (let (($x293 (and $x126 $x289)))
 (let (($x340 (and $x61 $x293)))
 (let (($x149 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x140 (and $x149 true)))
 (let (($x138 (=> $x72 $x140)))
 (let (($x134 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x136 (= $x72 $x134)))
 (let (($x62 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x70 (=> $x62 $x61)))
 (let (($x119 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x120 (= $x62 $x119)))
 (let (($x133 (and $x120 $x70)))
 (let (($x146 (and $x133 $x136)))
 (let (($x159 (and $x146 $x138)))
 (let (($x127 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x129 (and $x127 $x159)))
 (let (($x160 (=> $x31 $x129)))
 (let (($x117 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x121 (= $x31 $x117)))
 (let (($x114 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x115 (= $x30 $x114)))
 (let (($x116 (and $x115 $x42)))
 (let (($x123 (and $x116 $x121)))
 (let (($x132 (and $x123 $x160)))
 (let (($x296 (and $x132 $x340)))
 (let (($x95 (=> $x72 true)))
 (let (($x106 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x107 (= $x72 $x106)))
 (let (($x104 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x100 (= $x62 $x104)))
 (let (($x105 (and $x100 $x70)))
 (let (($x109 (and $x105 $x107)))
 (let (($x110 (and $x109 $x95)))
 (let (($x102 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x98 (and $x102 $x110)))
 (let (($x108 (=> $x31 $x98)))
 (let (($x91 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x99 (= $x31 $x91)))
 (let (($x88 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x89 (= $x30 $x88)))
 (let (($x90 (and $x89 $x42)))
 (let (($x101 (and $x90 $x99)))
 (let (($x111 (and $x101 $x108)))
 (let (($x86 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x112 (and $x86 $x111)))
 (let (($x297 (and $x112 $x296)))
 (let (($x78 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x79 (and $x78 true)))
 (let (($x80 (=> $x72 $x79)))
 (let (($x73 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x74 (= $x72 $x73)))
 (let (($x18 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x22 (= $x62 $x18)))
 (let (($x71 (and $x22 $x70)))
 (let (($x75 (and $x71 $x74)))
 (let (($x81 (and $x75 $x80)))
 (let (($x14 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x82 (and $x14 $x81)))
 (let (($x83 (=> $x31 $x82)))
 (let (($x39 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x64 (= $x31 $x39)))
 (let (($x25 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x20 (= $x30 $x25)))
 (let (($x57 (and $x20 $x42)))
 (let (($x56 (and $x57 $x64)))
 (let (($x84 (and $x56 $x83)))
 (let (($x13 (and $x84 $x297)))
 (let (($x41 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x55 (and $x41 $x13)))
 (let (($x17 (bvugt ?x60 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x67 (=> (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x17)))))))
 (let (($x50 (=> (and $x5 (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x11 $x17)))))))
 (let (($x231 (and $x50 $x55)))
 (let (($x226 (=> $x231 $x197)))
 (not $x226))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var2069X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var2069X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2069X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2069X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2066X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2066X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2066X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var2063X () (_ BitVec 32))
(declare-fun ind-%var2063X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2063X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2063X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2060X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2060X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2060X.0 () (_ BitVec 32))
(declare-fun ind-%var2057X () (_ BitVec 32))
(declare-fun ind-%var2054X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2054X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2054X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x444 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2069X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2069X (_ bv4 32))))))
 (let ((?x442 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2069X (_ bv4 32)) (_ bv2 32))) ?x444)))
 (let ((?x446 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2069X (_ bv4 32)) (_ bv3 32))) ?x442)))
 (let (($x449 (= ind-%var2069X.2.1 ?x446)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ind-%var2069X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2069X))))
 (let ((?x436 (concat (select input.dst.llvm-mem (bvadd ind-%var2069X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2069X (_ bv2 32))) ?x69))))
 (let (($x437 (= ind-%var2069X.2.0 ?x436)))
 (let (($x61 (= false false)))
 (let (($x24 (= (_ bv0 32) ind-%var2069X)))
 (let ((?x213 (ite $x24 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (= ind-%var2069X.0 ?x213)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x259 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x60 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x49 (bvadd ?x60 (_ bv3 32))))
 (let ((?x275 (concat (select input.dst.llvm-mem ?x49) (concat ?x267 ?x259))))
 (let ((?x318 (bvadd ?x275 (_ bv4 32))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x389 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x326))))
 (let (($x415 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 ?x389)))
 (let (($x458 (and (and (and (and $x415 $x65) $x61) $x437) $x449)))
 (let (($x417 (= ind-%var2066X.2.1 ind-%var2066X.2.1)))
 (let (($x412 (= ind-%var2066X.2.0 ind-%var2066X.2.0)))
 (let (($x432 (= ind-%var2066X.0 ind-%var2066X.0)))
 (let (($x232 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0.2.1.2.1)))
 (let (($x451 (and (and (and (and $x232 $x432) $x61) $x412) $x417)))
 (let (($x72 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x31 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x435 (and $x31 $x72)))
 (let (($x460 (and (and $x435 $x451) $x458)))
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2063X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2063X (_ bv4 32))))))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2063X (_ bv4 32)) (_ bv2 32))) ?x414)))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2063X (_ bv4 32)) (_ bv3 32))) ?x405)))
 (let (($x394 (= ind-%var2063X.2.1 ?x422)))
 (let ((?x406 (concat (select input.dst.llvm-mem (bvadd ind-%var2063X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2063X))))
 (let ((?x395 (concat (select input.dst.llvm-mem (bvadd ind-%var2063X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2063X (_ bv2 32))) ?x406))))
 (let (($x427 (= ind-%var2063X.2.0 ?x395)))
 (let (($x393 (= (_ bv0 32) ind-%var2063X)))
 (let ((?x137 (ite $x393 (_ bv0 32) (_ bv1 32))))
 (let (($x211 (= ind-%var2063X.0 ?x137)))
 (let (($x379 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 ?x389)))
 (let (($x403 (and (and (and (and $x379 $x211) $x61) $x427) $x394)))
 (let (($x367 (= ind-%var2060X.2.1 ind-%var2060X.2.1)))
 (let (($x373 (= ind-%var2060X.2.0 ind-%var2060X.2.0)))
 (let (($x369 (and (and (and $x232 (= ind-%var2060X.0 ind-%var2060X.0)) $x61) $x373)))
 (let (($x407 (and $x369 $x367)))
 (let (($x416 (and (and $x435 $x407) $x403)))
 (let ((?x385 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2057X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2057X (_ bv4 32))))))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2057X (_ bv4 32)) (_ bv2 32))) ?x385)))
 (let ((?x398 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2057X (_ bv4 32)) (_ bv3 32))) ?x401)))
 (let (($x358 (= ?x398 ?x398)))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ind-%var2057X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2057X))))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ind-%var2057X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2057X (_ bv2 32))) ?x346))))
 (let (($x375 (= ?x382 ?x382)))
 (let (($x384 (= (_ bv0 32) ind-%var2057X)))
 (let ((?x345 (ite $x384 (_ bv0 32) (_ bv1 32))))
 (let (($x348 (= ?x345 ?x345)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x181 (concat ?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x198 (concat ?x191 (concat ?x184 ?x181))))
 (let ((?x319 (bvadd ?x198 (_ bv4 32))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv1 32))) (select input.dst.llvm-mem ?x319))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv2 32))) ?x306))))
 (let (($x343 (= ?x315 ?x389)))
 (let (($x365 (and (and (and (and $x343 $x348) $x61) $x375) $x358)))
 (let (($x342 (= ind-%var2054X.2.1 ind-%var2054X.2.1)))
 (let (($x338 (= ind-%var2054X.2.0 ind-%var2054X.2.0)))
 (let (($x301 (= ind-%var2054X.0 ind-%var2054X.0)))
 (let (($x355 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1.2.1)))
 (let (($x325 (and (and (and (and $x355 $x301) $x61) $x338) $x342)))
 (let (($x126 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x307 (and $x126 $x31)))
 (let (($x359 (and (and $x307 $x325) $x365)))
 (let (($x462 (or (or $x359 $x416) $x460)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv1 32))) (select input.dst.llvm-mem ?x275))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv2 32))) ?x288))))
 (let (($x308 (= input.spec-%var-l-0.2.1.2.0 ?x294)))
 (let (($x463 (and $x308 $x462)))
 (let (($x464 (=> $x31 $x463)))
 (let (($x249 (= (_ bv0 32) ?x275)))
 (let ((?x48 (ite $x249 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (bvuge ?x48 (_ bv1 32))))
 (let (($x353 (= $x31 $x287)))
 (let (($x30 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x42 (=> $x30 $x61)))
 (let (($x352 (= ?x48 (_ bv0 32))))
 (let (($x295 (= $x30 $x352)))
 (let (($x299 (and $x295 $x42)))
 (let (($x298 (and $x299 $x353)))
 (let (($x465 (and $x298 $x464)))
 (let (($x52 (= $x465 true)))
 (let (($x197 (= $x52 true)))
 (let ((?x224 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x265 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x269 (concat ?x252 (concat ?x265 (concat ?x227 ?x224)))))
 (let (($x9 (= ?x269 input.dst.llvm-%l)))
 (let (($x351 (= $x9 true)))
 (let (($x285 (= $x351 true)))
 (let (($x277 (= (bvand ?x275 (_ bv4294967288 32)) ?x275)))
 (let (($x251 (= (bvand ?x60 (_ bv4294967292 32)) ?x60)))
 (let (($x282 (and $x251 $x277)))
 (let (($x264 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x247 (and true $x264)))
 (let (($x270 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x60 (bvsub ?x60 (_ bv4 32))) (bvult ?x60 (bvsub ?x60 (_ bv4 32))))))
 (let (($x283 (and (and (and $x270 $x247) $x251) $x282)))
 (let (($x327 (= true $x283)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x284 (=> $x5 $x327)))
 (let (($x256 (= input.dst.llvm-%l ?x269)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x253 (= (_ bv0 32) ?x239)))
 (let ((?x257 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x257)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x241 $x228)))
 (let (($x258 (and $x212 $x253)))
 (let (($x195 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (and $x195 $x258)))
 (let (($x234 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x236 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x234)))))))
 (let (($x246 (and $x236 $x248)))
 (let (($x266 (and $x246 $x256)))
 (let (($x164 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x243 (and $x164 $x266)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem ?x198))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv2 32))) ?x171))))
 (let (($x210 (= input.spec-%var-l-0.2.1.2.0 ?x216)))
 (let (($x199 (and $x210 true)))
 (let (($x233 (=> $x31 $x199)))
 (let (($x193 (= (_ bv0 32) ?x198)))
 (let ((?x175 (ite $x193 (_ bv0 32) (_ bv1 32))))
 (let (($x206 (bvuge ?x175 (_ bv1 32))))
 (let (($x208 (= $x31 $x206)))
 (let (($x183 (= ?x175 (_ bv0 32))))
 (let (($x185 (= $x30 $x183)))
 (let (($x182 (and $x185 $x42)))
 (let (($x217 (and $x182 $x208)))
 (let (($x230 (and $x217 $x233)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x139)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x172)))
 (let (($x158 (= input.spec-%var-l-0.2.0 ?x156)))
 (let (($x222 (and $x158 $x230)))
 (let (($x202 (=> $x126 $x222)))
 (let ((?x166 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x166 (_ bv1 32))))
 (let (($x144 (= $x126 $x143)))
 (let (($x178 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x165 (=> $x178 $x61)))
 (let (($x167 (= ?x166 (_ bv0 32))))
 (let (($x130 (= $x178 $x167)))
 (let (($x141 (and $x130 $x165)))
 (let (($x176 (and $x141 $x144)))
 (let (($x200 (and $x176 $x202)))
 (let (($x273 (and $x200 $x243)))
 (let (($x290 (and $x273 $x284)))
 (let (($x286 (= $x290 true)))
 (let (($x292 (= $x286 true)))
 (let (($x205 (= $x292 true)))
 (let (($x152 (= $x5 true)))
 (let (($x170 (= $x152 true)))
 (let (($x169 (= $x170 true)))
 (let (($x135 (= $x164 true)))
 (let (($x131 (= $x135 true)))
 (let (($x180 (= $x131 true)))
 (let (($x177 (and $x180 $x169)))
 (let (($x219 (and $x177 $x205)))
 (let (($x289 (and $x219 $x285)))
 (let (($x293 (and $x126 $x289)))
 (let (($x340 (and $x61 $x293)))
 (let (($x149 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x140 (and $x149 true)))
 (let (($x138 (=> $x72 $x140)))
 (let (($x134 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x136 (= $x72 $x134)))
 (let (($x62 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x70 (=> $x62 $x61)))
 (let (($x119 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x120 (= $x62 $x119)))
 (let (($x133 (and $x120 $x70)))
 (let (($x146 (and $x133 $x136)))
 (let (($x159 (and $x146 $x138)))
 (let (($x127 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x129 (and $x127 $x159)))
 (let (($x160 (=> $x31 $x129)))
 (let (($x117 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x121 (= $x31 $x117)))
 (let (($x114 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x115 (= $x30 $x114)))
 (let (($x116 (and $x115 $x42)))
 (let (($x123 (and $x116 $x121)))
 (let (($x132 (and $x123 $x160)))
 (let (($x296 (and $x132 $x340)))
 (let (($x95 (=> $x72 true)))
 (let (($x106 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x107 (= $x72 $x106)))
 (let (($x104 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x100 (= $x62 $x104)))
 (let (($x105 (and $x100 $x70)))
 (let (($x109 (and $x105 $x107)))
 (let (($x110 (and $x109 $x95)))
 (let (($x102 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x98 (and $x102 $x110)))
 (let (($x108 (=> $x31 $x98)))
 (let (($x91 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x99 (= $x31 $x91)))
 (let (($x88 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x89 (= $x30 $x88)))
 (let (($x90 (and $x89 $x42)))
 (let (($x101 (and $x90 $x99)))
 (let (($x111 (and $x101 $x108)))
 (let (($x86 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x112 (and $x86 $x111)))
 (let (($x297 (and $x112 $x296)))
 (let (($x78 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x79 (and $x78 true)))
 (let (($x80 (=> $x72 $x79)))
 (let (($x73 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x74 (= $x72 $x73)))
 (let (($x18 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x22 (= $x62 $x18)))
 (let (($x71 (and $x22 $x70)))
 (let (($x75 (and $x71 $x74)))
 (let (($x81 (and $x75 $x80)))
 (let (($x14 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x82 (and $x14 $x81)))
 (let (($x83 (=> $x31 $x82)))
 (let (($x39 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x64 (= $x31 $x39)))
 (let (($x25 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x20 (= $x30 $x25)))
 (let (($x57 (and $x20 $x42)))
 (let (($x56 (and $x57 $x64)))
 (let (($x84 (and $x56 $x83)))
 (let (($x13 (and $x84 $x297)))
 (let (($x41 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x55 (and $x41 $x13)))
 (let (($x17 (bvugt ?x60 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x67 (=> (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x17)))))))
 (let (($x50 (=> (and $x5 (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x11 $x17)))))))
 (let (($x231 (and $x50 $x55)))
 (let (($x226 (=> $x231 $x197)))
 (not $x226))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var2211X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var2211X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2211X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2211X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2208X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2208X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2208X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var2205X () (_ BitVec 32))
(declare-fun ind-%var2205X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2205X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2205X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2202X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2202X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2202X.0 () (_ BitVec 32))
(declare-fun ind-%var2199X () (_ BitVec 32))
(declare-fun ind-%var2196X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2196X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2196X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2211X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2211X (_ bv4 32))))))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2211X (_ bv4 32)) (_ bv2 32))) ?x417)))
 (let ((?x419 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2211X (_ bv4 32)) (_ bv3 32))) ?x413)))
 (let (($x24 (= ind-%var2211X.2.1 ?x419)))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ind-%var2211X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2211X))))
 (let ((?x432 (concat (select input.dst.llvm-mem (bvadd ind-%var2211X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2211X (_ bv2 32))) ?x422))))
 (let (($x418 (= ind-%var2211X.2.0 ?x432)))
 (let (($x57 (= false false)))
 (let (($x431 (= (_ bv0 32) ind-%var2211X)))
 (let ((?x396 (ite $x431 (_ bv0 32) (_ bv1 32))))
 (let (($x421 (= ind-%var2211X.0 ?x396)))
 (let (($x425 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x454 (and (and (and (and $x425 $x421) $x57) $x418) $x24)))
 (let (($x406 (= ind-%var2208X.2.1 ind-%var2208X.2.1)))
 (let (($x392 (= ind-%var2208X.2.0 ind-%var2208X.2.0)))
 (let (($x386 (= ind-%var2208X.0 ind-%var2208X.0)))
 (let (($x380 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x399 (and (and (and (and $x380 $x386) $x57) $x392) $x406)))
 (let (($x74 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x64 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x400 (and $x64 $x74)))
 (let (($x36 (and (and $x400 $x399) $x454)))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2205X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2205X (_ bv4 32))))))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2205X (_ bv4 32)) (_ bv2 32))) ?x407)))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2205X (_ bv4 32)) (_ bv3 32))) ?x379)))
 (let (($x137 (= ind-%var2205X.2.1 ?x393)))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ind-%var2205X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2205X))))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd ind-%var2205X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2205X (_ bv2 32))) ?x359))))
 (let (($x377 (= ind-%var2205X.2.0 ?x363)))
 (let (($x388 (= (_ bv0 32) ind-%var2205X)))
 (let ((?x426 (ite $x388 (_ bv0 32) (_ bv1 32))))
 (let (($x385 (= ind-%var2205X.0 ?x426)))
 (let (($x376 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x391 (and (and (and (and $x376 $x385) $x57) $x377) $x137)))
 (let (($x382 (= ind-%var2202X.2.1 ind-%var2202X.2.1)))
 (let (($x346 (= ind-%var2202X.2.0 ind-%var2202X.2.0)))
 (let (($x381 (and (and (and $x380 (= ind-%var2202X.0 ind-%var2202X.0)) $x57) $x346)))
 (let (($x356 (and $x381 $x382)))
 (let (($x35 (and (and $x400 $x356) $x391)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2199X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2199X (_ bv4 32))))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2199X (_ bv4 32)) (_ bv2 32))) ?x312)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2199X (_ bv4 32)) (_ bv3 32))) ?x326)))
 (let (($x336 (= ?x343 ?x343)))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ind-%var2199X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2199X))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ind-%var2199X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2199X (_ bv2 32))) ?x341))))
 (let (($x318 (= ?x315 ?x315)))
 (let (($x325 (= (_ bv0 32) ind-%var2199X)))
 (let ((?x350 (ite $x325 (_ bv0 32) (_ bv1 32))))
 (let (($x319 (= ?x350 ?x350)))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x190 (concat ?x155 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x175 (concat ?x193 (concat ?x181 ?x190))))
 (let ((?x308 (bvadd ?x175 (_ bv4 32))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem ?x308))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv2 32))) ?x337))))
 (let (($x309 (= ?x332 input.dst.llvm-%l)))
 (let (($x364 (and (and (and (and $x309 $x319) $x57) $x318) $x336)))
 (let (($x357 (= ind-%var2196X.2.1 ind-%var2196X.2.1)))
 (let (($x303 (= ind-%var2196X.2.0 ind-%var2196X.2.0)))
 (let (($x291 (= ind-%var2196X.0 ind-%var2196X.0)))
 (let (($x298 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x294 (and (and (and (and $x298 $x291) $x57) $x303) $x357)))
 (let (($x135 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x299 (and $x135 $x64)))
 (let (($x344 (and (and $x299 $x294) $x364)))
 (let (($x209 (or (or $x344 $x35) $x36)))
 (let (($x244 (= $x209 true)))
 (let (($x147 (= $x244 true)))
 (let ((?x46 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x243 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x273 (concat ?x243 (concat ?x269 (concat ?x224 ?x46)))))
 (let (($x293 (= ?x273 input.dst.llvm-%l)))
 (let (($x340 (= $x293 true)))
 (let (($x296 (= $x340 true)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x263 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x43 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x54 (bvadd ?x43 (_ bv3 32))))
 (let ((?x277 (concat (select input.dst.llvm-mem ?x54) (concat ?x271 ?x263))))
 (let (($x283 (= (bvand ?x277 (_ bv4294967288 32)) ?x277)))
 (let (($x255 (= (bvand ?x43 (_ bv4294967292 32)) ?x43)))
 (let (($x327 (and $x255 $x283)))
 (let (($x268 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x251 (and true $x268)))
 (let (($x274 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x43 (bvsub ?x43 (_ bv4 32))) (bvult ?x43 (bvsub ?x43 (_ bv4 32))))))
 (let (($x286 (and (and (and $x274 $x251) $x255) $x327)))
 (let (($x292 (= true $x286)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x205 (=> $x5 $x292)))
 (let (($x250 (= input.dst.llvm-%l ?x273)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x246 (= (_ bv0 32) ?x248)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x239)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x258 (and $x212 $x253)))
 (let (($x242 (and $x258 $x246)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x94 $x242)))
 (let (($x237 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x228 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x237)))))))
 (let (($x240 (and $x228 $x252)))
 (let (($x45 (and $x240 $x250)))
 (let (($x152 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x125 (and $x152 $x45)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x203))))
 (let (($x233 (= input.spec-%var-l-0.2.1.2.0 ?x199)))
 (let (($x230 (and $x233 true)))
 (let (($x222 (=> $x64 $x230)))
 (let (($x183 (= (_ bv0 32) ?x175)))
 (let ((?x185 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x217 (bvuge ?x185 (_ bv1 32))))
 (let (($x220 (= $x64 $x217)))
 (let (($x25 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x31 (=> $x25 $x57)))
 (let (($x182 (= ?x185 (_ bv0 32))))
 (let (($x206 (= $x25 $x182)))
 (let (($x208 (and $x206 $x31)))
 (let (($x221 (and $x208 $x220)))
 (let (($x202 (and $x221 $x222)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x168)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x172)))
 (let (($x188 (= input.spec-%var-l-0.2.0 ?x163)))
 (let (($x200 (and $x188 $x202)))
 (let (($x196 (=> $x135 $x200)))
 (let ((?x165 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x165 (_ bv1 32))))
 (let (($x174 (= $x135 $x176)))
 (let (($x130 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x143 (=> $x130 $x57)))
 (let (($x141 (= ?x165 (_ bv0 32))))
 (let (($x126 (= $x130 $x141)))
 (let (($x144 (and $x126 $x143)))
 (let (($x154 (and $x144 $x174)))
 (let (($x92 (and $x154 $x196)))
 (let (($x44 (and $x92 $x125)))
 (let (($x219 (and $x44 $x205)))
 (let (($x9 (= $x219 true)))
 (let (($x351 (= $x9 true)))
 (let (($x285 (= $x351 true)))
 (let (($x122 (= $x7 true)))
 (let (($x178 (= $x122 true)))
 (let (($x166 (= $x178 true)))
 (let (($x170 (= $x152 true)))
 (let (($x169 (= $x170 true)))
 (let (($x177 (= $x169 true)))
 (let (($x167 (and $x177 $x166)))
 (let (($x289 (and $x167 $x285)))
 (let (($x297 (and $x289 $x296)))
 (let (($x13 (and $x135 $x297)))
 (let (($x55 (and $x57 $x13)))
 (let (($x138 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x159 (and $x138 true)))
 (let (($x129 (=> $x74 $x159)))
 (let (($x146 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x148 (= $x74 $x146)))
 (let (($x18 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x72 (=> $x18 $x57)))
 (let (($x133 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x134 (= $x18 $x133)))
 (let (($x136 (and $x134 $x72)))
 (let (($x149 (and $x136 $x148)))
 (let (($x160 (and $x149 $x129)))
 (let (($x119 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x132 (and $x119 $x160)))
 (let (($x161 (=> $x64 $x132)))
 (let (($x123 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x124 (= $x64 $x123)))
 (let (($x116 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x117 (= $x25 $x116)))
 (let (($x121 (and $x117 $x31)))
 (let (($x127 (and $x121 $x124)))
 (let (($x162 (and $x127 $x161)))
 (let (($x231 (and $x162 $x55)))
 (let (($x98 (=> $x74 true)))
 (let (($x109 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x95 (= $x74 $x109)))
 (let (($x105 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x106 (= $x18 $x105)))
 (let (($x107 (and $x106 $x72)))
 (let (($x110 (and $x107 $x95)))
 (let (($x108 (and $x110 $x98)))
 (let (($x104 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x111 (and $x104 $x108)))
 (let (($x112 (=> $x64 $x111)))
 (let (($x101 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x96 (= $x64 $x101)))
 (let (($x90 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x91 (= $x25 $x90)))
 (let (($x99 (and $x91 $x31)))
 (let (($x102 (and $x99 $x96)))
 (let (($x113 (and $x102 $x112)))
 (let (($x88 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x114 (and $x88 $x113)))
 (let (($x249 (and $x114 $x231)))
 (let (($x80 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x81 (and $x80 true)))
 (let (($x82 (=> $x74 $x81)))
 (let (($x75 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x76 (= $x74 $x75)))
 (let (($x70 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x71 (= $x18 $x70)))
 (let (($x73 (and $x71 $x72)))
 (let (($x77 (and $x73 $x76)))
 (let (($x83 (and $x77 $x82)))
 (let (($x62 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x84 (and $x62 $x83)))
 (let (($x85 (=> $x64 $x84)))
 (let (($x56 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x33 (= $x64 $x56)))
 (let (($x61 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x42 (= $x25 $x61)))
 (let (($x39 (and $x42 $x31)))
 (let (($x51 (and $x39 $x33)))
 (let (($x86 (and $x51 $x85)))
 (let (($x48 (and $x86 $x249)))
 (let (($x30 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x352 (and $x30 $x48)))
 (let (($x53 (bvugt ?x43 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x41 (=> (bvule ?x43 (bvsub (bvadd ?x43 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x53)))))))
 (let (($x58 (=> (and $x5 (bvule ?x43 (bvsub (bvadd ?x43 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x47 $x53)))))))
 (let (($x295 (and $x58 $x352)))
 (let (($x29 (=> $x295 $x147)))
 (not $x29)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var2211X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var2211X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2211X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2211X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2208X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2208X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2208X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var2205X () (_ BitVec 32))
(declare-fun ind-%var2205X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2205X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2205X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2202X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2202X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2202X.0 () (_ BitVec 32))
(declare-fun ind-%var2199X () (_ BitVec 32))
(declare-fun ind-%var2196X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2196X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2196X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2211X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2211X (_ bv4 32))))))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2211X (_ bv4 32)) (_ bv2 32))) ?x417)))
 (let ((?x419 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2211X (_ bv4 32)) (_ bv3 32))) ?x413)))
 (let (($x24 (= ind-%var2211X.2.1 ?x419)))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ind-%var2211X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2211X))))
 (let ((?x432 (concat (select input.dst.llvm-mem (bvadd ind-%var2211X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2211X (_ bv2 32))) ?x422))))
 (let (($x418 (= ind-%var2211X.2.0 ?x432)))
 (let (($x57 (= false false)))
 (let (($x431 (= (_ bv0 32) ind-%var2211X)))
 (let ((?x396 (ite $x431 (_ bv0 32) (_ bv1 32))))
 (let (($x421 (= ind-%var2211X.0 ?x396)))
 (let (($x425 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x454 (and (and (and (and $x425 $x421) $x57) $x418) $x24)))
 (let (($x406 (= ind-%var2208X.2.1 ind-%var2208X.2.1)))
 (let (($x392 (= ind-%var2208X.2.0 ind-%var2208X.2.0)))
 (let (($x386 (= ind-%var2208X.0 ind-%var2208X.0)))
 (let (($x380 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x399 (and (and (and (and $x380 $x386) $x57) $x392) $x406)))
 (let (($x74 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x64 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x400 (and $x64 $x74)))
 (let (($x36 (and (and $x400 $x399) $x454)))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2205X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2205X (_ bv4 32))))))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2205X (_ bv4 32)) (_ bv2 32))) ?x407)))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2205X (_ bv4 32)) (_ bv3 32))) ?x379)))
 (let (($x137 (= ind-%var2205X.2.1 ?x393)))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ind-%var2205X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2205X))))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd ind-%var2205X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2205X (_ bv2 32))) ?x359))))
 (let (($x377 (= ind-%var2205X.2.0 ?x363)))
 (let (($x388 (= (_ bv0 32) ind-%var2205X)))
 (let ((?x426 (ite $x388 (_ bv0 32) (_ bv1 32))))
 (let (($x385 (= ind-%var2205X.0 ?x426)))
 (let (($x376 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x391 (and (and (and (and $x376 $x385) $x57) $x377) $x137)))
 (let (($x382 (= ind-%var2202X.2.1 ind-%var2202X.2.1)))
 (let (($x346 (= ind-%var2202X.2.0 ind-%var2202X.2.0)))
 (let (($x381 (and (and (and $x380 (= ind-%var2202X.0 ind-%var2202X.0)) $x57) $x346)))
 (let (($x356 (and $x381 $x382)))
 (let (($x35 (and (and $x400 $x356) $x391)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2199X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2199X (_ bv4 32))))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2199X (_ bv4 32)) (_ bv2 32))) ?x312)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2199X (_ bv4 32)) (_ bv3 32))) ?x326)))
 (let (($x336 (= ?x343 ?x343)))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ind-%var2199X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2199X))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ind-%var2199X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2199X (_ bv2 32))) ?x341))))
 (let (($x318 (= ?x315 ?x315)))
 (let (($x325 (= (_ bv0 32) ind-%var2199X)))
 (let ((?x350 (ite $x325 (_ bv0 32) (_ bv1 32))))
 (let (($x319 (= ?x350 ?x350)))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x190 (concat ?x155 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x175 (concat ?x193 (concat ?x181 ?x190))))
 (let ((?x308 (bvadd ?x175 (_ bv4 32))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem ?x308))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv2 32))) ?x337))))
 (let (($x309 (= ?x332 input.dst.llvm-%l)))
 (let (($x364 (and (and (and (and $x309 $x319) $x57) $x318) $x336)))
 (let (($x357 (= ind-%var2196X.2.1 ind-%var2196X.2.1)))
 (let (($x303 (= ind-%var2196X.2.0 ind-%var2196X.2.0)))
 (let (($x291 (= ind-%var2196X.0 ind-%var2196X.0)))
 (let (($x298 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0.2.1)))
 (let (($x294 (and (and (and (and $x298 $x291) $x57) $x303) $x357)))
 (let (($x135 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x299 (and $x135 $x64)))
 (let (($x344 (and (and $x299 $x294) $x364)))
 (let (($x209 (or (or $x344 $x35) $x36)))
 (let (($x244 (= $x209 true)))
 (let (($x147 (= $x244 true)))
 (let ((?x46 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x243 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x273 (concat ?x243 (concat ?x269 (concat ?x224 ?x46)))))
 (let (($x293 (= ?x273 input.dst.llvm-%l)))
 (let (($x340 (= $x293 true)))
 (let (($x296 (= $x340 true)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x263 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x43 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x54 (bvadd ?x43 (_ bv3 32))))
 (let ((?x277 (concat (select input.dst.llvm-mem ?x54) (concat ?x271 ?x263))))
 (let (($x283 (= (bvand ?x277 (_ bv4294967288 32)) ?x277)))
 (let (($x255 (= (bvand ?x43 (_ bv4294967292 32)) ?x43)))
 (let (($x327 (and $x255 $x283)))
 (let (($x268 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x251 (and true $x268)))
 (let (($x274 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x43 (bvsub ?x43 (_ bv4 32))) (bvult ?x43 (bvsub ?x43 (_ bv4 32))))))
 (let (($x286 (and (and (and $x274 $x251) $x255) $x327)))
 (let (($x292 (= true $x286)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x205 (=> $x5 $x292)))
 (let (($x250 (= input.dst.llvm-%l ?x273)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x246 (= (_ bv0 32) ?x248)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x239)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x258 (and $x212 $x253)))
 (let (($x242 (and $x258 $x246)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x94 $x242)))
 (let (($x237 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x228 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x237)))))))
 (let (($x240 (and $x228 $x252)))
 (let (($x45 (and $x240 $x250)))
 (let (($x152 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x125 (and $x152 $x45)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x203))))
 (let (($x233 (= input.spec-%var-l-0.2.1.2.0 ?x199)))
 (let (($x230 (and $x233 true)))
 (let (($x222 (=> $x64 $x230)))
 (let (($x183 (= (_ bv0 32) ?x175)))
 (let ((?x185 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x217 (bvuge ?x185 (_ bv1 32))))
 (let (($x220 (= $x64 $x217)))
 (let (($x25 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x31 (=> $x25 $x57)))
 (let (($x182 (= ?x185 (_ bv0 32))))
 (let (($x206 (= $x25 $x182)))
 (let (($x208 (and $x206 $x31)))
 (let (($x221 (and $x208 $x220)))
 (let (($x202 (and $x221 $x222)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x168)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x172)))
 (let (($x188 (= input.spec-%var-l-0.2.0 ?x163)))
 (let (($x200 (and $x188 $x202)))
 (let (($x196 (=> $x135 $x200)))
 (let ((?x165 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x165 (_ bv1 32))))
 (let (($x174 (= $x135 $x176)))
 (let (($x130 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x143 (=> $x130 $x57)))
 (let (($x141 (= ?x165 (_ bv0 32))))
 (let (($x126 (= $x130 $x141)))
 (let (($x144 (and $x126 $x143)))
 (let (($x154 (and $x144 $x174)))
 (let (($x92 (and $x154 $x196)))
 (let (($x44 (and $x92 $x125)))
 (let (($x219 (and $x44 $x205)))
 (let (($x9 (= $x219 true)))
 (let (($x351 (= $x9 true)))
 (let (($x285 (= $x351 true)))
 (let (($x122 (= $x7 true)))
 (let (($x178 (= $x122 true)))
 (let (($x166 (= $x178 true)))
 (let (($x170 (= $x152 true)))
 (let (($x169 (= $x170 true)))
 (let (($x177 (= $x169 true)))
 (let (($x167 (and $x177 $x166)))
 (let (($x289 (and $x167 $x285)))
 (let (($x297 (and $x289 $x296)))
 (let (($x13 (and $x135 $x297)))
 (let (($x55 (and $x57 $x13)))
 (let (($x138 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x159 (and $x138 true)))
 (let (($x129 (=> $x74 $x159)))
 (let (($x146 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x148 (= $x74 $x146)))
 (let (($x18 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x72 (=> $x18 $x57)))
 (let (($x133 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x134 (= $x18 $x133)))
 (let (($x136 (and $x134 $x72)))
 (let (($x149 (and $x136 $x148)))
 (let (($x160 (and $x149 $x129)))
 (let (($x119 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x132 (and $x119 $x160)))
 (let (($x161 (=> $x64 $x132)))
 (let (($x123 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x124 (= $x64 $x123)))
 (let (($x116 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x117 (= $x25 $x116)))
 (let (($x121 (and $x117 $x31)))
 (let (($x127 (and $x121 $x124)))
 (let (($x162 (and $x127 $x161)))
 (let (($x231 (and $x162 $x55)))
 (let (($x98 (=> $x74 true)))
 (let (($x109 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x95 (= $x74 $x109)))
 (let (($x105 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x106 (= $x18 $x105)))
 (let (($x107 (and $x106 $x72)))
 (let (($x110 (and $x107 $x95)))
 (let (($x108 (and $x110 $x98)))
 (let (($x104 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x111 (and $x104 $x108)))
 (let (($x112 (=> $x64 $x111)))
 (let (($x101 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x96 (= $x64 $x101)))
 (let (($x90 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x91 (= $x25 $x90)))
 (let (($x99 (and $x91 $x31)))
 (let (($x102 (and $x99 $x96)))
 (let (($x113 (and $x102 $x112)))
 (let (($x88 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x114 (and $x88 $x113)))
 (let (($x249 (and $x114 $x231)))
 (let (($x80 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x81 (and $x80 true)))
 (let (($x82 (=> $x74 $x81)))
 (let (($x75 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x76 (= $x74 $x75)))
 (let (($x70 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x71 (= $x18 $x70)))
 (let (($x73 (and $x71 $x72)))
 (let (($x77 (and $x73 $x76)))
 (let (($x83 (and $x77 $x82)))
 (let (($x62 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x84 (and $x62 $x83)))
 (let (($x85 (=> $x64 $x84)))
 (let (($x56 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x33 (= $x64 $x56)))
 (let (($x61 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x42 (= $x25 $x61)))
 (let (($x39 (and $x42 $x31)))
 (let (($x51 (and $x39 $x33)))
 (let (($x86 (and $x51 $x85)))
 (let (($x48 (and $x86 $x249)))
 (let (($x30 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x352 (and $x30 $x48)))
 (let (($x53 (bvugt ?x43 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x41 (=> (bvule ?x43 (bvsub (bvadd ?x43 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x53)))))))
 (let (($x58 (=> (and $x5 (bvule ?x43 (bvsub (bvadd ?x43 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x47 $x53)))))))
 (let (($x295 (and $x58 $x352)))
 (let (($x29 (=> $x295 $x147)))
 (not $x29)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var2346X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var2346X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2346X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2346X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2343X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2343X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2343X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var2340X () (_ BitVec 32))
(declare-fun ind-%var2340X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2340X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2340X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2337X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2337X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2337X.0 () (_ BitVec 32))
(declare-fun ind-%var2334X () (_ BitVec 32))
(declare-fun ind-%var2331X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2331X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2331X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x451 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2346X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2346X (_ bv4 32))))))
 (let ((?x455 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2346X (_ bv4 32)) (_ bv2 32))) ?x451)))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2346X (_ bv4 32)) (_ bv3 32))) ?x455)))
 (let (($x419 (= ind-%var2346X.2.1 ?x413)))
 (let ((?x403 (concat (select input.dst.llvm-mem (bvadd ind-%var2346X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2346X))))
 (let ((?x432 (concat (select input.dst.llvm-mem (bvadd ind-%var2346X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2346X (_ bv2 32))) ?x403))))
 (let (($x418 (= ind-%var2346X.2.0 ?x432)))
 (let (($x39 (= false false)))
 (let (($x421 (= (_ bv0 32) ind-%var2346X)))
 (let ((?x213 (ite $x421 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (= ind-%var2346X.0 ?x213)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x267 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x275 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x68 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x32 (bvadd ?x68 (_ bv3 32))))
 (let ((?x283 (concat (select input.dst.llvm-mem ?x32) (concat ?x275 ?x267))))
 (let (($x408 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 ?x283)))
 (let (($x209 (and (and (and (and $x408 $x65) $x39) $x418) $x419)))
 (let (($x406 (= ind-%var2343X.2.1 ind-%var2343X.2.1)))
 (let (($x427 (= ind-%var2343X.2.0 ind-%var2343X.2.0)))
 (let (($x23 (= ind-%var2343X.0 ind-%var2343X.0)))
 (let (($x362 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0)))
 (let (($x425 (and (and (and (and $x362 $x23) $x39) $x427) $x406)))
 (let (($x76 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x33 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x347 (and $x33 $x76)))
 (let (($x147 (and (and $x347 $x425) $x209)))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2340X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2340X (_ bv4 32))))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2340X (_ bv4 32)) (_ bv2 32))) ?x366)))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2340X (_ bv4 32)) (_ bv3 32))) ?x369)))
 (let (($x137 (= ind-%var2340X.2.1 ?x393)))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd ind-%var2340X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2340X))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ind-%var2340X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2340X (_ bv2 32))) ?x358))))
 (let (($x404 (= ind-%var2340X.2.0 ?x377)))
 (let (($x211 (= (_ bv0 32) ind-%var2340X)))
 (let ((?x424 (ite $x211 (_ bv0 32) (_ bv1 32))))
 (let (($x401 (= ind-%var2340X.0 ?x424)))
 (let (($x388 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 ?x283)))
 (let (($x423 (and (and (and (and $x388 $x401) $x39) $x404) $x137)))
 (let (($x356 (= ind-%var2337X.2.1 ind-%var2337X.2.1)))
 (let (($x374 (= ind-%var2337X.2.0 ind-%var2337X.2.0)))
 (let (($x376 (and (and (and $x362 (= ind-%var2337X.0 ind-%var2337X.0)) $x39) $x374)))
 (let (($x390 (and $x376 $x356)))
 (let (($x383 (and (and $x347 $x390) $x423)))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2334X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2334X (_ bv4 32))))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2334X (_ bv4 32)) (_ bv2 32))) ?x314)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2334X (_ bv4 32)) (_ bv3 32))) ?x329)))
 (let (($x336 (= ?x343 ?x343)))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ind-%var2334X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2334X))))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ind-%var2334X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2334X (_ bv2 32))) ?x321))))
 (let (($x348 (= ?x318 ?x318)))
 (let (($x384 (= (_ bv0 32) ind-%var2334X)))
 (let ((?x345 (ite $x384 (_ bv0 32) (_ bv1 32))))
 (let (($x306 (= ?x345 ?x345)))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x155 (concat ?x184 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x185 (concat ?x183 (concat ?x190 ?x155))))
 (let ((?x301 (bvadd ?x185 (_ bv4 32))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x307))))
 (let (($x350 (= ?x325 ?x283)))
 (let (($x349 (and (and (and (and $x350 $x306) $x39) $x348) $x336)))
 (let (($x294 (= ind-%var2331X.2.1 ind-%var2331X.2.1)))
 (let (($x305 (= ind-%var2331X.2.0 ind-%var2331X.2.0)))
 (let (($x303 (= ind-%var2331X.0 ind-%var2331X.0)))
 (let (($x288 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0)))
 (let (($x338 (and (and (and (and $x288 $x303) $x39) $x305) $x294)))
 (let (($x174 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x304 (and $x174 $x33)))
 (let (($x387 (and (and $x304 $x338) $x349)))
 (let (($x223 (or (or $x387 $x383) $x147)))
 (let (($x38 (= $x223 true)))
 (let (($x238 (= $x38 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x125 (concat ?x273 (concat ?x46 ?x227)))))
 (let (($x13 (= ?x44 input.dst.llvm-%l)))
 (let (($x55 (= $x13 true)))
 (let (($x231 (= $x55 true)))
 (let (($x286 (= (bvand ?x283 (_ bv4294967288 32)) ?x283)))
 (let (($x259 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x292 (and $x259 $x286)))
 (let (($x272 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x255 (and true $x272)))
 (let (($x276 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv4 32))) (bvult ?x68 (bvsub ?x68 (_ bv4 32))))))
 (let (($x9 (and (and (and $x276 $x255) $x259) $x292)))
 (let (($x351 (= true $x9)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x285 (=> $x5 $x351)))
 (let (($x245 (= input.dst.llvm-%l ?x44)))
 (let ((?x252 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x252)))
 (let ((?x248 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x248)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x258 $x246)))
 (let (($x266 (and $x242 $x240)))
 (let (($x225 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x225 $x266)))
 (let (($x241 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x253 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x195 $x241)))))))
 (let (($x262 (and $x253 $x243)))
 (let (($x270 (and $x262 $x245)))
 (let (($x122 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x260 (and $x122 $x270)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x207))))
 (let (($x222 (= input.spec-%var-l-0.2.1.2.0 ?x230)))
 (let (($x202 (and $x222 true)))
 (let (($x200 (=> $x33 $x202)))
 (let (($x182 (= (_ bv0 32) ?x185)))
 (let ((?x206 (ite $x182 (_ bv0 32) (_ bv1 32))))
 (let (($x221 (bvuge ?x206 (_ bv1 32))))
 (let (($x216 (= $x33 $x221)))
 (let (($x61 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x64 (=> $x61 $x39)))
 (let (($x208 (= ?x206 (_ bv0 32))))
 (let (($x217 (= $x61 $x208)))
 (let (($x220 (and $x217 $x64)))
 (let (($x210 (and $x220 $x216)))
 (let (($x196 (and $x210 $x200)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x142)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x172)))
 (let (($x198 (= input.spec-%var-l-0.2.0 ?x191)))
 (let (($x92 (and $x198 $x196)))
 (let (($x234 (=> $x174 $x92)))
 (let ((?x126 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x126 (_ bv1 32))))
 (let (($x153 (= $x174 $x154)))
 (let (($x170 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x135 (=> $x170 $x39)))
 (let (($x143 (= ?x126 (_ bv0 32))))
 (let (($x144 (= $x170 $x143)))
 (let (($x176 (and $x144 $x135)))
 (let (($x156 (and $x176 $x153)))
 (let (($x214 (and $x156 $x234)))
 (let (($x281 (and $x214 $x260)))
 (let (($x289 (and $x281 $x285)))
 (let (($x293 (= $x289 true)))
 (let (($x340 (= $x293 true)))
 (let (($x296 (= $x340 true)))
 (let (($x164 (= $x5 true)))
 (let (($x130 (= $x164 true)))
 (let (($x165 (= $x130 true)))
 (let (($x178 (= $x122 true)))
 (let (($x166 (= $x178 true)))
 (let (($x167 (= $x166 true)))
 (let (($x141 (and $x167 $x165)))
 (let (($x297 (and $x141 $x296)))
 (let (($x249 (and $x297 $x231)))
 (let (($x48 (and $x170 $x249)))
 (let (($x352 (and $x39 $x48)))
 (let (($x129 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x160 (and $x129 true)))
 (let (($x132 (=> $x76 $x160)))
 (let (($x149 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x140 (= $x76 $x149)))
 (let (($x70 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x74 (=> $x70 $x39)))
 (let (($x136 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x146 (= $x70 $x136)))
 (let (($x148 (and $x146 $x74)))
 (let (($x138 (and $x148 $x140)))
 (let (($x161 (and $x138 $x132)))
 (let (($x133 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x162 (and $x133 $x161)))
 (let (($x131 (=> $x33 $x162)))
 (let (($x127 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x128 (= $x33 $x127)))
 (let (($x121 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x123 (= $x61 $x121)))
 (let (($x124 (and $x123 $x64)))
 (let (($x119 (and $x124 $x128)))
 (let (($x180 (and $x119 $x131)))
 (let (($x295 (and $x180 $x352)))
 (let (($x111 (=> $x76 true)))
 (let (($x110 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x98 (= $x76 $x110)))
 (let (($x107 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x109 (= $x70 $x107)))
 (let (($x95 (and $x109 $x74)))
 (let (($x108 (and $x95 $x98)))
 (let (($x112 (and $x108 $x111)))
 (let (($x105 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x113 (and $x105 $x112)))
 (let (($x114 (=> $x33 $x113)))
 (let (($x102 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x103 (= $x33 $x102)))
 (let (($x99 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x101 (= $x61 $x99)))
 (let (($x96 (and $x101 $x64)))
 (let (($x104 (and $x96 $x103)))
 (let (($x115 (and $x104 $x114)))
 (let (($x90 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x116 (and $x90 $x115)))
 (let (($x299 (and $x116 $x295)))
 (let (($x82 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x83 (and $x82 true)))
 (let (($x84 (=> $x76 $x83)))
 (let (($x77 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x78 (= $x76 $x77)))
 (let (($x72 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x73 (= $x70 $x72)))
 (let (($x75 (and $x73 $x74)))
 (let (($x79 (and $x75 $x78)))
 (let (($x85 (and $x79 $x84)))
 (let (($x18 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x86 (and $x18 $x85)))
 (let (($x87 (=> $x33 $x86)))
 (let (($x51 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x14 (= $x33 $x51)))
 (let (($x57 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x31 (= $x61 $x57)))
 (let (($x56 (and $x31 $x64)))
 (let (($x59 (and $x56 $x14)))
 (let (($x88 (and $x59 $x87)))
 (let (($x287 (and $x88 $x299)))
 (let (($x25 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x353 (and $x25 $x287)))
 (let (($x50 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x30 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x50)))))))
 (let (($x49 (=> (and $x5 (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x67 $x50)))))))
 (let (($x298 (and $x49 $x353)))
 (let (($x265 (=> $x298 $x238)))
 (not $x265)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var2346X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var2346X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2346X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2346X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2343X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2343X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2343X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var2340X () (_ BitVec 32))
(declare-fun ind-%var2340X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2340X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2340X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2337X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2337X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2337X.0 () (_ BitVec 32))
(declare-fun ind-%var2334X () (_ BitVec 32))
(declare-fun ind-%var2331X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2331X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2331X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x451 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2346X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2346X (_ bv4 32))))))
 (let ((?x455 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2346X (_ bv4 32)) (_ bv2 32))) ?x451)))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2346X (_ bv4 32)) (_ bv3 32))) ?x455)))
 (let (($x419 (= ind-%var2346X.2.1 ?x413)))
 (let ((?x403 (concat (select input.dst.llvm-mem (bvadd ind-%var2346X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2346X))))
 (let ((?x432 (concat (select input.dst.llvm-mem (bvadd ind-%var2346X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2346X (_ bv2 32))) ?x403))))
 (let (($x418 (= ind-%var2346X.2.0 ?x432)))
 (let (($x39 (= false false)))
 (let (($x421 (= (_ bv0 32) ind-%var2346X)))
 (let ((?x213 (ite $x421 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (= ind-%var2346X.0 ?x213)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x267 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x275 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x68 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x32 (bvadd ?x68 (_ bv3 32))))
 (let ((?x283 (concat (select input.dst.llvm-mem ?x32) (concat ?x275 ?x267))))
 (let (($x408 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 ?x283)))
 (let (($x209 (and (and (and (and $x408 $x65) $x39) $x418) $x419)))
 (let (($x406 (= ind-%var2343X.2.1 ind-%var2343X.2.1)))
 (let (($x427 (= ind-%var2343X.2.0 ind-%var2343X.2.0)))
 (let (($x23 (= ind-%var2343X.0 ind-%var2343X.0)))
 (let (($x362 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0)))
 (let (($x425 (and (and (and (and $x362 $x23) $x39) $x427) $x406)))
 (let (($x76 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x33 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x347 (and $x33 $x76)))
 (let (($x147 (and (and $x347 $x425) $x209)))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2340X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2340X (_ bv4 32))))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2340X (_ bv4 32)) (_ bv2 32))) ?x366)))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2340X (_ bv4 32)) (_ bv3 32))) ?x369)))
 (let (($x137 (= ind-%var2340X.2.1 ?x393)))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd ind-%var2340X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2340X))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ind-%var2340X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2340X (_ bv2 32))) ?x358))))
 (let (($x404 (= ind-%var2340X.2.0 ?x377)))
 (let (($x211 (= (_ bv0 32) ind-%var2340X)))
 (let ((?x424 (ite $x211 (_ bv0 32) (_ bv1 32))))
 (let (($x401 (= ind-%var2340X.0 ?x424)))
 (let (($x388 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 ?x283)))
 (let (($x423 (and (and (and (and $x388 $x401) $x39) $x404) $x137)))
 (let (($x356 (= ind-%var2337X.2.1 ind-%var2337X.2.1)))
 (let (($x374 (= ind-%var2337X.2.0 ind-%var2337X.2.0)))
 (let (($x376 (and (and (and $x362 (= ind-%var2337X.0 ind-%var2337X.0)) $x39) $x374)))
 (let (($x390 (and $x376 $x356)))
 (let (($x383 (and (and $x347 $x390) $x423)))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2334X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2334X (_ bv4 32))))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2334X (_ bv4 32)) (_ bv2 32))) ?x314)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2334X (_ bv4 32)) (_ bv3 32))) ?x329)))
 (let (($x336 (= ?x343 ?x343)))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ind-%var2334X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2334X))))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ind-%var2334X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2334X (_ bv2 32))) ?x321))))
 (let (($x348 (= ?x318 ?x318)))
 (let (($x384 (= (_ bv0 32) ind-%var2334X)))
 (let ((?x345 (ite $x384 (_ bv0 32) (_ bv1 32))))
 (let (($x306 (= ?x345 ?x345)))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x155 (concat ?x184 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x185 (concat ?x183 (concat ?x190 ?x155))))
 (let ((?x301 (bvadd ?x185 (_ bv4 32))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x307))))
 (let (($x350 (= ?x325 ?x283)))
 (let (($x349 (and (and (and (and $x350 $x306) $x39) $x348) $x336)))
 (let (($x294 (= ind-%var2331X.2.1 ind-%var2331X.2.1)))
 (let (($x305 (= ind-%var2331X.2.0 ind-%var2331X.2.0)))
 (let (($x303 (= ind-%var2331X.0 ind-%var2331X.0)))
 (let (($x288 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0)))
 (let (($x338 (and (and (and (and $x288 $x303) $x39) $x305) $x294)))
 (let (($x174 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x304 (and $x174 $x33)))
 (let (($x387 (and (and $x304 $x338) $x349)))
 (let (($x223 (or (or $x387 $x383) $x147)))
 (let (($x38 (= $x223 true)))
 (let (($x238 (= $x38 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x125 (concat ?x273 (concat ?x46 ?x227)))))
 (let (($x13 (= ?x44 input.dst.llvm-%l)))
 (let (($x55 (= $x13 true)))
 (let (($x231 (= $x55 true)))
 (let (($x286 (= (bvand ?x283 (_ bv4294967288 32)) ?x283)))
 (let (($x259 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x292 (and $x259 $x286)))
 (let (($x272 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x255 (and true $x272)))
 (let (($x276 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv4 32))) (bvult ?x68 (bvsub ?x68 (_ bv4 32))))))
 (let (($x9 (and (and (and $x276 $x255) $x259) $x292)))
 (let (($x351 (= true $x9)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x285 (=> $x5 $x351)))
 (let (($x245 (= input.dst.llvm-%l ?x44)))
 (let ((?x252 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x252)))
 (let ((?x248 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x248)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x258 $x246)))
 (let (($x266 (and $x242 $x240)))
 (let (($x225 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x225 $x266)))
 (let (($x241 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x253 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x195 $x241)))))))
 (let (($x262 (and $x253 $x243)))
 (let (($x270 (and $x262 $x245)))
 (let (($x122 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x260 (and $x122 $x270)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x207))))
 (let (($x222 (= input.spec-%var-l-0.2.1.2.0 ?x230)))
 (let (($x202 (and $x222 true)))
 (let (($x200 (=> $x33 $x202)))
 (let (($x182 (= (_ bv0 32) ?x185)))
 (let ((?x206 (ite $x182 (_ bv0 32) (_ bv1 32))))
 (let (($x221 (bvuge ?x206 (_ bv1 32))))
 (let (($x216 (= $x33 $x221)))
 (let (($x61 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x64 (=> $x61 $x39)))
 (let (($x208 (= ?x206 (_ bv0 32))))
 (let (($x217 (= $x61 $x208)))
 (let (($x220 (and $x217 $x64)))
 (let (($x210 (and $x220 $x216)))
 (let (($x196 (and $x210 $x200)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x142)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x172)))
 (let (($x198 (= input.spec-%var-l-0.2.0 ?x191)))
 (let (($x92 (and $x198 $x196)))
 (let (($x234 (=> $x174 $x92)))
 (let ((?x126 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x126 (_ bv1 32))))
 (let (($x153 (= $x174 $x154)))
 (let (($x170 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x135 (=> $x170 $x39)))
 (let (($x143 (= ?x126 (_ bv0 32))))
 (let (($x144 (= $x170 $x143)))
 (let (($x176 (and $x144 $x135)))
 (let (($x156 (and $x176 $x153)))
 (let (($x214 (and $x156 $x234)))
 (let (($x281 (and $x214 $x260)))
 (let (($x289 (and $x281 $x285)))
 (let (($x293 (= $x289 true)))
 (let (($x340 (= $x293 true)))
 (let (($x296 (= $x340 true)))
 (let (($x164 (= $x5 true)))
 (let (($x130 (= $x164 true)))
 (let (($x165 (= $x130 true)))
 (let (($x178 (= $x122 true)))
 (let (($x166 (= $x178 true)))
 (let (($x167 (= $x166 true)))
 (let (($x141 (and $x167 $x165)))
 (let (($x297 (and $x141 $x296)))
 (let (($x249 (and $x297 $x231)))
 (let (($x48 (and $x170 $x249)))
 (let (($x352 (and $x39 $x48)))
 (let (($x129 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x160 (and $x129 true)))
 (let (($x132 (=> $x76 $x160)))
 (let (($x149 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x140 (= $x76 $x149)))
 (let (($x70 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x74 (=> $x70 $x39)))
 (let (($x136 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x146 (= $x70 $x136)))
 (let (($x148 (and $x146 $x74)))
 (let (($x138 (and $x148 $x140)))
 (let (($x161 (and $x138 $x132)))
 (let (($x133 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x162 (and $x133 $x161)))
 (let (($x131 (=> $x33 $x162)))
 (let (($x127 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x128 (= $x33 $x127)))
 (let (($x121 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x123 (= $x61 $x121)))
 (let (($x124 (and $x123 $x64)))
 (let (($x119 (and $x124 $x128)))
 (let (($x180 (and $x119 $x131)))
 (let (($x295 (and $x180 $x352)))
 (let (($x111 (=> $x76 true)))
 (let (($x110 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x98 (= $x76 $x110)))
 (let (($x107 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x109 (= $x70 $x107)))
 (let (($x95 (and $x109 $x74)))
 (let (($x108 (and $x95 $x98)))
 (let (($x112 (and $x108 $x111)))
 (let (($x105 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x113 (and $x105 $x112)))
 (let (($x114 (=> $x33 $x113)))
 (let (($x102 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x103 (= $x33 $x102)))
 (let (($x99 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x101 (= $x61 $x99)))
 (let (($x96 (and $x101 $x64)))
 (let (($x104 (and $x96 $x103)))
 (let (($x115 (and $x104 $x114)))
 (let (($x90 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x116 (and $x90 $x115)))
 (let (($x299 (and $x116 $x295)))
 (let (($x82 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x83 (and $x82 true)))
 (let (($x84 (=> $x76 $x83)))
 (let (($x77 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x78 (= $x76 $x77)))
 (let (($x72 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x73 (= $x70 $x72)))
 (let (($x75 (and $x73 $x74)))
 (let (($x79 (and $x75 $x78)))
 (let (($x85 (and $x79 $x84)))
 (let (($x18 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x86 (and $x18 $x85)))
 (let (($x87 (=> $x33 $x86)))
 (let (($x51 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x14 (= $x33 $x51)))
 (let (($x57 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x31 (= $x61 $x57)))
 (let (($x56 (and $x31 $x64)))
 (let (($x59 (and $x56 $x14)))
 (let (($x88 (and $x59 $x87)))
 (let (($x287 (and $x88 $x299)))
 (let (($x25 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x353 (and $x25 $x287)))
 (let (($x50 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x30 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x50)))))))
 (let (($x49 (=> (and $x5 (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x67 $x50)))))))
 (let (($x298 (and $x49 $x353)))
 (let (($x265 (=> $x298 $x238)))
 (not $x265)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var2481X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var2481X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2481X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2481X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2478X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2478X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2478X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var2475X () (_ BitVec 32))
(declare-fun ind-%var2475X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2475X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2475X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2472X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2472X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2472X.0 () (_ BitVec 32))
(declare-fun ind-%var2469X () (_ BitVec 32))
(declare-fun ind-%var2466X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2466X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2466X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x459 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2481X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2481X (_ bv4 32))))))
 (let ((?x420 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2481X (_ bv4 32)) (_ bv2 32))) ?x459)))
 (let ((?x455 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2481X (_ bv4 32)) (_ bv3 32))) ?x420)))
 (let (($x413 (= ind-%var2481X.2.1 ?x455)))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd ind-%var2481X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2481X))))
 (let ((?x432 (concat (select input.dst.llvm-mem (bvadd ind-%var2481X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2481X (_ bv2 32))) ?x405))))
 (let (($x418 (= ind-%var2481X.2.0 ?x432)))
 (let (($x56 (= false false)))
 (let (($x65 (= (_ bv0 32) ind-%var2481X)))
 (let ((?x24 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x454 (= ind-%var2481X.0 ?x24)))
 (let (($x396 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x223 (and (and (and (and $x396 $x454) $x56) $x418) $x413)))
 (let (($x406 (= ind-%var2478X.2.1 ind-%var2478X.2.1)))
 (let (($x429 (= ind-%var2478X.2.0 ind-%var2478X.2.0)))
 (let (($x392 (= ind-%var2478X.0 ind-%var2478X.0)))
 (let (($x354 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0)))
 (let (($x408 (and (and (and (and $x354 $x392) $x56) $x429) $x406)))
 (let (($x78 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x14 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x346 (and $x14 $x78)))
 (let (($x238 (and (and $x346 $x408) $x223)))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2475X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2475X (_ bv4 32))))))
 (let ((?x428 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2475X (_ bv4 32)) (_ bv2 32))) ?x367)))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2475X (_ bv4 32)) (_ bv3 32))) ?x428)))
 (let (($x137 (= ind-%var2475X.2.1 ?x393)))
 (let ((?x435 (concat (select input.dst.llvm-mem (bvadd ind-%var2475X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2475X))))
 (let ((?x404 (concat (select input.dst.llvm-mem (bvadd ind-%var2475X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2475X (_ bv2 32))) ?x435))))
 (let (($x27 (= ind-%var2475X.2.0 ?x404)))
 (let (($x391 (= (_ bv0 32) ind-%var2475X)))
 (let ((?x35 (ite $x391 (_ bv0 32) (_ bv1 32))))
 (let (($x370 (= ind-%var2475X.0 ?x35)))
 (let (($x211 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x395 (and (and (and (and $x211 $x370) $x56) $x27) $x137)))
 (let (($x390 (= ind-%var2472X.2.1 ind-%var2472X.2.1)))
 (let (($x382 (= ind-%var2472X.2.0 ind-%var2472X.2.0)))
 (let (($x388 (and (and (and $x354 (= ind-%var2472X.0 ind-%var2472X.0)) $x56) $x382)))
 (let (($x426 (and $x388 $x390)))
 (let (($x399 (and (and $x346 $x426) $x395)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2469X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2469X (_ bv4 32))))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2469X (_ bv4 32)) (_ bv2 32))) ?x313)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2469X (_ bv4 32)) (_ bv3 32))) ?x317)))
 (let (($x336 (= ?x343 ?x343)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ind-%var2469X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2469X))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ind-%var2469X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2469X (_ bv2 32))) ?x310))))
 (let (($x400 (= ?x348 ?x348)))
 (let (($x364 (= (_ bv0 32) ind-%var2469X)))
 (let ((?x344 (ite $x364 (_ bv0 32) (_ bv1 32))))
 (let (($x300 (= ?x344 ?x344)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x184 (concat ?x181 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x206 (concat ?x182 (concat ?x155 ?x184))))
 (let ((?x337 (bvadd ?x206 (_ bv4 32))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x337 (_ bv1 32))) (select input.dst.llvm-mem ?x337))))
 (let ((?x384 (concat (select input.dst.llvm-mem (bvadd ?x337 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x337 (_ bv2 32))) ?x333))))
 (let (($x345 (= ?x384 input.dst.llvm-%l)))
 (let (($x375 (and (and (and (and $x345 $x300) $x56) $x400) $x336)))
 (let (($x338 (= ind-%var2466X.2.1 ind-%var2466X.2.1)))
 (let (($x357 (= ind-%var2466X.2.0 ind-%var2466X.2.0)))
 (let (($x305 (= ind-%var2466X.0 ind-%var2466X.0)))
 (let (($x308 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0)))
 (let (($x342 (and (and (and (and $x308 $x305) $x56) $x357) $x338)))
 (let (($x153 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x331 (and $x153 $x14)))
 (let (($x378 (and (and $x331 $x342) $x375)))
 (let (($x19 (or (or $x378 $x399) $x238)))
 (let (($x60 (= $x19 true)))
 (let (($x257 (= $x60 true)))
 (let ((?x224 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x281 (concat ?x260 (concat ?x44 (concat ?x227 ?x224)))))
 (let (($x48 (= ?x281 input.dst.llvm-%l)))
 (let (($x352 (= $x48 true)))
 (let (($x295 (= $x352 true)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x271 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x11 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x28 (bvadd ?x11 (_ bv3 32))))
 (let ((?x286 (concat (select input.dst.llvm-mem ?x28) (concat ?x277 ?x271))))
 (let (($x9 (= (bvand ?x286 (_ bv4294967288 32)) ?x286)))
 (let (($x263 (= (bvand ?x11 (_ bv4294967292 32)) ?x11)))
 (let (($x351 (and $x263 $x9)))
 (let (($x280 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x259 (and true $x280)))
 (let (($x279 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x11 (bvsub ?x11 (_ bv4 32))) (bvult ?x11 (bvsub ?x11 (_ bv4 32))))))
 (let (($x293 (and (and (and $x279 $x259) $x263) $x351)))
 (let (($x340 (= true $x293)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x296 (=> $x5 $x340)))
 (let (($x247 (= input.dst.llvm-%l ?x281)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x262 (= (_ bv0 32) ?x243)))
 (let ((?x252 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x240 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x252)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (and $x242 $x240)))
 (let (($x45 (and $x266 $x262)))
 (let (($x195 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x195 $x45)))
 (let (($x212 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x246 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x212)))))))
 (let (($x256 (and $x246 $x125)))
 (let (($x274 (and $x256 $x247)))
 (let (($x164 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x264 (and $x164 $x274)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x173))))
 (let (($x200 (= input.spec-%var-l-0.2.1.2.0 ?x202)))
 (let (($x196 (and $x200 true)))
 (let (($x92 (=> $x14 $x196)))
 (let (($x208 (= (_ bv0 32) ?x206)))
 (let ((?x217 (ite $x208 (_ bv0 32) (_ bv1 32))))
 (let (($x210 (bvuge ?x217 (_ bv1 32))))
 (let (($x199 (= $x14 $x210)))
 (let (($x57 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x33 (=> $x57 $x56)))
 (let (($x220 (= ?x217 (_ bv0 32))))
 (let (($x221 (= $x57 $x220)))
 (let (($x216 (and $x221 $x33)))
 (let (($x233 (and $x216 $x199)))
 (let (($x234 (and $x233 $x92)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x151)))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x172)))
 (let (($x175 (= input.spec-%var-l-0.2.0 ?x193)))
 (let (($x214 (and $x175 $x234)))
 (let (($x237 (=> $x153 $x214)))
 (let ((?x144 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x144 (_ bv1 32))))
 (let (($x158 (= $x153 $x156)))
 (let (($x178 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x174 (=> $x178 $x56)))
 (let (($x135 (= ?x144 (_ bv0 32))))
 (let (($x176 (= $x178 $x135)))
 (let (($x154 (and $x176 $x174)))
 (let (($x163 (and $x154 $x158)))
 (let (($x236 (and $x163 $x237)))
 (let (($x278 (and $x236 $x264)))
 (let (($x297 (and $x278 $x296)))
 (let (($x13 (= $x297 true)))
 (let (($x55 (= $x13 true)))
 (let (($x231 (= $x55 true)))
 (let (($x152 (= $x7 true)))
 (let (($x170 (= $x152 true)))
 (let (($x126 (= $x170 true)))
 (let (($x130 (= $x164 true)))
 (let (($x165 (= $x130 true)))
 (let (($x141 (= $x165 true)))
 (let (($x143 (and $x141 $x126)))
 (let (($x249 (and $x143 $x231)))
 (let (($x299 (and $x249 $x295)))
 (let (($x287 (and $x178 $x299)))
 (let (($x353 (and $x56 $x287)))
 (let (($x132 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x161 (and $x132 true)))
 (let (($x162 (=> $x78 $x161)))
 (let (($x138 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x159 (= $x78 $x138)))
 (let (($x72 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x76 (=> $x72 $x56)))
 (let (($x148 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x149 (= $x72 $x148)))
 (let (($x140 (and $x149 $x76)))
 (let (($x129 (and $x140 $x159)))
 (let (($x131 (and $x129 $x162)))
 (let (($x136 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x180 (and $x136 $x131)))
 (let (($x169 (=> $x14 $x180)))
 (let (($x119 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x120 (= $x14 $x119)))
 (let (($x124 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x127 (= $x57 $x124)))
 (let (($x128 (and $x127 $x33)))
 (let (($x133 (and $x128 $x120)))
 (let (($x177 (and $x133 $x169)))
 (let (($x298 (and $x177 $x353)))
 (let (($x113 (=> $x78 true)))
 (let (($x108 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x111 (= $x78 $x108)))
 (let (($x95 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x110 (= $x72 $x95)))
 (let (($x98 (and $x110 $x76)))
 (let (($x112 (and $x98 $x111)))
 (let (($x114 (and $x112 $x113)))
 (let (($x107 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x115 (and $x107 $x114)))
 (let (($x116 (=> $x14 $x115)))
 (let (($x104 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x100 (= $x14 $x104)))
 (let (($x96 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x102 (= $x57 $x96)))
 (let (($x103 (and $x102 $x33)))
 (let (($x105 (and $x103 $x100)))
 (let (($x117 (and $x105 $x116)))
 (let (($x99 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x121 (and $x99 $x117)))
 (let (($x304 (and $x121 $x298)))
 (let (($x84 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x85 (and $x84 true)))
 (let (($x86 (=> $x78 $x85)))
 (let (($x79 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x80 (= $x78 $x79)))
 (let (($x74 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x75 (= $x72 $x74)))
 (let (($x77 (and $x75 $x76)))
 (let (($x81 (and $x77 $x80)))
 (let (($x87 (and $x81 $x86)))
 (let (($x70 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x88 (and $x70 $x87)))
 (let (($x89 (=> $x14 $x88)))
 (let (($x59 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x62 (= $x14 $x59)))
 (let (($x39 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x64 (= $x57 $x39)))
 (let (($x51 (and $x64 $x33)))
 (let (($x16 (and $x51 $x62)))
 (let (($x90 (and $x16 $x89)))
 (let (($x291 (and $x90 $x304)))
 (let (($x61 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x323 (and $x61 $x291)))
 (let (($x58 (bvugt ?x11 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x25 (=> (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x58)))))))
 (let (($x54 (=> (and $x5 (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x41 $x58)))))))
 (let (($x288 (and $x54 $x323)))
 (let (($x269 (=> $x288 $x257)))
 (not $x269)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun ind-%var2481X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun ind-%var2481X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2481X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2481X.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2478X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2478X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2478X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun ind-%var2475X () (_ BitVec 32))
(declare-fun ind-%var2475X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2475X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2475X.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun ind-%var2472X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2472X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2472X.0 () (_ BitVec 32))
(declare-fun ind-%var2469X () (_ BitVec 32))
(declare-fun ind-%var2466X.2.1 () (_ BitVec 32))
(declare-fun ind-%var2466X.2.0 () (_ BitVec 32))
(declare-fun ind-%var2466X.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x459 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2481X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2481X (_ bv4 32))))))
 (let ((?x420 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2481X (_ bv4 32)) (_ bv2 32))) ?x459)))
 (let ((?x455 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2481X (_ bv4 32)) (_ bv3 32))) ?x420)))
 (let (($x413 (= ind-%var2481X.2.1 ?x455)))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd ind-%var2481X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2481X))))
 (let ((?x432 (concat (select input.dst.llvm-mem (bvadd ind-%var2481X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2481X (_ bv2 32))) ?x405))))
 (let (($x418 (= ind-%var2481X.2.0 ?x432)))
 (let (($x56 (= false false)))
 (let (($x65 (= (_ bv0 32) ind-%var2481X)))
 (let ((?x24 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x454 (= ind-%var2481X.0 ?x24)))
 (let (($x396 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x223 (and (and (and (and $x396 $x454) $x56) $x418) $x413)))
 (let (($x406 (= ind-%var2478X.2.1 ind-%var2478X.2.1)))
 (let (($x429 (= ind-%var2478X.2.0 ind-%var2478X.2.0)))
 (let (($x392 (= ind-%var2478X.0 ind-%var2478X.0)))
 (let (($x354 (= input.spec-%var-l-0.2.1.2.1.2.1 input.spec-%var-l-0)))
 (let (($x408 (and (and (and (and $x354 $x392) $x56) $x429) $x406)))
 (let (($x78 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x14 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x346 (and $x14 $x78)))
 (let (($x238 (and (and $x346 $x408) $x223)))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2475X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2475X (_ bv4 32))))))
 (let ((?x428 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2475X (_ bv4 32)) (_ bv2 32))) ?x367)))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2475X (_ bv4 32)) (_ bv3 32))) ?x428)))
 (let (($x137 (= ind-%var2475X.2.1 ?x393)))
 (let ((?x435 (concat (select input.dst.llvm-mem (bvadd ind-%var2475X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2475X))))
 (let ((?x404 (concat (select input.dst.llvm-mem (bvadd ind-%var2475X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2475X (_ bv2 32))) ?x435))))
 (let (($x27 (= ind-%var2475X.2.0 ?x404)))
 (let (($x391 (= (_ bv0 32) ind-%var2475X)))
 (let ((?x35 (ite $x391 (_ bv0 32) (_ bv1 32))))
 (let (($x370 (= ind-%var2475X.0 ?x35)))
 (let (($x211 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 input.dst.llvm-%l)))
 (let (($x395 (and (and (and (and $x211 $x370) $x56) $x27) $x137)))
 (let (($x390 (= ind-%var2472X.2.1 ind-%var2472X.2.1)))
 (let (($x382 (= ind-%var2472X.2.0 ind-%var2472X.2.0)))
 (let (($x388 (and (and (and $x354 (= ind-%var2472X.0 ind-%var2472X.0)) $x56) $x382)))
 (let (($x426 (and $x388 $x390)))
 (let (($x399 (and (and $x346 $x426) $x395)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2469X (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ind-%var2469X (_ bv4 32))))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2469X (_ bv4 32)) (_ bv2 32))) ?x313)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd (bvadd ind-%var2469X (_ bv4 32)) (_ bv3 32))) ?x317)))
 (let (($x336 (= ?x343 ?x343)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ind-%var2469X (_ bv1 32))) (select input.dst.llvm-mem ind-%var2469X))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ind-%var2469X (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ind-%var2469X (_ bv2 32))) ?x310))))
 (let (($x400 (= ?x348 ?x348)))
 (let (($x364 (= (_ bv0 32) ind-%var2469X)))
 (let ((?x344 (ite $x364 (_ bv0 32) (_ bv1 32))))
 (let (($x300 (= ?x344 ?x344)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x184 (concat ?x181 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x206 (concat ?x182 (concat ?x155 ?x184))))
 (let ((?x337 (bvadd ?x206 (_ bv4 32))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x337 (_ bv1 32))) (select input.dst.llvm-mem ?x337))))
 (let ((?x384 (concat (select input.dst.llvm-mem (bvadd ?x337 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x337 (_ bv2 32))) ?x333))))
 (let (($x345 (= ?x384 input.dst.llvm-%l)))
 (let (($x375 (and (and (and (and $x345 $x300) $x56) $x400) $x336)))
 (let (($x338 (= ind-%var2466X.2.1 ind-%var2466X.2.1)))
 (let (($x357 (= ind-%var2466X.2.0 ind-%var2466X.2.0)))
 (let (($x305 (= ind-%var2466X.0 ind-%var2466X.0)))
 (let (($x308 (= input.spec-%var-l-0.2.1.2.1 input.spec-%var-l-0)))
 (let (($x342 (and (and (and (and $x308 $x305) $x56) $x357) $x338)))
 (let (($x153 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x331 (and $x153 $x14)))
 (let (($x378 (and (and $x331 $x342) $x375)))
 (let (($x19 (or (or $x378 $x399) $x238)))
 (let (($x60 (= $x19 true)))
 (let (($x257 (= $x60 true)))
 (let ((?x224 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x281 (concat ?x260 (concat ?x44 (concat ?x227 ?x224)))))
 (let (($x48 (= ?x281 input.dst.llvm-%l)))
 (let (($x352 (= $x48 true)))
 (let (($x295 (= $x352 true)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv1 32)))))
 (let ((?x271 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%l)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%l) (_ bv2 32)))))
 (let ((?x11 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x28 (bvadd ?x11 (_ bv3 32))))
 (let ((?x286 (concat (select input.dst.llvm-mem ?x28) (concat ?x277 ?x271))))
 (let (($x9 (= (bvand ?x286 (_ bv4294967288 32)) ?x286)))
 (let (($x263 (= (bvand ?x11 (_ bv4294967292 32)) ?x11)))
 (let (($x351 (and $x263 $x9)))
 (let (($x280 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x259 (and true $x280)))
 (let (($x279 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x11 (bvsub ?x11 (_ bv4 32))) (bvult ?x11 (bvsub ?x11 (_ bv4 32))))))
 (let (($x293 (and (and (and $x279 $x259) $x263) $x351)))
 (let (($x340 (= true $x293)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x5 (not $x7)))
 (let (($x296 (=> $x5 $x340)))
 (let (($x247 (= input.dst.llvm-%l ?x281)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x262 (= (_ bv0 32) ?x243)))
 (let ((?x252 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x240 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x252)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (and $x242 $x240)))
 (let (($x45 (and $x266 $x262)))
 (let (($x195 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x195 $x45)))
 (let (($x212 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x246 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x212)))))))
 (let (($x256 (and $x246 $x125)))
 (let (($x274 (and $x256 $x247)))
 (let (($x164 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x264 (and $x164 $x274)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x173))))
 (let (($x200 (= input.spec-%var-l-0.2.1.2.0 ?x202)))
 (let (($x196 (and $x200 true)))
 (let (($x92 (=> $x14 $x196)))
 (let (($x208 (= (_ bv0 32) ?x206)))
 (let ((?x217 (ite $x208 (_ bv0 32) (_ bv1 32))))
 (let (($x210 (bvuge ?x217 (_ bv1 32))))
 (let (($x199 (= $x14 $x210)))
 (let (($x57 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x33 (=> $x57 $x56)))
 (let (($x220 (= ?x217 (_ bv0 32))))
 (let (($x221 (= $x57 $x220)))
 (let (($x216 (and $x221 $x33)))
 (let (($x233 (and $x216 $x199)))
 (let (($x234 (and $x233 $x92)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x151)))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x172)))
 (let (($x175 (= input.spec-%var-l-0.2.0 ?x193)))
 (let (($x214 (and $x175 $x234)))
 (let (($x237 (=> $x153 $x214)))
 (let ((?x144 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x144 (_ bv1 32))))
 (let (($x158 (= $x153 $x156)))
 (let (($x178 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x174 (=> $x178 $x56)))
 (let (($x135 (= ?x144 (_ bv0 32))))
 (let (($x176 (= $x178 $x135)))
 (let (($x154 (and $x176 $x174)))
 (let (($x163 (and $x154 $x158)))
 (let (($x236 (and $x163 $x237)))
 (let (($x278 (and $x236 $x264)))
 (let (($x297 (and $x278 $x296)))
 (let (($x13 (= $x297 true)))
 (let (($x55 (= $x13 true)))
 (let (($x231 (= $x55 true)))
 (let (($x152 (= $x7 true)))
 (let (($x170 (= $x152 true)))
 (let (($x126 (= $x170 true)))
 (let (($x130 (= $x164 true)))
 (let (($x165 (= $x130 true)))
 (let (($x141 (= $x165 true)))
 (let (($x143 (and $x141 $x126)))
 (let (($x249 (and $x143 $x231)))
 (let (($x299 (and $x249 $x295)))
 (let (($x287 (and $x178 $x299)))
 (let (($x353 (and $x56 $x287)))
 (let (($x132 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0)))
 (let (($x161 (and $x132 true)))
 (let (($x162 (=> $x78 $x161)))
 (let (($x138 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x159 (= $x78 $x138)))
 (let (($x72 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x76 (=> $x72 $x56)))
 (let (($x148 (= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x149 (= $x72 $x148)))
 (let (($x140 (and $x149 $x76)))
 (let (($x129 (and $x140 $x159)))
 (let (($x131 (and $x129 $x162)))
 (let (($x136 (= input.spec-%var-l-0.2.1.2.0 input.spec-%tmpvar-0.L1%9%bbentry.2.0)))
 (let (($x180 (and $x136 $x131)))
 (let (($x169 (=> $x14 $x180)))
 (let (($x119 (bvuge input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x120 (= $x14 $x119)))
 (let (($x124 (= input.spec-%tmpvar-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x127 (= $x57 $x124)))
 (let (($x128 (and $x127 $x33)))
 (let (($x133 (and $x128 $x120)))
 (let (($x177 (and $x133 $x169)))
 (let (($x298 (and $x177 $x353)))
 (let (($x113 (=> $x78 true)))
 (let (($x108 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x111 (= $x78 $x108)))
 (let (($x95 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x110 (= $x72 $x95)))
 (let (($x98 (and $x110 $x76)))
 (let (($x112 (and $x98 $x111)))
 (let (($x114 (and $x112 $x113)))
 (let (($x107 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x115 (and $x107 $x114)))
 (let (($x116 (=> $x14 $x115)))
 (let (($x104 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x100 (= $x14 $x104)))
 (let (($x96 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x102 (= $x57 $x96)))
 (let (($x103 (and $x102 $x33)))
 (let (($x105 (and $x103 $x100)))
 (let (($x117 (and $x105 $x116)))
 (let (($x99 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x121 (and $x99 $x117)))
 (let (($x304 (and $x121 $x298)))
 (let (($x84 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x85 (and $x84 true)))
 (let (($x86 (=> $x78 $x85)))
 (let (($x79 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x80 (= $x78 $x79)))
 (let (($x74 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x75 (= $x72 $x74)))
 (let (($x77 (and $x75 $x76)))
 (let (($x81 (and $x77 $x80)))
 (let (($x87 (and $x81 $x86)))
 (let (($x70 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x88 (and $x70 $x87)))
 (let (($x89 (=> $x14 $x88)))
 (let (($x59 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x62 (= $x14 $x59)))
 (let (($x39 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x64 (= $x57 $x39)))
 (let (($x51 (and $x64 $x33)))
 (let (($x16 (and $x51 $x62)))
 (let (($x90 (and $x16 $x89)))
 (let (($x291 (and $x90 $x304)))
 (let (($x61 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x323 (and $x61 $x291)))
 (let (($x58 (bvugt ?x11 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x25 (=> (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x58)))))))
 (let (($x54 (=> (and $x5 (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x41 $x58)))))))
 (let (($x288 (and $x54 $x323)))
 (let (($x269 (=> $x288 $x257)))
 (not $x269)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= ind-%var2481X #b10000000000000000000000000000000)
(= ind-%var2481X.2.1 #b10000000000000000000000000000000)
(= ind-%var2481X.2.0 #b10000000000000000000000000000000)
(= ind-%var2481X.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= ind-%var2475X #b10000000000000000000000000000000)
(= ind-%var2475X.2.1 #b10000000000000000000000000000000)
(= ind-%var2475X.2.0 #b10000000000000000000000000000000)
(= ind-%var2475X.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-l-0.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun ind-%var2481X () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2481X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2481X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2481X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2475X () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2475X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2475X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2475X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00010003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2466X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2469X () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2466X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2472X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2478X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2478X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2466X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2472X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2478X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2472X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2475X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2475X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2475X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2481X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2481X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2481X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun ind-%var2481X () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2475X () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2466X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2469X () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2466X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2472X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2478X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2478X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2466X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2472X.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2478X.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun ind-%var2472X.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460780/query
