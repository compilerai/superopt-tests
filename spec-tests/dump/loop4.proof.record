==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= ?x8 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x7 $x6)))
 (let (($x19 (and $x9 $x12)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= ?x8 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x7 $x6)))
 (let (($x19 (and $x9 $x12)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (= true false)))
 (let (($x151 (= $x150 true)))
 (let (($x136 (forall ((input.ind-%var389X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var389X)))
 (=> $x122 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var389X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var388X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var388X)))
 (= $x122 false)))
 ))
 (let (($x137 (and $x126 $x136)))
 (let (($x138 (= $x137 true)))
 (let (($x115 (forall ((input.ind-%var375X (_ BitVec 32)) (input.ind-%var377X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var375X input.ind-%var377X)))
 (let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var375X)))
 (=> (and $x101 $x96) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var375X input.ind-%var377X) (_ bv0 32))))))
 ))
 (let (($x103 (forall ((input.ind-%var375X (_ BitVec 32)) (input.ind-%var376X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var375X)))
 (=> $x101 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var375X input.ind-%var376X) false))))
 ))
 (let (($x89 (forall ((input.ind-%var374X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var374X)))
 (= $x85 false)))
 ))
 (let (($x117 (and (and $x89 $x103) $x115)))
 (let (($x118 (= $x117 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x75 (concat ?x72 (concat ?x68 ?x66)))))
 (let (($x77 (= ?x76 input.dst.llvm-%n)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x59 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x50)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x42 $x29)))
 (let (($x52 (and $x22 $x51)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x38 $x52)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x33)))))))
 (let (($x54 (and $x27 $x53)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x63 (and $x57 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x119 (and $x80 $x118)))
 (let (($x139 (and $x119 $x138)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x140 (and $x17 $x139)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x141 (and $x18 $x140)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x142 (and $x41 $x141)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x143 (and $x44 $x142)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x144 (and $x49 $x143)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x145 (and $x45 $x144)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x146 (and $x47 $x145)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x147 (and $x12 $x146)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x148 (and $x11 $x147)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x149 (and $x21 $x148)))
 (let (($x152 (=> $x149 $x151)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (= true false)))
 (let (($x151 (= $x150 true)))
 (let (($x136 (forall ((input.ind-%var389X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var389X)))
 (=> $x122 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var389X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var388X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var388X)))
 (= $x122 false)))
 ))
 (let (($x137 (and $x126 $x136)))
 (let (($x138 (= $x137 true)))
 (let (($x115 (forall ((input.ind-%var375X (_ BitVec 32)) (input.ind-%var377X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var375X input.ind-%var377X)))
 (let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var375X)))
 (=> (and $x101 $x96) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var375X input.ind-%var377X) (_ bv0 32))))))
 ))
 (let (($x103 (forall ((input.ind-%var375X (_ BitVec 32)) (input.ind-%var376X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var375X)))
 (=> $x101 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var375X input.ind-%var376X) false))))
 ))
 (let (($x89 (forall ((input.ind-%var374X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var374X)))
 (= $x85 false)))
 ))
 (let (($x117 (and (and $x89 $x103) $x115)))
 (let (($x118 (= $x117 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x75 (concat ?x72 (concat ?x68 ?x66)))))
 (let (($x77 (= ?x76 input.dst.llvm-%n)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x59 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x50)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x42 $x29)))
 (let (($x52 (and $x22 $x51)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x38 $x52)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x33)))))))
 (let (($x54 (and $x27 $x53)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x63 (and $x57 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x119 (and $x80 $x118)))
 (let (($x139 (and $x119 $x138)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x140 (and $x17 $x139)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x141 (and $x18 $x140)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x142 (and $x41 $x141)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x143 (and $x44 $x142)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x144 (and $x49 $x143)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x145 (and $x45 $x144)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x146 (and $x47 $x145)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x147 (and $x12 $x146)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x148 (and $x11 $x147)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x149 (and $x21 $x148)))
 (let (($x152 (=> $x149 $x151)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfcbd2113)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x16)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x55 $x52)))
 (let (($x44 (and $x26 $x30)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x33 $x44)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x51)))))))
 (let (($x124 (and $x43 $x39)))
 (let (($x132 (= $x124 true)))
 (let (($x105 (= $x132 true)))
 (let (($x91 (forall ((input.ind-%var431X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var431X)))
 (=> $x148 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var431X) (_ bv0 32)))))
 ))
 (let (($x152 (forall ((input.ind-%var430X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var430X)))
 (= $x148 false)))
 ))
 (let (($x104 (and $x152 $x91)))
 (let (($x129 (= $x104 true)))
 (let (($x141 (forall ((input.ind-%var423X (_ BitVec 32)) (input.ind-%var425X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var423X input.ind-%var425X)))
 (let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var423X)))
 (=> (and $x117 $x113) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var423X input.ind-%var425X) (_ bv0 32))))))
 ))
 (let (($x119 (forall ((input.ind-%var423X (_ BitVec 32)) (input.ind-%var424X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var423X)))
 (=> $x117 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var423X input.ind-%var424X) false))))
 ))
 (let (($x95 (forall ((input.ind-%var422X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var422X)))
 (= $x84 false)))
 ))
 (let (($x143 (and (and $x95 $x119) $x141)))
 (let (($x144 (= $x143 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x71 (concat ?x74 (concat ?x61 ?x59)))))
 (let (($x67 (= input.dst.llvm-%n ?x72)))
 (let (($x69 (and (and (and $x43 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x39) $x67)))
 (let (($x73 (= $x69 true)))
 (let (($x76 (= $x73 true)))
 (let (($x77 (= $x76 true)))
 (let (($x145 (and $x77 $x144)))
 (let (($x81 (and $x145 $x129)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x83 (and $x25 $x81)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x107 (and $x41 $x83)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x94 (and $x45 $x107)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x87 (and $x29 $x94)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x98 (and $x40 $x87)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x120 (and $x12 $x98)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x121 (and $x14 $x120)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x110 (and $x20 $x121)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x92 (and $x10 $x110)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x99 (and $x31 $x92)))
 (let (($x106 (=> $x99 $x105)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x16)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x55 $x52)))
 (let (($x44 (and $x26 $x30)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x33 $x44)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x51)))))))
 (let (($x124 (and $x43 $x39)))
 (let (($x132 (= $x124 true)))
 (let (($x105 (= $x132 true)))
 (let (($x91 (forall ((input.ind-%var431X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var431X)))
 (=> $x148 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var431X) (_ bv0 32)))))
 ))
 (let (($x152 (forall ((input.ind-%var430X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var430X)))
 (= $x148 false)))
 ))
 (let (($x104 (and $x152 $x91)))
 (let (($x129 (= $x104 true)))
 (let (($x141 (forall ((input.ind-%var423X (_ BitVec 32)) (input.ind-%var425X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var423X input.ind-%var425X)))
 (let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var423X)))
 (=> (and $x117 $x113) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var423X input.ind-%var425X) (_ bv0 32))))))
 ))
 (let (($x119 (forall ((input.ind-%var423X (_ BitVec 32)) (input.ind-%var424X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var423X)))
 (=> $x117 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var423X input.ind-%var424X) false))))
 ))
 (let (($x95 (forall ((input.ind-%var422X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var422X)))
 (= $x84 false)))
 ))
 (let (($x143 (and (and $x95 $x119) $x141)))
 (let (($x144 (= $x143 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x71 (concat ?x74 (concat ?x61 ?x59)))))
 (let (($x67 (= input.dst.llvm-%n ?x72)))
 (let (($x69 (and (and (and $x43 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x39) $x67)))
 (let (($x73 (= $x69 true)))
 (let (($x76 (= $x73 true)))
 (let (($x77 (= $x76 true)))
 (let (($x145 (and $x77 $x144)))
 (let (($x81 (and $x145 $x129)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x83 (and $x25 $x81)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x107 (and $x41 $x83)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x94 (and $x45 $x107)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x87 (and $x29 $x94)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x98 (and $x40 $x87)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x120 (and $x12 $x98)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x121 (and $x14 $x120)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x110 (and $x20 $x121)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x92 (and $x10 $x110)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x99 (and $x31 $x92)))
 (let (($x106 (=> $x99 $x105)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x137 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x36 (= $x137 true)))
 (let (($x79 (forall ((input.ind-%var449X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var449X)))
 (=> $x106 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var449X) (_ bv0 32)))))
 ))
 (let (($x149 (forall ((input.ind-%var448X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var448X)))
 (= $x106 false)))
 ))
 (let (($x88 (and $x149 $x79)))
 (let (($x103 (= $x88 true)))
 (let (($x121 (forall ((input.ind-%var441X (_ BitVec 32)) (input.ind-%var443X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var441X input.ind-%var443X)))
 (let (($x152 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var441X)))
 (=> (and $x152 $x143) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var441X input.ind-%var443X) (_ bv0 32))))))
 ))
 (let (($x109 (forall ((input.ind-%var441X (_ BitVec 32)) (input.ind-%var442X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var441X)))
 (=> $x152 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var441X input.ind-%var442X) false))))
 ))
 (let (($x119 (forall ((input.ind-%var440X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var440X)))
 (= $x117 false)))
 ))
 (let (($x92 (and (and $x119 $x109) $x121)))
 (let (($x99 (= $x92 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x75 (concat ?x61 (concat ?x63 ?x70)))))
 (let (($x67 (= input.dst.llvm-%n ?x72)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x16)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x55 $x52)))
 (let (($x44 (and $x26 $x30)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x33 $x44)))
 (let (($x18 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x22)))))))
 (let (($x76 (and (and (and $x68 $x18) $x39) $x67)))
 (let (($x77 (= $x76 true)))
 (let (($x80 (= $x77 true)))
 (let (($x84 (= $x80 true)))
 (let (($x124 (and $x84 $x99)))
 (let (($x112 (and $x124 $x103)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x146 (and $x50 $x112)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x147 (and $x57 $x146)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x130 (and $x54 $x147)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x136 (and $x19 $x130)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x100 (and $x9 $x136)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x114 (and $x37 $x100)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x150 (and $x17 $x114)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x86 (and $x24 $x150)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x125 (and $x23 $x86)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x126 (and $x35 $x125)))
 (let (($x97 (=> $x126 $x36)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x137 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x36 (= $x137 true)))
 (let (($x79 (forall ((input.ind-%var449X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var449X)))
 (=> $x106 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var449X) (_ bv0 32)))))
 ))
 (let (($x149 (forall ((input.ind-%var448X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var448X)))
 (= $x106 false)))
 ))
 (let (($x88 (and $x149 $x79)))
 (let (($x103 (= $x88 true)))
 (let (($x121 (forall ((input.ind-%var441X (_ BitVec 32)) (input.ind-%var443X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var441X input.ind-%var443X)))
 (let (($x152 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var441X)))
 (=> (and $x152 $x143) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var441X input.ind-%var443X) (_ bv0 32))))))
 ))
 (let (($x109 (forall ((input.ind-%var441X (_ BitVec 32)) (input.ind-%var442X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var441X)))
 (=> $x152 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var441X input.ind-%var442X) false))))
 ))
 (let (($x119 (forall ((input.ind-%var440X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var440X)))
 (= $x117 false)))
 ))
 (let (($x92 (and (and $x119 $x109) $x121)))
 (let (($x99 (= $x92 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x75 (concat ?x61 (concat ?x63 ?x70)))))
 (let (($x67 (= input.dst.llvm-%n ?x72)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x16)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x55 $x52)))
 (let (($x44 (and $x26 $x30)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x33 $x44)))
 (let (($x18 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x22)))))))
 (let (($x76 (and (and (and $x68 $x18) $x39) $x67)))
 (let (($x77 (= $x76 true)))
 (let (($x80 (= $x77 true)))
 (let (($x84 (= $x80 true)))
 (let (($x124 (and $x84 $x99)))
 (let (($x112 (and $x124 $x103)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x146 (and $x50 $x112)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x147 (and $x57 $x146)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x130 (and $x54 $x147)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x136 (and $x19 $x130)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x100 (and $x9 $x136)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x114 (and $x37 $x100)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x150 (and $x17 $x114)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x86 (and $x24 $x150)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x125 (and $x23 $x86)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x126 (and $x35 $x125)))
 (let (($x97 (=> $x126 $x36)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x122)))
 (let (($x138 (= ?x153 input.dst.llvm-%n)))
 (let (($x102 (= $x138 true)))
 (let (($x115 (forall ((input.ind-%var491X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var491X)))
 (=> $x25 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var491X) (_ bv0 32)))))
 ))
 (let (($x101 (forall ((input.ind-%var490X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var490X)))
 (= $x25 false)))
 ))
 (let (($x140 (and $x101 $x115)))
 (let (($x145 (= $x140 true)))
 (let (($x86 (forall ((input.ind-%var483X (_ BitVec 32)) (input.ind-%var485X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var483X input.ind-%var485X)))
 (let (($x135 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var483X)))
 (=> (and $x135 $x99) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var483X input.ind-%var485X) (_ bv0 32))))))
 ))
 (let (($x78 (forall ((input.ind-%var483X (_ BitVec 32)) (input.ind-%var484X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var483X)))
 (=> $x135 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var483X input.ind-%var484X) false))))
 ))
 (let (($x110 (forall ((input.ind-%var482X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var482X)))
 (= $x143 false)))
 ))
 (let (($x126 (and (and $x110 $x78) $x86)))
 (let (($x137 (= $x126 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x72 (concat ?x70 (concat ?x60 ?x75)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x43)))))))
 (let (($x84 (and (and (and $x6 $x49) $x73) $x76)))
 (let (($x116 (= $x84 true)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let (($x36 (and $x118 $x137)))
 (let (($x132 (and $x36 $x145)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x105 (and $x50 $x132)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x129 (and $x45 $x105)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x107 (and $x29 $x129)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x134 (and $x40 $x107)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x148 (and $x12 $x134)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x46 (and $x14 $x148)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x96 (and $x20 $x46)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x91 (and $x10 $x96)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x104 (and $x35 $x91)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x94 (and $x15 $x104)))
 (let (($x128 (=> $x94 $x102)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x122)))
 (let (($x138 (= ?x153 input.dst.llvm-%n)))
 (let (($x102 (= $x138 true)))
 (let (($x115 (forall ((input.ind-%var491X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var491X)))
 (=> $x25 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var491X) (_ bv0 32)))))
 ))
 (let (($x101 (forall ((input.ind-%var490X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var490X)))
 (= $x25 false)))
 ))
 (let (($x140 (and $x101 $x115)))
 (let (($x145 (= $x140 true)))
 (let (($x86 (forall ((input.ind-%var483X (_ BitVec 32)) (input.ind-%var485X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var483X input.ind-%var485X)))
 (let (($x135 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var483X)))
 (=> (and $x135 $x99) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var483X input.ind-%var485X) (_ bv0 32))))))
 ))
 (let (($x78 (forall ((input.ind-%var483X (_ BitVec 32)) (input.ind-%var484X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var483X)))
 (=> $x135 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var483X input.ind-%var484X) false))))
 ))
 (let (($x110 (forall ((input.ind-%var482X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var482X)))
 (= $x143 false)))
 ))
 (let (($x126 (and (and $x110 $x78) $x86)))
 (let (($x137 (= $x126 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x72 (concat ?x70 (concat ?x60 ?x75)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x43)))))))
 (let (($x84 (and (and (and $x6 $x49) $x73) $x76)))
 (let (($x116 (= $x84 true)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let (($x36 (and $x118 $x137)))
 (let (($x132 (and $x36 $x145)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x105 (and $x50 $x132)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x129 (and $x45 $x105)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x107 (and $x29 $x129)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x134 (and $x40 $x107)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x148 (and $x12 $x134)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x46 (and $x14 $x148)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x96 (and $x20 $x46)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x91 (and $x10 $x96)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x104 (and $x35 $x91)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x94 (and $x15 $x104)))
 (let (($x128 (=> $x94 $x102)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x103 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x103)))
 (let (($x144 (= ?x136 input.spec-%var-n-1)))
 (let (($x108 (= $x144 true)))
 (let (($x83 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var509X)))
 (=> $x138 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var509X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var508X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var508X)))
 (= $x138 false)))
 ))
 (let (($x119 (and $x42 $x83)))
 (let (($x141 (= $x119 true)))
 (let (($x96 (forall ((input.ind-%var501X (_ BitVec 32)) (input.ind-%var503X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var501X input.ind-%var503X)))
 (let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var501X)))
 (=> (and $x101 $x126) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var501X input.ind-%var503X) (_ bv0 32))))))
 ))
 (let (($x89 (forall ((input.ind-%var501X (_ BitVec 32)) (input.ind-%var502X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var501X)))
 (=> $x101 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var501X input.ind-%var502X) false))))
 ))
 (let (($x78 (forall ((input.ind-%var500X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var500X)))
 (= $x135 false)))
 ))
 (let (($x104 (and (and $x78 $x89) $x96)))
 (let (($x94 (= $x104 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x64 (concat ?x60 (concat ?x71 ?x59)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x68)))))))
 (let (($x117 (and (and (and $x77 $x69) $x73) $x76)))
 (let (($x118 (= $x117 true)))
 (let (($x152 (= $x118 true)))
 (let (($x143 (= $x152 true)))
 (let (($x85 (and $x143 $x94)))
 (let (($x123 (and $x85 $x141)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x121 (and $x48 $x123)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x106 (and $x54 $x121)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x97 (and $x19 $x106)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x127 (and $x9 $x97)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x112 (and $x37 $x127)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x130 (and $x17 $x112)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x87 (and $x24 $x130)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x58 (and $x23 $x87)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x28 (and $x41 $x58)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x90 (and $x7 $x28)))
 (let (($x131 (=> $x90 $x108)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x103 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x103)))
 (let (($x144 (= ?x136 input.spec-%var-n-1)))
 (let (($x108 (= $x144 true)))
 (let (($x83 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var509X)))
 (=> $x138 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var509X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var508X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var508X)))
 (= $x138 false)))
 ))
 (let (($x119 (and $x42 $x83)))
 (let (($x141 (= $x119 true)))
 (let (($x96 (forall ((input.ind-%var501X (_ BitVec 32)) (input.ind-%var503X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var501X input.ind-%var503X)))
 (let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var501X)))
 (=> (and $x101 $x126) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var501X input.ind-%var503X) (_ bv0 32))))))
 ))
 (let (($x89 (forall ((input.ind-%var501X (_ BitVec 32)) (input.ind-%var502X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var501X)))
 (=> $x101 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var501X input.ind-%var502X) false))))
 ))
 (let (($x78 (forall ((input.ind-%var500X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var500X)))
 (= $x135 false)))
 ))
 (let (($x104 (and (and $x78 $x89) $x96)))
 (let (($x94 (= $x104 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x64 (concat ?x60 (concat ?x71 ?x59)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x68)))))))
 (let (($x117 (and (and (and $x77 $x69) $x73) $x76)))
 (let (($x118 (= $x117 true)))
 (let (($x152 (= $x118 true)))
 (let (($x143 (= $x152 true)))
 (let (($x85 (and $x143 $x94)))
 (let (($x123 (and $x85 $x141)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x121 (and $x48 $x123)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x106 (and $x54 $x121)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x97 (and $x19 $x106)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x127 (and $x9 $x97)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x112 (and $x37 $x127)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x130 (and $x17 $x112)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x87 (and $x24 $x130)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x58 (and $x23 $x87)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x28 (and $x41 $x58)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x90 (and $x7 $x28)))
 (let (($x131 (=> $x90 $x108)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x115 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x140 (= $x115 true)))
 (let (($x107 (= $x140 true)))
 (let (($x139 (forall ((input.ind-%var527X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var527X)))
 (=> $x144 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var527X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var526X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var526X)))
 (= $x144 false)))
 ))
 (let (($x109 (and $x51 $x139)))
 (let (($x110 (= $x109 true)))
 (let (($x87 (forall ((input.ind-%var519X (_ BitVec 32)) (input.ind-%var521X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var519X input.ind-%var521X)))
 (let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var519X)))
 (=> (and $x42 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var519X input.ind-%var521X) (_ bv0 32))))))
 ))
 (let (($x81 (forall ((input.ind-%var519X (_ BitVec 32)) (input.ind-%var520X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var519X)))
 (=> $x42 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var519X input.ind-%var520X) false))))
 ))
 (let (($x89 (forall ((input.ind-%var518X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var518X)))
 (= $x101 false)))
 ))
 (let (($x28 (and (and $x89 $x81) $x87)))
 (let (($x90 (= $x28 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x75 (concat ?x71 (concat ?x70 ?x61)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x18)))))))
 (let (($x152 (and (and (and $x84 $x49) $x73) $x76)))
 (let (($x143 (= $x152 true)))
 (let (($x92 (= $x143 true)))
 (let (($x135 (= $x92 true)))
 (let (($x88 (and $x135 $x90)))
 (let (($x149 (and $x88 $x110)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x150 (and $x57 $x149)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x36 (and $x29 $x150)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x122 (and $x40 $x36)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x153 (and $x12 $x122)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x145 (and $x14 $x153)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x129 (and $x20 $x145)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x146 (and $x10 $x129)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x25 (and $x35 $x146)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x128 (and $x11 $x25)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x147 (and $x31 $x128)))
 (let (($x38 (=> $x147 $x107)))
 (not $x38))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x115 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x140 (= $x115 true)))
 (let (($x107 (= $x140 true)))
 (let (($x139 (forall ((input.ind-%var527X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var527X)))
 (=> $x144 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var527X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var526X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var526X)))
 (= $x144 false)))
 ))
 (let (($x109 (and $x51 $x139)))
 (let (($x110 (= $x109 true)))
 (let (($x87 (forall ((input.ind-%var519X (_ BitVec 32)) (input.ind-%var521X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var519X input.ind-%var521X)))
 (let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var519X)))
 (=> (and $x42 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var519X input.ind-%var521X) (_ bv0 32))))))
 ))
 (let (($x81 (forall ((input.ind-%var519X (_ BitVec 32)) (input.ind-%var520X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var519X)))
 (=> $x42 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var519X input.ind-%var520X) false))))
 ))
 (let (($x89 (forall ((input.ind-%var518X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var518X)))
 (= $x101 false)))
 ))
 (let (($x28 (and (and $x89 $x81) $x87)))
 (let (($x90 (= $x28 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x75 (concat ?x71 (concat ?x70 ?x61)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x18)))))))
 (let (($x152 (and (and (and $x84 $x49) $x73) $x76)))
 (let (($x143 (= $x152 true)))
 (let (($x92 (= $x143 true)))
 (let (($x135 (= $x92 true)))
 (let (($x88 (and $x135 $x90)))
 (let (($x149 (and $x88 $x110)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x150 (and $x57 $x149)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x36 (and $x29 $x150)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x122 (and $x40 $x36)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x153 (and $x12 $x122)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x145 (and $x14 $x153)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x129 (and $x20 $x145)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x146 (and $x10 $x129)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x25 (and $x35 $x146)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x128 (and $x11 $x25)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x147 (and $x31 $x128)))
 (let (($x38 (=> $x147 $x107)))
 (not $x38))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x97 (= false true)))
 (let (($x102 (= $x97 true)))
 (let (($x78 (forall ((input.ind-%var569X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var569X)))
 (=> $x38 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var569X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var568X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var568X)))
 (= $x38 false)))
 ))
 (let (($x111 (and $x108 $x78)))
 (let (($x46 (= $x111 true)))
 (let (($x146 (forall ((input.ind-%var561X (_ BitVec 32)) (input.ind-%var563X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var561X input.ind-%var563X)))
 (let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var561X)))
 (=> (and $x51 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var561X input.ind-%var563X) (_ bv0 32))))))
 ))
 (let (($x114 (forall ((input.ind-%var561X (_ BitVec 32)) (input.ind-%var562X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var561X)))
 (=> $x51 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var561X input.ind-%var562X) false))))
 ))
 (let (($x81 (forall ((input.ind-%var560X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var560X)))
 (= $x42 false)))
 ))
 (let (($x128 (and (and $x81 $x114) $x146)))
 (let (($x147 (= $x128 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x59 (concat ?x70 (concat ?x60 ?x63)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x56)))))))
 (let (($x92 (and (and (and $x117 $x69) $x73) $x76)))
 (let (($x135 (= $x92 true)))
 (let (($x86 (= $x135 true)))
 (let (($x101 (= $x86 true)))
 (let (($x115 (and $x101 $x147)))
 (let (($x85 (and $x115 $x46)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x103 (and $x45 $x85)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x136 (and $x19 $x103)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x141 (and $x9 $x136)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x106 (and $x37 $x141)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x132 (and $x17 $x106)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x138 (and $x24 $x132)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x131 (and $x23 $x138)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x105 (and $x41 $x131)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x83 (and $x15 $x105)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x119 (and $x48 $x83)))
 (let (($x125 (=> $x119 $x102)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x97 (= false true)))
 (let (($x102 (= $x97 true)))
 (let (($x78 (forall ((input.ind-%var569X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var569X)))
 (=> $x38 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var569X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var568X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var568X)))
 (= $x38 false)))
 ))
 (let (($x111 (and $x108 $x78)))
 (let (($x46 (= $x111 true)))
 (let (($x146 (forall ((input.ind-%var561X (_ BitVec 32)) (input.ind-%var563X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var561X input.ind-%var563X)))
 (let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var561X)))
 (=> (and $x51 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var561X input.ind-%var563X) (_ bv0 32))))))
 ))
 (let (($x114 (forall ((input.ind-%var561X (_ BitVec 32)) (input.ind-%var562X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var561X)))
 (=> $x51 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var561X input.ind-%var562X) false))))
 ))
 (let (($x81 (forall ((input.ind-%var560X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var560X)))
 (= $x42 false)))
 ))
 (let (($x128 (and (and $x81 $x114) $x146)))
 (let (($x147 (= $x128 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x59 (concat ?x70 (concat ?x60 ?x63)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x56)))))))
 (let (($x92 (and (and (and $x117 $x69) $x73) $x76)))
 (let (($x135 (= $x92 true)))
 (let (($x86 (= $x135 true)))
 (let (($x101 (= $x86 true)))
 (let (($x115 (and $x101 $x147)))
 (let (($x85 (and $x115 $x46)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x103 (and $x45 $x85)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x136 (and $x19 $x103)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x141 (and $x9 $x136)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x106 (and $x37 $x141)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x132 (and $x17 $x106)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x138 (and $x24 $x132)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x131 (and $x23 $x138)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x105 (and $x41 $x131)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x83 (and $x15 $x105)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x119 (and $x48 $x83)))
 (let (($x125 (=> $x119 $x102)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfcbd2113)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x13)))))))
 (let (($x126 (and $x152 $x73)))
 (let (($x79 (= $x126 true)))
 (let (($x66 (= $x79 true)))
 (let (($x133 (forall ((input.ind-%var611X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var611X)))
 (=> $x62 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var611X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var610X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var610X)))
 (= $x62 false)))
 ))
 (let (($x130 (and $x91 $x133)))
 (let (($x88 (= $x130 true)))
 (let (($x131 (forall ((input.ind-%var603X (_ BitVec 32)) (input.ind-%var605X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var603X input.ind-%var605X)))
 (let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var603X)))
 (=> (and $x108 $x128) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var603X input.ind-%var605X) (_ bv0 32))))))
 ))
 (let (($x124 (forall ((input.ind-%var603X (_ BitVec 32)) (input.ind-%var604X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var603X)))
 (=> $x108 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var603X input.ind-%var604X) false))))
 ))
 (let (($x114 (forall ((input.ind-%var602X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var602X)))
 (= $x51 false)))
 ))
 (let (($x83 (and (and $x114 $x124) $x131)))
 (let (($x119 (= $x83 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x61 (concat ?x60 (concat ?x71 ?x74)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let (($x86 (and (and (and $x152 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x73) $x76)))
 (let (($x101 (= $x86 true)))
 (let (($x96 (= $x101 true)))
 (let (($x42 (= $x96 true)))
 (let (($x97 (and $x42 $x119)))
 (let (($x140 (and $x97 $x88)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x107 (and $x54 $x140)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x110 (and $x40 $x107)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x36 (and $x12 $x110)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x123 (and $x14 $x36)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x144 (and $x20 $x123)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x34 (and $x10 $x144)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x148 (and $x35 $x34)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x139 (and $x11 $x148)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x109 (and $x7 $x139)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x122 (and $x57 $x109)))
 (let (($x127 (=> $x122 $x66)))
 (not $x127)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x13)))))))
 (let (($x126 (and $x152 $x73)))
 (let (($x79 (= $x126 true)))
 (let (($x66 (= $x79 true)))
 (let (($x133 (forall ((input.ind-%var611X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var611X)))
 (=> $x62 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var611X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var610X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var610X)))
 (= $x62 false)))
 ))
 (let (($x130 (and $x91 $x133)))
 (let (($x88 (= $x130 true)))
 (let (($x131 (forall ((input.ind-%var603X (_ BitVec 32)) (input.ind-%var605X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var603X input.ind-%var605X)))
 (let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var603X)))
 (=> (and $x108 $x128) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var603X input.ind-%var605X) (_ bv0 32))))))
 ))
 (let (($x124 (forall ((input.ind-%var603X (_ BitVec 32)) (input.ind-%var604X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var603X)))
 (=> $x108 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var603X input.ind-%var604X) false))))
 ))
 (let (($x114 (forall ((input.ind-%var602X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var602X)))
 (= $x51 false)))
 ))
 (let (($x83 (and (and $x114 $x124) $x131)))
 (let (($x119 (= $x83 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x61 (concat ?x60 (concat ?x71 ?x74)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let (($x86 (and (and (and $x152 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x73) $x76)))
 (let (($x101 (= $x86 true)))
 (let (($x96 (= $x101 true)))
 (let (($x42 (= $x96 true)))
 (let (($x97 (and $x42 $x119)))
 (let (($x140 (and $x97 $x88)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x107 (and $x54 $x140)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x110 (and $x40 $x107)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x36 (and $x12 $x110)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x123 (and $x14 $x36)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x144 (and $x20 $x123)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x34 (and $x10 $x144)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x148 (and $x35 $x34)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x139 (and $x11 $x148)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x109 (and $x7 $x139)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x122 (and $x57 $x109)))
 (let (($x127 (=> $x122 $x66)))
 (not $x127)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x141 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x90 (= $x141 true)))
 (let (($x81 (forall ((input.ind-%var629X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var629X)))
 (=> $x127 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var629X) (_ bv0 32)))))
 ))
 (let (($x27 (forall ((input.ind-%var628X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var628X)))
 (= $x127 false)))
 ))
 (let (($x120 (and $x27 $x81)))
 (let (($x129 (= $x120 true)))
 (let (($x148 (forall ((input.ind-%var621X (_ BitVec 32)) (input.ind-%var623X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var621X input.ind-%var623X)))
 (let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var621X)))
 (=> (and $x91 $x83) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var621X input.ind-%var623X) (_ bv0 32))))))
 ))
 (let (($x142 (forall ((input.ind-%var621X (_ BitVec 32)) (input.ind-%var622X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var621X)))
 (=> $x91 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var621X input.ind-%var622X) false))))
 ))
 (let (($x124 (forall ((input.ind-%var620X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var620X)))
 (= $x108 false)))
 ))
 (let (($x109 (and (and $x124 $x142) $x148)))
 (let (($x122 (= $x109 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x63 (concat ?x71 (concat ?x70 ?x72)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x5)))))))
 (let (($x96 (and (and (and $x92 $x69) $x73) $x76)))
 (let (($x42 (= $x96 true)))
 (let (($x87 (= $x42 true)))
 (let (($x51 (= $x87 true)))
 (let (($x126 (and $x51 $x122)))
 (let (($x115 (and $x126 $x129)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x102 (and $x29 $x115)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x125 (and $x9 $x102)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x46 (and $x37 $x125)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x136 (and $x17 $x46)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x149 (and $x24 $x136)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x38 (and $x23 $x149)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x116 (and $x41 $x38)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x95 (and $x15 $x116)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x78 (and $x31 $x95)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x111 (and $x45 $x78)))
 (let (($x94 (=> $x111 $x90)))
 (not $x94)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x141 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x90 (= $x141 true)))
 (let (($x81 (forall ((input.ind-%var629X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var629X)))
 (=> $x127 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var629X) (_ bv0 32)))))
 ))
 (let (($x27 (forall ((input.ind-%var628X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var628X)))
 (= $x127 false)))
 ))
 (let (($x120 (and $x27 $x81)))
 (let (($x129 (= $x120 true)))
 (let (($x148 (forall ((input.ind-%var621X (_ BitVec 32)) (input.ind-%var623X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var621X input.ind-%var623X)))
 (let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var621X)))
 (=> (and $x91 $x83) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var621X input.ind-%var623X) (_ bv0 32))))))
 ))
 (let (($x142 (forall ((input.ind-%var621X (_ BitVec 32)) (input.ind-%var622X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var621X)))
 (=> $x91 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var621X input.ind-%var622X) false))))
 ))
 (let (($x124 (forall ((input.ind-%var620X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var620X)))
 (= $x108 false)))
 ))
 (let (($x109 (and (and $x124 $x142) $x148)))
 (let (($x122 (= $x109 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x63 (concat ?x71 (concat ?x70 ?x72)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x5)))))))
 (let (($x96 (and (and (and $x92 $x69) $x73) $x76)))
 (let (($x42 (= $x96 true)))
 (let (($x87 (= $x42 true)))
 (let (($x51 (= $x87 true)))
 (let (($x126 (and $x51 $x122)))
 (let (($x115 (and $x126 $x129)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x102 (and $x29 $x115)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x125 (and $x9 $x102)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x46 (and $x37 $x125)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x136 (and $x17 $x46)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x149 (and $x24 $x136)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x38 (and $x23 $x149)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x116 (and $x41 $x38)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x95 (and $x15 $x116)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x78 (and $x31 $x95)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x111 (and $x45 $x78)))
 (let (($x94 (=> $x111 $x90)))
 (not $x94)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x65)))
 (let (($x106 (= ?x104 input.dst.llvm-%n)))
 (let (($x153 (= $x106 true)))
 (let (($x80 (forall ((input.ind-%var671X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var671X)))
 (=> $x137 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var671X) (_ bv0 32)))))
 ))
 (let (($x25 (forall ((input.ind-%var670X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var670X)))
 (= $x137 false)))
 ))
 (let (($x138 (and $x25 $x80)))
 (let (($x97 (= $x138 true)))
 (let (($x116 (forall ((input.ind-%var663X (_ BitVec 32)) (input.ind-%var665X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var663X input.ind-%var665X)))
 (let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var663X)))
 (=> (and $x27 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var663X input.ind-%var665X) (_ bv0 32))))))
 ))
 (let (($x150 (forall ((input.ind-%var663X (_ BitVec 32)) (input.ind-%var664X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var663X)))
 (=> $x27 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var663X input.ind-%var664X) false))))
 ))
 (let (($x142 (forall ((input.ind-%var662X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var662X)))
 (= $x91 false)))
 ))
 (let (($x78 (and (and $x142 $x150) $x116)))
 (let (($x111 (= $x78 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x74 (concat ?x70 (concat ?x60 ?x64)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x43)))))))
 (let (($x87 (and (and (and $x86 $x49) $x73) $x76)))
 (let (($x51 (= $x87 true)))
 (let (($x146 (= $x51 true)))
 (let (($x108 (= $x146 true)))
 (let (($x141 (and $x108 $x111)))
 (let (($x79 (and $x141 $x97)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x66 (and $x19 $x79)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x88 (and $x12 $x66)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x110 (and $x14 $x88)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x85 (and $x20 $x110)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x62 (and $x10 $x85)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x53 (and $x35 $x62)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x145 (and $x11 $x53)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x133 (and $x7 $x145)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x130 (and $x48 $x133)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x36 (and $x54 $x130)))
 (let (($x113 (=> $x36 $x153)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x65)))
 (let (($x106 (= ?x104 input.dst.llvm-%n)))
 (let (($x153 (= $x106 true)))
 (let (($x80 (forall ((input.ind-%var671X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var671X)))
 (=> $x137 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var671X) (_ bv0 32)))))
 ))
 (let (($x25 (forall ((input.ind-%var670X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var670X)))
 (= $x137 false)))
 ))
 (let (($x138 (and $x25 $x80)))
 (let (($x97 (= $x138 true)))
 (let (($x116 (forall ((input.ind-%var663X (_ BitVec 32)) (input.ind-%var665X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var663X input.ind-%var665X)))
 (let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var663X)))
 (=> (and $x27 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var663X input.ind-%var665X) (_ bv0 32))))))
 ))
 (let (($x150 (forall ((input.ind-%var663X (_ BitVec 32)) (input.ind-%var664X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var663X)))
 (=> $x27 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var663X input.ind-%var664X) false))))
 ))
 (let (($x142 (forall ((input.ind-%var662X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var662X)))
 (= $x91 false)))
 ))
 (let (($x78 (and (and $x142 $x150) $x116)))
 (let (($x111 (= $x78 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x74 (concat ?x70 (concat ?x60 ?x64)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x43)))))))
 (let (($x87 (and (and (and $x86 $x49) $x73) $x76)))
 (let (($x51 (= $x87 true)))
 (let (($x146 (= $x51 true)))
 (let (($x108 (= $x146 true)))
 (let (($x141 (and $x108 $x111)))
 (let (($x79 (and $x141 $x97)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x66 (and $x19 $x79)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x88 (and $x12 $x66)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x110 (and $x14 $x88)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x85 (and $x20 $x110)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x62 (and $x10 $x85)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x53 (and $x35 $x62)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x145 (and $x11 $x53)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x133 (and $x7 $x145)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x130 (and $x48 $x133)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x36 (and $x54 $x130)))
 (let (($x113 (=> $x36 $x153)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x81 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x120 (= $x81 true)))
 (let (($x46 (= $x120 true)))
 (let (($x107 (forall ((input.ind-%var689X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var689X)))
 (=> $x106 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var689X) (_ bv0 32)))))
 ))
 (let (($x6 (forall ((input.ind-%var688X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var688X)))
 (= $x106 false)))
 ))
 (let (($x121 (and $x6 $x107)))
 (let (($x124 (= $x121 true)))
 (let (($x145 (forall ((input.ind-%var681X (_ BitVec 32)) (input.ind-%var683X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var681X input.ind-%var683X)))
 (let (($x25 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var681X)))
 (=> (and $x25 $x78) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var681X input.ind-%var683X) (_ bv0 32))))))
 ))
 (let (($x99 (forall ((input.ind-%var681X (_ BitVec 32)) (input.ind-%var682X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var681X)))
 (=> $x25 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var681X input.ind-%var682X) false))))
 ))
 (let (($x150 (forall ((input.ind-%var680X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var680X)))
 (= $x27 false)))
 ))
 (let (($x130 (and (and $x150 $x99) $x145)))
 (let (($x36 (= $x130 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x72 (concat ?x60 (concat ?x71 ?x75)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x152 $x68)))))))
 (let (($x146 (and (and (and $x96 $x69) $x73) $x76)))
 (let (($x108 (= $x146 true)))
 (let (($x131 (= $x108 true)))
 (let (($x91 (= $x131 true)))
 (let (($x28 (and $x91 $x36)))
 (let (($x98 (and $x28 $x124)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x34 (and $x40 $x98)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x126 (and $x37 $x34)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x90 (and $x17 $x126)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x94 (and $x24 $x90)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x129 (and $x23 $x94)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x125 (and $x41 $x129)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x140 (and $x15 $x125)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x127 (and $x31 $x140)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x143 (and $x57 $x127)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x89 (and $x29 $x143)))
 (let (($x119 (=> $x89 $x46)))
 (not $x119))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x81 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x120 (= $x81 true)))
 (let (($x46 (= $x120 true)))
 (let (($x107 (forall ((input.ind-%var689X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var689X)))
 (=> $x106 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var689X) (_ bv0 32)))))
 ))
 (let (($x6 (forall ((input.ind-%var688X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var688X)))
 (= $x106 false)))
 ))
 (let (($x121 (and $x6 $x107)))
 (let (($x124 (= $x121 true)))
 (let (($x145 (forall ((input.ind-%var681X (_ BitVec 32)) (input.ind-%var683X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var681X input.ind-%var683X)))
 (let (($x25 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var681X)))
 (=> (and $x25 $x78) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var681X input.ind-%var683X) (_ bv0 32))))))
 ))
 (let (($x99 (forall ((input.ind-%var681X (_ BitVec 32)) (input.ind-%var682X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var681X)))
 (=> $x25 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var681X input.ind-%var682X) false))))
 ))
 (let (($x150 (forall ((input.ind-%var680X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var680X)))
 (= $x27 false)))
 ))
 (let (($x130 (and (and $x150 $x99) $x145)))
 (let (($x36 (= $x130 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x72 (concat ?x60 (concat ?x71 ?x75)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x152 $x68)))))))
 (let (($x146 (and (and (and $x96 $x69) $x73) $x76)))
 (let (($x108 (= $x146 true)))
 (let (($x131 (= $x108 true)))
 (let (($x91 (= $x131 true)))
 (let (($x28 (and $x91 $x36)))
 (let (($x98 (and $x28 $x124)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x34 (and $x40 $x98)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x126 (and $x37 $x34)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x90 (and $x17 $x126)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x94 (and $x24 $x90)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x129 (and $x23 $x94)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x125 (and $x41 $x129)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x140 (and $x15 $x125)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x127 (and $x31 $x140)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x143 (and $x57 $x127)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x89 (and $x29 $x143)))
 (let (($x119 (=> $x89 $x46)))
 (not $x119))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x165 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (= $x165 false)))
 (let (($x167 (= $x166 true)))
 (let (($x123 (forall ((input.ind-%var731X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var731X)))
 (=> $x97 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var731X) (_ bv0 32)))))
 ))
 (let (($x113 (forall ((input.ind-%var730X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var730X)))
 (= $x97 false)))
 ))
 (let (($x82 (and $x113 $x123)))
 (let (($x93 (= $x82 true)))
 (let (($x58 (forall ((input.ind-%var723X (_ BitVec 32)) (input.ind-%var725X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var723X input.ind-%var725X)))
 (let (($x46 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var723X)))
 (=> (and $x46 $x127) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var723X input.ind-%var725X) (_ bv0 32))))))
 ))
 (let (($x147 (forall ((input.ind-%var723X (_ BitVec 32)) (input.ind-%var724X (_ BitVec 32)) )(let (($x46 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var723X)))
 (=> $x46 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var723X input.ind-%var724X) false))))
 ))
 (let (($x34 (forall ((input.ind-%var722X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var722X)))
 (= $x107 false)))
 ))
 (let (($x118 (and (and $x34 $x147) $x58)))
 (let (($x38 (= $x118 true)))
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x145)))
 (let (($x28 (= ?x130 input.dst.llvm-%n)))
 (let (($x106 (= $x28 true)))
 (let (($x100 (= $x106 true)))
 (let (($x133 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x62 (= $x133 true)))
 (let (($x79 (= $x62 true)))
 (let (($x25 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x78 (= $x25 true)))
 (let (($x134 (= $x78 true)))
 (let (($x105 (= $x134 true)))
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x27 (= $x148 true)))
 (let (($x103 (= $x27 true)))
 (let (($x150 (= $x103 true)))
 (let (($x76 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x146 (= $x76 true)))
 (let (($x108 (= $x146 true)))
 (let (($x131 (= $x108 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x75 (= $x71 true)))
 (let (($x61 (= $x75 true)))
 (let (($x64 (= $x61 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x51 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x22 $x51)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x13)))))))
 (let (($x59 (and $x47 $x42)))
 (let (($x72 (= $x59 true)))
 (let (($x70 (= $x72 true)))
 (let (($x63 (= $x70 true)))
 (let (($x84 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x84 true)))
 (let (($x49 (= $x5 true)))
 (let (($x60 (and $x49 $x63)))
 (let (($x67 (and $x60 $x64)))
 (let (($x91 (and $x67 $x131)))
 (let (($x116 (and $x91 $x150)))
 (let (($x99 (and $x116 $x105)))
 (let (($x85 (and $x99 $x79)))
 (let (($x6 (and $x85 $x100)))
 (let (($x141 (and $x6 $x38)))
 (let (($x154 (and $x141 $x93)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x155 (and $x9 $x154)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x156 (and $x14 $x155)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x157 (and $x20 $x156)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x158 (and $x10 $x157)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x159 (and $x35 $x158)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x160 (and $x11 $x159)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x161 (and $x48 $x160)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x162 (and $x21 $x161)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x163 (and $x29 $x162)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x164 (and $x31 $x163)))
 (let (($x168 (=> $x164 $x167)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x165 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (= $x165 false)))
 (let (($x167 (= $x166 true)))
 (let (($x123 (forall ((input.ind-%var731X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var731X)))
 (=> $x97 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var731X) (_ bv0 32)))))
 ))
 (let (($x113 (forall ((input.ind-%var730X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var730X)))
 (= $x97 false)))
 ))
 (let (($x82 (and $x113 $x123)))
 (let (($x93 (= $x82 true)))
 (let (($x58 (forall ((input.ind-%var723X (_ BitVec 32)) (input.ind-%var725X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var723X input.ind-%var725X)))
 (let (($x46 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var723X)))
 (=> (and $x46 $x127) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var723X input.ind-%var725X) (_ bv0 32))))))
 ))
 (let (($x147 (forall ((input.ind-%var723X (_ BitVec 32)) (input.ind-%var724X (_ BitVec 32)) )(let (($x46 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var723X)))
 (=> $x46 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var723X input.ind-%var724X) false))))
 ))
 (let (($x34 (forall ((input.ind-%var722X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var722X)))
 (= $x107 false)))
 ))
 (let (($x118 (and (and $x34 $x147) $x58)))
 (let (($x38 (= $x118 true)))
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x145)))
 (let (($x28 (= ?x130 input.dst.llvm-%n)))
 (let (($x106 (= $x28 true)))
 (let (($x100 (= $x106 true)))
 (let (($x133 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x62 (= $x133 true)))
 (let (($x79 (= $x62 true)))
 (let (($x25 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x78 (= $x25 true)))
 (let (($x134 (= $x78 true)))
 (let (($x105 (= $x134 true)))
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x27 (= $x148 true)))
 (let (($x103 (= $x27 true)))
 (let (($x150 (= $x103 true)))
 (let (($x76 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x146 (= $x76 true)))
 (let (($x108 (= $x146 true)))
 (let (($x131 (= $x108 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x75 (= $x71 true)))
 (let (($x61 (= $x75 true)))
 (let (($x64 (= $x61 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x51 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x22 $x51)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x13)))))))
 (let (($x59 (and $x47 $x42)))
 (let (($x72 (= $x59 true)))
 (let (($x70 (= $x72 true)))
 (let (($x63 (= $x70 true)))
 (let (($x84 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x84 true)))
 (let (($x49 (= $x5 true)))
 (let (($x60 (and $x49 $x63)))
 (let (($x67 (and $x60 $x64)))
 (let (($x91 (and $x67 $x131)))
 (let (($x116 (and $x91 $x150)))
 (let (($x99 (and $x116 $x105)))
 (let (($x85 (and $x99 $x79)))
 (let (($x6 (and $x85 $x100)))
 (let (($x141 (and $x6 $x38)))
 (let (($x154 (and $x141 $x93)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x155 (and $x9 $x154)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x156 (and $x14 $x155)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x157 (and $x20 $x156)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x158 (and $x10 $x157)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x159 (and $x35 $x158)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x160 (and $x11 $x159)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x161 (and $x48 $x160)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x162 (and $x21 $x161)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x163 (and $x29 $x162)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x164 (and $x31 $x163)))
 (let (($x168 (=> $x164 $x167)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x51 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x22 $x51)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x86)))))))
 (let (($x111 (and $x47 $x42)))
 (let (($x126 (= $x111 true)))
 (let (($x90 (= $x126 true)))
 (let (($x162 (forall ((input.ind-%var773X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var773X)))
 (=> $x110 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var773X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var772X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var772X)))
 (= $x110 false)))
 ))
 (let (($x163 (and $x82 $x162)))
 (let (($x164 (= $x163 true)))
 (let (($x58 (forall ((input.ind-%var765X (_ BitVec 32)) (input.ind-%var767X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var765X input.ind-%var767X)))
 (let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var765X)))
 (=> (and $x107 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var765X input.ind-%var767X) (_ bv0 32))))))
 ))
 (let (($x34 (forall ((input.ind-%var765X (_ BitVec 32)) (input.ind-%var766X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var765X)))
 (=> $x107 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var765X input.ind-%var766X) false))))
 ))
 (let (($x62 (forall ((input.ind-%var764X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var764X)))
 (= $x134 false)))
 ))
 (let (($x38 (and (and $x62 $x34) $x58)))
 (let (($x141 (= $x38 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x76 (concat ?x61 (concat ?x60 ?x70)))))
 (let (($x108 (= input.dst.llvm-%n ?x146)))
 (let (($x148 (and (and (and $x47 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x42) $x108)))
 (let (($x27 (= $x148 true)))
 (let (($x103 (= $x27 true)))
 (let (($x150 (= $x103 true)))
 (let (($x97 (and $x150 $x141)))
 (let (($x165 (and $x97 $x164)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x166 (and $x12 $x165)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x167 (and $x17 $x166)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x168 (and $x24 $x167)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x169 (and $x23 $x168)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x117 (and $x41 $x169)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x43 (and $x15 $x117)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x88 (and $x57 $x43)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x8 (and $x29 $x88)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x121 (and $x21 $x8)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x143 (and $x54 $x121)))
 (let (($x77 (=> $x143 $x90)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x51 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x22 $x51)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x86)))))))
 (let (($x111 (and $x47 $x42)))
 (let (($x126 (= $x111 true)))
 (let (($x90 (= $x126 true)))
 (let (($x162 (forall ((input.ind-%var773X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var773X)))
 (=> $x110 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var773X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var772X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var772X)))
 (= $x110 false)))
 ))
 (let (($x163 (and $x82 $x162)))
 (let (($x164 (= $x163 true)))
 (let (($x58 (forall ((input.ind-%var765X (_ BitVec 32)) (input.ind-%var767X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var765X input.ind-%var767X)))
 (let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var765X)))
 (=> (and $x107 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var765X input.ind-%var767X) (_ bv0 32))))))
 ))
 (let (($x34 (forall ((input.ind-%var765X (_ BitVec 32)) (input.ind-%var766X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var765X)))
 (=> $x107 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var765X input.ind-%var766X) false))))
 ))
 (let (($x62 (forall ((input.ind-%var764X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var764X)))
 (= $x134 false)))
 ))
 (let (($x38 (and (and $x62 $x34) $x58)))
 (let (($x141 (= $x38 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x76 (concat ?x61 (concat ?x60 ?x70)))))
 (let (($x108 (= input.dst.llvm-%n ?x146)))
 (let (($x148 (and (and (and $x47 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x42) $x108)))
 (let (($x27 (= $x148 true)))
 (let (($x103 (= $x27 true)))
 (let (($x150 (= $x103 true)))
 (let (($x97 (and $x150 $x141)))
 (let (($x165 (and $x97 $x164)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x166 (and $x12 $x165)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x167 (and $x17 $x166)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x168 (and $x24 $x167)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x169 (and $x23 $x168)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x117 (and $x41 $x169)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x43 (and $x15 $x117)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x88 (and $x57 $x43)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x8 (and $x29 $x88)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x121 (and $x21 $x8)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x143 (and $x54 $x121)))
 (let (($x77 (=> $x143 $x90)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x154 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x159 (bvneg ?x154)))
 (let (($x102 (= ?x159 input.dst.llvm-%n)))
 (let (($x145 (= $x102 true)))
 (let (($x25 (forall ((input.ind-%var791X (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var791X)))
 (=> $x77 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var791X) (_ bv0 32)))))
 ))
 (let (($x136 (forall ((input.ind-%var790X (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var790X)))
 (= $x77 false)))
 ))
 (let (($x99 (and $x136 $x25)))
 (let (($x130 (= $x99 true)))
 (let (($x88 (forall ((input.ind-%var783X (_ BitVec 32)) (input.ind-%var785X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var783X input.ind-%var785X)))
 (let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var783X)))
 (=> (and $x82 $x38) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var783X input.ind-%var785X) (_ bv0 32))))))
 ))
 (let (($x160 (forall ((input.ind-%var783X (_ BitVec 32)) (input.ind-%var784X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var783X)))
 (=> $x82 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var783X input.ind-%var784X) false))))
 ))
 (let (($x34 (forall ((input.ind-%var782X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var782X)))
 (= $x107 false)))
 ))
 (let (($x121 (and (and $x34 $x160) $x88)))
 (let (($x143 (= $x121 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x64 (concat ?x60 (concat ?x71 ?x67)))))
 (let (($x108 (= input.dst.llvm-%n ?x146)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x51 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x22 $x51)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x69)))))))
 (let (($x103 (and (and (and $x131 $x55) $x42) $x108)))
 (let (($x150 (= $x103 true)))
 (let (($x78 (= $x150 true)))
 (let (($x134 (= $x78 true)))
 (let (($x111 (and $x134 $x143)))
 (let (($x100 (and $x111 $x130)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x137 (and $x37 $x100)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x113 (and $x20 $x137)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x120 (and $x10 $x113)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x142 (and $x35 $x120)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x53 (and $x11 $x142)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x6 (and $x48 $x53)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x112 (and $x50 $x6)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x158 (and $x19 $x112)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x46 (and $x45 $x158)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x127 (and $x9 $x46)))
 (let (($x83 (=> $x127 $x145)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x154 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x159 (bvneg ?x154)))
 (let (($x102 (= ?x159 input.dst.llvm-%n)))
 (let (($x145 (= $x102 true)))
 (let (($x25 (forall ((input.ind-%var791X (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var791X)))
 (=> $x77 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var791X) (_ bv0 32)))))
 ))
 (let (($x136 (forall ((input.ind-%var790X (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var790X)))
 (= $x77 false)))
 ))
 (let (($x99 (and $x136 $x25)))
 (let (($x130 (= $x99 true)))
 (let (($x88 (forall ((input.ind-%var783X (_ BitVec 32)) (input.ind-%var785X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var783X input.ind-%var785X)))
 (let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var783X)))
 (=> (and $x82 $x38) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var783X input.ind-%var785X) (_ bv0 32))))))
 ))
 (let (($x160 (forall ((input.ind-%var783X (_ BitVec 32)) (input.ind-%var784X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var783X)))
 (=> $x82 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var783X input.ind-%var784X) false))))
 ))
 (let (($x34 (forall ((input.ind-%var782X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var782X)))
 (= $x107 false)))
 ))
 (let (($x121 (and (and $x34 $x160) $x88)))
 (let (($x143 (= $x121 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x64 (concat ?x60 (concat ?x71 ?x67)))))
 (let (($x108 (= input.dst.llvm-%n ?x146)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x51 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x22 $x51)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x69)))))))
 (let (($x103 (and (and (and $x131 $x55) $x42) $x108)))
 (let (($x150 (= $x103 true)))
 (let (($x78 (= $x150 true)))
 (let (($x134 (= $x78 true)))
 (let (($x111 (and $x134 $x143)))
 (let (($x100 (and $x111 $x130)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x137 (and $x37 $x100)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x113 (and $x20 $x137)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x120 (and $x10 $x113)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x142 (and $x35 $x120)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x53 (and $x11 $x142)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x6 (and $x48 $x53)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x112 (and $x50 $x6)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x158 (and $x19 $x112)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x46 (and $x45 $x158)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x127 (and $x9 $x46)))
 (let (($x83 (=> $x127 $x145)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x163 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x168 (bvneg ?x163)))
 (let (($x105 (= ?x168 input.spec-%var-n-1)))
 (let (($x140 (= $x105 true)))
 (let (($x106 (forall ((input.ind-%var809X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var809X)))
 (=> $x102 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var809X) (_ bv0 32)))))
 ))
 (let (($x68 (forall ((input.ind-%var808X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var808X)))
 (= $x102 false)))
 ))
 (let (($x133 (and $x68 $x106)))
 (let (($x62 (= $x133 true)))
 (let (($x112 (forall ((input.ind-%var801X (_ BitVec 32)) (input.ind-%var803X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var801X input.ind-%var803X)))
 (let (($x136 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var801X)))
 (=> (and $x136 $x121) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var801X input.ind-%var803X) (_ bv0 32))))))
 ))
 (let (($x155 (forall ((input.ind-%var801X (_ BitVec 32)) (input.ind-%var802X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var801X)))
 (=> $x136 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var801X input.ind-%var802X) false))))
 ))
 (let (($x160 (forall ((input.ind-%var800X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var800X)))
 (= $x82 false)))
 ))
 (let (($x46 (and (and $x160 $x155) $x112)))
 (let (($x127 (= $x46 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x70 (concat ?x71 (concat ?x61 ?x74)))))
 (let (($x108 (= input.dst.llvm-%n ?x146)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x51 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x22 $x51)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x33)))))))
 (let (($x78 (and (and (and $x148 $x49) $x42) $x108)))
 (let (($x134 (= $x78 true)))
 (let (($x36 (= $x134 true)))
 (let (($x107 (= $x36 true)))
 (let (($x114 (and $x107 $x127)))
 (let (($x151 (and $x114 $x62)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x132 (and $x14 $x151)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x97 (and $x24 $x132)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x126 (and $x23 $x97)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x90 (and $x41 $x126)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x164 (and $x15 $x90)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x167 (and $x57 $x164)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x119 (and $x29 $x167)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x110 (and $x21 $x119)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x84 (and $x7 $x110)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x85 (and $x12 $x84)))
 (let (($x93 (=> $x85 $x140)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x163 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x168 (bvneg ?x163)))
 (let (($x105 (= ?x168 input.spec-%var-n-1)))
 (let (($x140 (= $x105 true)))
 (let (($x106 (forall ((input.ind-%var809X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var809X)))
 (=> $x102 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var809X) (_ bv0 32)))))
 ))
 (let (($x68 (forall ((input.ind-%var808X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var808X)))
 (= $x102 false)))
 ))
 (let (($x133 (and $x68 $x106)))
 (let (($x62 (= $x133 true)))
 (let (($x112 (forall ((input.ind-%var801X (_ BitVec 32)) (input.ind-%var803X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var801X input.ind-%var803X)))
 (let (($x136 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var801X)))
 (=> (and $x136 $x121) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var801X input.ind-%var803X) (_ bv0 32))))))
 ))
 (let (($x155 (forall ((input.ind-%var801X (_ BitVec 32)) (input.ind-%var802X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var801X)))
 (=> $x136 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var801X input.ind-%var802X) false))))
 ))
 (let (($x160 (forall ((input.ind-%var800X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var800X)))
 (= $x82 false)))
 ))
 (let (($x46 (and (and $x160 $x155) $x112)))
 (let (($x127 (= $x46 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x70 (concat ?x71 (concat ?x61 ?x74)))))
 (let (($x108 (= input.dst.llvm-%n ?x146)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x51 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x22 $x51)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x33)))))))
 (let (($x78 (and (and (and $x148 $x49) $x42) $x108)))
 (let (($x134 (= $x78 true)))
 (let (($x36 (= $x134 true)))
 (let (($x107 (= $x36 true)))
 (let (($x114 (and $x107 $x127)))
 (let (($x151 (and $x114 $x62)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x132 (and $x14 $x151)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x97 (and $x24 $x132)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x126 (and $x23 $x97)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x90 (and $x41 $x126)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x164 (and $x15 $x90)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x167 (and $x57 $x164)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x119 (and $x29 $x167)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x110 (and $x21 $x119)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x84 (and $x7 $x110)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x85 (and $x12 $x84)))
 (let (($x93 (=> $x85 $x140)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x288 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x289 (= $x288 false)))
 (let (($x290 (= $x289 true)))
 (let (($x272 (forall ((input.ind-%var863X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var863X)))
 (=> $x169 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var863X) (_ bv0 32)))))
 ))
 (let (($x266 (forall ((input.ind-%var862X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var862X)))
 (= $x169 false)))
 ))
 (let (($x273 (and $x266 $x272)))
 (let (($x274 (= $x273 true)))
 (let (($x258 (forall ((input.ind-%var855X (_ BitVec 32)) (input.ind-%var857X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var855X input.ind-%var857X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var855X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var855X input.ind-%var857X) (_ bv0 32))))))
 ))
 (let (($x251 (forall ((input.ind-%var855X (_ BitVec 32)) (input.ind-%var856X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var855X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var855X input.ind-%var856X) false))))
 ))
 (let (($x244 (forall ((input.ind-%var854X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var854X)))
 (= $x171 false)))
 ))
 (let (($x260 (and (and $x244 $x251) $x258)))
 (let (($x261 (= $x260 true)))
 (let (($x236 (forall ((input.ind-%var843X (_ BitVec 32)) (input.ind-%var845X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var843X input.ind-%var845X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var843X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var843X input.ind-%var845X) (_ bv0 32))))))
 ))
 (let (($x229 (forall ((input.ind-%var843X (_ BitVec 32)) (input.ind-%var844X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var843X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var843X input.ind-%var844X) false))))
 ))
 (let (($x222 (forall ((input.ind-%var842X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var842X)))
 (= $x171 false)))
 ))
 (let (($x238 (and (and $x222 $x229) $x236)))
 (let (($x239 (= $x238 true)))
 (let (($x215 (forall ((input.ind-%var833X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var833X)))
 (=> $x169 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var833X) (_ bv0 32)))))
 ))
 (let (($x209 (forall ((input.ind-%var832X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var832X)))
 (= $x169 false)))
 ))
 (let (($x216 (and $x209 $x215)))
 (let (($x217 (= $x216 true)))
 (let (($x201 (forall ((input.ind-%var825X (_ BitVec 32)) (input.ind-%var827X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var825X input.ind-%var827X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var825X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var825X input.ind-%var827X) (_ bv0 32))))))
 ))
 (let (($x189 (forall ((input.ind-%var825X (_ BitVec 32)) (input.ind-%var826X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var825X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var825X input.ind-%var826X) false))))
 ))
 (let (($x175 (forall ((input.ind-%var824X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var824X)))
 (= $x171 false)))
 ))
 (let (($x203 (and (and $x175 $x189) $x201)))
 (let (($x204 (= $x203 true)))
 (let (($x95 (forall ((input.ind-%var815X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var815X)))
 (=> $x169 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var815X) (_ bv0 32)))))
 ))
 (let (($x65 (forall ((input.ind-%var814X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var814X)))
 (= $x169 false)))
 ))
 (let (($x80 (and $x65 $x95)))
 (let (($x128 (= $x80 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x55)))
 (let (($x166 (= ?x13 input.dst.llvm-%n)))
 (let (($x25 (= $x166 true)))
 (let (($x99 (= $x25 true)))
 (let (($x130 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (= $x130 true)))
 (let (($x165 (= $x113 true)))
 (let (($x123 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x43 (= $x123 true)))
 (let (($x111 (= $x43 true)))
 (let (($x154 (= $x111 true)))
 (let (($x117 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x116 (= $x117 true)))
 (let (($x79 (= $x116 true)))
 (let (($x98 (= $x79 true)))
 (let (($x141 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x38 (= $x141 true)))
 (let (($x143 (= $x38 true)))
 (let (($x137 (= $x143 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x109 (= $x93 true)))
 (let (($x32 (= $x109 true)))
 (let (($x91 (= $x32 true)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x167)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x126)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x132 $x90)))
 (let (($x110 (and $x164 $x119)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x112 $x110)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x28)))))))
 (let (($x85 (and $x151 $x84)))
 (let (($x162 (= $x85 true)))
 (let (($x163 (= $x162 true)))
 (let (($x168 (= $x163 true)))
 (let (($x147 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x155 (= $x147 true)))
 (let (($x158 (= $x155 true)))
 (let (($x160 (= (_ bv0 32) input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x88 (= $x160 true)))
 (let (($x136 (= $x88 true)))
 (let (($x107 (= (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x58 (= $x107 true)))
 (let (($x82 (= $x58 true)))
 (let (($x146 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x108 (= $x146 true)))
 (let (($x78 (= $x108 true)))
 (let (($x134 (= $x78 true)))
 (let (($x64 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x61 (= $x64 true)))
 (let (($x74 (= $x61 true)))
 (let (($x63 (= $x74 true)))
 (let (($x75 (bvsle input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x70 (= $x75 true)))
 (let (($x60 (= $x70 true)))
 (let (($x76 (= $x60 true)))
 (let (($x73 (bvule input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x51 (= $x73 true)))
 (let (($x42 (= $x51 true)))
 (let (($x150 (= $x42 true)))
 (let (($x52 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x26 (= $x52 true)))
 (let (($x16 (= $x26 true)))
 (let (($x30 (= $x16 true)))
 (let (($x56 (bvule input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x49 (= $x56 true)))
 (let (($x103 (= $x49 true)))
 (let (($x152 (= $x103 true)))
 (let (($x47 (bvsle input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x5 (= $x47 true)))
 (let (($x131 (= $x5 true)))
 (let (($x92 (= $x131 true)))
 (let (($x69 (= ?x13 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x87 (= $x69 true)))
 (let (($x18 (= $x87 true)))
 (let (($x148 (and $x18 $x92)))
 (let (($x22 (and $x148 $x152)))
 (let (($x44 (and $x22 $x30)))
 (let (($x27 (and $x44 $x150)))
 (let (($x71 (and $x27 $x76)))
 (let (($x67 (and $x71 $x63)))
 (let (($x36 (and $x67 $x134)))
 (let (($x156 (and $x36 $x82)))
 (let (($x121 (and $x156 $x136)))
 (let (($x53 (and $x121 $x158)))
 (let (($x105 (and $x53 $x168)))
 (let (($x145 (and $x105 $x91)))
 (let (($x8 (and $x145 $x137)))
 (let (($x34 (and $x8 $x98)))
 (let (($x159 (and $x34 $x154)))
 (let (($x77 (and $x159 $x165)))
 (let (($x120 (and $x77 $x99)))
 (let (($x135 (and $x120 $x128)))
 (let (($x205 (and $x135 $x204)))
 (let (($x218 (and $x205 $x217)))
 (let (($x240 (and $x218 $x239)))
 (let (($x262 (and $x240 $x261)))
 (let (($x275 (and $x262 $x274)))
 (let (($x96 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x276 (and $x96 $x275)))
 (let (($x14 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x277 (and $x14 $x276)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x278 (and $x17 $x277)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x279 (and $x10 $x278)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x280 (and $x35 $x279)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x281 (and $x11 $x280)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x282 (and $x48 $x281)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x283 (and $x50 $x282)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x284 (and $x45 $x283)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x285 (and $x31 $x284)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x286 (and $x21 $x285)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x287 (and $x37 $x286)))
 (let (($x291 (=> $x287 $x290)))
 (not $x291))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x288 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x289 (= $x288 false)))
 (let (($x290 (= $x289 true)))
 (let (($x272 (forall ((input.ind-%var863X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var863X)))
 (=> $x169 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var863X) (_ bv0 32)))))
 ))
 (let (($x266 (forall ((input.ind-%var862X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var862X)))
 (= $x169 false)))
 ))
 (let (($x273 (and $x266 $x272)))
 (let (($x274 (= $x273 true)))
 (let (($x258 (forall ((input.ind-%var855X (_ BitVec 32)) (input.ind-%var857X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var855X input.ind-%var857X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var855X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var855X input.ind-%var857X) (_ bv0 32))))))
 ))
 (let (($x251 (forall ((input.ind-%var855X (_ BitVec 32)) (input.ind-%var856X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var855X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var855X input.ind-%var856X) false))))
 ))
 (let (($x244 (forall ((input.ind-%var854X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var854X)))
 (= $x171 false)))
 ))
 (let (($x260 (and (and $x244 $x251) $x258)))
 (let (($x261 (= $x260 true)))
 (let (($x236 (forall ((input.ind-%var843X (_ BitVec 32)) (input.ind-%var845X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var843X input.ind-%var845X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var843X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var843X input.ind-%var845X) (_ bv0 32))))))
 ))
 (let (($x229 (forall ((input.ind-%var843X (_ BitVec 32)) (input.ind-%var844X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var843X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var843X input.ind-%var844X) false))))
 ))
 (let (($x222 (forall ((input.ind-%var842X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var842X)))
 (= $x171 false)))
 ))
 (let (($x238 (and (and $x222 $x229) $x236)))
 (let (($x239 (= $x238 true)))
 (let (($x215 (forall ((input.ind-%var833X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var833X)))
 (=> $x169 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var833X) (_ bv0 32)))))
 ))
 (let (($x209 (forall ((input.ind-%var832X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var832X)))
 (= $x169 false)))
 ))
 (let (($x216 (and $x209 $x215)))
 (let (($x217 (= $x216 true)))
 (let (($x201 (forall ((input.ind-%var825X (_ BitVec 32)) (input.ind-%var827X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var825X input.ind-%var827X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var825X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var825X input.ind-%var827X) (_ bv0 32))))))
 ))
 (let (($x189 (forall ((input.ind-%var825X (_ BitVec 32)) (input.ind-%var826X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var825X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var825X input.ind-%var826X) false))))
 ))
 (let (($x175 (forall ((input.ind-%var824X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var824X)))
 (= $x171 false)))
 ))
 (let (($x203 (and (and $x175 $x189) $x201)))
 (let (($x204 (= $x203 true)))
 (let (($x95 (forall ((input.ind-%var815X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var815X)))
 (=> $x169 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var815X) (_ bv0 32)))))
 ))
 (let (($x65 (forall ((input.ind-%var814X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var814X)))
 (= $x169 false)))
 ))
 (let (($x80 (and $x65 $x95)))
 (let (($x128 (= $x80 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x55)))
 (let (($x166 (= ?x13 input.dst.llvm-%n)))
 (let (($x25 (= $x166 true)))
 (let (($x99 (= $x25 true)))
 (let (($x130 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (= $x130 true)))
 (let (($x165 (= $x113 true)))
 (let (($x123 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x43 (= $x123 true)))
 (let (($x111 (= $x43 true)))
 (let (($x154 (= $x111 true)))
 (let (($x117 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x116 (= $x117 true)))
 (let (($x79 (= $x116 true)))
 (let (($x98 (= $x79 true)))
 (let (($x141 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x38 (= $x141 true)))
 (let (($x143 (= $x38 true)))
 (let (($x137 (= $x143 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x109 (= $x93 true)))
 (let (($x32 (= $x109 true)))
 (let (($x91 (= $x32 true)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x167)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x126)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x132 $x90)))
 (let (($x110 (and $x164 $x119)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x112 $x110)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x28)))))))
 (let (($x85 (and $x151 $x84)))
 (let (($x162 (= $x85 true)))
 (let (($x163 (= $x162 true)))
 (let (($x168 (= $x163 true)))
 (let (($x147 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x155 (= $x147 true)))
 (let (($x158 (= $x155 true)))
 (let (($x160 (= (_ bv0 32) input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x88 (= $x160 true)))
 (let (($x136 (= $x88 true)))
 (let (($x107 (= (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x58 (= $x107 true)))
 (let (($x82 (= $x58 true)))
 (let (($x146 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x108 (= $x146 true)))
 (let (($x78 (= $x108 true)))
 (let (($x134 (= $x78 true)))
 (let (($x64 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x61 (= $x64 true)))
 (let (($x74 (= $x61 true)))
 (let (($x63 (= $x74 true)))
 (let (($x75 (bvsle input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x70 (= $x75 true)))
 (let (($x60 (= $x70 true)))
 (let (($x76 (= $x60 true)))
 (let (($x73 (bvule input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x51 (= $x73 true)))
 (let (($x42 (= $x51 true)))
 (let (($x150 (= $x42 true)))
 (let (($x52 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x26 (= $x52 true)))
 (let (($x16 (= $x26 true)))
 (let (($x30 (= $x16 true)))
 (let (($x56 (bvule input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x49 (= $x56 true)))
 (let (($x103 (= $x49 true)))
 (let (($x152 (= $x103 true)))
 (let (($x47 (bvsle input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x5 (= $x47 true)))
 (let (($x131 (= $x5 true)))
 (let (($x92 (= $x131 true)))
 (let (($x69 (= ?x13 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x87 (= $x69 true)))
 (let (($x18 (= $x87 true)))
 (let (($x148 (and $x18 $x92)))
 (let (($x22 (and $x148 $x152)))
 (let (($x44 (and $x22 $x30)))
 (let (($x27 (and $x44 $x150)))
 (let (($x71 (and $x27 $x76)))
 (let (($x67 (and $x71 $x63)))
 (let (($x36 (and $x67 $x134)))
 (let (($x156 (and $x36 $x82)))
 (let (($x121 (and $x156 $x136)))
 (let (($x53 (and $x121 $x158)))
 (let (($x105 (and $x53 $x168)))
 (let (($x145 (and $x105 $x91)))
 (let (($x8 (and $x145 $x137)))
 (let (($x34 (and $x8 $x98)))
 (let (($x159 (and $x34 $x154)))
 (let (($x77 (and $x159 $x165)))
 (let (($x120 (and $x77 $x99)))
 (let (($x135 (and $x120 $x128)))
 (let (($x205 (and $x135 $x204)))
 (let (($x218 (and $x205 $x217)))
 (let (($x240 (and $x218 $x239)))
 (let (($x262 (and $x240 $x261)))
 (let (($x275 (and $x262 $x274)))
 (let (($x96 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x276 (and $x96 $x275)))
 (let (($x14 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x277 (and $x14 $x276)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x278 (and $x17 $x277)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x279 (and $x10 $x278)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x280 (and $x35 $x279)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x281 (and $x11 $x280)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x282 (and $x48 $x281)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x283 (and $x50 $x282)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x284 (and $x45 $x283)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x285 (and $x31 $x284)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x286 (and $x21 $x285)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x287 (and $x37 $x286)))
 (let (($x291 (=> $x287 $x290)))
 (not $x291))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00004000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x248 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (not $x248)))
 (let (($x242 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x255 (not $x242)))
 (let (($x122 (or $x255 $x173)))
 (let (($x139 (= $x122 true)))
 (let (($x184 (= $x139 true)))
 (let (($x245 (forall ((input.ind-%var941X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var941X)))
 (=> $x140 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var941X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var940X)))
 (= $x140 false)))
 ))
 (let (($x230 (and $x193 $x245)))
 (let (($x206 (= $x230 true)))
 (let (($x66 (forall ((input.ind-%var933X (_ BitVec 32)) (input.ind-%var935X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var933X input.ind-%var935X)))
 (let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var933X)))
 (=> (and $x153 $x169) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var933X input.ind-%var935X) (_ bv0 32))))))
 ))
 (let (($x142 (forall ((input.ind-%var933X (_ BitVec 32)) (input.ind-%var934X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var933X)))
 (=> $x153 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var933X input.ind-%var934X) false))))
 ))
 (let (($x286 (forall ((input.ind-%var932X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var932X)))
 (= $x159 false)))
 ))
 (let (($x177 (and (and $x286 $x142) $x66)))
 (let (($x190 (= $x177 true)))
 (let (($x278 (forall ((input.ind-%var921X (_ BitVec 32)) (input.ind-%var923X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var921X input.ind-%var923X)))
 (let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var921X)))
 (=> (and $x153 $x169) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var921X input.ind-%var923X) (_ bv0 32))))))
 ))
 (let (($x266 (forall ((input.ind-%var921X (_ BitVec 32)) (input.ind-%var922X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var921X)))
 (=> $x153 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var921X input.ind-%var922X) false))))
 ))
 (let (($x244 (forall ((input.ind-%var920X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var920X)))
 (= $x159 false)))
 ))
 (let (($x280 (and (and $x244 $x266) $x278)))
 (let (($x281 (= $x280 true)))
 (let (($x222 (forall ((input.ind-%var911X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var911X)))
 (=> $x140 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var911X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var910X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var910X)))
 (= $x140 false)))
 ))
 (let (($x229 (and $x205 $x222)))
 (let (($x237 (= $x229 true)))
 (let (($x202 (forall ((input.ind-%var903X (_ BitVec 32)) (input.ind-%var905X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var903X input.ind-%var905X)))
 (let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var903X)))
 (=> (and $x153 $x169) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var903X input.ind-%var905X) (_ bv0 32))))))
 ))
 (let (($x80 (forall ((input.ind-%var903X (_ BitVec 32)) (input.ind-%var904X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var903X)))
 (=> $x153 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var903X input.ind-%var904X) false))))
 ))
 (let (($x77 (forall ((input.ind-%var902X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var902X)))
 (= $x159 false)))
 ))
 (let (($x194 (and (and $x77 $x80) $x202)))
 (let (($x198 (= $x194 true)))
 (let (($x98 (forall ((input.ind-%var893X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var893X)))
 (=> $x140 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var893X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var892X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var892X)))
 (= $x140 false)))
 ))
 (let (($x34 (and $x91 $x98)))
 (let (($x123 (= $x34 true)))
 (let ((?x167 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x167)))
 (let (($x110 (= ?x119 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x110 true)))
 (let (($x85 (= $x84 true)))
 (let ((?x161 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x161)))
 (let (($x97 (= ?x106 input.dst.llvm-%n)))
 (let (($x126 (= $x97 true)))
 (let (($x90 (= $x126 true)))
 (let (($x133 (= ?x106 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x151 (= $x133 true)))
 (let (($x6 (= $x151 true)))
 (let (($x144 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x68 (= $x144 true)))
 (let (($x102 (= $x68 true)))
 (let (($x28 (= $x102 true)))
 (let (($x53 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x46 (= $x53 true)))
 (let (($x127 (= $x46 true)))
 (let (($x62 (= $x127 true)))
 (let (($x136 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x121 (= $x136 true)))
 (let (($x72 (= $x121 true)))
 (let (($x147 (= $x72 true)))
 (let (($x58 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x82 (= $x58 true)))
 (let (($x156 (= $x82 true)))
 (let (($x160 (= $x156 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x61)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x70 $x71)))
 (let (($x63 (and $x64 $x74)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x152 $x63)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x39)))))))
 (let (($x146 (and $x75 $x67)))
 (let (($x108 (= $x146 true)))
 (let (($x78 (= $x108 true)))
 (let (($x134 (= $x78 true)))
 (let (($x47 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x5 (= $x47 true)))
 (let (($x131 (= $x5 true)))
 (let (($x92 (= $x131 true)))
 (let ((?x55 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x55)))
 (let (($x87 (= ?x13 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x87 true)))
 (let (($x33 (= $x18 true)))
 (let (($x148 (and $x33 $x92)))
 (let (($x36 (and $x148 $x134)))
 (let (($x88 (and $x36 $x160)))
 (let (($x155 (and $x88 $x147)))
 (let (($x114 (and $x155 $x62)))
 (let (($x149 (and $x114 $x28)))
 (let (($x112 (and $x149 $x6)))
 (let (($x164 (and $x112 $x90)))
 (let (($x162 (and $x164 $x85)))
 (let (($x43 (and $x162 $x123)))
 (let (($x200 (and $x43 $x198)))
 (let (($x236 (and $x200 $x237)))
 (let (($x282 (and $x236 $x281)))
 (let (($x138 (and $x282 $x190)))
 (let (($x207 (and $x138 $x206)))
 (let (($x14 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x246 (and $x14 $x207)))
 (let (($x17 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x252 (and $x17 $x246)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x269 (and $x20 $x252)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x125 (and $x21 $x269)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x115 (and $x7 $x125)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x219 (and $x15 $x115)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x220 (and $x45 $x219)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x233 (and $x37 $x220)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x226 (and $x29 $x233)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x263 (and $x50 $x226)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x264 (and $x57 $x263)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x241 (and $x12 $x264)))
 (let (($x196 (=> $x241 $x184)))
 (not $x196))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x248 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (not $x248)))
 (let (($x242 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x255 (not $x242)))
 (let (($x122 (or $x255 $x173)))
 (let (($x139 (= $x122 true)))
 (let (($x184 (= $x139 true)))
 (let (($x245 (forall ((input.ind-%var941X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var941X)))
 (=> $x140 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var941X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var940X)))
 (= $x140 false)))
 ))
 (let (($x230 (and $x193 $x245)))
 (let (($x206 (= $x230 true)))
 (let (($x66 (forall ((input.ind-%var933X (_ BitVec 32)) (input.ind-%var935X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var933X input.ind-%var935X)))
 (let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var933X)))
 (=> (and $x153 $x169) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var933X input.ind-%var935X) (_ bv0 32))))))
 ))
 (let (($x142 (forall ((input.ind-%var933X (_ BitVec 32)) (input.ind-%var934X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var933X)))
 (=> $x153 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var933X input.ind-%var934X) false))))
 ))
 (let (($x286 (forall ((input.ind-%var932X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var932X)))
 (= $x159 false)))
 ))
 (let (($x177 (and (and $x286 $x142) $x66)))
 (let (($x190 (= $x177 true)))
 (let (($x278 (forall ((input.ind-%var921X (_ BitVec 32)) (input.ind-%var923X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var921X input.ind-%var923X)))
 (let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var921X)))
 (=> (and $x153 $x169) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var921X input.ind-%var923X) (_ bv0 32))))))
 ))
 (let (($x266 (forall ((input.ind-%var921X (_ BitVec 32)) (input.ind-%var922X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var921X)))
 (=> $x153 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var921X input.ind-%var922X) false))))
 ))
 (let (($x244 (forall ((input.ind-%var920X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var920X)))
 (= $x159 false)))
 ))
 (let (($x280 (and (and $x244 $x266) $x278)))
 (let (($x281 (= $x280 true)))
 (let (($x222 (forall ((input.ind-%var911X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var911X)))
 (=> $x140 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var911X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var910X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var910X)))
 (= $x140 false)))
 ))
 (let (($x229 (and $x205 $x222)))
 (let (($x237 (= $x229 true)))
 (let (($x202 (forall ((input.ind-%var903X (_ BitVec 32)) (input.ind-%var905X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var903X input.ind-%var905X)))
 (let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var903X)))
 (=> (and $x153 $x169) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var903X input.ind-%var905X) (_ bv0 32))))))
 ))
 (let (($x80 (forall ((input.ind-%var903X (_ BitVec 32)) (input.ind-%var904X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var903X)))
 (=> $x153 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var903X input.ind-%var904X) false))))
 ))
 (let (($x77 (forall ((input.ind-%var902X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var902X)))
 (= $x159 false)))
 ))
 (let (($x194 (and (and $x77 $x80) $x202)))
 (let (($x198 (= $x194 true)))
 (let (($x98 (forall ((input.ind-%var893X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var893X)))
 (=> $x140 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var893X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var892X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var892X)))
 (= $x140 false)))
 ))
 (let (($x34 (and $x91 $x98)))
 (let (($x123 (= $x34 true)))
 (let ((?x167 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x167)))
 (let (($x110 (= ?x119 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x110 true)))
 (let (($x85 (= $x84 true)))
 (let ((?x161 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x161)))
 (let (($x97 (= ?x106 input.dst.llvm-%n)))
 (let (($x126 (= $x97 true)))
 (let (($x90 (= $x126 true)))
 (let (($x133 (= ?x106 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x151 (= $x133 true)))
 (let (($x6 (= $x151 true)))
 (let (($x144 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x68 (= $x144 true)))
 (let (($x102 (= $x68 true)))
 (let (($x28 (= $x102 true)))
 (let (($x53 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x46 (= $x53 true)))
 (let (($x127 (= $x46 true)))
 (let (($x62 (= $x127 true)))
 (let (($x136 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x121 (= $x136 true)))
 (let (($x72 (= $x121 true)))
 (let (($x147 (= $x72 true)))
 (let (($x58 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x82 (= $x58 true)))
 (let (($x156 (= $x82 true)))
 (let (($x160 (= $x156 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x61)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x70 $x71)))
 (let (($x63 (and $x64 $x74)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x152 $x63)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x39)))))))
 (let (($x146 (and $x75 $x67)))
 (let (($x108 (= $x146 true)))
 (let (($x78 (= $x108 true)))
 (let (($x134 (= $x78 true)))
 (let (($x47 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x5 (= $x47 true)))
 (let (($x131 (= $x5 true)))
 (let (($x92 (= $x131 true)))
 (let ((?x55 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x55)))
 (let (($x87 (= ?x13 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x87 true)))
 (let (($x33 (= $x18 true)))
 (let (($x148 (and $x33 $x92)))
 (let (($x36 (and $x148 $x134)))
 (let (($x88 (and $x36 $x160)))
 (let (($x155 (and $x88 $x147)))
 (let (($x114 (and $x155 $x62)))
 (let (($x149 (and $x114 $x28)))
 (let (($x112 (and $x149 $x6)))
 (let (($x164 (and $x112 $x90)))
 (let (($x162 (and $x164 $x85)))
 (let (($x43 (and $x162 $x123)))
 (let (($x200 (and $x43 $x198)))
 (let (($x236 (and $x200 $x237)))
 (let (($x282 (and $x236 $x281)))
 (let (($x138 (and $x282 $x190)))
 (let (($x207 (and $x138 $x206)))
 (let (($x14 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x246 (and $x14 $x207)))
 (let (($x17 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x252 (and $x17 $x246)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x269 (and $x20 $x252)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x125 (and $x21 $x269)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x115 (and $x7 $x125)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x219 (and $x15 $x115)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x220 (and $x45 $x219)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x233 (and $x37 $x220)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x226 (and $x29 $x233)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x263 (and $x50 $x226)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x264 (and $x57 $x263)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x241 (and $x12 $x264)))
 (let (($x196 (=> $x241 $x184)))
 (not $x196))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 192 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x213 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x99 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x185 (bvmul ?x99 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x185)))
 (let (($x221 (= ?x208 ?x213)))
 (let (($x191 (= $x221 true)))
 (let (($x258 (forall ((input.ind-%var995X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var995X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var995X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var994X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var994X)))
 (= $x159 false)))
 ))
 (let (($x262 (and $x171 $x258)))
 (let (($x285 (= $x262 true)))
 (let (($x65 (forall ((input.ind-%var987X (_ BitVec 32)) (input.ind-%var989X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var987X input.ind-%var989X)))
 (let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var987X)))
 (=> (and $x138 $x142) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var987X input.ind-%var989X) (_ bv0 32))))))
 ))
 (let (($x283 (forall ((input.ind-%var987X (_ BitVec 32)) (input.ind-%var988X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var987X)))
 (=> $x138 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var987X input.ind-%var988X) false))))
 ))
 (let (($x8 (forall ((input.ind-%var986X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var986X)))
 (= $x229 false)))
 ))
 (let (($x25 (and (and $x8 $x283) $x65)))
 (let (($x94 (= $x25 true)))
 (let (($x111 (forall ((input.ind-%var975X (_ BitVec 32)) (input.ind-%var977X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var975X input.ind-%var977X)))
 (let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var975X)))
 (=> (and $x138 $x142) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var975X input.ind-%var977X) (_ bv0 32))))))
 ))
 (let (($x216 (forall ((input.ind-%var975X (_ BitVec 32)) (input.ind-%var976X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var975X)))
 (=> $x138 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var975X input.ind-%var976X) false))))
 ))
 (let (($x38 (forall ((input.ind-%var974X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var974X)))
 (= $x229 false)))
 ))
 (let (($x174 (and (and $x38 $x216) $x111)))
 (let (($x120 (= $x174 true)))
 (let (($x49 (forall ((input.ind-%var965X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var965X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var965X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var964X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var964X)))
 (= $x159 false)))
 ))
 (let (($x93 (and $x122 $x49)))
 (let (($x137 (= $x93 true)))
 (let (($x226 (forall ((input.ind-%var957X (_ BitVec 32)) (input.ind-%var959X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var957X input.ind-%var959X)))
 (let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var957X)))
 (=> (and $x138 $x142) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var957X input.ind-%var959X) (_ bv0 32))))))
 ))
 (let (($x245 (forall ((input.ind-%var957X (_ BitVec 32)) (input.ind-%var958X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var957X)))
 (=> $x138 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var957X input.ind-%var958X) false))))
 ))
 (let (($x266 (forall ((input.ind-%var956X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var956X)))
 (= $x229 false)))
 ))
 (let (($x264 (and (and $x266 $x245) $x226)))
 (let (($x241 (= $x264 true)))
 (let (($x202 (forall ((input.ind-%var947X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var947X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var947X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var946X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var946X)))
 (= $x159 false)))
 ))
 (let (($x194 (and $x153 $x202)))
 (let (($x198 (= $x194 true)))
 (let ((?x32 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x32)))
 (let (($x143 (= ?x91 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x143 true)))
 (let (($x79 (= $x116 true)))
 (let (($x84 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x85 (= $x84 true)))
 (let (($x162 (= $x85 true)))
 (let (($x105 (= $x162 true)))
 (let (($x90 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x164 (= $x90 true)))
 (let (($x167 (= $x164 true)))
 (let (($x119 (= $x167 true)))
 (let (($x6 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x112 (= $x6 true)))
 (let (($x132 (= $x112 true)))
 (let (($x97 (= $x132 true)))
 (let (($x149 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x161 (= $x149 true)))
 (let (($x106 (= $x161 true)))
 (let (($x133 (= $x106 true)))
 (let (($x114 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x144 (= $x114 true)))
 (let (($x68 (= $x144 true)))
 (let (($x102 (= $x68 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x136)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x156)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x58 $x160)))
 (let (($x72 (and $x88 $x121)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x60 $x72)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x67)))))))
 (let (($x155 (and $x107 $x147)))
 (let (($x158 (= $x155 true)))
 (let (($x53 (= $x158 true)))
 (let (($x46 (= $x53 true)))
 (let (($x73 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x51 (= $x73 true)))
 (let (($x42 (= $x51 true)))
 (let (($x150 (= $x42 true)))
 (let ((?x131 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x131)))
 (let (($x30 (= ?x92 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x44 (= $x30 true)))
 (let (($x16 (= $x44 true)))
 (let (($x22 (= ?x92 input.dst.llvm-%n)))
 (let (($x52 (= $x22 true)))
 (let (($x27 (= $x52 true)))
 (let ((?x69 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x69)))
 (let (($x33 (= ?x87 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x33 true)))
 (let (($x5 (= $x47 true)))
 (let (($x26 (and $x5 $x27)))
 (let (($x39 (and $x26 $x16)))
 (let (($x75 (and $x39 $x150)))
 (let (($x127 (and $x75 $x46)))
 (let (($x28 (and $x127 $x102)))
 (let (($x151 (and $x28 $x133)))
 (let (($x126 (and $x151 $x97)))
 (let (($x110 (and $x126 $x119)))
 (let (($x140 (and $x110 $x105)))
 (let (($x98 (and $x140 $x79)))
 (let (($x200 (and $x98 $x198)))
 (let (($x242 (and $x200 $x241)))
 (let (($x130 (and $x242 $x137)))
 (let (($x288 (and $x130 $x120)))
 (let (($x204 (and $x288 $x94)))
 (let (($x291 (and $x204 $x285)))
 (let (($x86 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x273 (and (not $x86) $x291)))
 (let (($x14 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x274 (and $x14 $x273)))
 (let (($x17 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x277 (and $x17 $x274)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x289 (and $x20 $x277)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x292 (and $x21 $x289)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x170 (and $x7 $x292)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x223 (and $x15 $x170)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x81 (and $x35 $x223)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x172 (and $x41 $x81)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x104 (and $x50 $x172)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x210 (and $x29 $x104)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x224 (and $x48 $x210)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x267 (and $x23 $x224)))
 (let (($x192 (=> $x267 $x191)))
 (not $x192))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x213 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x99 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x185 (bvmul ?x99 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x185)))
 (let (($x221 (= ?x208 ?x213)))
 (let (($x191 (= $x221 true)))
 (let (($x258 (forall ((input.ind-%var995X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var995X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var995X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var994X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var994X)))
 (= $x159 false)))
 ))
 (let (($x262 (and $x171 $x258)))
 (let (($x285 (= $x262 true)))
 (let (($x65 (forall ((input.ind-%var987X (_ BitVec 32)) (input.ind-%var989X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var987X input.ind-%var989X)))
 (let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var987X)))
 (=> (and $x138 $x142) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var987X input.ind-%var989X) (_ bv0 32))))))
 ))
 (let (($x283 (forall ((input.ind-%var987X (_ BitVec 32)) (input.ind-%var988X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var987X)))
 (=> $x138 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var987X input.ind-%var988X) false))))
 ))
 (let (($x8 (forall ((input.ind-%var986X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var986X)))
 (= $x229 false)))
 ))
 (let (($x25 (and (and $x8 $x283) $x65)))
 (let (($x94 (= $x25 true)))
 (let (($x111 (forall ((input.ind-%var975X (_ BitVec 32)) (input.ind-%var977X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var975X input.ind-%var977X)))
 (let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var975X)))
 (=> (and $x138 $x142) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var975X input.ind-%var977X) (_ bv0 32))))))
 ))
 (let (($x216 (forall ((input.ind-%var975X (_ BitVec 32)) (input.ind-%var976X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var975X)))
 (=> $x138 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var975X input.ind-%var976X) false))))
 ))
 (let (($x38 (forall ((input.ind-%var974X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var974X)))
 (= $x229 false)))
 ))
 (let (($x174 (and (and $x38 $x216) $x111)))
 (let (($x120 (= $x174 true)))
 (let (($x49 (forall ((input.ind-%var965X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var965X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var965X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var964X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var964X)))
 (= $x159 false)))
 ))
 (let (($x93 (and $x122 $x49)))
 (let (($x137 (= $x93 true)))
 (let (($x226 (forall ((input.ind-%var957X (_ BitVec 32)) (input.ind-%var959X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var957X input.ind-%var959X)))
 (let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var957X)))
 (=> (and $x138 $x142) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var957X input.ind-%var959X) (_ bv0 32))))))
 ))
 (let (($x245 (forall ((input.ind-%var957X (_ BitVec 32)) (input.ind-%var958X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var957X)))
 (=> $x138 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var957X input.ind-%var958X) false))))
 ))
 (let (($x266 (forall ((input.ind-%var956X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var956X)))
 (= $x229 false)))
 ))
 (let (($x264 (and (and $x266 $x245) $x226)))
 (let (($x241 (= $x264 true)))
 (let (($x202 (forall ((input.ind-%var947X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var947X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var947X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var946X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var946X)))
 (= $x159 false)))
 ))
 (let (($x194 (and $x153 $x202)))
 (let (($x198 (= $x194 true)))
 (let ((?x32 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x32)))
 (let (($x143 (= ?x91 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x143 true)))
 (let (($x79 (= $x116 true)))
 (let (($x84 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x85 (= $x84 true)))
 (let (($x162 (= $x85 true)))
 (let (($x105 (= $x162 true)))
 (let (($x90 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x164 (= $x90 true)))
 (let (($x167 (= $x164 true)))
 (let (($x119 (= $x167 true)))
 (let (($x6 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x112 (= $x6 true)))
 (let (($x132 (= $x112 true)))
 (let (($x97 (= $x132 true)))
 (let (($x149 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x161 (= $x149 true)))
 (let (($x106 (= $x161 true)))
 (let (($x133 (= $x106 true)))
 (let (($x114 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x144 (= $x114 true)))
 (let (($x68 (= $x144 true)))
 (let (($x102 (= $x68 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x136)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x156)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x58 $x160)))
 (let (($x72 (and $x88 $x121)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x60 $x72)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x67)))))))
 (let (($x155 (and $x107 $x147)))
 (let (($x158 (= $x155 true)))
 (let (($x53 (= $x158 true)))
 (let (($x46 (= $x53 true)))
 (let (($x73 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x51 (= $x73 true)))
 (let (($x42 (= $x51 true)))
 (let (($x150 (= $x42 true)))
 (let ((?x131 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x131)))
 (let (($x30 (= ?x92 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x44 (= $x30 true)))
 (let (($x16 (= $x44 true)))
 (let (($x22 (= ?x92 input.dst.llvm-%n)))
 (let (($x52 (= $x22 true)))
 (let (($x27 (= $x52 true)))
 (let ((?x69 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x69)))
 (let (($x33 (= ?x87 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x33 true)))
 (let (($x5 (= $x47 true)))
 (let (($x26 (and $x5 $x27)))
 (let (($x39 (and $x26 $x16)))
 (let (($x75 (and $x39 $x150)))
 (let (($x127 (and $x75 $x46)))
 (let (($x28 (and $x127 $x102)))
 (let (($x151 (and $x28 $x133)))
 (let (($x126 (and $x151 $x97)))
 (let (($x110 (and $x126 $x119)))
 (let (($x140 (and $x110 $x105)))
 (let (($x98 (and $x140 $x79)))
 (let (($x200 (and $x98 $x198)))
 (let (($x242 (and $x200 $x241)))
 (let (($x130 (and $x242 $x137)))
 (let (($x288 (and $x130 $x120)))
 (let (($x204 (and $x288 $x94)))
 (let (($x291 (and $x204 $x285)))
 (let (($x86 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x273 (and (not $x86) $x291)))
 (let (($x14 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x274 (and $x14 $x273)))
 (let (($x17 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x277 (and $x17 $x274)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x289 (and $x20 $x277)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x292 (and $x21 $x289)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x170 (and $x7 $x292)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x223 (and $x15 $x170)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x81 (and $x35 $x223)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x172 (and $x41 $x81)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x104 (and $x50 $x172)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x210 (and $x29 $x104)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x224 (and $x48 $x210)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x267 (and $x23 $x224)))
 (let (($x192 (=> $x267 $x191)))
 (not $x192))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 198 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x261 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x183 (bvmul ?x261 (_ bv4294967295 32))))
 (let ((?x290 (bvneg ?x183)))
 (let (($x215 (= ?x290 ?x117)))
 (let (($x276 (= $x215 true)))
 (let (($x206 (forall ((input.ind-%var1049X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1049X)))
 (=> $x80 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1049X) (_ bv0 32)))))
 ))
 (let (($x125 (forall ((input.ind-%var1048X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1048X)))
 (= $x80 false)))
 ))
 (let (($x207 (and $x125 $x206)))
 (let (($x115 (= $x207 true)))
 (let (($x124 (forall ((input.ind-%var1041X (_ BitVec 32)) (input.ind-%var1043X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1041X input.ind-%var1043X)))
 (let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1041X)))
 (=> (and $x288 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1041X input.ind-%var1043X) (_ bv0 32))))))
 ))
 (let (($x188 (forall ((input.ind-%var1041X (_ BitVec 32)) (input.ind-%var1042X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1041X)))
 (=> $x288 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1041X input.ind-%var1042X) false))))
 ))
 (let (($x222 (forall ((input.ind-%var1040X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1040X)))
 (= $x233 false)))
 ))
 (let (($x113 (and (and $x222 $x188) $x124)))
 (let (($x260 (= $x113 true)))
 (let (($x196 (forall ((input.ind-%var1029X (_ BitVec 32)) (input.ind-%var1031X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1029X input.ind-%var1031X)))
 (let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1029X)))
 (=> (and $x288 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1029X input.ind-%var1031X) (_ bv0 32))))))
 ))
 (let (($x95 (forall ((input.ind-%var1029X (_ BitVec 32)) (input.ind-%var1030X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1029X)))
 (=> $x288 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1029X input.ind-%var1030X) false))))
 ))
 (let (($x152 (forall ((input.ind-%var1028X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1028X)))
 (= $x233 false)))
 ))
 (let (($x166 (and (and $x152 $x95) $x196)))
 (let (($x238 (= $x166 true)))
 (let (($x208 (forall ((input.ind-%var1019X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1019X)))
 (=> $x80 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1019X) (_ bv0 32)))))
 ))
 (let (($x104 (forall ((input.ind-%var1018X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1018X)))
 (= $x80 false)))
 ))
 (let (($x213 (and $x104 $x208)))
 (let (($x221 (= $x213 true)))
 (let (($x274 (forall ((input.ind-%var1011X (_ BitVec 32)) (input.ind-%var1013X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1011X input.ind-%var1013X)))
 (let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1011X)))
 (=> (and $x288 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1011X input.ind-%var1013X) (_ bv0 32))))))
 ))
 (let (($x283 (forall ((input.ind-%var1011X (_ BitVec 32)) (input.ind-%var1012X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1011X)))
 (=> $x288 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1011X input.ind-%var1012X) false))))
 ))
 (let (($x242 (forall ((input.ind-%var1010X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1010X)))
 (= $x233 false)))
 ))
 (let (($x289 (and (and $x242 $x283) $x274)))
 (let (($x292 (= $x289 true)))
 (let (($x193 (forall ((input.ind-%var1001X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1001X)))
 (=> $x80 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1001X) (_ bv0 32)))))
 ))
 (let (($x194 (forall ((input.ind-%var1000X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1000X)))
 (= $x80 false)))
 ))
 (let (($x245 (and $x194 $x193)))
 (let (($x263 (= $x245 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x91)))
 (let (($x116 (= ?x143 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x116 true)))
 (let (($x98 (= $x79 true)))
 (let ((?x110 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x110)))
 (let (($x162 (= ?x84 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x162 true)))
 (let (($x140 (= $x105 true)))
 (let (($x126 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x90 (= $x126 true)))
 (let (($x164 (= $x90 true)))
 (let (($x167 (= $x164 true)))
 (let (($x151 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x6 (= $x151 true)))
 (let (($x112 (= $x6 true)))
 (let (($x132 (= $x112 true)))
 (let (($x102 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x28 (= $x102 true)))
 (let (($x149 (= $x28 true)))
 (let (($x161 (= $x149 true)))
 (let (($x127 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x62 (= $x127 true)))
 (let (($x114 (= $x62 true)))
 (let (($x144 (= $x114 true)))
 (let (($x147 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x155 (= $x147 true)))
 (let (($x158 (= $x155 true)))
 (let (($x53 (= $x158 true)))
 (let (($x160 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (= $x160 true)))
 (let (($x136 (= $x88 true)))
 (let (($x121 (= $x136 true)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x146)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x64 $x61)))
 (let (($x78 (and $x67 $x108)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x27 $x78)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x51)))))))
 (let (($x107 (and $x36 $x134)))
 (let (($x70 (= $x107 true)))
 (let (($x60 (= $x70 true)))
 (let (($x58 (= $x60 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x55)))
 (let (($x47 (= ?x13 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x5 (= $x47 true)))
 (let (($x131 (= $x5 true)))
 (let (($x87 (= ?x13 input.dst.llvm-%n)))
 (let (($x18 (= $x87 true)))
 (let (($x33 (= $x18 true)))
 (let (($x92 (and $x33 $x131)))
 (let (($x82 (and $x92 $x58)))
 (let (($x72 (and $x82 $x121)))
 (let (($x46 (and $x72 $x53)))
 (let (($x68 (and $x46 $x144)))
 (let (($x106 (and $x68 $x161)))
 (let (($x97 (and $x106 $x132)))
 (let (($x119 (and $x97 $x167)))
 (let (($x32 (and $x119 $x140)))
 (let (($x43 (and $x32 $x98)))
 (let (($x220 (and $x43 $x263)))
 (let (($x170 (and $x220 $x292)))
 (let (($x191 (and $x170 $x221)))
 (let (($x251 (and $x191 $x238)))
 (let (($x236 (and $x251 $x260)))
 (let (($x184 (and $x236 $x115)))
 (let (($x86 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x163 (and (not $x86) $x184)))
 (let (($x17 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x201 (and $x17 $x163)))
 (let (($x20 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x209 (and $x20 $x201)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x168 (and $x24 $x209)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x109 (and $x100 $x168)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x118 (and $x11 $x109)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x141 (and $x9 $x118)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x259 (and $x45 $x141)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x287 (and $x29 $x259)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x203 (and $x37 $x287)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x275 (and $x50 $x203)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x129 (and $x48 $x275)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x135 (and $x12 $x129)))
 (let (($x180 (=> $x135 $x276)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x261 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x183 (bvmul ?x261 (_ bv4294967295 32))))
 (let ((?x290 (bvneg ?x183)))
 (let (($x215 (= ?x290 ?x117)))
 (let (($x276 (= $x215 true)))
 (let (($x206 (forall ((input.ind-%var1049X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1049X)))
 (=> $x80 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1049X) (_ bv0 32)))))
 ))
 (let (($x125 (forall ((input.ind-%var1048X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1048X)))
 (= $x80 false)))
 ))
 (let (($x207 (and $x125 $x206)))
 (let (($x115 (= $x207 true)))
 (let (($x124 (forall ((input.ind-%var1041X (_ BitVec 32)) (input.ind-%var1043X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1041X input.ind-%var1043X)))
 (let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1041X)))
 (=> (and $x288 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1041X input.ind-%var1043X) (_ bv0 32))))))
 ))
 (let (($x188 (forall ((input.ind-%var1041X (_ BitVec 32)) (input.ind-%var1042X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1041X)))
 (=> $x288 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1041X input.ind-%var1042X) false))))
 ))
 (let (($x222 (forall ((input.ind-%var1040X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1040X)))
 (= $x233 false)))
 ))
 (let (($x113 (and (and $x222 $x188) $x124)))
 (let (($x260 (= $x113 true)))
 (let (($x196 (forall ((input.ind-%var1029X (_ BitVec 32)) (input.ind-%var1031X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1029X input.ind-%var1031X)))
 (let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1029X)))
 (=> (and $x288 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1029X input.ind-%var1031X) (_ bv0 32))))))
 ))
 (let (($x95 (forall ((input.ind-%var1029X (_ BitVec 32)) (input.ind-%var1030X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1029X)))
 (=> $x288 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1029X input.ind-%var1030X) false))))
 ))
 (let (($x152 (forall ((input.ind-%var1028X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1028X)))
 (= $x233 false)))
 ))
 (let (($x166 (and (and $x152 $x95) $x196)))
 (let (($x238 (= $x166 true)))
 (let (($x208 (forall ((input.ind-%var1019X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1019X)))
 (=> $x80 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1019X) (_ bv0 32)))))
 ))
 (let (($x104 (forall ((input.ind-%var1018X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1018X)))
 (= $x80 false)))
 ))
 (let (($x213 (and $x104 $x208)))
 (let (($x221 (= $x213 true)))
 (let (($x274 (forall ((input.ind-%var1011X (_ BitVec 32)) (input.ind-%var1013X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1011X input.ind-%var1013X)))
 (let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1011X)))
 (=> (and $x288 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1011X input.ind-%var1013X) (_ bv0 32))))))
 ))
 (let (($x283 (forall ((input.ind-%var1011X (_ BitVec 32)) (input.ind-%var1012X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1011X)))
 (=> $x288 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1011X input.ind-%var1012X) false))))
 ))
 (let (($x242 (forall ((input.ind-%var1010X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1010X)))
 (= $x233 false)))
 ))
 (let (($x289 (and (and $x242 $x283) $x274)))
 (let (($x292 (= $x289 true)))
 (let (($x193 (forall ((input.ind-%var1001X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1001X)))
 (=> $x80 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1001X) (_ bv0 32)))))
 ))
 (let (($x194 (forall ((input.ind-%var1000X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1000X)))
 (= $x80 false)))
 ))
 (let (($x245 (and $x194 $x193)))
 (let (($x263 (= $x245 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x91)))
 (let (($x116 (= ?x143 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x116 true)))
 (let (($x98 (= $x79 true)))
 (let ((?x110 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x110)))
 (let (($x162 (= ?x84 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x162 true)))
 (let (($x140 (= $x105 true)))
 (let (($x126 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x90 (= $x126 true)))
 (let (($x164 (= $x90 true)))
 (let (($x167 (= $x164 true)))
 (let (($x151 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x6 (= $x151 true)))
 (let (($x112 (= $x6 true)))
 (let (($x132 (= $x112 true)))
 (let (($x102 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x28 (= $x102 true)))
 (let (($x149 (= $x28 true)))
 (let (($x161 (= $x149 true)))
 (let (($x127 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x62 (= $x127 true)))
 (let (($x114 (= $x62 true)))
 (let (($x144 (= $x114 true)))
 (let (($x147 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x155 (= $x147 true)))
 (let (($x158 (= $x155 true)))
 (let (($x53 (= $x158 true)))
 (let (($x160 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (= $x160 true)))
 (let (($x136 (= $x88 true)))
 (let (($x121 (= $x136 true)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x146)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x64 $x61)))
 (let (($x78 (and $x67 $x108)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x27 $x78)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x51)))))))
 (let (($x107 (and $x36 $x134)))
 (let (($x70 (= $x107 true)))
 (let (($x60 (= $x70 true)))
 (let (($x58 (= $x60 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x55)))
 (let (($x47 (= ?x13 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x5 (= $x47 true)))
 (let (($x131 (= $x5 true)))
 (let (($x87 (= ?x13 input.dst.llvm-%n)))
 (let (($x18 (= $x87 true)))
 (let (($x33 (= $x18 true)))
 (let (($x92 (and $x33 $x131)))
 (let (($x82 (and $x92 $x58)))
 (let (($x72 (and $x82 $x121)))
 (let (($x46 (and $x72 $x53)))
 (let (($x68 (and $x46 $x144)))
 (let (($x106 (and $x68 $x161)))
 (let (($x97 (and $x106 $x132)))
 (let (($x119 (and $x97 $x167)))
 (let (($x32 (and $x119 $x140)))
 (let (($x43 (and $x32 $x98)))
 (let (($x220 (and $x43 $x263)))
 (let (($x170 (and $x220 $x292)))
 (let (($x191 (and $x170 $x221)))
 (let (($x251 (and $x191 $x238)))
 (let (($x236 (and $x251 $x260)))
 (let (($x184 (and $x236 $x115)))
 (let (($x86 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x163 (and (not $x86) $x184)))
 (let (($x17 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x201 (and $x17 $x163)))
 (let (($x20 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x209 (and $x20 $x201)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x168 (and $x24 $x209)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x109 (and $x100 $x168)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x118 (and $x11 $x109)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x141 (and $x9 $x118)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x259 (and $x45 $x141)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x287 (and $x29 $x259)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x203 (and $x37 $x287)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x275 (and $x50 $x203)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x129 (and $x48 $x275)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x135 (and $x12 $x129)))
 (let (($x180 (=> $x135 $x276)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 198 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x178 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x181 (bvuge ?x178 (_ bv1 32))))
 (let (($x272 (= $x181 true)))
 (let (($x240 (= $x272 true)))
 (let (($x65 (forall ((input.ind-%var1103X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1103X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1103X) (_ bv0 32)))))
 ))
 (let (($x258 (forall ((input.ind-%var1102X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1102X)))
 (= $x194 false)))
 ))
 (let (($x25 (and $x258 $x65)))
 (let (($x262 (= $x25 true)))
 (let (($x255 (forall ((input.ind-%var1095X (_ BitVec 32)) (input.ind-%var1097X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1095X input.ind-%var1097X)))
 (let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1095X)))
 (=> (and $x238 $x152) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1095X input.ind-%var1097X) (_ bv0 32))))))
 ))
 (let (($x286 (forall ((input.ind-%var1095X (_ BitVec 32)) (input.ind-%var1096X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1095X)))
 (=> $x238 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1095X input.ind-%var1096X) false))))
 ))
 (let (($x252 (forall ((input.ind-%var1094X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1094X)))
 (= $x285 false)))
 ))
 (let (($x128 (and (and $x252 $x286) $x255)))
 (let (($x284 (= $x128 true)))
 (let (($x157 (forall ((input.ind-%var1083X (_ BitVec 32)) (input.ind-%var1085X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1083X input.ind-%var1085X)))
 (let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1083X)))
 (=> (and $x238 $x152) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1083X input.ind-%var1085X) (_ bv0 32))))))
 ))
 (let (($x198 (forall ((input.ind-%var1083X (_ BitVec 32)) (input.ind-%var1084X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1083X)))
 (=> $x238 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1083X input.ind-%var1084X) false))))
 ))
 (let (($x22 (forall ((input.ind-%var1082X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1082X)))
 (= $x285 false)))
 ))
 (let (($x199 (and (and $x22 $x198) $x157)))
 (let (($x246 (= $x199 true)))
 (let (($x183 (forall ((input.ind-%var1073X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1073X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1073X) (_ bv0 32)))))
 ))
 (let (($x287 (forall ((input.ind-%var1072X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1072X)))
 (= $x194 false)))
 ))
 (let (($x290 (and $x287 $x183)))
 (let (($x117 (= $x290 true)))
 (let (($x163 (forall ((input.ind-%var1065X (_ BitVec 32)) (input.ind-%var1067X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1065X input.ind-%var1067X)))
 (let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1065X)))
 (=> (and $x238 $x152) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1065X input.ind-%var1067X) (_ bv0 32))))))
 ))
 (let (($x222 (forall ((input.ind-%var1065X (_ BitVec 32)) (input.ind-%var1066X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1065X)))
 (=> $x238 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1065X input.ind-%var1066X) false))))
 ))
 (let (($x292 (forall ((input.ind-%var1064X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1064X)))
 (= $x285 false)))
 ))
 (let (($x209 (and (and $x292 $x222) $x163)))
 (let (($x168 (= $x209 true)))
 (let (($x120 (forall ((input.ind-%var1055X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1055X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1055X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var1054X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1054X)))
 (= $x194 false)))
 ))
 (let (($x8 (and $x193 $x120)))
 (let (($x283 (= $x8 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x91)))
 (let (($x116 (= ?x143 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x116 true)))
 (let (($x98 (= $x79 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x162 (= $x85 true)))
 (let (($x105 (= $x162 true)))
 (let (($x140 (= $x105 true)))
 (let (($x164 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x167 (= $x164 true)))
 (let (($x119 (= $x167 true)))
 (let (($x110 (= $x119 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x106)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x68 $x149)))
 (let (($x151 (and $x161 $x133)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x160 $x151)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x155 $x158)))))))
 (let (($x112 (and $x144 $x6)))
 (let (($x132 (= $x112 true)))
 (let (($x97 (= $x132 true)))
 (let (($x126 (= $x97 true)))
 (let (($x78 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x134 (= $x78 true)))
 (let (($x107 (= $x134 true)))
 (let (($x70 (= $x107 true)))
 (let (($x63 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x61 (= $x63 true)))
 (let (($x67 (= $x61 true)))
 (let (($x146 (= $x67 true)))
 (let (($x36 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x52 (= $x36 true)))
 (let (($x27 (= $x52 true)))
 (let (($x64 (= $x27 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x71)))
 (let (($x42 (= ?x44 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x150 (= $x42 true)))
 (let (($x75 (= $x150 true)))
 (let (($x39 (= ?x44 input.dst.llvm-%n)))
 (let (($x73 (= $x39 true)))
 (let (($x16 (= $x73 true)))
 (let ((?x33 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x33)))
 (let (($x131 (= ?x47 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x131 true)))
 (let (($x26 (= $x92 true)))
 (let (($x195 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x55 (= $x195 true)))
 (let (($x13 (= $x55 true)))
 (let (($x69 (= $x13 true)))
 (let (($x30 (and $x69 $x26)))
 (let (($x51 (and $x30 $x16)))
 (let (($x76 (and $x51 $x75)))
 (let (($x74 (and $x76 $x64)))
 (let (($x108 (and $x74 $x146)))
 (let (($x60 (and $x108 $x70)))
 (let (($x90 (and $x60 $x126)))
 (let (($x84 (and $x90 $x110)))
 (let (($x32 (and $x84 $x140)))
 (let (($x43 (and $x32 $x98)))
 (let (($x277 (and $x43 $x283)))
 (let (($x109 (and $x277 $x168)))
 (let (($x215 (and $x109 $x117)))
 (let (($x279 (and $x215 $x246)))
 (let (($x264 (and $x279 $x284)))
 (let (($x224 (and $x264 $x262)))
 (let (($x14 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x269 (and (not $x14) $x224)))
 (let (($x20 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x34 (and $x20 $x269)))
 (let (($x24 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x237 (and $x24 $x34)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x169 (and $x10 $x237)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x205 (and $x7 $x169)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x218 (and $x15 $x205)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x217 (and $x35 $x218)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x278 (and $x54 $x217)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x139 (and $x41 $x278)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x123 (and $x19 $x139)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x239 (and $x40 $x123)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x77 (and $x96 $x239)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x66 (and $x12 $x77)))
 (let (($x177 (=> $x66 $x240)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x178 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x181 (bvuge ?x178 (_ bv1 32))))
 (let (($x272 (= $x181 true)))
 (let (($x240 (= $x272 true)))
 (let (($x65 (forall ((input.ind-%var1103X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1103X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1103X) (_ bv0 32)))))
 ))
 (let (($x258 (forall ((input.ind-%var1102X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1102X)))
 (= $x194 false)))
 ))
 (let (($x25 (and $x258 $x65)))
 (let (($x262 (= $x25 true)))
 (let (($x255 (forall ((input.ind-%var1095X (_ BitVec 32)) (input.ind-%var1097X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1095X input.ind-%var1097X)))
 (let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1095X)))
 (=> (and $x238 $x152) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1095X input.ind-%var1097X) (_ bv0 32))))))
 ))
 (let (($x286 (forall ((input.ind-%var1095X (_ BitVec 32)) (input.ind-%var1096X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1095X)))
 (=> $x238 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1095X input.ind-%var1096X) false))))
 ))
 (let (($x252 (forall ((input.ind-%var1094X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1094X)))
 (= $x285 false)))
 ))
 (let (($x128 (and (and $x252 $x286) $x255)))
 (let (($x284 (= $x128 true)))
 (let (($x157 (forall ((input.ind-%var1083X (_ BitVec 32)) (input.ind-%var1085X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1083X input.ind-%var1085X)))
 (let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1083X)))
 (=> (and $x238 $x152) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1083X input.ind-%var1085X) (_ bv0 32))))))
 ))
 (let (($x198 (forall ((input.ind-%var1083X (_ BitVec 32)) (input.ind-%var1084X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1083X)))
 (=> $x238 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1083X input.ind-%var1084X) false))))
 ))
 (let (($x22 (forall ((input.ind-%var1082X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1082X)))
 (= $x285 false)))
 ))
 (let (($x199 (and (and $x22 $x198) $x157)))
 (let (($x246 (= $x199 true)))
 (let (($x183 (forall ((input.ind-%var1073X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1073X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1073X) (_ bv0 32)))))
 ))
 (let (($x287 (forall ((input.ind-%var1072X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1072X)))
 (= $x194 false)))
 ))
 (let (($x290 (and $x287 $x183)))
 (let (($x117 (= $x290 true)))
 (let (($x163 (forall ((input.ind-%var1065X (_ BitVec 32)) (input.ind-%var1067X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1065X input.ind-%var1067X)))
 (let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1065X)))
 (=> (and $x238 $x152) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1065X input.ind-%var1067X) (_ bv0 32))))))
 ))
 (let (($x222 (forall ((input.ind-%var1065X (_ BitVec 32)) (input.ind-%var1066X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1065X)))
 (=> $x238 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1065X input.ind-%var1066X) false))))
 ))
 (let (($x292 (forall ((input.ind-%var1064X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1064X)))
 (= $x285 false)))
 ))
 (let (($x209 (and (and $x292 $x222) $x163)))
 (let (($x168 (= $x209 true)))
 (let (($x120 (forall ((input.ind-%var1055X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1055X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1055X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var1054X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1054X)))
 (= $x194 false)))
 ))
 (let (($x8 (and $x193 $x120)))
 (let (($x283 (= $x8 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x91)))
 (let (($x116 (= ?x143 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x116 true)))
 (let (($x98 (= $x79 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x162 (= $x85 true)))
 (let (($x105 (= $x162 true)))
 (let (($x140 (= $x105 true)))
 (let (($x164 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x167 (= $x164 true)))
 (let (($x119 (= $x167 true)))
 (let (($x110 (= $x119 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x106)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x68 $x149)))
 (let (($x151 (and $x161 $x133)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x160 $x151)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x155 $x158)))))))
 (let (($x112 (and $x144 $x6)))
 (let (($x132 (= $x112 true)))
 (let (($x97 (= $x132 true)))
 (let (($x126 (= $x97 true)))
 (let (($x78 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x134 (= $x78 true)))
 (let (($x107 (= $x134 true)))
 (let (($x70 (= $x107 true)))
 (let (($x63 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x61 (= $x63 true)))
 (let (($x67 (= $x61 true)))
 (let (($x146 (= $x67 true)))
 (let (($x36 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x52 (= $x36 true)))
 (let (($x27 (= $x52 true)))
 (let (($x64 (= $x27 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x71)))
 (let (($x42 (= ?x44 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x150 (= $x42 true)))
 (let (($x75 (= $x150 true)))
 (let (($x39 (= ?x44 input.dst.llvm-%n)))
 (let (($x73 (= $x39 true)))
 (let (($x16 (= $x73 true)))
 (let ((?x33 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x33)))
 (let (($x131 (= ?x47 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x131 true)))
 (let (($x26 (= $x92 true)))
 (let (($x195 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x55 (= $x195 true)))
 (let (($x13 (= $x55 true)))
 (let (($x69 (= $x13 true)))
 (let (($x30 (and $x69 $x26)))
 (let (($x51 (and $x30 $x16)))
 (let (($x76 (and $x51 $x75)))
 (let (($x74 (and $x76 $x64)))
 (let (($x108 (and $x74 $x146)))
 (let (($x60 (and $x108 $x70)))
 (let (($x90 (and $x60 $x126)))
 (let (($x84 (and $x90 $x110)))
 (let (($x32 (and $x84 $x140)))
 (let (($x43 (and $x32 $x98)))
 (let (($x277 (and $x43 $x283)))
 (let (($x109 (and $x277 $x168)))
 (let (($x215 (and $x109 $x117)))
 (let (($x279 (and $x215 $x246)))
 (let (($x264 (and $x279 $x284)))
 (let (($x224 (and $x264 $x262)))
 (let (($x14 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x269 (and (not $x14) $x224)))
 (let (($x20 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x34 (and $x20 $x269)))
 (let (($x24 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x237 (and $x24 $x34)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x169 (and $x10 $x237)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x205 (and $x7 $x169)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x218 (and $x15 $x205)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x217 (and $x35 $x218)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x278 (and $x54 $x217)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x139 (and $x41 $x278)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x123 (and $x19 $x139)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x239 (and $x40 $x123)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x77 (and $x96 $x239)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x66 (and $x12 $x77)))
 (let (($x177 (=> $x66 $x240)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 196 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x175 (bvsge ?x230 (_ bv1 32))))
 (let (($x174 (= $x175 true)))
 (let (($x103 (= $x174 true)))
 (let (($x206 (forall ((input.ind-%var1157X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1157X)))
 (=> $x193 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1157X) (_ bv0 32)))))
 ))
 (let (($x196 (forall ((input.ind-%var1156X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1156X)))
 (= $x193 false)))
 ))
 (let (($x275 (and $x196 $x206)))
 (let (($x261 (= $x275 true)))
 (let (($x176 (forall ((input.ind-%var1149X (_ BitVec 32)) (input.ind-%var1151X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1149X input.ind-%var1151X)))
 (let (($x246 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1149X)))
 (=> (and $x246 $x22) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1149X input.ind-%var1151X) (_ bv0 32))))))
 ))
 (let (($x180 (forall ((input.ind-%var1149X (_ BitVec 32)) (input.ind-%var1150X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1149X)))
 (=> $x246 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1149X input.ind-%var1150X) false))))
 ))
 (let (($x113 (forall ((input.ind-%var1148X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1148X)))
 (= $x207 false)))
 ))
 (let (($x274 (and (and $x113 $x180) $x176)))
 (let (($x263 (= $x274 true)))
 (let (($x266 (forall ((input.ind-%var1137X (_ BitVec 32)) (input.ind-%var1139X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1137X input.ind-%var1139X)))
 (let (($x246 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1137X)))
 (=> (and $x246 $x22) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1137X input.ind-%var1139X) (_ bv0 32))))))
 ))
 (let (($x170 (forall ((input.ind-%var1137X (_ BitVec 32)) (input.ind-%var1138X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1137X)))
 (=> $x246 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1137X input.ind-%var1138X) false))))
 ))
 (let (($x241 (forall ((input.ind-%var1136X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1136X)))
 (= $x207 false)))
 ))
 (let (($x229 (and (and $x241 $x170) $x266)))
 (let (($x118 (= $x229 true)))
 (let (($x181 (forall ((input.ind-%var1127X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1127X)))
 (=> $x193 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1127X) (_ bv0 32)))))
 ))
 (let (($x139 (forall ((input.ind-%var1126X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1126X)))
 (= $x193 false)))
 ))
 (let (($x272 (and $x139 $x181)))
 (let (($x240 (= $x272 true)))
 (let (($x269 (forall ((input.ind-%var1119X (_ BitVec 32)) (input.ind-%var1121X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1119X input.ind-%var1121X)))
 (let (($x246 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1119X)))
 (=> (and $x246 $x22) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1119X input.ind-%var1121X) (_ bv0 32))))))
 ))
 (let (($x252 (forall ((input.ind-%var1119X (_ BitVec 32)) (input.ind-%var1120X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1119X)))
 (=> $x246 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1119X input.ind-%var1120X) false))))
 ))
 (let (($x168 (forall ((input.ind-%var1118X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1118X)))
 (= $x207 false)))
 ))
 (let (($x237 (and (and $x168 $x252) $x269)))
 (let (($x169 (= $x237 true)))
 (let (($x166 (forall ((input.ind-%var1109X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1109X)))
 (=> $x193 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1109X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var1108X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1108X)))
 (= $x193 false)))
 ))
 (let (($x251 (and $x120 $x166)))
 (let (($x222 (= $x251 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x91)))
 (let (($x116 (= ?x143 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x116 true)))
 (let (($x98 (= $x79 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x162 (= $x85 true)))
 (let (($x105 (= $x162 true)))
 (let (($x140 (= $x105 true)))
 (let (($x164 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x167 (= $x164 true)))
 (let (($x119 (= $x167 true)))
 (let (($x110 (= $x119 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x106)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x68 $x149)))
 (let (($x151 (and $x161 $x133)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x136 $x151)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x53)))))))
 (let (($x112 (and $x160 $x6)))
 (let (($x132 (= $x112 true)))
 (let (($x97 (= $x132 true)))
 (let (($x126 (= $x97 true)))
 (let (($x146 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x108 (= $x146 true)))
 (let (($x78 (= $x108 true)))
 (let (($x134 (= $x78 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x74 (= $x64 true)))
 (let (($x63 (= $x74 true)))
 (let (($x61 (= $x63 true)))
 (let (($x75 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x76 (= $x75 true)))
 (let (($x36 (= $x76 true)))
 (let (($x52 (= $x36 true)))
 (let ((?x26 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x26)))
 (let (($x16 (= ?x30 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x51 (= $x16 true)))
 (let (($x42 (= $x51 true)))
 (let (($x71 (= ?x30 input.dst.llvm-%n)))
 (let (($x44 (= $x71 true)))
 (let (($x39 (= $x44 true)))
 (let ((?x87 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x87)))
 (let (($x47 (= ?x18 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x47 true)))
 (let (($x131 (= $x5 true)))
 (let (($x86 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (= $x86 true)))
 (let (($x195 (= $x56 true)))
 (let (($x55 (= $x195 true)))
 (let (($x92 (and $x55 $x131)))
 (let (($x73 (and $x92 $x39)))
 (let (($x150 (and $x73 $x42)))
 (let (($x27 (and $x150 $x52)))
 (let (($x67 (and $x27 $x61)))
 (let (($x107 (and $x67 $x134)))
 (let (($x90 (and $x107 $x126)))
 (let (($x84 (and $x90 $x110)))
 (let (($x32 (and $x84 $x140)))
 (let (($x43 (and $x32 $x98)))
 (let (($x201 (and $x43 $x222)))
 (let (($x205 (and $x201 $x169)))
 (let (($x177 (and $x205 $x240)))
 (let (($x141 (and $x177 $x118)))
 (let (($x38 (and $x141 $x263)))
 (let (($x171 (and $x38 $x261)))
 (let (($x17 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x226 (and (not $x17) $x171)))
 (let (($x24 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x210 (and $x24 $x226)))
 (let (($x10 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x282 (and $x10 $x210)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x173 (and $x21 $x282)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x101 (and $x11 $x173)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x122 (and $x9 $x101)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x49 (and $x45 $x122)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x159 (and $x29 $x49)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x130 (and $x37 $x159)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x189 (and $x50 $x130)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x111 (and $x48 $x189)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x99 (and $x148 $x111)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x197 (and $x12 $x99)))
 (let (($x280 (=> $x197 $x103)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x175 (bvsge ?x230 (_ bv1 32))))
 (let (($x174 (= $x175 true)))
 (let (($x103 (= $x174 true)))
 (let (($x206 (forall ((input.ind-%var1157X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1157X)))
 (=> $x193 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1157X) (_ bv0 32)))))
 ))
 (let (($x196 (forall ((input.ind-%var1156X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1156X)))
 (= $x193 false)))
 ))
 (let (($x275 (and $x196 $x206)))
 (let (($x261 (= $x275 true)))
 (let (($x176 (forall ((input.ind-%var1149X (_ BitVec 32)) (input.ind-%var1151X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1149X input.ind-%var1151X)))
 (let (($x246 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1149X)))
 (=> (and $x246 $x22) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1149X input.ind-%var1151X) (_ bv0 32))))))
 ))
 (let (($x180 (forall ((input.ind-%var1149X (_ BitVec 32)) (input.ind-%var1150X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1149X)))
 (=> $x246 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1149X input.ind-%var1150X) false))))
 ))
 (let (($x113 (forall ((input.ind-%var1148X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1148X)))
 (= $x207 false)))
 ))
 (let (($x274 (and (and $x113 $x180) $x176)))
 (let (($x263 (= $x274 true)))
 (let (($x266 (forall ((input.ind-%var1137X (_ BitVec 32)) (input.ind-%var1139X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1137X input.ind-%var1139X)))
 (let (($x246 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1137X)))
 (=> (and $x246 $x22) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1137X input.ind-%var1139X) (_ bv0 32))))))
 ))
 (let (($x170 (forall ((input.ind-%var1137X (_ BitVec 32)) (input.ind-%var1138X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1137X)))
 (=> $x246 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1137X input.ind-%var1138X) false))))
 ))
 (let (($x241 (forall ((input.ind-%var1136X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1136X)))
 (= $x207 false)))
 ))
 (let (($x229 (and (and $x241 $x170) $x266)))
 (let (($x118 (= $x229 true)))
 (let (($x181 (forall ((input.ind-%var1127X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1127X)))
 (=> $x193 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1127X) (_ bv0 32)))))
 ))
 (let (($x139 (forall ((input.ind-%var1126X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1126X)))
 (= $x193 false)))
 ))
 (let (($x272 (and $x139 $x181)))
 (let (($x240 (= $x272 true)))
 (let (($x269 (forall ((input.ind-%var1119X (_ BitVec 32)) (input.ind-%var1121X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1119X input.ind-%var1121X)))
 (let (($x246 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1119X)))
 (=> (and $x246 $x22) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1119X input.ind-%var1121X) (_ bv0 32))))))
 ))
 (let (($x252 (forall ((input.ind-%var1119X (_ BitVec 32)) (input.ind-%var1120X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1119X)))
 (=> $x246 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1119X input.ind-%var1120X) false))))
 ))
 (let (($x168 (forall ((input.ind-%var1118X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1118X)))
 (= $x207 false)))
 ))
 (let (($x237 (and (and $x168 $x252) $x269)))
 (let (($x169 (= $x237 true)))
 (let (($x166 (forall ((input.ind-%var1109X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1109X)))
 (=> $x193 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1109X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var1108X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1108X)))
 (= $x193 false)))
 ))
 (let (($x251 (and $x120 $x166)))
 (let (($x222 (= $x251 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x91)))
 (let (($x116 (= ?x143 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x116 true)))
 (let (($x98 (= $x79 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x162 (= $x85 true)))
 (let (($x105 (= $x162 true)))
 (let (($x140 (= $x105 true)))
 (let (($x164 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x167 (= $x164 true)))
 (let (($x119 (= $x167 true)))
 (let (($x110 (= $x119 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x106)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x68 $x149)))
 (let (($x151 (and $x161 $x133)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x136 $x151)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x53)))))))
 (let (($x112 (and $x160 $x6)))
 (let (($x132 (= $x112 true)))
 (let (($x97 (= $x132 true)))
 (let (($x126 (= $x97 true)))
 (let (($x146 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x108 (= $x146 true)))
 (let (($x78 (= $x108 true)))
 (let (($x134 (= $x78 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x74 (= $x64 true)))
 (let (($x63 (= $x74 true)))
 (let (($x61 (= $x63 true)))
 (let (($x75 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x76 (= $x75 true)))
 (let (($x36 (= $x76 true)))
 (let (($x52 (= $x36 true)))
 (let ((?x26 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x26)))
 (let (($x16 (= ?x30 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x51 (= $x16 true)))
 (let (($x42 (= $x51 true)))
 (let (($x71 (= ?x30 input.dst.llvm-%n)))
 (let (($x44 (= $x71 true)))
 (let (($x39 (= $x44 true)))
 (let ((?x87 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x87)))
 (let (($x47 (= ?x18 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x47 true)))
 (let (($x131 (= $x5 true)))
 (let (($x86 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (= $x86 true)))
 (let (($x195 (= $x56 true)))
 (let (($x55 (= $x195 true)))
 (let (($x92 (and $x55 $x131)))
 (let (($x73 (and $x92 $x39)))
 (let (($x150 (and $x73 $x42)))
 (let (($x27 (and $x150 $x52)))
 (let (($x67 (and $x27 $x61)))
 (let (($x107 (and $x67 $x134)))
 (let (($x90 (and $x107 $x126)))
 (let (($x84 (and $x90 $x110)))
 (let (($x32 (and $x84 $x140)))
 (let (($x43 (and $x32 $x98)))
 (let (($x201 (and $x43 $x222)))
 (let (($x205 (and $x201 $x169)))
 (let (($x177 (and $x205 $x240)))
 (let (($x141 (and $x177 $x118)))
 (let (($x38 (and $x141 $x263)))
 (let (($x171 (and $x38 $x261)))
 (let (($x17 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x226 (and (not $x17) $x171)))
 (let (($x24 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x210 (and $x24 $x226)))
 (let (($x10 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x282 (and $x10 $x210)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x173 (and $x21 $x282)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x101 (and $x11 $x173)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x122 (and $x9 $x101)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x49 (and $x45 $x122)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x159 (and $x29 $x49)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x130 (and $x37 $x159)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x189 (and $x50 $x130)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x111 (and $x48 $x189)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x99 (and $x148 $x111)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x197 (and $x12 $x99)))
 (let (($x280 (=> $x197 $x103)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0139fde3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x242 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x223 (bvsge ?x242 (_ bv0 32))))
 (let (($x129 (= $x223 true)))
 (let (($x188 (= $x129 true)))
 (let (($x191 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1235X)))
 (=> $x32 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1235X) (_ bv0 32)))))
 ))
 (let (($x94 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1234X)))
 (= $x32 false)))
 ))
 (let (($x165 (and $x94 $x191)))
 (let (($x258 (= $x165 true)))
 (let (($x288 (forall ((input.ind-%var1227X (_ BitVec 32)) (input.ind-%var1229X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1227X input.ind-%var1229X)))
 (let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1227X)))
 (=> (and $x139 $x224) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1227X input.ind-%var1229X) (_ bv0 32))))))
 ))
 (let (($x192 (forall ((input.ind-%var1227X (_ BitVec 32)) (input.ind-%var1228X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1227X)))
 (=> $x139 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1227X input.ind-%var1228X) false))))
 ))
 (let (($x194 (forall ((input.ind-%var1226X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1226X)))
 (= $x168 false)))
 ))
 (let (($x145 (and (and $x194 $x192) $x288)))
 (let (($x82 (= $x145 true)))
 (let (($x123 (forall ((input.ind-%var1215X (_ BitVec 32)) (input.ind-%var1217X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1215X input.ind-%var1217X)))
 (let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1215X)))
 (=> (and $x139 $x224) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1215X input.ind-%var1217X) (_ bv0 32))))))
 ))
 (let (($x213 (forall ((input.ind-%var1215X (_ BitVec 32)) (input.ind-%var1216X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1215X)))
 (=> $x139 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1215X input.ind-%var1216X) false))))
 ))
 (let (($x99 (forall ((input.ind-%var1214X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1214X)))
 (= $x168 false)))
 ))
 (let (($x277 (and (and $x99 $x213) $x123)))
 (let (($x109 (= $x277 true)))
 (let (($x101 (forall ((input.ind-%var1205X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1205X)))
 (=> $x32 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1205X) (_ bv0 32)))))
 ))
 (let (($x261 (forall ((input.ind-%var1204X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1204X)))
 (= $x32 false)))
 ))
 (let (($x122 (and $x261 $x101)))
 (let (($x49 (= $x122 true)))
 (let (($x89 (forall ((input.ind-%var1197X (_ BitVec 32)) (input.ind-%var1199X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1197X input.ind-%var1199X)))
 (let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1197X)))
 (=> (and $x139 $x224) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1197X input.ind-%var1199X) (_ bv0 32))))))
 ))
 (let (($x272 (forall ((input.ind-%var1197X (_ BitVec 32)) (input.ind-%var1198X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1197X)))
 (=> $x139 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1197X input.ind-%var1198X) false))))
 ))
 (let (($x199 (forall ((input.ind-%var1196X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1196X)))
 (= $x168 false)))
 ))
 (let (($x274 (and (and $x199 $x272) $x89)))
 (let (($x263 (= $x274 true)))
 (let (($x166 (forall ((input.ind-%var1187X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1187X)))
 (=> $x32 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1187X) (_ bv0 32)))))
 ))
 (let (($x79 (forall ((input.ind-%var1186X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1186X)))
 (= $x32 false)))
 ))
 (let (($x251 (and $x79 $x166)))
 (let (($x222 (= $x251 true)))
 (let ((?x164 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x164)))
 (let (($x119 (= ?x167 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x119 true)))
 (let (($x84 (= $x110 true)))
 (let ((?x151 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x151)))
 (let (($x132 (= ?x6 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x132 true)))
 (let (($x126 (= $x97 true)))
 (let (($x28 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x149 (= $x28 true)))
 (let (($x161 (= $x149 true)))
 (let (($x106 (= $x161 true)))
 (let (($x144 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x160 (= $x144 true)))
 (let (($x88 (= $x160 true)))
 (let (($x136 (= $x88 true)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x156)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x78 $x114)))
 (let (($x72 (and $x121 $x147)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x42 $x72)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x64)))))))
 (let (($x155 (and $x108 $x158)))
 (let (($x53 (= $x155 true)))
 (let (($x46 (= $x53 true)))
 (let (($x127 (= $x46 true)))
 (let (($x26 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x30 (= $x26 true)))
 (let (($x71 (= $x30 true)))
 (let (($x44 (= $x71 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x55)))
 (let (($x47 (= ?x13 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x5 (= $x47 true)))
 (let (($x131 (= $x5 true)))
 (let (($x69 (= ?x13 input.dst.llvm-%n)))
 (let (($x87 (= $x69 true)))
 (let (($x18 (= $x87 true)))
 (let (($x14 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x14 true)))
 (let (($x86 (= $x185 true)))
 (let (($x56 (= $x86 true)))
 (let (($x33 (and $x56 $x18)))
 (let (($x92 (and $x33 $x131)))
 (let (($x39 (and $x92 $x44)))
 (let (($x62 (and $x39 $x127)))
 (let (($x68 (and $x62 $x136)))
 (let (($x133 (and $x68 $x106)))
 (let (($x90 (and $x133 $x126)))
 (let (($x85 (and $x90 $x84)))
 (let (($x201 (and $x85 $x222)))
 (let (($x38 (and $x201 $x263)))
 (let (($x159 (and $x38 $x49)))
 (let (($x287 (and $x159 $x109)))
 (let (($x153 (and $x287 $x82)))
 (let (($x183 (and $x153 $x258)))
 (let (($x20 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x278 (and (not $x20) $x183)))
 (let (($x10 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x66 (and $x10 $x278)))
 (let (($x21 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x244 (and $x21 $x66)))
 (let (($x100 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x248 (and $x100 $x244)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x255 (and $x15 $x248)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x65 (and $x35 $x255)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x239 (and $x54 $x65)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x178 (and $x41 $x239)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x245 (and $x19 $x178)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x80 (and $x40 $x245)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x236 (and $x96 $x80)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x220 (and $x58 $x236)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x204 (and $x12 $x220)))
 (let (($x186 (=> $x204 $x188)))
 (not $x186))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x242 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x223 (bvsge ?x242 (_ bv0 32))))
 (let (($x129 (= $x223 true)))
 (let (($x188 (= $x129 true)))
 (let (($x191 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1235X)))
 (=> $x32 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1235X) (_ bv0 32)))))
 ))
 (let (($x94 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1234X)))
 (= $x32 false)))
 ))
 (let (($x165 (and $x94 $x191)))
 (let (($x258 (= $x165 true)))
 (let (($x288 (forall ((input.ind-%var1227X (_ BitVec 32)) (input.ind-%var1229X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1227X input.ind-%var1229X)))
 (let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1227X)))
 (=> (and $x139 $x224) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1227X input.ind-%var1229X) (_ bv0 32))))))
 ))
 (let (($x192 (forall ((input.ind-%var1227X (_ BitVec 32)) (input.ind-%var1228X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1227X)))
 (=> $x139 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1227X input.ind-%var1228X) false))))
 ))
 (let (($x194 (forall ((input.ind-%var1226X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1226X)))
 (= $x168 false)))
 ))
 (let (($x145 (and (and $x194 $x192) $x288)))
 (let (($x82 (= $x145 true)))
 (let (($x123 (forall ((input.ind-%var1215X (_ BitVec 32)) (input.ind-%var1217X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1215X input.ind-%var1217X)))
 (let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1215X)))
 (=> (and $x139 $x224) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1215X input.ind-%var1217X) (_ bv0 32))))))
 ))
 (let (($x213 (forall ((input.ind-%var1215X (_ BitVec 32)) (input.ind-%var1216X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1215X)))
 (=> $x139 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1215X input.ind-%var1216X) false))))
 ))
 (let (($x99 (forall ((input.ind-%var1214X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1214X)))
 (= $x168 false)))
 ))
 (let (($x277 (and (and $x99 $x213) $x123)))
 (let (($x109 (= $x277 true)))
 (let (($x101 (forall ((input.ind-%var1205X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1205X)))
 (=> $x32 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1205X) (_ bv0 32)))))
 ))
 (let (($x261 (forall ((input.ind-%var1204X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1204X)))
 (= $x32 false)))
 ))
 (let (($x122 (and $x261 $x101)))
 (let (($x49 (= $x122 true)))
 (let (($x89 (forall ((input.ind-%var1197X (_ BitVec 32)) (input.ind-%var1199X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1197X input.ind-%var1199X)))
 (let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1197X)))
 (=> (and $x139 $x224) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1197X input.ind-%var1199X) (_ bv0 32))))))
 ))
 (let (($x272 (forall ((input.ind-%var1197X (_ BitVec 32)) (input.ind-%var1198X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1197X)))
 (=> $x139 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1197X input.ind-%var1198X) false))))
 ))
 (let (($x199 (forall ((input.ind-%var1196X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1196X)))
 (= $x168 false)))
 ))
 (let (($x274 (and (and $x199 $x272) $x89)))
 (let (($x263 (= $x274 true)))
 (let (($x166 (forall ((input.ind-%var1187X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1187X)))
 (=> $x32 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1187X) (_ bv0 32)))))
 ))
 (let (($x79 (forall ((input.ind-%var1186X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1186X)))
 (= $x32 false)))
 ))
 (let (($x251 (and $x79 $x166)))
 (let (($x222 (= $x251 true)))
 (let ((?x164 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x164)))
 (let (($x119 (= ?x167 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x119 true)))
 (let (($x84 (= $x110 true)))
 (let ((?x151 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x151)))
 (let (($x132 (= ?x6 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x132 true)))
 (let (($x126 (= $x97 true)))
 (let (($x28 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x149 (= $x28 true)))
 (let (($x161 (= $x149 true)))
 (let (($x106 (= $x161 true)))
 (let (($x144 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x160 (= $x144 true)))
 (let (($x88 (= $x160 true)))
 (let (($x136 (= $x88 true)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x156)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x78 $x114)))
 (let (($x72 (and $x121 $x147)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x42 $x72)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x64)))))))
 (let (($x155 (and $x108 $x158)))
 (let (($x53 (= $x155 true)))
 (let (($x46 (= $x53 true)))
 (let (($x127 (= $x46 true)))
 (let (($x26 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x30 (= $x26 true)))
 (let (($x71 (= $x30 true)))
 (let (($x44 (= $x71 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x55)))
 (let (($x47 (= ?x13 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x5 (= $x47 true)))
 (let (($x131 (= $x5 true)))
 (let (($x69 (= ?x13 input.dst.llvm-%n)))
 (let (($x87 (= $x69 true)))
 (let (($x18 (= $x87 true)))
 (let (($x14 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x14 true)))
 (let (($x86 (= $x185 true)))
 (let (($x56 (= $x86 true)))
 (let (($x33 (and $x56 $x18)))
 (let (($x92 (and $x33 $x131)))
 (let (($x39 (and $x92 $x44)))
 (let (($x62 (and $x39 $x127)))
 (let (($x68 (and $x62 $x136)))
 (let (($x133 (and $x68 $x106)))
 (let (($x90 (and $x133 $x126)))
 (let (($x85 (and $x90 $x84)))
 (let (($x201 (and $x85 $x222)))
 (let (($x38 (and $x201 $x263)))
 (let (($x159 (and $x38 $x49)))
 (let (($x287 (and $x159 $x109)))
 (let (($x153 (and $x287 $x82)))
 (let (($x183 (and $x153 $x258)))
 (let (($x20 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x278 (and (not $x20) $x183)))
 (let (($x10 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x66 (and $x10 $x278)))
 (let (($x21 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x244 (and $x21 $x66)))
 (let (($x100 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x248 (and $x100 $x244)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x255 (and $x15 $x248)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x65 (and $x35 $x255)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x239 (and $x54 $x65)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x178 (and $x41 $x239)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x245 (and $x19 $x178)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x80 (and $x40 $x245)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x236 (and $x96 $x80)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x220 (and $x58 $x236)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x204 (and $x12 $x220)))
 (let (($x186 (=> $x204 $x188)))
 (not $x186))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000114)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000117)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000114)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000258)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000025b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000258)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x221 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x217 (bvuge ?x221 (_ bv1 32))))
 (let (($x125 (= $x217 true)))
 (let (($x163 (= $x125 true)))
 (let (($x275 (forall ((input.ind-%var1313X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1313X)))
 (=> $x84 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1313X) (_ bv0 32)))))
 ))
 (let (($x43 (forall ((input.ind-%var1312X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1312X)))
 (= $x84 false)))
 ))
 (let (($x282 (and $x43 $x275)))
 (let (($x111 (= $x282 true)))
 (let (($x174 (forall ((input.ind-%var1305X (_ BitVec 32)) (input.ind-%var1307X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1305X input.ind-%var1307X)))
 (let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1305X)))
 (=> (and $x99 $x261) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1305X input.ind-%var1307X) (_ bv0 32))))))
 ))
 (let (($x115 (forall ((input.ind-%var1305X (_ BitVec 32)) (input.ind-%var1306X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1305X)))
 (=> $x99 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1305X input.ind-%var1306X) false))))
 ))
 (let (($x196 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1304X)))
 (= $x181 false)))
 ))
 (let (($x83 (and (and $x196 $x115) $x174)))
 (let (($x77 (= $x83 true)))
 (let (($x210 (forall ((input.ind-%var1293X (_ BitVec 32)) (input.ind-%var1295X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1293X input.ind-%var1295X)))
 (let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1293X)))
 (=> (and $x99 $x261) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1293X input.ind-%var1295X) (_ bv0 32))))))
 ))
 (let (($x269 (forall ((input.ind-%var1293X (_ BitVec 32)) (input.ind-%var1294X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1293X)))
 (=> $x99 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1293X input.ind-%var1294X) false))))
 ))
 (let (($x188 (forall ((input.ind-%var1292X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1292X)))
 (= $x181 false)))
 ))
 (let (($x162 (and (and $x188 $x269) $x210)))
 (let (($x105 (= $x162 true)))
 (let (($x80 (forall ((input.ind-%var1283X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1283X)))
 (=> $x84 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1283X) (_ bv0 32)))))
 ))
 (let (($x248 (forall ((input.ind-%var1282X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1282X)))
 (= $x84 false)))
 ))
 (let (($x236 (and $x248 $x80)))
 (let (($x220 (= $x236 true)))
 (let (($x94 (forall ((input.ind-%var1275X (_ BitVec 32)) (input.ind-%var1277X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1275X input.ind-%var1277X)))
 (let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1275X)))
 (=> (and $x99 $x261) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1275X input.ind-%var1277X) (_ bv0 32))))))
 ))
 (let (($x8 (forall ((input.ind-%var1275X (_ BitVec 32)) (input.ind-%var1276X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1275X)))
 (=> $x99 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1275X input.ind-%var1276X) false))))
 ))
 (let (($x219 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1274X)))
 (= $x181 false)))
 ))
 (let (($x165 (and (and $x219 $x8) $x94)))
 (let (($x258 (= $x165 true)))
 (let (($x22 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1265X)))
 (=> $x84 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1265X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1264X)))
 (= $x84 false)))
 ))
 (let (($x199 (and $x116 $x22)))
 (let (($x25 (= $x199 true)))
 (let ((?x112 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x112)))
 (let (($x97 (= ?x132 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x97 true)))
 (let (($x90 (= $x126 true)))
 (let (($x161 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x106 (= $x161 true)))
 (let (($x133 (= $x106 true)))
 (let (($x151 (= $x133 true)))
 (let (($x136 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x136 true)))
 (let (($x102 (= $x68 true)))
 (let (($x28 (= $x102 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x72)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (and $x107 $x156)))
 (let (($x155 (and $x147 $x158)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x76 $x155)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x61)))))))
 (let (($x46 (and $x134 $x53)))
 (let (($x127 (= $x46 true)))
 (let (($x62 (= $x127 true)))
 (let (($x144 (= $x62 true)))
 (let (($x26 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x30 (= $x26 true)))
 (let (($x71 (= $x30 true)))
 (let (($x44 (= $x71 true)))
 (let ((?x195 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x195)))
 (let (($x47 (= ?x55 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x5 (= $x47 true)))
 (let (($x131 (= $x5 true)))
 (let (($x69 (= ?x55 input.dst.llvm-%n)))
 (let (($x87 (= $x69 true)))
 (let (($x18 (= $x87 true)))
 (let ((?x17 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x17)))
 (let (($x185 (= ?x187 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x185 true)))
 (let (($x56 (= $x86 true)))
 (let (($x33 (and $x56 $x18)))
 (let (($x92 (and $x33 $x131)))
 (let (($x39 (and $x92 $x44)))
 (let (($x160 (and $x39 $x144)))
 (let (($x149 (and $x160 $x28)))
 (let (($x6 (and $x149 $x151)))
 (let (($x164 (and $x6 $x90)))
 (let (($x139 (and $x164 $x25)))
 (let (($x183 (and $x139 $x258)))
 (let (($x204 (and $x183 $x220)))
 (let (($x197 (and $x204 $x105)))
 (let (($x286 (and $x197 $x77)))
 (let (($x177 (and $x286 $x111)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x118 (and (not $x24) $x177)))
 (let (($x21 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x226 (and $x21 $x118)))
 (let (($x100 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x173 (and $x100 $x226)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x103 (and $x7 $x173)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x198 (and $x9 $x103)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x175 (and $x45 $x198)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x280 (and $x29 $x175)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x202 (and $x37 $x280)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x218 (and $x50 $x202)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x267 (and $x48 $x218)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x233 (and $x148 $x267)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x289 (and $x70 $x233)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x264 (and $x12 $x289)))
 (let (($x260 (=> $x264 $x163)))
 (not $x260)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x221 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x217 (bvuge ?x221 (_ bv1 32))))
 (let (($x125 (= $x217 true)))
 (let (($x163 (= $x125 true)))
 (let (($x275 (forall ((input.ind-%var1313X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1313X)))
 (=> $x84 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1313X) (_ bv0 32)))))
 ))
 (let (($x43 (forall ((input.ind-%var1312X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1312X)))
 (= $x84 false)))
 ))
 (let (($x282 (and $x43 $x275)))
 (let (($x111 (= $x282 true)))
 (let (($x174 (forall ((input.ind-%var1305X (_ BitVec 32)) (input.ind-%var1307X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1305X input.ind-%var1307X)))
 (let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1305X)))
 (=> (and $x99 $x261) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1305X input.ind-%var1307X) (_ bv0 32))))))
 ))
 (let (($x115 (forall ((input.ind-%var1305X (_ BitVec 32)) (input.ind-%var1306X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1305X)))
 (=> $x99 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1305X input.ind-%var1306X) false))))
 ))
 (let (($x196 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1304X)))
 (= $x181 false)))
 ))
 (let (($x83 (and (and $x196 $x115) $x174)))
 (let (($x77 (= $x83 true)))
 (let (($x210 (forall ((input.ind-%var1293X (_ BitVec 32)) (input.ind-%var1295X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1293X input.ind-%var1295X)))
 (let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1293X)))
 (=> (and $x99 $x261) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1293X input.ind-%var1295X) (_ bv0 32))))))
 ))
 (let (($x269 (forall ((input.ind-%var1293X (_ BitVec 32)) (input.ind-%var1294X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1293X)))
 (=> $x99 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1293X input.ind-%var1294X) false))))
 ))
 (let (($x188 (forall ((input.ind-%var1292X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1292X)))
 (= $x181 false)))
 ))
 (let (($x162 (and (and $x188 $x269) $x210)))
 (let (($x105 (= $x162 true)))
 (let (($x80 (forall ((input.ind-%var1283X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1283X)))
 (=> $x84 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1283X) (_ bv0 32)))))
 ))
 (let (($x248 (forall ((input.ind-%var1282X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1282X)))
 (= $x84 false)))
 ))
 (let (($x236 (and $x248 $x80)))
 (let (($x220 (= $x236 true)))
 (let (($x94 (forall ((input.ind-%var1275X (_ BitVec 32)) (input.ind-%var1277X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1275X input.ind-%var1277X)))
 (let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1275X)))
 (=> (and $x99 $x261) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1275X input.ind-%var1277X) (_ bv0 32))))))
 ))
 (let (($x8 (forall ((input.ind-%var1275X (_ BitVec 32)) (input.ind-%var1276X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1275X)))
 (=> $x99 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1275X input.ind-%var1276X) false))))
 ))
 (let (($x219 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1274X)))
 (= $x181 false)))
 ))
 (let (($x165 (and (and $x219 $x8) $x94)))
 (let (($x258 (= $x165 true)))
 (let (($x22 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1265X)))
 (=> $x84 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1265X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1264X)))
 (= $x84 false)))
 ))
 (let (($x199 (and $x116 $x22)))
 (let (($x25 (= $x199 true)))
 (let ((?x112 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x112)))
 (let (($x97 (= ?x132 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x97 true)))
 (let (($x90 (= $x126 true)))
 (let (($x161 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x106 (= $x161 true)))
 (let (($x133 (= $x106 true)))
 (let (($x151 (= $x133 true)))
 (let (($x136 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x136 true)))
 (let (($x102 (= $x68 true)))
 (let (($x28 (= $x102 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x72)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (and $x107 $x156)))
 (let (($x155 (and $x147 $x158)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x76 $x155)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x61)))))))
 (let (($x46 (and $x134 $x53)))
 (let (($x127 (= $x46 true)))
 (let (($x62 (= $x127 true)))
 (let (($x144 (= $x62 true)))
 (let (($x26 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x30 (= $x26 true)))
 (let (($x71 (= $x30 true)))
 (let (($x44 (= $x71 true)))
 (let ((?x195 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x195)))
 (let (($x47 (= ?x55 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x5 (= $x47 true)))
 (let (($x131 (= $x5 true)))
 (let (($x69 (= ?x55 input.dst.llvm-%n)))
 (let (($x87 (= $x69 true)))
 (let (($x18 (= $x87 true)))
 (let ((?x17 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x17)))
 (let (($x185 (= ?x187 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x185 true)))
 (let (($x56 (= $x86 true)))
 (let (($x33 (and $x56 $x18)))
 (let (($x92 (and $x33 $x131)))
 (let (($x39 (and $x92 $x44)))
 (let (($x160 (and $x39 $x144)))
 (let (($x149 (and $x160 $x28)))
 (let (($x6 (and $x149 $x151)))
 (let (($x164 (and $x6 $x90)))
 (let (($x139 (and $x164 $x25)))
 (let (($x183 (and $x139 $x258)))
 (let (($x204 (and $x183 $x220)))
 (let (($x197 (and $x204 $x105)))
 (let (($x286 (and $x197 $x77)))
 (let (($x177 (and $x286 $x111)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x118 (and (not $x24) $x177)))
 (let (($x21 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x226 (and $x21 $x118)))
 (let (($x100 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x173 (and $x100 $x226)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x103 (and $x7 $x173)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x198 (and $x9 $x103)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x175 (and $x45 $x198)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x280 (and $x29 $x175)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x202 (and $x37 $x280)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x218 (and $x50 $x202)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x267 (and $x48 $x218)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x233 (and $x148 $x267)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x289 (and $x70 $x233)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x264 (and $x12 $x289)))
 (let (($x260 (=> $x264 $x163)))
 (not $x260)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000568)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000056b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000568)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x189 (bvmul ?x170 (_ bv4294967295 32))))
 (let ((?x171 (bvneg ?x189)))
 (let (($x252 (= ?x171 ?x98)))
 (let (($x207 (= $x252 true)))
 (let (($x222 (forall ((input.ind-%var1391X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1391X)))
 (=> $x6 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1391X) (_ bv0 32)))))
 ))
 (let (($x230 (forall ((input.ind-%var1390X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1390X)))
 (= $x6 false)))
 ))
 (let (($x122 (and $x230 $x222)))
 (let (($x292 (= $x122 true)))
 (let (($x140 (forall ((input.ind-%var1383X (_ BitVec 32)) (input.ind-%var1385X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1383X input.ind-%var1385X)))
 (let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1383X)))
 (=> (and $x248 $x153) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1383X input.ind-%var1385X) (_ bv0 32))))))
 ))
 (let (($x95 (forall ((input.ind-%var1383X (_ BitVec 32)) (input.ind-%var1384X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1383X)))
 (=> $x248 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1383X input.ind-%var1384X) false))))
 ))
 (let (($x119 (forall ((input.ind-%var1382X (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1382X)))
 (= $x219 false)))
 ))
 (let (($x242 (and (and $x119 $x95) $x140)))
 (let (($x223 (= $x242 true)))
 (let (($x255 (forall ((input.ind-%var1371X (_ BitVec 32)) (input.ind-%var1373X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1371X input.ind-%var1373X)))
 (let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1371X)))
 (=> (and $x248 $x153) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1371X input.ind-%var1373X) (_ bv0 32))))))
 ))
 (let (($x128 (forall ((input.ind-%var1371X (_ BitVec 32)) (input.ind-%var1372X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1371X)))
 (=> $x248 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1371X input.ind-%var1372X) false))))
 ))
 (let (($x289 (forall ((input.ind-%var1370X (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1370X)))
 (= $x219 false)))
 ))
 (let (($x238 (and (and $x289 $x128) $x255)))
 (let (($x141 (= $x238 true)))
 (let (($x198 (forall ((input.ind-%var1361X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1361X)))
 (=> $x6 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1361X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var1360X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1360X)))
 (= $x6 false)))
 ))
 (let (($x175 (and $x111 $x198)))
 (let (($x280 (= $x175 true)))
 (let (($x203 (forall ((input.ind-%var1353X (_ BitVec 32)) (input.ind-%var1355X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1353X input.ind-%var1355X)))
 (let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1353X)))
 (=> (and $x248 $x153) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1353X input.ind-%var1355X) (_ bv0 32))))))
 ))
 (let (($x236 (forall ((input.ind-%var1353X (_ BitVec 32)) (input.ind-%var1354X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1353X)))
 (=> $x248 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1353X input.ind-%var1354X) false))))
 ))
 (let (($x159 (forall ((input.ind-%var1352X (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1352X)))
 (= $x219 false)))
 ))
 (let (($x83 (and (and $x159 $x236) $x203)))
 (let (($x77 (= $x83 true)))
 (let (($x22 (forall ((input.ind-%var1343X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1343X)))
 (=> $x6 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1343X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var1342X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1342X)))
 (= $x6 false)))
 ))
 (let (($x199 (and $x126 $x22)))
 (let (($x25 (= $x199 true)))
 (let ((?x136 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x136)))
 (let (($x102 (= ?x68 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x102 true)))
 (let (($x149 (= $x28 true)))
 (let (($x127 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x127 true)))
 (let (($x144 (= $x62 true)))
 (let (($x160 (= $x144 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x107)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x134)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x51 $x146)))
 (let (($x121 (and $x76 $x114)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x30 $x121)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x36)))))))
 (let (($x147 (and $x108 $x156)))
 (let (($x72 (= $x147 true)))
 (let (($x158 (= $x72 true)))
 (let (($x155 (= $x158 true)))
 (let ((?x86 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x86)))
 (let (($x18 (= ?x56 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x33 (= $x18 true)))
 (let (($x47 (= $x33 true)))
 (let (($x55 (= ?x56 input.dst.llvm-%n)))
 (let (($x13 (= $x55 true)))
 (let (($x69 (= $x13 true)))
 (let ((?x20 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x20)))
 (let (($x187 (= ?x157 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x14 (= $x187 true)))
 (let (($x185 (= $x14 true)))
 (let (($x87 (and $x185 $x69)))
 (let (($x5 (and $x87 $x47)))
 (let (($x53 (and $x5 $x155)))
 (let (($x88 (and $x53 $x160)))
 (let (($x161 (and $x88 $x149)))
 (let (($x139 (and $x161 $x25)))
 (let (($x286 (and $x139 $x77)))
 (let (($x202 (and $x286 $x280)))
 (let (($x180 (and $x202 $x141)))
 (let (($x190 (and $x180 $x223)))
 (let (($x89 (and $x190 $x292)))
 (let (($x10 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x244 (and (not $x10) $x89)))
 (let (($x100 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x178 (and $x100 $x244)))
 (let (($x7 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x129 (and $x7 $x178)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x277 (and $x11 $x129)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x109 (and $x35 $x277)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x288 (and $x54 $x109)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x65 (and $x41 $x288)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x245 (and $x19 $x65)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x216 (and $x40 $x245)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x279 (and $x96 $x216)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x16 (and $x58 $x279)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x215 (and $x73 $x16)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x60 (and $x12 $x215)))
 (let (($x284 (=> $x60 $x207)))
 (not $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x189 (bvmul ?x170 (_ bv4294967295 32))))
 (let ((?x171 (bvneg ?x189)))
 (let (($x252 (= ?x171 ?x98)))
 (let (($x207 (= $x252 true)))
 (let (($x222 (forall ((input.ind-%var1391X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1391X)))
 (=> $x6 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1391X) (_ bv0 32)))))
 ))
 (let (($x230 (forall ((input.ind-%var1390X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1390X)))
 (= $x6 false)))
 ))
 (let (($x122 (and $x230 $x222)))
 (let (($x292 (= $x122 true)))
 (let (($x140 (forall ((input.ind-%var1383X (_ BitVec 32)) (input.ind-%var1385X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1383X input.ind-%var1385X)))
 (let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1383X)))
 (=> (and $x248 $x153) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1383X input.ind-%var1385X) (_ bv0 32))))))
 ))
 (let (($x95 (forall ((input.ind-%var1383X (_ BitVec 32)) (input.ind-%var1384X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1383X)))
 (=> $x248 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1383X input.ind-%var1384X) false))))
 ))
 (let (($x119 (forall ((input.ind-%var1382X (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1382X)))
 (= $x219 false)))
 ))
 (let (($x242 (and (and $x119 $x95) $x140)))
 (let (($x223 (= $x242 true)))
 (let (($x255 (forall ((input.ind-%var1371X (_ BitVec 32)) (input.ind-%var1373X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1371X input.ind-%var1373X)))
 (let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1371X)))
 (=> (and $x248 $x153) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1371X input.ind-%var1373X) (_ bv0 32))))))
 ))
 (let (($x128 (forall ((input.ind-%var1371X (_ BitVec 32)) (input.ind-%var1372X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1371X)))
 (=> $x248 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1371X input.ind-%var1372X) false))))
 ))
 (let (($x289 (forall ((input.ind-%var1370X (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1370X)))
 (= $x219 false)))
 ))
 (let (($x238 (and (and $x289 $x128) $x255)))
 (let (($x141 (= $x238 true)))
 (let (($x198 (forall ((input.ind-%var1361X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1361X)))
 (=> $x6 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1361X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var1360X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1360X)))
 (= $x6 false)))
 ))
 (let (($x175 (and $x111 $x198)))
 (let (($x280 (= $x175 true)))
 (let (($x203 (forall ((input.ind-%var1353X (_ BitVec 32)) (input.ind-%var1355X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1353X input.ind-%var1355X)))
 (let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1353X)))
 (=> (and $x248 $x153) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1353X input.ind-%var1355X) (_ bv0 32))))))
 ))
 (let (($x236 (forall ((input.ind-%var1353X (_ BitVec 32)) (input.ind-%var1354X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1353X)))
 (=> $x248 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1353X input.ind-%var1354X) false))))
 ))
 (let (($x159 (forall ((input.ind-%var1352X (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1352X)))
 (= $x219 false)))
 ))
 (let (($x83 (and (and $x159 $x236) $x203)))
 (let (($x77 (= $x83 true)))
 (let (($x22 (forall ((input.ind-%var1343X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1343X)))
 (=> $x6 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1343X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var1342X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1342X)))
 (= $x6 false)))
 ))
 (let (($x199 (and $x126 $x22)))
 (let (($x25 (= $x199 true)))
 (let ((?x136 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x136)))
 (let (($x102 (= ?x68 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x102 true)))
 (let (($x149 (= $x28 true)))
 (let (($x127 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x127 true)))
 (let (($x144 (= $x62 true)))
 (let (($x160 (= $x144 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x107)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x134)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x51 $x146)))
 (let (($x121 (and $x76 $x114)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x30 $x121)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x36)))))))
 (let (($x147 (and $x108 $x156)))
 (let (($x72 (= $x147 true)))
 (let (($x158 (= $x72 true)))
 (let (($x155 (= $x158 true)))
 (let ((?x86 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x86)))
 (let (($x18 (= ?x56 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x33 (= $x18 true)))
 (let (($x47 (= $x33 true)))
 (let (($x55 (= ?x56 input.dst.llvm-%n)))
 (let (($x13 (= $x55 true)))
 (let (($x69 (= $x13 true)))
 (let ((?x20 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x20)))
 (let (($x187 (= ?x157 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x14 (= $x187 true)))
 (let (($x185 (= $x14 true)))
 (let (($x87 (and $x185 $x69)))
 (let (($x5 (and $x87 $x47)))
 (let (($x53 (and $x5 $x155)))
 (let (($x88 (and $x53 $x160)))
 (let (($x161 (and $x88 $x149)))
 (let (($x139 (and $x161 $x25)))
 (let (($x286 (and $x139 $x77)))
 (let (($x202 (and $x286 $x280)))
 (let (($x180 (and $x202 $x141)))
 (let (($x190 (and $x180 $x223)))
 (let (($x89 (and $x190 $x292)))
 (let (($x10 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x244 (and (not $x10) $x89)))
 (let (($x100 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x178 (and $x100 $x244)))
 (let (($x7 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x129 (and $x7 $x178)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x277 (and $x11 $x129)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x109 (and $x35 $x277)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x288 (and $x54 $x109)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x65 (and $x41 $x288)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x245 (and $x19 $x65)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x216 (and $x40 $x245)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x279 (and $x96 $x216)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x16 (and $x58 $x279)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x215 (and $x73 $x16)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x60 (and $x12 $x215)))
 (let (($x284 (=> $x60 $x207)))
 (not $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 173 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x176 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x205 (bvmul ?x176 (_ bv4294967295 32))))
 (let ((?x287 (bvneg ?x205)))
 (let (($x130 (= ?x287 ?x229)))
 (let (($x193 (= $x130 true)))
 (let (($x204 (forall ((input.ind-%var1445X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1445X)))
 (=> $x126 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1445X) (_ bv0 32)))))
 ))
 (let (($x162 (forall ((input.ind-%var1444X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1444X)))
 (= $x126 false)))
 ))
 (let (($x188 (and $x162 $x204)))
 (let (($x105 (= $x188 true)))
 (let (($x239 (forall ((input.ind-%var1437X (_ BitVec 32)) (input.ind-%var1439X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1437X input.ind-%var1439X)))
 (let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1437X)))
 (=> (and $x141 $x289) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1437X input.ind-%var1439X) (_ bv0 32))))))
 ))
 (let (($x116 (forall ((input.ind-%var1437X (_ BitVec 32)) (input.ind-%var1438X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1437X)))
 (=> $x141 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1437X input.ind-%var1438X) false))))
 ))
 (let (($x181 (forall ((input.ind-%var1436X (_ BitVec 32)) )(let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1436X)))
 (= $x197 false)))
 ))
 (let (($x263 (and (and $x181 $x116) $x239)))
 (let (($x266 (= $x263 true)))
 (let (($x133 (forall ((input.ind-%var1425X (_ BitVec 32)) (input.ind-%var1427X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1425X input.ind-%var1427X)))
 (let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1425X)))
 (=> (and $x141 $x289) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1425X input.ind-%var1427X) (_ bv0 32))))))
 ))
 (let (($x90 (forall ((input.ind-%var1425X (_ BitVec 32)) (input.ind-%var1426X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1425X)))
 (=> $x141 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1425X input.ind-%var1426X) false))))
 ))
 (let (($x92 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1424X)))
 (= $x197 false)))
 ))
 (let (($x221 (and (and $x92 $x90) $x133)))
 (let (($x186 (= $x221 true)))
 (let (($x189 (forall ((input.ind-%var1415X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1415X)))
 (=> $x126 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1415X) (_ bv0 32)))))
 ))
 (let (($x216 (forall ((input.ind-%var1414X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1414X)))
 (= $x126 false)))
 ))
 (let (($x171 (and $x216 $x189)))
 (let (($x98 (= $x171 true)))
 (let (($x244 (forall ((input.ind-%var1407X (_ BitVec 32)) (input.ind-%var1409X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1407X input.ind-%var1409X)))
 (let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1407X)))
 (=> (and $x141 $x289) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1407X input.ind-%var1409X) (_ bv0 32))))))
 ))
 (let (($x119 (forall ((input.ind-%var1407X (_ BitVec 32)) (input.ind-%var1408X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1407X)))
 (=> $x141 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1407X input.ind-%var1408X) false))))
 ))
 (let (($x77 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1406X)))
 (= $x197 false)))
 ))
 (let (($x129 (and (and $x77 $x119) $x244)))
 (let (($x277 (= $x129 true)))
 (let (($x183 (forall ((input.ind-%var1397X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1397X)))
 (=> $x126 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1397X) (_ bv0 32)))))
 ))
 (let (($x22 (forall ((input.ind-%var1396X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1396X)))
 (= $x126 false)))
 ))
 (let (($x80 (and $x22 $x183)))
 (let (($x236 (= $x80 true)))
 (let ((?x136 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x136)))
 (let (($x102 (= ?x68 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x102 true)))
 (let (($x149 (= $x28 true)))
 (let ((?x53 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x53)))
 (let (($x62 (= ?x46 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x144 (= $x62 true)))
 (let (($x160 (= $x144 true)))
 (let (($x121 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x156 (= $x121 true)))
 (let (($x147 (= $x156 true)))
 (let (($x72 (= $x147 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x108)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x36 $x64)))
 (let (($x30 (and $x61 $x26)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x13 $x30)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x71)))))))
 (let (($x42 (and $x52 $x51)))
 (let (($x134 (= $x42 true)))
 (let (($x146 (= $x134 true)))
 (let (($x76 (= $x146 true)))
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x49)))
 (let (($x187 (= ?x24 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x14 (= $x187 true)))
 (let (($x185 (= $x14 true)))
 (let (($x20 (= ?x24 input.dst.llvm-%n)))
 (let (($x157 (= $x20 true)))
 (let (($x17 (= $x157 true)))
 (let (($x86 (and $x17 $x185)))
 (let (($x107 (and $x86 $x76)))
 (let (($x158 (and $x107 $x72)))
 (let (($x88 (and $x158 $x160)))
 (let (($x161 (and $x88 $x149)))
 (let (($x174 (and $x161 $x236)))
 (let (($x109 (and $x174 $x277)))
 (let (($x252 (and $x109 $x98)))
 (let (($x75 (and $x252 $x186)))
 (let (($x99 (and $x75 $x266)))
 (let (($x118 (and $x99 $x105)))
 (let (($x21 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x163 (and (not $x21) $x118)))
 (let (($x7 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x101 (and $x7 $x163)))
 (let (($x11 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x217 (and $x11 $x101)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x260 (and $x15 $x217)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x167 (and $x45 $x260)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x278 (and $x29 $x167)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x142 (and $x37 $x278)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x85 (and $x50 $x142)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x166 (and $x48 $x85)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x192 (and $x148 $x166)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x206 (and $x70 $x192)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x66 (and $x23 $x206)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x104 (and $x12 $x66)))
 (let (($x285 (=> $x104 $x193)))
 (not $x285)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x176 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x205 (bvmul ?x176 (_ bv4294967295 32))))
 (let ((?x287 (bvneg ?x205)))
 (let (($x130 (= ?x287 ?x229)))
 (let (($x193 (= $x130 true)))
 (let (($x204 (forall ((input.ind-%var1445X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1445X)))
 (=> $x126 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1445X) (_ bv0 32)))))
 ))
 (let (($x162 (forall ((input.ind-%var1444X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1444X)))
 (= $x126 false)))
 ))
 (let (($x188 (and $x162 $x204)))
 (let (($x105 (= $x188 true)))
 (let (($x239 (forall ((input.ind-%var1437X (_ BitVec 32)) (input.ind-%var1439X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1437X input.ind-%var1439X)))
 (let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1437X)))
 (=> (and $x141 $x289) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1437X input.ind-%var1439X) (_ bv0 32))))))
 ))
 (let (($x116 (forall ((input.ind-%var1437X (_ BitVec 32)) (input.ind-%var1438X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1437X)))
 (=> $x141 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1437X input.ind-%var1438X) false))))
 ))
 (let (($x181 (forall ((input.ind-%var1436X (_ BitVec 32)) )(let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1436X)))
 (= $x197 false)))
 ))
 (let (($x263 (and (and $x181 $x116) $x239)))
 (let (($x266 (= $x263 true)))
 (let (($x133 (forall ((input.ind-%var1425X (_ BitVec 32)) (input.ind-%var1427X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1425X input.ind-%var1427X)))
 (let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1425X)))
 (=> (and $x141 $x289) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1425X input.ind-%var1427X) (_ bv0 32))))))
 ))
 (let (($x90 (forall ((input.ind-%var1425X (_ BitVec 32)) (input.ind-%var1426X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1425X)))
 (=> $x141 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1425X input.ind-%var1426X) false))))
 ))
 (let (($x92 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1424X)))
 (= $x197 false)))
 ))
 (let (($x221 (and (and $x92 $x90) $x133)))
 (let (($x186 (= $x221 true)))
 (let (($x189 (forall ((input.ind-%var1415X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1415X)))
 (=> $x126 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1415X) (_ bv0 32)))))
 ))
 (let (($x216 (forall ((input.ind-%var1414X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1414X)))
 (= $x126 false)))
 ))
 (let (($x171 (and $x216 $x189)))
 (let (($x98 (= $x171 true)))
 (let (($x244 (forall ((input.ind-%var1407X (_ BitVec 32)) (input.ind-%var1409X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1407X input.ind-%var1409X)))
 (let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1407X)))
 (=> (and $x141 $x289) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1407X input.ind-%var1409X) (_ bv0 32))))))
 ))
 (let (($x119 (forall ((input.ind-%var1407X (_ BitVec 32)) (input.ind-%var1408X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1407X)))
 (=> $x141 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1407X input.ind-%var1408X) false))))
 ))
 (let (($x77 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1406X)))
 (= $x197 false)))
 ))
 (let (($x129 (and (and $x77 $x119) $x244)))
 (let (($x277 (= $x129 true)))
 (let (($x183 (forall ((input.ind-%var1397X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1397X)))
 (=> $x126 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1397X) (_ bv0 32)))))
 ))
 (let (($x22 (forall ((input.ind-%var1396X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1396X)))
 (= $x126 false)))
 ))
 (let (($x80 (and $x22 $x183)))
 (let (($x236 (= $x80 true)))
 (let ((?x136 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x136)))
 (let (($x102 (= ?x68 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x102 true)))
 (let (($x149 (= $x28 true)))
 (let ((?x53 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x53)))
 (let (($x62 (= ?x46 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x144 (= $x62 true)))
 (let (($x160 (= $x144 true)))
 (let (($x121 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x156 (= $x121 true)))
 (let (($x147 (= $x156 true)))
 (let (($x72 (= $x147 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x108)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x36 $x64)))
 (let (($x30 (and $x61 $x26)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x13 $x30)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x71)))))))
 (let (($x42 (and $x52 $x51)))
 (let (($x134 (= $x42 true)))
 (let (($x146 (= $x134 true)))
 (let (($x76 (= $x146 true)))
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x49)))
 (let (($x187 (= ?x24 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x14 (= $x187 true)))
 (let (($x185 (= $x14 true)))
 (let (($x20 (= ?x24 input.dst.llvm-%n)))
 (let (($x157 (= $x20 true)))
 (let (($x17 (= $x157 true)))
 (let (($x86 (and $x17 $x185)))
 (let (($x107 (and $x86 $x76)))
 (let (($x158 (and $x107 $x72)))
 (let (($x88 (and $x158 $x160)))
 (let (($x161 (and $x88 $x149)))
 (let (($x174 (and $x161 $x236)))
 (let (($x109 (and $x174 $x277)))
 (let (($x252 (and $x109 $x98)))
 (let (($x75 (and $x252 $x186)))
 (let (($x99 (and $x75 $x266)))
 (let (($x118 (and $x99 $x105)))
 (let (($x21 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x163 (and (not $x21) $x118)))
 (let (($x7 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x101 (and $x7 $x163)))
 (let (($x11 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x217 (and $x11 $x101)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x260 (and $x15 $x217)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x167 (and $x45 $x260)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x278 (and $x29 $x167)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x142 (and $x37 $x278)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x85 (and $x50 $x142)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x166 (and $x48 $x85)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x192 (and $x148 $x166)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x206 (and $x70 $x192)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x66 (and $x23 $x206)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x104 (and $x12 $x66)))
 (let (($x285 (=> $x104 $x193)))
 (not $x285)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 173 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x213 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x8 (not $x213)))
 (let (($x209 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x91 (not $x209)))
 (let (($x106 (or $x91 $x8)))
 (let (($x194 (= $x106 true)))
 (let (($x132 (= $x194 true)))
 (let (($x230 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1499X)))
 (=> $x28 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1499X) (_ bv0 32)))))
 ))
 (let (($x125 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1498X)))
 (= $x28 false)))
 ))
 (let (($x198 (and $x125 $x230)))
 (let (($x255 (= $x198 true)))
 (let (($x207 (forall ((input.ind-%var1491X (_ BitVec 32)) (input.ind-%var1493X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1491X input.ind-%var1493X)))
 (let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1491X)))
 (=> (and $x252 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1491X input.ind-%var1493X) (_ bv0 32))))))
 ))
 (let (($x240 (forall ((input.ind-%var1491X (_ BitVec 32)) (input.ind-%var1492X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1491X)))
 (=> $x252 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1491X input.ind-%var1492X) false))))
 ))
 (let (($x32 (forall ((input.ind-%var1490X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1490X)))
 (= $x238 false)))
 ))
 (let (($x226 (and (and $x32 $x240) $x207)))
 (let (($x94 (= $x226 true)))
 (let (($x139 (forall ((input.ind-%var1479X (_ BitVec 32)) (input.ind-%var1481X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1479X input.ind-%var1481X)))
 (let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1479X)))
 (=> (and $x252 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1479X input.ind-%var1481X) (_ bv0 32))))))
 ))
 (let (($x84 (forall ((input.ind-%var1479X (_ BitVec 32)) (input.ind-%var1480X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1479X)))
 (=> $x252 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1479X input.ind-%var1480X) false))))
 ))
 (let (($x287 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1478X)))
 (= $x238 false)))
 ))
 (let (($x111 (and (and $x287 $x84) $x139)))
 (let (($x215 (= $x111 true)))
 (let (($x166 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1469X)))
 (=> $x28 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1469X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1468X)))
 (= $x28 false)))
 ))
 (let (($x192 (and $x217 $x166)))
 (let (($x206 (= $x192 true)))
 (let (($x99 (forall ((input.ind-%var1461X (_ BitVec 32)) (input.ind-%var1463X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1461X input.ind-%var1463X)))
 (let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1461X)))
 (=> (and $x252 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1461X input.ind-%var1463X) (_ bv0 32))))))
 ))
 (let (($x90 (forall ((input.ind-%var1461X (_ BitVec 32)) (input.ind-%var1462X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1461X)))
 (=> $x252 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1461X input.ind-%var1462X) false))))
 ))
 (let (($x292 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1460X)))
 (= $x238 false)))
 ))
 (let (($x204 (and (and $x292 $x90) $x99)))
 (let (($x188 (= $x204 true)))
 (let (($x197 (forall ((input.ind-%var1451X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1451X)))
 (=> $x28 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1451X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var1450X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1450X)))
 (= $x28 false)))
 ))
 (let (($x83 (and $x126 $x197)))
 (let (($x77 (= $x83 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x53)))
 (let (($x62 (= ?x46 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x144 (= $x62 true)))
 (let (($x160 (= $x144 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x42)))
 (let (($x156 (= ?x134 input.dst.llvm-%n)))
 (let (($x147 (= $x156 true)))
 (let (($x72 (= $x147 true)))
 (let (($x146 (= ?x134 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x76 (= $x146 true)))
 (let (($x107 (= $x76 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x36)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x39 $x55)))
 (let (($x63 (and $x13 $x74)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x187 $x63)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x18)))))))
 (let (($x61 (and $x67 $x64)))
 (let (($x108 (= $x61 true)))
 (let (($x26 (= $x108 true)))
 (let (($x30 (= $x26 true)))
 (let ((?x21 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x21)))
 (let (($x49 (= ?x103 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x24 (= $x49 true)))
 (let (($x241 (= $x24 true)))
 (let (($x51 (and $x241 $x30)))
 (let (($x114 (and $x51 $x107)))
 (let (($x158 (and $x114 $x72)))
 (let (($x88 (and $x158 $x160)))
 (let (($x202 (and $x88 $x77)))
 (let (($x105 (and $x202 $x188)))
 (let (($x66 (and $x105 $x206)))
 (let (($x95 (and $x66 $x215)))
 (let (($x164 (and $x95 $x94)))
 (let (($x245 (and $x164 $x255)))
 (let (($x11 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x60 (and $x11 $x245)))
 (let (($x15 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x246 (and $x15 $x60)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x251 (and $x9 $x246)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x140 (and $x54 $x251)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x222 (and $x41 $x140)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x16 (and $x19 $x222)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x170 (and $x40 $x16)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x210 (and $x96 $x170)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x220 (and $x58 $x210)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x38 (and $x73 $x220)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x177 (and $x31 $x38)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x172 (and $x12 $x177)))
 (let (($x165 (=> $x172 $x132)))
 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x213 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x8 (not $x213)))
 (let (($x209 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x91 (not $x209)))
 (let (($x106 (or $x91 $x8)))
 (let (($x194 (= $x106 true)))
 (let (($x132 (= $x194 true)))
 (let (($x230 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1499X)))
 (=> $x28 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1499X) (_ bv0 32)))))
 ))
 (let (($x125 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1498X)))
 (= $x28 false)))
 ))
 (let (($x198 (and $x125 $x230)))
 (let (($x255 (= $x198 true)))
 (let (($x207 (forall ((input.ind-%var1491X (_ BitVec 32)) (input.ind-%var1493X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1491X input.ind-%var1493X)))
 (let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1491X)))
 (=> (and $x252 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1491X input.ind-%var1493X) (_ bv0 32))))))
 ))
 (let (($x240 (forall ((input.ind-%var1491X (_ BitVec 32)) (input.ind-%var1492X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1491X)))
 (=> $x252 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1491X input.ind-%var1492X) false))))
 ))
 (let (($x32 (forall ((input.ind-%var1490X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1490X)))
 (= $x238 false)))
 ))
 (let (($x226 (and (and $x32 $x240) $x207)))
 (let (($x94 (= $x226 true)))
 (let (($x139 (forall ((input.ind-%var1479X (_ BitVec 32)) (input.ind-%var1481X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1479X input.ind-%var1481X)))
 (let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1479X)))
 (=> (and $x252 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1479X input.ind-%var1481X) (_ bv0 32))))))
 ))
 (let (($x84 (forall ((input.ind-%var1479X (_ BitVec 32)) (input.ind-%var1480X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1479X)))
 (=> $x252 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1479X input.ind-%var1480X) false))))
 ))
 (let (($x287 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1478X)))
 (= $x238 false)))
 ))
 (let (($x111 (and (and $x287 $x84) $x139)))
 (let (($x215 (= $x111 true)))
 (let (($x166 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1469X)))
 (=> $x28 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1469X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1468X)))
 (= $x28 false)))
 ))
 (let (($x192 (and $x217 $x166)))
 (let (($x206 (= $x192 true)))
 (let (($x99 (forall ((input.ind-%var1461X (_ BitVec 32)) (input.ind-%var1463X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1461X input.ind-%var1463X)))
 (let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1461X)))
 (=> (and $x252 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1461X input.ind-%var1463X) (_ bv0 32))))))
 ))
 (let (($x90 (forall ((input.ind-%var1461X (_ BitVec 32)) (input.ind-%var1462X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1461X)))
 (=> $x252 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1461X input.ind-%var1462X) false))))
 ))
 (let (($x292 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1460X)))
 (= $x238 false)))
 ))
 (let (($x204 (and (and $x292 $x90) $x99)))
 (let (($x188 (= $x204 true)))
 (let (($x197 (forall ((input.ind-%var1451X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1451X)))
 (=> $x28 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1451X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var1450X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1450X)))
 (= $x28 false)))
 ))
 (let (($x83 (and $x126 $x197)))
 (let (($x77 (= $x83 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x53)))
 (let (($x62 (= ?x46 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x144 (= $x62 true)))
 (let (($x160 (= $x144 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x42)))
 (let (($x156 (= ?x134 input.dst.llvm-%n)))
 (let (($x147 (= $x156 true)))
 (let (($x72 (= $x147 true)))
 (let (($x146 (= ?x134 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x76 (= $x146 true)))
 (let (($x107 (= $x76 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x36)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x39 $x55)))
 (let (($x63 (and $x13 $x74)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x187 $x63)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x18)))))))
 (let (($x61 (and $x67 $x64)))
 (let (($x108 (= $x61 true)))
 (let (($x26 (= $x108 true)))
 (let (($x30 (= $x26 true)))
 (let ((?x21 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x21)))
 (let (($x49 (= ?x103 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x24 (= $x49 true)))
 (let (($x241 (= $x24 true)))
 (let (($x51 (and $x241 $x30)))
 (let (($x114 (and $x51 $x107)))
 (let (($x158 (and $x114 $x72)))
 (let (($x88 (and $x158 $x160)))
 (let (($x202 (and $x88 $x77)))
 (let (($x105 (and $x202 $x188)))
 (let (($x66 (and $x105 $x206)))
 (let (($x95 (and $x66 $x215)))
 (let (($x164 (and $x95 $x94)))
 (let (($x245 (and $x164 $x255)))
 (let (($x11 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x60 (and $x11 $x245)))
 (let (($x15 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x246 (and $x15 $x60)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x251 (and $x9 $x246)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x140 (and $x54 $x251)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x222 (and $x41 $x140)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x16 (and $x19 $x222)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x170 (and $x40 $x16)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x210 (and $x96 $x170)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x220 (and $x58 $x210)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x38 (and $x73 $x220)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x177 (and $x31 $x38)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x172 (and $x12 $x177)))
 (let (($x165 (=> $x172 $x132)))
 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x244 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x267 (bvmul ?x244 (_ bv4294967295 32))))
 (let ((?x272 (bvneg ?x267)))
 (let (($x258 (= ?x272 ?x117)))
 (let (($x233 (= $x258 true)))
 (let (($x193 (forall ((input.ind-%var1553X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1553X)))
 (=> $x202 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1553X) (_ bv0 32)))))
 ))
 (let (($x221 (forall ((input.ind-%var1552X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1552X)))
 (= $x202 false)))
 ))
 (let (($x195 (and $x221 $x193)))
 (let (($x112 (= $x195 true)))
 (let (($x189 (forall ((input.ind-%var1545X (_ BitVec 32)) (input.ind-%var1547X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1545X input.ind-%var1547X)))
 (let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1545X)))
 (=> (and $x94 $x32) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1545X input.ind-%var1547X) (_ bv0 32))))))
 ))
 (let (($x151 (forall ((input.ind-%var1545X (_ BitVec 32)) (input.ind-%var1546X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1545X)))
 (=> $x94 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1545X input.ind-%var1546X) false))))
 ))
 (let (($x183 (forall ((input.ind-%var1544X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1544X)))
 (= $x166 false)))
 ))
 (let (($x89 (and (and $x183 $x151) $x189)))
 (let (($x171 (= $x89 true)))
 (let (($x110 (forall ((input.ind-%var1533X (_ BitVec 32)) (input.ind-%var1535X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1533X input.ind-%var1535X)))
 (let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1533X)))
 (=> (and $x94 $x32) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1533X input.ind-%var1535X) (_ bv0 32))))))
 ))
 (let (($x68 (forall ((input.ind-%var1533X (_ BitVec 32)) (input.ind-%var1534X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1533X)))
 (=> $x94 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1533X input.ind-%var1534X) false))))
 ))
 (let (($x168 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1532X)))
 (= $x166 false)))
 ))
 (let (($x289 (and (and $x168 $x68) $x110)))
 (let (($x186 (= $x289 true)))
 (let (($x157 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1523X)))
 (=> $x202 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1523X) (_ bv0 32)))))
 ))
 (let (($x8 (forall ((input.ind-%var1522X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1522X)))
 (= $x202 false)))
 ))
 (let (($x149 (and $x8 $x157)))
 (let (($x153 (= $x149 true)))
 (let (($x210 (forall ((input.ind-%var1515X (_ BitVec 32)) (input.ind-%var1517X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1515X input.ind-%var1517X)))
 (let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1515X)))
 (=> (and $x94 $x32) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1515X input.ind-%var1517X) (_ bv0 32))))))
 ))
 (let (($x125 (forall ((input.ind-%var1515X (_ BitVec 32)) (input.ind-%var1516X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1515X)))
 (=> $x94 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1515X input.ind-%var1516X) false))))
 ))
 (let (($x287 (forall ((input.ind-%var1514X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1514X)))
 (= $x166 false)))
 ))
 (let (($x38 (and (and $x287 $x125) $x210)))
 (let (($x177 (= $x38 true)))
 (let (($x266 (forall ((input.ind-%var1505X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1505X)))
 (=> $x202 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1505X) (_ bv0 32)))))
 ))
 (let (($x277 (forall ((input.ind-%var1504X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1504X)))
 (= $x202 false)))
 ))
 (let (($x99 (and $x277 $x266)))
 (let (($x204 (= $x99 true)))
 (let ((?x28 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x28)))
 (let (($x126 (= ?x97 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x126 true)))
 (let (($x236 (= $x248 true)))
 (let (($x62 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x144 (= $x62 true)))
 (let (($x160 (= $x144 true)))
 (let (($x88 (= $x160 true)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x114)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x42 $x76)))
 (let (($x156 (and $x107 $x121)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x39 $x156)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x63)))))))
 (let (($x72 (and $x51 $x147)))
 (let (($x158 (= $x72 true)))
 (let (($x155 (= $x158 true)))
 (let (($x53 (= $x155 true)))
 (let ((?x185 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x185)))
 (let (($x47 (= ?x44 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x5 (= $x47 true)))
 (let (($x33 (= $x5 true)))
 (let (($x87 (= ?x44 input.dst.llvm-%n)))
 (let (($x78 (= $x87 true)))
 (let (($x69 (= $x78 true)))
 (let ((?x103 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x103)))
 (let (($x24 (= ?x10 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x241 (= $x24 true)))
 (let (($x14 (= $x241 true)))
 (let (($x18 (and $x14 $x69)))
 (let (($x71 (and $x18 $x33)))
 (let (($x46 (and $x71 $x53)))
 (let (($x102 (and $x46 $x88)))
 (let (($x174 (and $x102 $x236)))
 (let (($x188 (and $x174 $x204)))
 (let (($x172 (and $x188 $x177)))
 (let (($x180 (and $x172 $x153)))
 (let (($x129 (and $x180 $x186)))
 (let (($x101 (and $x129 $x171)))
 (let (($x269 (and $x101 $x112)))
 (let (($x7 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x115 (and (not $x7) $x269)))
 (let (($x15 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x128 (and $x15 $x115)))
 (let (($x9 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x199 (and $x9 $x128)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x288 (and $x35 $x199)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x196 (and $x29 $x288)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x275 (and $x37 $x196)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x145 (and $x50 $x275)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x280 (and $x48 $x145)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x218 (and $x148 $x280)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x159 (and $x70 $x218)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x203 (and $x23 $x159)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x79 (and $x150 $x203)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x191 (and $x12 $x79)))
 (let (($x273 (=> $x191 $x233)))
 (not $x273)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x244 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x267 (bvmul ?x244 (_ bv4294967295 32))))
 (let ((?x272 (bvneg ?x267)))
 (let (($x258 (= ?x272 ?x117)))
 (let (($x233 (= $x258 true)))
 (let (($x193 (forall ((input.ind-%var1553X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1553X)))
 (=> $x202 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1553X) (_ bv0 32)))))
 ))
 (let (($x221 (forall ((input.ind-%var1552X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1552X)))
 (= $x202 false)))
 ))
 (let (($x195 (and $x221 $x193)))
 (let (($x112 (= $x195 true)))
 (let (($x189 (forall ((input.ind-%var1545X (_ BitVec 32)) (input.ind-%var1547X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1545X input.ind-%var1547X)))
 (let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1545X)))
 (=> (and $x94 $x32) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1545X input.ind-%var1547X) (_ bv0 32))))))
 ))
 (let (($x151 (forall ((input.ind-%var1545X (_ BitVec 32)) (input.ind-%var1546X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1545X)))
 (=> $x94 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1545X input.ind-%var1546X) false))))
 ))
 (let (($x183 (forall ((input.ind-%var1544X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1544X)))
 (= $x166 false)))
 ))
 (let (($x89 (and (and $x183 $x151) $x189)))
 (let (($x171 (= $x89 true)))
 (let (($x110 (forall ((input.ind-%var1533X (_ BitVec 32)) (input.ind-%var1535X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1533X input.ind-%var1535X)))
 (let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1533X)))
 (=> (and $x94 $x32) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1533X input.ind-%var1535X) (_ bv0 32))))))
 ))
 (let (($x68 (forall ((input.ind-%var1533X (_ BitVec 32)) (input.ind-%var1534X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1533X)))
 (=> $x94 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1533X input.ind-%var1534X) false))))
 ))
 (let (($x168 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1532X)))
 (= $x166 false)))
 ))
 (let (($x289 (and (and $x168 $x68) $x110)))
 (let (($x186 (= $x289 true)))
 (let (($x157 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1523X)))
 (=> $x202 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1523X) (_ bv0 32)))))
 ))
 (let (($x8 (forall ((input.ind-%var1522X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1522X)))
 (= $x202 false)))
 ))
 (let (($x149 (and $x8 $x157)))
 (let (($x153 (= $x149 true)))
 (let (($x210 (forall ((input.ind-%var1515X (_ BitVec 32)) (input.ind-%var1517X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1515X input.ind-%var1517X)))
 (let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1515X)))
 (=> (and $x94 $x32) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1515X input.ind-%var1517X) (_ bv0 32))))))
 ))
 (let (($x125 (forall ((input.ind-%var1515X (_ BitVec 32)) (input.ind-%var1516X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1515X)))
 (=> $x94 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1515X input.ind-%var1516X) false))))
 ))
 (let (($x287 (forall ((input.ind-%var1514X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1514X)))
 (= $x166 false)))
 ))
 (let (($x38 (and (and $x287 $x125) $x210)))
 (let (($x177 (= $x38 true)))
 (let (($x266 (forall ((input.ind-%var1505X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1505X)))
 (=> $x202 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1505X) (_ bv0 32)))))
 ))
 (let (($x277 (forall ((input.ind-%var1504X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1504X)))
 (= $x202 false)))
 ))
 (let (($x99 (and $x277 $x266)))
 (let (($x204 (= $x99 true)))
 (let ((?x28 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x28)))
 (let (($x126 (= ?x97 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x126 true)))
 (let (($x236 (= $x248 true)))
 (let (($x62 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x144 (= $x62 true)))
 (let (($x160 (= $x144 true)))
 (let (($x88 (= $x160 true)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x114)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x42 $x76)))
 (let (($x156 (and $x107 $x121)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x39 $x156)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x63)))))))
 (let (($x72 (and $x51 $x147)))
 (let (($x158 (= $x72 true)))
 (let (($x155 (= $x158 true)))
 (let (($x53 (= $x155 true)))
 (let ((?x185 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x185)))
 (let (($x47 (= ?x44 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x5 (= $x47 true)))
 (let (($x33 (= $x5 true)))
 (let (($x87 (= ?x44 input.dst.llvm-%n)))
 (let (($x78 (= $x87 true)))
 (let (($x69 (= $x78 true)))
 (let ((?x103 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x103)))
 (let (($x24 (= ?x10 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x241 (= $x24 true)))
 (let (($x14 (= $x241 true)))
 (let (($x18 (and $x14 $x69)))
 (let (($x71 (and $x18 $x33)))
 (let (($x46 (and $x71 $x53)))
 (let (($x102 (and $x46 $x88)))
 (let (($x174 (and $x102 $x236)))
 (let (($x188 (and $x174 $x204)))
 (let (($x172 (and $x188 $x177)))
 (let (($x180 (and $x172 $x153)))
 (let (($x129 (and $x180 $x186)))
 (let (($x101 (and $x129 $x171)))
 (let (($x269 (and $x101 $x112)))
 (let (($x7 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x115 (and (not $x7) $x269)))
 (let (($x15 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x128 (and $x15 $x115)))
 (let (($x9 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x199 (and $x9 $x128)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x288 (and $x35 $x199)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x196 (and $x29 $x288)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x275 (and $x37 $x196)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x145 (and $x50 $x275)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x280 (and $x48 $x145)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x218 (and $x148 $x280)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x159 (and $x70 $x218)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x203 (and $x23 $x159)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x79 (and $x150 $x203)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x191 (and $x12 $x79)))
 (let (($x273 (=> $x191 $x233)))
 (not $x273)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 173 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x282 (bvmul ?x82 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x282)))
 (let (($x167 (= ?x65 ?x80)))
 (let (($x279 (= $x167 true)))
 (let (($x198 (forall ((input.ind-%var1607X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1607X)))
 (=> $x277 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1607X) (_ bv0 32)))))
 ))
 (let (($x251 (forall ((input.ind-%var1606X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1606X)))
 (= $x277 false)))
 ))
 (let (($x255 (and $x251 $x198)))
 (let (($x140 (= $x255 true)))
 (let (($x242 (forall ((input.ind-%var1599X (_ BitVec 32)) (input.ind-%var1601X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1599X input.ind-%var1601X)))
 (let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1599X)))
 (=> (and $x186 $x168) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1599X input.ind-%var1601X) (_ bv0 32))))))
 ))
 (let (($x162 (forall ((input.ind-%var1599X (_ BitVec 32)) (input.ind-%var1600X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1599X)))
 (=> $x186 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1599X input.ind-%var1600X) false))))
 ))
 (let (($x105 (forall ((input.ind-%var1598X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1598X)))
 (= $x222 false)))
 ))
 (let (($x119 (and (and $x105 $x162) $x242)))
 (let (($x285 (= $x119 true)))
 (let (($x83 (forall ((input.ind-%var1587X (_ BitVec 32)) (input.ind-%var1589X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1587X input.ind-%var1589X)))
 (let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1587X)))
 (=> (and $x186 $x168) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1587X input.ind-%var1589X) (_ bv0 32))))))
 ))
 (let (($x252 (forall ((input.ind-%var1587X (_ BitVec 32)) (input.ind-%var1588X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1587X)))
 (=> $x186 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1587X input.ind-%var1588X) false))))
 ))
 (let (($x17 (forall ((input.ind-%var1586X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1586X)))
 (= $x222 false)))
 ))
 (let (($x223 (and (and $x17 $x252) $x83)))
 (let (($x104 (= $x223 true)))
 (let (($x267 (forall ((input.ind-%var1577X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1577X)))
 (=> $x277 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1577X) (_ bv0 32)))))
 ))
 (let (($x218 (forall ((input.ind-%var1576X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1576X)))
 (= $x277 false)))
 ))
 (let (($x272 (and $x218 $x267)))
 (let (($x117 (= $x272 true)))
 (let (($x115 (forall ((input.ind-%var1569X (_ BitVec 32)) (input.ind-%var1571X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1569X input.ind-%var1571X)))
 (let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1569X)))
 (=> (and $x186 $x168) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1569X input.ind-%var1571X) (_ bv0 32))))))
 ))
 (let (($x183 (forall ((input.ind-%var1569X (_ BitVec 32)) (input.ind-%var1570X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1569X)))
 (=> $x186 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1569X input.ind-%var1570X) false))))
 ))
 (let (($x177 (forall ((input.ind-%var1568X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1568X)))
 (= $x222 false)))
 ))
 (let (($x199 (and (and $x177 $x183) $x115)))
 (let (($x288 (= $x199 true)))
 (let (($x226 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1559X)))
 (=> $x277 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1559X) (_ bv0 32)))))
 ))
 (let (($x266 (forall ((input.ind-%var1558X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1558X)))
 (= $x277 false)))
 ))
 (let (($x164 (and $x266 $x226)))
 (let (($x125 (= $x164 true)))
 (let ((?x28 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x28)))
 (let (($x126 (= ?x97 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x126 true)))
 (let (($x236 (= $x248 true)))
 (let ((?x46 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x46)))
 (let (($x144 (= ?x127 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x160 (= $x144 true)))
 (let (($x88 (= $x160 true)))
 (let (($x156 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (= $x156 true)))
 (let (($x72 (= $x147 true)))
 (let (($x158 (= $x72 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x51)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x63 $x108)))
 (let (($x39 (and $x26 $x187)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x78 $x39)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x27)))))))
 (let (($x134 (and $x13 $x42)))
 (let (($x146 (= $x134 true)))
 (let (($x76 (= $x146 true)))
 (let (($x107 (= $x76 true)))
 (let ((?x201 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x201)))
 (let (($x24 (= ?x100 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x241 (= $x24 true)))
 (let (($x14 (= $x241 true)))
 (let (($x103 (= ?x100 input.dst.llvm-%n)))
 (let (($x10 (= $x103 true)))
 (let (($x49 (= $x10 true)))
 (let (($x185 (and $x49 $x14)))
 (let (($x114 (and $x185 $x107)))
 (let (($x155 (and $x114 $x158)))
 (let (($x102 (and $x155 $x88)))
 (let (($x174 (and $x102 $x236)))
 (let (($x220 (and $x174 $x125)))
 (let (($x196 (and $x220 $x288)))
 (let (($x258 (and $x196 $x117)))
 (let (($x229 (and $x258 $x104)))
 (let (($x206 (and $x229 $x285)))
 (let (($x194 (and $x206 $x140)))
 (let (($x11 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x264 (and (not $x11) $x194)))
 (let (($x9 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x118 (and $x9 $x264)))
 (let (($x35 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x122 (and $x35 $x118)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x136 (and $x45 $x122)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x161 (and $x41 $x136)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x152 (and $x19 $x161)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x22 (and $x40 $x152)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x130 (and $x96 $x22)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x113 (and $x58 $x130)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x163 (and $x73 $x113)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x190 (and $x31 $x163)))
 (let (($x131 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x43 (and $x131 $x190)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x133 (and $x12 $x43)))
 (let (($x224 (=> $x133 $x279)))
 (not $x224)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x282 (bvmul ?x82 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x282)))
 (let (($x167 (= ?x65 ?x80)))
 (let (($x279 (= $x167 true)))
 (let (($x198 (forall ((input.ind-%var1607X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1607X)))
 (=> $x277 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1607X) (_ bv0 32)))))
 ))
 (let (($x251 (forall ((input.ind-%var1606X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1606X)))
 (= $x277 false)))
 ))
 (let (($x255 (and $x251 $x198)))
 (let (($x140 (= $x255 true)))
 (let (($x242 (forall ((input.ind-%var1599X (_ BitVec 32)) (input.ind-%var1601X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1599X input.ind-%var1601X)))
 (let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1599X)))
 (=> (and $x186 $x168) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1599X input.ind-%var1601X) (_ bv0 32))))))
 ))
 (let (($x162 (forall ((input.ind-%var1599X (_ BitVec 32)) (input.ind-%var1600X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1599X)))
 (=> $x186 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1599X input.ind-%var1600X) false))))
 ))
 (let (($x105 (forall ((input.ind-%var1598X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1598X)))
 (= $x222 false)))
 ))
 (let (($x119 (and (and $x105 $x162) $x242)))
 (let (($x285 (= $x119 true)))
 (let (($x83 (forall ((input.ind-%var1587X (_ BitVec 32)) (input.ind-%var1589X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1587X input.ind-%var1589X)))
 (let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1587X)))
 (=> (and $x186 $x168) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1587X input.ind-%var1589X) (_ bv0 32))))))
 ))
 (let (($x252 (forall ((input.ind-%var1587X (_ BitVec 32)) (input.ind-%var1588X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1587X)))
 (=> $x186 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1587X input.ind-%var1588X) false))))
 ))
 (let (($x17 (forall ((input.ind-%var1586X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1586X)))
 (= $x222 false)))
 ))
 (let (($x223 (and (and $x17 $x252) $x83)))
 (let (($x104 (= $x223 true)))
 (let (($x267 (forall ((input.ind-%var1577X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1577X)))
 (=> $x277 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1577X) (_ bv0 32)))))
 ))
 (let (($x218 (forall ((input.ind-%var1576X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1576X)))
 (= $x277 false)))
 ))
 (let (($x272 (and $x218 $x267)))
 (let (($x117 (= $x272 true)))
 (let (($x115 (forall ((input.ind-%var1569X (_ BitVec 32)) (input.ind-%var1571X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1569X input.ind-%var1571X)))
 (let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1569X)))
 (=> (and $x186 $x168) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1569X input.ind-%var1571X) (_ bv0 32))))))
 ))
 (let (($x183 (forall ((input.ind-%var1569X (_ BitVec 32)) (input.ind-%var1570X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1569X)))
 (=> $x186 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1569X input.ind-%var1570X) false))))
 ))
 (let (($x177 (forall ((input.ind-%var1568X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1568X)))
 (= $x222 false)))
 ))
 (let (($x199 (and (and $x177 $x183) $x115)))
 (let (($x288 (= $x199 true)))
 (let (($x226 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1559X)))
 (=> $x277 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1559X) (_ bv0 32)))))
 ))
 (let (($x266 (forall ((input.ind-%var1558X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1558X)))
 (= $x277 false)))
 ))
 (let (($x164 (and $x266 $x226)))
 (let (($x125 (= $x164 true)))
 (let ((?x28 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x28)))
 (let (($x126 (= ?x97 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x126 true)))
 (let (($x236 (= $x248 true)))
 (let ((?x46 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x46)))
 (let (($x144 (= ?x127 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x160 (= $x144 true)))
 (let (($x88 (= $x160 true)))
 (let (($x156 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (= $x156 true)))
 (let (($x72 (= $x147 true)))
 (let (($x158 (= $x72 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x51)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x63 $x108)))
 (let (($x39 (and $x26 $x187)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x78 $x39)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x27)))))))
 (let (($x134 (and $x13 $x42)))
 (let (($x146 (= $x134 true)))
 (let (($x76 (= $x146 true)))
 (let (($x107 (= $x76 true)))
 (let ((?x201 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x201)))
 (let (($x24 (= ?x100 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x241 (= $x24 true)))
 (let (($x14 (= $x241 true)))
 (let (($x103 (= ?x100 input.dst.llvm-%n)))
 (let (($x10 (= $x103 true)))
 (let (($x49 (= $x10 true)))
 (let (($x185 (and $x49 $x14)))
 (let (($x114 (and $x185 $x107)))
 (let (($x155 (and $x114 $x158)))
 (let (($x102 (and $x155 $x88)))
 (let (($x174 (and $x102 $x236)))
 (let (($x220 (and $x174 $x125)))
 (let (($x196 (and $x220 $x288)))
 (let (($x258 (and $x196 $x117)))
 (let (($x229 (and $x258 $x104)))
 (let (($x206 (and $x229 $x285)))
 (let (($x194 (and $x206 $x140)))
 (let (($x11 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x264 (and (not $x11) $x194)))
 (let (($x9 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x118 (and $x9 $x264)))
 (let (($x35 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x122 (and $x35 $x118)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x136 (and $x45 $x122)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x161 (and $x41 $x136)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x152 (and $x19 $x161)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x22 (and $x40 $x152)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x130 (and $x96 $x22)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x113 (and $x58 $x130)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x163 (and $x73 $x113)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x190 (and $x31 $x163)))
 (let (($x131 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x43 (and $x131 $x190)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x133 (and $x12 $x43)))
 (let (($x224 (=> $x133 $x279)))
 (not $x224)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 173 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (not $x85)))
 (let (($x84 (= $x142 false)))
 (let (($x286 (= $x84 true)))
 (let (($x221 (forall ((input.ind-%var1661X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1661X)))
 (=> $x248 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1661X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var1660X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1660X)))
 (= $x248 false)))
 ))
 (let (($x157 (and $x278 $x221)))
 (let (($x110 (= $x157 true)))
 (let (($x233 (forall ((input.ind-%var1653X (_ BitVec 32)) (input.ind-%var1655X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1653X input.ind-%var1655X)))
 (let (($x258 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1653X)))
 (=> (and $x258 $x196) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1653X input.ind-%var1655X) (_ bv0 32))))))
 ))
 (let (($x60 (forall ((input.ind-%var1653X (_ BitVec 32)) (input.ind-%var1654X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1653X)))
 (=> $x258 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1653X input.ind-%var1654X) false))))
 ))
 (let (($x90 (forall ((input.ind-%var1652X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1652X)))
 (= $x289 false)))
 ))
 (let (($x132 (and (and $x90 $x60) $x233)))
 (let (($x240 (= $x132 true)))
 (let (($x188 (forall ((input.ind-%var1641X (_ BitVec 32)) (input.ind-%var1643X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1641X input.ind-%var1643X)))
 (let (($x258 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1641X)))
 (=> (and $x258 $x196) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1641X input.ind-%var1643X) (_ bv0 32))))))
 ))
 (let (($x92 (forall ((input.ind-%var1641X (_ BitVec 32)) (input.ind-%var1642X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1641X)))
 (=> $x258 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1641X input.ind-%var1642X) false))))
 ))
 (let (($x65 (forall ((input.ind-%var1640X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1640X)))
 (= $x289 false)))
 ))
 (let (($x8 (and (and $x65 $x92) $x188)))
 (let (($x79 (= $x8 true)))
 (let (($x113 (forall ((input.ind-%var1631X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1631X)))
 (=> $x248 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1631X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var1630X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1630X)))
 (= $x248 false)))
 ))
 (let (($x163 (and $x122 $x113)))
 (let (($x190 (= $x163 true)))
 (let (($x206 (forall ((input.ind-%var1623X (_ BitVec 32)) (input.ind-%var1625X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1623X input.ind-%var1625X)))
 (let (($x258 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1623X)))
 (=> (and $x258 $x196) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1623X input.ind-%var1625X) (_ bv0 32))))))
 ))
 (let (($x252 (forall ((input.ind-%var1623X (_ BitVec 32)) (input.ind-%var1624X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1623X)))
 (=> $x258 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1623X input.ind-%var1624X) false))))
 ))
 (let (($x112 (forall ((input.ind-%var1622X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1622X)))
 (= $x289 false)))
 ))
 (let (($x198 (and (and $x112 $x252) $x206)))
 (let (($x255 (= $x198 true)))
 (let (($x222 (forall ((input.ind-%var1613X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1613X)))
 (=> $x248 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1613X) (_ bv0 32)))))
 ))
 (let (($x277 (forall ((input.ind-%var1612X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1612X)))
 (= $x248 false)))
 ))
 (let (($x38 (and $x277 $x222)))
 (let (($x177 (= $x38 true)))
 (let ((?x46 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x46)))
 (let (($x144 (= ?x127 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x160 (= $x144 true)))
 (let (($x88 (= $x160 true)))
 (let ((?x103 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x103)))
 (let (($x147 (= ?x10 input.dst.llvm-%n)))
 (let (($x72 (= $x147 true)))
 (let (($x158 (= $x72 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x187)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x64 $x26)))
 (let (($x42 (and $x51 $x39)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x74 $x42)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x30)))))))
 (let (($x146 (and $x63 $x134)))
 (let (($x76 (= $x146 true)))
 (let (($x107 (= $x76 true)))
 (let (($x114 (= $x107 true)))
 (let (($x49 (= ?x10 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x24 (= $x49 true)))
 (let (($x241 (= $x24 true)))
 (let ((?x11 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x11)))
 (let (($x201 (= ?x173 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x201 true)))
 (let (($x21 (= $x100 true)))
 (let (($x14 (and $x21 $x241)))
 (let (($x121 (and $x14 $x114)))
 (let (($x155 (and $x121 $x158)))
 (let (($x102 (and $x155 $x88)))
 (let (($x180 (and $x102 $x177)))
 (let (($x140 (and $x180 $x255)))
 (let (($x43 (and $x140 $x190)))
 (let (($x151 (and $x43 $x79)))
 (let (($x109 (and $x151 $x240)))
 (let (($x280 (and $x109 $x110)))
 (let (($x35 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x191 (and $x35 $x280)))
 (let (($x45 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x175 (and $x45 $x191)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x116 (and $x54 $x175)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x189 (and $x37 $x116)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x193 (and $x50 $x189)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x203 (and $x48 $x193)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x244 (and $x148 $x203)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x246 (and $x70 $x244)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x230 (and $x23 $x246)))
 (let (($x150 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x192 (and $x150 $x230)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x106 (and $x56 $x192)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x176 (and $x12 $x106)))
 (let (($x197 (=> $x176 $x286)))
 (not $x197))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (not $x85)))
 (let (($x84 (= $x142 false)))
 (let (($x286 (= $x84 true)))
 (let (($x221 (forall ((input.ind-%var1661X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1661X)))
 (=> $x248 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1661X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var1660X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1660X)))
 (= $x248 false)))
 ))
 (let (($x157 (and $x278 $x221)))
 (let (($x110 (= $x157 true)))
 (let (($x233 (forall ((input.ind-%var1653X (_ BitVec 32)) (input.ind-%var1655X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1653X input.ind-%var1655X)))
 (let (($x258 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1653X)))
 (=> (and $x258 $x196) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1653X input.ind-%var1655X) (_ bv0 32))))))
 ))
 (let (($x60 (forall ((input.ind-%var1653X (_ BitVec 32)) (input.ind-%var1654X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1653X)))
 (=> $x258 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1653X input.ind-%var1654X) false))))
 ))
 (let (($x90 (forall ((input.ind-%var1652X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1652X)))
 (= $x289 false)))
 ))
 (let (($x132 (and (and $x90 $x60) $x233)))
 (let (($x240 (= $x132 true)))
 (let (($x188 (forall ((input.ind-%var1641X (_ BitVec 32)) (input.ind-%var1643X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1641X input.ind-%var1643X)))
 (let (($x258 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1641X)))
 (=> (and $x258 $x196) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1641X input.ind-%var1643X) (_ bv0 32))))))
 ))
 (let (($x92 (forall ((input.ind-%var1641X (_ BitVec 32)) (input.ind-%var1642X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1641X)))
 (=> $x258 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1641X input.ind-%var1642X) false))))
 ))
 (let (($x65 (forall ((input.ind-%var1640X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1640X)))
 (= $x289 false)))
 ))
 (let (($x8 (and (and $x65 $x92) $x188)))
 (let (($x79 (= $x8 true)))
 (let (($x113 (forall ((input.ind-%var1631X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1631X)))
 (=> $x248 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1631X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var1630X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1630X)))
 (= $x248 false)))
 ))
 (let (($x163 (and $x122 $x113)))
 (let (($x190 (= $x163 true)))
 (let (($x206 (forall ((input.ind-%var1623X (_ BitVec 32)) (input.ind-%var1625X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1623X input.ind-%var1625X)))
 (let (($x258 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1623X)))
 (=> (and $x258 $x196) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1623X input.ind-%var1625X) (_ bv0 32))))))
 ))
 (let (($x252 (forall ((input.ind-%var1623X (_ BitVec 32)) (input.ind-%var1624X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1623X)))
 (=> $x258 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1623X input.ind-%var1624X) false))))
 ))
 (let (($x112 (forall ((input.ind-%var1622X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1622X)))
 (= $x289 false)))
 ))
 (let (($x198 (and (and $x112 $x252) $x206)))
 (let (($x255 (= $x198 true)))
 (let (($x222 (forall ((input.ind-%var1613X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1613X)))
 (=> $x248 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1613X) (_ bv0 32)))))
 ))
 (let (($x277 (forall ((input.ind-%var1612X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1612X)))
 (= $x248 false)))
 ))
 (let (($x38 (and $x277 $x222)))
 (let (($x177 (= $x38 true)))
 (let ((?x46 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x46)))
 (let (($x144 (= ?x127 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x160 (= $x144 true)))
 (let (($x88 (= $x160 true)))
 (let ((?x103 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x103)))
 (let (($x147 (= ?x10 input.dst.llvm-%n)))
 (let (($x72 (= $x147 true)))
 (let (($x158 (= $x72 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x187)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x64 $x26)))
 (let (($x42 (and $x51 $x39)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x74 $x42)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x30)))))))
 (let (($x146 (and $x63 $x134)))
 (let (($x76 (= $x146 true)))
 (let (($x107 (= $x76 true)))
 (let (($x114 (= $x107 true)))
 (let (($x49 (= ?x10 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x24 (= $x49 true)))
 (let (($x241 (= $x24 true)))
 (let ((?x11 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x11)))
 (let (($x201 (= ?x173 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x201 true)))
 (let (($x21 (= $x100 true)))
 (let (($x14 (and $x21 $x241)))
 (let (($x121 (and $x14 $x114)))
 (let (($x155 (and $x121 $x158)))
 (let (($x102 (and $x155 $x88)))
 (let (($x180 (and $x102 $x177)))
 (let (($x140 (and $x180 $x255)))
 (let (($x43 (and $x140 $x190)))
 (let (($x151 (and $x43 $x79)))
 (let (($x109 (and $x151 $x240)))
 (let (($x280 (and $x109 $x110)))
 (let (($x35 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x191 (and $x35 $x280)))
 (let (($x45 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x175 (and $x45 $x191)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x116 (and $x54 $x175)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x189 (and $x37 $x116)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x193 (and $x50 $x189)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x203 (and $x48 $x193)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x244 (and $x148 $x203)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x246 (and $x70 $x244)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x230 (and $x23 $x246)))
 (let (($x150 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x192 (and $x150 $x230)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x106 (and $x56 $x192)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x176 (and $x12 $x106)))
 (let (($x197 (=> $x176 $x286)))
 (not $x197))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00064000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00064003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x03ffa000)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x03ffa003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x03ffa000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x287 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x216 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x210 (or $x216 $x287)))
 (let (($x141 (= $x210 true)))
 (let (($x139 (= $x141 true)))
 (let (($x130 (forall ((input.ind-%var3586X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3586X)))
 (= $x94 false)))
 ))
 (let (($x83 (forall ((input.ind-%var3587X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3587X)))
 (=> $x94 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3587X) (_ bv0 32)))))
 ))
 (let (($x111 (and $x83 $x130)))
 (let (($x159 (= $x111 true)))
 (let (($x183 (forall ((input.ind-%var3579X (_ BitVec 32)) (input.ind-%var3580X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3579X)))
 (=> $x233 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3579X input.ind-%var3580X) false))))
 ))
 (let (($x209 (forall ((input.ind-%var3578X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3578X)))
 (= $x285 false)))
 ))
 (let (($x82 (forall ((input.ind-%var3579X (_ BitVec 32)) (input.ind-%var3581X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3579X input.ind-%var3581X)))
 (let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3579X)))
 (=> (and $x233 $x92) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3579X input.ind-%var3581X) (_ bv0 32))))))
 ))
 (let (($x164 (and (and $x82 $x209) $x183)))
 (let (($x267 (= $x164 true)))
 (let (($x66 (forall ((input.ind-%var3567X (_ BitVec 32)) (input.ind-%var3569X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3567X input.ind-%var3569X)))
 (let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3567X)))
 (=> (and $x233 $x92) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3567X input.ind-%var3569X) (_ bv0 32))))))
 ))
 (let (($x152 (forall ((input.ind-%var3567X (_ BitVec 32)) (input.ind-%var3568X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3567X)))
 (=> $x233 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3567X input.ind-%var3568X) false))))
 ))
 (let (($x218 (forall ((input.ind-%var3566X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3566X)))
 (= $x285 false)))
 ))
 (let (($x264 (and (and $x218 $x152) $x66)))
 (let (($x98 (= $x264 true)))
 (let (($x286 (forall ((input.ind-%var3557X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3557X)))
 (=> $x94 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3557X) (_ bv0 32)))))
 ))
 (let (($x192 (forall ((input.ind-%var3556X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3556X)))
 (= $x94 false)))
 ))
 (let (($x197 (and $x192 $x286)))
 (let (($x215 (= $x197 true)))
 (let (($x175 (forall ((input.ind-%var3549X (_ BitVec 32)) (input.ind-%var3550X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3549X)))
 (=> $x233 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3549X input.ind-%var3550X) false))))
 ))
 (let (($x109 (forall ((input.ind-%var3549X (_ BitVec 32)) (input.ind-%var3551X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3549X input.ind-%var3551X)))
 (let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3549X)))
 (=> (and $x233 $x92) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3549X input.ind-%var3551X) (_ bv0 32))))))
 ))
 (let (($x140 (forall ((input.ind-%var3548X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3548X)))
 (= $x285 false)))
 ))
 (let (($x189 (and (and $x140 $x109) $x175)))
 (let (($x193 (= $x189 true)))
 (let (($x17 (forall ((input.ind-%var3538X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3538X)))
 (= $x94 false)))
 ))
 (let (($x112 (forall ((input.ind-%var3539X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3539X)))
 (=> $x94 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3539X) (_ bv0 32)))))
 ))
 (let (($x252 (and $x112 $x17)))
 (let (($x251 (= $x252 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x62 (bvneg ?x127)))
 (let (($x160 (= ?x62 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x160 true)))
 (let (($x102 (= $x88 true)))
 (let ((?x146 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x146)))
 (let (($x72 (= ?x76 input.dst.llvm-%n)))
 (let (($x158 (= $x72 true)))
 (let (($x155 (= $x158 true)))
 (let (($x107 (= ?x76 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x114 (= $x107 true)))
 (let (($x121 (= $x114 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x64)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x13 $x18)))
 (let (($x108 (and $x74 $x61)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x49 $x108)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x71)))))))
 (let (($x51 (and $x36 $x26)))
 (let (($x187 (= $x51 true)))
 (let (($x39 (= $x187 true)))
 (let (($x42 (= $x39 true)))
 (let ((?x15 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x15)))
 (let (($x7 (= ?x11 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x201 (= $x7 true)))
 (let (($x100 (= $x201 true)))
 (let (($x134 (and $x100 $x42)))
 (let (($x156 (and $x134 $x121)))
 (let (($x53 (and $x156 $x155)))
 (let (($x126 (and $x53 $x102)))
 (let (($x119 (and $x126 $x251)))
 (let (($x203 (and $x119 $x193)))
 (let (($x69 (and $x203 $x215)))
 (let (($x186 (and $x69 $x98)))
 (let (($x162 (and $x186 $x267)))
 (let (($x279 (and $x162 $x159)))
 (let (($x45 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x86 (and $x45 $x279)))
 (let (($x54 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x238 (and $x54 $x86)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x245 (and $x29 $x238)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x75 (and $x19 $x245)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x170 (and $x40 $x75)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x68 (and $x96 $x170)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x99 (and $x58 $x68)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x275 (and $x73 $x99)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x16 (and $x31 $x275)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x91 (and $x56 $x16)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x95 (and $x185 $x91)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x153 (and $x57 $x95)))
 (let (($x115 (=> $x153 $x139)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x287 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x216 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x210 (or $x216 $x287)))
 (let (($x141 (= $x210 true)))
 (let (($x139 (= $x141 true)))
 (let (($x130 (forall ((input.ind-%var3586X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3586X)))
 (= $x94 false)))
 ))
 (let (($x83 (forall ((input.ind-%var3587X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3587X)))
 (=> $x94 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3587X) (_ bv0 32)))))
 ))
 (let (($x111 (and $x83 $x130)))
 (let (($x159 (= $x111 true)))
 (let (($x183 (forall ((input.ind-%var3579X (_ BitVec 32)) (input.ind-%var3580X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3579X)))
 (=> $x233 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3579X input.ind-%var3580X) false))))
 ))
 (let (($x209 (forall ((input.ind-%var3578X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3578X)))
 (= $x285 false)))
 ))
 (let (($x82 (forall ((input.ind-%var3579X (_ BitVec 32)) (input.ind-%var3581X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3579X input.ind-%var3581X)))
 (let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3579X)))
 (=> (and $x233 $x92) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3579X input.ind-%var3581X) (_ bv0 32))))))
 ))
 (let (($x164 (and (and $x82 $x209) $x183)))
 (let (($x267 (= $x164 true)))
 (let (($x66 (forall ((input.ind-%var3567X (_ BitVec 32)) (input.ind-%var3569X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3567X input.ind-%var3569X)))
 (let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3567X)))
 (=> (and $x233 $x92) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3567X input.ind-%var3569X) (_ bv0 32))))))
 ))
 (let (($x152 (forall ((input.ind-%var3567X (_ BitVec 32)) (input.ind-%var3568X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3567X)))
 (=> $x233 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3567X input.ind-%var3568X) false))))
 ))
 (let (($x218 (forall ((input.ind-%var3566X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3566X)))
 (= $x285 false)))
 ))
 (let (($x264 (and (and $x218 $x152) $x66)))
 (let (($x98 (= $x264 true)))
 (let (($x286 (forall ((input.ind-%var3557X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3557X)))
 (=> $x94 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3557X) (_ bv0 32)))))
 ))
 (let (($x192 (forall ((input.ind-%var3556X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3556X)))
 (= $x94 false)))
 ))
 (let (($x197 (and $x192 $x286)))
 (let (($x215 (= $x197 true)))
 (let (($x175 (forall ((input.ind-%var3549X (_ BitVec 32)) (input.ind-%var3550X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3549X)))
 (=> $x233 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3549X input.ind-%var3550X) false))))
 ))
 (let (($x109 (forall ((input.ind-%var3549X (_ BitVec 32)) (input.ind-%var3551X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3549X input.ind-%var3551X)))
 (let (($x233 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3549X)))
 (=> (and $x233 $x92) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3549X input.ind-%var3551X) (_ bv0 32))))))
 ))
 (let (($x140 (forall ((input.ind-%var3548X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3548X)))
 (= $x285 false)))
 ))
 (let (($x189 (and (and $x140 $x109) $x175)))
 (let (($x193 (= $x189 true)))
 (let (($x17 (forall ((input.ind-%var3538X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3538X)))
 (= $x94 false)))
 ))
 (let (($x112 (forall ((input.ind-%var3539X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3539X)))
 (=> $x94 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3539X) (_ bv0 32)))))
 ))
 (let (($x252 (and $x112 $x17)))
 (let (($x251 (= $x252 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x62 (bvneg ?x127)))
 (let (($x160 (= ?x62 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x160 true)))
 (let (($x102 (= $x88 true)))
 (let ((?x146 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x146)))
 (let (($x72 (= ?x76 input.dst.llvm-%n)))
 (let (($x158 (= $x72 true)))
 (let (($x155 (= $x158 true)))
 (let (($x107 (= ?x76 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x114 (= $x107 true)))
 (let (($x121 (= $x114 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x64)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x13 $x18)))
 (let (($x108 (and $x74 $x61)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x49 $x108)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x71)))))))
 (let (($x51 (and $x36 $x26)))
 (let (($x187 (= $x51 true)))
 (let (($x39 (= $x187 true)))
 (let (($x42 (= $x39 true)))
 (let ((?x15 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x15)))
 (let (($x7 (= ?x11 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x201 (= $x7 true)))
 (let (($x100 (= $x201 true)))
 (let (($x134 (and $x100 $x42)))
 (let (($x156 (and $x134 $x121)))
 (let (($x53 (and $x156 $x155)))
 (let (($x126 (and $x53 $x102)))
 (let (($x119 (and $x126 $x251)))
 (let (($x203 (and $x119 $x193)))
 (let (($x69 (and $x203 $x215)))
 (let (($x186 (and $x69 $x98)))
 (let (($x162 (and $x186 $x267)))
 (let (($x279 (and $x162 $x159)))
 (let (($x45 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x86 (and $x45 $x279)))
 (let (($x54 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x238 (and $x54 $x86)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x245 (and $x29 $x238)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x75 (and $x19 $x245)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x170 (and $x40 $x75)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x68 (and $x96 $x170)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x99 (and $x58 $x68)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x275 (and $x73 $x99)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x16 (and $x31 $x275)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x91 (and $x56 $x16)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x95 (and $x185 $x91)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x153 (and $x57 $x95)))
 (let (($x115 (=> $x153 $x139)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 165 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x181 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x261 (ite $x181 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x165 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x205 (ite $x165 ?x261 (_ bv0 32))))
 (let (($x207 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x205)))
 (let (($x260 (= $x207 true)))
 (let (($x123 (= $x260 true)))
 (let (($x213 (forall ((input.ind-%var3777X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3777X)))
 (=> $x285 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3777X) (_ bv0 32)))))
 ))
 (let (($x84 (forall ((input.ind-%var3776X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3776X)))
 (= $x285 false)))
 ))
 (let (($x226 (and $x84 $x213)))
 (let (($x28 (= $x226 true)))
 (let (($x110 (forall ((input.ind-%var3769X (_ BitVec 32)) (input.ind-%var3771X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3769X input.ind-%var3771X)))
 (let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3769X)))
 (=> (and $x267 $x66) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3769X input.ind-%var3771X) (_ bv0 32))))))
 ))
 (let (($x202 (forall ((input.ind-%var3768X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3768X)))
 (= $x215 false)))
 ))
 (let (($x25 (forall ((input.ind-%var3769X (_ BitVec 32)) (input.ind-%var3770X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3769X)))
 (=> $x267 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3769X input.ind-%var3770X) false))))
 ))
 (let (($x142 (and (and $x25 $x202) $x110)))
 (let (($x129 (= $x142 true)))
 (let (($x8 (forall ((input.ind-%var3756X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3756X)))
 (= $x215 false)))
 ))
 (let (($x246 (forall ((input.ind-%var3757X (_ BitVec 32)) (input.ind-%var3758X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3757X)))
 (=> $x267 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3757X input.ind-%var3758X) false))))
 ))
 (let (($x105 (forall ((input.ind-%var3757X (_ BitVec 32)) (input.ind-%var3759X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3757X input.ind-%var3759X)))
 (let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3757X)))
 (=> (and $x267 $x66) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3757X input.ind-%var3759X) (_ bv0 32))))))
 ))
 (let (($x269 (and (and $x105 $x246) $x8)))
 (let (($x104 (= $x269 true)))
 (let (($x206 (forall ((input.ind-%var3746X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3746X)))
 (= $x285 false)))
 ))
 (let (($x178 (forall ((input.ind-%var3747X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3747X)))
 (=> $x285 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3747X) (_ bv0 32)))))
 ))
 (let (($x172 (and $x178 $x206)))
 (let (($x151 (= $x172 true)))
 (let (($x16 (forall ((input.ind-%var3738X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3738X)))
 (= $x215 false)))
 ))
 (let (($x75 (forall ((input.ind-%var3739X (_ BitVec 32)) (input.ind-%var3740X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3739X)))
 (=> $x267 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3739X input.ind-%var3740X) false))))
 ))
 (let (($x130 (forall ((input.ind-%var3739X (_ BitVec 32)) (input.ind-%var3741X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3739X input.ind-%var3741X)))
 (let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3739X)))
 (=> (and $x267 $x66) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3739X input.ind-%var3741X) (_ bv0 32))))))
 ))
 (let (($x95 (and (and $x130 $x75) $x16)))
 (let (($x153 (= $x95 true)))
 (let (($x175 (forall ((input.ind-%var3728X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3728X)))
 (= $x285 false)))
 ))
 (let (($x240 (forall ((input.ind-%var3729X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3729X)))
 (=> $x285 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3729X) (_ bv0 32)))))
 ))
 (let (($x189 (and $x240 $x175)))
 (let (($x193 (= $x189 true)))
 (let ((?x94 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x94)))
 (let (($x128 (= ?x222 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x112 (= $x128 true)))
 (let (($x117 (= $x112 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x53)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x156 $x158)))
 (let (($x127 (and $x155 $x46)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x64 $x127)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x42)))))))
 (let (($x144 (and $x121 $x62)))
 (let (($x160 (= $x144 true)))
 (let (($x88 (= $x160 true)))
 (let (($x102 (= $x88 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x71)))
 (let (($x10 (= ?x27 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x49 (= $x10 true)))
 (let (($x13 (= $x49 true)))
 (let (($x52 (= ?x27 input.dst.llvm-%n)))
 (let (($x5 (= $x52 true)))
 (let (($x30 (= $x5 true)))
 (let ((?x241 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x241)))
 (let (($x14 (= ?x55 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x33 (= $x14 true)))
 (let (($x78 (= $x33 true)))
 (let (($x11 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (not $x11)))
 (let (($x7 (= $x173 true)))
 (let (($x201 (= $x7 true)))
 (let (($x100 (= $x201 true)))
 (let (($x47 (and $x100 $x78)))
 (let (($x36 (and $x47 $x30)))
 (let (($x87 (and $x36 $x13)))
 (let (($x126 (and $x87 $x102)))
 (let (($x17 (and $x126 $x117)))
 (let (($x203 (and $x17 $x193)))
 (let (($x216 (and $x203 $x153)))
 (let (($x106 (and $x216 $x151)))
 (let (($x118 (and $x106 $x104)))
 (let (($x43 (and $x118 $x129)))
 (let (($x97 (and $x43 $x28)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x217 (and $x35 $x97)))
 (let (($x54 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x199 (and $x54 $x217)))
 (let (($x29 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x145 (and $x29 $x199)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x161 (and $x41 $x145)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x22 (and $x50 $x161)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x89 (and $x48 $x22)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x204 (and $x148 $x89)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x133 (and $x70 $x204)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x272 (and $x23 $x133)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x282 (and $x150 $x272)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x6 (and $x20 $x282)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x190 (and $x44 $x6)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x284 (and $x12 $x190)))
 (let (($x149 (=> $x284 $x123)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x181 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x261 (ite $x181 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x165 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x205 (ite $x165 ?x261 (_ bv0 32))))
 (let (($x207 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x205)))
 (let (($x260 (= $x207 true)))
 (let (($x123 (= $x260 true)))
 (let (($x213 (forall ((input.ind-%var3777X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3777X)))
 (=> $x285 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3777X) (_ bv0 32)))))
 ))
 (let (($x84 (forall ((input.ind-%var3776X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3776X)))
 (= $x285 false)))
 ))
 (let (($x226 (and $x84 $x213)))
 (let (($x28 (= $x226 true)))
 (let (($x110 (forall ((input.ind-%var3769X (_ BitVec 32)) (input.ind-%var3771X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3769X input.ind-%var3771X)))
 (let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3769X)))
 (=> (and $x267 $x66) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3769X input.ind-%var3771X) (_ bv0 32))))))
 ))
 (let (($x202 (forall ((input.ind-%var3768X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3768X)))
 (= $x215 false)))
 ))
 (let (($x25 (forall ((input.ind-%var3769X (_ BitVec 32)) (input.ind-%var3770X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3769X)))
 (=> $x267 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3769X input.ind-%var3770X) false))))
 ))
 (let (($x142 (and (and $x25 $x202) $x110)))
 (let (($x129 (= $x142 true)))
 (let (($x8 (forall ((input.ind-%var3756X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3756X)))
 (= $x215 false)))
 ))
 (let (($x246 (forall ((input.ind-%var3757X (_ BitVec 32)) (input.ind-%var3758X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3757X)))
 (=> $x267 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3757X input.ind-%var3758X) false))))
 ))
 (let (($x105 (forall ((input.ind-%var3757X (_ BitVec 32)) (input.ind-%var3759X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3757X input.ind-%var3759X)))
 (let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3757X)))
 (=> (and $x267 $x66) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3757X input.ind-%var3759X) (_ bv0 32))))))
 ))
 (let (($x269 (and (and $x105 $x246) $x8)))
 (let (($x104 (= $x269 true)))
 (let (($x206 (forall ((input.ind-%var3746X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3746X)))
 (= $x285 false)))
 ))
 (let (($x178 (forall ((input.ind-%var3747X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3747X)))
 (=> $x285 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3747X) (_ bv0 32)))))
 ))
 (let (($x172 (and $x178 $x206)))
 (let (($x151 (= $x172 true)))
 (let (($x16 (forall ((input.ind-%var3738X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3738X)))
 (= $x215 false)))
 ))
 (let (($x75 (forall ((input.ind-%var3739X (_ BitVec 32)) (input.ind-%var3740X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3739X)))
 (=> $x267 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3739X input.ind-%var3740X) false))))
 ))
 (let (($x130 (forall ((input.ind-%var3739X (_ BitVec 32)) (input.ind-%var3741X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3739X input.ind-%var3741X)))
 (let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3739X)))
 (=> (and $x267 $x66) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3739X input.ind-%var3741X) (_ bv0 32))))))
 ))
 (let (($x95 (and (and $x130 $x75) $x16)))
 (let (($x153 (= $x95 true)))
 (let (($x175 (forall ((input.ind-%var3728X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3728X)))
 (= $x285 false)))
 ))
 (let (($x240 (forall ((input.ind-%var3729X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3729X)))
 (=> $x285 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3729X) (_ bv0 32)))))
 ))
 (let (($x189 (and $x240 $x175)))
 (let (($x193 (= $x189 true)))
 (let ((?x94 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x94)))
 (let (($x128 (= ?x222 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x112 (= $x128 true)))
 (let (($x117 (= $x112 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x53)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x156 $x158)))
 (let (($x127 (and $x155 $x46)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x64 $x127)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x42)))))))
 (let (($x144 (and $x121 $x62)))
 (let (($x160 (= $x144 true)))
 (let (($x88 (= $x160 true)))
 (let (($x102 (= $x88 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x71)))
 (let (($x10 (= ?x27 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x49 (= $x10 true)))
 (let (($x13 (= $x49 true)))
 (let (($x52 (= ?x27 input.dst.llvm-%n)))
 (let (($x5 (= $x52 true)))
 (let (($x30 (= $x5 true)))
 (let ((?x241 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x241)))
 (let (($x14 (= ?x55 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x33 (= $x14 true)))
 (let (($x78 (= $x33 true)))
 (let (($x11 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (not $x11)))
 (let (($x7 (= $x173 true)))
 (let (($x201 (= $x7 true)))
 (let (($x100 (= $x201 true)))
 (let (($x47 (and $x100 $x78)))
 (let (($x36 (and $x47 $x30)))
 (let (($x87 (and $x36 $x13)))
 (let (($x126 (and $x87 $x102)))
 (let (($x17 (and $x126 $x117)))
 (let (($x203 (and $x17 $x193)))
 (let (($x216 (and $x203 $x153)))
 (let (($x106 (and $x216 $x151)))
 (let (($x118 (and $x106 $x104)))
 (let (($x43 (and $x118 $x129)))
 (let (($x97 (and $x43 $x28)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x217 (and $x35 $x97)))
 (let (($x54 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x199 (and $x54 $x217)))
 (let (($x29 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x145 (and $x29 $x199)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x161 (and $x41 $x145)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x22 (and $x50 $x161)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x89 (and $x48 $x22)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x204 (and $x148 $x89)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x133 (and $x70 $x204)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x272 (and $x23 $x133)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x282 (and $x150 $x272)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x6 (and $x20 $x282)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x190 (and $x44 $x6)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x284 (and $x12 $x190)))
 (let (($x149 (=> $x284 $x123)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x174 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (not $x174)))
 (let (($x90 (or $x174 $x80)))
 (let (($x278 (= $x90 true)))
 (let (($x85 (= $x278 true)))
 (let (($x279 (forall ((input.ind-%var3913X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3913X)))
 (=> $x112 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3913X) (_ bv0 32)))))
 ))
 (let (($x224 (forall ((input.ind-%var3912X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3912X)))
 (= $x112 false)))
 ))
 (let (($x266 (and $x224 $x279)))
 (let (($x197 (= $x266 true)))
 (let (($x92 (forall ((input.ind-%var3905X (_ BitVec 32)) (input.ind-%var3907X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3905X input.ind-%var3907X)))
 (let (($x106 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3905X)))
 (=> (and $x106 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3905X input.ind-%var3907X) (_ bv0 32))))))
 ))
 (let (($x170 (forall ((input.ind-%var3905X (_ BitVec 32)) (input.ind-%var3906X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3905X)))
 (=> $x106 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3905X input.ind-%var3906X) false))))
 ))
 (let (($x248 (forall ((input.ind-%var3904X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3904X)))
 (= $x83 false)))
 ))
 (let (($x229 (and (and $x248 $x170) $x92)))
 (let (($x113 (= $x229 true)))
 (let (($x252 (forall ((input.ind-%var3893X (_ BitVec 32)) (input.ind-%var3895X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3893X input.ind-%var3895X)))
 (let (($x106 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3893X)))
 (=> (and $x106 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3893X input.ind-%var3895X) (_ bv0 32))))))
 ))
 (let (($x18 (forall ((input.ind-%var3893X (_ BitVec 32)) (input.ind-%var3894X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3893X)))
 (=> $x106 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3893X input.ind-%var3894X) false))))
 ))
 (let (($x261 (forall ((input.ind-%var3892X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3892X)))
 (= $x83 false)))
 ))
 (let (($x192 (and (and $x261 $x18) $x252)))
 (let (($x111 (= $x192 true)))
 (let (($x272 (forall ((input.ind-%var3883X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3883X)))
 (=> $x112 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3883X) (_ bv0 32)))))
 ))
 (let (($x145 (forall ((input.ind-%var3882X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3882X)))
 (= $x112 false)))
 ))
 (let (($x282 (and $x145 $x272)))
 (let (($x6 (= $x282 true)))
 (let (($x43 (forall ((input.ind-%var3875X (_ BitVec 32)) (input.ind-%var3877X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3875X input.ind-%var3877X)))
 (let (($x106 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3875X)))
 (=> (and $x106 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3875X input.ind-%var3877X) (_ bv0 32))))))
 ))
 (let (($x246 (forall ((input.ind-%var3875X (_ BitVec 32)) (input.ind-%var3876X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3875X)))
 (=> $x106 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3875X input.ind-%var3876X) false))))
 ))
 (let (($x75 (forall ((input.ind-%var3874X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3874X)))
 (= $x83 false)))
 ))
 (let (($x213 (and (and $x75 $x246) $x43)))
 (let (($x226 (= $x213 true)))
 (let (($x194 (forall ((input.ind-%var3865X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3865X)))
 (=> $x112 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3865X) (_ bv0 32)))))
 ))
 (let (($x285 (forall ((input.ind-%var3864X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3864X)))
 (= $x112 false)))
 ))
 (let (($x267 (and $x285 $x194)))
 (let (($x66 (= $x267 true)))
 (let ((?x144 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x160 (bvneg ?x144)))
 (let (($x102 (= ?x160 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x102 true)))
 (let (($x277 (= $x126 true)))
 (let ((?x201 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x201)))
 (let (($x155 (= ?x100 input.dst.llvm-%n)))
 (let (($x53 (= $x155 true)))
 (let (($x46 (= $x53 true)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x146)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x187 $x42)))
 (let (($x107 (and $x134 $x76)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x71 $x107)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x49)))))))
 (let (($x74 (and $x26 $x121)))
 (let (($x64 (= $x74 true)))
 (let (($x156 (= $x64 true)))
 (let (($x147 (= $x156 true)))
 (let (($x24 (= ?x100 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x241 (= $x24 true)))
 (let (($x55 (= $x241 true)))
 (let ((?x35 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x35)))
 (let (($x11 (= ?x9 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x173 (= $x11 true)))
 (let (($x7 (= $x173 true)))
 (let (($x14 (and $x7 $x55)))
 (let (($x72 (and $x14 $x147)))
 (let (($x127 (and $x72 $x46)))
 (let (($x94 (and $x127 $x277)))
 (let (($x162 (and $x94 $x66)))
 (let (($x28 (and $x162 $x226)))
 (let (($x190 (and $x28 $x6)))
 (let (($x141 (and $x190 $x111)))
 (let (($x168 (and $x141 $x113)))
 (let (($x86 (and $x168 $x197)))
 (let (($x29 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x38 (and $x29 $x86)))
 (let (($x41 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x139 (and $x41 $x38)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x242 (and $x37 $x139)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x152 (and $x40 $x242)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x98 (and $x96 $x152)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x183 (and $x58 $x98)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x210 (and $x73 $x183)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x115 (and $x31 $x210)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x219 (and $x56 $x115)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x288 (and $x185 $x219)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x122 (and $x21 $x288)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x244 (and $x12 $x122)))
 (let (($x258 (=> $x244 $x85)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x174 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (not $x174)))
 (let (($x90 (or $x174 $x80)))
 (let (($x278 (= $x90 true)))
 (let (($x85 (= $x278 true)))
 (let (($x279 (forall ((input.ind-%var3913X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3913X)))
 (=> $x112 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3913X) (_ bv0 32)))))
 ))
 (let (($x224 (forall ((input.ind-%var3912X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3912X)))
 (= $x112 false)))
 ))
 (let (($x266 (and $x224 $x279)))
 (let (($x197 (= $x266 true)))
 (let (($x92 (forall ((input.ind-%var3905X (_ BitVec 32)) (input.ind-%var3907X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3905X input.ind-%var3907X)))
 (let (($x106 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3905X)))
 (=> (and $x106 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3905X input.ind-%var3907X) (_ bv0 32))))))
 ))
 (let (($x170 (forall ((input.ind-%var3905X (_ BitVec 32)) (input.ind-%var3906X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3905X)))
 (=> $x106 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3905X input.ind-%var3906X) false))))
 ))
 (let (($x248 (forall ((input.ind-%var3904X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3904X)))
 (= $x83 false)))
 ))
 (let (($x229 (and (and $x248 $x170) $x92)))
 (let (($x113 (= $x229 true)))
 (let (($x252 (forall ((input.ind-%var3893X (_ BitVec 32)) (input.ind-%var3895X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3893X input.ind-%var3895X)))
 (let (($x106 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3893X)))
 (=> (and $x106 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3893X input.ind-%var3895X) (_ bv0 32))))))
 ))
 (let (($x18 (forall ((input.ind-%var3893X (_ BitVec 32)) (input.ind-%var3894X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3893X)))
 (=> $x106 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3893X input.ind-%var3894X) false))))
 ))
 (let (($x261 (forall ((input.ind-%var3892X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3892X)))
 (= $x83 false)))
 ))
 (let (($x192 (and (and $x261 $x18) $x252)))
 (let (($x111 (= $x192 true)))
 (let (($x272 (forall ((input.ind-%var3883X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3883X)))
 (=> $x112 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3883X) (_ bv0 32)))))
 ))
 (let (($x145 (forall ((input.ind-%var3882X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3882X)))
 (= $x112 false)))
 ))
 (let (($x282 (and $x145 $x272)))
 (let (($x6 (= $x282 true)))
 (let (($x43 (forall ((input.ind-%var3875X (_ BitVec 32)) (input.ind-%var3877X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3875X input.ind-%var3877X)))
 (let (($x106 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3875X)))
 (=> (and $x106 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3875X input.ind-%var3877X) (_ bv0 32))))))
 ))
 (let (($x246 (forall ((input.ind-%var3875X (_ BitVec 32)) (input.ind-%var3876X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3875X)))
 (=> $x106 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3875X input.ind-%var3876X) false))))
 ))
 (let (($x75 (forall ((input.ind-%var3874X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3874X)))
 (= $x83 false)))
 ))
 (let (($x213 (and (and $x75 $x246) $x43)))
 (let (($x226 (= $x213 true)))
 (let (($x194 (forall ((input.ind-%var3865X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3865X)))
 (=> $x112 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3865X) (_ bv0 32)))))
 ))
 (let (($x285 (forall ((input.ind-%var3864X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3864X)))
 (= $x112 false)))
 ))
 (let (($x267 (and $x285 $x194)))
 (let (($x66 (= $x267 true)))
 (let ((?x144 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x160 (bvneg ?x144)))
 (let (($x102 (= ?x160 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x102 true)))
 (let (($x277 (= $x126 true)))
 (let ((?x201 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x201)))
 (let (($x155 (= ?x100 input.dst.llvm-%n)))
 (let (($x53 (= $x155 true)))
 (let (($x46 (= $x53 true)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x146)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x187 $x42)))
 (let (($x107 (and $x134 $x76)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x71 $x107)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x49)))))))
 (let (($x74 (and $x26 $x121)))
 (let (($x64 (= $x74 true)))
 (let (($x156 (= $x64 true)))
 (let (($x147 (= $x156 true)))
 (let (($x24 (= ?x100 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x241 (= $x24 true)))
 (let (($x55 (= $x241 true)))
 (let ((?x35 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x35)))
 (let (($x11 (= ?x9 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x173 (= $x11 true)))
 (let (($x7 (= $x173 true)))
 (let (($x14 (and $x7 $x55)))
 (let (($x72 (and $x14 $x147)))
 (let (($x127 (and $x72 $x46)))
 (let (($x94 (and $x127 $x277)))
 (let (($x162 (and $x94 $x66)))
 (let (($x28 (and $x162 $x226)))
 (let (($x190 (and $x28 $x6)))
 (let (($x141 (and $x190 $x111)))
 (let (($x168 (and $x141 $x113)))
 (let (($x86 (and $x168 $x197)))
 (let (($x29 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x38 (and $x29 $x86)))
 (let (($x41 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x139 (and $x41 $x38)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x242 (and $x37 $x139)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x152 (and $x40 $x242)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x98 (and $x96 $x152)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x183 (and $x58 $x98)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x210 (and $x73 $x183)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x115 (and $x31 $x210)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x219 (and $x56 $x115)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x288 (and $x185 $x219)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x122 (and $x21 $x288)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x244 (and $x12 $x122)))
 (let (($x258 (=> $x244 $x85)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 165 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x49)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x114 $x10)))
 (let (($x87 (and $x30 $x13)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x52 $x87)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x7)))))))
 (let (($x219 (and $x14 $x61)))
 (let (($x288 (= $x219 true)))
 (let (($x122 (= $x288 true)))
 (let (($x168 (forall ((input.ind-%var3931X (_ BitVec 32)) )(let (($x190 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3931X)))
 (=> $x190 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3931X) (_ bv0 32)))))
 ))
 (let (($x252 (forall ((input.ind-%var3930X (_ BitVec 32)) )(let (($x190 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3930X)))
 (= $x190 false)))
 ))
 (let (($x224 (and $x252 $x168)))
 (let (($x279 (= $x224 true)))
 (let (($x213 (forall ((input.ind-%var3923X (_ BitVec 32)) (input.ind-%var3925X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3923X input.ind-%var3925X)))
 (let (($x245 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3923X)))
 (=> (and $x245 $x194) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3923X input.ind-%var3925X) (_ bv0 32))))))
 ))
 (let (($x153 (forall ((input.ind-%var3923X (_ BitVec 32)) (input.ind-%var3924X (_ BitVec 32)) )(let (($x245 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3923X)))
 (=> $x245 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3923X input.ind-%var3924X) false))))
 ))
 (let (($x128 (forall ((input.ind-%var3922X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3922X)))
 (= $x102 false)))
 ))
 (let (($x28 (and (and $x128 $x153) $x213)))
 (let (($x145 (= $x28 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x107 (concat ?x134 (concat ?x187 ?x47)))))
 (let (($x53 (= ?x121 input.dst.llvm-%n)))
 (let (($x46 (= $x53 true)))
 (let (($x127 (= $x46 true)))
 (let (($x74 (= input.dst.llvm-%n ?x121)))
 (let (($x147 (and (and (and $x14 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x61) $x74)))
 (let (($x72 (= $x147 true)))
 (let (($x158 (= $x72 true)))
 (let (($x155 (= $x158 true)))
 (let (($x62 (and $x155 $x127)))
 (let (($x272 (and $x62 $x145)))
 (let (($x266 (and $x272 $x279)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x197 (and $x19 $x266)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x86 (and $x48 $x197)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x38 (and $x148 $x86)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x139 (and $x70 $x38)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x242 (and $x23 $x139)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x152 (and $x150 $x242)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x98 (and $x20 $x152)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x183 (and $x44 $x98)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x210 (and $x57 $x183)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x115 (and $x33 $x210)))
 (let (($x244 (=> $x115 $x122)))
 (not $x244)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x49)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x114 $x10)))
 (let (($x87 (and $x30 $x13)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x52 $x87)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x7)))))))
 (let (($x219 (and $x14 $x61)))
 (let (($x288 (= $x219 true)))
 (let (($x122 (= $x288 true)))
 (let (($x168 (forall ((input.ind-%var3931X (_ BitVec 32)) )(let (($x190 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3931X)))
 (=> $x190 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3931X) (_ bv0 32)))))
 ))
 (let (($x252 (forall ((input.ind-%var3930X (_ BitVec 32)) )(let (($x190 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3930X)))
 (= $x190 false)))
 ))
 (let (($x224 (and $x252 $x168)))
 (let (($x279 (= $x224 true)))
 (let (($x213 (forall ((input.ind-%var3923X (_ BitVec 32)) (input.ind-%var3925X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3923X input.ind-%var3925X)))
 (let (($x245 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3923X)))
 (=> (and $x245 $x194) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3923X input.ind-%var3925X) (_ bv0 32))))))
 ))
 (let (($x153 (forall ((input.ind-%var3923X (_ BitVec 32)) (input.ind-%var3924X (_ BitVec 32)) )(let (($x245 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3923X)))
 (=> $x245 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3923X input.ind-%var3924X) false))))
 ))
 (let (($x128 (forall ((input.ind-%var3922X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3922X)))
 (= $x102 false)))
 ))
 (let (($x28 (and (and $x128 $x153) $x213)))
 (let (($x145 (= $x28 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x107 (concat ?x134 (concat ?x187 ?x47)))))
 (let (($x53 (= ?x121 input.dst.llvm-%n)))
 (let (($x46 (= $x53 true)))
 (let (($x127 (= $x46 true)))
 (let (($x74 (= input.dst.llvm-%n ?x121)))
 (let (($x147 (and (and (and $x14 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x61) $x74)))
 (let (($x72 (= $x147 true)))
 (let (($x158 (= $x72 true)))
 (let (($x155 (= $x158 true)))
 (let (($x62 (and $x155 $x127)))
 (let (($x272 (and $x62 $x145)))
 (let (($x266 (and $x272 $x279)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x197 (and $x19 $x266)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x86 (and $x48 $x197)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x38 (and $x148 $x86)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x139 (and $x70 $x38)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x242 (and $x23 $x139)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x152 (and $x150 $x242)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x98 (and $x20 $x152)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x183 (and $x44 $x98)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x210 (and $x57 $x183)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x115 (and $x33 $x210)))
 (let (($x244 (=> $x115 $x122)))
 (not $x244)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x111)))
 (let (($x157 (= ?x92 input.spec-%var-n-1)))
 (let (($x240 (= $x157 true)))
 (let (($x160 (forall ((input.ind-%var3949X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3949X)))
 (=> $x244 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3949X) (_ bv0 32)))))
 ))
 (let (($x261 (forall ((input.ind-%var3948X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3948X)))
 (= $x244 false)))
 ))
 (let (($x277 (and $x261 $x160)))
 (let (($x193 (= $x277 true)))
 (let (($x98 (forall ((input.ind-%var3941X (_ BitVec 32)) (input.ind-%var3943X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3941X input.ind-%var3943X)))
 (let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3941X)))
 (=> (and $x252 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3941X input.ind-%var3943X) (_ bv0 32))))))
 ))
 (let (($x229 (forall ((input.ind-%var3941X (_ BitVec 32)) (input.ind-%var3942X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3941X)))
 (=> $x252 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3941X input.ind-%var3942X) false))))
 ))
 (let (($x153 (forall ((input.ind-%var3940X (_ BitVec 32)) )(let (($x245 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3940X)))
 (= $x245 false)))
 ))
 (let (($x210 (and (and $x153 $x229) $x98)))
 (let (($x115 (= $x210 true)))
 (let ((?x9 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x29 (concat ?x100 (concat ?x173 ?x9)))))
 (let (($x158 (= input.dst.llvm-%n ?x54)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x121)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x187 $x39)))
 (let (($x147 (and $x146 $x74)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x10 $x147)))
 (let (($x36 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x108)))))))
 (let (($x46 (and (and (and $x71 $x36) $x72) $x158)))
 (let (($x127 (= $x46 true)))
 (let (($x62 (= $x127 true)))
 (let (($x88 (= $x62 true)))
 (let (($x27 (= ?x54 input.dst.llvm-%n)))
 (let (($x52 (= $x27 true)))
 (let (($x114 (= $x52 true)))
 (let (($x102 (and $x114 $x88)))
 (let (($x219 (and $x102 $x115)))
 (let (($x66 (and $x219 $x193)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x282 (and $x50 $x66)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x6 (and $x96 $x282)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x105 (and $x58 $x6)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x142 (and $x73 $x105)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x285 (and $x31 $x142)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x162 (and $x56 $x285)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x18 (and $x185 $x162)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x77 (and $x21 $x18)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x216 (and $x63 $x77)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x151 (and $x37 $x216)))
 (let (($x80 (=> $x151 $x240)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x111)))
 (let (($x157 (= ?x92 input.spec-%var-n-1)))
 (let (($x240 (= $x157 true)))
 (let (($x160 (forall ((input.ind-%var3949X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3949X)))
 (=> $x244 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3949X) (_ bv0 32)))))
 ))
 (let (($x261 (forall ((input.ind-%var3948X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3948X)))
 (= $x244 false)))
 ))
 (let (($x277 (and $x261 $x160)))
 (let (($x193 (= $x277 true)))
 (let (($x98 (forall ((input.ind-%var3941X (_ BitVec 32)) (input.ind-%var3943X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3941X input.ind-%var3943X)))
 (let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3941X)))
 (=> (and $x252 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3941X input.ind-%var3943X) (_ bv0 32))))))
 ))
 (let (($x229 (forall ((input.ind-%var3941X (_ BitVec 32)) (input.ind-%var3942X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3941X)))
 (=> $x252 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3941X input.ind-%var3942X) false))))
 ))
 (let (($x153 (forall ((input.ind-%var3940X (_ BitVec 32)) )(let (($x245 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3940X)))
 (= $x245 false)))
 ))
 (let (($x210 (and (and $x153 $x229) $x98)))
 (let (($x115 (= $x210 true)))
 (let ((?x9 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x29 (concat ?x100 (concat ?x173 ?x9)))))
 (let (($x158 (= input.dst.llvm-%n ?x54)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x121)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x187 $x39)))
 (let (($x147 (and $x146 $x74)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x10 $x147)))
 (let (($x36 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x108)))))))
 (let (($x46 (and (and (and $x71 $x36) $x72) $x158)))
 (let (($x127 (= $x46 true)))
 (let (($x62 (= $x127 true)))
 (let (($x88 (= $x62 true)))
 (let (($x27 (= ?x54 input.dst.llvm-%n)))
 (let (($x52 (= $x27 true)))
 (let (($x114 (= $x52 true)))
 (let (($x102 (and $x114 $x88)))
 (let (($x219 (and $x102 $x115)))
 (let (($x66 (and $x219 $x193)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x282 (and $x50 $x66)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x6 (and $x96 $x282)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x105 (and $x58 $x6)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x142 (and $x73 $x105)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x285 (and $x31 $x142)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x162 (and $x56 $x285)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x18 (and $x185 $x162)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x77 (and $x21 $x18)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x216 (and $x63 $x77)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x151 (and $x37 $x216)))
 (let (($x80 (=> $x151 $x240)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x224 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x224)))
 (let (($x126 (= ?x38 input.dst.llvm-%n)))
 (let (($x106 (= $x126 true)))
 (let (($x267 (forall ((input.ind-%var3967X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3967X)))
 (=> $x157 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3967X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var3966X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3966X)))
 (= $x157 false)))
 ))
 (let (($x94 (and $x5 $x267)))
 (let (($x128 (= $x94 true)))
 (let (($x18 (forall ((input.ind-%var3959X (_ BitVec 32)) (input.ind-%var3961X (_ BitVec 32)) )(let (($x210 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3959X input.ind-%var3961X)))
 (let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3959X)))
 (=> (and $x261 $x210) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3959X input.ind-%var3961X) (_ bv0 32))))))
 ))
 (let (($x141 (forall ((input.ind-%var3959X (_ BitVec 32)) (input.ind-%var3960X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3959X)))
 (=> $x261 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3959X input.ind-%var3960X) false))))
 ))
 (let (($x229 (forall ((input.ind-%var3958X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3958X)))
 (= $x252 false)))
 ))
 (let (($x216 (and (and $x229 $x141) $x18)))
 (let (($x151 (= $x216 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x121 (concat ?x47 (concat ?x36 ?x42)))))
 (let (($x88 (= ?x74 input.dst.llvm-%n)))
 (let (($x102 (= $x88 true)))
 (let (($x203 (= $x102 true)))
 (let (($x147 (= input.dst.llvm-%n ?x74)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x156)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x134)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x30 $x13)))
 (let (($x108 (and $x61 $x87)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x114 $x108)))
 (let (($x241 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x173)))))))
 (let (($x158 (and (and (and $x27 $x241) $x76) $x147)))
 (let (($x46 (= $x158 true)))
 (let (($x127 (= $x46 true)))
 (let (($x62 (= $x127 true)))
 (let (($x245 (and $x62 $x203)))
 (let (($x118 (and $x245 $x151)))
 (let (($x83 (and $x118 $x128)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x43 (and $x40 $x83)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x272 (and $x148 $x43)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x288 (and $x70 $x272)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x122 (and $x23 $x288)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x279 (and $x150 $x122)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x86 (and $x20 $x279)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x246 (and $x44 $x86)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x190 (and $x57 $x246)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x41 (and $x12 $x190)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x119 (and $x45 $x41)))
 (let (($x192 (=> $x119 $x106)))
 (not $x192)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x224 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x224)))
 (let (($x126 (= ?x38 input.dst.llvm-%n)))
 (let (($x106 (= $x126 true)))
 (let (($x267 (forall ((input.ind-%var3967X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3967X)))
 (=> $x157 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3967X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var3966X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3966X)))
 (= $x157 false)))
 ))
 (let (($x94 (and $x5 $x267)))
 (let (($x128 (= $x94 true)))
 (let (($x18 (forall ((input.ind-%var3959X (_ BitVec 32)) (input.ind-%var3961X (_ BitVec 32)) )(let (($x210 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3959X input.ind-%var3961X)))
 (let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3959X)))
 (=> (and $x261 $x210) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3959X input.ind-%var3961X) (_ bv0 32))))))
 ))
 (let (($x141 (forall ((input.ind-%var3959X (_ BitVec 32)) (input.ind-%var3960X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3959X)))
 (=> $x261 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3959X input.ind-%var3960X) false))))
 ))
 (let (($x229 (forall ((input.ind-%var3958X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3958X)))
 (= $x252 false)))
 ))
 (let (($x216 (and (and $x229 $x141) $x18)))
 (let (($x151 (= $x216 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x121 (concat ?x47 (concat ?x36 ?x42)))))
 (let (($x88 (= ?x74 input.dst.llvm-%n)))
 (let (($x102 (= $x88 true)))
 (let (($x203 (= $x102 true)))
 (let (($x147 (= input.dst.llvm-%n ?x74)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x156)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x134)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x30 $x13)))
 (let (($x108 (and $x61 $x87)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x114 $x108)))
 (let (($x241 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x173)))))))
 (let (($x158 (and (and (and $x27 $x241) $x76) $x147)))
 (let (($x46 (= $x158 true)))
 (let (($x127 (= $x46 true)))
 (let (($x62 (= $x127 true)))
 (let (($x245 (and $x62 $x203)))
 (let (($x118 (and $x245 $x151)))
 (let (($x83 (and $x118 $x128)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x43 (and $x40 $x83)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x272 (and $x148 $x43)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x288 (and $x70 $x272)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x122 (and $x23 $x288)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x279 (and $x150 $x122)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x86 (and $x20 $x279)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x246 (and $x44 $x86)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x190 (and $x57 $x246)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x41 (and $x12 $x190)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x119 (and $x45 $x41)))
 (let (($x192 (=> $x119 $x106)))
 (not $x192)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x180 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x176 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x195 (bvmul ?x176 (_ bv4294967295 32))))
 (let ((?x292 (bvneg ?x195)))
 (let (($x163 (= ?x292 ?x180)))
 (let (($x167 (= $x163 true)))
 (let (($x116 (forall ((input.ind-%var4021X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4021X)))
 (=> $x157 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4021X) (_ bv0 32)))))
 ))
 (let (($x22 (forall ((input.ind-%var4020X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4020X)))
 (= $x157 false)))
 ))
 (let (($x125 (and $x22 $x116)))
 (let (($x239 (= $x125 true)))
 (let (($x275 (forall ((input.ind-%var4013X (_ BitVec 32)) (input.ind-%var4015X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4013X input.ind-%var4015X)))
 (let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4013X)))
 (=> (and $x144 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4013X input.ind-%var4015X) (_ bv0 32))))))
 ))
 (let (($x198 (forall ((input.ind-%var4013X (_ BitVec 32)) (input.ind-%var4014X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4013X)))
 (=> $x144 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4013X input.ind-%var4014X) false))))
 ))
 (let (($x165 (forall ((input.ind-%var4012X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4012X)))
 (= $x168 false)))
 ))
 (let (($x199 (and (and $x165 $x198) $x275)))
 (let (($x204 (= $x199 true)))
 (let (($x164 (forall ((input.ind-%var4001X (_ BitVec 32)) (input.ind-%var4003X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4001X input.ind-%var4003X)))
 (let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4001X)))
 (=> (and $x144 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4001X input.ind-%var4003X) (_ bv0 32))))))
 ))
 (let (($x207 (forall ((input.ind-%var4001X (_ BitVec 32)) (input.ind-%var4002X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4001X)))
 (=> $x144 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4001X input.ind-%var4002X) false))))
 ))
 (let (($x91 (forall ((input.ind-%var4000X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4000X)))
 (= $x168 false)))
 ))
 (let (($x95 (and (and $x91 $x207) $x164)))
 (let (($x68 (= $x95 true)))
 (let (($x191 (forall ((input.ind-%var3991X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3991X)))
 (=> $x157 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3991X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var3990X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3990X)))
 (= $x157 false)))
 ))
 (let (($x130 (and $x278 $x191)))
 (let (($x178 (= $x130 true)))
 (let (($x197 (forall ((input.ind-%var3983X (_ BitVec 32)) (input.ind-%var3985X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3983X input.ind-%var3985X)))
 (let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3983X)))
 (=> (and $x144 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3983X input.ind-%var3985X) (_ bv0 32))))))
 ))
 (let (($x75 (forall ((input.ind-%var3983X (_ BitVec 32)) (input.ind-%var3984X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3983X)))
 (=> $x144 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3983X input.ind-%var3984X) false))))
 ))
 (let (($x106 (forall ((input.ind-%var3982X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3982X)))
 (= $x168 false)))
 ))
 (let (($x277 (and (and $x106 $x75) $x197)))
 (let (($x105 (= $x277 true)))
 (let (($x279 (forall ((input.ind-%var3973X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3973X)))
 (=> $x157 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3973X) (_ bv0 32)))))
 ))
 (let (($x129 (forall ((input.ind-%var3972X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3972X)))
 (= $x157 false)))
 ))
 (let (($x86 (and $x129 $x279)))
 (let (($x246 (= $x86 true)))
 (let ((?x77 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x285 (bvneg ?x77)))
 (let (($x66 (= ?x285 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (= $x66 true)))
 (let (($x162 (= $x142 true)))
 (let ((?x229 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x229)))
 (let (($x210 (= ?x98 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x26 (= $x210 true)))
 (let (($x84 (= $x26 true)))
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (= $x102 true)))
 (let (($x245 (= $x203 true)))
 (let (($x213 (= $x245 true)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x42)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x10 $x71)))
 (let (($x39 (and $x36 $x155)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x114 $x39)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x87)))))))
 (let (($x147 (and $x121 $x74)))
 (let (($x158 (= $x147 true)))
 (let (($x46 (= $x158 true)))
 (let (($x127 (= $x46 true)))
 (let ((?x100 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x100)))
 (let (($x24 (= ?x11 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x54 (= $x24 true)))
 (let (($x27 (= $x54 true)))
 (let (($x173 (= ?x11 input.dst.llvm-%n)))
 (let (($x9 (= $x173 true)))
 (let (($x15 (= $x9 true)))
 (let (($x55 (and $x15 $x27)))
 (let (($x62 (and $x55 $x127)))
 (let (($x252 (and $x62 $x213)))
 (let (($x141 (and $x252 $x84)))
 (let (($x18 (and $x141 $x162)))
 (let (($x190 (and $x18 $x246)))
 (let (($x174 (and $x190 $x105)))
 (let (($x25 (and $x174 $x178)))
 (let (($x99 (and $x25 $x68)))
 (let (($x181 (and $x99 $x204)))
 (let (($x233 (and $x181 $x239)))
 (let (($x64 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x287 (and (not $x64) $x233)))
 (let (($x14 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x220 (and $x14 $x287)))
 (let (($x40 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x177 (and $x40 $x220)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x101 (and $x48 $x177)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x251 (and $x58 $x101)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x186 (and $x73 $x251)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x159 (and $x31 $x186)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x280 (and $x56 $x159)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x32 (and $x185 $x280)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x132 (and $x21 $x32)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x171 (and $x63 $x132)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x16 (and $x33 $x171)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x166 (and $x45 $x16)))
 (let (($x263 (=> $x166 $x167)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x180 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x176 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x195 (bvmul ?x176 (_ bv4294967295 32))))
 (let ((?x292 (bvneg ?x195)))
 (let (($x163 (= ?x292 ?x180)))
 (let (($x167 (= $x163 true)))
 (let (($x116 (forall ((input.ind-%var4021X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4021X)))
 (=> $x157 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4021X) (_ bv0 32)))))
 ))
 (let (($x22 (forall ((input.ind-%var4020X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4020X)))
 (= $x157 false)))
 ))
 (let (($x125 (and $x22 $x116)))
 (let (($x239 (= $x125 true)))
 (let (($x275 (forall ((input.ind-%var4013X (_ BitVec 32)) (input.ind-%var4015X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4013X input.ind-%var4015X)))
 (let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4013X)))
 (=> (and $x144 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4013X input.ind-%var4015X) (_ bv0 32))))))
 ))
 (let (($x198 (forall ((input.ind-%var4013X (_ BitVec 32)) (input.ind-%var4014X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4013X)))
 (=> $x144 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4013X input.ind-%var4014X) false))))
 ))
 (let (($x165 (forall ((input.ind-%var4012X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4012X)))
 (= $x168 false)))
 ))
 (let (($x199 (and (and $x165 $x198) $x275)))
 (let (($x204 (= $x199 true)))
 (let (($x164 (forall ((input.ind-%var4001X (_ BitVec 32)) (input.ind-%var4003X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4001X input.ind-%var4003X)))
 (let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4001X)))
 (=> (and $x144 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4001X input.ind-%var4003X) (_ bv0 32))))))
 ))
 (let (($x207 (forall ((input.ind-%var4001X (_ BitVec 32)) (input.ind-%var4002X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4001X)))
 (=> $x144 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4001X input.ind-%var4002X) false))))
 ))
 (let (($x91 (forall ((input.ind-%var4000X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4000X)))
 (= $x168 false)))
 ))
 (let (($x95 (and (and $x91 $x207) $x164)))
 (let (($x68 (= $x95 true)))
 (let (($x191 (forall ((input.ind-%var3991X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3991X)))
 (=> $x157 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3991X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var3990X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3990X)))
 (= $x157 false)))
 ))
 (let (($x130 (and $x278 $x191)))
 (let (($x178 (= $x130 true)))
 (let (($x197 (forall ((input.ind-%var3983X (_ BitVec 32)) (input.ind-%var3985X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3983X input.ind-%var3985X)))
 (let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3983X)))
 (=> (and $x144 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3983X input.ind-%var3985X) (_ bv0 32))))))
 ))
 (let (($x75 (forall ((input.ind-%var3983X (_ BitVec 32)) (input.ind-%var3984X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3983X)))
 (=> $x144 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3983X input.ind-%var3984X) false))))
 ))
 (let (($x106 (forall ((input.ind-%var3982X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3982X)))
 (= $x168 false)))
 ))
 (let (($x277 (and (and $x106 $x75) $x197)))
 (let (($x105 (= $x277 true)))
 (let (($x279 (forall ((input.ind-%var3973X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3973X)))
 (=> $x157 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3973X) (_ bv0 32)))))
 ))
 (let (($x129 (forall ((input.ind-%var3972X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3972X)))
 (= $x157 false)))
 ))
 (let (($x86 (and $x129 $x279)))
 (let (($x246 (= $x86 true)))
 (let ((?x77 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x285 (bvneg ?x77)))
 (let (($x66 (= ?x285 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (= $x66 true)))
 (let (($x162 (= $x142 true)))
 (let ((?x229 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x229)))
 (let (($x210 (= ?x98 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x26 (= $x210 true)))
 (let (($x84 (= $x26 true)))
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (= $x102 true)))
 (let (($x245 (= $x203 true)))
 (let (($x213 (= $x245 true)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x42)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x10 $x71)))
 (let (($x39 (and $x36 $x155)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x114 $x39)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x87)))))))
 (let (($x147 (and $x121 $x74)))
 (let (($x158 (= $x147 true)))
 (let (($x46 (= $x158 true)))
 (let (($x127 (= $x46 true)))
 (let ((?x100 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x100)))
 (let (($x24 (= ?x11 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x54 (= $x24 true)))
 (let (($x27 (= $x54 true)))
 (let (($x173 (= ?x11 input.dst.llvm-%n)))
 (let (($x9 (= $x173 true)))
 (let (($x15 (= $x9 true)))
 (let (($x55 (and $x15 $x27)))
 (let (($x62 (and $x55 $x127)))
 (let (($x252 (and $x62 $x213)))
 (let (($x141 (and $x252 $x84)))
 (let (($x18 (and $x141 $x162)))
 (let (($x190 (and $x18 $x246)))
 (let (($x174 (and $x190 $x105)))
 (let (($x25 (and $x174 $x178)))
 (let (($x99 (and $x25 $x68)))
 (let (($x181 (and $x99 $x204)))
 (let (($x233 (and $x181 $x239)))
 (let (($x64 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x287 (and (not $x64) $x233)))
 (let (($x14 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x220 (and $x14 $x287)))
 (let (($x40 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x177 (and $x40 $x220)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x101 (and $x48 $x177)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x251 (and $x58 $x101)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x186 (and $x73 $x251)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x159 (and $x31 $x186)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x280 (and $x56 $x159)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x32 (and $x185 $x280)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x132 (and $x21 $x32)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x171 (and $x63 $x132)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x16 (and $x33 $x171)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x166 (and $x45 $x16)))
 (let (($x263 (=> $x166 $x167)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x202 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x260 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x238 (bvmul ?x260 (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x238)))
 (let (($x149 (= ?x79 ?x202)))
 (let (($x34 (= $x149 true)))
 (let (($x140 (forall ((input.ind-%var4075X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4075X)))
 (=> $x129 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4075X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var4074X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4074X)))
 (= $x129 false)))
 ))
 (let (($x152 (and $x193 $x140)))
 (let (($x6 (= $x152 true)))
 (let (($x17 (forall ((input.ind-%var4067X (_ BitVec 32)) (input.ind-%var4069X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4067X input.ind-%var4069X)))
 (let (($x68 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4067X)))
 (=> (and $x68 $x91) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4067X input.ind-%var4069X) (_ bv0 32))))))
 ))
 (let (($x43 (forall ((input.ind-%var4067X (_ BitVec 32)) (input.ind-%var4068X (_ BitVec 32)) )(let (($x68 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4067X)))
 (=> $x68 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4067X input.ind-%var4068X) false))))
 ))
 (let (($x41 (forall ((input.ind-%var4066X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4066X)))
 (= $x266 false)))
 ))
 (let (($x189 (and (and $x41 $x43) $x17)))
 (let (($x60 (= $x189 true)))
 (let (($x151 (forall ((input.ind-%var4055X (_ BitVec 32)) (input.ind-%var4057X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4055X input.ind-%var4057X)))
 (let (($x68 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4055X)))
 (=> (and $x68 $x91) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4055X input.ind-%var4057X) (_ bv0 32))))))
 ))
 (let (($x113 (forall ((input.ind-%var4055X (_ BitVec 32)) (input.ind-%var4056X (_ BitVec 32)) )(let (($x68 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4055X)))
 (=> $x68 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4055X input.ind-%var4056X) false))))
 ))
 (let (($x72 (forall ((input.ind-%var4054X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4054X)))
 (= $x266 false)))
 ))
 (let (($x89 (and (and $x72 $x113) $x151)))
 (let (($x264 (= $x89 true)))
 (let (($x195 (forall ((input.ind-%var4045X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4045X)))
 (=> $x129 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4045X) (_ bv0 32)))))
 ))
 (let (($x32 (forall ((input.ind-%var4044X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4044X)))
 (= $x129 false)))
 ))
 (let (($x292 (and $x32 $x195)))
 (let (($x180 (= $x292 true)))
 (let (($x287 (forall ((input.ind-%var4037X (_ BitVec 32)) (input.ind-%var4039X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4037X input.ind-%var4039X)))
 (let (($x68 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4037X)))
 (=> (and $x68 $x91) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4037X input.ind-%var4039X) (_ bv0 32))))))
 ))
 (let (($x165 (forall ((input.ind-%var4037X (_ BitVec 32)) (input.ind-%var4038X (_ BitVec 32)) )(let (($x68 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4037X)))
 (=> $x68 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4037X input.ind-%var4038X) false))))
 ))
 (let (($x105 (forall ((input.ind-%var4036X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4036X)))
 (= $x266 false)))
 ))
 (let (($x177 (and (and $x105 $x165) $x287)))
 (let (($x101 (= $x177 true)))
 (let (($x242 (forall ((input.ind-%var4027X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4027X)))
 (=> $x129 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4027X) (_ bv0 32)))))
 ))
 (let (($x279 (forall ((input.ind-%var4026X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4026X)))
 (= $x129 false)))
 ))
 (let (($x112 (and $x279 $x242)))
 (let (($x75 (= $x112 true)))
 (let ((?x77 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x285 (bvneg ?x77)))
 (let (($x66 (= ?x285 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (= $x66 true)))
 (let (($x162 (= $x142 true)))
 (let (($x261 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x261 true)))
 (let (($x26 (= $x210 true)))
 (let (($x84 (= $x26 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x62)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x158)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x74 $x46)))
 (let (($x102 (and $x127 $x88)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (and $x76 $x102)))
 (let (($x187 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x187)))))))
 (let (($x245 (and $x39 $x203)))
 (let (($x213 (= $x245 true)))
 (let (($x252 (= $x213 true)))
 (let (($x248 (= $x252 true)))
 (let ((?x15 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x15)))
 (let (($x146 (= ?x24 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x134 (= $x146 true)))
 (let (($x61 (= $x134 true)))
 (let (($x27 (= ?x24 input.dst.llvm-%n)))
 (let (($x55 (= $x27 true)))
 (let (($x30 (= $x55 true)))
 (let ((?x7 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x7)))
 (let (($x201 (= ?x100 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x173 (= $x201 true)))
 (let (($x9 (= $x173 true)))
 (let (($x49 (and $x9 $x30)))
 (let (($x156 (and $x49 $x61)))
 (let (($x229 (and $x156 $x248)))
 (let (($x141 (and $x229 $x84)))
 (let (($x18 (and $x141 $x162)))
 (let (($x160 (and $x18 $x75)))
 (let (($x251 (and $x160 $x101)))
 (let (($x163 (and $x251 $x180)))
 (let (($x136 (and $x163 $x264)))
 (let (($x38 (and $x136 $x60)))
 (let (($x258 (and $x38 $x6)))
 (let (($x29 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x289 (and (not $x29) $x258)))
 (let (($x40 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x196 (and $x40 $x289)))
 (let (($x48 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x221 (and $x48 $x196)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x205 (and $x96 $x221)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x284 (and $x70 $x205)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x286 (and $x23 $x284)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x206 (and $x150 $x286)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x255 (and $x20 $x206)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x97 (and $x44 $x255)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x82 (and $x57 $x97)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x188 (and $x12 $x82)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x109 (and $x67 $x188)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x230 (and $x45 $x109)))
 (let (($x35 (=> $x230 $x34)))
 (not $x35)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x202 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x260 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x238 (bvmul ?x260 (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x238)))
 (let (($x149 (= ?x79 ?x202)))
 (let (($x34 (= $x149 true)))
 (let (($x140 (forall ((input.ind-%var4075X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4075X)))
 (=> $x129 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4075X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var4074X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4074X)))
 (= $x129 false)))
 ))
 (let (($x152 (and $x193 $x140)))
 (let (($x6 (= $x152 true)))
 (let (($x17 (forall ((input.ind-%var4067X (_ BitVec 32)) (input.ind-%var4069X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4067X input.ind-%var4069X)))
 (let (($x68 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4067X)))
 (=> (and $x68 $x91) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4067X input.ind-%var4069X) (_ bv0 32))))))
 ))
 (let (($x43 (forall ((input.ind-%var4067X (_ BitVec 32)) (input.ind-%var4068X (_ BitVec 32)) )(let (($x68 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4067X)))
 (=> $x68 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4067X input.ind-%var4068X) false))))
 ))
 (let (($x41 (forall ((input.ind-%var4066X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4066X)))
 (= $x266 false)))
 ))
 (let (($x189 (and (and $x41 $x43) $x17)))
 (let (($x60 (= $x189 true)))
 (let (($x151 (forall ((input.ind-%var4055X (_ BitVec 32)) (input.ind-%var4057X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4055X input.ind-%var4057X)))
 (let (($x68 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4055X)))
 (=> (and $x68 $x91) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4055X input.ind-%var4057X) (_ bv0 32))))))
 ))
 (let (($x113 (forall ((input.ind-%var4055X (_ BitVec 32)) (input.ind-%var4056X (_ BitVec 32)) )(let (($x68 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4055X)))
 (=> $x68 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4055X input.ind-%var4056X) false))))
 ))
 (let (($x72 (forall ((input.ind-%var4054X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4054X)))
 (= $x266 false)))
 ))
 (let (($x89 (and (and $x72 $x113) $x151)))
 (let (($x264 (= $x89 true)))
 (let (($x195 (forall ((input.ind-%var4045X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4045X)))
 (=> $x129 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4045X) (_ bv0 32)))))
 ))
 (let (($x32 (forall ((input.ind-%var4044X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4044X)))
 (= $x129 false)))
 ))
 (let (($x292 (and $x32 $x195)))
 (let (($x180 (= $x292 true)))
 (let (($x287 (forall ((input.ind-%var4037X (_ BitVec 32)) (input.ind-%var4039X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4037X input.ind-%var4039X)))
 (let (($x68 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4037X)))
 (=> (and $x68 $x91) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4037X input.ind-%var4039X) (_ bv0 32))))))
 ))
 (let (($x165 (forall ((input.ind-%var4037X (_ BitVec 32)) (input.ind-%var4038X (_ BitVec 32)) )(let (($x68 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4037X)))
 (=> $x68 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4037X input.ind-%var4038X) false))))
 ))
 (let (($x105 (forall ((input.ind-%var4036X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4036X)))
 (= $x266 false)))
 ))
 (let (($x177 (and (and $x105 $x165) $x287)))
 (let (($x101 (= $x177 true)))
 (let (($x242 (forall ((input.ind-%var4027X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4027X)))
 (=> $x129 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4027X) (_ bv0 32)))))
 ))
 (let (($x279 (forall ((input.ind-%var4026X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4026X)))
 (= $x129 false)))
 ))
 (let (($x112 (and $x279 $x242)))
 (let (($x75 (= $x112 true)))
 (let ((?x77 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x285 (bvneg ?x77)))
 (let (($x66 (= ?x285 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (= $x66 true)))
 (let (($x162 (= $x142 true)))
 (let (($x261 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x261 true)))
 (let (($x26 (= $x210 true)))
 (let (($x84 (= $x26 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x62)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x158)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x74 $x46)))
 (let (($x102 (and $x127 $x88)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (and $x76 $x102)))
 (let (($x187 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x187)))))))
 (let (($x245 (and $x39 $x203)))
 (let (($x213 (= $x245 true)))
 (let (($x252 (= $x213 true)))
 (let (($x248 (= $x252 true)))
 (let ((?x15 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x15)))
 (let (($x146 (= ?x24 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x134 (= $x146 true)))
 (let (($x61 (= $x134 true)))
 (let (($x27 (= ?x24 input.dst.llvm-%n)))
 (let (($x55 (= $x27 true)))
 (let (($x30 (= $x55 true)))
 (let ((?x7 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x7)))
 (let (($x201 (= ?x100 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x173 (= $x201 true)))
 (let (($x9 (= $x173 true)))
 (let (($x49 (and $x9 $x30)))
 (let (($x156 (and $x49 $x61)))
 (let (($x229 (and $x156 $x248)))
 (let (($x141 (and $x229 $x84)))
 (let (($x18 (and $x141 $x162)))
 (let (($x160 (and $x18 $x75)))
 (let (($x251 (and $x160 $x101)))
 (let (($x163 (and $x251 $x180)))
 (let (($x136 (and $x163 $x264)))
 (let (($x38 (and $x136 $x60)))
 (let (($x258 (and $x38 $x6)))
 (let (($x29 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x289 (and (not $x29) $x258)))
 (let (($x40 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x196 (and $x40 $x289)))
 (let (($x48 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x221 (and $x48 $x196)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x205 (and $x96 $x221)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x284 (and $x70 $x205)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x286 (and $x23 $x284)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x206 (and $x150 $x286)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x255 (and $x20 $x206)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x97 (and $x44 $x255)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x82 (and $x57 $x97)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x188 (and $x12 $x82)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x109 (and $x67 $x188)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x230 (and $x45 $x109)))
 (let (($x35 (=> $x230 $x34)))
 (not $x35)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 173 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x192 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x110 (not $x192)))
 (let (($x209 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x8 (not $x209)))
 (let (($x216 (or $x8 $x110)))
 (let (($x240 (= $x216 true)))
 (let (($x5 (= $x240 true)))
 (let (($x22 (forall ((input.ind-%var4129X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4129X)))
 (=> $x142 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4129X) (_ bv0 32)))))
 ))
 (let (($x222 (forall ((input.ind-%var4128X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4128X)))
 (= $x142 false)))
 ))
 (let (($x191 (and $x222 $x22)))
 (let (($x164 (= $x191 true)))
 (let (($x167 (forall ((input.ind-%var4121X (_ BitVec 32)) (input.ind-%var4123X (_ BitVec 32)) )(let (($x251 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4121X input.ind-%var4123X)))
 (let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4121X)))
 (=> (and $x163 $x251) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4121X input.ind-%var4123X) (_ bv0 32))))))
 ))
 (let (($x111 (forall ((input.ind-%var4121X (_ BitVec 32)) (input.ind-%var4122X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4121X)))
 (=> $x163 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4121X input.ind-%var4122X) false))))
 ))
 (let (($x83 (forall ((input.ind-%var4120X (_ BitVec 32)) )(let (($x95 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4120X)))
 (= $x95 false)))
 ))
 (let (($x236 (and (and $x83 $x111) $x167)))
 (let (($x115 (= $x236 true)))
 (let (($x190 (forall ((input.ind-%var4109X (_ BitVec 32)) (input.ind-%var4111X (_ BitVec 32)) )(let (($x251 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4109X input.ind-%var4111X)))
 (let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4109X)))
 (=> (and $x163 $x251) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4109X input.ind-%var4111X) (_ bv0 32))))))
 ))
 (let (($x128 (forall ((input.ind-%var4109X (_ BitVec 32)) (input.ind-%var4110X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4109X)))
 (=> $x163 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4109X input.ind-%var4110X) false))))
 ))
 (let (($x79 (forall ((input.ind-%var4108X (_ BitVec 32)) )(let (($x95 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4108X)))
 (= $x95 false)))
 ))
 (let (($x278 (and (and $x79 $x128) $x190)))
 (let (($x16 (= $x278 true)))
 (let (($x97 (forall ((input.ind-%var4099X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4099X)))
 (=> $x142 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4099X) (_ bv0 32)))))
 ))
 (let (($x221 (forall ((input.ind-%var4098X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4098X)))
 (= $x142 false)))
 ))
 (let (($x82 (and $x221 $x97)))
 (let (($x188 (= $x82 true)))
 (let (($x38 (forall ((input.ind-%var4091X (_ BitVec 32)) (input.ind-%var4093X (_ BitVec 32)) )(let (($x251 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4091X input.ind-%var4093X)))
 (let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4091X)))
 (=> (and $x163 $x251) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4091X input.ind-%var4093X) (_ bv0 32))))))
 ))
 (let (($x113 (forall ((input.ind-%var4091X (_ BitVec 32)) (input.ind-%var4092X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4091X)))
 (=> $x163 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4091X input.ind-%var4092X) false))))
 ))
 (let (($x239 (forall ((input.ind-%var4090X (_ BitVec 32)) )(let (($x95 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4090X)))
 (= $x95 false)))
 ))
 (let (($x140 (and (and $x239 $x113) $x38)))
 (let (($x152 (= $x140 true)))
 (let (($x266 (forall ((input.ind-%var4081X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4081X)))
 (=> $x142 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4081X) (_ bv0 32)))))
 ))
 (let (($x129 (forall ((input.ind-%var4080X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4080X)))
 (= $x142 false)))
 ))
 (let (($x277 (and $x129 $x266)))
 (let (($x105 (= $x277 true)))
 (let ((?x229 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x229)))
 (let (($x210 (= ?x98 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x26 (= $x210 true)))
 (let (($x84 (= $x26 true)))
 (let ((?x147 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x158 (bvneg ?x147)))
 (let (($x203 (= ?x158 input.dst.llvm-%n)))
 (let (($x245 (= $x203 true)))
 (let (($x213 (= $x245 true)))
 (let (($x46 (= ?x158 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x127 (= $x46 true)))
 (let (($x62 (= $x127 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x187)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x155 $x10)))
 (let (($x71 (and $x52 $x47)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x9 $x71)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x49)))))))
 (let (($x42 (and $x107 $x36)))
 (let (($x39 (= $x42 true)))
 (let (($x108 (= $x39 true)))
 (let (($x76 (= $x108 true)))
 (let ((?x29 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x29)))
 (let (($x69 (= ?x117 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x7 (= $x69 true)))
 (let (($x100 (= $x7 true)))
 (let (($x74 (and $x100 $x76)))
 (let (($x88 (and $x74 $x62)))
 (let (($x252 (and $x88 $x213)))
 (let (($x141 (and $x252 $x84)))
 (let (($x25 (and $x141 $x105)))
 (let (($x6 (and $x25 $x152)))
 (let (($x109 (and $x6 $x188)))
 (let (($x198 (and $x109 $x16)))
 (let (($x267 (and $x198 $x115)))
 (let (($x280 (and $x267 $x164)))
 (let (($x48 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x166 (and $x48 $x280)))
 (let (($x96 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x223 (and $x96 $x166)))
 (let (($x148 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x172 (and $x148 $x223)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x275 (and $x73 $x172)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x116 (and $x31 $x275)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x171 (and $x56 $x116)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x176 (and $x185 $x171)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x92 (and $x21 $x176)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x153 (and $x63 $x92)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x224 (and $x33 $x153)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x85 (and $x37 $x224)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x123 (and $x45 $x85)))
 (let (($x282 (=> $x123 $x5)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x192 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x110 (not $x192)))
 (let (($x209 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x8 (not $x209)))
 (let (($x216 (or $x8 $x110)))
 (let (($x240 (= $x216 true)))
 (let (($x5 (= $x240 true)))
 (let (($x22 (forall ((input.ind-%var4129X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4129X)))
 (=> $x142 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4129X) (_ bv0 32)))))
 ))
 (let (($x222 (forall ((input.ind-%var4128X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4128X)))
 (= $x142 false)))
 ))
 (let (($x191 (and $x222 $x22)))
 (let (($x164 (= $x191 true)))
 (let (($x167 (forall ((input.ind-%var4121X (_ BitVec 32)) (input.ind-%var4123X (_ BitVec 32)) )(let (($x251 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4121X input.ind-%var4123X)))
 (let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4121X)))
 (=> (and $x163 $x251) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4121X input.ind-%var4123X) (_ bv0 32))))))
 ))
 (let (($x111 (forall ((input.ind-%var4121X (_ BitVec 32)) (input.ind-%var4122X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4121X)))
 (=> $x163 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4121X input.ind-%var4122X) false))))
 ))
 (let (($x83 (forall ((input.ind-%var4120X (_ BitVec 32)) )(let (($x95 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4120X)))
 (= $x95 false)))
 ))
 (let (($x236 (and (and $x83 $x111) $x167)))
 (let (($x115 (= $x236 true)))
 (let (($x190 (forall ((input.ind-%var4109X (_ BitVec 32)) (input.ind-%var4111X (_ BitVec 32)) )(let (($x251 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4109X input.ind-%var4111X)))
 (let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4109X)))
 (=> (and $x163 $x251) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4109X input.ind-%var4111X) (_ bv0 32))))))
 ))
 (let (($x128 (forall ((input.ind-%var4109X (_ BitVec 32)) (input.ind-%var4110X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4109X)))
 (=> $x163 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4109X input.ind-%var4110X) false))))
 ))
 (let (($x79 (forall ((input.ind-%var4108X (_ BitVec 32)) )(let (($x95 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4108X)))
 (= $x95 false)))
 ))
 (let (($x278 (and (and $x79 $x128) $x190)))
 (let (($x16 (= $x278 true)))
 (let (($x97 (forall ((input.ind-%var4099X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4099X)))
 (=> $x142 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4099X) (_ bv0 32)))))
 ))
 (let (($x221 (forall ((input.ind-%var4098X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4098X)))
 (= $x142 false)))
 ))
 (let (($x82 (and $x221 $x97)))
 (let (($x188 (= $x82 true)))
 (let (($x38 (forall ((input.ind-%var4091X (_ BitVec 32)) (input.ind-%var4093X (_ BitVec 32)) )(let (($x251 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4091X input.ind-%var4093X)))
 (let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4091X)))
 (=> (and $x163 $x251) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4091X input.ind-%var4093X) (_ bv0 32))))))
 ))
 (let (($x113 (forall ((input.ind-%var4091X (_ BitVec 32)) (input.ind-%var4092X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4091X)))
 (=> $x163 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4091X input.ind-%var4092X) false))))
 ))
 (let (($x239 (forall ((input.ind-%var4090X (_ BitVec 32)) )(let (($x95 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4090X)))
 (= $x95 false)))
 ))
 (let (($x140 (and (and $x239 $x113) $x38)))
 (let (($x152 (= $x140 true)))
 (let (($x266 (forall ((input.ind-%var4081X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4081X)))
 (=> $x142 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4081X) (_ bv0 32)))))
 ))
 (let (($x129 (forall ((input.ind-%var4080X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4080X)))
 (= $x142 false)))
 ))
 (let (($x277 (and $x129 $x266)))
 (let (($x105 (= $x277 true)))
 (let ((?x229 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x229)))
 (let (($x210 (= ?x98 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x26 (= $x210 true)))
 (let (($x84 (= $x26 true)))
 (let ((?x147 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x158 (bvneg ?x147)))
 (let (($x203 (= ?x158 input.dst.llvm-%n)))
 (let (($x245 (= $x203 true)))
 (let (($x213 (= $x245 true)))
 (let (($x46 (= ?x158 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x127 (= $x46 true)))
 (let (($x62 (= $x127 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x187)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x155 $x10)))
 (let (($x71 (and $x52 $x47)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x9 $x71)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x49)))))))
 (let (($x42 (and $x107 $x36)))
 (let (($x39 (= $x42 true)))
 (let (($x108 (= $x39 true)))
 (let (($x76 (= $x108 true)))
 (let ((?x29 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x29)))
 (let (($x69 (= ?x117 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x7 (= $x69 true)))
 (let (($x100 (= $x7 true)))
 (let (($x74 (and $x100 $x76)))
 (let (($x88 (and $x74 $x62)))
 (let (($x252 (and $x88 $x213)))
 (let (($x141 (and $x252 $x84)))
 (let (($x25 (and $x141 $x105)))
 (let (($x6 (and $x25 $x152)))
 (let (($x109 (and $x6 $x188)))
 (let (($x198 (and $x109 $x16)))
 (let (($x267 (and $x198 $x115)))
 (let (($x280 (and $x267 $x164)))
 (let (($x48 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x166 (and $x48 $x280)))
 (let (($x96 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x223 (and $x96 $x166)))
 (let (($x148 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x172 (and $x148 $x223)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x275 (and $x73 $x172)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x116 (and $x31 $x275)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x171 (and $x56 $x116)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x176 (and $x185 $x171)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x92 (and $x21 $x176)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x153 (and $x63 $x92)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x224 (and $x33 $x153)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x85 (and $x37 $x224)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x123 (and $x45 $x85)))
 (let (($x282 (=> $x123 $x5)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 167 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x145 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x170 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x178 (or $x170 $x145)))
 (let (($x161 (= $x178 true)))
 (let (($x106 (= $x161 true)))
 (let (($x89 (forall ((input.ind-%var4183X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4183X)))
 (=> $x144 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4183X) (_ bv0 32)))))
 ))
 (let (($x233 (forall ((input.ind-%var4182X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4182X)))
 (= $x144 false)))
 ))
 (let (($x175 (and $x233 $x89)))
 (let (($x284 (= $x175 true)))
 (let (($x157 (forall ((input.ind-%var4175X (_ BitVec 32)) (input.ind-%var4177X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4175X input.ind-%var4177X)))
 (let (($x198 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4175X)))
 (=> (and $x198 $x128) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4175X input.ind-%var4177X) (_ bv0 32))))))
 ))
 (let (($x230 (forall ((input.ind-%var4175X (_ BitVec 32)) (input.ind-%var4176X (_ BitVec 32)) )(let (($x198 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4175X)))
 (=> $x198 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4175X input.ind-%var4176X) false))))
 ))
 (let (($x91 (forall ((input.ind-%var4174X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4174X)))
 (= $x60 false)))
 ))
 (let (($x159 (and (and $x91 $x230) $x157)))
 (let (($x165 (= $x159 true)))
 (let (($x202 (forall ((input.ind-%var4163X (_ BitVec 32)) (input.ind-%var4165X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4163X input.ind-%var4165X)))
 (let (($x198 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4163X)))
 (=> (and $x198 $x128) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4163X input.ind-%var4165X) (_ bv0 32))))))
 ))
 (let (($x168 (forall ((input.ind-%var4163X (_ BitVec 32)) (input.ind-%var4164X (_ BitVec 32)) )(let (($x198 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4163X)))
 (=> $x198 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4163X input.ind-%var4164X) false))))
 ))
 (let (($x162 (forall ((input.ind-%var4162X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4162X)))
 (= $x60 false)))
 ))
 (let (($x119 (and (and $x162 $x168) $x202)))
 (let (($x126 (= $x119 true)))
 (let (($x110 (forall ((input.ind-%var4153X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4153X)))
 (=> $x144 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4153X) (_ bv0 32)))))
 ))
 (let (($x224 (forall ((input.ind-%var4152X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4152X)))
 (= $x144 false)))
 ))
 (let (($x216 (and $x224 $x110)))
 (let (($x240 (= $x216 true)))
 (let (($x223 (forall ((input.ind-%var4145X (_ BitVec 32)) (input.ind-%var4147X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4145X input.ind-%var4147X)))
 (let (($x198 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4145X)))
 (=> (and $x198 $x128) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4145X input.ind-%var4147X) (_ bv0 32))))))
 ))
 (let (($x111 (forall ((input.ind-%var4145X (_ BitVec 32)) (input.ind-%var4146X (_ BitVec 32)) )(let (($x198 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4145X)))
 (=> $x198 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4145X input.ind-%var4146X) false))))
 ))
 (let (($x6 (forall ((input.ind-%var4144X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4144X)))
 (= $x60 false)))
 ))
 (let (($x275 (and (and $x6 $x111) $x223)))
 (let (($x116 (= $x275 true)))
 (let (($x72 (forall ((input.ind-%var4135X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4135X)))
 (=> $x144 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4135X) (_ bv0 32)))))
 ))
 (let (($x277 (forall ((input.ind-%var4134X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4134X)))
 (= $x144 false)))
 ))
 (let (($x113 (and $x277 $x72)))
 (let (($x193 (= $x113 true)))
 (let ((?x98 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x261 (bvneg ?x98)))
 (let (($x26 (= ?x261 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x26 true)))
 (let (($x141 (= $x84 true)))
 (let ((?x158 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x158)))
 (let (($x245 (= ?x46 input.dst.llvm-%n)))
 (let (($x213 (= $x245 true)))
 (let (($x252 (= $x213 true)))
 (let (($x127 (= ?x46 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x62 (= $x127 true)))
 (let (($x88 (= $x62 true)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x47)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x121 $x52)))
 (let (($x36 (and $x187 $x71)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x53 $x36)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x146 $x134)))))))
 (let (($x39 (and $x155 $x42)))
 (let (($x108 (= $x39 true)))
 (let (($x76 (= $x108 true)))
 (let (($x74 (= $x76 true)))
 (let ((?x14 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x14)))
 (let (($x64 (= ?x29 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x64 true)))
 (let (($x7 (= $x69 true)))
 (let (($x147 (and $x7 $x74)))
 (let (($x102 (and $x147 $x88)))
 (let (($x248 (and $x102 $x252)))
 (let (($x66 (and $x248 $x141)))
 (let (($x189 (and $x66 $x193)))
 (let (($x171 (and $x189 $x116)))
 (let (($x5 (and $x171 $x240)))
 (let (($x258 (and $x5 $x126)))
 (let (($x279 (and $x258 $x165)))
 (let (($x255 (and $x279 $x284)))
 (let (($x96 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x51 (and $x96 $x255)))
 (let (($x148 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x132 (and $x148 $x51)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x34 (and $x58 $x132)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x87 (and $x23 $x34)))
 (let (($x150 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x90 (and $x150 $x87)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x219 (and $x20 $x90)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x288 (and $x44 $x219)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x80 (and $x57 $x288)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x207 (and $x12 $x80)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x86 (and $x67 $x207)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x186 (and $x50 $x86)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x244 (and $x45 $x186)))
 (let (($x197 (=> $x244 $x106)))
 (not $x197)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x145 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x170 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x178 (or $x170 $x145)))
 (let (($x161 (= $x178 true)))
 (let (($x106 (= $x161 true)))
 (let (($x89 (forall ((input.ind-%var4183X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4183X)))
 (=> $x144 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4183X) (_ bv0 32)))))
 ))
 (let (($x233 (forall ((input.ind-%var4182X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4182X)))
 (= $x144 false)))
 ))
 (let (($x175 (and $x233 $x89)))
 (let (($x284 (= $x175 true)))
 (let (($x157 (forall ((input.ind-%var4175X (_ BitVec 32)) (input.ind-%var4177X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4175X input.ind-%var4177X)))
 (let (($x198 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4175X)))
 (=> (and $x198 $x128) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4175X input.ind-%var4177X) (_ bv0 32))))))
 ))
 (let (($x230 (forall ((input.ind-%var4175X (_ BitVec 32)) (input.ind-%var4176X (_ BitVec 32)) )(let (($x198 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4175X)))
 (=> $x198 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4175X input.ind-%var4176X) false))))
 ))
 (let (($x91 (forall ((input.ind-%var4174X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4174X)))
 (= $x60 false)))
 ))
 (let (($x159 (and (and $x91 $x230) $x157)))
 (let (($x165 (= $x159 true)))
 (let (($x202 (forall ((input.ind-%var4163X (_ BitVec 32)) (input.ind-%var4165X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4163X input.ind-%var4165X)))
 (let (($x198 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4163X)))
 (=> (and $x198 $x128) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4163X input.ind-%var4165X) (_ bv0 32))))))
 ))
 (let (($x168 (forall ((input.ind-%var4163X (_ BitVec 32)) (input.ind-%var4164X (_ BitVec 32)) )(let (($x198 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4163X)))
 (=> $x198 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4163X input.ind-%var4164X) false))))
 ))
 (let (($x162 (forall ((input.ind-%var4162X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4162X)))
 (= $x60 false)))
 ))
 (let (($x119 (and (and $x162 $x168) $x202)))
 (let (($x126 (= $x119 true)))
 (let (($x110 (forall ((input.ind-%var4153X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4153X)))
 (=> $x144 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4153X) (_ bv0 32)))))
 ))
 (let (($x224 (forall ((input.ind-%var4152X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4152X)))
 (= $x144 false)))
 ))
 (let (($x216 (and $x224 $x110)))
 (let (($x240 (= $x216 true)))
 (let (($x223 (forall ((input.ind-%var4145X (_ BitVec 32)) (input.ind-%var4147X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4145X input.ind-%var4147X)))
 (let (($x198 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4145X)))
 (=> (and $x198 $x128) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4145X input.ind-%var4147X) (_ bv0 32))))))
 ))
 (let (($x111 (forall ((input.ind-%var4145X (_ BitVec 32)) (input.ind-%var4146X (_ BitVec 32)) )(let (($x198 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4145X)))
 (=> $x198 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4145X input.ind-%var4146X) false))))
 ))
 (let (($x6 (forall ((input.ind-%var4144X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4144X)))
 (= $x60 false)))
 ))
 (let (($x275 (and (and $x6 $x111) $x223)))
 (let (($x116 (= $x275 true)))
 (let (($x72 (forall ((input.ind-%var4135X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4135X)))
 (=> $x144 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4135X) (_ bv0 32)))))
 ))
 (let (($x277 (forall ((input.ind-%var4134X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4134X)))
 (= $x144 false)))
 ))
 (let (($x113 (and $x277 $x72)))
 (let (($x193 (= $x113 true)))
 (let ((?x98 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x261 (bvneg ?x98)))
 (let (($x26 (= ?x261 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x26 true)))
 (let (($x141 (= $x84 true)))
 (let ((?x158 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x158)))
 (let (($x245 (= ?x46 input.dst.llvm-%n)))
 (let (($x213 (= $x245 true)))
 (let (($x252 (= $x213 true)))
 (let (($x127 (= ?x46 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x62 (= $x127 true)))
 (let (($x88 (= $x62 true)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x47)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x121 $x52)))
 (let (($x36 (and $x187 $x71)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x53 $x36)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x146 $x134)))))))
 (let (($x39 (and $x155 $x42)))
 (let (($x108 (= $x39 true)))
 (let (($x76 (= $x108 true)))
 (let (($x74 (= $x76 true)))
 (let ((?x14 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x14)))
 (let (($x64 (= ?x29 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x64 true)))
 (let (($x7 (= $x69 true)))
 (let (($x147 (and $x7 $x74)))
 (let (($x102 (and $x147 $x88)))
 (let (($x248 (and $x102 $x252)))
 (let (($x66 (and $x248 $x141)))
 (let (($x189 (and $x66 $x193)))
 (let (($x171 (and $x189 $x116)))
 (let (($x5 (and $x171 $x240)))
 (let (($x258 (and $x5 $x126)))
 (let (($x279 (and $x258 $x165)))
 (let (($x255 (and $x279 $x284)))
 (let (($x96 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x51 (and $x96 $x255)))
 (let (($x148 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x132 (and $x148 $x51)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x34 (and $x58 $x132)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x87 (and $x23 $x34)))
 (let (($x150 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x90 (and $x150 $x87)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x219 (and $x20 $x90)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x288 (and $x44 $x219)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x80 (and $x57 $x288)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x207 (and $x12 $x80)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x86 (and $x67 $x207)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x186 (and $x50 $x86)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x244 (and $x45 $x186)))
 (let (($x197 (=> $x244 $x106)))
 (not $x197)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 165 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x217 (ite $x65 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x287 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x269 (ite $x287 ?x217 (_ bv0 32))))
 (let (($x183 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x269)))
 (let (($x273 (= $x183 true)))
 (let (($x133 (= $x273 true)))
 (let (($x18 (forall ((input.ind-%var4291X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4291X)))
 (=> $x60 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4291X) (_ bv0 32)))))
 ))
 (let (($x192 (forall ((input.ind-%var4290X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4290X)))
 (= $x60 false)))
 ))
 (let (($x226 (and $x192 $x18)))
 (let (($x125 (= $x226 true)))
 (let (($x278 (forall ((input.ind-%var4282X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4282X)))
 (= $x240 false)))
 ))
 (let (($x163 (forall ((input.ind-%var4283X (_ BitVec 32)) (input.ind-%var4284X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4283X)))
 (=> $x165 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4283X input.ind-%var4284X) false))))
 ))
 (let (($x94 (forall ((input.ind-%var4283X (_ BitVec 32)) (input.ind-%var4285X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4283X input.ind-%var4285X)))
 (let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4283X)))
 (=> (and $x165 $x202) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4283X input.ind-%var4285X) (_ bv0 32))))))
 ))
 (let (($x8 (and (and $x94 $x163) $x278)))
 (let (($x201 (= $x8 true)))
 (let (($x115 (forall ((input.ind-%var4270X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4270X)))
 (= $x240 false)))
 ))
 (let (($x92 (forall ((input.ind-%var4271X (_ BitVec 32)) (input.ind-%var4272X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4271X)))
 (=> $x165 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4271X input.ind-%var4272X) false))))
 ))
 (let (($x28 (forall ((input.ind-%var4271X (_ BitVec 32)) (input.ind-%var4273X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4271X input.ind-%var4273X)))
 (let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4271X)))
 (=> (and $x165 $x202) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4271X input.ind-%var4273X) (_ bv0 32))))))
 ))
 (let (($x260 (and (and $x28 $x92) $x115)))
 (let (($x206 (= $x260 true)))
 (let (($x38 (forall ((input.ind-%var4260X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4260X)))
 (= $x60 false)))
 ))
 (let (($x104 (forall ((input.ind-%var4261X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4261X)))
 (=> $x60 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4261X) (_ bv0 32)))))
 ))
 (let (($x174 (and $x104 $x38)))
 (let (($x222 (= $x174 true)))
 (let (($x207 (forall ((input.ind-%var4252X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4252X)))
 (= $x240 false)))
 ))
 (let (($x87 (forall ((input.ind-%var4253X (_ BitVec 32)) (input.ind-%var4254X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4253X)))
 (=> $x165 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4253X input.ind-%var4254X) false))))
 ))
 (let (($x89 (forall ((input.ind-%var4253X (_ BitVec 32)) (input.ind-%var4255X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4253X input.ind-%var4255X)))
 (let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4253X)))
 (=> (and $x165 $x202) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4253X input.ind-%var4255X) (_ bv0 32))))))
 ))
 (let (($x186 (and (and $x89 $x87) $x207)))
 (let (($x244 (= $x186 true)))
 (let (($x223 (forall ((input.ind-%var4243X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4243X)))
 (=> $x60 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4243X) (_ bv0 32)))))
 ))
 (let (($x198 (forall ((input.ind-%var4242X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4242X)))
 (= $x60 false)))
 ))
 (let (($x275 (and $x198 $x223)))
 (let (($x116 (= $x275 true)))
 (let ((?x144 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x266 (bvneg ?x144)))
 (let (($x220 (= ?x266 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x251 (= $x220 true)))
 (let (($x180 (= $x251 true)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x229 (= (_ bv0 32) ?x248)))
 (let ((?x245 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x245)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x252 (and $x102 $x213)))
 (let (($x98 (and $x252 $x229)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (and $x47 $x98)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x74)))))))
 (let (($x210 (and $x88 $x261)))
 (let (($x26 (= $x210 true)))
 (let (($x84 (= $x26 true)))
 (let (($x141 (= $x84 true)))
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x134)))
 (let (($x24 (= ?x61 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x53 (= $x24 true)))
 (let (($x121 (= $x53 true)))
 (let (($x156 (= ?x61 input.dst.llvm-%n)))
 (let (($x107 (= $x156 true)))
 (let (($x173 (= $x107 true)))
 (let ((?x55 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x55)))
 (let (($x30 (= ?x9 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x49 (= $x30 true)))
 (let (($x146 (= $x49 true)))
 (let (($x29 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (not $x29)))
 (let (($x64 (= $x117 true)))
 (let (($x69 (= $x64 true)))
 (let (($x7 (= $x69 true)))
 (let (($x27 (and $x7 $x146)))
 (let (($x155 (and $x27 $x173)))
 (let (($x114 (and $x155 $x121)))
 (let (($x66 (and $x114 $x141)))
 (let (($x72 (and $x66 $x180)))
 (let (($x171 (and $x72 $x116)))
 (let (($x170 (and $x171 $x244)))
 (let (($x85 (and $x170 $x222)))
 (let (($x160 (and $x85 $x206)))
 (let (($x167 (and $x160 $x201)))
 (let (($x286 (and $x167 $x125)))
 (let (($x48 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x285 (and $x48 $x286)))
 (let (($x148 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x199 (and $x148 $x285)))
 (let (($x58 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x242 (and $x58 $x199)))
 (let (($x70 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x43 (and $x70 $x242)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x238 (and $x31 $x43)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x181 (and $x56 $x238)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x35 (and $x185 $x181)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x118 (and $x21 $x35)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x196 (and $x63 $x118)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x151 (and $x33 $x196)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x103 (and $x37 $x151)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x188 (and $x241 $x103)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x19 (and $x45 $x188)))
 (let (($x130 (=> $x19 $x133)))
 (not $x130)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x217 (ite $x65 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x287 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x269 (ite $x287 ?x217 (_ bv0 32))))
 (let (($x183 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x269)))
 (let (($x273 (= $x183 true)))
 (let (($x133 (= $x273 true)))
 (let (($x18 (forall ((input.ind-%var4291X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4291X)))
 (=> $x60 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4291X) (_ bv0 32)))))
 ))
 (let (($x192 (forall ((input.ind-%var4290X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4290X)))
 (= $x60 false)))
 ))
 (let (($x226 (and $x192 $x18)))
 (let (($x125 (= $x226 true)))
 (let (($x278 (forall ((input.ind-%var4282X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4282X)))
 (= $x240 false)))
 ))
 (let (($x163 (forall ((input.ind-%var4283X (_ BitVec 32)) (input.ind-%var4284X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4283X)))
 (=> $x165 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4283X input.ind-%var4284X) false))))
 ))
 (let (($x94 (forall ((input.ind-%var4283X (_ BitVec 32)) (input.ind-%var4285X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4283X input.ind-%var4285X)))
 (let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4283X)))
 (=> (and $x165 $x202) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4283X input.ind-%var4285X) (_ bv0 32))))))
 ))
 (let (($x8 (and (and $x94 $x163) $x278)))
 (let (($x201 (= $x8 true)))
 (let (($x115 (forall ((input.ind-%var4270X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4270X)))
 (= $x240 false)))
 ))
 (let (($x92 (forall ((input.ind-%var4271X (_ BitVec 32)) (input.ind-%var4272X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4271X)))
 (=> $x165 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4271X input.ind-%var4272X) false))))
 ))
 (let (($x28 (forall ((input.ind-%var4271X (_ BitVec 32)) (input.ind-%var4273X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4271X input.ind-%var4273X)))
 (let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4271X)))
 (=> (and $x165 $x202) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4271X input.ind-%var4273X) (_ bv0 32))))))
 ))
 (let (($x260 (and (and $x28 $x92) $x115)))
 (let (($x206 (= $x260 true)))
 (let (($x38 (forall ((input.ind-%var4260X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4260X)))
 (= $x60 false)))
 ))
 (let (($x104 (forall ((input.ind-%var4261X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4261X)))
 (=> $x60 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4261X) (_ bv0 32)))))
 ))
 (let (($x174 (and $x104 $x38)))
 (let (($x222 (= $x174 true)))
 (let (($x207 (forall ((input.ind-%var4252X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4252X)))
 (= $x240 false)))
 ))
 (let (($x87 (forall ((input.ind-%var4253X (_ BitVec 32)) (input.ind-%var4254X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4253X)))
 (=> $x165 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4253X input.ind-%var4254X) false))))
 ))
 (let (($x89 (forall ((input.ind-%var4253X (_ BitVec 32)) (input.ind-%var4255X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4253X input.ind-%var4255X)))
 (let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4253X)))
 (=> (and $x165 $x202) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4253X input.ind-%var4255X) (_ bv0 32))))))
 ))
 (let (($x186 (and (and $x89 $x87) $x207)))
 (let (($x244 (= $x186 true)))
 (let (($x223 (forall ((input.ind-%var4243X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4243X)))
 (=> $x60 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4243X) (_ bv0 32)))))
 ))
 (let (($x198 (forall ((input.ind-%var4242X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4242X)))
 (= $x60 false)))
 ))
 (let (($x275 (and $x198 $x223)))
 (let (($x116 (= $x275 true)))
 (let ((?x144 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x266 (bvneg ?x144)))
 (let (($x220 (= ?x266 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x251 (= $x220 true)))
 (let (($x180 (= $x251 true)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x229 (= (_ bv0 32) ?x248)))
 (let ((?x245 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x245)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x252 (and $x102 $x213)))
 (let (($x98 (and $x252 $x229)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (and $x47 $x98)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x74)))))))
 (let (($x210 (and $x88 $x261)))
 (let (($x26 (= $x210 true)))
 (let (($x84 (= $x26 true)))
 (let (($x141 (= $x84 true)))
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x134)))
 (let (($x24 (= ?x61 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x53 (= $x24 true)))
 (let (($x121 (= $x53 true)))
 (let (($x156 (= ?x61 input.dst.llvm-%n)))
 (let (($x107 (= $x156 true)))
 (let (($x173 (= $x107 true)))
 (let ((?x55 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x55)))
 (let (($x30 (= ?x9 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x49 (= $x30 true)))
 (let (($x146 (= $x49 true)))
 (let (($x29 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (not $x29)))
 (let (($x64 (= $x117 true)))
 (let (($x69 (= $x64 true)))
 (let (($x7 (= $x69 true)))
 (let (($x27 (and $x7 $x146)))
 (let (($x155 (and $x27 $x173)))
 (let (($x114 (and $x155 $x121)))
 (let (($x66 (and $x114 $x141)))
 (let (($x72 (and $x66 $x180)))
 (let (($x171 (and $x72 $x116)))
 (let (($x170 (and $x171 $x244)))
 (let (($x85 (and $x170 $x222)))
 (let (($x160 (and $x85 $x206)))
 (let (($x167 (and $x160 $x201)))
 (let (($x286 (and $x167 $x125)))
 (let (($x48 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x285 (and $x48 $x286)))
 (let (($x148 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x199 (and $x148 $x285)))
 (let (($x58 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x242 (and $x58 $x199)))
 (let (($x70 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x43 (and $x70 $x242)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x238 (and $x31 $x43)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x181 (and $x56 $x238)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x35 (and $x185 $x181)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x118 (and $x21 $x35)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x196 (and $x63 $x118)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x151 (and $x33 $x196)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x103 (and $x37 $x151)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x188 (and $x241 $x103)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x19 (and $x45 $x188)))
 (let (($x130 (=> $x19 $x133)))
 (not $x130)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 175 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171524/query
