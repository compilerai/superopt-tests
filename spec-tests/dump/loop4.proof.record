==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= ?x8 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x7 $x6)))
 (let (($x19 (and $x9 $x12)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= ?x8 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x7 $x6)))
 (let (($x19 (and $x9 $x12)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (= true false)))
 (let (($x151 (= $x150 true)))
 (let (($x136 (forall ((input.ind-%var389X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var389X)))
 (=> $x122 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var389X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var388X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var388X)))
 (= $x122 false)))
 ))
 (let (($x137 (and $x126 $x136)))
 (let (($x138 (= $x137 true)))
 (let (($x115 (forall ((input.ind-%var375X (_ BitVec 32)) (input.ind-%var377X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var375X input.ind-%var377X)))
 (let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var375X)))
 (=> (and $x101 $x96) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var375X input.ind-%var377X) (_ bv0 32))))))
 ))
 (let (($x103 (forall ((input.ind-%var375X (_ BitVec 32)) (input.ind-%var376X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var375X)))
 (=> $x101 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var375X input.ind-%var376X) false))))
 ))
 (let (($x89 (forall ((input.ind-%var374X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var374X)))
 (= $x85 false)))
 ))
 (let (($x117 (and (and $x89 $x103) $x115)))
 (let (($x118 (= $x117 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x75 (concat ?x72 (concat ?x68 ?x66)))))
 (let (($x77 (= ?x76 input.dst.llvm-%n)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x59 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x50)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x42 $x29)))
 (let (($x52 (and $x22 $x51)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x38 $x52)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x33)))))))
 (let (($x54 (and $x27 $x53)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x63 (and $x57 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x119 (and $x80 $x118)))
 (let (($x139 (and $x119 $x138)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x140 (and $x17 $x139)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x141 (and $x18 $x140)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x142 (and $x41 $x141)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x143 (and $x44 $x142)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x144 (and $x49 $x143)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x145 (and $x45 $x144)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x146 (and $x47 $x145)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x147 (and $x12 $x146)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x148 (and $x11 $x147)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x149 (and $x21 $x148)))
 (let (($x152 (=> $x149 $x151)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (= true false)))
 (let (($x151 (= $x150 true)))
 (let (($x136 (forall ((input.ind-%var389X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var389X)))
 (=> $x122 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var389X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var388X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var388X)))
 (= $x122 false)))
 ))
 (let (($x137 (and $x126 $x136)))
 (let (($x138 (= $x137 true)))
 (let (($x115 (forall ((input.ind-%var375X (_ BitVec 32)) (input.ind-%var377X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var375X input.ind-%var377X)))
 (let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var375X)))
 (=> (and $x101 $x96) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var375X input.ind-%var377X) (_ bv0 32))))))
 ))
 (let (($x103 (forall ((input.ind-%var375X (_ BitVec 32)) (input.ind-%var376X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var375X)))
 (=> $x101 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var375X input.ind-%var376X) false))))
 ))
 (let (($x89 (forall ((input.ind-%var374X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var374X)))
 (= $x85 false)))
 ))
 (let (($x117 (and (and $x89 $x103) $x115)))
 (let (($x118 (= $x117 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x75 (concat ?x72 (concat ?x68 ?x66)))))
 (let (($x77 (= ?x76 input.dst.llvm-%n)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x59 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x50)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x42 $x29)))
 (let (($x52 (and $x22 $x51)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x38 $x52)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x33)))))))
 (let (($x54 (and $x27 $x53)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x63 (and $x57 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x119 (and $x80 $x118)))
 (let (($x139 (and $x119 $x138)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x140 (and $x17 $x139)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x141 (and $x18 $x140)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x142 (and $x41 $x141)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x143 (and $x44 $x142)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x144 (and $x49 $x143)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x145 (and $x45 $x144)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x146 (and $x47 $x145)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x147 (and $x12 $x146)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x148 (and $x11 $x147)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x149 (and $x21 $x148)))
 (let (($x152 (=> $x149 $x151)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfcbd2113)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x16)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x55 $x52)))
 (let (($x44 (and $x26 $x30)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x33 $x44)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x51)))))))
 (let (($x124 (and $x43 $x39)))
 (let (($x132 (= $x124 true)))
 (let (($x105 (= $x132 true)))
 (let (($x91 (forall ((input.ind-%var431X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var431X)))
 (=> $x148 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var431X) (_ bv0 32)))))
 ))
 (let (($x152 (forall ((input.ind-%var430X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var430X)))
 (= $x148 false)))
 ))
 (let (($x104 (and $x152 $x91)))
 (let (($x129 (= $x104 true)))
 (let (($x141 (forall ((input.ind-%var423X (_ BitVec 32)) (input.ind-%var425X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var423X input.ind-%var425X)))
 (let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var423X)))
 (=> (and $x117 $x113) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var423X input.ind-%var425X) (_ bv0 32))))))
 ))
 (let (($x119 (forall ((input.ind-%var423X (_ BitVec 32)) (input.ind-%var424X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var423X)))
 (=> $x117 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var423X input.ind-%var424X) false))))
 ))
 (let (($x95 (forall ((input.ind-%var422X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var422X)))
 (= $x84 false)))
 ))
 (let (($x143 (and (and $x95 $x119) $x141)))
 (let (($x144 (= $x143 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x71 (concat ?x74 (concat ?x61 ?x59)))))
 (let (($x67 (= input.dst.llvm-%n ?x72)))
 (let (($x69 (and (and (and $x43 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x39) $x67)))
 (let (($x73 (= $x69 true)))
 (let (($x76 (= $x73 true)))
 (let (($x77 (= $x76 true)))
 (let (($x145 (and $x77 $x144)))
 (let (($x81 (and $x145 $x129)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x83 (and $x25 $x81)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x107 (and $x41 $x83)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x94 (and $x45 $x107)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x87 (and $x29 $x94)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x98 (and $x40 $x87)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x120 (and $x12 $x98)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x121 (and $x14 $x120)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x110 (and $x20 $x121)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x92 (and $x10 $x110)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x99 (and $x31 $x92)))
 (let (($x106 (=> $x99 $x105)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x16)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x55 $x52)))
 (let (($x44 (and $x26 $x30)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x33 $x44)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x51)))))))
 (let (($x124 (and $x43 $x39)))
 (let (($x132 (= $x124 true)))
 (let (($x105 (= $x132 true)))
 (let (($x91 (forall ((input.ind-%var431X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var431X)))
 (=> $x148 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var431X) (_ bv0 32)))))
 ))
 (let (($x152 (forall ((input.ind-%var430X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var430X)))
 (= $x148 false)))
 ))
 (let (($x104 (and $x152 $x91)))
 (let (($x129 (= $x104 true)))
 (let (($x141 (forall ((input.ind-%var423X (_ BitVec 32)) (input.ind-%var425X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var423X input.ind-%var425X)))
 (let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var423X)))
 (=> (and $x117 $x113) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var423X input.ind-%var425X) (_ bv0 32))))))
 ))
 (let (($x119 (forall ((input.ind-%var423X (_ BitVec 32)) (input.ind-%var424X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var423X)))
 (=> $x117 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var423X input.ind-%var424X) false))))
 ))
 (let (($x95 (forall ((input.ind-%var422X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var422X)))
 (= $x84 false)))
 ))
 (let (($x143 (and (and $x95 $x119) $x141)))
 (let (($x144 (= $x143 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x71 (concat ?x74 (concat ?x61 ?x59)))))
 (let (($x67 (= input.dst.llvm-%n ?x72)))
 (let (($x69 (and (and (and $x43 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x39) $x67)))
 (let (($x73 (= $x69 true)))
 (let (($x76 (= $x73 true)))
 (let (($x77 (= $x76 true)))
 (let (($x145 (and $x77 $x144)))
 (let (($x81 (and $x145 $x129)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x83 (and $x25 $x81)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x107 (and $x41 $x83)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x94 (and $x45 $x107)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x87 (and $x29 $x94)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x98 (and $x40 $x87)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x120 (and $x12 $x98)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x121 (and $x14 $x120)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x110 (and $x20 $x121)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x92 (and $x10 $x110)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x99 (and $x31 $x92)))
 (let (($x106 (=> $x99 $x105)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x137 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x36 (= $x137 true)))
 (let (($x79 (forall ((input.ind-%var449X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var449X)))
 (=> $x106 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var449X) (_ bv0 32)))))
 ))
 (let (($x149 (forall ((input.ind-%var448X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var448X)))
 (= $x106 false)))
 ))
 (let (($x88 (and $x149 $x79)))
 (let (($x103 (= $x88 true)))
 (let (($x121 (forall ((input.ind-%var441X (_ BitVec 32)) (input.ind-%var443X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var441X input.ind-%var443X)))
 (let (($x152 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var441X)))
 (=> (and $x152 $x143) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var441X input.ind-%var443X) (_ bv0 32))))))
 ))
 (let (($x109 (forall ((input.ind-%var441X (_ BitVec 32)) (input.ind-%var442X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var441X)))
 (=> $x152 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var441X input.ind-%var442X) false))))
 ))
 (let (($x119 (forall ((input.ind-%var440X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var440X)))
 (= $x117 false)))
 ))
 (let (($x92 (and (and $x119 $x109) $x121)))
 (let (($x99 (= $x92 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x75 (concat ?x61 (concat ?x63 ?x70)))))
 (let (($x67 (= input.dst.llvm-%n ?x72)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x16)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x55 $x52)))
 (let (($x44 (and $x26 $x30)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x33 $x44)))
 (let (($x18 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x22)))))))
 (let (($x76 (and (and (and $x68 $x18) $x39) $x67)))
 (let (($x77 (= $x76 true)))
 (let (($x80 (= $x77 true)))
 (let (($x84 (= $x80 true)))
 (let (($x124 (and $x84 $x99)))
 (let (($x112 (and $x124 $x103)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x146 (and $x50 $x112)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x147 (and $x57 $x146)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x130 (and $x54 $x147)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x136 (and $x19 $x130)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x100 (and $x9 $x136)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x114 (and $x37 $x100)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x150 (and $x17 $x114)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x86 (and $x24 $x150)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x125 (and $x23 $x86)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x126 (and $x35 $x125)))
 (let (($x97 (=> $x126 $x36)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x137 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x36 (= $x137 true)))
 (let (($x79 (forall ((input.ind-%var449X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var449X)))
 (=> $x106 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var449X) (_ bv0 32)))))
 ))
 (let (($x149 (forall ((input.ind-%var448X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var448X)))
 (= $x106 false)))
 ))
 (let (($x88 (and $x149 $x79)))
 (let (($x103 (= $x88 true)))
 (let (($x121 (forall ((input.ind-%var441X (_ BitVec 32)) (input.ind-%var443X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var441X input.ind-%var443X)))
 (let (($x152 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var441X)))
 (=> (and $x152 $x143) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var441X input.ind-%var443X) (_ bv0 32))))))
 ))
 (let (($x109 (forall ((input.ind-%var441X (_ BitVec 32)) (input.ind-%var442X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var441X)))
 (=> $x152 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var441X input.ind-%var442X) false))))
 ))
 (let (($x119 (forall ((input.ind-%var440X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var440X)))
 (= $x117 false)))
 ))
 (let (($x92 (and (and $x119 $x109) $x121)))
 (let (($x99 (= $x92 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x75 (concat ?x61 (concat ?x63 ?x70)))))
 (let (($x67 (= input.dst.llvm-%n ?x72)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x16)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x55 $x52)))
 (let (($x44 (and $x26 $x30)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x33 $x44)))
 (let (($x18 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x22)))))))
 (let (($x76 (and (and (and $x68 $x18) $x39) $x67)))
 (let (($x77 (= $x76 true)))
 (let (($x80 (= $x77 true)))
 (let (($x84 (= $x80 true)))
 (let (($x124 (and $x84 $x99)))
 (let (($x112 (and $x124 $x103)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x146 (and $x50 $x112)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x147 (and $x57 $x146)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x130 (and $x54 $x147)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x136 (and $x19 $x130)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x100 (and $x9 $x136)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x114 (and $x37 $x100)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x150 (and $x17 $x114)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x86 (and $x24 $x150)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x125 (and $x23 $x86)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x126 (and $x35 $x125)))
 (let (($x97 (=> $x126 $x36)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x122)))
 (let (($x138 (= ?x153 input.dst.llvm-%n)))
 (let (($x102 (= $x138 true)))
 (let (($x115 (forall ((input.ind-%var491X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var491X)))
 (=> $x25 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var491X) (_ bv0 32)))))
 ))
 (let (($x101 (forall ((input.ind-%var490X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var490X)))
 (= $x25 false)))
 ))
 (let (($x140 (and $x101 $x115)))
 (let (($x145 (= $x140 true)))
 (let (($x86 (forall ((input.ind-%var483X (_ BitVec 32)) (input.ind-%var485X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var483X input.ind-%var485X)))
 (let (($x135 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var483X)))
 (=> (and $x135 $x99) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var483X input.ind-%var485X) (_ bv0 32))))))
 ))
 (let (($x78 (forall ((input.ind-%var483X (_ BitVec 32)) (input.ind-%var484X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var483X)))
 (=> $x135 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var483X input.ind-%var484X) false))))
 ))
 (let (($x110 (forall ((input.ind-%var482X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var482X)))
 (= $x143 false)))
 ))
 (let (($x126 (and (and $x110 $x78) $x86)))
 (let (($x137 (= $x126 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x72 (concat ?x70 (concat ?x60 ?x75)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x43)))))))
 (let (($x84 (and (and (and $x6 $x49) $x73) $x76)))
 (let (($x116 (= $x84 true)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let (($x36 (and $x118 $x137)))
 (let (($x132 (and $x36 $x145)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x105 (and $x50 $x132)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x129 (and $x45 $x105)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x107 (and $x29 $x129)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x134 (and $x40 $x107)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x148 (and $x12 $x134)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x46 (and $x14 $x148)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x96 (and $x20 $x46)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x91 (and $x10 $x96)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x104 (and $x35 $x91)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x94 (and $x15 $x104)))
 (let (($x128 (=> $x94 $x102)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x122)))
 (let (($x138 (= ?x153 input.dst.llvm-%n)))
 (let (($x102 (= $x138 true)))
 (let (($x115 (forall ((input.ind-%var491X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var491X)))
 (=> $x25 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var491X) (_ bv0 32)))))
 ))
 (let (($x101 (forall ((input.ind-%var490X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var490X)))
 (= $x25 false)))
 ))
 (let (($x140 (and $x101 $x115)))
 (let (($x145 (= $x140 true)))
 (let (($x86 (forall ((input.ind-%var483X (_ BitVec 32)) (input.ind-%var485X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var483X input.ind-%var485X)))
 (let (($x135 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var483X)))
 (=> (and $x135 $x99) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var483X input.ind-%var485X) (_ bv0 32))))))
 ))
 (let (($x78 (forall ((input.ind-%var483X (_ BitVec 32)) (input.ind-%var484X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var483X)))
 (=> $x135 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var483X input.ind-%var484X) false))))
 ))
 (let (($x110 (forall ((input.ind-%var482X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var482X)))
 (= $x143 false)))
 ))
 (let (($x126 (and (and $x110 $x78) $x86)))
 (let (($x137 (= $x126 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x72 (concat ?x70 (concat ?x60 ?x75)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x43)))))))
 (let (($x84 (and (and (and $x6 $x49) $x73) $x76)))
 (let (($x116 (= $x84 true)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let (($x36 (and $x118 $x137)))
 (let (($x132 (and $x36 $x145)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x105 (and $x50 $x132)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x129 (and $x45 $x105)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x107 (and $x29 $x129)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x134 (and $x40 $x107)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x148 (and $x12 $x134)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x46 (and $x14 $x148)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x96 (and $x20 $x46)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x91 (and $x10 $x96)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x104 (and $x35 $x91)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x94 (and $x15 $x104)))
 (let (($x128 (=> $x94 $x102)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x103 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x103)))
 (let (($x144 (= ?x136 input.spec-%var-n-1)))
 (let (($x108 (= $x144 true)))
 (let (($x83 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var509X)))
 (=> $x138 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var509X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var508X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var508X)))
 (= $x138 false)))
 ))
 (let (($x119 (and $x42 $x83)))
 (let (($x141 (= $x119 true)))
 (let (($x96 (forall ((input.ind-%var501X (_ BitVec 32)) (input.ind-%var503X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var501X input.ind-%var503X)))
 (let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var501X)))
 (=> (and $x101 $x126) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var501X input.ind-%var503X) (_ bv0 32))))))
 ))
 (let (($x89 (forall ((input.ind-%var501X (_ BitVec 32)) (input.ind-%var502X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var501X)))
 (=> $x101 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var501X input.ind-%var502X) false))))
 ))
 (let (($x78 (forall ((input.ind-%var500X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var500X)))
 (= $x135 false)))
 ))
 (let (($x104 (and (and $x78 $x89) $x96)))
 (let (($x94 (= $x104 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x64 (concat ?x60 (concat ?x71 ?x59)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x68)))))))
 (let (($x117 (and (and (and $x77 $x69) $x73) $x76)))
 (let (($x118 (= $x117 true)))
 (let (($x152 (= $x118 true)))
 (let (($x143 (= $x152 true)))
 (let (($x85 (and $x143 $x94)))
 (let (($x123 (and $x85 $x141)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x121 (and $x48 $x123)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x106 (and $x54 $x121)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x97 (and $x19 $x106)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x127 (and $x9 $x97)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x112 (and $x37 $x127)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x130 (and $x17 $x112)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x87 (and $x24 $x130)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x58 (and $x23 $x87)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x28 (and $x41 $x58)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x90 (and $x7 $x28)))
 (let (($x131 (=> $x90 $x108)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x103 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x103)))
 (let (($x144 (= ?x136 input.spec-%var-n-1)))
 (let (($x108 (= $x144 true)))
 (let (($x83 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var509X)))
 (=> $x138 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var509X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var508X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var508X)))
 (= $x138 false)))
 ))
 (let (($x119 (and $x42 $x83)))
 (let (($x141 (= $x119 true)))
 (let (($x96 (forall ((input.ind-%var501X (_ BitVec 32)) (input.ind-%var503X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var501X input.ind-%var503X)))
 (let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var501X)))
 (=> (and $x101 $x126) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var501X input.ind-%var503X) (_ bv0 32))))))
 ))
 (let (($x89 (forall ((input.ind-%var501X (_ BitVec 32)) (input.ind-%var502X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var501X)))
 (=> $x101 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var501X input.ind-%var502X) false))))
 ))
 (let (($x78 (forall ((input.ind-%var500X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var500X)))
 (= $x135 false)))
 ))
 (let (($x104 (and (and $x78 $x89) $x96)))
 (let (($x94 (= $x104 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x64 (concat ?x60 (concat ?x71 ?x59)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x68)))))))
 (let (($x117 (and (and (and $x77 $x69) $x73) $x76)))
 (let (($x118 (= $x117 true)))
 (let (($x152 (= $x118 true)))
 (let (($x143 (= $x152 true)))
 (let (($x85 (and $x143 $x94)))
 (let (($x123 (and $x85 $x141)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x121 (and $x48 $x123)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x106 (and $x54 $x121)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x97 (and $x19 $x106)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x127 (and $x9 $x97)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x112 (and $x37 $x127)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x130 (and $x17 $x112)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x87 (and $x24 $x130)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x58 (and $x23 $x87)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x28 (and $x41 $x58)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x90 (and $x7 $x28)))
 (let (($x131 (=> $x90 $x108)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x115 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x140 (= $x115 true)))
 (let (($x107 (= $x140 true)))
 (let (($x139 (forall ((input.ind-%var527X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var527X)))
 (=> $x144 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var527X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var526X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var526X)))
 (= $x144 false)))
 ))
 (let (($x109 (and $x51 $x139)))
 (let (($x110 (= $x109 true)))
 (let (($x87 (forall ((input.ind-%var519X (_ BitVec 32)) (input.ind-%var521X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var519X input.ind-%var521X)))
 (let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var519X)))
 (=> (and $x42 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var519X input.ind-%var521X) (_ bv0 32))))))
 ))
 (let (($x81 (forall ((input.ind-%var519X (_ BitVec 32)) (input.ind-%var520X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var519X)))
 (=> $x42 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var519X input.ind-%var520X) false))))
 ))
 (let (($x89 (forall ((input.ind-%var518X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var518X)))
 (= $x101 false)))
 ))
 (let (($x28 (and (and $x89 $x81) $x87)))
 (let (($x90 (= $x28 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x75 (concat ?x71 (concat ?x70 ?x61)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x18)))))))
 (let (($x152 (and (and (and $x84 $x49) $x73) $x76)))
 (let (($x143 (= $x152 true)))
 (let (($x92 (= $x143 true)))
 (let (($x135 (= $x92 true)))
 (let (($x88 (and $x135 $x90)))
 (let (($x149 (and $x88 $x110)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x150 (and $x57 $x149)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x36 (and $x29 $x150)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x122 (and $x40 $x36)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x153 (and $x12 $x122)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x145 (and $x14 $x153)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x129 (and $x20 $x145)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x146 (and $x10 $x129)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x25 (and $x35 $x146)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x128 (and $x11 $x25)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x147 (and $x31 $x128)))
 (let (($x38 (=> $x147 $x107)))
 (not $x38))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x115 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x140 (= $x115 true)))
 (let (($x107 (= $x140 true)))
 (let (($x139 (forall ((input.ind-%var527X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var527X)))
 (=> $x144 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var527X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var526X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var526X)))
 (= $x144 false)))
 ))
 (let (($x109 (and $x51 $x139)))
 (let (($x110 (= $x109 true)))
 (let (($x87 (forall ((input.ind-%var519X (_ BitVec 32)) (input.ind-%var521X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var519X input.ind-%var521X)))
 (let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var519X)))
 (=> (and $x42 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var519X input.ind-%var521X) (_ bv0 32))))))
 ))
 (let (($x81 (forall ((input.ind-%var519X (_ BitVec 32)) (input.ind-%var520X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var519X)))
 (=> $x42 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var519X input.ind-%var520X) false))))
 ))
 (let (($x89 (forall ((input.ind-%var518X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var518X)))
 (= $x101 false)))
 ))
 (let (($x28 (and (and $x89 $x81) $x87)))
 (let (($x90 (= $x28 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x75 (concat ?x71 (concat ?x70 ?x61)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x18)))))))
 (let (($x152 (and (and (and $x84 $x49) $x73) $x76)))
 (let (($x143 (= $x152 true)))
 (let (($x92 (= $x143 true)))
 (let (($x135 (= $x92 true)))
 (let (($x88 (and $x135 $x90)))
 (let (($x149 (and $x88 $x110)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x150 (and $x57 $x149)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x36 (and $x29 $x150)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x122 (and $x40 $x36)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x153 (and $x12 $x122)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x145 (and $x14 $x153)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x129 (and $x20 $x145)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x146 (and $x10 $x129)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x25 (and $x35 $x146)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x128 (and $x11 $x25)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x147 (and $x31 $x128)))
 (let (($x38 (=> $x147 $x107)))
 (not $x38))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (forall ((input.ind-%var583X (_ BitVec 32)) (input.ind-%var585X (_ BitVec 32)) )(let (($x164 (and false false)))
 (=> $x164 (= (_ bv0 32) (spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var583X input.ind-%var585X)))))
 ))
 (let (($x162 (forall ((input.ind-%var583X (_ BitVec 32)) (input.ind-%var584X (_ BitVec 32)) )(=> false (= false (spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var583X input.ind-%var584X))))
 ))
 (let (($x82 (forall ((input.ind-%var582X (_ BitVec 32)) )(let (($x62 (spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var582X)))
 (= false $x62)))
 ))
 (let (($x174 (and (and $x82 $x162) $x172)))
 (let (($x97 (= true true)))
 (let (($x175 (and $x97 $x174)))
 (let (($x176 (= $x175 true)))
 (let (($x78 (forall ((input.ind-%var569X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var569X)))
 (=> $x38 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var569X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var568X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var568X)))
 (= $x38 false)))
 ))
 (let (($x111 (and $x108 $x78)))
 (let (($x46 (= $x111 true)))
 (let (($x146 (forall ((input.ind-%var561X (_ BitVec 32)) (input.ind-%var563X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var561X input.ind-%var563X)))
 (let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var561X)))
 (=> (and $x51 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var561X input.ind-%var563X) (_ bv0 32))))))
 ))
 (let (($x114 (forall ((input.ind-%var561X (_ BitVec 32)) (input.ind-%var562X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var561X)))
 (=> $x51 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var561X input.ind-%var562X) false))))
 ))
 (let (($x81 (forall ((input.ind-%var560X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var560X)))
 (= $x42 false)))
 ))
 (let (($x128 (and (and $x81 $x114) $x146)))
 (let (($x147 (= $x128 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x59 (concat ?x70 (concat ?x60 ?x63)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x56)))))))
 (let (($x92 (and (and (and $x117 $x69) $x73) $x76)))
 (let (($x135 (= $x92 true)))
 (let (($x86 (= $x135 true)))
 (let (($x101 (= $x86 true)))
 (let (($x115 (and $x101 $x147)))
 (let (($x85 (and $x115 $x46)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x103 (and $x45 $x85)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x136 (and $x19 $x103)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x141 (and $x9 $x136)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x106 (and $x37 $x141)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x132 (and $x17 $x106)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x138 (and $x24 $x132)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x131 (and $x23 $x138)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x105 (and $x41 $x131)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x83 (and $x15 $x105)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x119 (and $x48 $x83)))
 (let (($x177 (=> $x119 $x176)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (forall ((input.ind-%var583X (_ BitVec 32)) (input.ind-%var585X (_ BitVec 32)) )(let (($x164 (and false false)))
 (=> $x164 (= (_ bv0 32) (spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var583X input.ind-%var585X)))))
 ))
 (let (($x162 (forall ((input.ind-%var583X (_ BitVec 32)) (input.ind-%var584X (_ BitVec 32)) )(=> false (= false (spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var583X input.ind-%var584X))))
 ))
 (let (($x82 (forall ((input.ind-%var582X (_ BitVec 32)) )(let (($x62 (spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var582X)))
 (= false $x62)))
 ))
 (let (($x174 (and (and $x82 $x162) $x172)))
 (let (($x97 (= true true)))
 (let (($x175 (and $x97 $x174)))
 (let (($x176 (= $x175 true)))
 (let (($x78 (forall ((input.ind-%var569X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var569X)))
 (=> $x38 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var569X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var568X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var568X)))
 (= $x38 false)))
 ))
 (let (($x111 (and $x108 $x78)))
 (let (($x46 (= $x111 true)))
 (let (($x146 (forall ((input.ind-%var561X (_ BitVec 32)) (input.ind-%var563X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var561X input.ind-%var563X)))
 (let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var561X)))
 (=> (and $x51 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var561X input.ind-%var563X) (_ bv0 32))))))
 ))
 (let (($x114 (forall ((input.ind-%var561X (_ BitVec 32)) (input.ind-%var562X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var561X)))
 (=> $x51 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var561X input.ind-%var562X) false))))
 ))
 (let (($x81 (forall ((input.ind-%var560X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var560X)))
 (= $x42 false)))
 ))
 (let (($x128 (and (and $x81 $x114) $x146)))
 (let (($x147 (= $x128 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x59 (concat ?x70 (concat ?x60 ?x63)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x56)))))))
 (let (($x92 (and (and (and $x117 $x69) $x73) $x76)))
 (let (($x135 (= $x92 true)))
 (let (($x86 (= $x135 true)))
 (let (($x101 (= $x86 true)))
 (let (($x115 (and $x101 $x147)))
 (let (($x85 (and $x115 $x46)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x103 (and $x45 $x85)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x136 (and $x19 $x103)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x141 (and $x9 $x136)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x106 (and $x37 $x141)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x132 (and $x17 $x106)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x138 (and $x24 $x132)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x131 (and $x23 $x138)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x105 (and $x41 $x131)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x83 (and $x15 $x105)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x119 (and $x48 $x83)))
 (let (($x177 (=> $x119 $x176)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.ind-%var582X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd36d1810)
  (define-fun input.ind-%var582X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd36d1813)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd36d1810)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x88 (forall ((input.ind-%var651X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var651X))))
 ))
 (let (($x130 (forall ((input.ind-%var650X (_ BitVec 32)) )(let (($x107 (spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var650X)))
 (= false $x107)))
 ))
 (let (($x36 (and $x130 $x88)))
 (let (($x94 (= true true)))
 (let (($x123 (and $x94 $x36)))
 (let (($x144 (= $x123 true)))
 (let (($x176 (forall ((input.ind-%var643X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var643X)))
 (=> $x100 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var643X) (_ bv0 32)))))
 ))
 (let (($x161 (forall ((input.ind-%var642X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var642X)))
 (= $x100 false)))
 ))
 (let (($x177 (and $x161 $x176)))
 (let (($x178 (= $x177 true)))
 (let (($x138 (forall ((input.ind-%var635X (_ BitVec 32)) (input.ind-%var637X (_ BitVec 32)) )(let (($x146 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var635X input.ind-%var637X)))
 (let (($x80 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var635X)))
 (=> (and $x80 $x146) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var635X input.ind-%var637X) (_ bv0 32))))))
 ))
 (let (($x121 (forall ((input.ind-%var635X (_ BitVec 32)) (input.ind-%var636X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var635X)))
 (=> $x80 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var635X input.ind-%var636X) false))))
 ))
 (let (($x99 (forall ((input.ind-%var634X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var634X)))
 (= $x87 false)))
 ))
 (let (($x105 (and (and $x99 $x121) $x138)))
 (let (($x83 (= $x105 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x61 (concat ?x60 (concat ?x71 ?x74)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x13)))))))
 (let (($x86 (and (and (and $x152 $x49) $x73) $x76)))
 (let (($x101 (= $x86 true)))
 (let (($x96 (= $x101 true)))
 (let (($x42 (= $x96 true)))
 (let (($x119 (and $x42 $x83)))
 (let (($x27 (and $x119 $x178)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x116 (and $x54 $x27)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x98 (and $x40 $x116)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x91 (and $x12 $x98)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x104 (and $x14 $x91)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x90 (and $x20 $x104)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x150 (and $x10 $x90)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x58 (and $x35 $x150)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x112 (and $x11 $x58)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x137 (and $x7 $x112)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x95 (and $x57 $x137)))
 (let (($x34 (=> $x95 $x144)))
 (not $x34)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x88 (forall ((input.ind-%var651X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var651X))))
 ))
 (let (($x130 (forall ((input.ind-%var650X (_ BitVec 32)) )(let (($x107 (spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var650X)))
 (= false $x107)))
 ))
 (let (($x36 (and $x130 $x88)))
 (let (($x94 (= true true)))
 (let (($x123 (and $x94 $x36)))
 (let (($x144 (= $x123 true)))
 (let (($x176 (forall ((input.ind-%var643X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var643X)))
 (=> $x100 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var643X) (_ bv0 32)))))
 ))
 (let (($x161 (forall ((input.ind-%var642X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var642X)))
 (= $x100 false)))
 ))
 (let (($x177 (and $x161 $x176)))
 (let (($x178 (= $x177 true)))
 (let (($x138 (forall ((input.ind-%var635X (_ BitVec 32)) (input.ind-%var637X (_ BitVec 32)) )(let (($x146 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var635X input.ind-%var637X)))
 (let (($x80 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var635X)))
 (=> (and $x80 $x146) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var635X input.ind-%var637X) (_ bv0 32))))))
 ))
 (let (($x121 (forall ((input.ind-%var635X (_ BitVec 32)) (input.ind-%var636X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var635X)))
 (=> $x80 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var635X input.ind-%var636X) false))))
 ))
 (let (($x99 (forall ((input.ind-%var634X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var634X)))
 (= $x87 false)))
 ))
 (let (($x105 (and (and $x99 $x121) $x138)))
 (let (($x83 (= $x105 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x61 (concat ?x60 (concat ?x71 ?x74)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x13)))))))
 (let (($x86 (and (and (and $x152 $x49) $x73) $x76)))
 (let (($x101 (= $x86 true)))
 (let (($x96 (= $x101 true)))
 (let (($x42 (= $x96 true)))
 (let (($x119 (and $x42 $x83)))
 (let (($x27 (and $x119 $x178)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x116 (and $x54 $x27)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x98 (and $x40 $x116)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x91 (and $x12 $x98)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x104 (and $x14 $x91)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x90 (and $x20 $x104)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x150 (and $x10 $x90)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x58 (and $x35 $x150)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x112 (and $x11 $x58)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x137 (and $x7 $x112)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x95 (and $x57 $x137)))
 (let (($x34 (=> $x95 $x144)))
 (not $x34)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.ind-%var650X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var650X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd36d1810)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd36d1813)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd36d1810)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x153 (= false true)))
 (let (($x102 (= $x153 true)))
 (let (($x51 (forall ((input.ind-%var701X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var701X)))
 (=> $x130 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var701X) (_ bv0 32)))))
 ))
 (let (($x88 (forall ((input.ind-%var700X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var700X)))
 (= $x130 false)))
 ))
 (let (($x128 (and $x88 $x51)))
 (let (($x85 (= $x128 true)))
 (let (($x58 (forall ((input.ind-%var693X (_ BitVec 32)) (input.ind-%var695X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var693X input.ind-%var695X)))
 (let (($x161 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var693X)))
 (=> (and $x161 $x105) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var693X input.ind-%var695X) (_ bv0 32))))))
 ))
 (let (($x174 (forall ((input.ind-%var693X (_ BitVec 32)) (input.ind-%var694X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var693X)))
 (=> $x161 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var693X input.ind-%var694X) false))))
 ))
 (let (($x121 (forall ((input.ind-%var692X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var692X)))
 (= $x80 false)))
 ))
 (let (($x137 (and (and $x121 $x174) $x58)))
 (let (($x95 (= $x137 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x63 (concat ?x71 (concat ?x70 ?x72)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x5)))))))
 (let (($x96 (and (and (and $x92 $x69) $x73) $x76)))
 (let (($x42 (= $x96 true)))
 (let (($x81 (= $x42 true)))
 (let (($x87 (= $x81 true)))
 (let (($x94 (and $x87 $x95)))
 (let (($x114 (and $x94 $x85)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x25 (and $x29 $x114)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x162 (and $x9 $x25)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x124 (and $x37 $x162)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x164 (and $x17 $x124)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x142 (and $x24 $x164)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x97 (and $x23 $x142)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x62 (and $x41 $x97)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x151 (and $x15 $x62)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x93 (and $x31 $x151)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x111 (and $x45 $x93)))
 (let (($x134 (=> $x111 $x102)))
 (not $x134)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x153 (= false true)))
 (let (($x102 (= $x153 true)))
 (let (($x51 (forall ((input.ind-%var701X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var701X)))
 (=> $x130 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var701X) (_ bv0 32)))))
 ))
 (let (($x88 (forall ((input.ind-%var700X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var700X)))
 (= $x130 false)))
 ))
 (let (($x128 (and $x88 $x51)))
 (let (($x85 (= $x128 true)))
 (let (($x58 (forall ((input.ind-%var693X (_ BitVec 32)) (input.ind-%var695X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var693X input.ind-%var695X)))
 (let (($x161 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var693X)))
 (=> (and $x161 $x105) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var693X input.ind-%var695X) (_ bv0 32))))))
 ))
 (let (($x174 (forall ((input.ind-%var693X (_ BitVec 32)) (input.ind-%var694X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var693X)))
 (=> $x161 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var693X input.ind-%var694X) false))))
 ))
 (let (($x121 (forall ((input.ind-%var692X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var692X)))
 (= $x80 false)))
 ))
 (let (($x137 (and (and $x121 $x174) $x58)))
 (let (($x95 (= $x137 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x63 (concat ?x71 (concat ?x70 ?x72)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x5)))))))
 (let (($x96 (and (and (and $x92 $x69) $x73) $x76)))
 (let (($x42 (= $x96 true)))
 (let (($x81 (= $x42 true)))
 (let (($x87 (= $x81 true)))
 (let (($x94 (and $x87 $x95)))
 (let (($x114 (and $x94 $x85)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x25 (and $x29 $x114)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x162 (and $x9 $x25)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x124 (and $x37 $x162)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x164 (and $x17 $x124)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x142 (and $x24 $x164)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x97 (and $x23 $x142)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x62 (and $x41 $x97)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x151 (and $x15 $x62)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x93 (and $x31 $x151)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x111 (and $x45 $x93)))
 (let (($x134 (=> $x111 $x102)))
 (not $x134)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfcbd2113)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x43)))))))
 (let (($x123 (and $x86 $x73)))
 (let (($x118 (= $x123 true)))
 (let (($x157 (= $x118 true)))
 (let (($x38 (forall ((input.ind-%var743X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var743X)))
 (=> $x140 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var743X) (_ bv0 32)))))
 ))
 (let (($x148 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var742X)))
 (= $x140 false)))
 ))
 (let (($x132 (and $x148 $x38)))
 (let (($x119 (= $x132 true)))
 (let (($x62 (forall ((input.ind-%var735X (_ BitVec 32)) (input.ind-%var737X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var735X input.ind-%var737X)))
 (let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var735X)))
 (=> (and $x88 $x137) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var735X input.ind-%var737X) (_ bv0 32))))))
 ))
 (let (($x82 (forall ((input.ind-%var735X (_ BitVec 32)) (input.ind-%var736X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var735X)))
 (=> $x88 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var735X input.ind-%var736X) false))))
 ))
 (let (($x174 (forall ((input.ind-%var734X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var734X)))
 (= $x161 false)))
 ))
 (let (($x93 (and (and $x174 $x82) $x62)))
 (let (($x111 (= $x93 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x74 (concat ?x70 (concat ?x60 ?x64)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let (($x81 (and (and (and $x86 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x73) $x76)))
 (let (($x87 (= $x81 true)))
 (let (($x129 (= $x87 true)))
 (let (($x80 (= $x129 true)))
 (let (($x153 (and $x80 $x111)))
 (let (($x107 (and $x153 $x119)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x110 (and $x19 $x107)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x178 (and $x12 $x110)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x98 (and $x14 $x178)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x46 (and $x20 $x98)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x100 (and $x10 $x46)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x155 (and $x35 $x100)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x53 (and $x11 $x155)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x176 (and $x7 $x53)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x177 (and $x48 $x176)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x91 (and $x54 $x177)))
 (let (($x141 (=> $x91 $x157)))
 (not $x141)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x43)))))))
 (let (($x123 (and $x86 $x73)))
 (let (($x118 (= $x123 true)))
 (let (($x157 (= $x118 true)))
 (let (($x38 (forall ((input.ind-%var743X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var743X)))
 (=> $x140 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var743X) (_ bv0 32)))))
 ))
 (let (($x148 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var742X)))
 (= $x140 false)))
 ))
 (let (($x132 (and $x148 $x38)))
 (let (($x119 (= $x132 true)))
 (let (($x62 (forall ((input.ind-%var735X (_ BitVec 32)) (input.ind-%var737X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var735X input.ind-%var737X)))
 (let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var735X)))
 (=> (and $x88 $x137) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var735X input.ind-%var737X) (_ bv0 32))))))
 ))
 (let (($x82 (forall ((input.ind-%var735X (_ BitVec 32)) (input.ind-%var736X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var735X)))
 (=> $x88 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var735X input.ind-%var736X) false))))
 ))
 (let (($x174 (forall ((input.ind-%var734X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var734X)))
 (= $x161 false)))
 ))
 (let (($x93 (and (and $x174 $x82) $x62)))
 (let (($x111 (= $x93 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x74 (concat ?x70 (concat ?x60 ?x64)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let (($x81 (and (and (and $x86 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x73) $x76)))
 (let (($x87 (= $x81 true)))
 (let (($x129 (= $x87 true)))
 (let (($x80 (= $x129 true)))
 (let (($x153 (and $x80 $x111)))
 (let (($x107 (and $x153 $x119)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x110 (and $x19 $x107)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x178 (and $x12 $x110)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x98 (and $x14 $x178)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x46 (and $x20 $x98)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x100 (and $x10 $x46)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x155 (and $x35 $x100)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x53 (and $x11 $x155)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x176 (and $x7 $x53)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x177 (and $x48 $x176)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x91 (and $x54 $x177)))
 (let (($x141 (=> $x91 $x157)))
 (not $x141)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x83 (= $x124 true)))
 (let (($x121 (forall ((input.ind-%var761X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var761X)))
 (=> $x141 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var761X) (_ bv0 32)))))
 ))
 (let (($x8 (forall ((input.ind-%var760X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var760X)))
 (= $x141 false)))
 ))
 (let (($x160 (and $x8 $x121)))
 (let (($x150 (= $x160 true)))
 (let (($x53 (forall ((input.ind-%var753X (_ BitVec 32)) (input.ind-%var755X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var753X input.ind-%var755X)))
 (let (($x148 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var753X)))
 (=> (and $x148 $x93) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var753X input.ind-%var755X) (_ bv0 32))))))
 ))
 (let (($x120 (forall ((input.ind-%var753X (_ BitVec 32)) (input.ind-%var754X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var753X)))
 (=> $x148 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var753X input.ind-%var754X) false))))
 ))
 (let (($x82 (forall ((input.ind-%var752X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var752X)))
 (= $x88 false)))
 ))
 (let (($x177 (and (and $x82 $x120) $x53)))
 (let (($x91 (= $x177 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x72 (concat ?x60 (concat ?x71 ?x75)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x152 $x68)))))))
 (let (($x129 (and (and (and $x96 $x69) $x73) $x76)))
 (let (($x80 (= $x129 true)))
 (let (($x138 (= $x80 true)))
 (let (($x161 (= $x138 true)))
 (let (($x123 (and $x161 $x91)))
 (let (($x94 (and $x123 $x150)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x102 (and $x40 $x94)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x134 (and $x37 $x102)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x85 (and $x17 $x134)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x162 (and $x24 $x85)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x27 (and $x23 $x162)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x130 (and $x41 $x27)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x143 (and $x15 $x130)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x175 (and $x31 $x143)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x51 (and $x57 $x175)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x128 (and $x29 $x51)))
 (let (($x144 (=> $x128 $x83)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x83 (= $x124 true)))
 (let (($x121 (forall ((input.ind-%var761X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var761X)))
 (=> $x141 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var761X) (_ bv0 32)))))
 ))
 (let (($x8 (forall ((input.ind-%var760X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var760X)))
 (= $x141 false)))
 ))
 (let (($x160 (and $x8 $x121)))
 (let (($x150 (= $x160 true)))
 (let (($x53 (forall ((input.ind-%var753X (_ BitVec 32)) (input.ind-%var755X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var753X input.ind-%var755X)))
 (let (($x148 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var753X)))
 (=> (and $x148 $x93) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var753X input.ind-%var755X) (_ bv0 32))))))
 ))
 (let (($x120 (forall ((input.ind-%var753X (_ BitVec 32)) (input.ind-%var754X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var753X)))
 (=> $x148 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var753X input.ind-%var754X) false))))
 ))
 (let (($x82 (forall ((input.ind-%var752X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var752X)))
 (= $x88 false)))
 ))
 (let (($x177 (and (and $x82 $x120) $x53)))
 (let (($x91 (= $x177 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x72 (concat ?x60 (concat ?x71 ?x75)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x152 $x68)))))))
 (let (($x129 (and (and (and $x96 $x69) $x73) $x76)))
 (let (($x80 (= $x129 true)))
 (let (($x138 (= $x80 true)))
 (let (($x161 (= $x138 true)))
 (let (($x123 (and $x161 $x91)))
 (let (($x94 (and $x123 $x150)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x102 (and $x40 $x94)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x134 (and $x37 $x102)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x85 (and $x17 $x134)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x162 (and $x24 $x85)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x27 (and $x23 $x162)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x130 (and $x41 $x27)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x143 (and $x15 $x130)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x175 (and $x31 $x143)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x51 (and $x57 $x175)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x128 (and $x29 $x51)))
 (let (($x144 (=> $x128 $x83)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x170 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x170)))
 (let (($x164 (= ?x146 input.dst.llvm-%n)))
 (let (($x104 (= $x164 true)))
 (let (($x165 (forall ((input.ind-%var803X (_ BitVec 32)) )(let (($x36 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var803X)))
 (=> $x36 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var803X) (_ bv0 32)))))
 ))
 (let (($x112 (forall ((input.ind-%var802X (_ BitVec 32)) )(let (($x36 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var802X)))
 (= $x36 false)))
 ))
 (let (($x97 (and $x112 $x165)))
 (let (($x153 (= $x97 true)))
 (let (($x143 (forall ((input.ind-%var795X (_ BitVec 32)) (input.ind-%var797X (_ BitVec 32)) )(let (($x177 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var795X input.ind-%var797X)))
 (let (($x8 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var795X)))
 (=> (and $x8 $x177) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var795X input.ind-%var797X) (_ bv0 32))))))
 ))
 (let (($x116 (forall ((input.ind-%var795X (_ BitVec 32)) (input.ind-%var796X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var795X)))
 (=> $x8 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var795X input.ind-%var796X) false))))
 ))
 (let (($x120 (forall ((input.ind-%var794X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var794X)))
 (= $x148 false)))
 ))
 (let (($x51 (and (and $x120 $x116) $x143)))
 (let (($x128 (= $x51 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x64 (concat ?x71 (concat ?x70 ?x59)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x18)))))))
 (let (($x138 (and (and (and $x81 $x49) $x73) $x76)))
 (let (($x161 (= $x138 true)))
 (let (($x58 (= $x161 true)))
 (let (($x88 (= $x58 true)))
 (let (($x124 (and $x88 $x128)))
 (let (($x118 (and $x124 $x153)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x157 (and $x9 $x118)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x119 (and $x14 $x157)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x178 (and $x20 $x119)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x114 (and $x10 $x178)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x140 (and $x35 $x114)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x6 (and $x11 $x140)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x90 (and $x7 $x6)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x38 (and $x48 $x90)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x132 (and $x45 $x38)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x98 (and $x19 $x132)))
 (let (($x28 (=> $x98 $x104)))
 (not $x28)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x170 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x170)))
 (let (($x164 (= ?x146 input.dst.llvm-%n)))
 (let (($x104 (= $x164 true)))
 (let (($x165 (forall ((input.ind-%var803X (_ BitVec 32)) )(let (($x36 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var803X)))
 (=> $x36 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var803X) (_ bv0 32)))))
 ))
 (let (($x112 (forall ((input.ind-%var802X (_ BitVec 32)) )(let (($x36 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var802X)))
 (= $x36 false)))
 ))
 (let (($x97 (and $x112 $x165)))
 (let (($x153 (= $x97 true)))
 (let (($x143 (forall ((input.ind-%var795X (_ BitVec 32)) (input.ind-%var797X (_ BitVec 32)) )(let (($x177 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var795X input.ind-%var797X)))
 (let (($x8 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var795X)))
 (=> (and $x8 $x177) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var795X input.ind-%var797X) (_ bv0 32))))))
 ))
 (let (($x116 (forall ((input.ind-%var795X (_ BitVec 32)) (input.ind-%var796X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var795X)))
 (=> $x8 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var795X input.ind-%var796X) false))))
 ))
 (let (($x120 (forall ((input.ind-%var794X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var794X)))
 (= $x148 false)))
 ))
 (let (($x51 (and (and $x120 $x116) $x143)))
 (let (($x128 (= $x51 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x64 (concat ?x71 (concat ?x70 ?x59)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x18)))))))
 (let (($x138 (and (and (and $x81 $x49) $x73) $x76)))
 (let (($x161 (= $x138 true)))
 (let (($x58 (= $x161 true)))
 (let (($x88 (= $x58 true)))
 (let (($x124 (and $x88 $x128)))
 (let (($x118 (and $x124 $x153)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x157 (and $x9 $x118)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x119 (and $x14 $x157)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x178 (and $x20 $x119)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x114 (and $x10 $x178)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x140 (and $x35 $x114)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x6 (and $x11 $x140)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x90 (and $x7 $x6)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x38 (and $x48 $x90)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x132 (and $x45 $x38)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x98 (and $x19 $x132)))
 (let (($x28 (=> $x98 $x104)))
 (not $x28)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x121 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x160 (= $x121 true)))
 (let (($x85 (= $x160 true)))
 (let (($x110 (forall ((input.ind-%var821X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var821X)))
 (=> $x164 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var821X) (_ bv0 32)))))
 ))
 (let (($x84 (forall ((input.ind-%var820X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var820X)))
 (= $x164 false)))
 ))
 (let (($x34 (and $x84 $x110)))
 (let (($x82 (= $x34 true)))
 (let (($x90 (forall ((input.ind-%var813X (_ BitVec 32)) (input.ind-%var815X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var813X input.ind-%var815X)))
 (let (($x112 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var813X)))
 (=> (and $x112 $x51) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var813X input.ind-%var815X) (_ bv0 32))))))
 ))
 (let (($x166 (forall ((input.ind-%var813X (_ BitVec 32)) (input.ind-%var814X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var813X)))
 (=> $x112 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var813X input.ind-%var814X) false))))
 ))
 (let (($x116 (forall ((input.ind-%var812X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var812X)))
 (= $x8 false)))
 ))
 (let (($x132 (and (and $x116 $x166) $x90)))
 (let (($x98 (= $x132 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x75 (concat ?x70 (concat ?x60 ?x61)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x56)))))))
 (let (($x58 (and (and (and $x129 $x69) $x73) $x76)))
 (let (($x88 (= $x58 true)))
 (let (($x62 (= $x88 true)))
 (let (($x148 (= $x62 true)))
 (let (($x105 (and $x148 $x98)))
 (let (($x154 (and $x105 $x82)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x155 (and $x12 $x154)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x123 (and $x17 $x155)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x83 (and $x24 $x123)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x144 (and $x23 $x83)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x150 (and $x41 $x144)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x134 (and $x15 $x150)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x107 (and $x31 $x134)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x141 (and $x57 $x107)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x101 (and $x54 $x141)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x99 (and $x40 $x101)))
 (let (($x111 (=> $x99 $x85)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x121 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x160 (= $x121 true)))
 (let (($x85 (= $x160 true)))
 (let (($x110 (forall ((input.ind-%var821X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var821X)))
 (=> $x164 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var821X) (_ bv0 32)))))
 ))
 (let (($x84 (forall ((input.ind-%var820X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var820X)))
 (= $x164 false)))
 ))
 (let (($x34 (and $x84 $x110)))
 (let (($x82 (= $x34 true)))
 (let (($x90 (forall ((input.ind-%var813X (_ BitVec 32)) (input.ind-%var815X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var813X input.ind-%var815X)))
 (let (($x112 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var813X)))
 (=> (and $x112 $x51) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var813X input.ind-%var815X) (_ bv0 32))))))
 ))
 (let (($x166 (forall ((input.ind-%var813X (_ BitVec 32)) (input.ind-%var814X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var813X)))
 (=> $x112 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var813X input.ind-%var814X) false))))
 ))
 (let (($x116 (forall ((input.ind-%var812X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var812X)))
 (= $x8 false)))
 ))
 (let (($x132 (and (and $x116 $x166) $x90)))
 (let (($x98 (= $x132 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x75 (concat ?x70 (concat ?x60 ?x61)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x32 $x26)))
 (let (($x39 (and $x16 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x56)))))))
 (let (($x58 (and (and (and $x129 $x69) $x73) $x76)))
 (let (($x88 (= $x58 true)))
 (let (($x62 (= $x88 true)))
 (let (($x148 (= $x62 true)))
 (let (($x105 (and $x148 $x98)))
 (let (($x154 (and $x105 $x82)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x155 (and $x12 $x154)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x123 (and $x17 $x155)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x83 (and $x24 $x123)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x144 (and $x23 $x83)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x150 (and $x41 $x144)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x134 (and $x15 $x150)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x107 (and $x31 $x134)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x141 (and $x57 $x107)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x101 (and $x54 $x141)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x99 (and $x40 $x101)))
 (let (($x111 (=> $x99 $x85)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x163 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (= $x163 false)))
 (let (($x113 (= $x149 true)))
 (let (($x46 (forall ((input.ind-%var863X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var863X)))
 (=> $x153 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var863X) (_ bv0 32)))))
 ))
 (let (($x28 (forall ((input.ind-%var862X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var862X)))
 (= $x153 false)))
 ))
 (let (($x103 (and $x28 $x46)))
 (let (($x145 (= $x103 true)))
 (let (($x131 (forall ((input.ind-%var855X (_ BitVec 32)) (input.ind-%var857X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var855X input.ind-%var857X)))
 (let (($x85 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var855X)))
 (=> (and $x85 $x141) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var855X input.ind-%var857X) (_ bv0 32))))))
 ))
 (let (($x95 (forall ((input.ind-%var855X (_ BitVec 32)) (input.ind-%var856X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var855X)))
 (=> $x85 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var855X input.ind-%var856X) false))))
 ))
 (let (($x155 (forall ((input.ind-%var854X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var854X)))
 (= $x110 false)))
 ))
 (let (($x135 (and (and $x155 $x95) $x131)))
 (let (($x130 (= $x135 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x90)))
 (let (($x105 (= ?x132 input.dst.llvm-%n)))
 (let (($x164 (= $x105 true)))
 (let (($x147 (= $x164 true)))
 (let (($x38 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x38 true)))
 (let (($x118 (= $x140 true)))
 (let (($x112 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x51 (= $x112 true)))
 (let (($x167 (= $x51 true)))
 (let (($x151 (= $x167 true)))
 (let (($x53 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x8 (= $x53 true)))
 (let (($x25 (= $x8 true)))
 (let (($x116 (= $x25 true)))
 (let (($x76 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x58 (= $x76 true)))
 (let (($x88 (= $x58 true)))
 (let (($x62 (= $x88 true)))
 (let (($x60 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x61 (= $x60 true)))
 (let (($x74 (= $x61 true)))
 (let (($x59 (= $x74 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x161 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x22 $x161)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x129 $x43)))))))
 (let (($x63 (and $x47 $x80)))
 (let (($x75 (= $x63 true)))
 (let (($x71 (= $x75 true)))
 (let (($x72 (= $x71 true)))
 (let (($x152 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x152 true)))
 (let (($x49 (= $x68 true)))
 (let (($x70 (and $x49 $x72)))
 (let (($x67 (and $x70 $x59)))
 (let (($x148 (and $x67 $x62)))
 (let (($x143 (and $x148 $x116)))
 (let (($x166 (and $x143 $x151)))
 (let (($x114 (and $x166 $x118)))
 (let (($x84 (and $x114 $x147)))
 (let (($x124 (and $x84 $x130)))
 (let (($x115 (and $x124 $x145)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x156 (and $x37 $x115)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x171 (and $x20 $x156)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x89 (and $x10 $x171)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x65 (and $x35 $x89)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x78 (and $x11 $x65)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x136 (and $x7 $x78)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x173 (and $x45 $x136)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x172 (and $x21 $x173)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x125 (and $x40 $x172)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x133 (and $x57 $x125)))
 (let (($x139 (=> $x133 $x113)))
 (not $x139)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x163 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (= $x163 false)))
 (let (($x113 (= $x149 true)))
 (let (($x46 (forall ((input.ind-%var863X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var863X)))
 (=> $x153 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var863X) (_ bv0 32)))))
 ))
 (let (($x28 (forall ((input.ind-%var862X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var862X)))
 (= $x153 false)))
 ))
 (let (($x103 (and $x28 $x46)))
 (let (($x145 (= $x103 true)))
 (let (($x131 (forall ((input.ind-%var855X (_ BitVec 32)) (input.ind-%var857X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var855X input.ind-%var857X)))
 (let (($x85 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var855X)))
 (=> (and $x85 $x141) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var855X input.ind-%var857X) (_ bv0 32))))))
 ))
 (let (($x95 (forall ((input.ind-%var855X (_ BitVec 32)) (input.ind-%var856X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var855X)))
 (=> $x85 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var855X input.ind-%var856X) false))))
 ))
 (let (($x155 (forall ((input.ind-%var854X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var854X)))
 (= $x110 false)))
 ))
 (let (($x135 (and (and $x155 $x95) $x131)))
 (let (($x130 (= $x135 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x90)))
 (let (($x105 (= ?x132 input.dst.llvm-%n)))
 (let (($x164 (= $x105 true)))
 (let (($x147 (= $x164 true)))
 (let (($x38 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x38 true)))
 (let (($x118 (= $x140 true)))
 (let (($x112 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x51 (= $x112 true)))
 (let (($x167 (= $x51 true)))
 (let (($x151 (= $x167 true)))
 (let (($x53 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x8 (= $x53 true)))
 (let (($x25 (= $x8 true)))
 (let (($x116 (= $x25 true)))
 (let (($x76 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x58 (= $x76 true)))
 (let (($x88 (= $x58 true)))
 (let (($x62 (= $x88 true)))
 (let (($x60 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x61 (= $x60 true)))
 (let (($x74 (= $x61 true)))
 (let (($x59 (= $x74 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x161 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x22 $x161)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x129 $x43)))))))
 (let (($x63 (and $x47 $x80)))
 (let (($x75 (= $x63 true)))
 (let (($x71 (= $x75 true)))
 (let (($x72 (= $x71 true)))
 (let (($x152 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x152 true)))
 (let (($x49 (= $x68 true)))
 (let (($x70 (and $x49 $x72)))
 (let (($x67 (and $x70 $x59)))
 (let (($x148 (and $x67 $x62)))
 (let (($x143 (and $x148 $x116)))
 (let (($x166 (and $x143 $x151)))
 (let (($x114 (and $x166 $x118)))
 (let (($x84 (and $x114 $x147)))
 (let (($x124 (and $x84 $x130)))
 (let (($x115 (and $x124 $x145)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x156 (and $x37 $x115)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x171 (and $x20 $x156)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x89 (and $x10 $x171)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x65 (and $x35 $x89)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x78 (and $x11 $x65)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x136 (and $x7 $x78)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x173 (and $x45 $x136)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x172 (and $x21 $x173)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x125 (and $x40 $x172)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x133 (and $x57 $x125)))
 (let (($x139 (=> $x133 $x113)))
 (not $x139)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x161 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x22 $x161)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x129 $x81)))))))
 (let (($x128 (and $x47 $x80)))
 (let (($x123 (= $x128 true)))
 (let (($x83 (= $x123 true)))
 (let (($x172 (forall ((input.ind-%var905X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var905X)))
 (=> $x178 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var905X) (_ bv0 32)))))
 ))
 (let (($x103 (forall ((input.ind-%var904X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var904X)))
 (= $x178 false)))
 ))
 (let (($x125 (and $x103 $x172)))
 (let (($x133 (= $x125 true)))
 (let (($x131 (forall ((input.ind-%var897X (_ BitVec 32)) (input.ind-%var899X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var897X input.ind-%var899X)))
 (let (($x110 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var897X)))
 (=> (and $x110 $x105) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var897X input.ind-%var899X) (_ bv0 32))))))
 ))
 (let (($x155 (forall ((input.ind-%var897X (_ BitVec 32)) (input.ind-%var898X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var897X)))
 (=> $x110 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var897X input.ind-%var898X) false))))
 ))
 (let (($x140 (forall ((input.ind-%var896X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var896X)))
 (= $x167 false)))
 ))
 (let (($x130 (and (and $x140 $x155) $x131)))
 (let (($x124 (= $x130 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x76 (concat ?x74 (concat ?x70 ?x71)))))
 (let (($x88 (= input.dst.llvm-%n ?x58)))
 (let (($x53 (and (and (and $x47 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x80) $x88)))
 (let (($x8 (= $x53 true)))
 (let (($x25 (= $x8 true)))
 (let (($x116 (= $x25 true)))
 (let (($x153 (and $x116 $x124)))
 (let (($x163 (and $x153 $x133)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x149 (and $x14 $x163)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x113 (and $x24 $x149)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x139 (and $x23 $x113)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x109 (and $x41 $x139)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x92 (and $x15 $x109)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x18 (and $x31 $x92)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x119 (and $x54 $x18)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x77 (and $x40 $x119)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x34 (and $x21 $x77)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x101 (and $x19 $x34)))
 (let (($x117 (=> $x101 $x83)))
 (not $x117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x161 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x22 $x161)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x129 $x81)))))))
 (let (($x128 (and $x47 $x80)))
 (let (($x123 (= $x128 true)))
 (let (($x83 (= $x123 true)))
 (let (($x172 (forall ((input.ind-%var905X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var905X)))
 (=> $x178 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var905X) (_ bv0 32)))))
 ))
 (let (($x103 (forall ((input.ind-%var904X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var904X)))
 (= $x178 false)))
 ))
 (let (($x125 (and $x103 $x172)))
 (let (($x133 (= $x125 true)))
 (let (($x131 (forall ((input.ind-%var897X (_ BitVec 32)) (input.ind-%var899X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var897X input.ind-%var899X)))
 (let (($x110 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var897X)))
 (=> (and $x110 $x105) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var897X input.ind-%var899X) (_ bv0 32))))))
 ))
 (let (($x155 (forall ((input.ind-%var897X (_ BitVec 32)) (input.ind-%var898X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var897X)))
 (=> $x110 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var897X input.ind-%var898X) false))))
 ))
 (let (($x140 (forall ((input.ind-%var896X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var896X)))
 (= $x167 false)))
 ))
 (let (($x130 (and (and $x140 $x155) $x131)))
 (let (($x124 (= $x130 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x76 (concat ?x74 (concat ?x70 ?x71)))))
 (let (($x88 (= input.dst.llvm-%n ?x58)))
 (let (($x53 (and (and (and $x47 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x80) $x88)))
 (let (($x8 (= $x53 true)))
 (let (($x25 (= $x8 true)))
 (let (($x116 (= $x25 true)))
 (let (($x153 (and $x116 $x124)))
 (let (($x163 (and $x153 $x133)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x149 (and $x14 $x163)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x113 (and $x24 $x149)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x139 (and $x23 $x113)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x109 (and $x41 $x139)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x92 (and $x15 $x109)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x18 (and $x31 $x92)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x119 (and $x54 $x18)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x77 (and $x40 $x119)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x34 (and $x21 $x77)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x101 (and $x19 $x34)))
 (let (($x117 (=> $x101 $x83)))
 (not $x117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x115 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x115)))
 (let (($x102 (= ?x78 input.dst.llvm-%n)))
 (let (($x90 (= $x102 true)))
 (let (($x112 (forall ((input.ind-%var923X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var923X)))
 (=> $x117 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var923X) (_ bv0 32)))))
 ))
 (let (($x162 (forall ((input.ind-%var922X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var922X)))
 (= $x117 false)))
 ))
 (let (($x166 (and $x162 $x112)))
 (let (($x132 (= $x166 true)))
 (let (($x119 (forall ((input.ind-%var915X (_ BitVec 32)) (input.ind-%var917X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var915X input.ind-%var917X)))
 (let (($x103 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var915X)))
 (=> (and $x103 $x130) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var915X input.ind-%var917X) (_ bv0 32))))))
 ))
 (let (($x136 (forall ((input.ind-%var915X (_ BitVec 32)) (input.ind-%var916X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var915X)))
 (=> $x103 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var915X input.ind-%var916X) false))))
 ))
 (let (($x155 (forall ((input.ind-%var914X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var914X)))
 (= $x110 false)))
 ))
 (let (($x34 (and (and $x155 $x136) $x119)))
 (let (($x101 (= $x34 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x59 (concat ?x70 (concat ?x60 ?x67)))))
 (let (($x88 (= input.dst.llvm-%n ?x58)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x161 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x22 $x161)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x69)))))))
 (let (($x25 (and (and (and $x62 $x55) $x80) $x88)))
 (let (($x116 (= $x25 true)))
 (let (($x51 (= $x116 true)))
 (let (($x167 (= $x51 true)))
 (let (($x128 (and $x167 $x101)))
 (let (($x147 (and $x128 $x132)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x36 (and $x17 $x147)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x28 (and $x10 $x36)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x160 (and $x35 $x28)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x120 (and $x11 $x160)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x6 (and $x7 $x120)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x84 (and $x45 $x6)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x106 (and $x50 $x84)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x65 (and $x9 $x106)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x85 (and $x29 $x65)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x141 (and $x37 $x85)))
 (let (($x93 (=> $x141 $x90)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x115 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x115)))
 (let (($x102 (= ?x78 input.dst.llvm-%n)))
 (let (($x90 (= $x102 true)))
 (let (($x112 (forall ((input.ind-%var923X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var923X)))
 (=> $x117 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var923X) (_ bv0 32)))))
 ))
 (let (($x162 (forall ((input.ind-%var922X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var922X)))
 (= $x117 false)))
 ))
 (let (($x166 (and $x162 $x112)))
 (let (($x132 (= $x166 true)))
 (let (($x119 (forall ((input.ind-%var915X (_ BitVec 32)) (input.ind-%var917X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var915X input.ind-%var917X)))
 (let (($x103 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var915X)))
 (=> (and $x103 $x130) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var915X input.ind-%var917X) (_ bv0 32))))))
 ))
 (let (($x136 (forall ((input.ind-%var915X (_ BitVec 32)) (input.ind-%var916X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var915X)))
 (=> $x103 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var915X input.ind-%var916X) false))))
 ))
 (let (($x155 (forall ((input.ind-%var914X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var914X)))
 (= $x110 false)))
 ))
 (let (($x34 (and (and $x155 $x136) $x119)))
 (let (($x101 (= $x34 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x59 (concat ?x70 (concat ?x60 ?x67)))))
 (let (($x88 (= input.dst.llvm-%n ?x58)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x161 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x22 $x161)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x69)))))))
 (let (($x25 (and (and (and $x62 $x55) $x80) $x88)))
 (let (($x116 (= $x25 true)))
 (let (($x51 (= $x116 true)))
 (let (($x167 (= $x51 true)))
 (let (($x128 (and $x167 $x101)))
 (let (($x147 (and $x128 $x132)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x36 (and $x17 $x147)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x28 (and $x10 $x36)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x160 (and $x35 $x28)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x120 (and $x11 $x160)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x6 (and $x7 $x120)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x84 (and $x45 $x6)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x106 (and $x50 $x84)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x65 (and $x9 $x106)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x85 (and $x29 $x65)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x141 (and $x37 $x85)))
 (let (($x93 (=> $x141 $x90)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x125)))
 (let (($x151 (= ?x139 input.spec-%var-n-1)))
 (let (($x107 (= $x151 true)))
 (let (($x164 (forall ((input.ind-%var941X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var941X)))
 (=> $x102 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var941X) (_ bv0 32)))))
 ))
 (let (($x56 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var940X)))
 (= $x102 false)))
 ))
 (let (($x38 (and $x56 $x164)))
 (let (($x140 (= $x38 true)))
 (let (($x106 (forall ((input.ind-%var933X (_ BitVec 32)) (input.ind-%var935X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var933X input.ind-%var935X)))
 (let (($x162 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var933X)))
 (=> (and $x162 $x34) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var933X input.ind-%var935X) (_ bv0 32))))))
 ))
 (let (($x156 (forall ((input.ind-%var933X (_ BitVec 32)) (input.ind-%var934X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var933X)))
 (=> $x162 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var933X input.ind-%var934X) false))))
 ))
 (let (($x136 (forall ((input.ind-%var932X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var932X)))
 (= $x103 false)))
 ))
 (let (($x85 (and (and $x136 $x156) $x106)))
 (let (($x141 (= $x85 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x71 (concat ?x60 (concat ?x74 ?x64)))))
 (let (($x88 (= input.dst.llvm-%n ?x58)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x161 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x22 $x161)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x33)))))))
 (let (($x51 (and (and (and $x53 $x49) $x80) $x88)))
 (let (($x167 (= $x51 true)))
 (let (($x98 (= $x167 true)))
 (let (($x110 (= $x98 true)))
 (let (($x174 (and $x110 $x141)))
 (let (($x108 (and $x174 $x140)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x142 (and $x20 $x108)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x153 (and $x23 $x142)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x123 (and $x41 $x153)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x83 (and $x15 $x123)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x133 (and $x31 $x83)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x113 (and $x54 $x133)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x111 (and $x40 $x113)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x178 (and $x21 $x111)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x152 (and $x48 $x178)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x114 (and $x14 $x152)))
 (let (($x145 (=> $x114 $x107)))
 (not $x145)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x125)))
 (let (($x151 (= ?x139 input.spec-%var-n-1)))
 (let (($x107 (= $x151 true)))
 (let (($x164 (forall ((input.ind-%var941X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var941X)))
 (=> $x102 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var941X) (_ bv0 32)))))
 ))
 (let (($x56 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var940X)))
 (= $x102 false)))
 ))
 (let (($x38 (and $x56 $x164)))
 (let (($x140 (= $x38 true)))
 (let (($x106 (forall ((input.ind-%var933X (_ BitVec 32)) (input.ind-%var935X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var933X input.ind-%var935X)))
 (let (($x162 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var933X)))
 (=> (and $x162 $x34) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var933X input.ind-%var935X) (_ bv0 32))))))
 ))
 (let (($x156 (forall ((input.ind-%var933X (_ BitVec 32)) (input.ind-%var934X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var933X)))
 (=> $x162 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var933X input.ind-%var934X) false))))
 ))
 (let (($x136 (forall ((input.ind-%var932X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var932X)))
 (= $x103 false)))
 ))
 (let (($x85 (and (and $x136 $x156) $x106)))
 (let (($x141 (= $x85 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x71 (concat ?x60 (concat ?x74 ?x64)))))
 (let (($x88 (= input.dst.llvm-%n ?x58)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x39)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x52 $x30)))
 (let (($x161 (and $x44 $x73)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x22 $x161)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x33)))))))
 (let (($x51 (and (and (and $x53 $x49) $x80) $x88)))
 (let (($x167 (= $x51 true)))
 (let (($x98 (= $x167 true)))
 (let (($x110 (= $x98 true)))
 (let (($x174 (and $x110 $x141)))
 (let (($x108 (and $x174 $x140)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x142 (and $x20 $x108)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x153 (and $x23 $x142)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x123 (and $x41 $x153)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x83 (and $x15 $x123)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x133 (and $x31 $x83)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x113 (and $x54 $x133)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x111 (and $x40 $x113)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x178 (and $x21 $x111)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x152 (and $x48 $x178)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x114 (and $x14 $x152)))
 (let (($x145 (=> $x114 $x107)))
 (not $x145)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x253 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x254 (= $x253 false)))
 (let (($x255 (= $x254 true)))
 (let (($x237 (forall ((input.ind-%var977X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var977X)))
 (=> $x109 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var977X) (_ bv0 32)))))
 ))
 (let (($x231 (forall ((input.ind-%var976X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var976X)))
 (= $x109 false)))
 ))
 (let (($x238 (and $x231 $x237)))
 (let (($x239 (= $x238 true)))
 (let (($x223 (forall ((input.ind-%var969X (_ BitVec 32)) (input.ind-%var971X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var969X input.ind-%var971X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var969X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var969X input.ind-%var971X) (_ bv0 32))))))
 ))
 (let (($x216 (forall ((input.ind-%var969X (_ BitVec 32)) (input.ind-%var970X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var969X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var969X input.ind-%var970X) false))))
 ))
 (let (($x209 (forall ((input.ind-%var968X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var968X)))
 (= $x126 false)))
 ))
 (let (($x225 (and (and $x209 $x216) $x223)))
 (let (($x226 (= $x225 true)))
 (let (($x201 (forall ((input.ind-%var957X (_ BitVec 32)) (input.ind-%var959X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var957X input.ind-%var959X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var957X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var957X input.ind-%var959X) (_ bv0 32))))))
 ))
 (let (($x189 (forall ((input.ind-%var957X (_ BitVec 32)) (input.ind-%var958X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var957X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var957X input.ind-%var958X) false))))
 ))
 (let (($x168 (forall ((input.ind-%var956X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var956X)))
 (= $x126 false)))
 ))
 (let (($x203 (and (and $x168 $x189) $x201)))
 (let (($x204 (= $x203 true)))
 (let (($x175 (forall ((input.ind-%var947X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var947X)))
 (=> $x109 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var947X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var946X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var946X)))
 (= $x109 false)))
 ))
 (let (($x165 (and $x170 $x175)))
 (let (($x137 (= $x165 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x55)))
 (let (($x149 (= ?x43 input.dst.llvm-%n)))
 (let (($x112 (= $x149 true)))
 (let (($x166 (= $x112 true)))
 (let (($x132 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x132 true)))
 (let (($x163 (= $x28 true)))
 (let (($x46 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x18 (= $x46 true)))
 (let (($x128 (= $x18 true)))
 (let (($x115 (= $x128 true)))
 (let (($x92 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x143 (= $x92 true)))
 (let (($x118 (= $x143 true)))
 (let (($x154 (= $x118 true)))
 (let (($x124 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x130 (= $x124 true)))
 (let (($x101 (= $x130 true)))
 (let (($x36 (= $x101 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x177 (= $x145 true)))
 (let (($x32 (= $x177 true)))
 (let (($x148 (= $x32 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x113)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x142 $x83)))
 (let (($x178 (and $x133 $x111)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x106 $x178)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x105)))))))
 (let (($x114 (and $x108 $x152)))
 (let (($x172 (= $x114 true)))
 (let (($x125 (= $x172 true)))
 (let (($x139 (= $x125 true)))
 (let (($x95 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x156 (= $x95 true)))
 (let (($x65 (= $x156 true)))
 (let (($x136 (= (_ bv0 32) input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x119 (= $x136 true)))
 (let (($x162 (= $x119 true)))
 (let (($x110 (= (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x131 (= $x110 true)))
 (let (($x103 (= $x131 true)))
 (let (($x58 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x88 (= $x58 true)))
 (let (($x51 (= $x88 true)))
 (let (($x167 (= $x51 true)))
 (let (($x59 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x74 (= $x59 true)))
 (let (($x64 (= $x74 true)))
 (let (($x72 (= $x64 true)))
 (let (($x61 (bvsle input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x71 (= $x61 true)))
 (let (($x70 (= $x71 true)))
 (let (($x76 (= $x70 true)))
 (let (($x73 (bvule input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x161 (= $x73 true)))
 (let (($x80 (= $x161 true)))
 (let (($x116 (= $x80 true)))
 (let (($x52 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x26 (= $x52 true)))
 (let (($x16 (= $x26 true)))
 (let (($x30 (= $x16 true)))
 (let (($x5 (bvule input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x49 (= $x5 true)))
 (let (($x25 (= $x49 true)))
 (let (($x86 (= $x25 true)))
 (let (($x47 (bvsle input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x68 (= $x47 true)))
 (let (($x62 (= $x68 true)))
 (let (($x96 (= $x62 true)))
 (let (($x69 (= ?x43 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x138 (= $x69 true)))
 (let (($x13 (= $x138 true)))
 (let (($x53 (and $x13 $x96)))
 (let (($x22 (and $x53 $x86)))
 (let (($x44 (and $x22 $x30)))
 (let (($x8 (and $x44 $x116)))
 (let (($x60 (and $x8 $x76)))
 (let (($x67 (and $x60 $x72)))
 (let (($x98 (and $x67 $x167)))
 (let (($x171 (and $x98 $x103)))
 (let (($x34 (and $x171 $x162)))
 (let (($x6 (and $x34 $x65)))
 (let (($x151 (and $x6 $x139)))
 (let (($x90 (and $x151 $x148)))
 (let (($x77 (and $x90 $x36)))
 (let (($x155 (and $x77 $x154)))
 (let (($x78 (and $x155 $x115)))
 (let (($x117 (and $x78 $x163)))
 (let (($x160 (and $x117 $x166)))
 (let (($x42 (and $x160 $x137)))
 (let (($x205 (and $x42 $x204)))
 (let (($x227 (and $x205 $x226)))
 (let (($x240 (and $x227 $x239)))
 (let (($x129 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x241 (and $x129 $x240)))
 (let (($x20 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x242 (and $x20 $x241)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x243 (and $x24 $x242)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x244 (and $x35 $x243)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x245 (and $x11 $x244)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x246 (and $x7 $x245)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x247 (and $x45 $x246)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x248 (and $x50 $x247)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x249 (and $x29 $x248)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x250 (and $x57 $x249)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x251 (and $x14 $x250)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x252 (and $x12 $x251)))
 (let (($x256 (=> $x252 $x255)))
 (not $x256)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x253 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x254 (= $x253 false)))
 (let (($x255 (= $x254 true)))
 (let (($x237 (forall ((input.ind-%var977X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var977X)))
 (=> $x109 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var977X) (_ bv0 32)))))
 ))
 (let (($x231 (forall ((input.ind-%var976X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var976X)))
 (= $x109 false)))
 ))
 (let (($x238 (and $x231 $x237)))
 (let (($x239 (= $x238 true)))
 (let (($x223 (forall ((input.ind-%var969X (_ BitVec 32)) (input.ind-%var971X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var969X input.ind-%var971X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var969X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var969X input.ind-%var971X) (_ bv0 32))))))
 ))
 (let (($x216 (forall ((input.ind-%var969X (_ BitVec 32)) (input.ind-%var970X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var969X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var969X input.ind-%var970X) false))))
 ))
 (let (($x209 (forall ((input.ind-%var968X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var968X)))
 (= $x126 false)))
 ))
 (let (($x225 (and (and $x209 $x216) $x223)))
 (let (($x226 (= $x225 true)))
 (let (($x201 (forall ((input.ind-%var957X (_ BitVec 32)) (input.ind-%var959X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var957X input.ind-%var959X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var957X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var957X input.ind-%var959X) (_ bv0 32))))))
 ))
 (let (($x189 (forall ((input.ind-%var957X (_ BitVec 32)) (input.ind-%var958X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var957X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var957X input.ind-%var958X) false))))
 ))
 (let (($x168 (forall ((input.ind-%var956X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var956X)))
 (= $x126 false)))
 ))
 (let (($x203 (and (and $x168 $x189) $x201)))
 (let (($x204 (= $x203 true)))
 (let (($x175 (forall ((input.ind-%var947X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var947X)))
 (=> $x109 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var947X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var946X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var946X)))
 (= $x109 false)))
 ))
 (let (($x165 (and $x170 $x175)))
 (let (($x137 (= $x165 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x55)))
 (let (($x149 (= ?x43 input.dst.llvm-%n)))
 (let (($x112 (= $x149 true)))
 (let (($x166 (= $x112 true)))
 (let (($x132 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x132 true)))
 (let (($x163 (= $x28 true)))
 (let (($x46 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x18 (= $x46 true)))
 (let (($x128 (= $x18 true)))
 (let (($x115 (= $x128 true)))
 (let (($x92 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x143 (= $x92 true)))
 (let (($x118 (= $x143 true)))
 (let (($x154 (= $x118 true)))
 (let (($x124 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x130 (= $x124 true)))
 (let (($x101 (= $x130 true)))
 (let (($x36 (= $x101 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x177 (= $x145 true)))
 (let (($x32 (= $x177 true)))
 (let (($x148 (= $x32 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x113)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x142 $x83)))
 (let (($x178 (and $x133 $x111)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x106 $x178)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x105)))))))
 (let (($x114 (and $x108 $x152)))
 (let (($x172 (= $x114 true)))
 (let (($x125 (= $x172 true)))
 (let (($x139 (= $x125 true)))
 (let (($x95 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x156 (= $x95 true)))
 (let (($x65 (= $x156 true)))
 (let (($x136 (= (_ bv0 32) input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x119 (= $x136 true)))
 (let (($x162 (= $x119 true)))
 (let (($x110 (= (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x131 (= $x110 true)))
 (let (($x103 (= $x131 true)))
 (let (($x58 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x88 (= $x58 true)))
 (let (($x51 (= $x88 true)))
 (let (($x167 (= $x51 true)))
 (let (($x59 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x74 (= $x59 true)))
 (let (($x64 (= $x74 true)))
 (let (($x72 (= $x64 true)))
 (let (($x61 (bvsle input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x71 (= $x61 true)))
 (let (($x70 (= $x71 true)))
 (let (($x76 (= $x70 true)))
 (let (($x73 (bvule input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x161 (= $x73 true)))
 (let (($x80 (= $x161 true)))
 (let (($x116 (= $x80 true)))
 (let (($x52 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x26 (= $x52 true)))
 (let (($x16 (= $x26 true)))
 (let (($x30 (= $x16 true)))
 (let (($x5 (bvule input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x49 (= $x5 true)))
 (let (($x25 (= $x49 true)))
 (let (($x86 (= $x25 true)))
 (let (($x47 (bvsle input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x68 (= $x47 true)))
 (let (($x62 (= $x68 true)))
 (let (($x96 (= $x62 true)))
 (let (($x69 (= ?x43 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x138 (= $x69 true)))
 (let (($x13 (= $x138 true)))
 (let (($x53 (and $x13 $x96)))
 (let (($x22 (and $x53 $x86)))
 (let (($x44 (and $x22 $x30)))
 (let (($x8 (and $x44 $x116)))
 (let (($x60 (and $x8 $x76)))
 (let (($x67 (and $x60 $x72)))
 (let (($x98 (and $x67 $x167)))
 (let (($x171 (and $x98 $x103)))
 (let (($x34 (and $x171 $x162)))
 (let (($x6 (and $x34 $x65)))
 (let (($x151 (and $x6 $x139)))
 (let (($x90 (and $x151 $x148)))
 (let (($x77 (and $x90 $x36)))
 (let (($x155 (and $x77 $x154)))
 (let (($x78 (and $x155 $x115)))
 (let (($x117 (and $x78 $x163)))
 (let (($x160 (and $x117 $x166)))
 (let (($x42 (and $x160 $x137)))
 (let (($x205 (and $x42 $x204)))
 (let (($x227 (and $x205 $x226)))
 (let (($x240 (and $x227 $x239)))
 (let (($x129 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x241 (and $x129 $x240)))
 (let (($x20 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x242 (and $x20 $x241)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x243 (and $x24 $x242)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x244 (and $x35 $x243)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x245 (and $x11 $x244)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x246 (and $x7 $x245)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x247 (and $x45 $x246)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x248 (and $x50 $x247)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x249 (and $x29 $x248)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x250 (and $x57 $x249)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x251 (and $x14 $x250)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x252 (and $x12 $x251)))
 (let (($x256 (=> $x252 $x255)))
 (not $x256)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00004000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x234 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x134 (not $x234)))
 (let (($x211 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x217 (not $x211)))
 (let (($x94 (or $x217 $x134)))
 (let (($x150 (= $x94 true)))
 (let (($x122 (= $x150 true)))
 (let (($x256 (forall ((input.ind-%var1037X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1037X)))
 (=> $x107 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1037X) (_ bv0 32)))))
 ))
 (let (($x250 (forall ((input.ind-%var1036X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1036X)))
 (= $x107 false)))
 ))
 (let (($x257 (and $x250 $x256)))
 (let (($x120 (= $x257 true)))
 (let (($x242 (forall ((input.ind-%var1029X (_ BitVec 32)) (input.ind-%var1031X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1029X input.ind-%var1031X)))
 (let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1029X)))
 (=> (and $x104 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1029X input.ind-%var1031X) (_ bv0 32))))))
 ))
 (let (($x227 (forall ((input.ind-%var1029X (_ BitVec 32)) (input.ind-%var1030X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1029X)))
 (=> $x104 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1029X input.ind-%var1030X) false))))
 ))
 (let (($x205 (forall ((input.ind-%var1028X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1028X)))
 (= $x78 false)))
 ))
 (let (($x244 (and (and $x205 $x227) $x242)))
 (let (($x245 (= $x244 true)))
 (let (($x202 (forall ((input.ind-%var1017X (_ BitVec 32)) (input.ind-%var1019X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1017X input.ind-%var1019X)))
 (let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1017X)))
 (=> (and $x104 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1017X input.ind-%var1019X) (_ bv0 32))))))
 ))
 (let (($x165 (forall ((input.ind-%var1017X (_ BitVec 32)) (input.ind-%var1018X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1017X)))
 (=> $x104 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1017X input.ind-%var1018X) false))))
 ))
 (let (($x117 (forall ((input.ind-%var1016X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1016X)))
 (= $x78 false)))
 ))
 (let (($x194 (and (and $x117 $x165) $x202)))
 (let (($x198 (= $x194 true)))
 (let (($x154 (forall ((input.ind-%var1007X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1007X)))
 (=> $x107 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1007X) (_ bv0 32)))))
 ))
 (let (($x148 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1006X)))
 (= $x107 false)))
 ))
 (let (($x155 (and $x148 $x154)))
 (let (($x46 (= $x155 true)))
 (let ((?x113 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x113)))
 (let (($x178 (= ?x111 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x178 true)))
 (let (($x114 (= $x152 true)))
 (let ((?x173 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x173)))
 (let (($x153 (= ?x164 input.dst.llvm-%n)))
 (let (($x123 (= $x153 true)))
 (let (($x83 (= $x123 true)))
 (let (($x38 (= ?x164 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x108 (= $x38 true)))
 (let (($x84 (= $x108 true)))
 (let (($x100 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x56 (= $x100 true)))
 (let (($x102 (= $x56 true)))
 (let (($x105 (= $x102 true)))
 (let (($x6 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x85 (= $x6 true)))
 (let (($x141 (= $x85 true)))
 (let (($x140 (= $x141 true)))
 (let (($x162 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x34 (= $x162 true)))
 (let (($x75 (= $x34 true)))
 (let (($x95 (= $x75 true)))
 (let (($x131 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x103 (= $x131 true)))
 (let (($x171 (= $x103 true)))
 (let (($x136 (= $x171 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x74)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x71 $x60)))
 (let (($x72 (and $x59 $x64)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x86 $x72)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x39)))))))
 (let (($x58 (and $x61 $x67)))
 (let (($x88 (= $x58 true)))
 (let (($x51 (= $x88 true)))
 (let (($x167 (= $x51 true)))
 (let (($x47 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x68 (= $x47 true)))
 (let (($x62 (= $x68 true)))
 (let (($x96 (= $x62 true)))
 (let ((?x55 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x55)))
 (let (($x138 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x138 true)))
 (let (($x33 (= $x13 true)))
 (let (($x53 (and $x33 $x96)))
 (let (($x98 (and $x53 $x167)))
 (let (($x119 (and $x98 $x136)))
 (let (($x156 (and $x119 $x95)))
 (let (($x174 (and $x156 $x140)))
 (let (($x27 (and $x174 $x105)))
 (let (($x106 (and $x27 $x84)))
 (let (($x133 (and $x106 $x83)))
 (let (($x172 (and $x133 $x114)))
 (let (($x18 (and $x172 $x46)))
 (let (($x200 (and $x18 $x198)))
 (let (($x246 (and $x200 $x245)))
 (let (($x82 (and $x246 $x120)))
 (let (($x20 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x121 (and $x20 $x82)))
 (let (($x24 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x79 (and $x24 $x121)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x183 (and $x10 $x79)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x195 (and $x14 $x183)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x146 (and $x48 $x195)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x157 (and $x31 $x146)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x169 (and $x29 $x157)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x66 (and $x12 $x169)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x210 (and $x40 $x66)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x190 (and $x50 $x210)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x97 (and $x19 $x190)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x135 (and $x57 $x97)))
 (let (($x193 (=> $x135 $x122)))
 (not $x193)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x234 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x134 (not $x234)))
 (let (($x211 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x217 (not $x211)))
 (let (($x94 (or $x217 $x134)))
 (let (($x150 (= $x94 true)))
 (let (($x122 (= $x150 true)))
 (let (($x256 (forall ((input.ind-%var1037X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1037X)))
 (=> $x107 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1037X) (_ bv0 32)))))
 ))
 (let (($x250 (forall ((input.ind-%var1036X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1036X)))
 (= $x107 false)))
 ))
 (let (($x257 (and $x250 $x256)))
 (let (($x120 (= $x257 true)))
 (let (($x242 (forall ((input.ind-%var1029X (_ BitVec 32)) (input.ind-%var1031X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1029X input.ind-%var1031X)))
 (let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1029X)))
 (=> (and $x104 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1029X input.ind-%var1031X) (_ bv0 32))))))
 ))
 (let (($x227 (forall ((input.ind-%var1029X (_ BitVec 32)) (input.ind-%var1030X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1029X)))
 (=> $x104 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1029X input.ind-%var1030X) false))))
 ))
 (let (($x205 (forall ((input.ind-%var1028X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1028X)))
 (= $x78 false)))
 ))
 (let (($x244 (and (and $x205 $x227) $x242)))
 (let (($x245 (= $x244 true)))
 (let (($x202 (forall ((input.ind-%var1017X (_ BitVec 32)) (input.ind-%var1019X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1017X input.ind-%var1019X)))
 (let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1017X)))
 (=> (and $x104 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1017X input.ind-%var1019X) (_ bv0 32))))))
 ))
 (let (($x165 (forall ((input.ind-%var1017X (_ BitVec 32)) (input.ind-%var1018X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1017X)))
 (=> $x104 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1017X input.ind-%var1018X) false))))
 ))
 (let (($x117 (forall ((input.ind-%var1016X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1016X)))
 (= $x78 false)))
 ))
 (let (($x194 (and (and $x117 $x165) $x202)))
 (let (($x198 (= $x194 true)))
 (let (($x154 (forall ((input.ind-%var1007X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1007X)))
 (=> $x107 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1007X) (_ bv0 32)))))
 ))
 (let (($x148 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1006X)))
 (= $x107 false)))
 ))
 (let (($x155 (and $x148 $x154)))
 (let (($x46 (= $x155 true)))
 (let ((?x113 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x113)))
 (let (($x178 (= ?x111 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x178 true)))
 (let (($x114 (= $x152 true)))
 (let ((?x173 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x173)))
 (let (($x153 (= ?x164 input.dst.llvm-%n)))
 (let (($x123 (= $x153 true)))
 (let (($x83 (= $x123 true)))
 (let (($x38 (= ?x164 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x108 (= $x38 true)))
 (let (($x84 (= $x108 true)))
 (let (($x100 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x56 (= $x100 true)))
 (let (($x102 (= $x56 true)))
 (let (($x105 (= $x102 true)))
 (let (($x6 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x85 (= $x6 true)))
 (let (($x141 (= $x85 true)))
 (let (($x140 (= $x141 true)))
 (let (($x162 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x34 (= $x162 true)))
 (let (($x75 (= $x34 true)))
 (let (($x95 (= $x75 true)))
 (let (($x131 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x103 (= $x131 true)))
 (let (($x171 (= $x103 true)))
 (let (($x136 (= $x171 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x74)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x71 $x60)))
 (let (($x72 (and $x59 $x64)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x86 $x72)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x39)))))))
 (let (($x58 (and $x61 $x67)))
 (let (($x88 (= $x58 true)))
 (let (($x51 (= $x88 true)))
 (let (($x167 (= $x51 true)))
 (let (($x47 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x68 (= $x47 true)))
 (let (($x62 (= $x68 true)))
 (let (($x96 (= $x62 true)))
 (let ((?x55 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x55)))
 (let (($x138 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x138 true)))
 (let (($x33 (= $x13 true)))
 (let (($x53 (and $x33 $x96)))
 (let (($x98 (and $x53 $x167)))
 (let (($x119 (and $x98 $x136)))
 (let (($x156 (and $x119 $x95)))
 (let (($x174 (and $x156 $x140)))
 (let (($x27 (and $x174 $x105)))
 (let (($x106 (and $x27 $x84)))
 (let (($x133 (and $x106 $x83)))
 (let (($x172 (and $x133 $x114)))
 (let (($x18 (and $x172 $x46)))
 (let (($x200 (and $x18 $x198)))
 (let (($x246 (and $x200 $x245)))
 (let (($x82 (and $x246 $x120)))
 (let (($x20 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x121 (and $x20 $x82)))
 (let (($x24 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x79 (and $x24 $x121)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x183 (and $x10 $x79)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x195 (and $x14 $x183)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x146 (and $x48 $x195)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x157 (and $x31 $x146)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x169 (and $x29 $x157)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x66 (and $x12 $x169)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x210 (and $x40 $x66)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x190 (and $x50 $x210)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x97 (and $x19 $x190)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x135 (and $x57 $x97)))
 (let (($x193 (=> $x135 $x122)))
 (not $x193)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 170 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x166 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x228 (bvmul ?x166 (_ bv4294967295 32))))
 (let ((?x229 (bvneg ?x228)))
 (let (($x207 (= ?x229 ?x206)))
 (let (($x220 (= $x207 true)))
 (let (($x112 (forall ((input.ind-%var1073X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1073X)))
 (=> $x78 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1073X) (_ bv0 32)))))
 ))
 (let (($x223 (forall ((input.ind-%var1072X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1072X)))
 (= $x78 false)))
 ))
 (let (($x144 (and $x223 $x112)))
 (let (($x204 (= $x144 true)))
 (let (($x115 (forall ((input.ind-%var1065X (_ BitVec 32)) (input.ind-%var1067X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1065X input.ind-%var1067X)))
 (let (($x169 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1065X)))
 (=> (and $x169 $x79) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1065X input.ind-%var1067X) (_ bv0 32))))))
 ))
 (let (($x139 (forall ((input.ind-%var1065X (_ BitVec 32)) (input.ind-%var1066X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1065X)))
 (=> $x169 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1065X input.ind-%var1066X) false))))
 ))
 (let (($x90 (forall ((input.ind-%var1064X (_ BitVec 32)) )(let (($x243 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1064X)))
 (= $x243 false)))
 ))
 (let (($x160 (and (and $x90 $x139) $x115)))
 (let (($x247 (= $x160 true)))
 (let (($x180 (forall ((input.ind-%var1053X (_ BitVec 32)) (input.ind-%var1055X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1053X input.ind-%var1055X)))
 (let (($x169 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1053X)))
 (=> (and $x169 $x79) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1053X input.ind-%var1055X) (_ bv0 32))))))
 ))
 (let (($x210 (forall ((input.ind-%var1053X (_ BitVec 32)) (input.ind-%var1054X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1053X)))
 (=> $x169 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1053X input.ind-%var1054X) false))))
 ))
 (let (($x246 (forall ((input.ind-%var1052X (_ BitVec 32)) )(let (($x243 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1052X)))
 (= $x243 false)))
 ))
 (let (($x49 (and (and $x246 $x210) $x180)))
 (let (($x145 (= $x49 true)))
 (let (($x202 (forall ((input.ind-%var1043X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1043X)))
 (=> $x78 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1043X) (_ bv0 32)))))
 ))
 (let (($x104 (forall ((input.ind-%var1042X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1042X)))
 (= $x78 false)))
 ))
 (let (($x194 (and $x104 $x202)))
 (let (($x198 (= $x194 true)))
 (let ((?x32 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x32)))
 (let (($x101 (= ?x148 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x143 (= $x101 true)))
 (let (($x118 (= $x143 true)))
 (let ((?x111 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x111)))
 (let (($x114 (= ?x178 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x114 true)))
 (let (($x151 (= $x172 true)))
 (let (($x153 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x123 (= $x153 true)))
 (let (($x83 (= $x123 true)))
 (let (($x133 (= $x83 true)))
 (let (($x38 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x108 (= $x38 true)))
 (let (($x84 (= $x108 true)))
 (let (($x106 (= $x84 true)))
 (let (($x56 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x102 (= $x56 true)))
 (let (($x105 (= $x102 true)))
 (let (($x27 (= $x105 true)))
 (let (($x85 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x141 (= $x85 true)))
 (let (($x140 (= $x141 true)))
 (let (($x174 (= $x140 true)))
 (let (($x34 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x75 (= $x34 true)))
 (let (($x95 (= $x75 true)))
 (let (($x156 (= $x95 true)))
 (let (($x103 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x171 (= $x103 true)))
 (let (($x136 (= $x171 true)))
 (let (($x119 (= $x136 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x64)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x70 $x59)))
 (let (($x67 (and $x74 $x72)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x8 $x67)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x161)))))))
 (let (($x88 (and $x71 $x58)))
 (let (($x51 (= $x88 true)))
 (let (($x167 (= $x51 true)))
 (let (($x98 (= $x167 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x55)))
 (let (($x47 (= ?x43 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x68 (= $x47 true)))
 (let (($x62 (= $x68 true)))
 (let (($x138 (= ?x43 input.dst.llvm-%n)))
 (let (($x13 (= $x138 true)))
 (let (($x33 (= $x13 true)))
 (let (($x96 (and $x33 $x62)))
 (let (($x110 (and $x96 $x98)))
 (let (($x162 (and $x110 $x119)))
 (let (($x6 (and $x162 $x156)))
 (let (($x100 (and $x6 $x174)))
 (let (($x173 (and $x100 $x27)))
 (let (($x142 (and $x173 $x106)))
 (let (($x113 (and $x142 $x133)))
 (let (($x107 (and $x113 $x151)))
 (let (($x154 (and $x107 $x118)))
 (let (($x200 (and $x154 $x198)))
 (let (($x36 (and $x200 $x145)))
 (let (($x248 (and $x36 $x247)))
 (let (($x225 (and $x248 $x204)))
 (let (($x129 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x42 (and (not $x129) $x225)))
 (let (($x24 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x126 (and $x24 $x42)))
 (let (($x10 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x182 (and $x10 $x126)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x224 (and $x23 $x182)))
 (let (($x147 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x226 (and $x147 $x224)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x249 (and $x7 $x226)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x254 (and $x9 $x249)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x237 (and $x15 $x254)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x238 (and $x50 $x237)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x241 (and $x11 $x238)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x252 (and $x40 $x241)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x255 (and $x37 $x252)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x232 (and $x65 $x255)))
 (let (($x213 (=> $x232 $x220)))
 (not $x213)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x166 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x228 (bvmul ?x166 (_ bv4294967295 32))))
 (let ((?x229 (bvneg ?x228)))
 (let (($x207 (= ?x229 ?x206)))
 (let (($x220 (= $x207 true)))
 (let (($x112 (forall ((input.ind-%var1073X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1073X)))
 (=> $x78 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1073X) (_ bv0 32)))))
 ))
 (let (($x223 (forall ((input.ind-%var1072X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1072X)))
 (= $x78 false)))
 ))
 (let (($x144 (and $x223 $x112)))
 (let (($x204 (= $x144 true)))
 (let (($x115 (forall ((input.ind-%var1065X (_ BitVec 32)) (input.ind-%var1067X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1065X input.ind-%var1067X)))
 (let (($x169 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1065X)))
 (=> (and $x169 $x79) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1065X input.ind-%var1067X) (_ bv0 32))))))
 ))
 (let (($x139 (forall ((input.ind-%var1065X (_ BitVec 32)) (input.ind-%var1066X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1065X)))
 (=> $x169 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1065X input.ind-%var1066X) false))))
 ))
 (let (($x90 (forall ((input.ind-%var1064X (_ BitVec 32)) )(let (($x243 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1064X)))
 (= $x243 false)))
 ))
 (let (($x160 (and (and $x90 $x139) $x115)))
 (let (($x247 (= $x160 true)))
 (let (($x180 (forall ((input.ind-%var1053X (_ BitVec 32)) (input.ind-%var1055X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1053X input.ind-%var1055X)))
 (let (($x169 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1053X)))
 (=> (and $x169 $x79) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1053X input.ind-%var1055X) (_ bv0 32))))))
 ))
 (let (($x210 (forall ((input.ind-%var1053X (_ BitVec 32)) (input.ind-%var1054X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1053X)))
 (=> $x169 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1053X input.ind-%var1054X) false))))
 ))
 (let (($x246 (forall ((input.ind-%var1052X (_ BitVec 32)) )(let (($x243 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1052X)))
 (= $x243 false)))
 ))
 (let (($x49 (and (and $x246 $x210) $x180)))
 (let (($x145 (= $x49 true)))
 (let (($x202 (forall ((input.ind-%var1043X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1043X)))
 (=> $x78 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1043X) (_ bv0 32)))))
 ))
 (let (($x104 (forall ((input.ind-%var1042X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1042X)))
 (= $x78 false)))
 ))
 (let (($x194 (and $x104 $x202)))
 (let (($x198 (= $x194 true)))
 (let ((?x32 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x32)))
 (let (($x101 (= ?x148 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x143 (= $x101 true)))
 (let (($x118 (= $x143 true)))
 (let ((?x111 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x111)))
 (let (($x114 (= ?x178 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x114 true)))
 (let (($x151 (= $x172 true)))
 (let (($x153 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x123 (= $x153 true)))
 (let (($x83 (= $x123 true)))
 (let (($x133 (= $x83 true)))
 (let (($x38 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x108 (= $x38 true)))
 (let (($x84 (= $x108 true)))
 (let (($x106 (= $x84 true)))
 (let (($x56 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x102 (= $x56 true)))
 (let (($x105 (= $x102 true)))
 (let (($x27 (= $x105 true)))
 (let (($x85 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x141 (= $x85 true)))
 (let (($x140 (= $x141 true)))
 (let (($x174 (= $x140 true)))
 (let (($x34 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x75 (= $x34 true)))
 (let (($x95 (= $x75 true)))
 (let (($x156 (= $x95 true)))
 (let (($x103 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x171 (= $x103 true)))
 (let (($x136 (= $x171 true)))
 (let (($x119 (= $x136 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x64)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x70 $x59)))
 (let (($x67 (and $x74 $x72)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x8 $x67)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x161)))))))
 (let (($x88 (and $x71 $x58)))
 (let (($x51 (= $x88 true)))
 (let (($x167 (= $x51 true)))
 (let (($x98 (= $x167 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x55)))
 (let (($x47 (= ?x43 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x68 (= $x47 true)))
 (let (($x62 (= $x68 true)))
 (let (($x138 (= ?x43 input.dst.llvm-%n)))
 (let (($x13 (= $x138 true)))
 (let (($x33 (= $x13 true)))
 (let (($x96 (and $x33 $x62)))
 (let (($x110 (and $x96 $x98)))
 (let (($x162 (and $x110 $x119)))
 (let (($x6 (and $x162 $x156)))
 (let (($x100 (and $x6 $x174)))
 (let (($x173 (and $x100 $x27)))
 (let (($x142 (and $x173 $x106)))
 (let (($x113 (and $x142 $x133)))
 (let (($x107 (and $x113 $x151)))
 (let (($x154 (and $x107 $x118)))
 (let (($x200 (and $x154 $x198)))
 (let (($x36 (and $x200 $x145)))
 (let (($x248 (and $x36 $x247)))
 (let (($x225 (and $x248 $x204)))
 (let (($x129 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x42 (and (not $x129) $x225)))
 (let (($x24 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x126 (and $x24 $x42)))
 (let (($x10 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x182 (and $x10 $x126)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x224 (and $x23 $x182)))
 (let (($x147 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x226 (and $x147 $x224)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x249 (and $x7 $x226)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x254 (and $x9 $x249)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x237 (and $x15 $x254)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x238 (and $x50 $x237)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x241 (and $x11 $x238)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x252 (and $x40 $x241)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x255 (and $x37 $x252)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x232 (and $x65 $x255)))
 (let (($x213 (=> $x232 $x220)))
 (not $x213)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x128 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x231 (bvmul ?x170 (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x231)))
 (let (($x124 (= ?x253 ?x128)))
 (let (($x187 (= $x124 true)))
 (let (($x177 (forall ((input.ind-%var1109X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1109X)))
 (=> $x165 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1109X) (_ bv0 32)))))
 ))
 (let (($x211 (forall ((input.ind-%var1108X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1108X)))
 (= $x165 false)))
 ))
 (let (($x209 (and $x211 $x177)))
 (let (($x244 (= $x209 true)))
 (let (($x46 (forall ((input.ind-%var1101X (_ BitVec 32)) (input.ind-%var1103X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1101X input.ind-%var1103X)))
 (let (($x225 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1101X)))
 (=> (and $x225 $x248) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1101X input.ind-%var1103X) (_ bv0 32))))))
 ))
 (let (($x109 (forall ((input.ind-%var1101X (_ BitVec 32)) (input.ind-%var1102X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1101X)))
 (=> $x225 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1101X input.ind-%var1102X) false))))
 ))
 (let (($x53 (forall ((input.ind-%var1100X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1100X)))
 (= $x193 false)))
 ))
 (let (($x216 (and (and $x53 $x109) $x46)))
 (let (($x92 (= $x216 true)))
 (let (($x166 (forall ((input.ind-%var1089X (_ BitVec 32)) (input.ind-%var1091X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1089X input.ind-%var1091X)))
 (let (($x225 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1089X)))
 (=> (and $x225 $x248) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1089X input.ind-%var1091X) (_ bv0 32))))))
 ))
 (let (($x126 (forall ((input.ind-%var1089X (_ BitVec 32)) (input.ind-%var1090X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1089X)))
 (=> $x225 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1089X input.ind-%var1090X) false))))
 ))
 (let (($x36 (forall ((input.ind-%var1088X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1088X)))
 (= $x193 false)))
 ))
 (let (($x229 (and (and $x36 $x126) $x166)))
 (let (($x206 (= $x229 true)))
 (let (($x66 (forall ((input.ind-%var1079X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1079X)))
 (=> $x165 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1079X) (_ bv0 32)))))
 ))
 (let (($x194 (forall ((input.ind-%var1078X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1078X)))
 (= $x165 false)))
 ))
 (let (($x210 (and $x194 $x66)))
 (let (($x5 (= $x210 true)))
 (let ((?x148 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x148)))
 (let (($x143 (= ?x101 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x143 true)))
 (let (($x154 (= $x118 true)))
 (let (($x114 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x172 (= $x114 true)))
 (let (($x151 (= $x172 true)))
 (let (($x107 (= $x151 true)))
 (let (($x133 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x113 (= $x133 true)))
 (let (($x111 (= $x113 true)))
 (let (($x178 (= $x111 true)))
 (let (($x106 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x142 (= $x106 true)))
 (let (($x153 (= $x142 true)))
 (let (($x123 (= $x153 true)))
 (let (($x173 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x164 (= $x173 true)))
 (let (($x38 (= $x164 true)))
 (let (($x108 (= $x38 true)))
 (let (($x100 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (= $x100 true)))
 (let (($x102 (= $x56 true)))
 (let (($x105 (= $x102 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x162)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x131 $x136)))
 (let (($x75 (and $x119 $x34)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x70 $x75)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x67)))))))
 (let (($x156 (and $x110 $x95)))
 (let (($x6 (= $x156 true)))
 (let (($x85 (= $x6 true)))
 (let (($x141 (= $x85 true)))
 (let (($x161 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x80 (= $x161 true)))
 (let (($x116 (= $x80 true)))
 (let (($x61 (= $x116 true)))
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x47)))
 (let (($x44 (= ?x68 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x39 (= $x44 true)))
 (let (($x73 (= $x39 true)))
 (let (($x96 (= ?x68 input.dst.llvm-%n)))
 (let (($x26 (= $x96 true)))
 (let (($x30 (= $x26 true)))
 (let ((?x55 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x55)))
 (let (($x138 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x138 true)))
 (let (($x33 (= $x13 true)))
 (let (($x86 (and $x33 $x30)))
 (let (($x16 (and $x86 $x73)))
 (let (($x25 (and $x16 $x61)))
 (let (($x140 (and $x25 $x141)))
 (let (($x27 (and $x140 $x105)))
 (let (($x84 (and $x27 $x108)))
 (let (($x83 (and $x84 $x123)))
 (let (($x152 (and $x83 $x178)))
 (let (($x32 (and $x152 $x107)))
 (let (($x18 (and $x32 $x154)))
 (let (($x122 (and $x18 $x5)))
 (let (($x207 (and $x122 $x206)))
 (let (($x117 (and $x207 $x92)))
 (let (($x87 (and $x117 $x244)))
 (let (($x129 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x195 (and (not $x129) $x87)))
 (let (($x24 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x134 (and $x24 $x195)))
 (let (($x10 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x257 (and $x10 $x134)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x146 (and $x23 $x257)))
 (let (($x147 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x181 (and $x147 $x146)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x137 (and $x7 $x181)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x77 (and $x9 $x137)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x97 (and $x12 $x77)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x135 (and $x45 $x97)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x94 (and $x40 $x135)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x149 (and $x11 $x94)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x125 (and $x65 $x149)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x239 (and $x54 $x125)))
 (let (($x251 (=> $x239 $x187)))
 (not $x251)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x128 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x231 (bvmul ?x170 (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x231)))
 (let (($x124 (= ?x253 ?x128)))
 (let (($x187 (= $x124 true)))
 (let (($x177 (forall ((input.ind-%var1109X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1109X)))
 (=> $x165 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1109X) (_ bv0 32)))))
 ))
 (let (($x211 (forall ((input.ind-%var1108X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1108X)))
 (= $x165 false)))
 ))
 (let (($x209 (and $x211 $x177)))
 (let (($x244 (= $x209 true)))
 (let (($x46 (forall ((input.ind-%var1101X (_ BitVec 32)) (input.ind-%var1103X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1101X input.ind-%var1103X)))
 (let (($x225 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1101X)))
 (=> (and $x225 $x248) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1101X input.ind-%var1103X) (_ bv0 32))))))
 ))
 (let (($x109 (forall ((input.ind-%var1101X (_ BitVec 32)) (input.ind-%var1102X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1101X)))
 (=> $x225 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1101X input.ind-%var1102X) false))))
 ))
 (let (($x53 (forall ((input.ind-%var1100X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1100X)))
 (= $x193 false)))
 ))
 (let (($x216 (and (and $x53 $x109) $x46)))
 (let (($x92 (= $x216 true)))
 (let (($x166 (forall ((input.ind-%var1089X (_ BitVec 32)) (input.ind-%var1091X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1089X input.ind-%var1091X)))
 (let (($x225 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1089X)))
 (=> (and $x225 $x248) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1089X input.ind-%var1091X) (_ bv0 32))))))
 ))
 (let (($x126 (forall ((input.ind-%var1089X (_ BitVec 32)) (input.ind-%var1090X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1089X)))
 (=> $x225 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1089X input.ind-%var1090X) false))))
 ))
 (let (($x36 (forall ((input.ind-%var1088X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1088X)))
 (= $x193 false)))
 ))
 (let (($x229 (and (and $x36 $x126) $x166)))
 (let (($x206 (= $x229 true)))
 (let (($x66 (forall ((input.ind-%var1079X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1079X)))
 (=> $x165 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1079X) (_ bv0 32)))))
 ))
 (let (($x194 (forall ((input.ind-%var1078X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1078X)))
 (= $x165 false)))
 ))
 (let (($x210 (and $x194 $x66)))
 (let (($x5 (= $x210 true)))
 (let ((?x148 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x148)))
 (let (($x143 (= ?x101 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x143 true)))
 (let (($x154 (= $x118 true)))
 (let (($x114 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x172 (= $x114 true)))
 (let (($x151 (= $x172 true)))
 (let (($x107 (= $x151 true)))
 (let (($x133 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x113 (= $x133 true)))
 (let (($x111 (= $x113 true)))
 (let (($x178 (= $x111 true)))
 (let (($x106 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x142 (= $x106 true)))
 (let (($x153 (= $x142 true)))
 (let (($x123 (= $x153 true)))
 (let (($x173 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x164 (= $x173 true)))
 (let (($x38 (= $x164 true)))
 (let (($x108 (= $x38 true)))
 (let (($x100 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (= $x100 true)))
 (let (($x102 (= $x56 true)))
 (let (($x105 (= $x102 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x162)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x131 $x136)))
 (let (($x75 (and $x119 $x34)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x70 $x75)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x67)))))))
 (let (($x156 (and $x110 $x95)))
 (let (($x6 (= $x156 true)))
 (let (($x85 (= $x6 true)))
 (let (($x141 (= $x85 true)))
 (let (($x161 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x80 (= $x161 true)))
 (let (($x116 (= $x80 true)))
 (let (($x61 (= $x116 true)))
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x47)))
 (let (($x44 (= ?x68 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x39 (= $x44 true)))
 (let (($x73 (= $x39 true)))
 (let (($x96 (= ?x68 input.dst.llvm-%n)))
 (let (($x26 (= $x96 true)))
 (let (($x30 (= $x26 true)))
 (let ((?x55 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x55)))
 (let (($x138 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x138 true)))
 (let (($x33 (= $x13 true)))
 (let (($x86 (and $x33 $x30)))
 (let (($x16 (and $x86 $x73)))
 (let (($x25 (and $x16 $x61)))
 (let (($x140 (and $x25 $x141)))
 (let (($x27 (and $x140 $x105)))
 (let (($x84 (and $x27 $x108)))
 (let (($x83 (and $x84 $x123)))
 (let (($x152 (and $x83 $x178)))
 (let (($x32 (and $x152 $x107)))
 (let (($x18 (and $x32 $x154)))
 (let (($x122 (and $x18 $x5)))
 (let (($x207 (and $x122 $x206)))
 (let (($x117 (and $x207 $x92)))
 (let (($x87 (and $x117 $x244)))
 (let (($x129 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x195 (and (not $x129) $x87)))
 (let (($x24 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x134 (and $x24 $x195)))
 (let (($x10 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x257 (and $x10 $x134)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x146 (and $x23 $x257)))
 (let (($x147 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x181 (and $x147 $x146)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x137 (and $x7 $x181)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x77 (and $x9 $x137)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x97 (and $x12 $x77)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x135 (and $x45 $x97)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x94 (and $x40 $x135)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x149 (and $x11 $x94)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x125 (and $x65 $x149)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x239 (and $x54 $x125)))
 (let (($x251 (=> $x239 $x187)))
 (not $x251)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 176 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x132 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x250 (bvuge ?x132 (_ bv1 32))))
 (let (($x256 (= $x250 true)))
 (let (($x155 (= $x256 true)))
 (let (($x130 (forall ((input.ind-%var1145X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1145X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1145X) (_ bv0 32)))))
 ))
 (let (($x249 (forall ((input.ind-%var1144X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1144X)))
 (= $x194 false)))
 ))
 (let (($x242 (and $x249 $x130)))
 (let (($x49 (= $x242 true)))
 (let (($x89 (forall ((input.ind-%var1137X (_ BitVec 32)) (input.ind-%var1139X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1137X input.ind-%var1139X)))
 (let (($x244 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1137X)))
 (=> (and $x244 $x92) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1137X input.ind-%var1139X) (_ bv0 32))))))
 ))
 (let (($x198 (forall ((input.ind-%var1137X (_ BitVec 32)) (input.ind-%var1138X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1137X)))
 (=> $x244 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1137X input.ind-%var1138X) false))))
 ))
 (let (($x120 (forall ((input.ind-%var1136X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1136X)))
 (= $x252 false)))
 ))
 (let (($x175 (and (and $x120 $x198) $x89)))
 (let (($x203 (= $x175 true)))
 (let (($x239 (forall ((input.ind-%var1125X (_ BitVec 32)) (input.ind-%var1127X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1125X input.ind-%var1127X)))
 (let (($x244 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1125X)))
 (=> (and $x244 $x92) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1125X input.ind-%var1127X) (_ bv0 32))))))
 ))
 (let (($x195 (forall ((input.ind-%var1125X (_ BitVec 32)) (input.ind-%var1126X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1125X)))
 (=> $x244 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1125X input.ind-%var1126X) false))))
 ))
 (let (($x206 (forall ((input.ind-%var1124X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1124X)))
 (= $x252 false)))
 ))
 (let (($x231 (and (and $x206 $x195) $x239)))
 (let (($x253 (= $x231 true)))
 (let (($x204 (forall ((input.ind-%var1115X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1115X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1115X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var1114X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1114X)))
 (= $x194 false)))
 ))
 (let (($x42 (and $x66 $x204)))
 (let (($x126 (= $x42 true)))
 (let ((?x148 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x148)))
 (let (($x143 (= ?x101 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x143 true)))
 (let (($x154 (= $x118 true)))
 (let (($x114 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x172 (= $x114 true)))
 (let (($x151 (= $x172 true)))
 (let (($x107 (= $x151 true)))
 (let (($x133 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x113 (= $x133 true)))
 (let (($x111 (= $x113 true)))
 (let (($x178 (= $x111 true)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x164)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x56 $x27)))
 (let (($x108 (and $x173 $x38)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x171 $x108)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x156)))))))
 (let (($x106 (and $x100 $x84)))
 (let (($x142 (= $x106 true)))
 (let (($x153 (= $x142 true)))
 (let (($x123 (= $x153 true)))
 (let (($x88 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x51 (= $x88 true)))
 (let (($x167 (= $x51 true)))
 (let (($x110 (= $x167 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x72 (= $x64 true)))
 (let (($x74 (= $x72 true)))
 (let (($x67 (= $x74 true)))
 (let (($x25 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x76 (= $x25 true)))
 (let (($x60 (= $x76 true)))
 (let (($x98 (= $x60 true)))
 (let ((?x30 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x30)))
 (let (($x161 (= ?x86 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x80 (= $x161 true)))
 (let (($x116 (= $x80 true)))
 (let (($x44 (= ?x86 input.dst.llvm-%n)))
 (let (($x39 (= $x44 true)))
 (let (($x73 (= $x39 true)))
 (let ((?x13 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x13)))
 (let (($x68 (= ?x33 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x62 (= $x68 true)))
 (let (($x96 (= $x62 true)))
 (let (($x240 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x81 (= $x240 true)))
 (let (($x55 (= $x81 true)))
 (let (($x43 (= $x55 true)))
 (let (($x26 (and $x43 $x96)))
 (let (($x16 (and $x26 $x73)))
 (let (($x61 (and $x16 $x116)))
 (let (($x59 (and $x61 $x98)))
 (let (($x58 (and $x59 $x67)))
 (let (($x8 (and $x58 $x110)))
 (let (($x83 (and $x8 $x123)))
 (let (($x152 (and $x83 $x178)))
 (let (($x32 (and $x152 $x107)))
 (let (($x18 (and $x32 $x154)))
 (let (($x228 (and $x18 $x126)))
 (let (($x128 (and $x228 $x253)))
 (let (($x189 (and $x128 $x203)))
 (let (($x200 (and $x189 $x49)))
 (let (($x20 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x112 (and (not $x20) $x200)))
 (let (($x10 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x238 (and $x10 $x112)))
 (let (($x23 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x159 (and $x23 $x238)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x144 (and $x35 $x159)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x158 (and $x48 $x144)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x183 (and $x31 $x158)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x190 (and $x29 $x183)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x224 (and $x15 $x190)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x226 (and $x50 $x224)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x241 (and $x19 $x226)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x199 (and $x37 $x241)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x234 (and $x41 $x199)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x227 (and $x71 $x234)))
 (let (($x201 (=> $x227 $x155)))
 (not $x201)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x132 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x250 (bvuge ?x132 (_ bv1 32))))
 (let (($x256 (= $x250 true)))
 (let (($x155 (= $x256 true)))
 (let (($x130 (forall ((input.ind-%var1145X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1145X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1145X) (_ bv0 32)))))
 ))
 (let (($x249 (forall ((input.ind-%var1144X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1144X)))
 (= $x194 false)))
 ))
 (let (($x242 (and $x249 $x130)))
 (let (($x49 (= $x242 true)))
 (let (($x89 (forall ((input.ind-%var1137X (_ BitVec 32)) (input.ind-%var1139X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1137X input.ind-%var1139X)))
 (let (($x244 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1137X)))
 (=> (and $x244 $x92) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1137X input.ind-%var1139X) (_ bv0 32))))))
 ))
 (let (($x198 (forall ((input.ind-%var1137X (_ BitVec 32)) (input.ind-%var1138X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1137X)))
 (=> $x244 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1137X input.ind-%var1138X) false))))
 ))
 (let (($x120 (forall ((input.ind-%var1136X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1136X)))
 (= $x252 false)))
 ))
 (let (($x175 (and (and $x120 $x198) $x89)))
 (let (($x203 (= $x175 true)))
 (let (($x239 (forall ((input.ind-%var1125X (_ BitVec 32)) (input.ind-%var1127X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1125X input.ind-%var1127X)))
 (let (($x244 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1125X)))
 (=> (and $x244 $x92) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1125X input.ind-%var1127X) (_ bv0 32))))))
 ))
 (let (($x195 (forall ((input.ind-%var1125X (_ BitVec 32)) (input.ind-%var1126X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1125X)))
 (=> $x244 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1125X input.ind-%var1126X) false))))
 ))
 (let (($x206 (forall ((input.ind-%var1124X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1124X)))
 (= $x252 false)))
 ))
 (let (($x231 (and (and $x206 $x195) $x239)))
 (let (($x253 (= $x231 true)))
 (let (($x204 (forall ((input.ind-%var1115X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1115X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1115X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var1114X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1114X)))
 (= $x194 false)))
 ))
 (let (($x42 (and $x66 $x204)))
 (let (($x126 (= $x42 true)))
 (let ((?x148 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x148)))
 (let (($x143 (= ?x101 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x143 true)))
 (let (($x154 (= $x118 true)))
 (let (($x114 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x172 (= $x114 true)))
 (let (($x151 (= $x172 true)))
 (let (($x107 (= $x151 true)))
 (let (($x133 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x113 (= $x133 true)))
 (let (($x111 (= $x113 true)))
 (let (($x178 (= $x111 true)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x164)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x56 $x27)))
 (let (($x108 (and $x173 $x38)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x171 $x108)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x156)))))))
 (let (($x106 (and $x100 $x84)))
 (let (($x142 (= $x106 true)))
 (let (($x153 (= $x142 true)))
 (let (($x123 (= $x153 true)))
 (let (($x88 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x51 (= $x88 true)))
 (let (($x167 (= $x51 true)))
 (let (($x110 (= $x167 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x72 (= $x64 true)))
 (let (($x74 (= $x72 true)))
 (let (($x67 (= $x74 true)))
 (let (($x25 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x76 (= $x25 true)))
 (let (($x60 (= $x76 true)))
 (let (($x98 (= $x60 true)))
 (let ((?x30 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x30)))
 (let (($x161 (= ?x86 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x80 (= $x161 true)))
 (let (($x116 (= $x80 true)))
 (let (($x44 (= ?x86 input.dst.llvm-%n)))
 (let (($x39 (= $x44 true)))
 (let (($x73 (= $x39 true)))
 (let ((?x13 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x13)))
 (let (($x68 (= ?x33 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x62 (= $x68 true)))
 (let (($x96 (= $x62 true)))
 (let (($x240 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x81 (= $x240 true)))
 (let (($x55 (= $x81 true)))
 (let (($x43 (= $x55 true)))
 (let (($x26 (and $x43 $x96)))
 (let (($x16 (and $x26 $x73)))
 (let (($x61 (and $x16 $x116)))
 (let (($x59 (and $x61 $x98)))
 (let (($x58 (and $x59 $x67)))
 (let (($x8 (and $x58 $x110)))
 (let (($x83 (and $x8 $x123)))
 (let (($x152 (and $x83 $x178)))
 (let (($x32 (and $x152 $x107)))
 (let (($x18 (and $x32 $x154)))
 (let (($x228 (and $x18 $x126)))
 (let (($x128 (and $x228 $x253)))
 (let (($x189 (and $x128 $x203)))
 (let (($x200 (and $x189 $x49)))
 (let (($x20 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x112 (and (not $x20) $x200)))
 (let (($x10 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x238 (and $x10 $x112)))
 (let (($x23 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x159 (and $x23 $x238)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x144 (and $x35 $x159)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x158 (and $x48 $x144)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x183 (and $x31 $x158)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x190 (and $x29 $x183)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x224 (and $x15 $x190)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x226 (and $x50 $x224)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x241 (and $x19 $x226)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x199 (and $x37 $x241)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x234 (and $x41 $x199)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x227 (and $x71 $x234)))
 (let (($x201 (=> $x227 $x155)))
 (not $x201)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 174 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x139 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x78 (bvsge ?x139 (_ bv1 32))))
 (let (($x188 (= $x78 true)))
 (let (($x213 (= $x188 true)))
 (let (($x166 (forall ((input.ind-%var1181X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1181X)))
 (=> $x66 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1181X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var1180X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1180X)))
 (= $x66 false)))
 ))
 (let (($x5 (and $x121 $x166)))
 (let (($x247 (= $x5 true)))
 (let (($x243 (forall ((input.ind-%var1173X (_ BitVec 32)) (input.ind-%var1175X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1173X input.ind-%var1175X)))
 (let (($x49 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1173X)))
 (=> (and $x49 $x203) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1173X input.ind-%var1175X) (_ bv0 32))))))
 ))
 (let (($x207 (forall ((input.ind-%var1173X (_ BitVec 32)) (input.ind-%var1174X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1173X)))
 (=> $x49 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1173X input.ind-%var1174X) false))))
 ))
 (let (($x245 (forall ((input.ind-%var1172X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1172X)))
 (= $x94 false)))
 ))
 (let (($x79 (and (and $x245 $x207) $x243)))
 (let (($x36 (= $x79 true)))
 (let (($x227 (forall ((input.ind-%var1161X (_ BitVec 32)) (input.ind-%var1163X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1161X input.ind-%var1163X)))
 (let (($x49 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1161X)))
 (=> (and $x49 $x203) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1161X input.ind-%var1163X) (_ bv0 32))))))
 ))
 (let (($x112 (forall ((input.ind-%var1161X (_ BitVec 32)) (input.ind-%var1162X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1161X)))
 (=> $x49 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1161X input.ind-%var1162X) false))))
 ))
 (let (($x253 (forall ((input.ind-%var1160X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1160X)))
 (= $x94 false)))
 ))
 (let (($x250 (and (and $x253 $x112) $x227)))
 (let (($x256 (= $x250 true)))
 (let (($x209 (forall ((input.ind-%var1151X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1151X)))
 (=> $x66 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1151X) (_ bv0 32)))))
 ))
 (let (($x204 (forall ((input.ind-%var1150X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1150X)))
 (= $x66 false)))
 ))
 (let (($x87 (and $x204 $x209)))
 (let (($x195 (= $x87 true)))
 (let ((?x148 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x148)))
 (let (($x143 (= ?x101 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x143 true)))
 (let (($x154 (= $x118 true)))
 (let (($x114 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x172 (= $x114 true)))
 (let (($x151 (= $x172 true)))
 (let (($x107 (= $x151 true)))
 (let (($x133 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x113 (= $x133 true)))
 (let (($x111 (= $x113 true)))
 (let (($x178 (= $x111 true)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x164)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x56 $x27)))
 (let (($x108 (and $x173 $x38)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x119 $x108)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x6)))))))
 (let (($x106 (and $x171 $x84)))
 (let (($x142 (= $x106 true)))
 (let (($x153 (= $x142 true)))
 (let (($x123 (= $x153 true)))
 (let (($x67 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x58 (= $x67 true)))
 (let (($x88 (= $x58 true)))
 (let (($x51 (= $x88 true)))
 (let (($x98 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x59 (= $x98 true)))
 (let (($x64 (= $x59 true)))
 (let (($x72 (= $x64 true)))
 (let (($x116 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x61 (= $x116 true)))
 (let (($x25 (= $x61 true)))
 (let (($x76 (= $x25 true)))
 (let ((?x96 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x96)))
 (let (($x73 (= ?x26 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x16 (= $x73 true)))
 (let (($x161 (= $x16 true)))
 (let (($x30 (= ?x26 input.dst.llvm-%n)))
 (let (($x86 (= $x30 true)))
 (let (($x44 (= $x86 true)))
 (let ((?x69 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x69)))
 (let (($x33 (= ?x138 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x33 true)))
 (let (($x68 (= $x47 true)))
 (let (($x129 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x168 (= $x129 true)))
 (let (($x240 (= $x168 true)))
 (let (($x81 (= $x240 true)))
 (let (($x62 (and $x81 $x68)))
 (let (($x39 (and $x62 $x44)))
 (let (($x80 (and $x39 $x161)))
 (let (($x60 (and $x80 $x76)))
 (let (($x74 (and $x60 $x72)))
 (let (($x167 (and $x74 $x51)))
 (let (($x83 (and $x167 $x123)))
 (let (($x152 (and $x83 $x178)))
 (let (($x32 (and $x152 $x107)))
 (let (($x18 (and $x32 $x154)))
 (let (($x170 (and $x18 $x195)))
 (let (($x155 (and $x170 $x256)))
 (let (($x255 (and $x155 $x36)))
 (let (($x211 (and $x255 $x247)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x109 (and (not $x24) $x211)))
 (let (($x23 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x177 (and $x23 $x109)))
 (let (($x35 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x251 (and $x35 $x177)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x223 (and $x14 $x251)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x182 (and $x7 $x223)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x257 (and $x9 $x182)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x146 (and $x12 $x257)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x135 (and $x45 $x146)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x246 (and $x40 $x135)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x237 (and $x11 $x246)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x150 (and $x65 $x237)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x220 (and $x17 $x150)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x90 (and $x70 $x220)))
 (let (($x82 (=> $x90 $x213)))
 (not $x82)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x139 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x78 (bvsge ?x139 (_ bv1 32))))
 (let (($x188 (= $x78 true)))
 (let (($x213 (= $x188 true)))
 (let (($x166 (forall ((input.ind-%var1181X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1181X)))
 (=> $x66 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1181X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var1180X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1180X)))
 (= $x66 false)))
 ))
 (let (($x5 (and $x121 $x166)))
 (let (($x247 (= $x5 true)))
 (let (($x243 (forall ((input.ind-%var1173X (_ BitVec 32)) (input.ind-%var1175X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1173X input.ind-%var1175X)))
 (let (($x49 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1173X)))
 (=> (and $x49 $x203) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1173X input.ind-%var1175X) (_ bv0 32))))))
 ))
 (let (($x207 (forall ((input.ind-%var1173X (_ BitVec 32)) (input.ind-%var1174X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1173X)))
 (=> $x49 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1173X input.ind-%var1174X) false))))
 ))
 (let (($x245 (forall ((input.ind-%var1172X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1172X)))
 (= $x94 false)))
 ))
 (let (($x79 (and (and $x245 $x207) $x243)))
 (let (($x36 (= $x79 true)))
 (let (($x227 (forall ((input.ind-%var1161X (_ BitVec 32)) (input.ind-%var1163X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1161X input.ind-%var1163X)))
 (let (($x49 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1161X)))
 (=> (and $x49 $x203) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1161X input.ind-%var1163X) (_ bv0 32))))))
 ))
 (let (($x112 (forall ((input.ind-%var1161X (_ BitVec 32)) (input.ind-%var1162X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1161X)))
 (=> $x49 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1161X input.ind-%var1162X) false))))
 ))
 (let (($x253 (forall ((input.ind-%var1160X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1160X)))
 (= $x94 false)))
 ))
 (let (($x250 (and (and $x253 $x112) $x227)))
 (let (($x256 (= $x250 true)))
 (let (($x209 (forall ((input.ind-%var1151X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1151X)))
 (=> $x66 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1151X) (_ bv0 32)))))
 ))
 (let (($x204 (forall ((input.ind-%var1150X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1150X)))
 (= $x66 false)))
 ))
 (let (($x87 (and $x204 $x209)))
 (let (($x195 (= $x87 true)))
 (let ((?x148 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x148)))
 (let (($x143 (= ?x101 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x143 true)))
 (let (($x154 (= $x118 true)))
 (let (($x114 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x172 (= $x114 true)))
 (let (($x151 (= $x172 true)))
 (let (($x107 (= $x151 true)))
 (let (($x133 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x113 (= $x133 true)))
 (let (($x111 (= $x113 true)))
 (let (($x178 (= $x111 true)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x164)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x56 $x27)))
 (let (($x108 (and $x173 $x38)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x119 $x108)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x6)))))))
 (let (($x106 (and $x171 $x84)))
 (let (($x142 (= $x106 true)))
 (let (($x153 (= $x142 true)))
 (let (($x123 (= $x153 true)))
 (let (($x67 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x58 (= $x67 true)))
 (let (($x88 (= $x58 true)))
 (let (($x51 (= $x88 true)))
 (let (($x98 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x59 (= $x98 true)))
 (let (($x64 (= $x59 true)))
 (let (($x72 (= $x64 true)))
 (let (($x116 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x61 (= $x116 true)))
 (let (($x25 (= $x61 true)))
 (let (($x76 (= $x25 true)))
 (let ((?x96 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x96)))
 (let (($x73 (= ?x26 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x16 (= $x73 true)))
 (let (($x161 (= $x16 true)))
 (let (($x30 (= ?x26 input.dst.llvm-%n)))
 (let (($x86 (= $x30 true)))
 (let (($x44 (= $x86 true)))
 (let ((?x69 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x69)))
 (let (($x33 (= ?x138 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x33 true)))
 (let (($x68 (= $x47 true)))
 (let (($x129 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x168 (= $x129 true)))
 (let (($x240 (= $x168 true)))
 (let (($x81 (= $x240 true)))
 (let (($x62 (and $x81 $x68)))
 (let (($x39 (and $x62 $x44)))
 (let (($x80 (and $x39 $x161)))
 (let (($x60 (and $x80 $x76)))
 (let (($x74 (and $x60 $x72)))
 (let (($x167 (and $x74 $x51)))
 (let (($x83 (and $x167 $x123)))
 (let (($x152 (and $x83 $x178)))
 (let (($x32 (and $x152 $x107)))
 (let (($x18 (and $x32 $x154)))
 (let (($x170 (and $x18 $x195)))
 (let (($x155 (and $x170 $x256)))
 (let (($x255 (and $x155 $x36)))
 (let (($x211 (and $x255 $x247)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x109 (and (not $x24) $x211)))
 (let (($x23 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x177 (and $x23 $x109)))
 (let (($x35 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x251 (and $x35 $x177)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x223 (and $x14 $x251)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x182 (and $x7 $x223)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x257 (and $x9 $x182)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x146 (and $x12 $x257)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x135 (and $x45 $x146)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x246 (and $x40 $x135)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x237 (and $x11 $x246)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x150 (and $x65 $x237)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x220 (and $x17 $x150)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x90 (and $x70 $x220)))
 (let (($x82 (=> $x90 $x213)))
 (not $x82)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0139fde3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x210 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x165 (bvsge ?x210 (_ bv0 32))))
 (let (($x159 (= $x165 true)))
 (let (($x144 (= $x159 true)))
 (let (($x149 (forall ((input.ind-%var1241X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1241X)))
 (=> $x32 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1241X) (_ bv0 32)))))
 ))
 (let (($x194 (forall ((input.ind-%var1240X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1240X)))
 (= $x32 false)))
 ))
 (let (($x137 (and $x194 $x149)))
 (let (($x158 (= $x137 true)))
 (let (($x190 (forall ((input.ind-%var1233X (_ BitVec 32)) (input.ind-%var1235X (_ BitVec 32)) )(let (($x234 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1233X input.ind-%var1235X)))
 (let (($x245 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1233X)))
 (=> (and $x245 $x234) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1233X input.ind-%var1235X) (_ bv0 32))))))
 ))
 (let (($x82 (forall ((input.ind-%var1233X (_ BitVec 32)) (input.ind-%var1234X (_ BitVec 32)) )(let (($x245 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1233X)))
 (=> $x245 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1233X input.ind-%var1234X) false))))
 ))
 (let (($x150 (forall ((input.ind-%var1232X (_ BitVec 32)) )(let (($x253 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1232X)))
 (= $x253 false)))
 ))
 (let (($x228 (and (and $x150 $x82) $x190)))
 (let (($x128 (= $x228 true)))
 (let (($x251 (forall ((input.ind-%var1221X (_ BitVec 32)) (input.ind-%var1223X (_ BitVec 32)) )(let (($x234 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1221X input.ind-%var1223X)))
 (let (($x245 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1221X)))
 (=> (and $x245 $x234) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1221X input.ind-%var1223X) (_ bv0 32))))))
 ))
 (let (($x205 (forall ((input.ind-%var1221X (_ BitVec 32)) (input.ind-%var1222X (_ BitVec 32)) )(let (($x245 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1221X)))
 (=> $x245 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1221X input.ind-%var1222X) false))))
 ))
 (let (($x242 (forall ((input.ind-%var1220X (_ BitVec 32)) )(let (($x253 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1220X)))
 (= $x253 false)))
 ))
 (let (($x182 (and (and $x242 $x205) $x251)))
 (let (($x257 (= $x182 true)))
 (let (($x209 (forall ((input.ind-%var1211X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1211X)))
 (=> $x32 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1211X) (_ bv0 32)))))
 ))
 (let (($x118 (forall ((input.ind-%var1210X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1210X)))
 (= $x32 false)))
 ))
 (let (($x87 (and $x118 $x209)))
 (let (($x195 (= $x87 true)))
 (let ((?x133 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x133)))
 (let (($x111 (= ?x113 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x178 (= $x111 true)))
 (let (($x152 (= $x178 true)))
 (let ((?x108 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x108)))
 (let (($x142 (= ?x84 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x142 true)))
 (let (($x123 (= $x153 true)))
 (let (($x105 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x27 (= $x105 true)))
 (let (($x173 (= $x27 true)))
 (let (($x164 (= $x173 true)))
 (let (($x100 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x171 (= $x100 true)))
 (let (($x136 (= $x171 true)))
 (let (($x119 (= $x136 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x103)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (and $x88 $x174)))
 (let (($x34 (and $x162 $x75)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x161 $x34)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x98)))))))
 (let (($x95 (and $x58 $x156)))
 (let (($x6 (= $x95 true)))
 (let (($x85 (= $x6 true)))
 (let (($x141 (= $x85 true)))
 (let (($x96 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x26 (= $x96 true)))
 (let (($x30 (= $x26 true)))
 (let (($x86 (= $x30 true)))
 (let ((?x81 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x81)))
 (let (($x33 (= ?x55 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x47 (= $x33 true)))
 (let (($x68 (= $x47 true)))
 (let (($x43 (= ?x55 input.dst.llvm-%n)))
 (let (($x69 (= $x43 true)))
 (let (($x138 (= $x69 true)))
 (let (($x20 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x169 (= $x20 true)))
 (let (($x129 (= $x169 true)))
 (let (($x168 (= $x129 true)))
 (let (($x13 (and $x168 $x138)))
 (let (($x62 (and $x13 $x68)))
 (let (($x44 (and $x62 $x86)))
 (let (($x140 (and $x44 $x141)))
 (let (($x56 (and $x140 $x119)))
 (let (($x38 (and $x56 $x164)))
 (let (($x83 (and $x38 $x123)))
 (let (($x114 (and $x83 $x152)))
 (let (($x170 (and $x114 $x195)))
 (let (($x146 (and $x170 $x257)))
 (let (($x120 (and $x146 $x128)))
 (let (($x89 (and $x120 $x158)))
 (let (($x10 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x181 (and (not $x10) $x89)))
 (let (($x35 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x201 (and $x35 $x181)))
 (let (($x14 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x99 (and $x14 $x201)))
 (let (($x147 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x104 (and $x147 $x99)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x77 (and $x31 $x104)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x239 (and $x29 $x77)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x126 (and $x15 $x239)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x216 (and $x50 $x126)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x249 (and $x19 $x216)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x224 (and $x37 $x249)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x198 (and $x41 $x224)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x130 (and $x57 $x198)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x131 (and $x110 $x130)))
 (let (($x226 (=> $x131 $x144)))
 (not $x226)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x210 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x165 (bvsge ?x210 (_ bv0 32))))
 (let (($x159 (= $x165 true)))
 (let (($x144 (= $x159 true)))
 (let (($x149 (forall ((input.ind-%var1241X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1241X)))
 (=> $x32 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1241X) (_ bv0 32)))))
 ))
 (let (($x194 (forall ((input.ind-%var1240X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1240X)))
 (= $x32 false)))
 ))
 (let (($x137 (and $x194 $x149)))
 (let (($x158 (= $x137 true)))
 (let (($x190 (forall ((input.ind-%var1233X (_ BitVec 32)) (input.ind-%var1235X (_ BitVec 32)) )(let (($x234 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1233X input.ind-%var1235X)))
 (let (($x245 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1233X)))
 (=> (and $x245 $x234) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1233X input.ind-%var1235X) (_ bv0 32))))))
 ))
 (let (($x82 (forall ((input.ind-%var1233X (_ BitVec 32)) (input.ind-%var1234X (_ BitVec 32)) )(let (($x245 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1233X)))
 (=> $x245 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1233X input.ind-%var1234X) false))))
 ))
 (let (($x150 (forall ((input.ind-%var1232X (_ BitVec 32)) )(let (($x253 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1232X)))
 (= $x253 false)))
 ))
 (let (($x228 (and (and $x150 $x82) $x190)))
 (let (($x128 (= $x228 true)))
 (let (($x251 (forall ((input.ind-%var1221X (_ BitVec 32)) (input.ind-%var1223X (_ BitVec 32)) )(let (($x234 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1221X input.ind-%var1223X)))
 (let (($x245 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1221X)))
 (=> (and $x245 $x234) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1221X input.ind-%var1223X) (_ bv0 32))))))
 ))
 (let (($x205 (forall ((input.ind-%var1221X (_ BitVec 32)) (input.ind-%var1222X (_ BitVec 32)) )(let (($x245 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1221X)))
 (=> $x245 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1221X input.ind-%var1222X) false))))
 ))
 (let (($x242 (forall ((input.ind-%var1220X (_ BitVec 32)) )(let (($x253 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1220X)))
 (= $x253 false)))
 ))
 (let (($x182 (and (and $x242 $x205) $x251)))
 (let (($x257 (= $x182 true)))
 (let (($x209 (forall ((input.ind-%var1211X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1211X)))
 (=> $x32 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1211X) (_ bv0 32)))))
 ))
 (let (($x118 (forall ((input.ind-%var1210X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1210X)))
 (= $x32 false)))
 ))
 (let (($x87 (and $x118 $x209)))
 (let (($x195 (= $x87 true)))
 (let ((?x133 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x133)))
 (let (($x111 (= ?x113 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x178 (= $x111 true)))
 (let (($x152 (= $x178 true)))
 (let ((?x108 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x108)))
 (let (($x142 (= ?x84 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x142 true)))
 (let (($x123 (= $x153 true)))
 (let (($x105 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x27 (= $x105 true)))
 (let (($x173 (= $x27 true)))
 (let (($x164 (= $x173 true)))
 (let (($x100 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x171 (= $x100 true)))
 (let (($x136 (= $x171 true)))
 (let (($x119 (= $x136 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x103)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (and $x88 $x174)))
 (let (($x34 (and $x162 $x75)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x161 $x34)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x98)))))))
 (let (($x95 (and $x58 $x156)))
 (let (($x6 (= $x95 true)))
 (let (($x85 (= $x6 true)))
 (let (($x141 (= $x85 true)))
 (let (($x96 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x26 (= $x96 true)))
 (let (($x30 (= $x26 true)))
 (let (($x86 (= $x30 true)))
 (let ((?x81 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x81)))
 (let (($x33 (= ?x55 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x47 (= $x33 true)))
 (let (($x68 (= $x47 true)))
 (let (($x43 (= ?x55 input.dst.llvm-%n)))
 (let (($x69 (= $x43 true)))
 (let (($x138 (= $x69 true)))
 (let (($x20 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x169 (= $x20 true)))
 (let (($x129 (= $x169 true)))
 (let (($x168 (= $x129 true)))
 (let (($x13 (and $x168 $x138)))
 (let (($x62 (and $x13 $x68)))
 (let (($x44 (and $x62 $x86)))
 (let (($x140 (and $x44 $x141)))
 (let (($x56 (and $x140 $x119)))
 (let (($x38 (and $x56 $x164)))
 (let (($x83 (and $x38 $x123)))
 (let (($x114 (and $x83 $x152)))
 (let (($x170 (and $x114 $x195)))
 (let (($x146 (and $x170 $x257)))
 (let (($x120 (and $x146 $x128)))
 (let (($x89 (and $x120 $x158)))
 (let (($x10 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x181 (and (not $x10) $x89)))
 (let (($x35 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x201 (and $x35 $x181)))
 (let (($x14 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x99 (and $x14 $x201)))
 (let (($x147 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x104 (and $x147 $x99)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x77 (and $x31 $x104)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x239 (and $x29 $x77)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x126 (and $x15 $x239)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x216 (and $x50 $x126)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x249 (and $x19 $x216)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x224 (and $x37 $x249)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x198 (and $x41 $x224)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x130 (and $x57 $x198)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x131 (and $x110 $x130)))
 (let (($x226 (=> $x131 $x144)))
 (not $x226)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000114)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000117)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000114)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000258)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000025b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000258)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x139 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (bvuge ?x139 (_ bv1 32))))
 (let (($x202 (= $x213 true)))
 (let (($x225 (= $x202 true)))
 (let (($x238 (forall ((input.ind-%var1301X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1301X)))
 (=> $x152 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1301X) (_ bv0 32)))))
 ))
 (let (($x204 (forall ((input.ind-%var1300X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1300X)))
 (= $x152 false)))
 ))
 (let (($x135 (and $x204 $x238)))
 (let (($x246 (= $x135 true)))
 (let (($x220 (forall ((input.ind-%var1293X (_ BitVec 32)) (input.ind-%var1295X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1293X input.ind-%var1295X)))
 (let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1293X)))
 (=> (and $x128 $x150) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1293X input.ind-%var1295X) (_ bv0 32))))))
 ))
 (let (($x175 (forall ((input.ind-%var1293X (_ BitVec 32)) (input.ind-%var1294X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1293X)))
 (=> $x128 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1293X input.ind-%var1294X) false))))
 ))
 (let (($x159 (forall ((input.ind-%var1292X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1292X)))
 (= $x207 false)))
 ))
 (let (($x172 (and (and $x159 $x175) $x220)))
 (let (($x151 (= $x172 true)))
 (let (($x216 (forall ((input.ind-%var1281X (_ BitVec 32)) (input.ind-%var1283X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1281X input.ind-%var1283X)))
 (let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1281X)))
 (=> (and $x128 $x150) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1281X input.ind-%var1283X) (_ bv0 32))))))
 ))
 (let (($x194 (forall ((input.ind-%var1281X (_ BitVec 32)) (input.ind-%var1282X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1281X)))
 (=> $x128 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1281X input.ind-%var1282X) false))))
 ))
 (let (($x121 (forall ((input.ind-%var1280X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1280X)))
 (= $x207 false)))
 ))
 (let (($x224 (and (and $x121 $x194) $x216)))
 (let (($x198 (= $x224 true)))
 (let (($x203 (forall ((input.ind-%var1271X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1271X)))
 (=> $x152 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1271X) (_ bv0 32)))))
 ))
 (let (($x143 (forall ((input.ind-%var1270X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1270X)))
 (= $x152 false)))
 ))
 (let (($x242 (and $x143 $x203)))
 (let (($x241 (= $x242 true)))
 (let ((?x106 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x106)))
 (let (($x153 (= ?x142 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x153 true)))
 (let (($x83 (= $x123 true)))
 (let (($x173 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x164 (= $x173 true)))
 (let (($x38 (= $x164 true)))
 (let (($x108 (= $x38 true)))
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (= $x119 true)))
 (let (($x102 (= $x56 true)))
 (let (($x105 (= $x102 true)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x34)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x167 $x103)))
 (let (($x95 (and $x75 $x156)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x61 $x95)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x72)))))))
 (let (($x85 (and $x51 $x6)))
 (let (($x141 (= $x85 true)))
 (let (($x140 (= $x141 true)))
 (let (($x100 (= $x140 true)))
 (let (($x96 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x26 (= $x96 true)))
 (let (($x30 (= $x26 true)))
 (let (($x86 (= $x30 true)))
 (let ((?x240 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x240)))
 (let (($x33 (= ?x81 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x47 (= $x33 true)))
 (let (($x68 (= $x47 true)))
 (let (($x43 (= ?x81 input.dst.llvm-%n)))
 (let (($x69 (= $x43 true)))
 (let (($x138 (= $x69 true)))
 (let ((?x24 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x24)))
 (let (($x169 (= ?x97 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x129 (= $x169 true)))
 (let (($x168 (= $x129 true)))
 (let (($x13 (and $x168 $x138)))
 (let (($x62 (and $x13 $x68)))
 (let (($x44 (and $x62 $x86)))
 (let (($x171 (and $x44 $x100)))
 (let (($x27 (and $x171 $x105)))
 (let (($x84 (and $x27 $x108)))
 (let (($x133 (and $x84 $x83)))
 (let (($x245 (and $x133 $x241)))
 (let (($x130 (and $x245 $x198)))
 (let (($x90 (and $x130 $x151)))
 (let (($x229 (and $x90 $x246)))
 (let (($x23 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x49 (and (not $x23) $x229)))
 (let (($x14 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x18 (and $x14 $x49)))
 (let (($x147 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x252 (and $x147 $x18)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x250 (and $x48 $x252)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x5 (and $x9 $x250)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x132 (and $x12 $x5)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x256 (and $x45 $x132)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x237 (and $x40 $x256)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x188 (and $x11 $x237)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x125 (and $x65 $x188)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x79 (and $x17 $x125)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x36 (and $x54 $x79)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x247 (and $x39 $x36)))
 (let (($x8 (=> $x247 $x225)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x139 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (bvuge ?x139 (_ bv1 32))))
 (let (($x202 (= $x213 true)))
 (let (($x225 (= $x202 true)))
 (let (($x238 (forall ((input.ind-%var1301X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1301X)))
 (=> $x152 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1301X) (_ bv0 32)))))
 ))
 (let (($x204 (forall ((input.ind-%var1300X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1300X)))
 (= $x152 false)))
 ))
 (let (($x135 (and $x204 $x238)))
 (let (($x246 (= $x135 true)))
 (let (($x220 (forall ((input.ind-%var1293X (_ BitVec 32)) (input.ind-%var1295X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1293X input.ind-%var1295X)))
 (let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1293X)))
 (=> (and $x128 $x150) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1293X input.ind-%var1295X) (_ bv0 32))))))
 ))
 (let (($x175 (forall ((input.ind-%var1293X (_ BitVec 32)) (input.ind-%var1294X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1293X)))
 (=> $x128 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1293X input.ind-%var1294X) false))))
 ))
 (let (($x159 (forall ((input.ind-%var1292X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1292X)))
 (= $x207 false)))
 ))
 (let (($x172 (and (and $x159 $x175) $x220)))
 (let (($x151 (= $x172 true)))
 (let (($x216 (forall ((input.ind-%var1281X (_ BitVec 32)) (input.ind-%var1283X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1281X input.ind-%var1283X)))
 (let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1281X)))
 (=> (and $x128 $x150) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1281X input.ind-%var1283X) (_ bv0 32))))))
 ))
 (let (($x194 (forall ((input.ind-%var1281X (_ BitVec 32)) (input.ind-%var1282X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1281X)))
 (=> $x128 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1281X input.ind-%var1282X) false))))
 ))
 (let (($x121 (forall ((input.ind-%var1280X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1280X)))
 (= $x207 false)))
 ))
 (let (($x224 (and (and $x121 $x194) $x216)))
 (let (($x198 (= $x224 true)))
 (let (($x203 (forall ((input.ind-%var1271X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1271X)))
 (=> $x152 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1271X) (_ bv0 32)))))
 ))
 (let (($x143 (forall ((input.ind-%var1270X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1270X)))
 (= $x152 false)))
 ))
 (let (($x242 (and $x143 $x203)))
 (let (($x241 (= $x242 true)))
 (let ((?x106 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x106)))
 (let (($x153 (= ?x142 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x153 true)))
 (let (($x83 (= $x123 true)))
 (let (($x173 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x164 (= $x173 true)))
 (let (($x38 (= $x164 true)))
 (let (($x108 (= $x38 true)))
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (= $x119 true)))
 (let (($x102 (= $x56 true)))
 (let (($x105 (= $x102 true)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x34)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x167 $x103)))
 (let (($x95 (and $x75 $x156)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x61 $x95)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x72)))))))
 (let (($x85 (and $x51 $x6)))
 (let (($x141 (= $x85 true)))
 (let (($x140 (= $x141 true)))
 (let (($x100 (= $x140 true)))
 (let (($x96 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x26 (= $x96 true)))
 (let (($x30 (= $x26 true)))
 (let (($x86 (= $x30 true)))
 (let ((?x240 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x240)))
 (let (($x33 (= ?x81 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x47 (= $x33 true)))
 (let (($x68 (= $x47 true)))
 (let (($x43 (= ?x81 input.dst.llvm-%n)))
 (let (($x69 (= $x43 true)))
 (let (($x138 (= $x69 true)))
 (let ((?x24 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x24)))
 (let (($x169 (= ?x97 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x129 (= $x169 true)))
 (let (($x168 (= $x129 true)))
 (let (($x13 (and $x168 $x138)))
 (let (($x62 (and $x13 $x68)))
 (let (($x44 (and $x62 $x86)))
 (let (($x171 (and $x44 $x100)))
 (let (($x27 (and $x171 $x105)))
 (let (($x84 (and $x27 $x108)))
 (let (($x133 (and $x84 $x83)))
 (let (($x245 (and $x133 $x241)))
 (let (($x130 (and $x245 $x198)))
 (let (($x90 (and $x130 $x151)))
 (let (($x229 (and $x90 $x246)))
 (let (($x23 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x49 (and (not $x23) $x229)))
 (let (($x14 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x18 (and $x14 $x49)))
 (let (($x147 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x252 (and $x147 $x18)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x250 (and $x48 $x252)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x5 (and $x9 $x250)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x132 (and $x12 $x5)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x256 (and $x45 $x132)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x237 (and $x40 $x256)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x188 (and $x11 $x237)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x125 (and $x65 $x188)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x79 (and $x17 $x125)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x36 (and $x54 $x79)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x247 (and $x39 $x36)))
 (let (($x8 (=> $x247 $x225)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000568)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000056b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000568)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x158 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x148 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x200 (bvmul ?x148 (_ bv4294967295 32))))
 (let ((?x137 (bvneg ?x200)))
 (let (($x104 (= ?x137 ?x158)))
 (let (($x117 (= $x104 true)))
 (let (($x234 (forall ((input.ind-%var1361X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1361X)))
 (=> $x84 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1361X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var1360X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1360X)))
 (= $x84 false)))
 ))
 (let (($x155 (and $x111 $x234)))
 (let (($x89 (= $x155 true)))
 (let (($x201 (forall ((input.ind-%var1353X (_ BitVec 32)) (input.ind-%var1355X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1353X input.ind-%var1355X)))
 (let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1353X)))
 (=> (and $x159 $x126) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1353X input.ind-%var1355X) (_ bv0 32))))))
 ))
 (let (($x8 (forall ((input.ind-%var1353X (_ BitVec 32)) (input.ind-%var1354X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1353X)))
 (=> $x159 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1353X input.ind-%var1354X) false))))
 ))
 (let (($x79 (forall ((input.ind-%var1352X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1352X)))
 (= $x121 false)))
 ))
 (let (($x244 (and (and $x79 $x8) $x201)))
 (let (($x211 (= $x244 true)))
 (let (($x252 (forall ((input.ind-%var1341X (_ BitVec 32)) (input.ind-%var1343X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1341X input.ind-%var1343X)))
 (let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1341X)))
 (=> (and $x159 $x126) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1341X input.ind-%var1343X) (_ bv0 32))))))
 ))
 (let (($x243 (forall ((input.ind-%var1341X (_ BitVec 32)) (input.ind-%var1342X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1341X)))
 (=> $x159 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1341X input.ind-%var1342X) false))))
 ))
 (let (($x228 (forall ((input.ind-%var1340X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1340X)))
 (= $x121 false)))
 ))
 (let (($x5 (and (and $x228 $x243) $x252)))
 (let (($x132 (= $x5 true)))
 (let (($x203 (forall ((input.ind-%var1331X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1331X)))
 (=> $x84 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1331X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var1330X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1330X)))
 (= $x84 false)))
 ))
 (let (($x242 (and $x123 $x203)))
 (let (($x241 (= $x242 true)))
 (let ((?x119 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x119)))
 (let (($x102 (= ?x56 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x102 true)))
 (let (($x27 (= $x105 true)))
 (let ((?x6 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x6)))
 (let (($x140 (= ?x85 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x140 true)))
 (let (($x171 (= $x100 true)))
 (let (($x162 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x162 true)))
 (let (($x75 (= $x103 true)))
 (let (($x34 (= $x75 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x72)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x88 $x64)))
 (let (($x58 (and $x98 $x74)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x69 $x58)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x96)))))))
 (let (($x161 (and $x60 $x16)))
 (let (($x51 (= $x161 true)))
 (let (($x67 (= $x51 true)))
 (let (($x61 (= $x67 true)))
 (let ((?x78 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x78)))
 (let (($x169 (= ?x10 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x129 (= $x169 true)))
 (let (($x168 (= $x129 true)))
 (let (($x24 (= ?x10 input.dst.llvm-%n)))
 (let (($x97 (= $x24 true)))
 (let (($x20 (= $x97 true)))
 (let (($x240 (and $x20 $x168)))
 (let (($x167 (and $x240 $x61)))
 (let (($x156 (and $x167 $x34)))
 (let (($x136 (and $x156 $x171)))
 (let (($x173 (and $x136 $x27)))
 (let (($x245 (and $x173 $x241)))
 (let (($x256 (and $x245 $x132)))
 (let (($x177 (and $x256 $x211)))
 (let (($x257 (and $x177 $x89)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x187 (and (not $x35) $x257)))
 (let (($x147 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x131 (and $x147 $x187)))
 (let (($x48 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x210 (and $x48 $x131)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x157 (and $x7 $x210)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x73 (and $x29 $x157)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x223 (and $x15 $x73)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x66 (and $x50 $x223)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x195 (and $x19 $x66)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x42 (and $x37 $x195)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x99 (and $x41 $x42)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x251 (and $x57 $x99)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x190 (and $x71 $x251)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x165 (and $x110 $x190)))
 (let (($x248 (=> $x165 $x117)))
 (not $x248))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x158 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x148 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x200 (bvmul ?x148 (_ bv4294967295 32))))
 (let ((?x137 (bvneg ?x200)))
 (let (($x104 (= ?x137 ?x158)))
 (let (($x117 (= $x104 true)))
 (let (($x234 (forall ((input.ind-%var1361X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1361X)))
 (=> $x84 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1361X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var1360X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1360X)))
 (= $x84 false)))
 ))
 (let (($x155 (and $x111 $x234)))
 (let (($x89 (= $x155 true)))
 (let (($x201 (forall ((input.ind-%var1353X (_ BitVec 32)) (input.ind-%var1355X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1353X input.ind-%var1355X)))
 (let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1353X)))
 (=> (and $x159 $x126) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1353X input.ind-%var1355X) (_ bv0 32))))))
 ))
 (let (($x8 (forall ((input.ind-%var1353X (_ BitVec 32)) (input.ind-%var1354X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1353X)))
 (=> $x159 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1353X input.ind-%var1354X) false))))
 ))
 (let (($x79 (forall ((input.ind-%var1352X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1352X)))
 (= $x121 false)))
 ))
 (let (($x244 (and (and $x79 $x8) $x201)))
 (let (($x211 (= $x244 true)))
 (let (($x252 (forall ((input.ind-%var1341X (_ BitVec 32)) (input.ind-%var1343X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1341X input.ind-%var1343X)))
 (let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1341X)))
 (=> (and $x159 $x126) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1341X input.ind-%var1343X) (_ bv0 32))))))
 ))
 (let (($x243 (forall ((input.ind-%var1341X (_ BitVec 32)) (input.ind-%var1342X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1341X)))
 (=> $x159 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1341X input.ind-%var1342X) false))))
 ))
 (let (($x228 (forall ((input.ind-%var1340X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1340X)))
 (= $x121 false)))
 ))
 (let (($x5 (and (and $x228 $x243) $x252)))
 (let (($x132 (= $x5 true)))
 (let (($x203 (forall ((input.ind-%var1331X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1331X)))
 (=> $x84 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1331X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var1330X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1330X)))
 (= $x84 false)))
 ))
 (let (($x242 (and $x123 $x203)))
 (let (($x241 (= $x242 true)))
 (let ((?x119 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x119)))
 (let (($x102 (= ?x56 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x102 true)))
 (let (($x27 (= $x105 true)))
 (let ((?x6 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x6)))
 (let (($x140 (= ?x85 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x140 true)))
 (let (($x171 (= $x100 true)))
 (let (($x162 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x162 true)))
 (let (($x75 (= $x103 true)))
 (let (($x34 (= $x75 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x72)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x88 $x64)))
 (let (($x58 (and $x98 $x74)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x69 $x58)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x96)))))))
 (let (($x161 (and $x60 $x16)))
 (let (($x51 (= $x161 true)))
 (let (($x67 (= $x51 true)))
 (let (($x61 (= $x67 true)))
 (let ((?x78 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x78)))
 (let (($x169 (= ?x10 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x129 (= $x169 true)))
 (let (($x168 (= $x129 true)))
 (let (($x24 (= ?x10 input.dst.llvm-%n)))
 (let (($x97 (= $x24 true)))
 (let (($x20 (= $x97 true)))
 (let (($x240 (and $x20 $x168)))
 (let (($x167 (and $x240 $x61)))
 (let (($x156 (and $x167 $x34)))
 (let (($x136 (and $x156 $x171)))
 (let (($x173 (and $x136 $x27)))
 (let (($x245 (and $x173 $x241)))
 (let (($x256 (and $x245 $x132)))
 (let (($x177 (and $x256 $x211)))
 (let (($x257 (and $x177 $x89)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x187 (and (not $x35) $x257)))
 (let (($x147 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x131 (and $x147 $x187)))
 (let (($x48 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x210 (and $x48 $x131)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x157 (and $x7 $x210)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x73 (and $x29 $x157)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x223 (and $x15 $x73)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x66 (and $x50 $x223)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x195 (and $x19 $x66)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x42 (and $x37 $x195)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x99 (and $x41 $x42)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x251 (and $x57 $x99)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x190 (and $x71 $x251)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x165 (and $x110 $x190)))
 (let (($x248 (=> $x165 $x117)))
 (not $x248))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 151 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x82 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x107 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x116 (bvmul ?x107 (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x116)))
 (let (($x227 (= ?x114 ?x82)))
 (let (($x87 (= $x227 true)))
 (let (($x209 (forall ((input.ind-%var1397X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1397X)))
 (=> $x123 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1397X) (_ bv0 32)))))
 ))
 (let (($x90 (forall ((input.ind-%var1396X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1396X)))
 (= $x123 false)))
 ))
 (let (($x213 (and $x90 $x209)))
 (let (($x128 (= $x213 true)))
 (let (($x38 (forall ((input.ind-%var1389X (_ BitVec 32)) (input.ind-%var1391X (_ BitVec 32)) )(let (($x211 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1389X input.ind-%var1391X)))
 (let (($x89 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1389X)))
 (=> (and $x89 $x211) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1389X input.ind-%var1391X) (_ bv0 32))))))
 ))
 (let (($x83 (forall ((input.ind-%var1389X (_ BitVec 32)) (input.ind-%var1390X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1389X)))
 (=> $x89 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1389X input.ind-%var1390X) false))))
 ))
 (let (($x101 (forall ((input.ind-%var1388X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1388X)))
 (= $x229 false)))
 ))
 (let (($x193 (and (and $x101 $x83) $x38)))
 (let (($x255 (= $x193 true)))
 (let (($x165 (forall ((input.ind-%var1377X (_ BitVec 32)) (input.ind-%var1379X (_ BitVec 32)) )(let (($x211 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1377X input.ind-%var1379X)))
 (let (($x89 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1377X)))
 (=> (and $x89 $x211) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1377X input.ind-%var1379X) (_ bv0 32))))))
 ))
 (let (($x187 (forall ((input.ind-%var1377X (_ BitVec 32)) (input.ind-%var1378X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1377X)))
 (=> $x89 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1377X input.ind-%var1378X) false))))
 ))
 (let (($x132 (forall ((input.ind-%var1376X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1376X)))
 (= $x229 false)))
 ))
 (let (($x200 (and (and $x132 $x187) $x165)))
 (let (($x137 (= $x200 true)))
 (let (($x130 (forall ((input.ind-%var1367X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1367X)))
 (=> $x123 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1367X) (_ bv0 32)))))
 ))
 (let (($x203 (forall ((input.ind-%var1366X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1366X)))
 (= $x123 false)))
 ))
 (let (($x175 (and $x203 $x130)))
 (let (($x243 (= $x175 true)))
 (let ((?x119 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x119)))
 (let (($x102 (= ?x56 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x102 true)))
 (let (($x27 (= $x105 true)))
 (let (($x141 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (= $x141 true)))
 (let (($x100 (= $x140 true)))
 (let (($x171 (= $x100 true)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x167)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x16 $x67)))
 (let (($x162 (and $x61 $x174)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x30 $x162)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x25)))))))
 (let (($x75 (and $x58 $x103)))
 (let (($x34 (= $x75 true)))
 (let (($x156 (= $x34 true)))
 (let (($x95 (= $x156 true)))
 (let ((?x20 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x20)))
 (let (($x76 (= ?x169 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x33 (= $x76 true)))
 (let (($x68 (= $x33 true)))
 (let (($x168 (= ?x169 input.dst.llvm-%n)))
 (let (($x240 (= $x168 true)))
 (let (($x138 (= $x240 true)))
 (let ((?x23 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x23)))
 (let (($x254 (= ?x78 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x24 (= $x254 true)))
 (let (($x97 (= $x24 true)))
 (let (($x13 (and $x97 $x138)))
 (let (($x62 (and $x13 $x68)))
 (let (($x6 (and $x62 $x95)))
 (let (($x136 (and $x6 $x171)))
 (let (($x173 (and $x136 $x27)))
 (let (($x250 (and $x173 $x243)))
 (let (($x158 (and $x250 $x137)))
 (let (($x142 (and $x158 $x255)))
 (let (($x133 (and $x142 $x128)))
 (let (($x14 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x224 (and (not $x14) $x133)))
 (let (($x48 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x135 (and $x48 $x224)))
 (let (($x7 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x249 (and $x7 $x135)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x198 (and $x31 $x249)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x125 (and $x12 $x198)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x202 (and $x45 $x125)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x205 (and $x40 $x202)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x172 (and $x11 $x205)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x151 (and $x65 $x172)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x246 (and $x17 $x151)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x139 (and $x54 $x246)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x225 (and $x70 $x139)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x113 (and $x39 $x225)))
 (let (($x94 (=> $x113 $x87)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x82 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x107 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x116 (bvmul ?x107 (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x116)))
 (let (($x227 (= ?x114 ?x82)))
 (let (($x87 (= $x227 true)))
 (let (($x209 (forall ((input.ind-%var1397X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1397X)))
 (=> $x123 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1397X) (_ bv0 32)))))
 ))
 (let (($x90 (forall ((input.ind-%var1396X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1396X)))
 (= $x123 false)))
 ))
 (let (($x213 (and $x90 $x209)))
 (let (($x128 (= $x213 true)))
 (let (($x38 (forall ((input.ind-%var1389X (_ BitVec 32)) (input.ind-%var1391X (_ BitVec 32)) )(let (($x211 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1389X input.ind-%var1391X)))
 (let (($x89 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1389X)))
 (=> (and $x89 $x211) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1389X input.ind-%var1391X) (_ bv0 32))))))
 ))
 (let (($x83 (forall ((input.ind-%var1389X (_ BitVec 32)) (input.ind-%var1390X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1389X)))
 (=> $x89 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1389X input.ind-%var1390X) false))))
 ))
 (let (($x101 (forall ((input.ind-%var1388X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1388X)))
 (= $x229 false)))
 ))
 (let (($x193 (and (and $x101 $x83) $x38)))
 (let (($x255 (= $x193 true)))
 (let (($x165 (forall ((input.ind-%var1377X (_ BitVec 32)) (input.ind-%var1379X (_ BitVec 32)) )(let (($x211 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1377X input.ind-%var1379X)))
 (let (($x89 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1377X)))
 (=> (and $x89 $x211) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1377X input.ind-%var1379X) (_ bv0 32))))))
 ))
 (let (($x187 (forall ((input.ind-%var1377X (_ BitVec 32)) (input.ind-%var1378X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1377X)))
 (=> $x89 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1377X input.ind-%var1378X) false))))
 ))
 (let (($x132 (forall ((input.ind-%var1376X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1376X)))
 (= $x229 false)))
 ))
 (let (($x200 (and (and $x132 $x187) $x165)))
 (let (($x137 (= $x200 true)))
 (let (($x130 (forall ((input.ind-%var1367X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1367X)))
 (=> $x123 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1367X) (_ bv0 32)))))
 ))
 (let (($x203 (forall ((input.ind-%var1366X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1366X)))
 (= $x123 false)))
 ))
 (let (($x175 (and $x203 $x130)))
 (let (($x243 (= $x175 true)))
 (let ((?x119 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x119)))
 (let (($x102 (= ?x56 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x102 true)))
 (let (($x27 (= $x105 true)))
 (let (($x141 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (= $x141 true)))
 (let (($x100 (= $x140 true)))
 (let (($x171 (= $x100 true)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x167)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x16 $x67)))
 (let (($x162 (and $x61 $x174)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x30 $x162)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x25)))))))
 (let (($x75 (and $x58 $x103)))
 (let (($x34 (= $x75 true)))
 (let (($x156 (= $x34 true)))
 (let (($x95 (= $x156 true)))
 (let ((?x20 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x20)))
 (let (($x76 (= ?x169 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x33 (= $x76 true)))
 (let (($x68 (= $x33 true)))
 (let (($x168 (= ?x169 input.dst.llvm-%n)))
 (let (($x240 (= $x168 true)))
 (let (($x138 (= $x240 true)))
 (let ((?x23 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x23)))
 (let (($x254 (= ?x78 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x24 (= $x254 true)))
 (let (($x97 (= $x24 true)))
 (let (($x13 (and $x97 $x138)))
 (let (($x62 (and $x13 $x68)))
 (let (($x6 (and $x62 $x95)))
 (let (($x136 (and $x6 $x171)))
 (let (($x173 (and $x136 $x27)))
 (let (($x250 (and $x173 $x243)))
 (let (($x158 (and $x250 $x137)))
 (let (($x142 (and $x158 $x255)))
 (let (($x133 (and $x142 $x128)))
 (let (($x14 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x224 (and (not $x14) $x133)))
 (let (($x48 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x135 (and $x48 $x224)))
 (let (($x7 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x249 (and $x7 $x135)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x198 (and $x31 $x249)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x125 (and $x12 $x198)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x202 (and $x45 $x125)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x205 (and $x40 $x202)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x172 (and $x11 $x205)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x151 (and $x65 $x172)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x246 (and $x17 $x151)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x139 (and $x54 $x246)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x225 (and $x70 $x139)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x113 (and $x39 $x225)))
 (let (($x94 (=> $x113 $x87)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 151 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x210 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x157 (not $x210)))
 (let (($x216 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x220 (not $x216)))
 (let (($x42 (or $x220 $x157)))
 (let (($x32 (= $x42 true)))
 (let (($x238 (= $x32 true)))
 (let (($x73 (forall ((input.ind-%var1433X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1433X)))
 (=> $x105 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1433X) (_ bv0 32)))))
 ))
 (let (($x178 (forall ((input.ind-%var1432X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1432X)))
 (= $x105 false)))
 ))
 (let (($x201 (and $x178 $x73)))
 (let (($x143 (= $x201 true)))
 (let (($x245 (forall ((input.ind-%var1425X (_ BitVec 32)) (input.ind-%var1427X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1425X input.ind-%var1427X)))
 (let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1425X)))
 (=> (and $x193 $x158) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1425X input.ind-%var1427X) (_ bv0 32))))))
 ))
 (let (($x96 (forall ((input.ind-%var1425X (_ BitVec 32)) (input.ind-%var1426X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1425X)))
 (=> $x193 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1425X input.ind-%var1426X) false))))
 ))
 (let (($x116 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1424X)))
 (= $x155 false)))
 ))
 (let (($x79 (and (and $x116 $x96) $x245)))
 (let (($x55 (= $x79 true)))
 (let (($x205 (forall ((input.ind-%var1413X (_ BitVec 32)) (input.ind-%var1415X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1413X input.ind-%var1415X)))
 (let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1413X)))
 (=> (and $x193 $x158) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1413X input.ind-%var1415X) (_ bv0 32))))))
 ))
 (let (($x142 (forall ((input.ind-%var1413X (_ BitVec 32)) (input.ind-%var1414X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1413X)))
 (=> $x193 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1413X input.ind-%var1414X) false))))
 ))
 (let (($x251 (forall ((input.ind-%var1412X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1412X)))
 (= $x155 false)))
 ))
 (let (($x151 (and (and $x251 $x142) $x205)))
 (let (($x246 (= $x151 true)))
 (let (($x229 (forall ((input.ind-%var1403X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1403X)))
 (=> $x105 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1403X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var1402X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1402X)))
 (= $x105 false)))
 ))
 (let (($x5 (and $x123 $x229)))
 (let (($x132 (= $x5 true)))
 (let ((?x6 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x6)))
 (let (($x140 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x140 true)))
 (let (($x171 (= $x100 true)))
 (let ((?x161 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x161)))
 (let (($x103 (= ?x51 input.dst.llvm-%n)))
 (let (($x75 (= $x103 true)))
 (let (($x34 (= $x75 true)))
 (let (($x67 (= ?x51 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x61 (= $x67 true)))
 (let (($x167 (= $x61 true)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x25)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x74 $x88)))
 (let (($x64 (and $x43 $x59)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x97 $x64)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x13)))))))
 (let (($x72 (and $x44 $x98)))
 (let (($x58 (= $x72 true)))
 (let (($x26 (= $x58 true)))
 (let (($x30 (= $x26 true)))
 (let ((?x14 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x14)))
 (let (($x93 (= ?x92 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x23 (= $x93 true)))
 (let (($x78 (= $x23 true)))
 (let (($x16 (and $x78 $x30)))
 (let (($x174 (and $x16 $x167)))
 (let (($x156 (and $x174 $x34)))
 (let (($x136 (and $x156 $x171)))
 (let (($x244 (and $x136 $x132)))
 (let (($x139 (and $x244 $x246)))
 (let (($x131 (and $x139 $x55)))
 (let (($x207 (and $x131 $x143)))
 (let (($x7 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x104 (and $x7 $x207)))
 (let (($x31 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x117 (and $x31 $x104)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x36 (and $x9 $x117)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x146 (and $x15 $x36)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x252 (and $x50 $x146)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x241 (and $x19 $x252)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x77 (and $x37 $x241)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x111 (and $x41 $x77)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x195 (and $x57 $x111)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x8 (and $x71 $x195)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x234 (and $x80 $x8)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x248 (and $x110 $x234)))
 (let (($x109 (=> $x248 $x238)))
 (not $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x210 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x157 (not $x210)))
 (let (($x216 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x220 (not $x216)))
 (let (($x42 (or $x220 $x157)))
 (let (($x32 (= $x42 true)))
 (let (($x238 (= $x32 true)))
 (let (($x73 (forall ((input.ind-%var1433X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1433X)))
 (=> $x105 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1433X) (_ bv0 32)))))
 ))
 (let (($x178 (forall ((input.ind-%var1432X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1432X)))
 (= $x105 false)))
 ))
 (let (($x201 (and $x178 $x73)))
 (let (($x143 (= $x201 true)))
 (let (($x245 (forall ((input.ind-%var1425X (_ BitVec 32)) (input.ind-%var1427X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1425X input.ind-%var1427X)))
 (let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1425X)))
 (=> (and $x193 $x158) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1425X input.ind-%var1427X) (_ bv0 32))))))
 ))
 (let (($x96 (forall ((input.ind-%var1425X (_ BitVec 32)) (input.ind-%var1426X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1425X)))
 (=> $x193 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1425X input.ind-%var1426X) false))))
 ))
 (let (($x116 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1424X)))
 (= $x155 false)))
 ))
 (let (($x79 (and (and $x116 $x96) $x245)))
 (let (($x55 (= $x79 true)))
 (let (($x205 (forall ((input.ind-%var1413X (_ BitVec 32)) (input.ind-%var1415X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1413X input.ind-%var1415X)))
 (let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1413X)))
 (=> (and $x193 $x158) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1413X input.ind-%var1415X) (_ bv0 32))))))
 ))
 (let (($x142 (forall ((input.ind-%var1413X (_ BitVec 32)) (input.ind-%var1414X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1413X)))
 (=> $x193 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1413X input.ind-%var1414X) false))))
 ))
 (let (($x251 (forall ((input.ind-%var1412X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1412X)))
 (= $x155 false)))
 ))
 (let (($x151 (and (and $x251 $x142) $x205)))
 (let (($x246 (= $x151 true)))
 (let (($x229 (forall ((input.ind-%var1403X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1403X)))
 (=> $x105 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1403X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var1402X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1402X)))
 (= $x105 false)))
 ))
 (let (($x5 (and $x123 $x229)))
 (let (($x132 (= $x5 true)))
 (let ((?x6 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x6)))
 (let (($x140 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x140 true)))
 (let (($x171 (= $x100 true)))
 (let ((?x161 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x161)))
 (let (($x103 (= ?x51 input.dst.llvm-%n)))
 (let (($x75 (= $x103 true)))
 (let (($x34 (= $x75 true)))
 (let (($x67 (= ?x51 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x61 (= $x67 true)))
 (let (($x167 (= $x61 true)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x25)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x74 $x88)))
 (let (($x64 (and $x43 $x59)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x97 $x64)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x13)))))))
 (let (($x72 (and $x44 $x98)))
 (let (($x58 (= $x72 true)))
 (let (($x26 (= $x58 true)))
 (let (($x30 (= $x26 true)))
 (let ((?x14 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x14)))
 (let (($x93 (= ?x92 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x23 (= $x93 true)))
 (let (($x78 (= $x23 true)))
 (let (($x16 (and $x78 $x30)))
 (let (($x174 (and $x16 $x167)))
 (let (($x156 (and $x174 $x34)))
 (let (($x136 (and $x156 $x171)))
 (let (($x244 (and $x136 $x132)))
 (let (($x139 (and $x244 $x246)))
 (let (($x131 (and $x139 $x55)))
 (let (($x207 (and $x131 $x143)))
 (let (($x7 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x104 (and $x7 $x207)))
 (let (($x31 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x117 (and $x31 $x104)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x36 (and $x9 $x117)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x146 (and $x15 $x36)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x252 (and $x50 $x146)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x241 (and $x19 $x252)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x77 (and $x37 $x241)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x111 (and $x41 $x77)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x195 (and $x57 $x111)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x8 (and $x71 $x195)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x234 (and $x80 $x8)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x248 (and $x110 $x234)))
 (let (($x109 (=> $x248 $x238)))
 (not $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 145 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x164 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x165 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x120 (bvmul ?x165 (_ bv4294967295 32))))
 (let ((?x194 (bvneg ?x120)))
 (let (($x144 (= ?x194 ?x164)))
 (let (($x188 (= $x144 true)))
 (let (($x190 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1469X)))
 (=> $x244 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1469X) (_ bv0 32)))))
 ))
 (let (($x87 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1468X)))
 (= $x244 false)))
 ))
 (let (($x247 (and $x87 $x190)))
 (let (($x107 (= $x247 true)))
 (let (($x211 (forall ((input.ind-%var1461X (_ BitVec 32)) (input.ind-%var1463X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1461X input.ind-%var1463X)))
 (let (($x241 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1461X)))
 (=> (and $x241 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1461X input.ind-%var1463X) (_ bv0 32))))))
 ))
 (let (($x56 (forall ((input.ind-%var1461X (_ BitVec 32)) (input.ind-%var1462X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1461X)))
 (=> $x241 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1461X input.ind-%var1462X) false))))
 ))
 (let (($x253 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1460X)))
 (= $x96 false)))
 ))
 (let (($x200 (and (and $x253 $x56) $x211)))
 (let (($x108 (= $x200 true)))
 (let (($x109 (forall ((input.ind-%var1449X (_ BitVec 32)) (input.ind-%var1451X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1449X input.ind-%var1451X)))
 (let (($x241 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1449X)))
 (=> (and $x241 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1449X input.ind-%var1451X) (_ bv0 32))))))
 ))
 (let (($x111 (forall ((input.ind-%var1449X (_ BitVec 32)) (input.ind-%var1450X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1449X)))
 (=> $x241 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1449X input.ind-%var1450X) false))))
 ))
 (let (($x55 (forall ((input.ind-%var1448X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1448X)))
 (= $x96 false)))
 ))
 (let (($x254 (and (and $x55 $x111) $x109)))
 (let (($x27 (= $x254 true)))
 (let (($x202 (forall ((input.ind-%var1439X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1439X)))
 (=> $x244 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1439X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var1438X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1438X)))
 (= $x244 false)))
 ))
 (let (($x205 (and $x137 $x202)))
 (let (($x151 (= $x205 true)))
 (let ((?x105 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x105)))
 (let (($x123 (= ?x153 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x123 true)))
 (let (($x243 (= $x159 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x85)))
 (let (($x100 (= ?x141 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x171 (= $x100 true)))
 (let (($x136 (= $x171 true)))
 (let (($x103 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x75 (= $x103 true)))
 (let (($x34 (= $x75 true)))
 (let (($x156 (= $x34 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x26)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x59 $x72)))
 (let (($x16 (and $x58 $x30)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x13 $x16)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x97)))))))
 (let (($x51 (and $x25 $x161)))
 (let (($x67 (= $x51 true)))
 (let (($x61 (= $x67 true)))
 (let (($x167 (= $x61 true)))
 (let ((?x14 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x14)))
 (let (($x20 (= ?x92 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x169 (= $x20 true)))
 (let (($x86 (= $x169 true)))
 (let (($x93 (= ?x92 input.dst.llvm-%n)))
 (let (($x23 (= $x93 true)))
 (let (($x78 (= $x23 true)))
 (let (($x129 (and $x78 $x86)))
 (let (($x174 (and $x129 $x167)))
 (let (($x95 (and $x174 $x156)))
 (let (($x102 (and $x95 $x136)))
 (let (($x250 (and $x102 $x243)))
 (let (($x246 (and $x250 $x151)))
 (let (($x126 (and $x246 $x27)))
 (let (($x84 (and $x126 $x108)))
 (let (($x94 (and $x84 $x107)))
 (let (($x48 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x209 (and (not $x48) $x94)))
 (let (($x31 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x213 (and $x31 $x209)))
 (let (($x9 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x249 (and $x9 $x213)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x227 (and $x29 $x249)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x239 (and $x45 $x227)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x106 (and $x40 $x239)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x49 (and $x11 $x106)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x150 (and $x65 $x49)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x18 (and $x17 $x150)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x242 (and $x54 $x18)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x170 (and $x70 $x242)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x204 (and $x81 $x170)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x181 (and $x39 $x204)))
 (let (($x226 (=> $x181 $x188)))
 (not $x226))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x164 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x165 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x120 (bvmul ?x165 (_ bv4294967295 32))))
 (let ((?x194 (bvneg ?x120)))
 (let (($x144 (= ?x194 ?x164)))
 (let (($x188 (= $x144 true)))
 (let (($x190 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1469X)))
 (=> $x244 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1469X) (_ bv0 32)))))
 ))
 (let (($x87 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1468X)))
 (= $x244 false)))
 ))
 (let (($x247 (and $x87 $x190)))
 (let (($x107 (= $x247 true)))
 (let (($x211 (forall ((input.ind-%var1461X (_ BitVec 32)) (input.ind-%var1463X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1461X input.ind-%var1463X)))
 (let (($x241 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1461X)))
 (=> (and $x241 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1461X input.ind-%var1463X) (_ bv0 32))))))
 ))
 (let (($x56 (forall ((input.ind-%var1461X (_ BitVec 32)) (input.ind-%var1462X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1461X)))
 (=> $x241 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1461X input.ind-%var1462X) false))))
 ))
 (let (($x253 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1460X)))
 (= $x96 false)))
 ))
 (let (($x200 (and (and $x253 $x56) $x211)))
 (let (($x108 (= $x200 true)))
 (let (($x109 (forall ((input.ind-%var1449X (_ BitVec 32)) (input.ind-%var1451X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1449X input.ind-%var1451X)))
 (let (($x241 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1449X)))
 (=> (and $x241 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1449X input.ind-%var1451X) (_ bv0 32))))))
 ))
 (let (($x111 (forall ((input.ind-%var1449X (_ BitVec 32)) (input.ind-%var1450X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1449X)))
 (=> $x241 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1449X input.ind-%var1450X) false))))
 ))
 (let (($x55 (forall ((input.ind-%var1448X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1448X)))
 (= $x96 false)))
 ))
 (let (($x254 (and (and $x55 $x111) $x109)))
 (let (($x27 (= $x254 true)))
 (let (($x202 (forall ((input.ind-%var1439X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1439X)))
 (=> $x244 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1439X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var1438X (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1438X)))
 (= $x244 false)))
 ))
 (let (($x205 (and $x137 $x202)))
 (let (($x151 (= $x205 true)))
 (let ((?x105 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x105)))
 (let (($x123 (= ?x153 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x123 true)))
 (let (($x243 (= $x159 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x85)))
 (let (($x100 (= ?x141 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x171 (= $x100 true)))
 (let (($x136 (= $x171 true)))
 (let (($x103 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x75 (= $x103 true)))
 (let (($x34 (= $x75 true)))
 (let (($x156 (= $x34 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x26)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x59 $x72)))
 (let (($x16 (and $x58 $x30)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x13 $x16)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x97)))))))
 (let (($x51 (and $x25 $x161)))
 (let (($x67 (= $x51 true)))
 (let (($x61 (= $x67 true)))
 (let (($x167 (= $x61 true)))
 (let ((?x14 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x14)))
 (let (($x20 (= ?x92 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x169 (= $x20 true)))
 (let (($x86 (= $x169 true)))
 (let (($x93 (= ?x92 input.dst.llvm-%n)))
 (let (($x23 (= $x93 true)))
 (let (($x78 (= $x23 true)))
 (let (($x129 (and $x78 $x86)))
 (let (($x174 (and $x129 $x167)))
 (let (($x95 (and $x174 $x156)))
 (let (($x102 (and $x95 $x136)))
 (let (($x250 (and $x102 $x243)))
 (let (($x246 (and $x250 $x151)))
 (let (($x126 (and $x246 $x27)))
 (let (($x84 (and $x126 $x108)))
 (let (($x94 (and $x84 $x107)))
 (let (($x48 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x209 (and (not $x48) $x94)))
 (let (($x31 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x213 (and $x31 $x209)))
 (let (($x9 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x249 (and $x9 $x213)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x227 (and $x29 $x249)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x239 (and $x45 $x227)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x106 (and $x40 $x239)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x49 (and $x11 $x106)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x150 (and $x65 $x49)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x18 (and $x17 $x150)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x242 (and $x54 $x18)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x170 (and $x70 $x242)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x204 (and $x81 $x170)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x181 (and $x39 $x204)))
 (let (($x226 (=> $x181 $x188)))
 (not $x226))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 151 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x89 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x83 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x152 (bvmul ?x83 (_ bv4294967295 32))))
 (let ((?x228 (bvneg ?x152)))
 (let (($x203 (= ?x228 ?x89)))
 (let (($x135 (= $x203 true)))
 (let (($x173 (forall ((input.ind-%var1505X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1505X)))
 (=> $x137 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1505X) (_ bv0 32)))))
 ))
 (let (($x248 (forall ((input.ind-%var1504X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1504X)))
 (= $x137 false)))
 ))
 (let (($x114 (and $x248 $x173)))
 (let (($x245 (= $x114 true)))
 (let (($x5 (forall ((input.ind-%var1497X (_ BitVec 32)) (input.ind-%var1499X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1497X input.ind-%var1499X)))
 (let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1497X)))
 (=> (and $x107 $x108) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1497X input.ind-%var1499X) (_ bv0 32))))))
 ))
 (let (($x193 (forall ((input.ind-%var1497X (_ BitVec 32)) (input.ind-%var1498X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1497X)))
 (=> $x107 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1497X input.ind-%var1498X) false))))
 ))
 (let (($x118 (forall ((input.ind-%var1496X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1496X)))
 (= $x42 false)))
 ))
 (let (($x82 (and (and $x118 $x193) $x5)))
 (let (($x175 (= $x82 true)))
 (let (($x181 (forall ((input.ind-%var1485X (_ BitVec 32)) (input.ind-%var1487X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1485X input.ind-%var1487X)))
 (let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1485X)))
 (=> (and $x107 $x108) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1485X input.ind-%var1487X) (_ bv0 32))))))
 ))
 (let (($x209 (forall ((input.ind-%var1485X (_ BitVec 32)) (input.ind-%var1486X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1485X)))
 (=> $x107 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1485X input.ind-%var1486X) false))))
 ))
 (let (($x27 (forall ((input.ind-%var1484X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1484X)))
 (= $x42 false)))
 ))
 (let (($x120 (and (and $x27 $x209) $x181)))
 (let (($x194 (= $x120 true)))
 (let (($x252 (forall ((input.ind-%var1475X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1475X)))
 (=> $x137 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1475X) (_ bv0 32)))))
 ))
 (let (($x202 (forall ((input.ind-%var1474X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1474X)))
 (= $x137 false)))
 ))
 (let (($x77 (and $x202 $x252)))
 (let (($x111 (= $x77 true)))
 (let ((?x105 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x105)))
 (let (($x123 (= ?x153 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x123 true)))
 (let (($x243 (= $x159 true)))
 (let (($x140 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x140 true)))
 (let (($x171 (= $x100 true)))
 (let (($x136 (= $x171 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x174)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x161 $x61)))
 (let (($x103 (and $x167 $x162)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x60 $x103)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x64)))))))
 (let (($x34 (and $x16 $x75)))
 (let (($x156 (= $x34 true)))
 (let (($x95 (= $x156 true)))
 (let (($x6 (= $x95 true)))
 (let ((?x78 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x78)))
 (let (($x43 (= ?x20 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x68 (= $x43 true)))
 (let (($x44 (= $x68 true)))
 (let (($x86 (= ?x20 input.dst.llvm-%n)))
 (let (($x129 (= $x86 true)))
 (let (($x76 (= $x129 true)))
 (let ((?x147 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x147)))
 (let (($x35 (= ?x14 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x35 true)))
 (let (($x23 (= $x93 true)))
 (let (($x33 (and $x23 $x76)))
 (let (($x24 (and $x33 $x44)))
 (let (($x85 (and $x24 $x6)))
 (let (($x102 (and $x85 $x136)))
 (let (($x250 (and $x102 $x243)))
 (let (($x237 (and $x250 $x111)))
 (let (($x164 (and $x237 $x194)))
 (let (($x148 (and $x164 $x175)))
 (let (($x158 (and $x148 $x245)))
 (let (($x7 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x36 (and (not $x7) $x158)))
 (let (($x9 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x210 (and $x9 $x36)))
 (let (($x29 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x73 (and $x29 $x210)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x146 (and $x12 $x73)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x224 (and $x50 $x146)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x90 (and $x19 $x224)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x130 (and $x37 $x90)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x8 (and $x41 $x130)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x234 (and $x57 $x8)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x157 (and $x71 $x234)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x99 (and $x80 $x157)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x119 (and $x47 $x99)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x177 (and $x110 $x119)))
 (let (($x149 (=> $x177 $x135)))
 (not $x149))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x89 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x83 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x152 (bvmul ?x83 (_ bv4294967295 32))))
 (let ((?x228 (bvneg ?x152)))
 (let (($x203 (= ?x228 ?x89)))
 (let (($x135 (= $x203 true)))
 (let (($x173 (forall ((input.ind-%var1505X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1505X)))
 (=> $x137 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1505X) (_ bv0 32)))))
 ))
 (let (($x248 (forall ((input.ind-%var1504X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1504X)))
 (= $x137 false)))
 ))
 (let (($x114 (and $x248 $x173)))
 (let (($x245 (= $x114 true)))
 (let (($x5 (forall ((input.ind-%var1497X (_ BitVec 32)) (input.ind-%var1499X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1497X input.ind-%var1499X)))
 (let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1497X)))
 (=> (and $x107 $x108) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1497X input.ind-%var1499X) (_ bv0 32))))))
 ))
 (let (($x193 (forall ((input.ind-%var1497X (_ BitVec 32)) (input.ind-%var1498X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1497X)))
 (=> $x107 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1497X input.ind-%var1498X) false))))
 ))
 (let (($x118 (forall ((input.ind-%var1496X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1496X)))
 (= $x42 false)))
 ))
 (let (($x82 (and (and $x118 $x193) $x5)))
 (let (($x175 (= $x82 true)))
 (let (($x181 (forall ((input.ind-%var1485X (_ BitVec 32)) (input.ind-%var1487X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1485X input.ind-%var1487X)))
 (let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1485X)))
 (=> (and $x107 $x108) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1485X input.ind-%var1487X) (_ bv0 32))))))
 ))
 (let (($x209 (forall ((input.ind-%var1485X (_ BitVec 32)) (input.ind-%var1486X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1485X)))
 (=> $x107 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1485X input.ind-%var1486X) false))))
 ))
 (let (($x27 (forall ((input.ind-%var1484X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1484X)))
 (= $x42 false)))
 ))
 (let (($x120 (and (and $x27 $x209) $x181)))
 (let (($x194 (= $x120 true)))
 (let (($x252 (forall ((input.ind-%var1475X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1475X)))
 (=> $x137 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1475X) (_ bv0 32)))))
 ))
 (let (($x202 (forall ((input.ind-%var1474X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1474X)))
 (= $x137 false)))
 ))
 (let (($x77 (and $x202 $x252)))
 (let (($x111 (= $x77 true)))
 (let ((?x105 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x105)))
 (let (($x123 (= ?x153 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x123 true)))
 (let (($x243 (= $x159 true)))
 (let (($x140 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x140 true)))
 (let (($x171 (= $x100 true)))
 (let (($x136 (= $x171 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x174)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x161 $x61)))
 (let (($x103 (and $x167 $x162)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x60 $x103)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x64)))))))
 (let (($x34 (and $x16 $x75)))
 (let (($x156 (= $x34 true)))
 (let (($x95 (= $x156 true)))
 (let (($x6 (= $x95 true)))
 (let ((?x78 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x78)))
 (let (($x43 (= ?x20 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x68 (= $x43 true)))
 (let (($x44 (= $x68 true)))
 (let (($x86 (= ?x20 input.dst.llvm-%n)))
 (let (($x129 (= $x86 true)))
 (let (($x76 (= $x129 true)))
 (let ((?x147 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x147)))
 (let (($x35 (= ?x14 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x35 true)))
 (let (($x23 (= $x93 true)))
 (let (($x33 (and $x23 $x76)))
 (let (($x24 (and $x33 $x44)))
 (let (($x85 (and $x24 $x6)))
 (let (($x102 (and $x85 $x136)))
 (let (($x250 (and $x102 $x243)))
 (let (($x237 (and $x250 $x111)))
 (let (($x164 (and $x237 $x194)))
 (let (($x148 (and $x164 $x175)))
 (let (($x158 (and $x148 $x245)))
 (let (($x7 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x36 (and (not $x7) $x158)))
 (let (($x9 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x210 (and $x9 $x36)))
 (let (($x29 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x73 (and $x29 $x210)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x146 (and $x12 $x73)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x224 (and $x50 $x146)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x90 (and $x19 $x224)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x130 (and $x37 $x90)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x8 (and $x41 $x130)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x234 (and $x57 $x8)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x157 (and $x71 $x234)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x99 (and $x80 $x157)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x119 (and $x47 $x99)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x177 (and $x110 $x119)))
 (let (($x149 (=> $x177 $x135)))
 (not $x149))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 151 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x117 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (not $x117)))
 (let (($x249 (= $x195 false)))
 (let (($x227 (= $x249 true)))
 (let (($x239 (forall ((input.ind-%var1541X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1541X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1541X) (_ bv0 32)))))
 ))
 (let (($x38 (forall ((input.ind-%var1540X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1540X)))
 (= $x159 false)))
 ))
 (let (($x211 (and $x38 $x239)))
 (let (($x172 (= $x211 true)))
 (let (($x246 (forall ((input.ind-%var1533X (_ BitVec 32)) (input.ind-%var1535X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1533X input.ind-%var1535X)))
 (let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1533X)))
 (=> (and $x82 $x164) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1533X input.ind-%var1535X) (_ bv0 32))))))
 ))
 (let (($x97 (forall ((input.ind-%var1533X (_ BitVec 32)) (input.ind-%var1534X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1533X)))
 (=> $x82 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1533X input.ind-%var1534X) false))))
 ))
 (let (($x152 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x247 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1532X)))
 (= $x247 false)))
 ))
 (let (($x253 (and (and $x152 $x97) $x246)))
 (let (($x138 (= $x253 true)))
 (let (($x130 (forall ((input.ind-%var1521X (_ BitVec 32)) (input.ind-%var1523X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1521X input.ind-%var1523X)))
 (let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1521X)))
 (=> (and $x82 $x164) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1521X input.ind-%var1523X) (_ bv0 32))))))
 ))
 (let (($x148 (forall ((input.ind-%var1521X (_ BitVec 32)) (input.ind-%var1522X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1521X)))
 (=> $x82 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1521X input.ind-%var1522X) false))))
 ))
 (let (($x170 (forall ((input.ind-%var1520X (_ BitVec 32)) )(let (($x247 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1520X)))
 (= $x247 false)))
 ))
 (let (($x234 (and (and $x170 $x148) $x130)))
 (let (($x157 (= $x234 true)))
 (let (($x42 (forall ((input.ind-%var1511X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1511X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1511X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var1510X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1510X)))
 (= $x159 false)))
 ))
 (let (($x254 (and $x137 $x42)))
 (let (($x27 (= $x254 true)))
 (let ((?x85 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x85)))
 (let (($x100 (= ?x141 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x171 (= $x100 true)))
 (let (($x136 (= $x171 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x92)))
 (let (($x75 (= ?x35 input.dst.llvm-%n)))
 (let (($x34 (= $x75 true)))
 (let (($x156 (= $x34 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x74)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x98 $x26)))
 (let (($x161 (and $x16 $x60)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x76 $x161)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x88)))))))
 (let (($x67 (and $x64 $x51)))
 (let (($x61 (= $x67 true)))
 (let (($x167 (= $x61 true)))
 (let (($x174 (= $x167 true)))
 (let (($x93 (= ?x35 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x23 (= $x93 true)))
 (let (($x78 (= $x23 true)))
 (let ((?x7 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x7)))
 (let (($x66 (= ?x125 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x66 true)))
 (let (($x14 (= $x147 true)))
 (let (($x20 (and $x14 $x78)))
 (let (($x162 (and $x20 $x174)))
 (let (($x95 (and $x162 $x156)))
 (let (($x102 (and $x95 $x136)))
 (let (($x200 (and $x102 $x27)))
 (let (($x99 (and $x200 $x157)))
 (let (($x213 (and $x99 $x138)))
 (let (($x139 (and $x213 $x172)))
 (let (($x29 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x144 (and $x29 $x139)))
 (let (($x12 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x188 (and $x12 $x144)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x121 (and $x15 $x188)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x256 (and $x40 $x121)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x109 (and $x11 $x256)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x151 (and $x65 $x109)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x207 (and $x17 $x151)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x87 (and $x54 $x207)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x150 (and $x70 $x87)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x56 (and $x81 $x150)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x190 (and $x10 $x56)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x226 (and $x39 $x190)))
 (let (($x18 (=> $x226 $x227)))
 (not $x18)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x117 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (not $x117)))
 (let (($x249 (= $x195 false)))
 (let (($x227 (= $x249 true)))
 (let (($x239 (forall ((input.ind-%var1541X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1541X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1541X) (_ bv0 32)))))
 ))
 (let (($x38 (forall ((input.ind-%var1540X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1540X)))
 (= $x159 false)))
 ))
 (let (($x211 (and $x38 $x239)))
 (let (($x172 (= $x211 true)))
 (let (($x246 (forall ((input.ind-%var1533X (_ BitVec 32)) (input.ind-%var1535X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1533X input.ind-%var1535X)))
 (let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1533X)))
 (=> (and $x82 $x164) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1533X input.ind-%var1535X) (_ bv0 32))))))
 ))
 (let (($x97 (forall ((input.ind-%var1533X (_ BitVec 32)) (input.ind-%var1534X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1533X)))
 (=> $x82 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1533X input.ind-%var1534X) false))))
 ))
 (let (($x152 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x247 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1532X)))
 (= $x247 false)))
 ))
 (let (($x253 (and (and $x152 $x97) $x246)))
 (let (($x138 (= $x253 true)))
 (let (($x130 (forall ((input.ind-%var1521X (_ BitVec 32)) (input.ind-%var1523X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1521X input.ind-%var1523X)))
 (let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1521X)))
 (=> (and $x82 $x164) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1521X input.ind-%var1523X) (_ bv0 32))))))
 ))
 (let (($x148 (forall ((input.ind-%var1521X (_ BitVec 32)) (input.ind-%var1522X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1521X)))
 (=> $x82 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1521X input.ind-%var1522X) false))))
 ))
 (let (($x170 (forall ((input.ind-%var1520X (_ BitVec 32)) )(let (($x247 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1520X)))
 (= $x247 false)))
 ))
 (let (($x234 (and (and $x170 $x148) $x130)))
 (let (($x157 (= $x234 true)))
 (let (($x42 (forall ((input.ind-%var1511X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1511X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1511X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var1510X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1510X)))
 (= $x159 false)))
 ))
 (let (($x254 (and $x137 $x42)))
 (let (($x27 (= $x254 true)))
 (let ((?x85 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x85)))
 (let (($x100 (= ?x141 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x171 (= $x100 true)))
 (let (($x136 (= $x171 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x92)))
 (let (($x75 (= ?x35 input.dst.llvm-%n)))
 (let (($x34 (= $x75 true)))
 (let (($x156 (= $x34 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x74)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x98 $x26)))
 (let (($x161 (and $x16 $x60)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x76 $x161)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x88)))))))
 (let (($x67 (and $x64 $x51)))
 (let (($x61 (= $x67 true)))
 (let (($x167 (= $x61 true)))
 (let (($x174 (= $x167 true)))
 (let (($x93 (= ?x35 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x23 (= $x93 true)))
 (let (($x78 (= $x23 true)))
 (let ((?x7 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x7)))
 (let (($x66 (= ?x125 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x66 true)))
 (let (($x14 (= $x147 true)))
 (let (($x20 (and $x14 $x78)))
 (let (($x162 (and $x20 $x174)))
 (let (($x95 (and $x162 $x156)))
 (let (($x102 (and $x95 $x136)))
 (let (($x200 (and $x102 $x27)))
 (let (($x99 (and $x200 $x157)))
 (let (($x213 (and $x99 $x138)))
 (let (($x139 (and $x213 $x172)))
 (let (($x29 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x144 (and $x29 $x139)))
 (let (($x12 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x188 (and $x12 $x144)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x121 (and $x15 $x188)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x256 (and $x40 $x121)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x109 (and $x11 $x256)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x151 (and $x65 $x109)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x207 (and $x17 $x151)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x87 (and $x54 $x207)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x150 (and $x70 $x87)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x56 (and $x81 $x150)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x190 (and $x10 $x56)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x226 (and $x39 $x190)))
 (let (($x18 (=> $x226 $x227)))
 (not $x18)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00064000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00064003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x03ffa000)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x03ffa003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x03ffa000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x205 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x133 (or $x238 $x205)))
 (let (($x216 (= $x133 true)))
 (let (($x143 (= $x216 true)))
 (let (($x77 (forall ((input.ind-%var3449X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3449X)))
 (=> $x241 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3449X) (_ bv0 32)))))
 ))
 (let (($x119 (forall ((input.ind-%var3448X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3448X)))
 (= $x241 false)))
 ))
 (let (($x193 (and $x119 $x77)))
 (let (($x210 (= $x193 true)))
 (let (($x250 (forall ((input.ind-%var3441X (_ BitVec 32)) (input.ind-%var3442X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3441X)))
 (=> $x172 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3441X input.ind-%var3442X) false))))
 ))
 (let (($x105 (forall ((input.ind-%var3441X (_ BitVec 32)) (input.ind-%var3443X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3441X input.ind-%var3443X)))
 (let (($x172 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3441X)))
 (=> (and $x172 $x97) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3441X input.ind-%var3443X) (_ bv0 32))))))
 ))
 (let (($x94 (forall ((input.ind-%var3440X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3440X)))
 (= $x130 false)))
 ))
 (let (($x107 (and (and $x94 $x105) $x250)))
 (let (($x108 (= $x107 true)))
 (let (($x195 (forall ((input.ind-%var3428X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3428X)))
 (= $x130 false)))
 ))
 (let (($x150 (forall ((input.ind-%var3429X (_ BitVec 32)) (input.ind-%var3430X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3429X)))
 (=> $x172 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3429X input.ind-%var3430X) false))))
 ))
 (let (($x188 (forall ((input.ind-%var3429X (_ BitVec 32)) (input.ind-%var3431X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3429X input.ind-%var3431X)))
 (let (($x172 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3429X)))
 (=> (and $x172 $x97) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3429X input.ind-%var3431X) (_ bv0 32))))))
 ))
 (let (($x227 (and (and $x188 $x150) $x195)))
 (let (($x18 (= $x227 true)))
 (let (($x175 (forall ((input.ind-%var3419X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3419X)))
 (=> $x241 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3419X) (_ bv0 32)))))
 ))
 (let (($x254 (forall ((input.ind-%var3418X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3418X)))
 (= $x241 false)))
 ))
 (let (($x148 (and $x254 $x175)))
 (let (($x8 (= $x148 true)))
 (let ((?x141 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x141)))
 (let (($x171 (= ?x140 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x136 (= $x171 true)))
 (let (($x102 (= $x136 true)))
 (let ((?x67 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x67)))
 (let (($x34 (= ?x61 input.dst.llvm-%n)))
 (let (($x156 (= $x34 true)))
 (let (($x95 (= $x156 true)))
 (let (($x167 (= ?x61 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x174 (= $x167 true)))
 (let (($x162 (= $x174 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x98)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x13 $x129)))
 (let (($x58 (and $x76 $x72)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x93 $x58)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x168 $x68)))))))
 (let (($x16 (and $x25 $x26)))
 (let (($x74 (= $x16 true)))
 (let (($x60 (= $x74 true)))
 (let (($x161 (= $x60 true)))
 (let ((?x31 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x31)))
 (let (($x48 (= ?x7 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x48 true)))
 (let (($x147 (= $x66 true)))
 (let (($x51 (and $x147 $x161)))
 (let (($x103 (and $x51 $x162)))
 (let (($x6 (and $x103 $x95)))
 (let (($x123 (and $x6 $x102)))
 (let (($x224 (and $x123 $x8)))
 (let (($x142 (and $x224 $x18)))
 (let (($x245 (and $x142 $x108)))
 (let (($x204 (and $x245 $x210)))
 (let (($x12 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x223 (and $x12 $x204)))
 (let (($x15 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x83 (and $x15 $x223)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x149 (and $x45 $x83)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x49 (and $x19 $x149)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x173 (and $x37 $x49)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x114 (and $x41 $x173)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x73 (and $x57 $x114)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x203 (and $x71 $x73)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x201 (and $x80 $x203)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x155 (and $x10 $x201)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x32 (and $x110 $x155)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x79 (and $x21 $x32)))
 (let (($x181 (=> $x79 $x143)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x205 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x133 (or $x238 $x205)))
 (let (($x216 (= $x133 true)))
 (let (($x143 (= $x216 true)))
 (let (($x77 (forall ((input.ind-%var3449X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3449X)))
 (=> $x241 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3449X) (_ bv0 32)))))
 ))
 (let (($x119 (forall ((input.ind-%var3448X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3448X)))
 (= $x241 false)))
 ))
 (let (($x193 (and $x119 $x77)))
 (let (($x210 (= $x193 true)))
 (let (($x250 (forall ((input.ind-%var3441X (_ BitVec 32)) (input.ind-%var3442X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3441X)))
 (=> $x172 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3441X input.ind-%var3442X) false))))
 ))
 (let (($x105 (forall ((input.ind-%var3441X (_ BitVec 32)) (input.ind-%var3443X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3441X input.ind-%var3443X)))
 (let (($x172 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3441X)))
 (=> (and $x172 $x97) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3441X input.ind-%var3443X) (_ bv0 32))))))
 ))
 (let (($x94 (forall ((input.ind-%var3440X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3440X)))
 (= $x130 false)))
 ))
 (let (($x107 (and (and $x94 $x105) $x250)))
 (let (($x108 (= $x107 true)))
 (let (($x195 (forall ((input.ind-%var3428X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3428X)))
 (= $x130 false)))
 ))
 (let (($x150 (forall ((input.ind-%var3429X (_ BitVec 32)) (input.ind-%var3430X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3429X)))
 (=> $x172 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3429X input.ind-%var3430X) false))))
 ))
 (let (($x188 (forall ((input.ind-%var3429X (_ BitVec 32)) (input.ind-%var3431X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3429X input.ind-%var3431X)))
 (let (($x172 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3429X)))
 (=> (and $x172 $x97) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3429X input.ind-%var3431X) (_ bv0 32))))))
 ))
 (let (($x227 (and (and $x188 $x150) $x195)))
 (let (($x18 (= $x227 true)))
 (let (($x175 (forall ((input.ind-%var3419X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3419X)))
 (=> $x241 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3419X) (_ bv0 32)))))
 ))
 (let (($x254 (forall ((input.ind-%var3418X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3418X)))
 (= $x241 false)))
 ))
 (let (($x148 (and $x254 $x175)))
 (let (($x8 (= $x148 true)))
 (let ((?x141 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x141)))
 (let (($x171 (= ?x140 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x136 (= $x171 true)))
 (let (($x102 (= $x136 true)))
 (let ((?x67 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x67)))
 (let (($x34 (= ?x61 input.dst.llvm-%n)))
 (let (($x156 (= $x34 true)))
 (let (($x95 (= $x156 true)))
 (let (($x167 (= ?x61 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x174 (= $x167 true)))
 (let (($x162 (= $x174 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x98)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x13 $x129)))
 (let (($x58 (and $x76 $x72)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x93 $x58)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x168 $x68)))))))
 (let (($x16 (and $x25 $x26)))
 (let (($x74 (= $x16 true)))
 (let (($x60 (= $x74 true)))
 (let (($x161 (= $x60 true)))
 (let ((?x31 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x31)))
 (let (($x48 (= ?x7 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x48 true)))
 (let (($x147 (= $x66 true)))
 (let (($x51 (and $x147 $x161)))
 (let (($x103 (and $x51 $x162)))
 (let (($x6 (and $x103 $x95)))
 (let (($x123 (and $x6 $x102)))
 (let (($x224 (and $x123 $x8)))
 (let (($x142 (and $x224 $x18)))
 (let (($x245 (and $x142 $x108)))
 (let (($x204 (and $x245 $x210)))
 (let (($x12 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x223 (and $x12 $x204)))
 (let (($x15 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x83 (and $x15 $x223)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x149 (and $x45 $x83)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x49 (and $x19 $x149)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x173 (and $x37 $x49)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x114 (and $x41 $x173)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x73 (and $x57 $x114)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x203 (and $x71 $x73)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x201 (and $x80 $x203)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x155 (and $x10 $x201)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x32 (and $x110 $x155)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x79 (and $x21 $x32)))
 (let (($x181 (=> $x79 $x143)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 143 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x178 (ite $x131 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x257 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x229 (ite $x257 ?x178 (_ bv0 32))))
 (let (($x225 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x229)))
 (let (($x101 (= $x225 true)))
 (let (($x187 (= $x101 true)))
 (let (($x255 (forall ((input.ind-%var3603X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3603X)))
 (=> $x152 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3603X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var3602X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3602X)))
 (= $x152 false)))
 ))
 (let (($x228 (and $x82 $x255)))
 (let (($x99 (= $x228 true)))
 (let (($x120 (forall ((input.ind-%var3595X (_ BitVec 32)) (input.ind-%var3597X (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3595X input.ind-%var3597X)))
 (let (($x114 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3595X)))
 (=> (and $x114 $x77) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3595X input.ind-%var3597X) (_ bv0 32))))))
 ))
 (let (($x135 (forall ((input.ind-%var3594X (_ BitVec 32)) )(let (($x250 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3594X)))
 (= $x250 false)))
 ))
 (let (($x159 (forall ((input.ind-%var3595X (_ BitVec 32)) (input.ind-%var3596X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3595X)))
 (=> $x114 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3595X input.ind-%var3596X) false))))
 ))
 (let (($x86 (and (and $x159 $x135) $x120)))
 (let (($x243 (= $x86 true)))
 (let (($x111 (forall ((input.ind-%var3582X (_ BitVec 32)) )(let (($x250 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3582X)))
 (= $x250 false)))
 ))
 (let (($x216 (forall ((input.ind-%var3583X (_ BitVec 32)) (input.ind-%var3584X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3583X)))
 (=> $x114 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3583X input.ind-%var3584X) false))))
 ))
 (let (($x201 (forall ((input.ind-%var3583X (_ BitVec 32)) (input.ind-%var3585X (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3583X input.ind-%var3585X)))
 (let (($x114 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3583X)))
 (=> (and $x114 $x77) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3583X input.ind-%var3585X) (_ bv0 32))))))
 ))
 (let (($x234 (and (and $x201 $x216) $x111)))
 (let (($x126 (= $x234 true)))
 (let (($x195 (forall ((input.ind-%var3573X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3573X)))
 (=> $x152 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3573X) (_ bv0 32)))))
 ))
 (let (($x138 (forall ((input.ind-%var3572X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3572X)))
 (= $x152 false)))
 ))
 (let (($x227 (and $x138 $x195)))
 (let (($x18 (= $x227 true)))
 (let ((?x241 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x241)))
 (let (($x165 (= ?x42 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x164 (= $x165 true)))
 (let (($x5 (= $x164 true)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x6)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x103 $x156)))
 (let (($x141 (and $x95 $x85)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x98 $x141)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x161)))))))
 (let (($x100 (and $x162 $x140)))
 (let (($x171 (= $x100 true)))
 (let (($x136 (= $x171 true)))
 (let (($x102 (= $x136 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x68)))
 (let (($x35 (= ?x24 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x93 (= $x35 true)))
 (let (($x13 (= $x93 true)))
 (let (($x69 (= ?x24 input.dst.llvm-%n)))
 (let (($x44 (= $x69 true)))
 (let (($x88 (= $x44 true)))
 (let ((?x78 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x78)))
 (let (($x20 (= ?x30 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x20 true)))
 (let (($x168 (= $x43 true)))
 (let (($x7 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x125 (not $x7)))
 (let (($x48 (= $x125 true)))
 (let (($x66 (= $x48 true)))
 (let (($x147 (= $x66 true)))
 (let (($x33 (and $x147 $x168)))
 (let (($x25 (and $x33 $x88)))
 (let (($x59 (and $x25 $x13)))
 (let (($x123 (and $x59 $x102)))
 (let (($x175 (and $x123 $x5)))
 (let (($x142 (and $x175 $x18)))
 (let (($x213 (and $x142 $x126)))
 (let (($x242 (and $x213 $x243)))
 (let (($x246 (and $x242 $x99)))
 (let (($x29 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x239 (and $x29 $x246)))
 (let (($x15 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x198 (and $x15 $x239)))
 (let (($x45 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x55 (and $x45 $x198)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x244 (and $x50 $x55)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x209 (and $x11 $x244)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x96 (and $x65 $x209)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x106 (and $x17 $x96)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x248 (and $x54 $x106)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x84 (and $x70 $x248)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x202 (and $x81 $x84)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x113 (and $x62 $x202)))
 (let (($x240 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x157 (and $x240 $x113)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x116 (and $x21 $x157)))
 (let (($x128 (=> $x116 $x187)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x178 (ite $x131 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x257 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x229 (ite $x257 ?x178 (_ bv0 32))))
 (let (($x225 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x229)))
 (let (($x101 (= $x225 true)))
 (let (($x187 (= $x101 true)))
 (let (($x255 (forall ((input.ind-%var3603X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3603X)))
 (=> $x152 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3603X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var3602X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3602X)))
 (= $x152 false)))
 ))
 (let (($x228 (and $x82 $x255)))
 (let (($x99 (= $x228 true)))
 (let (($x120 (forall ((input.ind-%var3595X (_ BitVec 32)) (input.ind-%var3597X (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3595X input.ind-%var3597X)))
 (let (($x114 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3595X)))
 (=> (and $x114 $x77) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3595X input.ind-%var3597X) (_ bv0 32))))))
 ))
 (let (($x135 (forall ((input.ind-%var3594X (_ BitVec 32)) )(let (($x250 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3594X)))
 (= $x250 false)))
 ))
 (let (($x159 (forall ((input.ind-%var3595X (_ BitVec 32)) (input.ind-%var3596X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3595X)))
 (=> $x114 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3595X input.ind-%var3596X) false))))
 ))
 (let (($x86 (and (and $x159 $x135) $x120)))
 (let (($x243 (= $x86 true)))
 (let (($x111 (forall ((input.ind-%var3582X (_ BitVec 32)) )(let (($x250 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3582X)))
 (= $x250 false)))
 ))
 (let (($x216 (forall ((input.ind-%var3583X (_ BitVec 32)) (input.ind-%var3584X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3583X)))
 (=> $x114 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3583X input.ind-%var3584X) false))))
 ))
 (let (($x201 (forall ((input.ind-%var3583X (_ BitVec 32)) (input.ind-%var3585X (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3583X input.ind-%var3585X)))
 (let (($x114 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3583X)))
 (=> (and $x114 $x77) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3583X input.ind-%var3585X) (_ bv0 32))))))
 ))
 (let (($x234 (and (and $x201 $x216) $x111)))
 (let (($x126 (= $x234 true)))
 (let (($x195 (forall ((input.ind-%var3573X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3573X)))
 (=> $x152 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3573X) (_ bv0 32)))))
 ))
 (let (($x138 (forall ((input.ind-%var3572X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3572X)))
 (= $x152 false)))
 ))
 (let (($x227 (and $x138 $x195)))
 (let (($x18 (= $x227 true)))
 (let ((?x241 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x241)))
 (let (($x165 (= ?x42 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x164 (= $x165 true)))
 (let (($x5 (= $x164 true)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x6)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x103 $x156)))
 (let (($x141 (and $x95 $x85)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x98 $x141)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x161)))))))
 (let (($x100 (and $x162 $x140)))
 (let (($x171 (= $x100 true)))
 (let (($x136 (= $x171 true)))
 (let (($x102 (= $x136 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x68)))
 (let (($x35 (= ?x24 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x93 (= $x35 true)))
 (let (($x13 (= $x93 true)))
 (let (($x69 (= ?x24 input.dst.llvm-%n)))
 (let (($x44 (= $x69 true)))
 (let (($x88 (= $x44 true)))
 (let ((?x78 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x78)))
 (let (($x20 (= ?x30 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x20 true)))
 (let (($x168 (= $x43 true)))
 (let (($x7 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x125 (not $x7)))
 (let (($x48 (= $x125 true)))
 (let (($x66 (= $x48 true)))
 (let (($x147 (= $x66 true)))
 (let (($x33 (and $x147 $x168)))
 (let (($x25 (and $x33 $x88)))
 (let (($x59 (and $x25 $x13)))
 (let (($x123 (and $x59 $x102)))
 (let (($x175 (and $x123 $x5)))
 (let (($x142 (and $x175 $x18)))
 (let (($x213 (and $x142 $x126)))
 (let (($x242 (and $x213 $x243)))
 (let (($x246 (and $x242 $x99)))
 (let (($x29 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x239 (and $x29 $x246)))
 (let (($x15 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x198 (and $x15 $x239)))
 (let (($x45 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x55 (and $x45 $x198)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x244 (and $x50 $x55)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x209 (and $x11 $x244)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x96 (and $x65 $x209)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x106 (and $x17 $x96)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x248 (and $x54 $x106)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x84 (and $x70 $x248)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x202 (and $x81 $x84)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x113 (and $x62 $x202)))
 (let (($x240 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x157 (and $x240 $x113)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x116 (and $x21 $x157)))
 (let (($x128 (=> $x116 $x187)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 153 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (not $x36)))
 (let (($x253 (or $x36 $x118)))
 (let (($x245 (= $x253 true)))
 (let (($x210 (= $x245 true)))
 (let (($x181 (forall ((input.ind-%var3721X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3721X)))
 (=> $x164 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3721X) (_ bv0 32)))))
 ))
 (let (($x247 (forall ((input.ind-%var3720X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3720X)))
 (= $x164 false)))
 ))
 (let (($x204 (and $x247 $x181)))
 (let (($x32 (= $x204 true)))
 (let (($x211 (forall ((input.ind-%var3713X (_ BitVec 32)) (input.ind-%var3715X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3713X input.ind-%var3715X)))
 (let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3713X)))
 (=> (and $x86 $x213) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3713X input.ind-%var3715X) (_ bv0 32))))))
 ))
 (let (($x183 (forall ((input.ind-%var3713X (_ BitVec 32)) (input.ind-%var3714X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3713X)))
 (=> $x86 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3713X input.ind-%var3714X) false))))
 ))
 (let (($x131 (forall ((input.ind-%var3712X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3712X)))
 (= $x203 false)))
 ))
 (let (($x94 (and (and $x131 $x183) $x211)))
 (let (($x155 (= $x94 true)))
 (let (($x106 (forall ((input.ind-%var3701X (_ BitVec 32)) (input.ind-%var3703X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3701X input.ind-%var3703X)))
 (let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3701X)))
 (=> (and $x86 $x213) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3701X input.ind-%var3703X) (_ bv0 32))))))
 ))
 (let (($x242 (forall ((input.ind-%var3701X (_ BitVec 32)) (input.ind-%var3702X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3701X)))
 (=> $x86 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3701X input.ind-%var3702X) false))))
 ))
 (let (($x216 (forall ((input.ind-%var3700X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3700X)))
 (= $x203 false)))
 ))
 (let (($x84 (and (and $x216 $x242) $x106)))
 (let (($x202 (= $x84 true)))
 (let (($x119 (forall ((input.ind-%var3691X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3691X)))
 (=> $x164 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3691X) (_ bv0 32)))))
 ))
 (let (($x152 (forall ((input.ind-%var3690X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3690X)))
 (= $x164 false)))
 ))
 (let (($x114 (and $x152 $x119)))
 (let (($x77 (= $x114 true)))
 (let ((?x100 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x171 (bvneg ?x100)))
 (let (($x102 (= ?x171 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x102 true)))
 (let (($x137 (= $x123 true)))
 (let ((?x66 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x66)))
 (let (($x95 (= ?x147 input.dst.llvm-%n)))
 (let (($x6 (= $x95 true)))
 (let (($x85 (= $x6 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x67)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x74 $x161)))
 (let (($x167 (and $x51 $x61)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x68 $x167)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x93)))))))
 (let (($x76 (and $x26 $x162)))
 (let (($x98 (= $x76 true)))
 (let (($x103 (= $x98 true)))
 (let (($x75 (= $x103 true)))
 (let (($x23 (= ?x147 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x78 (= $x23 true)))
 (let (($x30 (= $x78 true)))
 (let ((?x29 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x29)))
 (let (($x7 (= ?x9 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x125 (= $x7 true)))
 (let (($x48 (= $x125 true)))
 (let (($x20 (and $x48 $x30)))
 (let (($x34 (and $x20 $x75)))
 (let (($x141 (and $x34 $x85)))
 (let (($x241 (and $x141 $x137)))
 (let (($x73 (and $x241 $x77)))
 (let (($x113 (and $x73 $x202)))
 (let (($x27 (and $x113 $x155)))
 (let (($x89 (and $x27 $x32)))
 (let (($x45 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x226 (and $x45 $x89)))
 (let (($x50 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x251 (and $x50 $x226)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x153 (and $x40 $x251)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x190 (and $x37 $x153)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x121 (and $x41 $x190)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x220 (and $x57 $x121)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x144 (and $x71 $x220)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x249 (and $x80 $x144)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x79 (and $x10 $x249)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x149 (and $x110 $x79)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x252 (and $x39 $x149)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x238 (and $x47 $x252)))
 (let (($x49 (=> $x238 $x210)))
 (not $x49))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (not $x36)))
 (let (($x253 (or $x36 $x118)))
 (let (($x245 (= $x253 true)))
 (let (($x210 (= $x245 true)))
 (let (($x181 (forall ((input.ind-%var3721X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3721X)))
 (=> $x164 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3721X) (_ bv0 32)))))
 ))
 (let (($x247 (forall ((input.ind-%var3720X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3720X)))
 (= $x164 false)))
 ))
 (let (($x204 (and $x247 $x181)))
 (let (($x32 (= $x204 true)))
 (let (($x211 (forall ((input.ind-%var3713X (_ BitVec 32)) (input.ind-%var3715X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3713X input.ind-%var3715X)))
 (let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3713X)))
 (=> (and $x86 $x213) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3713X input.ind-%var3715X) (_ bv0 32))))))
 ))
 (let (($x183 (forall ((input.ind-%var3713X (_ BitVec 32)) (input.ind-%var3714X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3713X)))
 (=> $x86 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3713X input.ind-%var3714X) false))))
 ))
 (let (($x131 (forall ((input.ind-%var3712X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3712X)))
 (= $x203 false)))
 ))
 (let (($x94 (and (and $x131 $x183) $x211)))
 (let (($x155 (= $x94 true)))
 (let (($x106 (forall ((input.ind-%var3701X (_ BitVec 32)) (input.ind-%var3703X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3701X input.ind-%var3703X)))
 (let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3701X)))
 (=> (and $x86 $x213) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3701X input.ind-%var3703X) (_ bv0 32))))))
 ))
 (let (($x242 (forall ((input.ind-%var3701X (_ BitVec 32)) (input.ind-%var3702X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3701X)))
 (=> $x86 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3701X input.ind-%var3702X) false))))
 ))
 (let (($x216 (forall ((input.ind-%var3700X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3700X)))
 (= $x203 false)))
 ))
 (let (($x84 (and (and $x216 $x242) $x106)))
 (let (($x202 (= $x84 true)))
 (let (($x119 (forall ((input.ind-%var3691X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3691X)))
 (=> $x164 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3691X) (_ bv0 32)))))
 ))
 (let (($x152 (forall ((input.ind-%var3690X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3690X)))
 (= $x164 false)))
 ))
 (let (($x114 (and $x152 $x119)))
 (let (($x77 (= $x114 true)))
 (let ((?x100 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x171 (bvneg ?x100)))
 (let (($x102 (= ?x171 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x102 true)))
 (let (($x137 (= $x123 true)))
 (let ((?x66 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x66)))
 (let (($x95 (= ?x147 input.dst.llvm-%n)))
 (let (($x6 (= $x95 true)))
 (let (($x85 (= $x6 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x67)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x74 $x161)))
 (let (($x167 (and $x51 $x61)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x68 $x167)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x93)))))))
 (let (($x76 (and $x26 $x162)))
 (let (($x98 (= $x76 true)))
 (let (($x103 (= $x98 true)))
 (let (($x75 (= $x103 true)))
 (let (($x23 (= ?x147 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x78 (= $x23 true)))
 (let (($x30 (= $x78 true)))
 (let ((?x29 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x29)))
 (let (($x7 (= ?x9 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x125 (= $x7 true)))
 (let (($x48 (= $x125 true)))
 (let (($x20 (and $x48 $x30)))
 (let (($x34 (and $x20 $x75)))
 (let (($x141 (and $x34 $x85)))
 (let (($x241 (and $x141 $x137)))
 (let (($x73 (and $x241 $x77)))
 (let (($x113 (and $x73 $x202)))
 (let (($x27 (and $x113 $x155)))
 (let (($x89 (and $x27 $x32)))
 (let (($x45 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x226 (and $x45 $x89)))
 (let (($x50 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x251 (and $x50 $x226)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x153 (and $x40 $x251)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x190 (and $x37 $x153)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x121 (and $x41 $x190)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x220 (and $x57 $x121)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x144 (and $x71 $x220)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x249 (and $x80 $x144)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x79 (and $x10 $x249)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x149 (and $x110 $x79)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x252 (and $x39 $x149)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x238 (and $x47 $x252)))
 (let (($x49 (=> $x238 $x210)))
 (not $x49))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 143 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x93)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x174 $x35)))
 (let (($x59 (and $x88 $x13)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x69 $x59)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x48)))))))
 (let (($x5 (and $x20 $x72)))
 (let (($x117 (= $x5 true)))
 (let (($x201 (= $x117 true)))
 (let (($x144 (forall ((input.ind-%var3739X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3739X)))
 (=> $x94 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3739X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var3738X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3738X)))
 (= $x94 false)))
 ))
 (let (($x249 (and $x181 $x144)))
 (let (($x79 (= $x249 true)))
 (let (($x84 (forall ((input.ind-%var3731X (_ BitVec 32)) (input.ind-%var3733X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3731X input.ind-%var3733X)))
 (let (($x133 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3731X)))
 (=> (and $x133 $x119) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3731X input.ind-%var3733X) (_ bv0 32))))))
 ))
 (let (($x126 (forall ((input.ind-%var3731X (_ BitVec 32)) (input.ind-%var3732X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3731X)))
 (=> $x133 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3731X input.ind-%var3732X) false))))
 ))
 (let (($x165 (forall ((input.ind-%var3730X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3730X)))
 (= $x102 false)))
 ))
 (let (($x113 (and (and $x165 $x126) $x84)))
 (let (($x131 (= $x113 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x167 (concat ?x51 (concat ?x74 ?x33)))))
 (let (($x6 (= ?x162 input.dst.llvm-%n)))
 (let (($x85 (= $x6 true)))
 (let (($x141 (= $x85 true)))
 (let (($x76 (= input.dst.llvm-%n ?x162)))
 (let (($x75 (and (and (and $x20 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x72) $x76)))
 (let (($x34 (= $x75 true)))
 (let (($x156 (= $x34 true)))
 (let (($x95 (= $x156 true)))
 (let (($x140 (and $x95 $x141)))
 (let (($x183 (and $x140 $x131)))
 (let (($x149 (and $x183 $x79)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x252 (and $x19 $x149)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x238 (and $x65 $x252)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x36 (and $x17 $x238)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x118 (and $x54 $x36)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x253 (and $x70 $x118)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x245 (and $x81 $x253)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x210 (and $x62 $x245)))
 (let (($x240 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x49 (and $x240 $x210)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x158 (and $x64 $x49)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x168 (and $x43 $x158)))
 (let (($x159 (=> $x168 $x201)))
 (not $x159)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x93)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x174 $x35)))
 (let (($x59 (and $x88 $x13)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x69 $x59)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x48)))))))
 (let (($x5 (and $x20 $x72)))
 (let (($x117 (= $x5 true)))
 (let (($x201 (= $x117 true)))
 (let (($x144 (forall ((input.ind-%var3739X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3739X)))
 (=> $x94 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3739X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var3738X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3738X)))
 (= $x94 false)))
 ))
 (let (($x249 (and $x181 $x144)))
 (let (($x79 (= $x249 true)))
 (let (($x84 (forall ((input.ind-%var3731X (_ BitVec 32)) (input.ind-%var3733X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3731X input.ind-%var3733X)))
 (let (($x133 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3731X)))
 (=> (and $x133 $x119) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3731X input.ind-%var3733X) (_ bv0 32))))))
 ))
 (let (($x126 (forall ((input.ind-%var3731X (_ BitVec 32)) (input.ind-%var3732X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3731X)))
 (=> $x133 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3731X input.ind-%var3732X) false))))
 ))
 (let (($x165 (forall ((input.ind-%var3730X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3730X)))
 (= $x102 false)))
 ))
 (let (($x113 (and (and $x165 $x126) $x84)))
 (let (($x131 (= $x113 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x167 (concat ?x51 (concat ?x74 ?x33)))))
 (let (($x6 (= ?x162 input.dst.llvm-%n)))
 (let (($x85 (= $x6 true)))
 (let (($x141 (= $x85 true)))
 (let (($x76 (= input.dst.llvm-%n ?x162)))
 (let (($x75 (and (and (and $x20 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x72) $x76)))
 (let (($x34 (= $x75 true)))
 (let (($x156 (= $x34 true)))
 (let (($x95 (= $x156 true)))
 (let (($x140 (and $x95 $x141)))
 (let (($x183 (and $x140 $x131)))
 (let (($x149 (and $x183 $x79)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x252 (and $x19 $x149)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x238 (and $x65 $x252)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x36 (and $x17 $x238)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x118 (and $x54 $x36)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x253 (and $x70 $x118)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x245 (and $x81 $x253)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x210 (and $x62 $x245)))
 (let (($x240 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x49 (and $x240 $x210)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x158 (and $x64 $x49)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x168 (and $x43 $x158)))
 (let (($x159 (=> $x168 $x201)))
 (not $x159)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x32 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x190 (bvneg ?x32)))
 (let (($x237 (= ?x190 input.spec-%var-n-1)))
 (let (($x130 (= $x237 true)))
 (let (($x171 (forall ((input.ind-%var3757X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3757X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3757X) (_ bv0 32)))))
 ))
 (let (($x155 (forall ((input.ind-%var3756X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3756X)))
 (= $x159 false)))
 ))
 (let (($x137 (and $x155 $x171)))
 (let (($x18 (= $x137 true)))
 (let (($x210 (forall ((input.ind-%var3749X (_ BitVec 32)) (input.ind-%var3751X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3749X input.ind-%var3751X)))
 (let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3749X)))
 (=> (and $x181 $x113) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3749X input.ind-%var3751X) (_ bv0 32))))))
 ))
 (let (($x121 (forall ((input.ind-%var3749X (_ BitVec 32)) (input.ind-%var3750X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3749X)))
 (=> $x181 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3749X input.ind-%var3750X) false))))
 ))
 (let (($x126 (forall ((input.ind-%var3748X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3748X)))
 (= $x133 false)))
 ))
 (let (($x158 (and (and $x126 $x121) $x210)))
 (let (($x168 (= $x158 true)))
 (let ((?x9 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x45 (concat ?x147 (concat ?x125 ?x9)))))
 (let (($x156 (= input.dst.llvm-%n ?x15)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x162)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x74 $x60)))
 (let (($x75 (and $x67 $x76)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x35 $x75)))
 (let (($x25 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x58)))))))
 (let (($x85 (and (and (and $x68 $x25) $x34) $x156)))
 (let (($x141 (= $x85 true)))
 (let (($x140 (= $x141 true)))
 (let (($x136 (= $x140 true)))
 (let (($x24 (= ?x15 input.dst.llvm-%n)))
 (let (($x69 (= $x24 true)))
 (let (($x174 (= $x69 true)))
 (let (($x102 (and $x174 $x136)))
 (let (($x5 (and $x102 $x168)))
 (let (($x77 (and $x5 $x18)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x188 (and $x11 $x77)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x211 (and $x41 $x188)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x243 (and $x57 $x211)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x209 (and $x71 $x243)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x152 (and $x80 $x209)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x73 (and $x10 $x152)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x27 (and $x110 $x73)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x153 (and $x39 $x27)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x213 (and $x169 $x153)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x120 (and $x40 $x213)))
 (let (($x139 (=> $x120 $x130)))
 (not $x139)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x32 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x190 (bvneg ?x32)))
 (let (($x237 (= ?x190 input.spec-%var-n-1)))
 (let (($x130 (= $x237 true)))
 (let (($x171 (forall ((input.ind-%var3757X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3757X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3757X) (_ bv0 32)))))
 ))
 (let (($x155 (forall ((input.ind-%var3756X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3756X)))
 (= $x159 false)))
 ))
 (let (($x137 (and $x155 $x171)))
 (let (($x18 (= $x137 true)))
 (let (($x210 (forall ((input.ind-%var3749X (_ BitVec 32)) (input.ind-%var3751X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3749X input.ind-%var3751X)))
 (let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3749X)))
 (=> (and $x181 $x113) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3749X input.ind-%var3751X) (_ bv0 32))))))
 ))
 (let (($x121 (forall ((input.ind-%var3749X (_ BitVec 32)) (input.ind-%var3750X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3749X)))
 (=> $x181 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3749X input.ind-%var3750X) false))))
 ))
 (let (($x126 (forall ((input.ind-%var3748X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3748X)))
 (= $x133 false)))
 ))
 (let (($x158 (and (and $x126 $x121) $x210)))
 (let (($x168 (= $x158 true)))
 (let ((?x9 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x45 (concat ?x147 (concat ?x125 ?x9)))))
 (let (($x156 (= input.dst.llvm-%n ?x15)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x162)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x74 $x60)))
 (let (($x75 (and $x67 $x76)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x35 $x75)))
 (let (($x25 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x58)))))))
 (let (($x85 (and (and (and $x68 $x25) $x34) $x156)))
 (let (($x141 (= $x85 true)))
 (let (($x140 (= $x141 true)))
 (let (($x136 (= $x140 true)))
 (let (($x24 (= ?x15 input.dst.llvm-%n)))
 (let (($x69 (= $x24 true)))
 (let (($x174 (= $x69 true)))
 (let (($x102 (and $x174 $x136)))
 (let (($x5 (and $x102 $x168)))
 (let (($x77 (and $x5 $x18)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x188 (and $x11 $x77)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x211 (and $x41 $x188)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x243 (and $x57 $x211)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x209 (and $x71 $x243)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x152 (and $x80 $x209)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x73 (and $x10 $x152)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x27 (and $x110 $x73)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x153 (and $x39 $x27)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x213 (and $x169 $x153)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x120 (and $x40 $x213)))
 (let (($x139 (=> $x120 $x130)))
 (not $x139)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x249 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x249)))
 (let (($x123 (= ?x36 input.dst.llvm-%n)))
 (let (($x86 (= $x123 true)))
 (let (($x114 (forall ((input.ind-%var3775X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3775X)))
 (=> $x237 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3775X) (_ bv0 32)))))
 ))
 (let (($x44 (forall ((input.ind-%var3774X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3774X)))
 (= $x237 false)))
 ))
 (let (($x241 (and $x44 $x114)))
 (let (($x165 (= $x241 true)))
 (let (($x27 (forall ((input.ind-%var3767X (_ BitVec 32)) (input.ind-%var3769X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3767X input.ind-%var3769X)))
 (let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3767X)))
 (=> (and $x155 $x158) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3767X input.ind-%var3769X) (_ bv0 32))))))
 ))
 (let (($x89 (forall ((input.ind-%var3767X (_ BitVec 32)) (input.ind-%var3768X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3767X)))
 (=> $x155 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3767X input.ind-%var3768X) false))))
 ))
 (let (($x121 (forall ((input.ind-%var3766X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3766X)))
 (= $x181 false)))
 ))
 (let (($x213 (and (and $x121 $x89) $x27)))
 (let (($x120 (= $x213 true)))
 (let ((?x161 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x162 (concat ?x33 (concat ?x25 ?x161)))))
 (let (($x136 (= ?x76 input.dst.llvm-%n)))
 (let (($x102 (= $x136 true)))
 (let (($x142 (= $x102 true)))
 (let (($x75 (= input.dst.llvm-%n ?x76)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x103)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x88 $x13)))
 (let (($x58 (and $x72 $x59)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x174 $x58)))
 (let (($x78 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x125)))))))
 (let (($x156 (and (and (and $x24 $x78) $x61) $x75)))
 (let (($x85 (= $x156 true)))
 (let (($x141 (= $x85 true)))
 (let (($x140 (= $x141 true)))
 (let (($x133 (and $x140 $x142)))
 (let (($x246 (and $x133 $x120)))
 (let (($x203 (and $x246 $x165)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x106 (and $x37 $x203)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x183 (and $x17 $x106)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x117 (and $x54 $x183)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x201 (and $x70 $x117)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x79 (and $x81 $x201)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x238 (and $x62 $x79)))
 (let (($x240 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x242 (and $x240 $x238)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x94 (and $x64 $x242)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x50 (and $x47 $x94)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x224 (and $x12 $x50)))
 (let (($x204 (=> $x224 $x86)))
 (not $x204)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x249 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x249)))
 (let (($x123 (= ?x36 input.dst.llvm-%n)))
 (let (($x86 (= $x123 true)))
 (let (($x114 (forall ((input.ind-%var3775X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3775X)))
 (=> $x237 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3775X) (_ bv0 32)))))
 ))
 (let (($x44 (forall ((input.ind-%var3774X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3774X)))
 (= $x237 false)))
 ))
 (let (($x241 (and $x44 $x114)))
 (let (($x165 (= $x241 true)))
 (let (($x27 (forall ((input.ind-%var3767X (_ BitVec 32)) (input.ind-%var3769X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3767X input.ind-%var3769X)))
 (let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3767X)))
 (=> (and $x155 $x158) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3767X input.ind-%var3769X) (_ bv0 32))))))
 ))
 (let (($x89 (forall ((input.ind-%var3767X (_ BitVec 32)) (input.ind-%var3768X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3767X)))
 (=> $x155 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3767X input.ind-%var3768X) false))))
 ))
 (let (($x121 (forall ((input.ind-%var3766X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3766X)))
 (= $x181 false)))
 ))
 (let (($x213 (and (and $x121 $x89) $x27)))
 (let (($x120 (= $x213 true)))
 (let ((?x161 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x162 (concat ?x33 (concat ?x25 ?x161)))))
 (let (($x136 (= ?x76 input.dst.llvm-%n)))
 (let (($x102 (= $x136 true)))
 (let (($x142 (= $x102 true)))
 (let (($x75 (= input.dst.llvm-%n ?x76)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x103)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x88 $x13)))
 (let (($x58 (and $x72 $x59)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x174 $x58)))
 (let (($x78 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x125)))))))
 (let (($x156 (and (and (and $x24 $x78) $x61) $x75)))
 (let (($x85 (= $x156 true)))
 (let (($x141 (= $x85 true)))
 (let (($x140 (= $x141 true)))
 (let (($x133 (and $x140 $x142)))
 (let (($x246 (and $x133 $x120)))
 (let (($x203 (and $x246 $x165)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x106 (and $x37 $x203)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x183 (and $x17 $x106)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x117 (and $x54 $x183)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x201 (and $x70 $x117)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x79 (and $x81 $x201)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x238 (and $x62 $x79)))
 (let (($x240 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x242 (and $x240 $x238)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x94 (and $x64 $x242)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x50 (and $x47 $x94)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x224 (and $x12 $x50)))
 (let (($x204 (=> $x224 $x86)))
 (not $x204)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x56 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x200 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x151 (bvmul ?x200 (_ bv4294967295 32))))
 (let ((?x194 (bvneg ?x151)))
 (let (($x256 (= ?x194 ?x56)))
 (let (($x38 (= $x256 true)))
 (let (($x257 (forall ((input.ind-%var3811X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3811X)))
 (=> $x237 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3811X) (_ bv0 32)))))
 ))
 (let (($x138 (forall ((input.ind-%var3810X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3810X)))
 (= $x237 false)))
 ))
 (let (($x187 (and $x138 $x257)))
 (let (($x193 (= $x187 true)))
 (let (($x234 (forall ((input.ind-%var3803X (_ BitVec 32)) (input.ind-%var3805X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3803X input.ind-%var3805X)))
 (let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3803X)))
 (=> (and $x100 $x113) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3803X input.ind-%var3805X) (_ bv0 32))))))
 ))
 (let (($x129 (forall ((input.ind-%var3803X (_ BitVec 32)) (input.ind-%var3804X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3803X)))
 (=> $x100 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3803X input.ind-%var3804X) false))))
 ))
 (let (($x170 (forall ((input.ind-%var3802X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3802X)))
 (= $x144 false)))
 ))
 (let (($x148 (and (and $x170 $x129) $x234)))
 (let (($x157 (= $x148 true)))
 (let (($x252 (forall ((input.ind-%var3791X (_ BitVec 32)) (input.ind-%var3793X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3791X input.ind-%var3793X)))
 (let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3791X)))
 (=> (and $x100 $x113) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3791X input.ind-%var3793X) (_ bv0 32))))))
 ))
 (let (($x216 (forall ((input.ind-%var3791X (_ BitVec 32)) (input.ind-%var3792X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3791X)))
 (=> $x100 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3791X input.ind-%var3792X) false))))
 ))
 (let (($x86 (forall ((input.ind-%var3790X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3790X)))
 (= $x144 false)))
 ))
 (let (($x137 (and (and $x86 $x216) $x252)))
 (let (($x243 (= $x137 true)))
 (let (($x79 (forall ((input.ind-%var3781X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3781X)))
 (=> $x237 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3781X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var3780X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3780X)))
 (= $x237 false)))
 ))
 (let (($x238 (and $x96 $x79)))
 (let (($x242 (= $x238 true)))
 (let ((?x153 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x152 (bvneg ?x153)))
 (let (($x77 (= ?x152 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x209 (= $x77 true)))
 (let (($x73 (= $x209 true)))
 (let (($x155 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (= $x155 true)))
 (let (($x26 (= $x158 true)))
 (let (($x248 (= $x26 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x140)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x156)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x76 $x85)))
 (let (($x102 (and $x141 $x136)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x58 $x102)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x74)))))))
 (let (($x133 (and $x60 $x142)))
 (let (($x84 (= $x133 true)))
 (let (($x181 (= $x84 true)))
 (let (($x226 (= $x181 true)))
 (let ((?x15 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x15)))
 (let (($x88 (= ?x24 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x93 (= $x88 true)))
 (let (($x51 (= $x93 true)))
 (let (($x78 (= ?x24 input.dst.llvm-%n)))
 (let (($x34 (= $x78 true)))
 (let (($x69 (= $x34 true)))
 (let ((?x7 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x7)))
 (let (($x9 (= ?x66 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x31 (= $x9 true)))
 (let (($x23 (= $x31 true)))
 (let (($x174 (and $x23 $x69)))
 (let (($x13 (and $x174 $x51)))
 (let (($x121 (and $x13 $x226)))
 (let (($x89 (and $x121 $x248)))
 (let (($x27 (and $x89 $x73)))
 (let (($x94 (and $x27 $x242)))
 (let (($x239 (and $x94 $x243)))
 (let (($x116 (and $x239 $x157)))
 (let (($x255 (and $x116 $x193)))
 (let (($x98 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x55 (and (not $x98) $x255)))
 (let (($x20 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x225 (and $x20 $x55)))
 (let (($x37 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x128 (and $x37 $x225)))
 (let (($x65 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x8 (and $x65 $x128)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x150 (and $x57 $x8)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x172 (and $x71 $x150)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x87 (and $x80 $x172)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x83 (and $x10 $x87)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x90 (and $x110 $x83)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x143 (and $x39 $x90)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x109 (and $x169 $x143)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x111 (and $x14 $x109)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x146 (and $x21 $x111)))
 (let (($x104 (=> $x146 $x38)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x56 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x200 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x151 (bvmul ?x200 (_ bv4294967295 32))))
 (let ((?x194 (bvneg ?x151)))
 (let (($x256 (= ?x194 ?x56)))
 (let (($x38 (= $x256 true)))
 (let (($x257 (forall ((input.ind-%var3811X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3811X)))
 (=> $x237 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3811X) (_ bv0 32)))))
 ))
 (let (($x138 (forall ((input.ind-%var3810X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3810X)))
 (= $x237 false)))
 ))
 (let (($x187 (and $x138 $x257)))
 (let (($x193 (= $x187 true)))
 (let (($x234 (forall ((input.ind-%var3803X (_ BitVec 32)) (input.ind-%var3805X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3803X input.ind-%var3805X)))
 (let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3803X)))
 (=> (and $x100 $x113) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3803X input.ind-%var3805X) (_ bv0 32))))))
 ))
 (let (($x129 (forall ((input.ind-%var3803X (_ BitVec 32)) (input.ind-%var3804X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3803X)))
 (=> $x100 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3803X input.ind-%var3804X) false))))
 ))
 (let (($x170 (forall ((input.ind-%var3802X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3802X)))
 (= $x144 false)))
 ))
 (let (($x148 (and (and $x170 $x129) $x234)))
 (let (($x157 (= $x148 true)))
 (let (($x252 (forall ((input.ind-%var3791X (_ BitVec 32)) (input.ind-%var3793X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3791X input.ind-%var3793X)))
 (let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3791X)))
 (=> (and $x100 $x113) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3791X input.ind-%var3793X) (_ bv0 32))))))
 ))
 (let (($x216 (forall ((input.ind-%var3791X (_ BitVec 32)) (input.ind-%var3792X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3791X)))
 (=> $x100 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3791X input.ind-%var3792X) false))))
 ))
 (let (($x86 (forall ((input.ind-%var3790X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3790X)))
 (= $x144 false)))
 ))
 (let (($x137 (and (and $x86 $x216) $x252)))
 (let (($x243 (= $x137 true)))
 (let (($x79 (forall ((input.ind-%var3781X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3781X)))
 (=> $x237 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3781X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var3780X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3780X)))
 (= $x237 false)))
 ))
 (let (($x238 (and $x96 $x79)))
 (let (($x242 (= $x238 true)))
 (let ((?x153 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x152 (bvneg ?x153)))
 (let (($x77 (= ?x152 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x209 (= $x77 true)))
 (let (($x73 (= $x209 true)))
 (let (($x155 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (= $x155 true)))
 (let (($x26 (= $x158 true)))
 (let (($x248 (= $x26 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x140)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x156)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x76 $x85)))
 (let (($x102 (and $x141 $x136)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x58 $x102)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x74)))))))
 (let (($x133 (and $x60 $x142)))
 (let (($x84 (= $x133 true)))
 (let (($x181 (= $x84 true)))
 (let (($x226 (= $x181 true)))
 (let ((?x15 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x15)))
 (let (($x88 (= ?x24 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x93 (= $x88 true)))
 (let (($x51 (= $x93 true)))
 (let (($x78 (= ?x24 input.dst.llvm-%n)))
 (let (($x34 (= $x78 true)))
 (let (($x69 (= $x34 true)))
 (let ((?x7 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x7)))
 (let (($x9 (= ?x66 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x31 (= $x9 true)))
 (let (($x23 (= $x31 true)))
 (let (($x174 (and $x23 $x69)))
 (let (($x13 (and $x174 $x51)))
 (let (($x121 (and $x13 $x226)))
 (let (($x89 (and $x121 $x248)))
 (let (($x27 (and $x89 $x73)))
 (let (($x94 (and $x27 $x242)))
 (let (($x239 (and $x94 $x243)))
 (let (($x116 (and $x239 $x157)))
 (let (($x255 (and $x116 $x193)))
 (let (($x98 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x55 (and (not $x98) $x255)))
 (let (($x20 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x225 (and $x20 $x55)))
 (let (($x37 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x128 (and $x37 $x225)))
 (let (($x65 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x8 (and $x65 $x128)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x150 (and $x57 $x8)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x172 (and $x71 $x150)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x87 (and $x80 $x172)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x83 (and $x10 $x87)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x90 (and $x110 $x83)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x143 (and $x39 $x90)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x109 (and $x169 $x143)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x111 (and $x14 $x109)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x146 (and $x21 $x111)))
 (let (($x104 (=> $x146 $x38)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 151 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x99 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x92 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x175 (bvmul ?x92 (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x175)))
 (let (($x135 (= ?x195 ?x99)))
 (let (($x132 (= $x135 true)))
 (let (($x223 (forall ((input.ind-%var3847X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3847X)))
 (=> $x96 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3847X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var3846X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3846X)))
 (= $x96 false)))
 ))
 (let (($x42 (and $x5 $x223)))
 (let (($x36 (= $x42 true)))
 (let (($x120 (forall ((input.ind-%var3839X (_ BitVec 32)) (input.ind-%var3841X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3839X input.ind-%var3841X)))
 (let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3839X)))
 (=> (and $x193 $x157) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3839X input.ind-%var3841X) (_ bv0 32))))))
 ))
 (let (($x220 (forall ((input.ind-%var3839X (_ BitVec 32)) (input.ind-%var3840X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3839X)))
 (=> $x193 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3839X input.ind-%var3840X) false))))
 ))
 (let (($x177 (forall ((input.ind-%var3838X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3838X)))
 (= $x149 false)))
 ))
 (let (($x97 (and (and $x177 $x220) $x120)))
 (let (($x198 (= $x97 true)))
 (let (($x146 (forall ((input.ind-%var3827X (_ BitVec 32)) (input.ind-%var3829X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3827X input.ind-%var3829X)))
 (let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3827X)))
 (=> (and $x193 $x157) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3827X input.ind-%var3829X) (_ bv0 32))))))
 ))
 (let (($x55 (forall ((input.ind-%var3827X (_ BitVec 32)) (input.ind-%var3828X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3827X)))
 (=> $x193 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3827X input.ind-%var3828X) false))))
 ))
 (let (($x243 (forall ((input.ind-%var3826X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3826X)))
 (= $x149 false)))
 ))
 (let (($x151 (and (and $x243 $x55) $x146)))
 (let (($x194 (= $x151 true)))
 (let (($x253 (forall ((input.ind-%var3817X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3817X)))
 (=> $x96 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3817X) (_ bv0 32)))))
 ))
 (let (($x79 (forall ((input.ind-%var3816X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3816X)))
 (= $x96 false)))
 ))
 (let (($x164 (and $x79 $x253)))
 (let (($x216 (= $x164 true)))
 (let ((?x153 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x152 (bvneg ?x153)))
 (let (($x77 (= ?x152 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x209 (= $x77 true)))
 (let (($x73 (= $x209 true)))
 (let ((?x121 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x210 (bvneg ?x121)))
 (let (($x158 (= ?x210 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x26 (= $x158 true)))
 (let (($x248 (= $x26 true)))
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (= $x102 true)))
 (let (($x133 (= $x142 true)))
 (let (($x84 (= $x133 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x60)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x74 $x25)))
 (let (($x58 (and $x161 $x59)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x34 $x58)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x61)))))))
 (let (($x75 (and $x67 $x76)))
 (let (($x156 (= $x75 true)))
 (let (($x85 (= $x156 true)))
 (let (($x141 (= $x85 true)))
 (let ((?x228 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x228)))
 (let (($x9 (= ?x48 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x31 (= $x9 true)))
 (let (($x23 (= $x31 true)))
 (let (($x7 (= ?x48 input.dst.llvm-%n)))
 (let (($x66 (= $x7 true)))
 (let (($x125 (= $x66 true)))
 (let (($x15 (and $x125 $x23)))
 (let (($x140 (and $x15 $x141)))
 (let (($x181 (and $x140 $x84)))
 (let (($x89 (and $x181 $x248)))
 (let (($x27 (and $x89 $x73)))
 (let (($x171 (and $x27 $x216)))
 (let (($x56 (and $x171 $x194)))
 (let (($x44 (and $x56 $x198)))
 (let (($x114 (and $x44 $x36)))
 (let (($x45 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x188 (and (not $x45) $x114)))
 (let (($x37 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x18 (and $x37 $x188)))
 (let (($x65 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x19 (and $x65 $x18)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x49 (and $x41 $x19)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x118 (and $x54 $x49)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x254 (and $x70 $x118)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x173 (and $x81 $x254)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x247 (and $x62 $x173)))
 (let (($x240 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x245 (and $x240 $x247)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x211 (and $x64 $x245)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x82 (and $x47 $x211)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x229 (and $x43 $x82)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x205 (and $x12 $x229)))
 (let (($x29 (=> $x205 $x132)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x99 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x92 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x175 (bvmul ?x92 (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x175)))
 (let (($x135 (= ?x195 ?x99)))
 (let (($x132 (= $x135 true)))
 (let (($x223 (forall ((input.ind-%var3847X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3847X)))
 (=> $x96 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3847X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var3846X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3846X)))
 (= $x96 false)))
 ))
 (let (($x42 (and $x5 $x223)))
 (let (($x36 (= $x42 true)))
 (let (($x120 (forall ((input.ind-%var3839X (_ BitVec 32)) (input.ind-%var3841X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3839X input.ind-%var3841X)))
 (let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3839X)))
 (=> (and $x193 $x157) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3839X input.ind-%var3841X) (_ bv0 32))))))
 ))
 (let (($x220 (forall ((input.ind-%var3839X (_ BitVec 32)) (input.ind-%var3840X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3839X)))
 (=> $x193 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3839X input.ind-%var3840X) false))))
 ))
 (let (($x177 (forall ((input.ind-%var3838X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3838X)))
 (= $x149 false)))
 ))
 (let (($x97 (and (and $x177 $x220) $x120)))
 (let (($x198 (= $x97 true)))
 (let (($x146 (forall ((input.ind-%var3827X (_ BitVec 32)) (input.ind-%var3829X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3827X input.ind-%var3829X)))
 (let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3827X)))
 (=> (and $x193 $x157) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3827X input.ind-%var3829X) (_ bv0 32))))))
 ))
 (let (($x55 (forall ((input.ind-%var3827X (_ BitVec 32)) (input.ind-%var3828X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3827X)))
 (=> $x193 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3827X input.ind-%var3828X) false))))
 ))
 (let (($x243 (forall ((input.ind-%var3826X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3826X)))
 (= $x149 false)))
 ))
 (let (($x151 (and (and $x243 $x55) $x146)))
 (let (($x194 (= $x151 true)))
 (let (($x253 (forall ((input.ind-%var3817X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3817X)))
 (=> $x96 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3817X) (_ bv0 32)))))
 ))
 (let (($x79 (forall ((input.ind-%var3816X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3816X)))
 (= $x96 false)))
 ))
 (let (($x164 (and $x79 $x253)))
 (let (($x216 (= $x164 true)))
 (let ((?x153 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x152 (bvneg ?x153)))
 (let (($x77 (= ?x152 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x209 (= $x77 true)))
 (let (($x73 (= $x209 true)))
 (let ((?x121 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x210 (bvneg ?x121)))
 (let (($x158 (= ?x210 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x26 (= $x158 true)))
 (let (($x248 (= $x26 true)))
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (= $x102 true)))
 (let (($x133 (= $x142 true)))
 (let (($x84 (= $x133 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x60)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x74 $x25)))
 (let (($x58 (and $x161 $x59)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x34 $x58)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x61)))))))
 (let (($x75 (and $x67 $x76)))
 (let (($x156 (= $x75 true)))
 (let (($x85 (= $x156 true)))
 (let (($x141 (= $x85 true)))
 (let ((?x228 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x228)))
 (let (($x9 (= ?x48 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x31 (= $x9 true)))
 (let (($x23 (= $x31 true)))
 (let (($x7 (= ?x48 input.dst.llvm-%n)))
 (let (($x66 (= $x7 true)))
 (let (($x125 (= $x66 true)))
 (let (($x15 (and $x125 $x23)))
 (let (($x140 (and $x15 $x141)))
 (let (($x181 (and $x140 $x84)))
 (let (($x89 (and $x181 $x248)))
 (let (($x27 (and $x89 $x73)))
 (let (($x171 (and $x27 $x216)))
 (let (($x56 (and $x171 $x194)))
 (let (($x44 (and $x56 $x198)))
 (let (($x114 (and $x44 $x36)))
 (let (($x45 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x188 (and (not $x45) $x114)))
 (let (($x37 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x18 (and $x37 $x188)))
 (let (($x65 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x19 (and $x65 $x18)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x49 (and $x41 $x19)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x118 (and $x54 $x49)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x254 (and $x70 $x118)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x173 (and $x81 $x254)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x247 (and $x62 $x173)))
 (let (($x240 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x245 (and $x240 $x247)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x211 (and $x64 $x245)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x82 (and $x47 $x211)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x229 (and $x43 $x82)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x205 (and $x12 $x229)))
 (let (($x29 (=> $x205 $x132)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 151 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x8 (not $x128)))
 (let (($x168 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x126 (not $x168)))
 (let (($x90 (or $x126 $x8)))
 (let (($x203 (= $x90 true)))
 (let (($x190 (= $x203 true)))
 (let (($x150 (forall ((input.ind-%var3883X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3883X)))
 (=> $x209 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3883X) (_ bv0 32)))))
 ))
 (let (($x241 (forall ((input.ind-%var3882X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3882X)))
 (= $x209 false)))
 ))
 (let (($x234 (and $x241 $x150)))
 (let (($x106 (= $x234 true)))
 (let (($x94 (forall ((input.ind-%var3875X (_ BitVec 32)) (input.ind-%var3877X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3875X input.ind-%var3877X)))
 (let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3875X)))
 (=> (and $x97 $x56) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3875X input.ind-%var3877X) (_ bv0 32))))))
 ))
 (let (($x30 (forall ((input.ind-%var3875X (_ BitVec 32)) (input.ind-%var3876X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3875X)))
 (=> $x97 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3875X input.ind-%var3876X) false))))
 ))
 (let (($x175 (forall ((input.ind-%var3874X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3874X)))
 (= $x187 false)))
 ))
 (let (($x170 (and (and $x175 $x30) $x94)))
 (let (($x103 (= $x170 true)))
 (let (($x173 (forall ((input.ind-%var3863X (_ BitVec 32)) (input.ind-%var3865X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3863X input.ind-%var3865X)))
 (let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3863X)))
 (=> (and $x97 $x56) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3863X input.ind-%var3865X) (_ bv0 32))))))
 ))
 (let (($x44 (forall ((input.ind-%var3863X (_ BitVec 32)) (input.ind-%var3864X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3863X)))
 (=> $x97 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3863X input.ind-%var3864X) false))))
 ))
 (let (($x109 (forall ((input.ind-%var3862X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3862X)))
 (= $x187 false)))
 ))
 (let (($x245 (and (and $x109 $x44) $x173)))
 (let (($x211 (= $x245 true)))
 (let (($x149 (forall ((input.ind-%var3853X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3853X)))
 (=> $x209 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3853X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var3852X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3852X)))
 (= $x209 false)))
 ))
 (let (($x137 (and $x96 $x149)))
 (let (($x243 (= $x137 true)))
 (let ((?x121 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x210 (bvneg ?x121)))
 (let (($x158 (= ?x210 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x26 (= $x158 true)))
 (let (($x248 (= $x26 true)))
 (let ((?x75 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x75)))
 (let (($x142 (= ?x156 input.dst.llvm-%n)))
 (let (($x133 (= $x142 true)))
 (let (($x84 (= $x133 true)))
 (let (($x85 (= ?x156 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x141 (= $x85 true)))
 (let (($x140 (= $x141 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x74)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x167 $x78)))
 (let (($x68 (and $x34 $x33)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x9 $x68)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x88)))))))
 (let (($x161 (and $x95 $x25)))
 (let (($x60 (= $x161 true)))
 (let (($x59 (= $x60 true)))
 (let (($x58 (= $x59 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x45)))
 (let (($x228 (= ?x183 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x48 (= $x228 true)))
 (let (($x147 (= $x48 true)))
 (let (($x76 (and $x147 $x58)))
 (let (($x136 (and $x76 $x140)))
 (let (($x181 (and $x136 $x84)))
 (let (($x89 (and $x181 $x248)))
 (let (($x148 (and $x89 $x243)))
 (let (($x82 (and $x148 $x211)))
 (let (($x225 (and $x82 $x103)))
 (let (($x50 (and $x225 $x106)))
 (let (($x65 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x256 (and $x65 $x50)))
 (let (($x41 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x38 (and $x41 $x256)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x250 (and $x17 $x38)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x249 (and $x71 $x250)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x252 (and $x80 $x249)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x242 (and $x10 $x252)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x131 (and $x110 $x242)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x138 (and $x39 $x131)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x83 (and $x169 $x138)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x129 (and $x14 $x83)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x257 (and $x11 $x129)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x104 (and $x21 $x257)))
 (let (($x224 (=> $x104 $x190)))
 (not $x224))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x8 (not $x128)))
 (let (($x168 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x126 (not $x168)))
 (let (($x90 (or $x126 $x8)))
 (let (($x203 (= $x90 true)))
 (let (($x190 (= $x203 true)))
 (let (($x150 (forall ((input.ind-%var3883X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3883X)))
 (=> $x209 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3883X) (_ bv0 32)))))
 ))
 (let (($x241 (forall ((input.ind-%var3882X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3882X)))
 (= $x209 false)))
 ))
 (let (($x234 (and $x241 $x150)))
 (let (($x106 (= $x234 true)))
 (let (($x94 (forall ((input.ind-%var3875X (_ BitVec 32)) (input.ind-%var3877X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3875X input.ind-%var3877X)))
 (let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3875X)))
 (=> (and $x97 $x56) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3875X input.ind-%var3877X) (_ bv0 32))))))
 ))
 (let (($x30 (forall ((input.ind-%var3875X (_ BitVec 32)) (input.ind-%var3876X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3875X)))
 (=> $x97 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3875X input.ind-%var3876X) false))))
 ))
 (let (($x175 (forall ((input.ind-%var3874X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3874X)))
 (= $x187 false)))
 ))
 (let (($x170 (and (and $x175 $x30) $x94)))
 (let (($x103 (= $x170 true)))
 (let (($x173 (forall ((input.ind-%var3863X (_ BitVec 32)) (input.ind-%var3865X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3863X input.ind-%var3865X)))
 (let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3863X)))
 (=> (and $x97 $x56) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3863X input.ind-%var3865X) (_ bv0 32))))))
 ))
 (let (($x44 (forall ((input.ind-%var3863X (_ BitVec 32)) (input.ind-%var3864X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3863X)))
 (=> $x97 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3863X input.ind-%var3864X) false))))
 ))
 (let (($x109 (forall ((input.ind-%var3862X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3862X)))
 (= $x187 false)))
 ))
 (let (($x245 (and (and $x109 $x44) $x173)))
 (let (($x211 (= $x245 true)))
 (let (($x149 (forall ((input.ind-%var3853X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3853X)))
 (=> $x209 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3853X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var3852X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3852X)))
 (= $x209 false)))
 ))
 (let (($x137 (and $x96 $x149)))
 (let (($x243 (= $x137 true)))
 (let ((?x121 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x210 (bvneg ?x121)))
 (let (($x158 (= ?x210 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x26 (= $x158 true)))
 (let (($x248 (= $x26 true)))
 (let ((?x75 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x75)))
 (let (($x142 (= ?x156 input.dst.llvm-%n)))
 (let (($x133 (= $x142 true)))
 (let (($x84 (= $x133 true)))
 (let (($x85 (= ?x156 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x141 (= $x85 true)))
 (let (($x140 (= $x141 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x74)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x167 $x78)))
 (let (($x68 (and $x34 $x33)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x9 $x68)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x88)))))))
 (let (($x161 (and $x95 $x25)))
 (let (($x60 (= $x161 true)))
 (let (($x59 (= $x60 true)))
 (let (($x58 (= $x59 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x45)))
 (let (($x228 (= ?x183 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x48 (= $x228 true)))
 (let (($x147 (= $x48 true)))
 (let (($x76 (and $x147 $x58)))
 (let (($x136 (and $x76 $x140)))
 (let (($x181 (and $x136 $x84)))
 (let (($x89 (and $x181 $x248)))
 (let (($x148 (and $x89 $x243)))
 (let (($x82 (and $x148 $x211)))
 (let (($x225 (and $x82 $x103)))
 (let (($x50 (and $x225 $x106)))
 (let (($x65 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x256 (and $x65 $x50)))
 (let (($x41 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x38 (and $x41 $x256)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x250 (and $x17 $x38)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x249 (and $x71 $x250)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x252 (and $x80 $x249)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x242 (and $x10 $x252)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x131 (and $x110 $x242)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x138 (and $x39 $x131)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x83 (and $x169 $x138)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x129 (and $x14 $x83)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x257 (and $x11 $x129)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x104 (and $x21 $x257)))
 (let (($x224 (=> $x104 $x190)))
 (not $x224))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 145 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x159 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x123 (or $x207 $x159)))
 (let (($x139 (= $x123 true)))
 (let (($x238 (= $x139 true)))
 (let (($x132 (forall ((input.ind-%var3919X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3919X)))
 (=> $x100 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3919X) (_ bv0 32)))))
 ))
 (let (($x151 (forall ((input.ind-%var3918X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3918X)))
 (= $x100 false)))
 ))
 (let (($x55 (and $x151 $x132)))
 (let (($x79 (= $x55 true)))
 (let (($x99 (forall ((input.ind-%var3911X (_ BitVec 32)) (input.ind-%var3913X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3911X input.ind-%var3913X)))
 (let (($x50 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3911X)))
 (=> (and $x50 $x225) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3911X input.ind-%var3913X) (_ bv0 32))))))
 ))
 (let (($x144 (forall ((input.ind-%var3911X (_ BitVec 32)) (input.ind-%var3912X (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3911X)))
 (=> $x50 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3911X input.ind-%var3912X) false))))
 ))
 (let (($x66 (forall ((input.ind-%var3910X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3910X)))
 (= $x254 false)))
 ))
 (let (($x86 (and (and $x66 $x144) $x99)))
 (let (($x27 (= $x86 true)))
 (let (($x126 (forall ((input.ind-%var3899X (_ BitVec 32)) (input.ind-%var3901X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3899X input.ind-%var3901X)))
 (let (($x50 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3899X)))
 (=> (and $x50 $x225) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3899X input.ind-%var3901X) (_ bv0 32))))))
 ))
 (let (($x38 (forall ((input.ind-%var3899X (_ BitVec 32)) (input.ind-%var3900X (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3899X)))
 (=> $x50 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3899X input.ind-%var3900X) false))))
 ))
 (let (($x82 (forall ((input.ind-%var3898X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3898X)))
 (= $x254 false)))
 ))
 (let (($x8 (and (and $x82 $x38) $x126)))
 (let (($x90 (= $x8 true)))
 (let (($x198 (forall ((input.ind-%var3889X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3889X)))
 (=> $x100 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3889X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var3888X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3888X)))
 (= $x100 false)))
 ))
 (let (($x44 (and $x137 $x198)))
 (let (($x247 (= $x44 true)))
 (let ((?x210 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x210)))
 (let (($x26 (= ?x155 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x26 true)))
 (let (($x89 (= $x248 true)))
 (let ((?x156 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x156)))
 (let (($x133 (= ?x85 input.dst.llvm-%n)))
 (let (($x84 (= $x133 true)))
 (let (($x181 (= $x84 true)))
 (let (($x141 (= ?x85 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x140 (= $x141 true)))
 (let (($x136 (= $x140 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x33)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x162 $x34)))
 (let (($x25 (and $x74 $x68)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x6 $x25)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x13)))))))
 (let (($x60 (and $x167 $x161)))
 (let (($x59 (= $x60 true)))
 (let (($x58 (= $x59 true)))
 (let (($x76 (= $x58 true)))
 (let ((?x20 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x20)))
 (let (($x98 (= ?x45 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x228 (= $x98 true)))
 (let (($x48 (= $x228 true)))
 (let (($x75 (and $x48 $x76)))
 (let (($x102 (and $x75 $x136)))
 (let (($x226 (and $x102 $x181)))
 (let (($x77 (and $x226 $x89)))
 (let (($x118 (and $x77 $x247)))
 (let (($x203 (and $x118 $x90)))
 (let (($x253 (and $x203 $x27)))
 (let (($x164 (and $x253 $x79)))
 (let (($x41 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x220 (and $x41 $x164)))
 (let (($x17 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x18 (and $x17 $x220)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x111 (and $x57 $x18)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x178 (and $x70 $x111)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x92 (and $x81 $x178)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x29 (and $x62 $x92)))
 (let (($x240 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x87 (and $x240 $x29)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x223 (and $x64 $x87)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x42 (and $x47 $x223)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x19 (and $x43 $x42)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x135 (and $x72 $x19)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x16 (and $x12 $x135)))
 (let (($x117 (=> $x16 $x238)))
 (not $x117))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x159 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x123 (or $x207 $x159)))
 (let (($x139 (= $x123 true)))
 (let (($x238 (= $x139 true)))
 (let (($x132 (forall ((input.ind-%var3919X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3919X)))
 (=> $x100 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3919X) (_ bv0 32)))))
 ))
 (let (($x151 (forall ((input.ind-%var3918X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3918X)))
 (= $x100 false)))
 ))
 (let (($x55 (and $x151 $x132)))
 (let (($x79 (= $x55 true)))
 (let (($x99 (forall ((input.ind-%var3911X (_ BitVec 32)) (input.ind-%var3913X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3911X input.ind-%var3913X)))
 (let (($x50 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3911X)))
 (=> (and $x50 $x225) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3911X input.ind-%var3913X) (_ bv0 32))))))
 ))
 (let (($x144 (forall ((input.ind-%var3911X (_ BitVec 32)) (input.ind-%var3912X (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3911X)))
 (=> $x50 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3911X input.ind-%var3912X) false))))
 ))
 (let (($x66 (forall ((input.ind-%var3910X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3910X)))
 (= $x254 false)))
 ))
 (let (($x86 (and (and $x66 $x144) $x99)))
 (let (($x27 (= $x86 true)))
 (let (($x126 (forall ((input.ind-%var3899X (_ BitVec 32)) (input.ind-%var3901X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3899X input.ind-%var3901X)))
 (let (($x50 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3899X)))
 (=> (and $x50 $x225) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3899X input.ind-%var3901X) (_ bv0 32))))))
 ))
 (let (($x38 (forall ((input.ind-%var3899X (_ BitVec 32)) (input.ind-%var3900X (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3899X)))
 (=> $x50 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3899X input.ind-%var3900X) false))))
 ))
 (let (($x82 (forall ((input.ind-%var3898X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3898X)))
 (= $x254 false)))
 ))
 (let (($x8 (and (and $x82 $x38) $x126)))
 (let (($x90 (= $x8 true)))
 (let (($x198 (forall ((input.ind-%var3889X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3889X)))
 (=> $x100 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3889X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var3888X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3888X)))
 (= $x100 false)))
 ))
 (let (($x44 (and $x137 $x198)))
 (let (($x247 (= $x44 true)))
 (let ((?x210 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x210)))
 (let (($x26 (= ?x155 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x26 true)))
 (let (($x89 (= $x248 true)))
 (let ((?x156 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x156)))
 (let (($x133 (= ?x85 input.dst.llvm-%n)))
 (let (($x84 (= $x133 true)))
 (let (($x181 (= $x84 true)))
 (let (($x141 (= ?x85 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x140 (= $x141 true)))
 (let (($x136 (= $x140 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x33)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x162 $x34)))
 (let (($x25 (and $x74 $x68)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x6 $x25)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x13)))))))
 (let (($x60 (and $x167 $x161)))
 (let (($x59 (= $x60 true)))
 (let (($x58 (= $x59 true)))
 (let (($x76 (= $x58 true)))
 (let ((?x20 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x20)))
 (let (($x98 (= ?x45 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x228 (= $x98 true)))
 (let (($x48 (= $x228 true)))
 (let (($x75 (and $x48 $x76)))
 (let (($x102 (and $x75 $x136)))
 (let (($x226 (and $x102 $x181)))
 (let (($x77 (and $x226 $x89)))
 (let (($x118 (and $x77 $x247)))
 (let (($x203 (and $x118 $x90)))
 (let (($x253 (and $x203 $x27)))
 (let (($x164 (and $x253 $x79)))
 (let (($x41 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x220 (and $x41 $x164)))
 (let (($x17 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x18 (and $x17 $x220)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x111 (and $x57 $x18)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x178 (and $x70 $x111)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x92 (and $x81 $x178)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x29 (and $x62 $x92)))
 (let (($x240 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x87 (and $x240 $x29)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x223 (and $x64 $x87)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x42 (and $x47 $x223)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x19 (and $x43 $x42)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x135 (and $x72 $x19)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x16 (and $x12 $x135)))
 (let (($x117 (=> $x16 $x238)))
 (not $x117))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 143 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x204 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x244 (ite $x204 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x146 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x213 (ite $x146 ?x244 (_ bv0 32))))
 (let (($x107 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x213)))
 (let (($x251 (= $x107 true)))
 (let (($x227 (= $x251 true)))
 (let (($x188 (forall ((input.ind-%var3991X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3991X)))
 (=> $x254 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3991X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var3990X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3990X)))
 (= $x254 false)))
 ))
 (let (($x153 (and $x97 $x188)))
 (let (($x249 (= $x153 true)))
 (let (($x193 (forall ((input.ind-%var3982X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3982X)))
 (= $x99 false)))
 ))
 (let (($x114 (forall ((input.ind-%var3983X (_ BitVec 32)) (input.ind-%var3984X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3983X)))
 (=> $x29 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3983X input.ind-%var3984X) false))))
 ))
 (let (($x113 (forall ((input.ind-%var3983X (_ BitVec 32)) (input.ind-%var3985X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3983X input.ind-%var3985X)))
 (let (($x29 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3983X)))
 (=> (and $x29 $x132) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3983X input.ind-%var3985X) (_ bv0 32))))))
 ))
 (let (($x190 (and (and $x113 $x114) $x193)))
 (let (($x224 (= $x190 true)))
 (let (($x216 (forall ((input.ind-%var3970X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3970X)))
 (= $x99 false)))
 ))
 (let (($x139 (forall ((input.ind-%var3971X (_ BitVec 32)) (input.ind-%var3972X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3971X)))
 (=> $x29 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3971X input.ind-%var3972X) false))))
 ))
 (let (($x42 (forall ((input.ind-%var3971X (_ BitVec 32)) (input.ind-%var3973X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3971X input.ind-%var3973X)))
 (let (($x29 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3971X)))
 (=> (and $x29 $x132) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3971X input.ind-%var3973X) (_ bv0 32))))))
 ))
 (let (($x173 (and (and $x42 $x139) $x216)))
 (let (($x241 (= $x173 true)))
 (let (($x126 (forall ((input.ind-%var3961X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3961X)))
 (=> $x254 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3961X) (_ bv0 32)))))
 ))
 (let (($x50 (forall ((input.ind-%var3960X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3960X)))
 (= $x254 false)))
 ))
 (let (($x8 (and $x50 $x126)))
 (let (($x90 (= $x8 true)))
 (let ((?x100 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x100)))
 (let (($x200 (= ?x149 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x56 (= $x200 true)))
 (let (($x120 (= $x56 true)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x226)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x102 $x84)))
 (let (($x210 (and $x181 $x121)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x33 $x210)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x76)))))))
 (let (($x158 (and $x136 $x155)))
 (let (($x26 (= $x158 true)))
 (let (($x248 (= $x26 true)))
 (let (($x89 (= $x248 true)))
 (let ((?x13 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x13)))
 (let (($x23 (= ?x93 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x6 (= $x23 true)))
 (let (($x162 (= $x6 true)))
 (let (($x61 (= ?x93 input.dst.llvm-%n)))
 (let (($x95 (= $x61 true)))
 (let (($x125 (= $x95 true)))
 (let ((?x174 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x174)))
 (let (($x35 (= ?x9 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x35 true)))
 (let (($x51 (= $x88 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (not $x45)))
 (let (($x98 (= $x183 true)))
 (let (($x228 (= $x98 true)))
 (let (($x48 (= $x228 true)))
 (let (($x69 (and $x48 $x51)))
 (let (($x167 (and $x69 $x125)))
 (let (($x67 (and $x167 $x162)))
 (let (($x77 (and $x67 $x89)))
 (let (($x198 (and $x77 $x120)))
 (let (($x203 (and $x198 $x90)))
 (let (($x138 (and $x203 $x241)))
 (let (($x5 (and $x138 $x224)))
 (let (($x252 (and $x5 $x249)))
 (let (($x65 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x129 (and $x65 $x252)))
 (let (($x17 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x255 (and $x17 $x129)))
 (let (($x57 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x201 (and $x57 $x255)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x36 (and $x54 $x201)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x205 (and $x80 $x36)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x143 (and $x10 $x205)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x195 (and $x110 $x143)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x152 (and $x39 $x195)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x237 (and $x169 $x152)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x116 (and $x14 $x237)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x101 (and $x11 $x116)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x94 (and $x24 $x101)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x130 (and $x12 $x94)))
 (let (($x105 (=> $x130 $x227)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x204 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x244 (ite $x204 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x146 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x213 (ite $x146 ?x244 (_ bv0 32))))
 (let (($x107 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x213)))
 (let (($x251 (= $x107 true)))
 (let (($x227 (= $x251 true)))
 (let (($x188 (forall ((input.ind-%var3991X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3991X)))
 (=> $x254 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3991X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var3990X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3990X)))
 (= $x254 false)))
 ))
 (let (($x153 (and $x97 $x188)))
 (let (($x249 (= $x153 true)))
 (let (($x193 (forall ((input.ind-%var3982X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3982X)))
 (= $x99 false)))
 ))
 (let (($x114 (forall ((input.ind-%var3983X (_ BitVec 32)) (input.ind-%var3984X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3983X)))
 (=> $x29 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3983X input.ind-%var3984X) false))))
 ))
 (let (($x113 (forall ((input.ind-%var3983X (_ BitVec 32)) (input.ind-%var3985X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3983X input.ind-%var3985X)))
 (let (($x29 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3983X)))
 (=> (and $x29 $x132) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3983X input.ind-%var3985X) (_ bv0 32))))))
 ))
 (let (($x190 (and (and $x113 $x114) $x193)))
 (let (($x224 (= $x190 true)))
 (let (($x216 (forall ((input.ind-%var3970X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3970X)))
 (= $x99 false)))
 ))
 (let (($x139 (forall ((input.ind-%var3971X (_ BitVec 32)) (input.ind-%var3972X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3971X)))
 (=> $x29 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3971X input.ind-%var3972X) false))))
 ))
 (let (($x42 (forall ((input.ind-%var3971X (_ BitVec 32)) (input.ind-%var3973X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3971X input.ind-%var3973X)))
 (let (($x29 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3971X)))
 (=> (and $x29 $x132) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3971X input.ind-%var3973X) (_ bv0 32))))))
 ))
 (let (($x173 (and (and $x42 $x139) $x216)))
 (let (($x241 (= $x173 true)))
 (let (($x126 (forall ((input.ind-%var3961X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3961X)))
 (=> $x254 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3961X) (_ bv0 32)))))
 ))
 (let (($x50 (forall ((input.ind-%var3960X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3960X)))
 (= $x254 false)))
 ))
 (let (($x8 (and $x50 $x126)))
 (let (($x90 (= $x8 true)))
 (let ((?x100 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x100)))
 (let (($x200 (= ?x149 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x56 (= $x200 true)))
 (let (($x120 (= $x56 true)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x226)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x102 $x84)))
 (let (($x210 (and $x181 $x121)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x33 $x210)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x76)))))))
 (let (($x158 (and $x136 $x155)))
 (let (($x26 (= $x158 true)))
 (let (($x248 (= $x26 true)))
 (let (($x89 (= $x248 true)))
 (let ((?x13 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x13)))
 (let (($x23 (= ?x93 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x6 (= $x23 true)))
 (let (($x162 (= $x6 true)))
 (let (($x61 (= ?x93 input.dst.llvm-%n)))
 (let (($x95 (= $x61 true)))
 (let (($x125 (= $x95 true)))
 (let ((?x174 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x174)))
 (let (($x35 (= ?x9 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x35 true)))
 (let (($x51 (= $x88 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (not $x45)))
 (let (($x98 (= $x183 true)))
 (let (($x228 (= $x98 true)))
 (let (($x48 (= $x228 true)))
 (let (($x69 (and $x48 $x51)))
 (let (($x167 (and $x69 $x125)))
 (let (($x67 (and $x167 $x162)))
 (let (($x77 (and $x67 $x89)))
 (let (($x198 (and $x77 $x120)))
 (let (($x203 (and $x198 $x90)))
 (let (($x138 (and $x203 $x241)))
 (let (($x5 (and $x138 $x224)))
 (let (($x252 (and $x5 $x249)))
 (let (($x65 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x129 (and $x65 $x252)))
 (let (($x17 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x255 (and $x17 $x129)))
 (let (($x57 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x201 (and $x57 $x255)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x36 (and $x54 $x201)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x205 (and $x80 $x36)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x143 (and $x10 $x205)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x195 (and $x110 $x143)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x152 (and $x39 $x195)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x237 (and $x169 $x152)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x116 (and $x14 $x237)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x101 (and $x11 $x116)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x94 (and $x24 $x101)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x130 (and $x12 $x94)))
 (let (($x105 (=> $x130 $x227)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 153 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675993/query
