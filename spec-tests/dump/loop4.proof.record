==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= ?x8 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x7 $x6)))
 (let (($x19 (and $x9 $x12)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= ?x8 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x7 $x6)))
 (let (($x19 (and $x9 $x12)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x143 (= false true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x126 (concat ?x123 (concat ?x119 ?x117)))))
 (let (($x128 (= ?x127 input.dst.llvm-%n)))
 (let (($x129 (= $x128 true)))
 (let (($x112 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (= $x112 true)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x105)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x100 $x103)))
 (let (($x107 (and $x104 $x106)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x86 $x107)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x93)))))))
 (let (($x109 (and $x99 $x108)))
 (let (($x110 (= $x109 true)))
 (let (($x114 (and $x110 $x113)))
 (let (($x130 (and $x114 $x129)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x131 (and $x82 $x130)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x132 (and $x79 $x131)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x133 (and $x77 $x132)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x134 (and $x75 $x133)))
 (let (($x71 (forall ((input.ind-%var415X (_ BitVec 32)) (input.ind-%var417X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var415X input.ind-%var417X)))
 (let (($x57 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var415X)))
 (=> (and $x57 $x52) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var415X input.ind-%var417X) (_ bv0 32))))))
 ))
 (let (($x59 (forall ((input.ind-%var415X (_ BitVec 32)) (input.ind-%var416X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var415X)))
 (=> $x57 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var415X input.ind-%var416X) false))))
 ))
 (let (($x9 (forall ((input.ind-%var414X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var414X)))
 (= $x5 false)))
 ))
 (let (($x73 (and (and $x9 $x59) $x71)))
 (let (($x135 (and $x73 $x134)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x136 (and $x19 $x135)))
 (let (($x28 (forall ((input.ind-%var433X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var433X)))
 (=> $x29 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var433X) (_ bv0 32)))))
 ))
 (let (($x43 (forall ((input.ind-%var432X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var432X)))
 (= $x29 false)))
 ))
 (let (($x8 (and $x43 $x28)))
 (let (($x137 (and $x8 $x136)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x138 (and $x15 $x137)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x139 (and $x35 $x138)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x140 (and $x18 $x139)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x141 (and $x34 $x140)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x142 (and $x10 $x141)))
 (let (($x144 (=> $x142 $x143)))
 (not $x144))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x143 (= false true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x126 (concat ?x123 (concat ?x119 ?x117)))))
 (let (($x128 (= ?x127 input.dst.llvm-%n)))
 (let (($x129 (= $x128 true)))
 (let (($x112 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (= $x112 true)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x105)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x100 $x103)))
 (let (($x107 (and $x104 $x106)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x86 $x107)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x93)))))))
 (let (($x109 (and $x99 $x108)))
 (let (($x110 (= $x109 true)))
 (let (($x114 (and $x110 $x113)))
 (let (($x130 (and $x114 $x129)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x131 (and $x82 $x130)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x132 (and $x79 $x131)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x133 (and $x77 $x132)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x134 (and $x75 $x133)))
 (let (($x71 (forall ((input.ind-%var415X (_ BitVec 32)) (input.ind-%var417X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var415X input.ind-%var417X)))
 (let (($x57 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var415X)))
 (=> (and $x57 $x52) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var415X input.ind-%var417X) (_ bv0 32))))))
 ))
 (let (($x59 (forall ((input.ind-%var415X (_ BitVec 32)) (input.ind-%var416X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var415X)))
 (=> $x57 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var415X input.ind-%var416X) false))))
 ))
 (let (($x9 (forall ((input.ind-%var414X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var414X)))
 (= $x5 false)))
 ))
 (let (($x73 (and (and $x9 $x59) $x71)))
 (let (($x135 (and $x73 $x134)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x136 (and $x19 $x135)))
 (let (($x28 (forall ((input.ind-%var433X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var433X)))
 (=> $x29 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var433X) (_ bv0 32)))))
 ))
 (let (($x43 (forall ((input.ind-%var432X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var432X)))
 (= $x29 false)))
 ))
 (let (($x8 (and $x43 $x28)))
 (let (($x137 (and $x8 $x136)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x138 (and $x15 $x137)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x139 (and $x35 $x138)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x140 (and $x18 $x139)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x141 (and $x34 $x140)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x142 (and $x10 $x141)))
 (let (($x144 (=> $x142 $x143)))
 (not $x144))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7e1ec50)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7e1ec53)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7e1ec50)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x137)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x134)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x132 $x135)))
 (let (($x139 (and $x136 $x138)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x131 $x139)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x119)))))))
 (let (($x40 (and $x129 $x140)))
 (let (($x31 (= $x40 true)))
 (let ((?x143 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x65 (concat ?x42 (concat ?x145 ?x143)))))
 (let (($x7 (= input.dst.llvm-%n ?x41)))
 (let (($x50 (and (and (and $x129 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x140) $x7)))
 (let (($x54 (= $x50 true)))
 (let (($x111 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x63 (and $x111 $x54)))
 (let (($x108 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x66 (and $x108 $x63)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x48 (and $x106 $x66)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x55 (and $x104 $x48)))
 (let (($x100 (forall ((input.ind-%var475X (_ BitVec 32)) (input.ind-%var477X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var475X input.ind-%var477X)))
 (let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var475X)))
 (=> (and $x88 $x73) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var475X input.ind-%var477X) (_ bv0 32))))))
 ))
 (let (($x89 (forall ((input.ind-%var475X (_ BitVec 32)) (input.ind-%var476X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var475X)))
 (=> $x88 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var475X input.ind-%var476X) false))))
 ))
 (let (($x80 (forall ((input.ind-%var474X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var474X)))
 (= $x75 false)))
 ))
 (let (($x102 (and (and $x80 $x89) $x100)))
 (let (($x45 (and $x102 $x55)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x44 (and $x58 $x45)))
 (let (($x17 (forall ((input.ind-%var487X (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var487X)))
 (=> $x9 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var487X) (_ bv0 32)))))
 ))
 (let (($x57 (forall ((input.ind-%var486X (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var486X)))
 (= $x9 false)))
 ))
 (let (($x76 (and $x57 $x17)))
 (let (($x46 (and $x76 $x44)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x27 (and $x15 $x46)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x26 (and $x5 $x27)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x61 (and $x20 $x26)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x62 (and $x83 $x61)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x67 (and $x11 $x62)))
 (let (($x6 (=> $x67 $x31)))
 (not $x6))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x137)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x134)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x132 $x135)))
 (let (($x139 (and $x136 $x138)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x131 $x139)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x119)))))))
 (let (($x40 (and $x129 $x140)))
 (let (($x31 (= $x40 true)))
 (let ((?x143 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x65 (concat ?x42 (concat ?x145 ?x143)))))
 (let (($x7 (= input.dst.llvm-%n ?x41)))
 (let (($x50 (and (and (and $x129 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x140) $x7)))
 (let (($x54 (= $x50 true)))
 (let (($x111 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x63 (and $x111 $x54)))
 (let (($x108 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x66 (and $x108 $x63)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x48 (and $x106 $x66)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x55 (and $x104 $x48)))
 (let (($x100 (forall ((input.ind-%var475X (_ BitVec 32)) (input.ind-%var477X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var475X input.ind-%var477X)))
 (let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var475X)))
 (=> (and $x88 $x73) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var475X input.ind-%var477X) (_ bv0 32))))))
 ))
 (let (($x89 (forall ((input.ind-%var475X (_ BitVec 32)) (input.ind-%var476X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var475X)))
 (=> $x88 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var475X input.ind-%var476X) false))))
 ))
 (let (($x80 (forall ((input.ind-%var474X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var474X)))
 (= $x75 false)))
 ))
 (let (($x102 (and (and $x80 $x89) $x100)))
 (let (($x45 (and $x102 $x55)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x44 (and $x58 $x45)))
 (let (($x17 (forall ((input.ind-%var487X (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var487X)))
 (=> $x9 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var487X) (_ bv0 32)))))
 ))
 (let (($x57 (forall ((input.ind-%var486X (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var486X)))
 (= $x9 false)))
 ))
 (let (($x76 (and $x57 $x17)))
 (let (($x46 (and $x76 $x44)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x27 (and $x15 $x46)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x26 (and $x5 $x27)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x61 (and $x20 $x26)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x62 (and $x83 $x61)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x67 (and $x11 $x62)))
 (let (($x6 (=> $x67 $x31)))
 (not $x6))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x97 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x38 (= $x97 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x81 (concat ?x74 (concat ?x113 ?x47)))))
 (let (($x30 (= input.dst.llvm-%n ?x32)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x61)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x45 $x27)))
 (let (($x67 (and $x26 $x62)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x55 $x67)))
 (let (($x116 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x16)))))))
 (let (($x33 (and (and (and $x66 $x116) $x40) $x30)))
 (let (($x69 (= $x33 true)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x70 (and $x36 $x69)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x72 (and $x138 $x70)))
 (let (($x136 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x79 (and $x136 $x72)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x68 (and $x134 $x79)))
 (let (($x130 (forall ((input.ind-%var505X (_ BitVec 32)) (input.ind-%var507X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var505X input.ind-%var507X)))
 (let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var505X)))
 (=> (and $x128 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var505X input.ind-%var507X) (_ bv0 32))))))
 ))
 (let (($x123 (forall ((input.ind-%var505X (_ BitVec 32)) (input.ind-%var506X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var505X)))
 (=> $x128 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var505X input.ind-%var506X) false))))
 ))
 (let (($x102 (forall ((input.ind-%var504X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var504X)))
 (= $x94 false)))
 ))
 (let (($x132 (and (and $x102 $x123) $x130)))
 (let (($x28 (and $x132 $x68)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x93 (and $x89 $x28)))
 (let (($x73 (forall ((input.ind-%var517X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var517X)))
 (=> $x18 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var517X) (_ bv0 32)))))
 ))
 (let (($x35 (forall ((input.ind-%var516X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var516X)))
 (= $x18 false)))
 ))
 (let (($x22 (and $x35 $x73)))
 (let (($x96 (and $x22 $x93)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x56 (and $x15 $x96)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x8 (and $x5 $x56)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x82 (and $x20 $x8)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x92 (and $x83 $x82)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x90 (and $x11 $x92)))
 (let (($x60 (=> $x90 $x38)))
 (not $x60)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x97 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x38 (= $x97 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x81 (concat ?x74 (concat ?x113 ?x47)))))
 (let (($x30 (= input.dst.llvm-%n ?x32)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x61)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x45 $x27)))
 (let (($x67 (and $x26 $x62)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x55 $x67)))
 (let (($x116 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x16)))))))
 (let (($x33 (and (and (and $x66 $x116) $x40) $x30)))
 (let (($x69 (= $x33 true)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x70 (and $x36 $x69)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x72 (and $x138 $x70)))
 (let (($x136 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x79 (and $x136 $x72)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x68 (and $x134 $x79)))
 (let (($x130 (forall ((input.ind-%var505X (_ BitVec 32)) (input.ind-%var507X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var505X input.ind-%var507X)))
 (let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var505X)))
 (=> (and $x128 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var505X input.ind-%var507X) (_ bv0 32))))))
 ))
 (let (($x123 (forall ((input.ind-%var505X (_ BitVec 32)) (input.ind-%var506X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var505X)))
 (=> $x128 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var505X input.ind-%var506X) false))))
 ))
 (let (($x102 (forall ((input.ind-%var504X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var504X)))
 (= $x94 false)))
 ))
 (let (($x132 (and (and $x102 $x123) $x130)))
 (let (($x28 (and $x132 $x68)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x93 (and $x89 $x28)))
 (let (($x73 (forall ((input.ind-%var517X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var517X)))
 (=> $x18 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var517X) (_ bv0 32)))))
 ))
 (let (($x35 (forall ((input.ind-%var516X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var516X)))
 (= $x18 false)))
 ))
 (let (($x22 (and $x35 $x73)))
 (let (($x96 (and $x22 $x93)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x56 (and $x15 $x96)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x8 (and $x5 $x56)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x82 (and $x20 $x8)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x92 (and $x83 $x82)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x90 (and $x11 $x92)))
 (let (($x60 (=> $x90 $x38)))
 (not $x60)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x80)))
 (let (($x106 (= ?x91 input.spec-%var-n-1)))
 (let (($x49 (= $x106 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x17 (concat ?x99 (concat ?x53 ?x59)))))
 (let (($x71 (= input.dst.llvm-%n ?x78)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x82)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x28 $x56)))
 (let (($x90 (and $x8 $x92)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x68 $x90)))
 (let (($x51 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x142 $x64)))))))
 (let (($x77 (and (and (and $x72 $x51) $x97) $x71)))
 (let (($x104 (= $x77 true)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x101 (and $x12 $x104)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x85 (and $x62 $x101)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x86 (and $x26 $x85)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x107 (and $x46 $x86)))
 (let (($x48 (forall ((input.ind-%var559X (_ BitVec 32)) (input.ind-%var561X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var559X input.ind-%var561X)))
 (let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var559X)))
 (=> (and $x63 $x138) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var559X input.ind-%var561X) (_ bv0 32))))))
 ))
 (let (($x143 (forall ((input.ind-%var559X (_ BitVec 32)) (input.ind-%var560X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var559X)))
 (=> $x63 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var559X input.ind-%var560X) false))))
 ))
 (let (($x130 (forall ((input.ind-%var558X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var558X)))
 (= $x115 false)))
 ))
 (let (($x45 (and (and $x130 $x143) $x48)))
 (let (($x111 (and $x45 $x107)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x117 (and $x121 $x111)))
 (let (($x128 (forall ((input.ind-%var571X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var571X)))
 (=> $x18 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var571X) (_ bv0 32)))))
 ))
 (let (($x29 (forall ((input.ind-%var570X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var570X)))
 (= $x18 false)))
 ))
 (let (($x109 (and $x29 $x128)))
 (let (($x127 (and $x109 $x117)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x105 (and $x52 $x127)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x125 (and $x19 $x105)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x76 (and $x21 $x125)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x122 (and $x10 $x76)))
 (let (($x139 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x119 (and $x139 $x122)))
 (let (($x146 (=> $x119 $x49)))
 (not $x146)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x80)))
 (let (($x106 (= ?x91 input.spec-%var-n-1)))
 (let (($x49 (= $x106 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x17 (concat ?x99 (concat ?x53 ?x59)))))
 (let (($x71 (= input.dst.llvm-%n ?x78)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x82)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x28 $x56)))
 (let (($x90 (and $x8 $x92)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x68 $x90)))
 (let (($x51 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x142 $x64)))))))
 (let (($x77 (and (and (and $x72 $x51) $x97) $x71)))
 (let (($x104 (= $x77 true)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x101 (and $x12 $x104)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x85 (and $x62 $x101)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x86 (and $x26 $x85)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x107 (and $x46 $x86)))
 (let (($x48 (forall ((input.ind-%var559X (_ BitVec 32)) (input.ind-%var561X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var559X input.ind-%var561X)))
 (let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var559X)))
 (=> (and $x63 $x138) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var559X input.ind-%var561X) (_ bv0 32))))))
 ))
 (let (($x143 (forall ((input.ind-%var559X (_ BitVec 32)) (input.ind-%var560X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var559X)))
 (=> $x63 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var559X input.ind-%var560X) false))))
 ))
 (let (($x130 (forall ((input.ind-%var558X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var558X)))
 (= $x115 false)))
 ))
 (let (($x45 (and (and $x130 $x143) $x48)))
 (let (($x111 (and $x45 $x107)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x117 (and $x121 $x111)))
 (let (($x128 (forall ((input.ind-%var571X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var571X)))
 (=> $x18 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var571X) (_ bv0 32)))))
 ))
 (let (($x29 (forall ((input.ind-%var570X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var570X)))
 (= $x18 false)))
 ))
 (let (($x109 (and $x29 $x128)))
 (let (($x127 (and $x109 $x117)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x105 (and $x52 $x127)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x125 (and $x19 $x105)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x76 (and $x21 $x125)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x122 (and $x10 $x76)))
 (let (($x139 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x119 (and $x139 $x122)))
 (let (($x146 (=> $x119 $x49)))
 (not $x146)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x145)))
 (let (($x66 (= ?x16 input.dst.llvm-%n)))
 (let (($x100 (= $x66 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x120 (concat ?x60 (concat ?x146 ?x106)))))
 (let (($x50 (= input.dst.llvm-%n ?x140)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x76)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x111 $x105)))
 (let (($x119 (and $x125 $x122)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x107 $x119)))
 (let (($x57 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x110)))))))
 (let (($x15 (and (and (and $x85 $x57) $x129) $x50)))
 (let (($x103 (= $x15 true)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x35 (and $x43 $x103)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x94 (and $x92 $x35)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x133 (and $x8 $x94)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x123 (and $x96 $x133)))
 (let (($x79 (forall ((input.ind-%var589X (_ BitVec 32)) (input.ind-%var591X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var589X input.ind-%var591X)))
 (let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var589X)))
 (=> (and $x70 $x67) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var589X input.ind-%var591X) (_ bv0 32))))))
 ))
 (let (($x47 (forall ((input.ind-%var589X (_ BitVec 32)) (input.ind-%var590X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var589X)))
 (=> $x70 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var589X input.ind-%var590X) false))))
 ))
 (let (($x45 (forall ((input.ind-%var588X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var588X)))
 (= $x7 false)))
 ))
 (let (($x28 (and (and $x45 $x47) $x79)))
 (let (($x131 (and $x28 $x123)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x114 (and $x143 $x131)))
 (let (($x138 (forall ((input.ind-%var601X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var601X)))
 (=> $x58 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var601X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var600X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var600X)))
 (= $x58 false)))
 ))
 (let (($x42 (and $x108 $x138)))
 (let (($x136 (and $x42 $x114)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x36 (and $x52 $x136)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x41 (and $x19 $x36)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x54 (and $x21 $x41)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x134 (and $x10 $x54)))
 (let (($x139 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x24 (and $x139 $x134)))
 (let (($x118 (=> $x24 $x100)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x145)))
 (let (($x66 (= ?x16 input.dst.llvm-%n)))
 (let (($x100 (= $x66 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x120 (concat ?x60 (concat ?x146 ?x106)))))
 (let (($x50 (= input.dst.llvm-%n ?x140)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x76)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x111 $x105)))
 (let (($x119 (and $x125 $x122)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x107 $x119)))
 (let (($x57 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x110)))))))
 (let (($x15 (and (and (and $x85 $x57) $x129) $x50)))
 (let (($x103 (= $x15 true)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x35 (and $x43 $x103)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x94 (and $x92 $x35)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x133 (and $x8 $x94)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x123 (and $x96 $x133)))
 (let (($x79 (forall ((input.ind-%var589X (_ BitVec 32)) (input.ind-%var591X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var589X input.ind-%var591X)))
 (let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var589X)))
 (=> (and $x70 $x67) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var589X input.ind-%var591X) (_ bv0 32))))))
 ))
 (let (($x47 (forall ((input.ind-%var589X (_ BitVec 32)) (input.ind-%var590X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var589X)))
 (=> $x70 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var589X input.ind-%var590X) false))))
 ))
 (let (($x45 (forall ((input.ind-%var588X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var588X)))
 (= $x7 false)))
 ))
 (let (($x28 (and (and $x45 $x47) $x79)))
 (let (($x131 (and $x28 $x123)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x114 (and $x143 $x131)))
 (let (($x138 (forall ((input.ind-%var601X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var601X)))
 (=> $x58 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var601X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var600X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var600X)))
 (= $x58 false)))
 ))
 (let (($x42 (and $x108 $x138)))
 (let (($x136 (and $x42 $x114)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x36 (and $x52 $x136)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x41 (and $x19 $x36)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x54 (and $x21 $x41)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x134 (and $x10 $x54)))
 (let (($x139 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x24 (and $x139 $x134)))
 (let (($x118 (=> $x24 $x100)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x113 (= $x109 true)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x40 (concat ?x65 (concat ?x91 (concat ?x100 ?x16)))))
 (let (($x33 (= input.dst.llvm-%n ?x40)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x41)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x123 $x136)))
 (let (($x134 (and $x36 $x54)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x133 $x134)))
 (let (($x120 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x147)))))))
 (let (($x9 (and (and (and $x35 $x120) $x24) $x33)))
 (let (($x132 (= $x9 true)))
 (let (($x129 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x98 (and $x129 $x132)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x14 (and $x76 $x98)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x46 (and $x105 $x14)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x55 (and $x117 $x46)))
 (let (($x88 (forall ((input.ind-%var619X (_ BitVec 32)) (input.ind-%var621X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var619X input.ind-%var621X)))
 (let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var619X)))
 (=> (and $x99 $x92) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var619X input.ind-%var621X) (_ bv0 32))))))
 ))
 (let (($x141 (forall ((input.ind-%var619X (_ BitVec 32)) (input.ind-%var620X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var619X)))
 (=> $x99 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var619X input.ind-%var620X) false))))
 ))
 (let (($x79 (forall ((input.ind-%var618X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var618X)))
 (= $x51 false)))
 ))
 (let (($x107 (and (and $x79 $x141) $x88)))
 (let (($x116 (and $x107 $x55)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x39 (and $x112 $x116)))
 (let (($x70 (forall ((input.ind-%var631X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var631X)))
 (=> $x58 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var631X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var630X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var630X)))
 (= $x58 false)))
 ))
 (let (($x67 (and $x137 $x70)))
 (let (($x61 (and $x67 $x39)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x12 (and $x5 $x61)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x32 (and $x20 $x12)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x69 (and $x83 $x32)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x27 (and $x11 $x69)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x13 (and $x34 $x27)))
 (let (($x64 (=> $x13 $x113)))
 (not $x64)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x113 (= $x109 true)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x40 (concat ?x65 (concat ?x91 (concat ?x100 ?x16)))))
 (let (($x33 (= input.dst.llvm-%n ?x40)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x41)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x123 $x136)))
 (let (($x134 (and $x36 $x54)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x133 $x134)))
 (let (($x120 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x147)))))))
 (let (($x9 (and (and (and $x35 $x120) $x24) $x33)))
 (let (($x132 (= $x9 true)))
 (let (($x129 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x98 (and $x129 $x132)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x14 (and $x76 $x98)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x46 (and $x105 $x14)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x55 (and $x117 $x46)))
 (let (($x88 (forall ((input.ind-%var619X (_ BitVec 32)) (input.ind-%var621X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var619X input.ind-%var621X)))
 (let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var619X)))
 (=> (and $x99 $x92) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var619X input.ind-%var621X) (_ bv0 32))))))
 ))
 (let (($x141 (forall ((input.ind-%var619X (_ BitVec 32)) (input.ind-%var620X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var619X)))
 (=> $x99 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var619X input.ind-%var620X) false))))
 ))
 (let (($x79 (forall ((input.ind-%var618X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var618X)))
 (= $x51 false)))
 ))
 (let (($x107 (and (and $x79 $x141) $x88)))
 (let (($x116 (and $x107 $x55)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x39 (and $x112 $x116)))
 (let (($x70 (forall ((input.ind-%var631X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var631X)))
 (=> $x58 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var631X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var630X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var630X)))
 (= $x58 false)))
 ))
 (let (($x67 (and $x137 $x70)))
 (let (($x61 (and $x67 $x39)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x12 (and $x5 $x61)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x32 (and $x20 $x12)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x69 (and $x83 $x32)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x27 (and $x11 $x69)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x13 (and $x34 $x27)))
 (let (($x64 (=> $x13 $x113)))
 (not $x64)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x167 (forall ((input.ind-%var707X (_ BitVec 32)) (input.ind-%var709X (_ BitVec 32)) )(let (($x159 (and false false)))
 (=> $x159 (= (_ bv0 32) (spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var707X input.ind-%var709X)))))
 ))
 (let (($x157 (forall ((input.ind-%var707X (_ BitVec 32)) (input.ind-%var708X (_ BitVec 32)) )(=> false (= false (spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var707X input.ind-%var708X))))
 ))
 (let (($x26 (forall ((input.ind-%var706X (_ BitVec 32)) )(let (($x142 (spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var706X)))
 (= false $x142)))
 ))
 (let (($x169 (and (and $x26 $x157) $x167)))
 (let (($x170 (= $x169 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x63 (concat ?x30 (concat ?x80 ?x72)))))
 (let (($x52 (= input.dst.llvm-%n ?x42)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x69)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x116 $x12)))
 (let (($x13 (and $x32 $x27)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x55 $x13)))
 (let (($x135 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x29)))))))
 (let (($x7 (and (and (and $x14 $x135) $x109) $x52)))
 (let (($x93 (= $x7 true)))
 (let (($x126 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x47 (and $x126 $x93)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x68 (and $x54 $x47)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x81 (and $x36 $x68)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x8 (and $x114 $x81)))
 (let (($x94 (forall ((input.ind-%var673X (_ BitVec 32)) (input.ind-%var675X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var673X input.ind-%var675X)))
 (let (($x103 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var673X)))
 (=> (and $x103 $x122) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var673X input.ind-%var675X) (_ bv0 32))))))
 ))
 (let (($x146 (forall ((input.ind-%var673X (_ BitVec 32)) (input.ind-%var674X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var673X)))
 (=> $x103 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var673X input.ind-%var674X) false))))
 ))
 (let (($x107 (forall ((input.ind-%var672X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var672X)))
 (= $x78 false)))
 ))
 (let (($x123 (and (and $x107 $x146) $x94)))
 (let (($x97 (and $x123 $x8)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x110 (and $x141 $x97)))
 (let (($x92 (forall ((input.ind-%var685X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var685X)))
 (=> $x121 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var685X) (_ bv0 32)))))
 ))
 (let (($x62 (forall ((input.ind-%var684X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var684X)))
 (= $x121 false)))
 ))
 (let (($x75 (and $x62 $x92)))
 (let (($x77 (and $x75 $x110)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x96 (and $x5 $x77)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x43 (and $x20 $x96)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x138 (and $x83 $x43)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x6 (and $x11 $x138)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x53 (and $x34 $x6)))
 (let (($x171 (=> $x53 $x170)))
 (not $x171))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x167 (forall ((input.ind-%var707X (_ BitVec 32)) (input.ind-%var709X (_ BitVec 32)) )(let (($x159 (and false false)))
 (=> $x159 (= (_ bv0 32) (spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var707X input.ind-%var709X)))))
 ))
 (let (($x157 (forall ((input.ind-%var707X (_ BitVec 32)) (input.ind-%var708X (_ BitVec 32)) )(=> false (= false (spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var707X input.ind-%var708X))))
 ))
 (let (($x26 (forall ((input.ind-%var706X (_ BitVec 32)) )(let (($x142 (spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var706X)))
 (= false $x142)))
 ))
 (let (($x169 (and (and $x26 $x157) $x167)))
 (let (($x170 (= $x169 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x63 (concat ?x30 (concat ?x80 ?x72)))))
 (let (($x52 (= input.dst.llvm-%n ?x42)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x69)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x116 $x12)))
 (let (($x13 (and $x32 $x27)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x55 $x13)))
 (let (($x135 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x29)))))))
 (let (($x7 (and (and (and $x14 $x135) $x109) $x52)))
 (let (($x93 (= $x7 true)))
 (let (($x126 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x47 (and $x126 $x93)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x68 (and $x54 $x47)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x81 (and $x36 $x68)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x8 (and $x114 $x81)))
 (let (($x94 (forall ((input.ind-%var673X (_ BitVec 32)) (input.ind-%var675X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var673X input.ind-%var675X)))
 (let (($x103 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var673X)))
 (=> (and $x103 $x122) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var673X input.ind-%var675X) (_ bv0 32))))))
 ))
 (let (($x146 (forall ((input.ind-%var673X (_ BitVec 32)) (input.ind-%var674X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var673X)))
 (=> $x103 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var673X input.ind-%var674X) false))))
 ))
 (let (($x107 (forall ((input.ind-%var672X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var672X)))
 (= $x78 false)))
 ))
 (let (($x123 (and (and $x107 $x146) $x94)))
 (let (($x97 (and $x123 $x8)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x110 (and $x141 $x97)))
 (let (($x92 (forall ((input.ind-%var685X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var685X)))
 (=> $x121 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var685X) (_ bv0 32)))))
 ))
 (let (($x62 (forall ((input.ind-%var684X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var684X)))
 (= $x121 false)))
 ))
 (let (($x75 (and $x62 $x92)))
 (let (($x77 (and $x75 $x110)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x96 (and $x5 $x77)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x43 (and $x20 $x96)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x138 (and $x83 $x43)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x6 (and $x11 $x138)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x53 (and $x34 $x6)))
 (let (($x171 (=> $x53 $x170)))
 (not $x171))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var706X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x02ad8c50)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x02ad8c53)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x02ad8c50)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.ind-%var706X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x49 (forall ((input.ind-%var791X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var791X))))
 ))
 (let (($x57 (forall ((input.ind-%var790X (_ BitVec 32)) )(let (($x111 (spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var790X)))
 (= false $x111)))
 ))
 (let (($x147 (and $x57 $x49)))
 (let (($x35 (= $x147 true)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x167 (concat ?x161 (concat ?x156 ?x151)))))
 (let (($x170 (= input.dst.llvm-%n ?x169)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x138)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x97 $x96)))
 (let (($x53 (and $x43 $x6)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x8 $x53)))
 (let (($x102 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x90)))))))
 (let (($x73 (and (and (and $x68 $x102) $x142) $x170)))
 (let (($x115 (= $x73 true)))
 (let (($x108 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x64 (and $x108 $x115)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x137 (and $x27 $x64)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x51 (and $x32 $x137)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x85 (and $x61 $x51)))
 (let (($x46 (forall ((input.ind-%var767X (_ BitVec 32)) (input.ind-%var769X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var767X input.ind-%var769X)))
 (let (($x98 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var767X)))
 (=> (and $x98 $x134) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var767X input.ind-%var769X) (_ bv0 32))))))
 ))
 (let (($x16 (forall ((input.ind-%var767X (_ BitVec 32)) (input.ind-%var768X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var767X)))
 (=> $x98 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var767X input.ind-%var768X) false))))
 ))
 (let (($x123 (forall ((input.ind-%var766X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var766X)))
 (= $x140 false)))
 ))
 (let (($x116 (and (and $x123 $x16) $x46)))
 (let (($x119 (and $x116 $x85)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x50 (and $x146 $x119)))
 (let (($x122 (forall ((input.ind-%var779X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var779X)))
 (=> $x45 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var779X) (_ bv0 32)))))
 ))
 (let (($x99 (forall ((input.ind-%var778X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var778X)))
 (= $x45 false)))
 ))
 (let (($x95 (and $x99 $x122)))
 (let (($x56 (and $x95 $x50)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x152 (and $x5 $x56)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x70 (and $x20 $x152)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x74 (and $x83 $x70)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x18 (and $x11 $x74)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x28 (and $x34 $x18)))
 (let (($x79 (=> $x28 $x35)))
 (not $x79)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x49 (forall ((input.ind-%var791X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var791X))))
 ))
 (let (($x57 (forall ((input.ind-%var790X (_ BitVec 32)) )(let (($x111 (spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var790X)))
 (= false $x111)))
 ))
 (let (($x147 (and $x57 $x49)))
 (let (($x35 (= $x147 true)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x167 (concat ?x161 (concat ?x156 ?x151)))))
 (let (($x170 (= input.dst.llvm-%n ?x169)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x138)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x97 $x96)))
 (let (($x53 (and $x43 $x6)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x8 $x53)))
 (let (($x102 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x90)))))))
 (let (($x73 (and (and (and $x68 $x102) $x142) $x170)))
 (let (($x115 (= $x73 true)))
 (let (($x108 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x64 (and $x108 $x115)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x137 (and $x27 $x64)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x51 (and $x32 $x137)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x85 (and $x61 $x51)))
 (let (($x46 (forall ((input.ind-%var767X (_ BitVec 32)) (input.ind-%var769X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var767X input.ind-%var769X)))
 (let (($x98 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var767X)))
 (=> (and $x98 $x134) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var767X input.ind-%var769X) (_ bv0 32))))))
 ))
 (let (($x16 (forall ((input.ind-%var767X (_ BitVec 32)) (input.ind-%var768X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var767X)))
 (=> $x98 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var767X input.ind-%var768X) false))))
 ))
 (let (($x123 (forall ((input.ind-%var766X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var766X)))
 (= $x140 false)))
 ))
 (let (($x116 (and (and $x123 $x16) $x46)))
 (let (($x119 (and $x116 $x85)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x50 (and $x146 $x119)))
 (let (($x122 (forall ((input.ind-%var779X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var779X)))
 (=> $x45 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var779X) (_ bv0 32)))))
 ))
 (let (($x99 (forall ((input.ind-%var778X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var778X)))
 (= $x45 false)))
 ))
 (let (($x95 (and $x99 $x122)))
 (let (($x56 (and $x95 $x50)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x152 (and $x5 $x56)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x70 (and $x20 $x152)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x74 (and $x83 $x70)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x18 (and $x11 $x74)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x28 (and $x34 $x18)))
 (let (($x79 (=> $x28 $x35)))
 (not $x79)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var790X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x02ad8c50)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x02ad8c53)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x02ad8c50)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.ind-%var790X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x118 (= false true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x26 (concat ?x162 (concat ?x49 ?x31)))))
 (let (($x78 (= input.dst.llvm-%n ?x62)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x18)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x50 $x70)))
 (let (($x111 (and $x74 $x28)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x119 $x111)))
 (let (($x159 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x165 $x169)))))))
 (let (($x9 (and (and (and $x51 $x159) $x17) $x78)))
 (let (($x117 (= $x9 true)))
 (let (($x84 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x87 (and $x84 $x117)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x92 (and $x53 $x87)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x101 (and $x138 $x92)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x58 (and $x96 $x101)))
 (let (($x8 (forall ((input.ind-%var841X (_ BitVec 32)) (input.ind-%var843X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var841X input.ind-%var843X)))
 (let (($x22 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var841X)))
 (=> (and $x22 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var841X input.ind-%var843X) (_ bv0 32))))))
 ))
 (let (($x145 (forall ((input.ind-%var841X (_ BitVec 32)) (input.ind-%var842X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var841X)))
 (=> $x22 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var841X input.ind-%var842X) false))))
 ))
 (let (($x39 (forall ((input.ind-%var840X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var840X)))
 (= $x65 false)))
 ))
 (let (($x110 (and (and $x39 $x145) $x8)))
 (let (($x148 (and $x110 $x58)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x112 (and $x55 $x148)))
 (let (($x91 (forall ((input.ind-%var853X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var853X)))
 (=> $x99 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var853X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var852X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var852X)))
 (= $x99 false)))
 ))
 (let (($x66 (and $x122 $x91)))
 (let (($x88 (and $x66 $x112)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x131 (and $x5 $x88)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x114 (and $x20 $x131)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x133 (and $x83 $x114)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x120 (and $x11 $x133)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x128 (and $x34 $x120)))
 (let (($x41 (=> $x128 $x118)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x118 (= false true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x26 (concat ?x162 (concat ?x49 ?x31)))))
 (let (($x78 (= input.dst.llvm-%n ?x62)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x18)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x50 $x70)))
 (let (($x111 (and $x74 $x28)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x119 $x111)))
 (let (($x159 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x165 $x169)))))))
 (let (($x9 (and (and (and $x51 $x159) $x17) $x78)))
 (let (($x117 (= $x9 true)))
 (let (($x84 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x87 (and $x84 $x117)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x92 (and $x53 $x87)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x101 (and $x138 $x92)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x58 (and $x96 $x101)))
 (let (($x8 (forall ((input.ind-%var841X (_ BitVec 32)) (input.ind-%var843X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var841X input.ind-%var843X)))
 (let (($x22 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var841X)))
 (=> (and $x22 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var841X input.ind-%var843X) (_ bv0 32))))))
 ))
 (let (($x145 (forall ((input.ind-%var841X (_ BitVec 32)) (input.ind-%var842X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var841X)))
 (=> $x22 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var841X input.ind-%var842X) false))))
 ))
 (let (($x39 (forall ((input.ind-%var840X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var840X)))
 (= $x65 false)))
 ))
 (let (($x110 (and (and $x39 $x145) $x8)))
 (let (($x148 (and $x110 $x58)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x112 (and $x55 $x148)))
 (let (($x91 (forall ((input.ind-%var853X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var853X)))
 (=> $x99 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var853X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var852X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var852X)))
 (= $x99 false)))
 ))
 (let (($x66 (and $x122 $x91)))
 (let (($x88 (and $x66 $x112)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x131 (and $x5 $x88)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x114 (and $x20 $x131)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x133 (and $x83 $x114)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x120 (and $x11 $x133)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x128 (and $x34 $x120)))
 (let (($x41 (=> $x128 $x118)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7e1ec50)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7e1ec53)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7e1ec50)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x114)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x58 $x88)))
 (let (($x120 (and $x131 $x133)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x101 $x120)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x147)))))))
 (let (($x54 (and $x87 $x128)))
 (let (($x106 (= $x54 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x146 (concat ?x108 (concat ?x129 ?x126)))))
 (let (($x45 (= input.dst.llvm-%n ?x121)))
 (let (($x12 (and (and (and $x87 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x128) $x45)))
 (let (($x135 (= $x12 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x33 (and $x17 $x135)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x46 (and $x18 $x33)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x27 (and $x70 $x46)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x143 (and $x56 $x27)))
 (let (($x89 (forall ((input.ind-%var895X (_ BitVec 32)) (input.ind-%var897X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var895X input.ind-%var897X)))
 (let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var895X)))
 (=> (and $x155 $x53) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var895X input.ind-%var897X) (_ bv0 32))))))
 ))
 (let (($x156 (forall ((input.ind-%var895X (_ BitVec 32)) (input.ind-%var896X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var895X)))
 (=> $x155 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var895X input.ind-%var896X) false))))
 ))
 (let (($x8 (forall ((input.ind-%var894X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var894X)))
 (= $x171 false)))
 ))
 (let (($x119 (and (and $x8 $x156) $x89)))
 (let (($x52 (and $x119 $x143)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x68 (and $x72 $x52)))
 (let (($x22 (forall ((input.ind-%var907X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var907X)))
 (=> $x99 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var907X) (_ bv0 32)))))
 ))
 (let (($x98 (forall ((input.ind-%var906X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var906X)))
 (= $x99 false)))
 ))
 (let (($x109 (and $x98 $x22)))
 (let (($x32 (and $x109 $x68)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x30 (and $x19 $x32)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x60 (and $x21 $x30)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x90 (and $x10 $x60)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x42 (and $x25 $x90)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x63 (and $x38 $x42)))
 (let (($x69 (=> $x63 $x106)))
 (not $x69))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x114)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x58 $x88)))
 (let (($x120 (and $x131 $x133)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x101 $x120)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x147)))))))
 (let (($x54 (and $x87 $x128)))
 (let (($x106 (= $x54 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x146 (concat ?x108 (concat ?x129 ?x126)))))
 (let (($x45 (= input.dst.llvm-%n ?x121)))
 (let (($x12 (and (and (and $x87 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x128) $x45)))
 (let (($x135 (= $x12 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x33 (and $x17 $x135)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x46 (and $x18 $x33)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x27 (and $x70 $x46)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x143 (and $x56 $x27)))
 (let (($x89 (forall ((input.ind-%var895X (_ BitVec 32)) (input.ind-%var897X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var895X input.ind-%var897X)))
 (let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var895X)))
 (=> (and $x155 $x53) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var895X input.ind-%var897X) (_ bv0 32))))))
 ))
 (let (($x156 (forall ((input.ind-%var895X (_ BitVec 32)) (input.ind-%var896X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var895X)))
 (=> $x155 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var895X input.ind-%var896X) false))))
 ))
 (let (($x8 (forall ((input.ind-%var894X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var894X)))
 (= $x171 false)))
 ))
 (let (($x119 (and (and $x8 $x156) $x89)))
 (let (($x52 (and $x119 $x143)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x68 (and $x72 $x52)))
 (let (($x22 (forall ((input.ind-%var907X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var907X)))
 (=> $x99 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var907X) (_ bv0 32)))))
 ))
 (let (($x98 (forall ((input.ind-%var906X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var906X)))
 (= $x99 false)))
 ))
 (let (($x109 (and $x98 $x22)))
 (let (($x32 (and $x109 $x68)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x30 (and $x19 $x32)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x60 (and $x21 $x30)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x90 (and $x10 $x60)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x42 (and $x25 $x90)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x63 (and $x38 $x42)))
 (let (($x69 (=> $x63 $x106)))
 (not $x69))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x116 (= $x64 true)))
 (let ((?x40 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x134 (concat ?x7 (concat ?x57 ?x40)))))
 (let (($x5 (= input.dst.llvm-%n ?x66)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x90)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x52 $x30)))
 (let (($x63 (and $x60 $x42)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x143 $x63)))
 (let (($x94 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x141 $x93)))))))
 (let (($x65 (and (and (and $x46 $x94) $x54) $x5)))
 (let (($x77 (= $x65 true)))
 (let (($x123 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x145 (and $x123 $x77)))
 (let (($x133 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x97 (and $x133 $x145)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x102 (and $x131 $x97)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x138 (and $x112 $x102)))
 (let (($x92 (forall ((input.ind-%var925X (_ BitVec 32)) (input.ind-%var927X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var925X input.ind-%var927X)))
 (let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var925X)))
 (=> (and $x117 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var925X input.ind-%var927X) (_ bv0 32))))))
 ))
 (let (($x49 (forall ((input.ind-%var925X (_ BitVec 32)) (input.ind-%var926X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var925X)))
 (=> $x117 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var925X input.ind-%var926X) false))))
 ))
 (let (($x119 (forall ((input.ind-%var924X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var924X)))
 (= $x170 false)))
 ))
 (let (($x58 (and (and $x119 $x49) $x92)))
 (let (($x172 (and $x58 $x138)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x169 (and $x156 $x172)))
 (let (($x53 (forall ((input.ind-%var937X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var937X)))
 (=> $x140 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var937X) (_ bv0 32)))))
 ))
 (let (($x13 (forall ((input.ind-%var936X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var936X)))
 (= $x140 false)))
 ))
 (let (($x161 (and $x13 $x53)))
 (let (($x115 (and $x161 $x169)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x96 (and $x19 $x115)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x84 (and $x21 $x96)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x91 (and $x10 $x84)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x165 (and $x25 $x91)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x151 (and $x38 $x165)))
 (let (($x80 (=> $x151 $x116)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x116 (= $x64 true)))
 (let ((?x40 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x134 (concat ?x7 (concat ?x57 ?x40)))))
 (let (($x5 (= input.dst.llvm-%n ?x66)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x90)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x52 $x30)))
 (let (($x63 (and $x60 $x42)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x143 $x63)))
 (let (($x94 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x141 $x93)))))))
 (let (($x65 (and (and (and $x46 $x94) $x54) $x5)))
 (let (($x77 (= $x65 true)))
 (let (($x123 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x145 (and $x123 $x77)))
 (let (($x133 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x97 (and $x133 $x145)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x102 (and $x131 $x97)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x138 (and $x112 $x102)))
 (let (($x92 (forall ((input.ind-%var925X (_ BitVec 32)) (input.ind-%var927X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var925X input.ind-%var927X)))
 (let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var925X)))
 (=> (and $x117 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var925X input.ind-%var927X) (_ bv0 32))))))
 ))
 (let (($x49 (forall ((input.ind-%var925X (_ BitVec 32)) (input.ind-%var926X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var925X)))
 (=> $x117 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var925X input.ind-%var926X) false))))
 ))
 (let (($x119 (forall ((input.ind-%var924X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var924X)))
 (= $x170 false)))
 ))
 (let (($x58 (and (and $x119 $x49) $x92)))
 (let (($x172 (and $x58 $x138)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x169 (and $x156 $x172)))
 (let (($x53 (forall ((input.ind-%var937X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var937X)))
 (=> $x140 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var937X) (_ bv0 32)))))
 ))
 (let (($x13 (forall ((input.ind-%var936X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var936X)))
 (= $x140 false)))
 ))
 (let (($x161 (and $x13 $x53)))
 (let (($x115 (and $x161 $x169)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x96 (and $x19 $x115)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x84 (and $x21 $x96)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x91 (and $x10 $x84)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x165 (and $x25 $x91)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x151 (and $x38 $x165)))
 (let (($x80 (=> $x151 $x116)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x8)))
 (let (($x70 (= ?x157 input.dst.llvm-%n)))
 (let (($x132 (= $x70 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x22 (concat ?x51 (concat ?x95 ?x43)))))
 (let (($x82 (= input.dst.llvm-%n ?x47)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x91)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x172 $x96)))
 (let (($x151 (and $x84 $x165)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x138 $x151)))
 (let (($x103 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x142)))))))
 (let (($x81 (and (and (and $x97 $x103) $x64) $x82)))
 (let (($x56 (= $x81 true)))
 (let (($x122 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x85 (and $x122 $x56)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x168 (and $x42 $x85)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x159 (and $x60 $x168)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x74 (and $x32 $x159)))
 (let (($x27 (forall ((input.ind-%var979X (_ BitVec 32)) (input.ind-%var981X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var979X input.ind-%var981X)))
 (let (($x33 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var979X)))
 (=> (and $x33 $x120) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var979X input.ind-%var981X) (_ bv0 32))))))
 ))
 (let (($x126 (forall ((input.ind-%var979X (_ BitVec 32)) (input.ind-%var980X (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var979X)))
 (=> $x33 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var979X input.ind-%var980X) false))))
 ))
 (let (($x58 (forall ((input.ind-%var978X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var978X)))
 (= $x62 false)))
 ))
 (let (($x52 (and (and $x58 $x126) $x27)))
 (let (($x17 (and $x52 $x74)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x113 (and $x49 $x17)))
 (let (($x28 (forall ((input.ind-%var991X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var991X)))
 (=> $x39 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var991X) (_ bv0 32)))))
 ))
 (let (($x155 (forall ((input.ind-%var990X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var990X)))
 (= $x39 false)))
 ))
 (let (($x79 (and $x155 $x28)))
 (let (($x9 (and $x79 $x113)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x152 (and $x19 $x9)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x35 (and $x21 $x152)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x109 (and $x10 $x35)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x67 (and $x25 $x109)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x147 (and $x38 $x67)))
 (let (($x136 (=> $x147 $x132)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x8)))
 (let (($x70 (= ?x157 input.dst.llvm-%n)))
 (let (($x132 (= $x70 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x22 (concat ?x51 (concat ?x95 ?x43)))))
 (let (($x82 (= input.dst.llvm-%n ?x47)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x91)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x172 $x96)))
 (let (($x151 (and $x84 $x165)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x138 $x151)))
 (let (($x103 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x142)))))))
 (let (($x81 (and (and (and $x97 $x103) $x64) $x82)))
 (let (($x56 (= $x81 true)))
 (let (($x122 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x85 (and $x122 $x56)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x168 (and $x42 $x85)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x159 (and $x60 $x168)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x74 (and $x32 $x159)))
 (let (($x27 (forall ((input.ind-%var979X (_ BitVec 32)) (input.ind-%var981X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var979X input.ind-%var981X)))
 (let (($x33 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var979X)))
 (=> (and $x33 $x120) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var979X input.ind-%var981X) (_ bv0 32))))))
 ))
 (let (($x126 (forall ((input.ind-%var979X (_ BitVec 32)) (input.ind-%var980X (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var979X)))
 (=> $x33 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var979X input.ind-%var980X) false))))
 ))
 (let (($x58 (forall ((input.ind-%var978X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var978X)))
 (= $x62 false)))
 ))
 (let (($x52 (and (and $x58 $x126) $x27)))
 (let (($x17 (and $x52 $x74)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x113 (and $x49 $x17)))
 (let (($x28 (forall ((input.ind-%var991X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var991X)))
 (=> $x39 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var991X) (_ bv0 32)))))
 ))
 (let (($x155 (forall ((input.ind-%var990X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var990X)))
 (= $x39 false)))
 ))
 (let (($x79 (and $x155 $x28)))
 (let (($x9 (and $x79 $x113)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x152 (and $x19 $x9)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x35 (and $x21 $x152)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x109 (and $x10 $x35)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x67 (and $x25 $x109)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x147 (and $x38 $x67)))
 (let (($x136 (=> $x147 $x132)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x161 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x129 (= $x161 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x71 (concat ?x80 (concat ?x136 ?x70)))))
 (let (($x12 (= input.dst.llvm-%n ?x128)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x109)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x17 $x152)))
 (let (($x147 (and $x35 $x67)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x74 $x147)))
 (let (($x98 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x111)))))))
 (let (($x99 (and (and (and $x168 $x98) $x87) $x12)))
 (let (($x50 (= $x99 true)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x72 (and $x16 $x50)))
 (let (($x165 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x89 (and $x165 $x72)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x112 (and $x84 $x89)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x101 (and $x115 $x112)))
 (let (($x102 (forall ((input.ind-%var1009X (_ BitVec 32)) (input.ind-%var1011X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1009X input.ind-%var1011X)))
 (let (($x145 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1009X)))
 (=> (and $x145 $x63) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1009X input.ind-%var1011X) (_ bv0 32))))))
 ))
 (let (($x40 (forall ((input.ind-%var1009X (_ BitVec 32)) (input.ind-%var1010X (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1009X)))
 (=> $x145 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1009X input.ind-%var1010X) false))))
 ))
 (let (($x52 (forall ((input.ind-%var1008X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1008X)))
 (= $x45 false)))
 ))
 (let (($x172 (and (and $x52 $x40) $x102)))
 (let (($x26 (and $x172 $x101)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x76 (and $x126 $x26)))
 (let (($x120 (forall ((input.ind-%var1021X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1021X)))
 (=> $x6 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1021X) (_ bv0 32)))))
 ))
 (let (($x117 (forall ((input.ind-%var1020X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1020X)))
 (= $x6 false)))
 ))
 (let (($x108 (and $x117 $x120)))
 (let (($x114 (and $x108 $x76)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x123 (and $x19 $x114)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x121 (and $x21 $x123)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x135 (and $x10 $x121)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x88 (and $x25 $x135)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x44 (and $x38 $x88)))
 (let (($x93 (=> $x44 $x129)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x161 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x129 (= $x161 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x71 (concat ?x80 (concat ?x136 ?x70)))))
 (let (($x12 (= input.dst.llvm-%n ?x128)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x109)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x17 $x152)))
 (let (($x147 (and $x35 $x67)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x74 $x147)))
 (let (($x98 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x111)))))))
 (let (($x99 (and (and (and $x168 $x98) $x87) $x12)))
 (let (($x50 (= $x99 true)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x72 (and $x16 $x50)))
 (let (($x165 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x89 (and $x165 $x72)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x112 (and $x84 $x89)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x101 (and $x115 $x112)))
 (let (($x102 (forall ((input.ind-%var1009X (_ BitVec 32)) (input.ind-%var1011X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1009X input.ind-%var1011X)))
 (let (($x145 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1009X)))
 (=> (and $x145 $x63) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1009X input.ind-%var1011X) (_ bv0 32))))))
 ))
 (let (($x40 (forall ((input.ind-%var1009X (_ BitVec 32)) (input.ind-%var1010X (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1009X)))
 (=> $x145 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1009X input.ind-%var1010X) false))))
 ))
 (let (($x52 (forall ((input.ind-%var1008X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1008X)))
 (= $x45 false)))
 ))
 (let (($x172 (and (and $x52 $x40) $x102)))
 (let (($x26 (and $x172 $x101)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x76 (and $x126 $x26)))
 (let (($x120 (forall ((input.ind-%var1021X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1021X)))
 (=> $x6 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1021X) (_ bv0 32)))))
 ))
 (let (($x117 (forall ((input.ind-%var1020X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1020X)))
 (= $x6 false)))
 ))
 (let (($x108 (and $x117 $x120)))
 (let (($x114 (and $x108 $x76)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x123 (and $x19 $x114)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x121 (and $x21 $x123)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x135 (and $x10 $x121)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x88 (and $x25 $x135)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x44 (and $x38 $x88)))
 (let (($x93 (=> $x44 $x129)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x14 (= $x29 false)))
 (let (($x107 (= $x14 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x90)))
 (let (($x77 (= ?x122 input.dst.llvm-%n)))
 (let (($x30 (= $x77 true)))
 (let (($x32 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x143 (= $x32 true)))
 (let (($x148 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x156 (= $x148 true)))
 (let (($x28 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x162 (= $x28 true)))
 (let (($x146 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x54 (= $x146 true)))
 (let (($x157 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x155 (= $x157 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x135)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x26 $x123)))
 (let (($x44 (and $x121 $x88)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x80 $x44)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x128 $x12)))))))
 (let (($x129 (and $x101 $x161)))
 (let (($x93 (= $x129 true)))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x170 (= $x8 true)))
 (let (($x46 (and $x170 $x93)))
 (let (($x62 (and $x46 $x155)))
 (let (($x65 (and $x62 $x54)))
 (let (($x140 (and $x65 $x162)))
 (let (($x92 (and $x140 $x156)))
 (let (($x94 (and $x92 $x143)))
 (let (($x55 (and $x94 $x30)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x79 (and $x87 $x55)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x57 (and $x109 $x79)))
 (let (($x152 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x142 (and $x152 $x57)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x97 (and $x113 $x142)))
 (let (($x53 (forall ((input.ind-%var1063X (_ BitVec 32)) (input.ind-%var1065X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1063X input.ind-%var1065X)))
 (let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1063X)))
 (=> (and $x51 $x165) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1063X input.ind-%var1065X) (_ bv0 32))))))
 ))
 (let (($x118 (forall ((input.ind-%var1063X (_ BitVec 32)) (input.ind-%var1064X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1063X)))
 (=> $x51 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1063X input.ind-%var1064X) false))))
 ))
 (let (($x102 (forall ((input.ind-%var1062X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1062X)))
 (= $x103 false)))
 ))
 (let (($x74 (and (and $x102 $x118) $x53)))
 (let (($x58 (and $x74 $x97)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x141 (and $x24 $x58)))
 (let (($x145 (forall ((input.ind-%var1075X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1075X)))
 (=> $x6 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1075X) (_ bv0 32)))))
 ))
 (let (($x133 (forall ((input.ind-%var1074X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1074X)))
 (= $x6 false)))
 ))
 (let (($x63 (and $x133 $x145)))
 (let (($x60 (and $x63 $x141)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x119 (and $x20 $x60)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x31 (and $x83 $x119)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x131 (and $x25 $x31)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x75 (and $x34 $x131)))
 (let (($x166 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x100 (and $x166 $x75)))
 (let (($x144 (=> $x100 $x107)))
 (not $x144))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x14 (= $x29 false)))
 (let (($x107 (= $x14 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x90)))
 (let (($x77 (= ?x122 input.dst.llvm-%n)))
 (let (($x30 (= $x77 true)))
 (let (($x32 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x143 (= $x32 true)))
 (let (($x148 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x156 (= $x148 true)))
 (let (($x28 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x162 (= $x28 true)))
 (let (($x146 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x54 (= $x146 true)))
 (let (($x157 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x155 (= $x157 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x135)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x26 $x123)))
 (let (($x44 (and $x121 $x88)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x80 $x44)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x128 $x12)))))))
 (let (($x129 (and $x101 $x161)))
 (let (($x93 (= $x129 true)))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x170 (= $x8 true)))
 (let (($x46 (and $x170 $x93)))
 (let (($x62 (and $x46 $x155)))
 (let (($x65 (and $x62 $x54)))
 (let (($x140 (and $x65 $x162)))
 (let (($x92 (and $x140 $x156)))
 (let (($x94 (and $x92 $x143)))
 (let (($x55 (and $x94 $x30)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x79 (and $x87 $x55)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x57 (and $x109 $x79)))
 (let (($x152 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x142 (and $x152 $x57)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x97 (and $x113 $x142)))
 (let (($x53 (forall ((input.ind-%var1063X (_ BitVec 32)) (input.ind-%var1065X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1063X input.ind-%var1065X)))
 (let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1063X)))
 (=> (and $x51 $x165) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1063X input.ind-%var1065X) (_ bv0 32))))))
 ))
 (let (($x118 (forall ((input.ind-%var1063X (_ BitVec 32)) (input.ind-%var1064X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1063X)))
 (=> $x51 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1063X input.ind-%var1064X) false))))
 ))
 (let (($x102 (forall ((input.ind-%var1062X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1062X)))
 (= $x103 false)))
 ))
 (let (($x74 (and (and $x102 $x118) $x53)))
 (let (($x58 (and $x74 $x97)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x141 (and $x24 $x58)))
 (let (($x145 (forall ((input.ind-%var1075X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1075X)))
 (=> $x6 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1075X) (_ bv0 32)))))
 ))
 (let (($x133 (forall ((input.ind-%var1074X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1074X)))
 (= $x6 false)))
 ))
 (let (($x63 (and $x133 $x145)))
 (let (($x60 (and $x63 $x141)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x119 (and $x20 $x60)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x31 (and $x83 $x119)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x131 (and $x25 $x31)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x75 (and $x34 $x131)))
 (let (($x166 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x100 (and $x166 $x75)))
 (let (($x144 (=> $x100 $x107)))
 (not $x144))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00004000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x55)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x90 $x77)))
 (let (($x57 (and $x30 $x79)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x61 $x57)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x162)))))))
 (let (($x134 (and $x143 $x142)))
 (let (($x84 (= $x134 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x107 (concat ?x100 (concat ?x119 ?x141)))))
 (let (($x37 (= input.dst.llvm-%n ?x144)))
 (let (($x18 (and (and (and $x143 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x142) $x37)))
 (let (($x126 (= $x18 true)))
 (let (($x129 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x5 (and $x129 $x126)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x151 (and $x88 $x5)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x82 (and $x121 $x151)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x33 (and $x114 $x82)))
 (let (($x73 (forall ((input.ind-%var1117X (_ BitVec 32)) (input.ind-%var1119X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1117X input.ind-%var1119X)))
 (let (($x170 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1117X)))
 (=> (and $x170 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1117X input.ind-%var1119X) (_ bv0 32))))))
 ))
 (let (($x136 (forall ((input.ind-%var1117X (_ BitVec 32)) (input.ind-%var1118X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1117X)))
 (=> $x170 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1117X input.ind-%var1118X) false))))
 ))
 (let (($x53 (forall ((input.ind-%var1116X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1116X)))
 (= $x22 false)))
 ))
 (let (($x26 (and (and $x53 $x136) $x73)))
 (let (($x108 (and $x26 $x33)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x19 (and $x85 $x108)))
 (let (($x51 (forall ((input.ind-%var1129X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1129X)))
 (=> $x6 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1129X) (_ bv0 32)))))
 ))
 (let (($x52 (forall ((input.ind-%var1128X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1128X)))
 (= $x6 false)))
 ))
 (let (($x165 (and $x52 $x51)))
 (let (($x68 (and $x165 $x19)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x117 (and $x21 $x68)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x45 (and $x11 $x117)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x169 (and $x34 $x45)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x40 (and $x38 $x169)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x138 (and $x116 $x40)))
 (let (($x64 (=> $x138 $x84)))
 (not $x64))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x55)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x90 $x77)))
 (let (($x57 (and $x30 $x79)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x61 $x57)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x162)))))))
 (let (($x134 (and $x143 $x142)))
 (let (($x84 (= $x134 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x107 (concat ?x100 (concat ?x119 ?x141)))))
 (let (($x37 (= input.dst.llvm-%n ?x144)))
 (let (($x18 (and (and (and $x143 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x142) $x37)))
 (let (($x126 (= $x18 true)))
 (let (($x129 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x5 (and $x129 $x126)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x151 (and $x88 $x5)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x82 (and $x121 $x151)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x33 (and $x114 $x82)))
 (let (($x73 (forall ((input.ind-%var1117X (_ BitVec 32)) (input.ind-%var1119X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1117X input.ind-%var1119X)))
 (let (($x170 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1117X)))
 (=> (and $x170 $x109) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1117X input.ind-%var1119X) (_ bv0 32))))))
 ))
 (let (($x136 (forall ((input.ind-%var1117X (_ BitVec 32)) (input.ind-%var1118X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1117X)))
 (=> $x170 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1117X input.ind-%var1118X) false))))
 ))
 (let (($x53 (forall ((input.ind-%var1116X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1116X)))
 (= $x22 false)))
 ))
 (let (($x26 (and (and $x53 $x136) $x73)))
 (let (($x108 (and $x26 $x33)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x19 (and $x85 $x108)))
 (let (($x51 (forall ((input.ind-%var1129X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1129X)))
 (=> $x6 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1129X) (_ bv0 32)))))
 ))
 (let (($x52 (forall ((input.ind-%var1128X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1128X)))
 (= $x6 false)))
 ))
 (let (($x165 (and $x52 $x51)))
 (let (($x68 (and $x165 $x19)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x117 (and $x21 $x68)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x45 (and $x11 $x117)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x169 (and $x34 $x45)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x40 (and $x38 $x169)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x138 (and $x116 $x40)))
 (let (($x64 (=> $x138 $x84)))
 (not $x64))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x110)))
 (let (($x9 (= ?x43 input.spec-%var-n-1)))
 (let (($x81 (= $x9 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x42 (concat ?x47 (concat ?x46 ?x111)))))
 (let (($x20 (= input.dst.llvm-%n ?x63)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x169)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x108 $x117)))
 (let (($x138 (and $x45 $x40)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x33 $x138)))
 (let (($x131 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x29)))))))
 (let (($x103 (and (and (and $x151 $x131) $x134) $x20)))
 (let (($x17 (= $x103 true)))
 (let (($x106 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x118 (and $x106 $x17)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x159 (and $x79 $x118)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x168 (and $x30 $x159)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x152 (and $x66 $x168)))
 (let (($x94 (forall ((input.ind-%var1147X (_ BitVec 32)) (input.ind-%var1149X (_ BitVec 32)) )(let (($x44 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1147X input.ind-%var1149X)))
 (let (($x32 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1147X)))
 (=> (and $x32 $x44) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1147X input.ind-%var1149X) (_ bv0 32))))))
 ))
 (let (($x65 (forall ((input.ind-%var1147X (_ BitVec 32)) (input.ind-%var1148X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1147X)))
 (=> $x32 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1147X input.ind-%var1148X) false))))
 ))
 (let (($x26 (forall ((input.ind-%var1146X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1146X)))
 (= $x124 false)))
 ))
 (let (($x90 (and (and $x26 $x65) $x94)))
 (let (($x147 (and $x90 $x152)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x128 (and $x136 $x147)))
 (let (($x109 (forall ((input.ind-%var1159X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1159X)))
 (=> $x167 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1159X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var1158X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1158X)))
 (= $x167 false)))
 ))
 (let (($x8 (and $x91 $x109)))
 (let (($x99 (and $x8 $x128)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x113 (and $x21 $x99)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x87 (and $x11 $x113)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x145 (and $x34 $x87)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x70 (and $x38 $x145)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x13 (and $x116 $x70)))
 (let (($x115 (=> $x13 $x81)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x110)))
 (let (($x9 (= ?x43 input.spec-%var-n-1)))
 (let (($x81 (= $x9 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x42 (concat ?x47 (concat ?x46 ?x111)))))
 (let (($x20 (= input.dst.llvm-%n ?x63)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x169)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x108 $x117)))
 (let (($x138 (and $x45 $x40)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x33 $x138)))
 (let (($x131 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x29)))))))
 (let (($x103 (and (and (and $x151 $x131) $x134) $x20)))
 (let (($x17 (= $x103 true)))
 (let (($x106 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x118 (and $x106 $x17)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x159 (and $x79 $x118)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x168 (and $x30 $x159)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x152 (and $x66 $x168)))
 (let (($x94 (forall ((input.ind-%var1147X (_ BitVec 32)) (input.ind-%var1149X (_ BitVec 32)) )(let (($x44 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1147X input.ind-%var1149X)))
 (let (($x32 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1147X)))
 (=> (and $x32 $x44) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1147X input.ind-%var1149X) (_ bv0 32))))))
 ))
 (let (($x65 (forall ((input.ind-%var1147X (_ BitVec 32)) (input.ind-%var1148X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1147X)))
 (=> $x32 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1147X input.ind-%var1148X) false))))
 ))
 (let (($x26 (forall ((input.ind-%var1146X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1146X)))
 (= $x124 false)))
 ))
 (let (($x90 (and (and $x26 $x65) $x94)))
 (let (($x147 (and $x90 $x152)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x128 (and $x136 $x147)))
 (let (($x109 (forall ((input.ind-%var1159X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1159X)))
 (=> $x167 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1159X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var1158X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1158X)))
 (= $x167 false)))
 ))
 (let (($x8 (and $x91 $x109)))
 (let (($x99 (and $x8 $x128)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x113 (and $x21 $x99)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x87 (and $x11 $x113)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x145 (and $x34 $x87)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x70 (and $x38 $x145)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x13 (and $x116 $x70)))
 (let (($x115 (=> $x13 $x81)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x54)))
 (let (($x143 (= ?x162 input.dst.llvm-%n)))
 (let (($x53 (= $x143 true)))
 (let ((?x9 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x161 (concat ?x72 (concat ?x64 (concat ?x115 ?x9)))))
 (let (($x156 (= input.dst.llvm-%n ?x161)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x145)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x147 $x113)))
 (let (($x13 (and $x87 $x70)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x152 $x13)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x67)))))))
 (let (($x39 (and (and (and $x159 $x49) $x50) $x156)))
 (let (($x74 (= $x39 true)))
 (let (($x133 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x7 (and $x133 $x74)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x98 (and $x40 $x7)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x114 (and $x45 $x98)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x80 (and $x68 $x114)))
 (let (($x82 (forall ((input.ind-%var1177X (_ BitVec 32)) (input.ind-%var1179X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1177X input.ind-%var1179X)))
 (let (($x5 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1177X)))
 (=> (and $x5 $x57) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1177X input.ind-%var1179X) (_ bv0 32))))))
 ))
 (let (($x141 (forall ((input.ind-%var1177X (_ BitVec 32)) (input.ind-%var1178X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1177X)))
 (=> $x5 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1177X input.ind-%var1178X) false))))
 ))
 (let (($x90 (forall ((input.ind-%var1176X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1176X)))
 (= $x148 false)))
 ))
 (let (($x108 (and (and $x90 $x141) $x82)))
 (let (($x89 (and $x108 $x80)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x101 (and $x65 $x89)))
 (let (($x44 (forall ((input.ind-%var1189X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1189X)))
 (=> $x102 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1189X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var1188X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1188X)))
 (= $x102 false)))
 ))
 (let (($x62 (and $x170 $x44)))
 (let (($x135 (and $x62 $x101)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x129 (and $x21 $x135)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x140 (and $x11 $x129)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x92 (and $x34 $x140)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x123 (and $x38 $x92)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x155 (and $x116 $x123)))
 (let (($x112 (=> $x155 $x53)))
 (not $x112)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x54)))
 (let (($x143 (= ?x162 input.dst.llvm-%n)))
 (let (($x53 (= $x143 true)))
 (let ((?x9 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x161 (concat ?x72 (concat ?x64 (concat ?x115 ?x9)))))
 (let (($x156 (= input.dst.llvm-%n ?x161)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x145)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x147 $x113)))
 (let (($x13 (and $x87 $x70)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x152 $x13)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x67)))))))
 (let (($x39 (and (and (and $x159 $x49) $x50) $x156)))
 (let (($x74 (= $x39 true)))
 (let (($x133 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x7 (and $x133 $x74)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x98 (and $x40 $x7)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x114 (and $x45 $x98)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x80 (and $x68 $x114)))
 (let (($x82 (forall ((input.ind-%var1177X (_ BitVec 32)) (input.ind-%var1179X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1177X input.ind-%var1179X)))
 (let (($x5 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1177X)))
 (=> (and $x5 $x57) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1177X input.ind-%var1179X) (_ bv0 32))))))
 ))
 (let (($x141 (forall ((input.ind-%var1177X (_ BitVec 32)) (input.ind-%var1178X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1177X)))
 (=> $x5 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1177X input.ind-%var1178X) false))))
 ))
 (let (($x90 (forall ((input.ind-%var1176X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1176X)))
 (= $x148 false)))
 ))
 (let (($x108 (and (and $x90 $x141) $x82)))
 (let (($x89 (and $x108 $x80)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x101 (and $x65 $x89)))
 (let (($x44 (forall ((input.ind-%var1189X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1189X)))
 (=> $x102 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1189X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var1188X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1188X)))
 (= $x102 false)))
 ))
 (let (($x62 (and $x170 $x44)))
 (let (($x135 (and $x62 $x101)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x129 (and $x21 $x135)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x140 (and $x11 $x129)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x92 (and $x34 $x140)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x123 (and $x38 $x92)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x155 (and $x116 $x123)))
 (let (($x112 (=> $x155 $x53)))
 (not $x112)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x219 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (= $x219 false)))
 (let (($x221 (= $x220 true)))
 (let ((?x121 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x121)))
 (let (($x200 (= ?x12 input.dst.llvm-%n)))
 (let (($x201 (= $x200 true)))
 (let (($x196 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x197 (= $x196 true)))
 (let (($x193 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x194 (= $x193 true)))
 (let (($x190 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x191 (= $x190 true)))
 (let (($x187 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x188 (= $x187 true)))
 (let (($x184 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x185 (= $x184 true)))
 (let (($x180 (= (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x181 (= $x180 true)))
 (let (($x177 (= (_ bv0 32) input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x178 (= $x177 true)))
 (let (($x174 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x175 (= $x174 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x153)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x104 $x150)))
 (let (($x163 (and $x160 $x154)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x120 $x163)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x125)))))))
 (let (($x59 (and $x149 $x164)))
 (let (($x105 (= $x59 true)))
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x119 true)))
 (let (($x126 (bvsle input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x77 (= $x126 true)))
 (let (($x55 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x106 (= $x55 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x157 (= $x61 true)))
 (let (($x76 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x85 (= $x76 true)))
 (let (($x109 (bvsle input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x132 (= $x109 true)))
 (let (($x78 (bvule input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x142 (= $x78 true)))
 (let (($x43 (= ?x12 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x91 (= $x43 true)))
 (let (($x18 (and $x91 $x142)))
 (let (($x6 (and $x18 $x132)))
 (let (($x73 (and $x6 $x85)))
 (let (($x71 (and $x73 $x157)))
 (let (($x144 (and $x71 $x106)))
 (let (($x75 (and $x144 $x77)))
 (let (($x151 (and $x75 $x29)))
 (let (($x173 (and $x151 $x105)))
 (let (($x176 (and $x173 $x175)))
 (let (($x179 (and $x176 $x178)))
 (let (($x182 (and $x179 $x181)))
 (let (($x186 (and $x182 $x185)))
 (let (($x189 (and $x186 $x188)))
 (let (($x192 (and $x189 $x191)))
 (let (($x195 (and $x192 $x194)))
 (let (($x198 (and $x195 $x197)))
 (let (($x202 (and $x198 $x201)))
 (let (($x143 (forall ((input.ind-%var1199X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1199X)))
 (=> $x102 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1199X) (_ bv0 32)))))
 ))
 (let (($x92 (forall ((input.ind-%var1198X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1198X)))
 (= $x102 false)))
 ))
 (let (($x53 (and $x92 $x143)))
 (let (($x203 (and $x53 $x202)))
 (let (($x101 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x204 (and $x101 $x203)))
 (let (($x114 (forall ((input.ind-%var1217X (_ BitVec 32)) (input.ind-%var1219X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1217X input.ind-%var1219X)))
 (let (($x47 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1217X)))
 (=> (and $x47 $x40) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1217X input.ind-%var1219X) (_ bv0 32))))))
 ))
 (let (($x52 (forall ((input.ind-%var1217X (_ BitVec 32)) (input.ind-%var1218X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1217X)))
 (=> $x47 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1217X input.ind-%var1218X) false))))
 ))
 (let (($x97 (forall ((input.ind-%var1216X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1216X)))
 (= $x131 false)))
 ))
 (let (($x89 (and (and $x97 $x52) $x114)))
 (let (($x205 (and $x89 $x204)))
 (let (($x171 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x206 (and $x171 $x205)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x207 (and $x50 $x206)))
 (let (($x145 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x208 (and $x145 $x207)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x209 (and $x113 $x208)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x210 (and $x128 $x209)))
 (let (($x51 (forall ((input.ind-%var1237X (_ BitVec 32)) (input.ind-%var1239X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1237X input.ind-%var1239X)))
 (let (($x47 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1237X)))
 (=> (and $x47 $x40) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1237X input.ind-%var1239X) (_ bv0 32))))))
 ))
 (let (($x93 (forall ((input.ind-%var1237X (_ BitVec 32)) (input.ind-%var1238X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1237X)))
 (=> $x47 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1237X input.ind-%var1238X) false))))
 ))
 (let (($x82 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1236X)))
 (= $x131 false)))
 ))
 (let (($x152 (and (and $x82 $x93) $x51)))
 (let (($x211 (and $x152 $x210)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x212 (and $x60 $x211)))
 (let (($x5 (forall ((input.ind-%var1249X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1249X)))
 (=> $x102 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1249X) (_ bv0 32)))))
 ))
 (let (($x88 (forall ((input.ind-%var1248X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1248X)))
 (= $x102 false)))
 ))
 (let (($x57 (and $x88 $x5)))
 (let (($x213 (and $x57 $x212)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x214 (and $x83 $x213)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x215 (and $x10 $x214)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x216 (and $x38 $x215)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x217 (and $x25 $x216)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x218 (and $x34 $x217)))
 (let (($x222 (=> $x218 $x221)))
 (not $x222)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x219 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (= $x219 false)))
 (let (($x221 (= $x220 true)))
 (let ((?x121 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x121)))
 (let (($x200 (= ?x12 input.dst.llvm-%n)))
 (let (($x201 (= $x200 true)))
 (let (($x196 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x197 (= $x196 true)))
 (let (($x193 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x194 (= $x193 true)))
 (let (($x190 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x191 (= $x190 true)))
 (let (($x187 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x188 (= $x187 true)))
 (let (($x184 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x185 (= $x184 true)))
 (let (($x180 (= (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x181 (= $x180 true)))
 (let (($x177 (= (_ bv0 32) input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x178 (= $x177 true)))
 (let (($x174 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x175 (= $x174 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x153)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x104 $x150)))
 (let (($x163 (and $x160 $x154)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x120 $x163)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x125)))))))
 (let (($x59 (and $x149 $x164)))
 (let (($x105 (= $x59 true)))
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x119 true)))
 (let (($x126 (bvsle input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x77 (= $x126 true)))
 (let (($x55 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x106 (= $x55 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x157 (= $x61 true)))
 (let (($x76 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x85 (= $x76 true)))
 (let (($x109 (bvsle input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x132 (= $x109 true)))
 (let (($x78 (bvule input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x142 (= $x78 true)))
 (let (($x43 (= ?x12 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x91 (= $x43 true)))
 (let (($x18 (and $x91 $x142)))
 (let (($x6 (and $x18 $x132)))
 (let (($x73 (and $x6 $x85)))
 (let (($x71 (and $x73 $x157)))
 (let (($x144 (and $x71 $x106)))
 (let (($x75 (and $x144 $x77)))
 (let (($x151 (and $x75 $x29)))
 (let (($x173 (and $x151 $x105)))
 (let (($x176 (and $x173 $x175)))
 (let (($x179 (and $x176 $x178)))
 (let (($x182 (and $x179 $x181)))
 (let (($x186 (and $x182 $x185)))
 (let (($x189 (and $x186 $x188)))
 (let (($x192 (and $x189 $x191)))
 (let (($x195 (and $x192 $x194)))
 (let (($x198 (and $x195 $x197)))
 (let (($x202 (and $x198 $x201)))
 (let (($x143 (forall ((input.ind-%var1199X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1199X)))
 (=> $x102 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1199X) (_ bv0 32)))))
 ))
 (let (($x92 (forall ((input.ind-%var1198X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1198X)))
 (= $x102 false)))
 ))
 (let (($x53 (and $x92 $x143)))
 (let (($x203 (and $x53 $x202)))
 (let (($x101 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x204 (and $x101 $x203)))
 (let (($x114 (forall ((input.ind-%var1217X (_ BitVec 32)) (input.ind-%var1219X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1217X input.ind-%var1219X)))
 (let (($x47 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1217X)))
 (=> (and $x47 $x40) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1217X input.ind-%var1219X) (_ bv0 32))))))
 ))
 (let (($x52 (forall ((input.ind-%var1217X (_ BitVec 32)) (input.ind-%var1218X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1217X)))
 (=> $x47 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1217X input.ind-%var1218X) false))))
 ))
 (let (($x97 (forall ((input.ind-%var1216X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1216X)))
 (= $x131 false)))
 ))
 (let (($x89 (and (and $x97 $x52) $x114)))
 (let (($x205 (and $x89 $x204)))
 (let (($x171 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x206 (and $x171 $x205)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x207 (and $x50 $x206)))
 (let (($x145 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x208 (and $x145 $x207)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x209 (and $x113 $x208)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x210 (and $x128 $x209)))
 (let (($x51 (forall ((input.ind-%var1237X (_ BitVec 32)) (input.ind-%var1239X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1237X input.ind-%var1239X)))
 (let (($x47 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1237X)))
 (=> (and $x47 $x40) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1237X input.ind-%var1239X) (_ bv0 32))))))
 ))
 (let (($x93 (forall ((input.ind-%var1237X (_ BitVec 32)) (input.ind-%var1238X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1237X)))
 (=> $x47 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1237X input.ind-%var1238X) false))))
 ))
 (let (($x82 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1236X)))
 (= $x131 false)))
 ))
 (let (($x152 (and (and $x82 $x93) $x51)))
 (let (($x211 (and $x152 $x210)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x212 (and $x60 $x211)))
 (let (($x5 (forall ((input.ind-%var1249X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1249X)))
 (=> $x102 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1249X) (_ bv0 32)))))
 ))
 (let (($x88 (forall ((input.ind-%var1248X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1248X)))
 (= $x102 false)))
 ))
 (let (($x57 (and $x88 $x5)))
 (let (($x213 (and $x57 $x212)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x214 (and $x83 $x213)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x215 (and $x10 $x214)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x216 (and $x38 $x215)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x217 (and $x25 $x216)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x218 (and $x34 $x217)))
 (let (($x222 (=> $x218 $x221)))
 (not $x222)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00004000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x16 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (not $x16)))
 (let (($x7 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x81 (not $x7)))
 (let (($x19 (or $x81 $x108)))
 (let (($x141 (= $x19 true)))
 (let ((?x135 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x129 (bvneg ?x135)))
 (let (($x140 (= ?x129 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x140 true)))
 (let ((?x222 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x223 (bvneg ?x222)))
 (let (($x138 (= ?x223 input.dst.llvm-%n)))
 (let (($x20 (= $x138 true)))
 (let (($x28 (= ?x223 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x35 (= $x28 true)))
 (let (($x219 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x220 (= $x219 true)))
 (let (($x216 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x217 (= $x216 true)))
 (let (($x212 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x213 (= $x212 true)))
 (let (($x209 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x210 (= $x209 true)))
 (let ((?x201 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x201)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x196 $x199)))
 (let (($x203 (and $x200 $x202)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x182 $x203)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x188 $x189)))))))
 (let (($x205 (and $x195 $x204)))
 (let (($x206 (= $x205 true)))
 (let (($x176 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x177 (= $x176 true)))
 (let ((?x59 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x59)))
 (let (($x174 (= ?x105 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x175 (= $x174 true)))
 (let (($x178 (and $x175 $x177)))
 (let (($x207 (and $x178 $x206)))
 (let (($x211 (and $x207 $x210)))
 (let (($x214 (and $x211 $x213)))
 (let (($x218 (and $x214 $x217)))
 (let (($x221 (and $x218 $x220)))
 (let (($x65 (and $x221 $x35)))
 (let (($x165 (and $x65 $x20)))
 (let (($x32 (and $x165 $x54)))
 (let (($x153 (forall ((input.ind-%var1283X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1283X)))
 (=> $x136 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1283X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var1282X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1282X)))
 (= $x136 false)))
 ))
 (let (($x154 (and $x120 $x153)))
 (let (($x155 (and $x154 $x32)))
 (let (($x127 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x162 (and $x127 $x155)))
 (let (($x125 (forall ((input.ind-%var1301X (_ BitVec 32)) (input.ind-%var1303X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1301X input.ind-%var1303X)))
 (let (($x52 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1301X)))
 (=> (and $x52 $x70) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1301X input.ind-%var1303X) (_ bv0 32))))))
 ))
 (let (($x69 (forall ((input.ind-%var1301X (_ BitVec 32)) (input.ind-%var1302X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1301X)))
 (=> $x52 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1301X input.ind-%var1302X) false))))
 ))
 (let (($x126 (forall ((input.ind-%var1300X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1300X)))
 (= $x63 false)))
 ))
 (let (($x15 (and (and $x126 $x69) $x125)))
 (let (($x62 (and $x15 $x162)))
 (let (($x71 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x21 (and $x71 $x62)))
 (let (($x157 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x122 (and $x157 $x21)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x170 (and $x73 $x122)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x148 (and $x76 $x170)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x14 (and $x132 $x148)))
 (let (($x78 (forall ((input.ind-%var1321X (_ BitVec 32)) (input.ind-%var1323X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1321X input.ind-%var1323X)))
 (let (($x52 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1321X)))
 (=> (and $x52 $x70) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1321X input.ind-%var1323X) (_ bv0 32))))))
 ))
 (let (($x114 (forall ((input.ind-%var1321X (_ BitVec 32)) (input.ind-%var1322X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1321X)))
 (=> $x52 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1321X input.ind-%var1322X) false))))
 ))
 (let (($x152 (forall ((input.ind-%var1320X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1320X)))
 (= $x63 false)))
 ))
 (let (($x18 (and (and $x152 $x114) $x78)))
 (let (($x64 (and $x18 $x14)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x110 (and $x93 $x64)))
 (let (($x40 (forall ((input.ind-%var1333X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1333X)))
 (=> $x136 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1333X) (_ bv0 32)))))
 ))
 (let (($x25 (forall ((input.ind-%var1332X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1332X)))
 (= $x136 false)))
 ))
 (let (($x24 (and $x25 $x40)))
 (let (($x22 (and $x24 $x110)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x72 (and $x34 $x22)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x161 (and $x166 $x72)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x115 (and $x11 $x161)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x9 (and $x83 $x115)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x74 (and $x84 $x9)))
 (let (($x33 (=> $x74 $x141)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x16 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (not $x16)))
 (let (($x7 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x81 (not $x7)))
 (let (($x19 (or $x81 $x108)))
 (let (($x141 (= $x19 true)))
 (let ((?x135 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x129 (bvneg ?x135)))
 (let (($x140 (= ?x129 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x140 true)))
 (let ((?x222 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x223 (bvneg ?x222)))
 (let (($x138 (= ?x223 input.dst.llvm-%n)))
 (let (($x20 (= $x138 true)))
 (let (($x28 (= ?x223 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x35 (= $x28 true)))
 (let (($x219 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x220 (= $x219 true)))
 (let (($x216 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x217 (= $x216 true)))
 (let (($x212 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x213 (= $x212 true)))
 (let (($x209 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x210 (= $x209 true)))
 (let ((?x201 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x201)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x196 $x199)))
 (let (($x203 (and $x200 $x202)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x182 $x203)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x188 $x189)))))))
 (let (($x205 (and $x195 $x204)))
 (let (($x206 (= $x205 true)))
 (let (($x176 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x177 (= $x176 true)))
 (let ((?x59 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x59)))
 (let (($x174 (= ?x105 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x175 (= $x174 true)))
 (let (($x178 (and $x175 $x177)))
 (let (($x207 (and $x178 $x206)))
 (let (($x211 (and $x207 $x210)))
 (let (($x214 (and $x211 $x213)))
 (let (($x218 (and $x214 $x217)))
 (let (($x221 (and $x218 $x220)))
 (let (($x65 (and $x221 $x35)))
 (let (($x165 (and $x65 $x20)))
 (let (($x32 (and $x165 $x54)))
 (let (($x153 (forall ((input.ind-%var1283X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1283X)))
 (=> $x136 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1283X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var1282X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1282X)))
 (= $x136 false)))
 ))
 (let (($x154 (and $x120 $x153)))
 (let (($x155 (and $x154 $x32)))
 (let (($x127 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x162 (and $x127 $x155)))
 (let (($x125 (forall ((input.ind-%var1301X (_ BitVec 32)) (input.ind-%var1303X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1301X input.ind-%var1303X)))
 (let (($x52 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1301X)))
 (=> (and $x52 $x70) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1301X input.ind-%var1303X) (_ bv0 32))))))
 ))
 (let (($x69 (forall ((input.ind-%var1301X (_ BitVec 32)) (input.ind-%var1302X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1301X)))
 (=> $x52 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1301X input.ind-%var1302X) false))))
 ))
 (let (($x126 (forall ((input.ind-%var1300X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1300X)))
 (= $x63 false)))
 ))
 (let (($x15 (and (and $x126 $x69) $x125)))
 (let (($x62 (and $x15 $x162)))
 (let (($x71 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x21 (and $x71 $x62)))
 (let (($x157 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x122 (and $x157 $x21)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x170 (and $x73 $x122)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x148 (and $x76 $x170)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x14 (and $x132 $x148)))
 (let (($x78 (forall ((input.ind-%var1321X (_ BitVec 32)) (input.ind-%var1323X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1321X input.ind-%var1323X)))
 (let (($x52 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1321X)))
 (=> (and $x52 $x70) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1321X input.ind-%var1323X) (_ bv0 32))))))
 ))
 (let (($x114 (forall ((input.ind-%var1321X (_ BitVec 32)) (input.ind-%var1322X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1321X)))
 (=> $x52 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1321X input.ind-%var1322X) false))))
 ))
 (let (($x152 (forall ((input.ind-%var1320X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1320X)))
 (= $x63 false)))
 ))
 (let (($x18 (and (and $x152 $x114) $x78)))
 (let (($x64 (and $x18 $x14)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x110 (and $x93 $x64)))
 (let (($x40 (forall ((input.ind-%var1333X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1333X)))
 (=> $x136 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1333X) (_ bv0 32)))))
 ))
 (let (($x25 (forall ((input.ind-%var1332X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1332X)))
 (= $x136 false)))
 ))
 (let (($x24 (and $x25 $x40)))
 (let (($x22 (and $x24 $x110)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x72 (and $x34 $x22)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x161 (and $x166 $x72)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x115 (and $x11 $x161)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x9 (and $x83 $x115)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x74 (and $x84 $x9)))
 (let (($x33 (=> $x74 $x141)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 149 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x156 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x123 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x113 (bvmul ?x123 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x113)))
 (let (($x39 (= ?x111 ?x156)))
 (let (($x98 (= $x39 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x96)))
 (let (($x151 (= ?x8 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x151 true)))
 (let (($x119 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x29 (= $x119 true)))
 (let (($x106 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x144 (= $x106 true)))
 (let (($x77 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x75 (= $x77 true)))
 (let (($x10 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x139 (= $x10 true)))
 (let (($x160 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x160 true)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x112)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x180 $x159)))
 (let (($x158 (and $x13 $x130)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x72 $x158)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x179 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x16)))))))
 (let (($x30 (and $x179 $x149)))
 (let (($x150 (= $x30 true)))
 (let (($x170 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x148 (= $x170 true)))
 (let ((?x129 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x129)))
 (let (($x62 (= ?x140 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x21 (= $x62 true)))
 (let (($x32 (= ?x140 input.dst.llvm-%n)))
 (let (($x155 (= $x32 true)))
 (let ((?x37 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x37)))
 (let (($x165 (= ?x138 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x135 (= $x165 true)))
 (let (($x162 (and $x135 $x155)))
 (let (($x122 (and $x162 $x21)))
 (let (($x14 (and $x122 $x148)))
 (let (($x5 (and $x14 $x150)))
 (let (($x146 (and $x5 $x100)))
 (let (($x172 (and $x146 $x139)))
 (let (($x55 (and $x172 $x75)))
 (let (($x95 (and $x55 $x144)))
 (let (($x41 (and $x95 $x29)))
 (let (($x128 (and $x41 $x147)))
 (let (($x28 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x42 (and (not $x28) $x128)))
 (let (($x221 (forall ((input.ind-%var1343X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1343X)))
 (=> $x25 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1343X) (_ bv0 32)))))
 ))
 (let (($x215 (forall ((input.ind-%var1342X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1342X)))
 (= $x25 false)))
 ))
 (let (($x222 (and $x215 $x221)))
 (let (($x49 (and $x222 $x42)))
 (let (($x211 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x89 (and $x211 $x49)))
 (let (($x208 (forall ((input.ind-%var1361X (_ BitVec 32)) (input.ind-%var1363X (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1361X input.ind-%var1363X)))
 (let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1361X)))
 (=> (and $x86 $x61) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1361X input.ind-%var1363X) (_ bv0 32))))))
 ))
 (let (($x201 (forall ((input.ind-%var1361X (_ BitVec 32)) (input.ind-%var1362X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1361X)))
 (=> $x86 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1361X input.ind-%var1362X) false))))
 ))
 (let (($x181 (forall ((input.ind-%var1360X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1360X)))
 (= $x43 false)))
 ))
 (let (($x210 (and (and $x181 $x201) $x208)))
 (let (($x36 (and $x210 $x89)))
 (let (($x191 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x56 (and $x191 $x36)))
 (let (($x190 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x27 (and $x190 $x56)))
 (let (($x188 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x87 (and $x188 $x27)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x50 (and $x185 $x87)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x143 (and $x184 $x50)))
 (let (($x176 (forall ((input.ind-%var1381X (_ BitVec 32)) (input.ind-%var1383X (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1381X input.ind-%var1383X)))
 (let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1381X)))
 (=> (and $x86 $x61) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1381X input.ind-%var1383X) (_ bv0 32))))))
 ))
 (let (($x15 (forall ((input.ind-%var1381X (_ BitVec 32)) (input.ind-%var1382X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1381X)))
 (=> $x86 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1381X input.ind-%var1382X) false))))
 ))
 (let (($x109 (forall ((input.ind-%var1380X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1380X)))
 (= $x43 false)))
 ))
 (let (($x178 (and (and $x109 $x15) $x176)))
 (let (($x121 (and $x178 $x143)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x99 (and $x142 $x121)))
 (let (($x97 (forall ((input.ind-%var1393X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1393X)))
 (=> $x25 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1393X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var1392X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1392X)))
 (= $x25 false)))
 ))
 (let (($x80 (and $x40 $x97)))
 (let (($x171 (and $x80 $x99)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x57 (and $x137 $x171)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x101 (and $x11 $x57)))
 (let (($x166 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x92 (and $x166 $x101)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x12 (and $x84 $x92)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x82 (and $x23 $x12)))
 (let (($x45 (=> $x82 $x98)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x156 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x123 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x113 (bvmul ?x123 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x113)))
 (let (($x39 (= ?x111 ?x156)))
 (let (($x98 (= $x39 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x96)))
 (let (($x151 (= ?x8 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x151 true)))
 (let (($x119 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x29 (= $x119 true)))
 (let (($x106 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x144 (= $x106 true)))
 (let (($x77 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x75 (= $x77 true)))
 (let (($x10 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x139 (= $x10 true)))
 (let (($x160 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x160 true)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x112)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x180 $x159)))
 (let (($x158 (and $x13 $x130)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x72 $x158)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x179 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x16)))))))
 (let (($x30 (and $x179 $x149)))
 (let (($x150 (= $x30 true)))
 (let (($x170 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x148 (= $x170 true)))
 (let ((?x129 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x129)))
 (let (($x62 (= ?x140 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x21 (= $x62 true)))
 (let (($x32 (= ?x140 input.dst.llvm-%n)))
 (let (($x155 (= $x32 true)))
 (let ((?x37 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x37)))
 (let (($x165 (= ?x138 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x135 (= $x165 true)))
 (let (($x162 (and $x135 $x155)))
 (let (($x122 (and $x162 $x21)))
 (let (($x14 (and $x122 $x148)))
 (let (($x5 (and $x14 $x150)))
 (let (($x146 (and $x5 $x100)))
 (let (($x172 (and $x146 $x139)))
 (let (($x55 (and $x172 $x75)))
 (let (($x95 (and $x55 $x144)))
 (let (($x41 (and $x95 $x29)))
 (let (($x128 (and $x41 $x147)))
 (let (($x28 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x42 (and (not $x28) $x128)))
 (let (($x221 (forall ((input.ind-%var1343X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1343X)))
 (=> $x25 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1343X) (_ bv0 32)))))
 ))
 (let (($x215 (forall ((input.ind-%var1342X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1342X)))
 (= $x25 false)))
 ))
 (let (($x222 (and $x215 $x221)))
 (let (($x49 (and $x222 $x42)))
 (let (($x211 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x89 (and $x211 $x49)))
 (let (($x208 (forall ((input.ind-%var1361X (_ BitVec 32)) (input.ind-%var1363X (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1361X input.ind-%var1363X)))
 (let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1361X)))
 (=> (and $x86 $x61) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1361X input.ind-%var1363X) (_ bv0 32))))))
 ))
 (let (($x201 (forall ((input.ind-%var1361X (_ BitVec 32)) (input.ind-%var1362X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1361X)))
 (=> $x86 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1361X input.ind-%var1362X) false))))
 ))
 (let (($x181 (forall ((input.ind-%var1360X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1360X)))
 (= $x43 false)))
 ))
 (let (($x210 (and (and $x181 $x201) $x208)))
 (let (($x36 (and $x210 $x89)))
 (let (($x191 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x56 (and $x191 $x36)))
 (let (($x190 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x27 (and $x190 $x56)))
 (let (($x188 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x87 (and $x188 $x27)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x50 (and $x185 $x87)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x143 (and $x184 $x50)))
 (let (($x176 (forall ((input.ind-%var1381X (_ BitVec 32)) (input.ind-%var1383X (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1381X input.ind-%var1383X)))
 (let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1381X)))
 (=> (and $x86 $x61) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1381X input.ind-%var1383X) (_ bv0 32))))))
 ))
 (let (($x15 (forall ((input.ind-%var1381X (_ BitVec 32)) (input.ind-%var1382X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1381X)))
 (=> $x86 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1381X input.ind-%var1382X) false))))
 ))
 (let (($x109 (forall ((input.ind-%var1380X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1380X)))
 (= $x43 false)))
 ))
 (let (($x178 (and (and $x109 $x15) $x176)))
 (let (($x121 (and $x178 $x143)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x99 (and $x142 $x121)))
 (let (($x97 (forall ((input.ind-%var1393X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1393X)))
 (=> $x25 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1393X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var1392X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1392X)))
 (= $x25 false)))
 ))
 (let (($x80 (and $x40 $x97)))
 (let (($x171 (and $x80 $x99)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x57 (and $x137 $x171)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x101 (and $x11 $x57)))
 (let (($x166 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x92 (and $x166 $x101)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x12 (and $x84 $x92)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x82 (and $x23 $x12)))
 (let (($x45 (=> $x82 $x98)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 154 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x153 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x126 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x118 (bvmul ?x126 (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x118)))
 (let (($x105 (= ?x120 ?x153)))
 (let (($x145 (= $x105 true)))
 (let ((?x193 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x193)))
 (let (($x202 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x198 (= $x202 true)))
 (let ((?x90 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x90)))
 (let (($x182 (= ?x169 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x196 (= $x182 true)))
 (let (($x220 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x93 (= $x220 true)))
 (let (($x219 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x24 (= $x219 true)))
 (let (($x212 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x213 (= $x212 true)))
 (let (($x124 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x157 (= $x124 true)))
 (let (($x110 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x60 (= $x110 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x134 (= $x45 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x12)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x99 $x101)))
 (let (($x123 (and $x92 $x82)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x8 $x123)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x36)))))))
 (let (($x111 (and $x121 $x113)))
 (let (($x156 (= $x111 true)))
 (let ((?x172 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x172)))
 (let (($x144 (= ?x77 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x95 (= $x144 true)))
 (let (($x55 (= ?x77 input.dst.llvm-%n)))
 (let (($x106 (= $x55 true)))
 (let (($x119 (and $x106 $x95)))
 (let (($x39 (and $x119 $x156)))
 (let (($x64 (and $x39 $x134)))
 (let (($x51 (and $x64 $x60)))
 (let (($x164 (and $x51 $x157)))
 (let (($x214 (and $x164 $x213)))
 (let (($x217 (and $x214 $x24)))
 (let (($x136 (and $x217 $x93)))
 (let (($x192 (and $x136 $x196)))
 (let (($x199 (and $x192 $x198)))
 (let (($x10 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x206 (and (not $x10) $x199)))
 (let (($x160 (forall ((input.ind-%var1403X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1403X)))
 (=> $x47 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1403X) (_ bv0 32)))))
 ))
 (let (($x158 (forall ((input.ind-%var1402X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1402X)))
 (= $x47 false)))
 ))
 (let (($x100 (and $x158 $x160)))
 (let (($x197 (and $x100 $x206)))
 (let (($x159 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x200 (and $x159 $x197)))
 (let (($x180 (forall ((input.ind-%var1421X (_ BitVec 32)) (input.ind-%var1423X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1421X input.ind-%var1423X)))
 (let (($x201 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1421X)))
 (=> (and $x201 $x186) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1421X input.ind-%var1423X) (_ bv0 32))))))
 ))
 (let (($x108 (forall ((input.ind-%var1421X (_ BitVec 32)) (input.ind-%var1422X (_ BitVec 32)) )(let (($x201 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1421X)))
 (=> $x201 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1421X input.ind-%var1422X) false))))
 ))
 (let (($x115 (forall ((input.ind-%var1420X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1420X)))
 (= $x163 false)))
 ))
 (let (($x131 (and (and $x115 $x108) $x180)))
 (let (($x132 (and $x131 $x200)))
 (let (($x170 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x6 (and $x170 $x132)))
 (let (($x122 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x91 (and $x122 $x6)))
 (let (($x162 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x53 (and $x162 $x91)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x78 (and $x32 $x53)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x127 (and $x140 $x78)))
 (let (($x20 (forall ((input.ind-%var1441X (_ BitVec 32)) (input.ind-%var1443X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1441X input.ind-%var1443X)))
 (let (($x201 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1441X)))
 (=> (and $x201 $x186) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1441X input.ind-%var1443X) (_ bv0 32))))))
 ))
 (let (($x208 (forall ((input.ind-%var1441X (_ BitVec 32)) (input.ind-%var1442X (_ BitVec 32)) )(let (($x201 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1441X)))
 (=> $x201 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1441X input.ind-%var1442X) false))))
 ))
 (let (($x178 (forall ((input.ind-%var1440X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1440X)))
 (= $x163 false)))
 ))
 (let (($x135 (and (and $x178 $x208) $x20)))
 (let (($x203 (and $x135 $x127)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x204 (and $x15 $x203)))
 (let (($x61 (forall ((input.ind-%var1453X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1453X)))
 (=> $x47 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1453X) (_ bv0 32)))))
 ))
 (let (($x70 (forall ((input.ind-%var1452X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1452X)))
 (= $x47 false)))
 ))
 (let (($x69 (and $x70 $x61)))
 (let (($x207 (and $x69 $x204)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x73 (and $x166 $x207)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x71 (and $x34 $x73)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x154 (and $x11 $x71)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x59 (and $x83 $x154)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x76 (and $x23 $x59)))
 (let (($x104 (=> $x76 $x145)))
 (not $x104)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x153 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x126 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x118 (bvmul ?x126 (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x118)))
 (let (($x105 (= ?x120 ?x153)))
 (let (($x145 (= $x105 true)))
 (let ((?x193 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x193)))
 (let (($x202 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x198 (= $x202 true)))
 (let ((?x90 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x90)))
 (let (($x182 (= ?x169 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x196 (= $x182 true)))
 (let (($x220 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x93 (= $x220 true)))
 (let (($x219 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x24 (= $x219 true)))
 (let (($x212 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x213 (= $x212 true)))
 (let (($x124 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x157 (= $x124 true)))
 (let (($x110 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x60 (= $x110 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x134 (= $x45 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x12)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x99 $x101)))
 (let (($x123 (and $x92 $x82)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x8 $x123)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x36)))))))
 (let (($x111 (and $x121 $x113)))
 (let (($x156 (= $x111 true)))
 (let ((?x172 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x172)))
 (let (($x144 (= ?x77 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x95 (= $x144 true)))
 (let (($x55 (= ?x77 input.dst.llvm-%n)))
 (let (($x106 (= $x55 true)))
 (let (($x119 (and $x106 $x95)))
 (let (($x39 (and $x119 $x156)))
 (let (($x64 (and $x39 $x134)))
 (let (($x51 (and $x64 $x60)))
 (let (($x164 (and $x51 $x157)))
 (let (($x214 (and $x164 $x213)))
 (let (($x217 (and $x214 $x24)))
 (let (($x136 (and $x217 $x93)))
 (let (($x192 (and $x136 $x196)))
 (let (($x199 (and $x192 $x198)))
 (let (($x10 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x206 (and (not $x10) $x199)))
 (let (($x160 (forall ((input.ind-%var1403X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1403X)))
 (=> $x47 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1403X) (_ bv0 32)))))
 ))
 (let (($x158 (forall ((input.ind-%var1402X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1402X)))
 (= $x47 false)))
 ))
 (let (($x100 (and $x158 $x160)))
 (let (($x197 (and $x100 $x206)))
 (let (($x159 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x200 (and $x159 $x197)))
 (let (($x180 (forall ((input.ind-%var1421X (_ BitVec 32)) (input.ind-%var1423X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1421X input.ind-%var1423X)))
 (let (($x201 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1421X)))
 (=> (and $x201 $x186) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1421X input.ind-%var1423X) (_ bv0 32))))))
 ))
 (let (($x108 (forall ((input.ind-%var1421X (_ BitVec 32)) (input.ind-%var1422X (_ BitVec 32)) )(let (($x201 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1421X)))
 (=> $x201 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1421X input.ind-%var1422X) false))))
 ))
 (let (($x115 (forall ((input.ind-%var1420X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1420X)))
 (= $x163 false)))
 ))
 (let (($x131 (and (and $x115 $x108) $x180)))
 (let (($x132 (and $x131 $x200)))
 (let (($x170 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x6 (and $x170 $x132)))
 (let (($x122 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x91 (and $x122 $x6)))
 (let (($x162 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x53 (and $x162 $x91)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x78 (and $x32 $x53)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x127 (and $x140 $x78)))
 (let (($x20 (forall ((input.ind-%var1441X (_ BitVec 32)) (input.ind-%var1443X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1441X input.ind-%var1443X)))
 (let (($x201 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1441X)))
 (=> (and $x201 $x186) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1441X input.ind-%var1443X) (_ bv0 32))))))
 ))
 (let (($x208 (forall ((input.ind-%var1441X (_ BitVec 32)) (input.ind-%var1442X (_ BitVec 32)) )(let (($x201 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1441X)))
 (=> $x201 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1441X input.ind-%var1442X) false))))
 ))
 (let (($x178 (forall ((input.ind-%var1440X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1440X)))
 (= $x163 false)))
 ))
 (let (($x135 (and (and $x178 $x208) $x20)))
 (let (($x203 (and $x135 $x127)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x204 (and $x15 $x203)))
 (let (($x61 (forall ((input.ind-%var1453X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1453X)))
 (=> $x47 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1453X) (_ bv0 32)))))
 ))
 (let (($x70 (forall ((input.ind-%var1452X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1452X)))
 (= $x47 false)))
 ))
 (let (($x69 (and $x70 $x61)))
 (let (($x207 (and $x69 $x204)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x73 (and $x166 $x207)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x71 (and $x34 $x73)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x154 (and $x11 $x71)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x59 (and $x83 $x154)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x76 (and $x23 $x59)))
 (let (($x104 (=> $x76 $x145)))
 (not $x104)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 154 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x191 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x80 (bvuge ?x191 (_ bv1 32))))
 (let (($x211 (= $x80 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x14)))
 (let (($x19 (= ?x161 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x19 true)))
 (let (($x107 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x9 (= $x107 true)))
 (let (($x26 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x63 (= $x26 true)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x130)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x189 $x13)))
 (let (($x97 (and $x112 $x5)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x59 $x97)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x145)))))))
 (let (($x48 (and $x173 $x30)))
 (let (($x114 (= $x48 true)))
 (let (($x203 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x204 (= $x203 true)))
 (let (($x53 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x78 (= $x53 true)))
 (let (($x132 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x6 (= $x132 true)))
 (let ((?x193 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x193)))
 (let (($x206 (= ?x195 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x197 (= $x206 true)))
 (let (($x202 (= ?x195 input.dst.llvm-%n)))
 (let (($x198 (= $x202 true)))
 (let ((?x90 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x90)))
 (let (($x182 (= ?x169 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x196 (= $x182 true)))
 (let (($x217 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (= $x217 true)))
 (let (($x192 (and $x220 $x196)))
 (let (($x199 (and $x192 $x198)))
 (let (($x200 (and $x199 $x197)))
 (let (($x91 (and $x200 $x6)))
 (let (($x127 (and $x91 $x78)))
 (let (($x207 (and $x127 $x204)))
 (let (($x38 (and $x207 $x114)))
 (let (($x18 (and $x38 $x63)))
 (let (($x148 (and $x18 $x9)))
 (let (($x74 (and $x148 $x81)))
 (let (($x214 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x22 (and (not $x214) $x74)))
 (let (($x218 (forall ((input.ind-%var1463X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1463X)))
 (=> $x52 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1463X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var1462X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1462X)))
 (= $x52 false)))
 ))
 (let (($x212 (and $x110 $x218)))
 (let (($x7 (and $x212 $x22)))
 (let (($x98 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x16 (and $x98 $x7)))
 (let (($x111 (forall ((input.ind-%var1481X (_ BitVec 32)) (input.ind-%var1483X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1481X input.ind-%var1483X)))
 (let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1481X)))
 (=> (and $x108 $x62) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1481X input.ind-%var1483X) (_ bv0 32))))))
 ))
 (let (($x57 (forall ((input.ind-%var1481X (_ BitVec 32)) (input.ind-%var1482X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1481X)))
 (=> $x108 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1481X input.ind-%var1482X) false))))
 ))
 (let (($x87 (forall ((input.ind-%var1480X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1480X)))
 (= $x222 false)))
 ))
 (let (($x39 (and (and $x87 $x57) $x111)))
 (let (($x183 (and $x39 $x16)))
 (let (($x42 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x184 (and $x42 $x183)))
 (let (($x89 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x177 (and $x89 $x184)))
 (let (($x143 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x174 (and $x143 $x177)))
 (let (($x151 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x175 (and $x151 $x174)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x210 (and $x95 $x175)))
 (let (($x75 (forall ((input.ind-%var1501X (_ BitVec 32)) (input.ind-%var1503X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1501X input.ind-%var1503X)))
 (let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1501X)))
 (=> (and $x108 $x62) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1501X input.ind-%var1503X) (_ bv0 32))))))
 ))
 (let (($x180 (forall ((input.ind-%var1501X (_ BitVec 32)) (input.ind-%var1502X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1501X)))
 (=> $x108 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1501X input.ind-%var1502X) false))))
 ))
 (let (($x135 (forall ((input.ind-%var1500X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1500X)))
 (= $x222 false)))
 ))
 (let (($x106 (and (and $x135 $x180) $x75)))
 (let (($x141 (and $x106 $x210)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x33 (and $x208 $x141)))
 (let (($x186 (forall ((input.ind-%var1513X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1513X)))
 (=> $x52 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1513X) (_ bv0 32)))))
 ))
 (let (($x86 (forall ((input.ind-%var1512X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1512X)))
 (= $x52 false)))
 ))
 (let (($x181 (and $x86 $x186)))
 (let (($x72 (and $x181 $x33)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x187 (and $x137 $x72)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x190 (and $x102 $x187)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x221 (and $x116 $x190)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x168 (and $x84 $x221)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x194 (and $x223 $x168)))
 (let (($x215 (=> $x194 $x211)))
 (not $x215))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x191 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x80 (bvuge ?x191 (_ bv1 32))))
 (let (($x211 (= $x80 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x14)))
 (let (($x19 (= ?x161 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x19 true)))
 (let (($x107 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x9 (= $x107 true)))
 (let (($x26 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x63 (= $x26 true)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x130)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x189 $x13)))
 (let (($x97 (and $x112 $x5)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x59 $x97)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x145)))))))
 (let (($x48 (and $x173 $x30)))
 (let (($x114 (= $x48 true)))
 (let (($x203 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x204 (= $x203 true)))
 (let (($x53 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x78 (= $x53 true)))
 (let (($x132 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x6 (= $x132 true)))
 (let ((?x193 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x193)))
 (let (($x206 (= ?x195 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x197 (= $x206 true)))
 (let (($x202 (= ?x195 input.dst.llvm-%n)))
 (let (($x198 (= $x202 true)))
 (let ((?x90 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x90)))
 (let (($x182 (= ?x169 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x196 (= $x182 true)))
 (let (($x217 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (= $x217 true)))
 (let (($x192 (and $x220 $x196)))
 (let (($x199 (and $x192 $x198)))
 (let (($x200 (and $x199 $x197)))
 (let (($x91 (and $x200 $x6)))
 (let (($x127 (and $x91 $x78)))
 (let (($x207 (and $x127 $x204)))
 (let (($x38 (and $x207 $x114)))
 (let (($x18 (and $x38 $x63)))
 (let (($x148 (and $x18 $x9)))
 (let (($x74 (and $x148 $x81)))
 (let (($x214 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x22 (and (not $x214) $x74)))
 (let (($x218 (forall ((input.ind-%var1463X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1463X)))
 (=> $x52 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1463X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var1462X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1462X)))
 (= $x52 false)))
 ))
 (let (($x212 (and $x110 $x218)))
 (let (($x7 (and $x212 $x22)))
 (let (($x98 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x16 (and $x98 $x7)))
 (let (($x111 (forall ((input.ind-%var1481X (_ BitVec 32)) (input.ind-%var1483X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1481X input.ind-%var1483X)))
 (let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1481X)))
 (=> (and $x108 $x62) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1481X input.ind-%var1483X) (_ bv0 32))))))
 ))
 (let (($x57 (forall ((input.ind-%var1481X (_ BitVec 32)) (input.ind-%var1482X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1481X)))
 (=> $x108 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1481X input.ind-%var1482X) false))))
 ))
 (let (($x87 (forall ((input.ind-%var1480X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1480X)))
 (= $x222 false)))
 ))
 (let (($x39 (and (and $x87 $x57) $x111)))
 (let (($x183 (and $x39 $x16)))
 (let (($x42 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x184 (and $x42 $x183)))
 (let (($x89 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x177 (and $x89 $x184)))
 (let (($x143 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x174 (and $x143 $x177)))
 (let (($x151 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x175 (and $x151 $x174)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x210 (and $x95 $x175)))
 (let (($x75 (forall ((input.ind-%var1501X (_ BitVec 32)) (input.ind-%var1503X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1501X input.ind-%var1503X)))
 (let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1501X)))
 (=> (and $x108 $x62) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1501X input.ind-%var1503X) (_ bv0 32))))))
 ))
 (let (($x180 (forall ((input.ind-%var1501X (_ BitVec 32)) (input.ind-%var1502X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1501X)))
 (=> $x108 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1501X input.ind-%var1502X) false))))
 ))
 (let (($x135 (forall ((input.ind-%var1500X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1500X)))
 (= $x222 false)))
 ))
 (let (($x106 (and (and $x135 $x180) $x75)))
 (let (($x141 (and $x106 $x210)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x33 (and $x208 $x141)))
 (let (($x186 (forall ((input.ind-%var1513X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1513X)))
 (=> $x52 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1513X) (_ bv0 32)))))
 ))
 (let (($x86 (forall ((input.ind-%var1512X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1512X)))
 (= $x52 false)))
 ))
 (let (($x181 (and $x86 $x186)))
 (let (($x72 (and $x181 $x33)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x187 (and $x137 $x72)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x190 (and $x102 $x187)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x221 (and $x116 $x190)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x168 (and $x84 $x221)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x194 (and $x223 $x168)))
 (let (($x215 (=> $x194 $x211)))
 (not $x215))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 151 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x158 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x205 (bvsge ?x158 (_ bv1 32))))
 (let (($x178 (= $x205 true)))
 (let ((?x8 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x8)))
 (let (($x82 (= ?x99 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x82 true)))
 (let (($x56 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x27 (= $x56 true)))
 (let (($x50 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x121 (= $x50 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x51)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x45 $x157)))
 (let (($x125 (and $x61 $x164)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x168 $x125)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x71)))))))
 (let (($x25 (and $x124 $x166)))
 (let (($x142 (= $x25 true)))
 (let (($x141 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x33 (= $x141 true)))
 (let (($x174 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x175 (= $x174 true)))
 (let (($x183 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x184 (= $x183 true)))
 (let ((?x14 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x14)))
 (let (($x22 (= ?x161 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x7 (= $x22 true)))
 (let (($x19 (= ?x161 input.dst.llvm-%n)))
 (let (($x81 (= $x19 true)))
 (let ((?x26 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x26)))
 (let (($x107 (= ?x63 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x9 (= $x107 true)))
 (let (($x30 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (= $x30 true)))
 (let (($x148 (and $x48 $x9)))
 (let (($x74 (and $x148 $x81)))
 (let (($x16 (and $x74 $x7)))
 (let (($x177 (and $x16 $x184)))
 (let (($x210 (and $x177 $x175)))
 (let (($x72 (and $x210 $x33)))
 (let (($x176 (and $x72 $x142)))
 (let (($x36 (and $x176 $x121)))
 (let (($x101 (and $x36 $x27)))
 (let (($x96 (and $x101 $x123)))
 (let (($x130 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x129 (and (not $x130) $x96)))
 (let (($x150 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1523X)))
 (=> $x66 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1523X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var1522X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1522X)))
 (= $x66 false)))
 ))
 (let (($x13 (and $x40 $x150)))
 (let (($x140 (and $x13 $x129)))
 (let (($x145 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x165 (and $x145 $x140)))
 (let (($x153 (forall ((input.ind-%var1541X (_ BitVec 32)) (input.ind-%var1543X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1541X input.ind-%var1543X)))
 (let (($x57 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1541X)))
 (=> (and $x57 $x128) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1541X input.ind-%var1543X) (_ bv0 32))))))
 ))
 (let (($x203 (forall ((input.ind-%var1541X (_ BitVec 32)) (input.ind-%var1542X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1541X)))
 (=> $x57 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1541X input.ind-%var1542X) false))))
 ))
 (let (($x200 (forall ((input.ind-%var1540X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1540X)))
 (= $x100 false)))
 ))
 (let (($x120 (and (and $x200 $x203) $x153)))
 (let (($x37 (and $x120 $x165)))
 (let (($x198 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x138 (and $x198 $x37)))
 (let (($x202 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x131 (and $x202 $x138)))
 (let (($x192 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x92 (and $x192 $x131)))
 (let (($x182 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x12 (and $x182 $x92)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x113 (and $x169 $x12)))
 (let (($x220 (forall ((input.ind-%var1561X (_ BitVec 32)) (input.ind-%var1563X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1561X input.ind-%var1563X)))
 (let (($x57 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1561X)))
 (=> (and $x57 $x128) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1561X input.ind-%var1563X) (_ bv0 32))))))
 ))
 (let (($x111 (forall ((input.ind-%var1561X (_ BitVec 32)) (input.ind-%var1562X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1561X)))
 (=> $x57 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1561X input.ind-%var1562X) false))))
 ))
 (let (($x106 (forall ((input.ind-%var1560X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1560X)))
 (= $x100 false)))
 ))
 (let (($x136 (and (and $x106 $x111) $x220)))
 (let (($x155 (and $x136 $x113)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x122 (and $x180 $x155)))
 (let (($x62 (forall ((input.ind-%var1573X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1573X)))
 (=> $x66 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1573X) (_ bv0 32)))))
 ))
 (let (($x201 (forall ((input.ind-%var1572X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1572X)))
 (= $x66 false)))
 ))
 (let (($x115 (and $x201 $x62)))
 (let (($x160 (and $x115 $x122)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x10 (and $x34 $x160)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x54 (and $x11 $x10)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x170 (and $x83 $x54)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x69 (and $x79 $x170)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x159 (and $x29 $x69)))
 (let (($x149 (=> $x159 $x178)))
 (not $x149))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x158 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x205 (bvsge ?x158 (_ bv1 32))))
 (let (($x178 (= $x205 true)))
 (let ((?x8 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x8)))
 (let (($x82 (= ?x99 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x82 true)))
 (let (($x56 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x27 (= $x56 true)))
 (let (($x50 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x121 (= $x50 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x51)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x45 $x157)))
 (let (($x125 (and $x61 $x164)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x168 $x125)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x71)))))))
 (let (($x25 (and $x124 $x166)))
 (let (($x142 (= $x25 true)))
 (let (($x141 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x33 (= $x141 true)))
 (let (($x174 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x175 (= $x174 true)))
 (let (($x183 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x184 (= $x183 true)))
 (let ((?x14 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x14)))
 (let (($x22 (= ?x161 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x7 (= $x22 true)))
 (let (($x19 (= ?x161 input.dst.llvm-%n)))
 (let (($x81 (= $x19 true)))
 (let ((?x26 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x26)))
 (let (($x107 (= ?x63 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x9 (= $x107 true)))
 (let (($x30 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (= $x30 true)))
 (let (($x148 (and $x48 $x9)))
 (let (($x74 (and $x148 $x81)))
 (let (($x16 (and $x74 $x7)))
 (let (($x177 (and $x16 $x184)))
 (let (($x210 (and $x177 $x175)))
 (let (($x72 (and $x210 $x33)))
 (let (($x176 (and $x72 $x142)))
 (let (($x36 (and $x176 $x121)))
 (let (($x101 (and $x36 $x27)))
 (let (($x96 (and $x101 $x123)))
 (let (($x130 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x129 (and (not $x130) $x96)))
 (let (($x150 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1523X)))
 (=> $x66 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1523X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var1522X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1522X)))
 (= $x66 false)))
 ))
 (let (($x13 (and $x40 $x150)))
 (let (($x140 (and $x13 $x129)))
 (let (($x145 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x165 (and $x145 $x140)))
 (let (($x153 (forall ((input.ind-%var1541X (_ BitVec 32)) (input.ind-%var1543X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1541X input.ind-%var1543X)))
 (let (($x57 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1541X)))
 (=> (and $x57 $x128) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1541X input.ind-%var1543X) (_ bv0 32))))))
 ))
 (let (($x203 (forall ((input.ind-%var1541X (_ BitVec 32)) (input.ind-%var1542X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1541X)))
 (=> $x57 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1541X input.ind-%var1542X) false))))
 ))
 (let (($x200 (forall ((input.ind-%var1540X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1540X)))
 (= $x100 false)))
 ))
 (let (($x120 (and (and $x200 $x203) $x153)))
 (let (($x37 (and $x120 $x165)))
 (let (($x198 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x138 (and $x198 $x37)))
 (let (($x202 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x131 (and $x202 $x138)))
 (let (($x192 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x92 (and $x192 $x131)))
 (let (($x182 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x12 (and $x182 $x92)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x113 (and $x169 $x12)))
 (let (($x220 (forall ((input.ind-%var1561X (_ BitVec 32)) (input.ind-%var1563X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1561X input.ind-%var1563X)))
 (let (($x57 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1561X)))
 (=> (and $x57 $x128) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1561X input.ind-%var1563X) (_ bv0 32))))))
 ))
 (let (($x111 (forall ((input.ind-%var1561X (_ BitVec 32)) (input.ind-%var1562X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1561X)))
 (=> $x57 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1561X input.ind-%var1562X) false))))
 ))
 (let (($x106 (forall ((input.ind-%var1560X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1560X)))
 (= $x100 false)))
 ))
 (let (($x136 (and (and $x106 $x111) $x220)))
 (let (($x155 (and $x136 $x113)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x122 (and $x180 $x155)))
 (let (($x62 (forall ((input.ind-%var1573X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1573X)))
 (=> $x66 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1573X) (_ bv0 32)))))
 ))
 (let (($x201 (forall ((input.ind-%var1572X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1572X)))
 (= $x66 false)))
 ))
 (let (($x115 (and $x201 $x62)))
 (let (($x160 (and $x115 $x122)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x10 (and $x34 $x160)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x54 (and $x11 $x10)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x170 (and $x83 $x54)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x69 (and $x79 $x170)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x159 (and $x29 $x69)))
 (let (($x149 (=> $x159 $x178)))
 (not $x149))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0139fde3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x218 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x214 (bvsge ?x218 (_ bv0 32))))
 (let (($x119 (= $x214 true)))
 (let ((?x132 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x132)))
 (let (($x199 (= ?x6 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x206 (= $x199 true)))
 (let ((?x28 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x209 (bvneg ?x28)))
 (let (($x47 (= ?x209 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x47 true)))
 (let (($x189 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x186 (= $x189 true)))
 (let (($x104 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x85 (= $x104 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x32)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x205)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x159 $x178)))
 (let (($x86 (and $x149 $x190)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x165 $x86)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x155)))))))
 (let (($x139 (and $x69 $x222)))
 (let (($x49 (= $x139 true)))
 (let (($x99 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x82 (= $x99 true)))
 (let ((?x176 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x176)))
 (let (($x27 (= ?x50 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x101 (= $x27 true)))
 (let (($x121 (= ?x50 input.dst.llvm-%n)))
 (let (($x36 (= $x121 true)))
 (let (($x166 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (= $x166 true)))
 (let (($x56 (and $x25 $x36)))
 (let (($x8 (and $x56 $x101)))
 (let (($x123 (and $x8 $x82)))
 (let (($x213 (and $x123 $x49)))
 (let (($x41 (and $x213 $x85)))
 (let (($x154 (and $x41 $x186)))
 (let (($x20 (and $x154 $x15)))
 (let (($x197 (and $x20 $x206)))
 (let (($x51 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x53 (and (not $x51) $x197)))
 (let (($x64 (forall ((input.ind-%var1607X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1607X)))
 (=> $x188 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1607X) (_ bv0 32)))))
 ))
 (let (($x21 (forall ((input.ind-%var1606X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1606X)))
 (= $x188 false)))
 ))
 (let (($x157 (and $x21 $x64)))
 (let (($x78 (and $x157 $x53)))
 (let (($x71 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x126 (and $x71 $x78)))
 (let (($x215 (forall ((input.ind-%var1625X (_ BitVec 32)) (input.ind-%var1627X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1625X input.ind-%var1627X)))
 (let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1625X)))
 (=> (and $x203 $x193) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1625X input.ind-%var1627X) (_ bv0 32))))))
 ))
 (let (($x141 (forall ((input.ind-%var1625X (_ BitVec 32)) (input.ind-%var1626X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1625X)))
 (=> $x203 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1625X input.ind-%var1626X) false))))
 ))
 (let (($x16 (forall ((input.ind-%var1624X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1624X)))
 (= $x212 false)))
 ))
 (let (($x211 (and (and $x16 $x141) $x215)))
 (let (($x43 (and $x211 $x126)))
 (let (($x81 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x91 (and $x81 $x43)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x127 (and $x19 $x91)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x144 (and $x148 $x127)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x95 (and $x107 $x144)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x55 (and $x63 $x95)))
 (let (($x48 (forall ((input.ind-%var1645X (_ BitVec 32)) (input.ind-%var1647X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1645X input.ind-%var1647X)))
 (let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1645X)))
 (=> (and $x203 $x193) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1645X input.ind-%var1647X) (_ bv0 32))))))
 ))
 (let (($x153 (forall ((input.ind-%var1645X (_ BitVec 32)) (input.ind-%var1646X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1645X)))
 (=> $x203 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1645X input.ind-%var1646X) false))))
 ))
 (let (($x136 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1644X)))
 (= $x212 false)))
 ))
 (let (($x38 (and (and $x136 $x153) $x48)))
 (let (($x172 (and $x38 $x55)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x77 (and $x111 $x172)))
 (let (($x128 (forall ((input.ind-%var1657X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1657X)))
 (=> $x188 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1657X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var1656X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1656X)))
 (= $x188 false)))
 ))
 (let (($x87 (and $x108 $x128)))
 (let (($x39 (and $x87 $x77)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x207 (and $x102 $x39)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x76 (and $x116 $x207)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x118 (and $x84 $x76)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x147 (and $x23 $x118)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x89 (and $x73 $x147)))
 (let (($x42 (=> $x89 $x119)))
 (not $x42))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x218 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x214 (bvsge ?x218 (_ bv0 32))))
 (let (($x119 (= $x214 true)))
 (let ((?x132 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x132)))
 (let (($x199 (= ?x6 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x206 (= $x199 true)))
 (let ((?x28 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x209 (bvneg ?x28)))
 (let (($x47 (= ?x209 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x47 true)))
 (let (($x189 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x186 (= $x189 true)))
 (let (($x104 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x85 (= $x104 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x32)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x205)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x159 $x178)))
 (let (($x86 (and $x149 $x190)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x165 $x86)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x155)))))))
 (let (($x139 (and $x69 $x222)))
 (let (($x49 (= $x139 true)))
 (let (($x99 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x82 (= $x99 true)))
 (let ((?x176 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x176)))
 (let (($x27 (= ?x50 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x101 (= $x27 true)))
 (let (($x121 (= ?x50 input.dst.llvm-%n)))
 (let (($x36 (= $x121 true)))
 (let (($x166 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (= $x166 true)))
 (let (($x56 (and $x25 $x36)))
 (let (($x8 (and $x56 $x101)))
 (let (($x123 (and $x8 $x82)))
 (let (($x213 (and $x123 $x49)))
 (let (($x41 (and $x213 $x85)))
 (let (($x154 (and $x41 $x186)))
 (let (($x20 (and $x154 $x15)))
 (let (($x197 (and $x20 $x206)))
 (let (($x51 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x53 (and (not $x51) $x197)))
 (let (($x64 (forall ((input.ind-%var1607X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1607X)))
 (=> $x188 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1607X) (_ bv0 32)))))
 ))
 (let (($x21 (forall ((input.ind-%var1606X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1606X)))
 (= $x188 false)))
 ))
 (let (($x157 (and $x21 $x64)))
 (let (($x78 (and $x157 $x53)))
 (let (($x71 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x126 (and $x71 $x78)))
 (let (($x215 (forall ((input.ind-%var1625X (_ BitVec 32)) (input.ind-%var1627X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1625X input.ind-%var1627X)))
 (let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1625X)))
 (=> (and $x203 $x193) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1625X input.ind-%var1627X) (_ bv0 32))))))
 ))
 (let (($x141 (forall ((input.ind-%var1625X (_ BitVec 32)) (input.ind-%var1626X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1625X)))
 (=> $x203 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1625X input.ind-%var1626X) false))))
 ))
 (let (($x16 (forall ((input.ind-%var1624X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1624X)))
 (= $x212 false)))
 ))
 (let (($x211 (and (and $x16 $x141) $x215)))
 (let (($x43 (and $x211 $x126)))
 (let (($x81 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x91 (and $x81 $x43)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x127 (and $x19 $x91)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x144 (and $x148 $x127)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x95 (and $x107 $x144)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x55 (and $x63 $x95)))
 (let (($x48 (forall ((input.ind-%var1645X (_ BitVec 32)) (input.ind-%var1647X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1645X input.ind-%var1647X)))
 (let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1645X)))
 (=> (and $x203 $x193) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1645X input.ind-%var1647X) (_ bv0 32))))))
 ))
 (let (($x153 (forall ((input.ind-%var1645X (_ BitVec 32)) (input.ind-%var1646X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1645X)))
 (=> $x203 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1645X input.ind-%var1646X) false))))
 ))
 (let (($x136 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1644X)))
 (= $x212 false)))
 ))
 (let (($x38 (and (and $x136 $x153) $x48)))
 (let (($x172 (and $x38 $x55)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x77 (and $x111 $x172)))
 (let (($x128 (forall ((input.ind-%var1657X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1657X)))
 (=> $x188 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1657X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var1656X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1656X)))
 (= $x188 false)))
 ))
 (let (($x87 (and $x108 $x128)))
 (let (($x39 (and $x87 $x77)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x207 (and $x102 $x39)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x76 (and $x116 $x207)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x118 (and $x84 $x76)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x147 (and $x23 $x118)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x89 (and $x73 $x147)))
 (let (($x42 (=> $x89 $x119)))
 (not $x42))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000114)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000117)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000114)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (bvuge ?x198 (_ bv1 32))))
 (let (($x145 (= $x115 true)))
 (let ((?x22 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x22)))
 (let (($x33 (= ?x7 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x174 (= $x33 true)))
 (let (($x183 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x184 (= $x183 true)))
 (let (($x52 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x52 true)))
 (let ((?x163 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x163)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x219 $x168)))
 (let (($x45 (and $x70 $x65)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x39 $x45)))
 (let (($x214 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x218 $x214)))))))
 (let (($x221 (and $x100 $x62)))
 (let (($x134 (= $x221 true)))
 (let (($x127 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x144 (= $x127 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x199 (bvneg ?x6)))
 (let (($x126 (= ?x199 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x43 (= $x126 true)))
 (let (($x197 (= ?x199 input.dst.llvm-%n)))
 (let (($x53 (= $x197 true)))
 (let ((?x137 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x137)))
 (let (($x20 (= ?x47 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x132 (= $x20 true)))
 (let (($x78 (and $x132 $x53)))
 (let (($x91 (and $x78 $x43)))
 (let (($x95 (and $x91 $x144)))
 (let (($x88 (and $x95 $x134)))
 (let (($x75 (and $x88 $x208)))
 (let (($x74 (and $x75 $x184)))
 (let (($x175 (and $x74 $x174)))
 (let (($x154 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x146 (and (not $x154) $x175)))
 (let (($x41 (forall ((input.ind-%var1691X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1691X)))
 (=> $x162 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1691X) (_ bv0 32)))))
 ))
 (let (($x139 (forall ((input.ind-%var1690X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1690X)))
 (= $x162 false)))
 ))
 (let (($x189 (and $x139 $x41)))
 (let (($x177 (and $x189 $x146)))
 (let (($x32 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x210 (and $x32 $x177)))
 (let (($x205 (forall ((input.ind-%var1709X (_ BitVec 32)) (input.ind-%var1711X (_ BitVec 32)) )(let (($x14 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1709X input.ind-%var1711X)))
 (let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1709X)))
 (=> (and $x141 $x14) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1709X input.ind-%var1711X) (_ bv0 32))))))
 ))
 (let (($x10 (forall ((input.ind-%var1709X (_ BitVec 32)) (input.ind-%var1710X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1709X)))
 (=> $x141 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1709X input.ind-%var1710X) false))))
 ))
 (let (($x131 (forall ((input.ind-%var1708X (_ BitVec 32)) )(let (($x13 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1708X)))
 (= $x13 false)))
 ))
 (let (($x149 (and (and $x131 $x10) $x205)))
 (let (($x90 (and $x149 $x210)))
 (let (($x123 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x169 (and $x123 $x90)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x93 (and $x82 $x169)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x24 (and $x101 $x93)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x217 (and $x56 $x24)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x120 (and $x121 $x217)))
 (let (($x25 (forall ((input.ind-%var1729X (_ BitVec 32)) (input.ind-%var1731X (_ BitVec 32)) )(let (($x14 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1729X input.ind-%var1731X)))
 (let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1729X)))
 (=> (and $x141 $x14) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1729X input.ind-%var1731X) (_ bv0 32))))))
 ))
 (let (($x215 (forall ((input.ind-%var1729X (_ BitVec 32)) (input.ind-%var1730X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1729X)))
 (=> $x141 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1729X input.ind-%var1730X) false))))
 ))
 (let (($x38 (forall ((input.ind-%var1728X (_ BitVec 32)) )(let (($x13 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1728X)))
 (= $x13 false)))
 ))
 (let (($x176 (and (and $x38 $x215) $x25)))
 (let (($x72 (and $x176 $x120)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x194 (and $x153 $x72)))
 (let (($x193 (forall ((input.ind-%var1741X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1741X)))
 (=> $x162 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1741X) (_ bv0 32)))))
 ))
 (let (($x57 (forall ((input.ind-%var1740X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1740X)))
 (= $x162 false)))
 ))
 (let (($x200 (and $x57 $x193)))
 (let (($x80 (and $x200 $x194)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x196 (and $x11 $x80)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x202 (and $x83 $x196)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x150 (and $x79 $x202)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x130 (and $x223 $x150)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x152 (and $x187 $x130)))
 (let (($x40 (=> $x152 $x145)))
 (not $x40)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (bvuge ?x198 (_ bv1 32))))
 (let (($x145 (= $x115 true)))
 (let ((?x22 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x22)))
 (let (($x33 (= ?x7 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x174 (= $x33 true)))
 (let (($x183 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x184 (= $x183 true)))
 (let (($x52 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x52 true)))
 (let ((?x163 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x163)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x219 $x168)))
 (let (($x45 (and $x70 $x65)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x39 $x45)))
 (let (($x214 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x218 $x214)))))))
 (let (($x221 (and $x100 $x62)))
 (let (($x134 (= $x221 true)))
 (let (($x127 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x144 (= $x127 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x199 (bvneg ?x6)))
 (let (($x126 (= ?x199 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x43 (= $x126 true)))
 (let (($x197 (= ?x199 input.dst.llvm-%n)))
 (let (($x53 (= $x197 true)))
 (let ((?x137 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x137)))
 (let (($x20 (= ?x47 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x132 (= $x20 true)))
 (let (($x78 (and $x132 $x53)))
 (let (($x91 (and $x78 $x43)))
 (let (($x95 (and $x91 $x144)))
 (let (($x88 (and $x95 $x134)))
 (let (($x75 (and $x88 $x208)))
 (let (($x74 (and $x75 $x184)))
 (let (($x175 (and $x74 $x174)))
 (let (($x154 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x146 (and (not $x154) $x175)))
 (let (($x41 (forall ((input.ind-%var1691X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1691X)))
 (=> $x162 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1691X) (_ bv0 32)))))
 ))
 (let (($x139 (forall ((input.ind-%var1690X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1690X)))
 (= $x162 false)))
 ))
 (let (($x189 (and $x139 $x41)))
 (let (($x177 (and $x189 $x146)))
 (let (($x32 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x210 (and $x32 $x177)))
 (let (($x205 (forall ((input.ind-%var1709X (_ BitVec 32)) (input.ind-%var1711X (_ BitVec 32)) )(let (($x14 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1709X input.ind-%var1711X)))
 (let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1709X)))
 (=> (and $x141 $x14) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1709X input.ind-%var1711X) (_ bv0 32))))))
 ))
 (let (($x10 (forall ((input.ind-%var1709X (_ BitVec 32)) (input.ind-%var1710X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1709X)))
 (=> $x141 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1709X input.ind-%var1710X) false))))
 ))
 (let (($x131 (forall ((input.ind-%var1708X (_ BitVec 32)) )(let (($x13 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1708X)))
 (= $x13 false)))
 ))
 (let (($x149 (and (and $x131 $x10) $x205)))
 (let (($x90 (and $x149 $x210)))
 (let (($x123 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x169 (and $x123 $x90)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x93 (and $x82 $x169)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x24 (and $x101 $x93)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x217 (and $x56 $x24)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x120 (and $x121 $x217)))
 (let (($x25 (forall ((input.ind-%var1729X (_ BitVec 32)) (input.ind-%var1731X (_ BitVec 32)) )(let (($x14 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1729X input.ind-%var1731X)))
 (let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1729X)))
 (=> (and $x141 $x14) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1729X input.ind-%var1731X) (_ bv0 32))))))
 ))
 (let (($x215 (forall ((input.ind-%var1729X (_ BitVec 32)) (input.ind-%var1730X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1729X)))
 (=> $x141 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1729X input.ind-%var1730X) false))))
 ))
 (let (($x38 (forall ((input.ind-%var1728X (_ BitVec 32)) )(let (($x13 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1728X)))
 (= $x13 false)))
 ))
 (let (($x176 (and (and $x38 $x215) $x25)))
 (let (($x72 (and $x176 $x120)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x194 (and $x153 $x72)))
 (let (($x193 (forall ((input.ind-%var1741X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1741X)))
 (=> $x162 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1741X) (_ bv0 32)))))
 ))
 (let (($x57 (forall ((input.ind-%var1740X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1740X)))
 (= $x162 false)))
 ))
 (let (($x200 (and $x57 $x193)))
 (let (($x80 (and $x200 $x194)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x196 (and $x11 $x80)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x202 (and $x83 $x196)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x150 (and $x79 $x202)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x130 (and $x223 $x150)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x152 (and $x187 $x130)))
 (let (($x40 (=> $x152 $x145)))
 (not $x40)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000568)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000056b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000568)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x81 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x64 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x51 (bvmul ?x64 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x51)))
 (let (($x87 (= ?x18 ?x81)))
 (let (($x71 (= $x87 true)))
 (let ((?x12 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x12)))
 (let (($x37 (= ?x113 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x37 true)))
 (let (($x66 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x180 (= $x66 true)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x86)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x5 $x59)))
 (let (($x104 (and $x190 $x222)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x196 $x104)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x145)))))))
 (let (($x213 (and $x212 $x128)))
 (let (($x85 (= $x213 true)))
 (let ((?x146 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x146)))
 (let (($x24 (= ?x177 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x217 (= $x24 true)))
 (let (($x90 (= ?x177 input.dst.llvm-%n)))
 (let (($x169 (= $x90 true)))
 (let ((?x22 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x22)))
 (let (($x174 (= ?x7 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x175 (= $x174 true)))
 (let (($x93 (and $x175 $x169)))
 (let (($x120 (and $x93 $x217)))
 (let (($x156 (and $x120 $x85)))
 (let (($x220 (and $x156 $x180)))
 (let (($x170 (and $x220 $x138)))
 (let (($x183 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x155 (and (not $x183) $x170)))
 (let (($x52 (forall ((input.ind-%var1775X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1775X)))
 (=> $x57 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1775X) (_ bv0 32)))))
 ))
 (let (($x45 (forall ((input.ind-%var1774X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1774X)))
 (= $x57 false)))
 ))
 (let (($x208 (and $x45 $x52)))
 (let (($x122 (and $x208 $x155)))
 (let (($x168 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x165 (and $x168 $x122)))
 (let (($x219 (forall ((input.ind-%var1793X (_ BitVec 32)) (input.ind-%var1795X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1793X input.ind-%var1795X)))
 (let (($x178 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1793X)))
 (=> (and $x178 $x99) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1793X input.ind-%var1795X) (_ bv0 32))))))
 ))
 (let (($x119 (forall ((input.ind-%var1793X (_ BitVec 32)) (input.ind-%var1794X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1793X)))
 (=> $x178 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1793X input.ind-%var1794X) false))))
 ))
 (let (($x76 (forall ((input.ind-%var1792X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1792X)))
 (= $x164 false)))
 ))
 (let (($x112 (and (and $x76 $x119) $x219)))
 (let (($x159 (and $x112 $x165)))
 (let (($x127 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x92 (and $x127 $x159)))
 (let (($x91 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x160 (and $x91 $x92)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x26 (and $x78 $x160)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x63 (and $x197 $x26)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x114 (and $x199 $x63)))
 (let (($x15 (forall ((input.ind-%var1813X (_ BitVec 32)) (input.ind-%var1815X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1813X input.ind-%var1815X)))
 (let (($x178 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1813X)))
 (=> (and $x178 $x99) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1813X input.ind-%var1815X) (_ bv0 32))))))
 ))
 (let (($x149 (forall ((input.ind-%var1813X (_ BitVec 32)) (input.ind-%var1814X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1813X)))
 (=> $x178 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1813X input.ind-%var1814X) false))))
 ))
 (let (($x50 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1812X)))
 (= $x164 false)))
 ))
 (let (($x132 (and (and $x50 $x149) $x15)))
 (let (($x97 (and $x132 $x114)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x30 (and $x142 $x97)))
 (let (($x16 (forall ((input.ind-%var1825X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1825X)))
 (=> $x57 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1825X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var1824X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1824X)))
 (= $x57 false)))
 ))
 (let (($x35 (and $x193 $x16)))
 (let (($x211 (and $x35 $x30)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x69 (and $x11 $x211)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x140 (and $x83 $x69)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x158 (and $x79 $x140)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x9 (and $x223 $x158)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x19 (and $x187 $x9)))
 (let (($x21 (=> $x19 $x71)))
 (not $x21))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x81 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x64 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x51 (bvmul ?x64 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x51)))
 (let (($x87 (= ?x18 ?x81)))
 (let (($x71 (= $x87 true)))
 (let ((?x12 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x12)))
 (let (($x37 (= ?x113 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x37 true)))
 (let (($x66 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x180 (= $x66 true)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x86)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x5 $x59)))
 (let (($x104 (and $x190 $x222)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x196 $x104)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x145)))))))
 (let (($x213 (and $x212 $x128)))
 (let (($x85 (= $x213 true)))
 (let ((?x146 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x146)))
 (let (($x24 (= ?x177 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x217 (= $x24 true)))
 (let (($x90 (= ?x177 input.dst.llvm-%n)))
 (let (($x169 (= $x90 true)))
 (let ((?x22 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x22)))
 (let (($x174 (= ?x7 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x175 (= $x174 true)))
 (let (($x93 (and $x175 $x169)))
 (let (($x120 (and $x93 $x217)))
 (let (($x156 (and $x120 $x85)))
 (let (($x220 (and $x156 $x180)))
 (let (($x170 (and $x220 $x138)))
 (let (($x183 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x155 (and (not $x183) $x170)))
 (let (($x52 (forall ((input.ind-%var1775X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1775X)))
 (=> $x57 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1775X) (_ bv0 32)))))
 ))
 (let (($x45 (forall ((input.ind-%var1774X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1774X)))
 (= $x57 false)))
 ))
 (let (($x208 (and $x45 $x52)))
 (let (($x122 (and $x208 $x155)))
 (let (($x168 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x165 (and $x168 $x122)))
 (let (($x219 (forall ((input.ind-%var1793X (_ BitVec 32)) (input.ind-%var1795X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1793X input.ind-%var1795X)))
 (let (($x178 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1793X)))
 (=> (and $x178 $x99) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1793X input.ind-%var1795X) (_ bv0 32))))))
 ))
 (let (($x119 (forall ((input.ind-%var1793X (_ BitVec 32)) (input.ind-%var1794X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1793X)))
 (=> $x178 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1793X input.ind-%var1794X) false))))
 ))
 (let (($x76 (forall ((input.ind-%var1792X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1792X)))
 (= $x164 false)))
 ))
 (let (($x112 (and (and $x76 $x119) $x219)))
 (let (($x159 (and $x112 $x165)))
 (let (($x127 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x92 (and $x127 $x159)))
 (let (($x91 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x160 (and $x91 $x92)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x26 (and $x78 $x160)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x63 (and $x197 $x26)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x114 (and $x199 $x63)))
 (let (($x15 (forall ((input.ind-%var1813X (_ BitVec 32)) (input.ind-%var1815X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1813X input.ind-%var1815X)))
 (let (($x178 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1813X)))
 (=> (and $x178 $x99) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1813X input.ind-%var1815X) (_ bv0 32))))))
 ))
 (let (($x149 (forall ((input.ind-%var1813X (_ BitVec 32)) (input.ind-%var1814X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1813X)))
 (=> $x178 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1813X input.ind-%var1814X) false))))
 ))
 (let (($x50 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1812X)))
 (= $x164 false)))
 ))
 (let (($x132 (and (and $x50 $x149) $x15)))
 (let (($x97 (and $x132 $x114)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x30 (and $x142 $x97)))
 (let (($x16 (forall ((input.ind-%var1825X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1825X)))
 (=> $x57 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1825X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var1824X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1824X)))
 (= $x57 false)))
 ))
 (let (($x35 (and $x193 $x16)))
 (let (($x211 (and $x35 $x30)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x69 (and $x11 $x211)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x140 (and $x83 $x69)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x158 (and $x79 $x140)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x9 (and $x223 $x158)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x19 (and $x187 $x9)))
 (let (($x21 (=> $x19 $x71)))
 (not $x21))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 139 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x131 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x105 (bvmul ?x131 (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x105)))
 (let (($x28 (= ?x139 ?x41)))
 (let (($x148 (= $x28 true)))
 (let ((?x95 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x207 (bvneg ?x95)))
 (let (($x42 (= ?x207 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x218 (= $x42 true)))
 (let ((?x162 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x162)))
 (let (($x201 (= ?x192 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x201 true)))
 (let (($x221 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x34 (= $x221 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x82)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x72 $x48)))
 (let (($x134 (and $x166 $x154)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x211 $x134)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x204 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x51)))))))
 (let (($x163 (and $x204 $x70)))
 (let (($x65 (= $x163 true)))
 (let ((?x155 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x155)))
 (let (($x160 (= ?x122 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x26 (= $x160 true)))
 (let (($x159 (= ?x122 input.dst.llvm-%n)))
 (let (($x92 (= $x159 true)))
 (let (($x63 (and $x92 $x26)))
 (let (($x88 (and $x63 $x65)))
 (let (($x153 (and $x88 $x34)))
 (let (($x144 (and $x153 $x118)))
 (let (($x147 (and $x144 $x218)))
 (let (($x138 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x77 (and (not $x138) $x147)))
 (let (($x12 (forall ((input.ind-%var1835X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1835X)))
 (=> $x193 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1835X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var1834X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1834X)))
 (= $x193 false)))
 ))
 (let (($x113 (and $x85 $x12)))
 (let (($x89 (and $x113 $x77)))
 (let (($x222 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x214 (and $x222 $x89)))
 (let (($x59 (forall ((input.ind-%var1853X (_ BitVec 32)) (input.ind-%var1855X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1853X input.ind-%var1855X)))
 (let (($x195 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1853X)))
 (=> (and $x195 $x43) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1853X input.ind-%var1855X) (_ bv0 32))))))
 ))
 (let (($x172 (forall ((input.ind-%var1853X (_ BitVec 32)) (input.ind-%var1854X (_ BitVec 32)) )(let (($x195 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1853X)))
 (=> $x195 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1853X input.ind-%var1854X) false))))
 ))
 (let (($x198 (forall ((input.ind-%var1852X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1852X)))
 (= $x209 false)))
 ))
 (let (($x86 (and (and $x198 $x172) $x59)))
 (let (($x121 (and $x86 $x214)))
 (let (($x202 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x36 (and $x202 $x121)))
 (let (($x120 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x125 (and $x120 $x36)))
 (let (($x93 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x157 (and $x93 $x125)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x25 (and $x90 $x157)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x32 (and $x177 $x25)))
 (let (($x33 (forall ((input.ind-%var1873X (_ BitVec 32)) (input.ind-%var1875X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1873X input.ind-%var1875X)))
 (let (($x195 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1873X)))
 (=> (and $x195 $x43) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1873X input.ind-%var1875X) (_ bv0 32))))))
 ))
 (let (($x112 (forall ((input.ind-%var1873X (_ BitVec 32)) (input.ind-%var1874X (_ BitVec 32)) )(let (($x195 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1873X)))
 (=> $x195 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1873X input.ind-%var1874X) false))))
 ))
 (let (($x6 (forall ((input.ind-%var1872X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1872X)))
 (= $x209 false)))
 ))
 (let (($x175 (and (and $x6 $x112) $x33)))
 (let (($x181 (and $x175 $x32)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x129 (and $x20 $x181)))
 (let (($x10 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1885X)))
 (=> $x193 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1885X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1884X)))
 (= $x193 false)))
 ))
 (let (($x205 (and $x16 $x10)))
 (let (($x39 (and $x205 $x129)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x101 (and $x11 $x39)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x123 (and $x83 $x101)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x189 (and $x79 $x123)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x191 (and $x223 $x189)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x56 (and $x187 $x191)))
 (let (($x49 (=> $x56 $x148)))
 (not $x49))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x131 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x105 (bvmul ?x131 (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x105)))
 (let (($x28 (= ?x139 ?x41)))
 (let (($x148 (= $x28 true)))
 (let ((?x95 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x207 (bvneg ?x95)))
 (let (($x42 (= ?x207 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x218 (= $x42 true)))
 (let ((?x162 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x162)))
 (let (($x201 (= ?x192 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x201 true)))
 (let (($x221 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x34 (= $x221 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x82)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x72 $x48)))
 (let (($x134 (and $x166 $x154)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x211 $x134)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x204 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x51)))))))
 (let (($x163 (and $x204 $x70)))
 (let (($x65 (= $x163 true)))
 (let ((?x155 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x155)))
 (let (($x160 (= ?x122 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x26 (= $x160 true)))
 (let (($x159 (= ?x122 input.dst.llvm-%n)))
 (let (($x92 (= $x159 true)))
 (let (($x63 (and $x92 $x26)))
 (let (($x88 (and $x63 $x65)))
 (let (($x153 (and $x88 $x34)))
 (let (($x144 (and $x153 $x118)))
 (let (($x147 (and $x144 $x218)))
 (let (($x138 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x77 (and (not $x138) $x147)))
 (let (($x12 (forall ((input.ind-%var1835X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1835X)))
 (=> $x193 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1835X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var1834X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1834X)))
 (= $x193 false)))
 ))
 (let (($x113 (and $x85 $x12)))
 (let (($x89 (and $x113 $x77)))
 (let (($x222 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x214 (and $x222 $x89)))
 (let (($x59 (forall ((input.ind-%var1853X (_ BitVec 32)) (input.ind-%var1855X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1853X input.ind-%var1855X)))
 (let (($x195 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1853X)))
 (=> (and $x195 $x43) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1853X input.ind-%var1855X) (_ bv0 32))))))
 ))
 (let (($x172 (forall ((input.ind-%var1853X (_ BitVec 32)) (input.ind-%var1854X (_ BitVec 32)) )(let (($x195 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1853X)))
 (=> $x195 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1853X input.ind-%var1854X) false))))
 ))
 (let (($x198 (forall ((input.ind-%var1852X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1852X)))
 (= $x209 false)))
 ))
 (let (($x86 (and (and $x198 $x172) $x59)))
 (let (($x121 (and $x86 $x214)))
 (let (($x202 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x36 (and $x202 $x121)))
 (let (($x120 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x125 (and $x120 $x36)))
 (let (($x93 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x157 (and $x93 $x125)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x25 (and $x90 $x157)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x32 (and $x177 $x25)))
 (let (($x33 (forall ((input.ind-%var1873X (_ BitVec 32)) (input.ind-%var1875X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1873X input.ind-%var1875X)))
 (let (($x195 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1873X)))
 (=> (and $x195 $x43) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1873X input.ind-%var1875X) (_ bv0 32))))))
 ))
 (let (($x112 (forall ((input.ind-%var1873X (_ BitVec 32)) (input.ind-%var1874X (_ BitVec 32)) )(let (($x195 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1873X)))
 (=> $x195 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1873X input.ind-%var1874X) false))))
 ))
 (let (($x6 (forall ((input.ind-%var1872X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1872X)))
 (= $x209 false)))
 ))
 (let (($x175 (and (and $x6 $x112) $x33)))
 (let (($x181 (and $x175 $x32)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x129 (and $x20 $x181)))
 (let (($x10 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1885X)))
 (=> $x193 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1885X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1884X)))
 (= $x193 false)))
 ))
 (let (($x205 (and $x16 $x10)))
 (let (($x39 (and $x205 $x129)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x101 (and $x11 $x39)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x123 (and $x83 $x101)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x189 (and $x79 $x123)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x191 (and $x223 $x189)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x56 (and $x187 $x191)))
 (let (($x49 (=> $x56 $x148)))
 (not $x49))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 139 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x127 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (not $x127)))
 (let (($x61 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x78 (not $x61)))
 (let (($x54 (or $x78 $x208)))
 (let (($x197 (= $x54 true)))
 (let ((?x141 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x141)))
 (let (($x152 (= ?x50 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x150 (= $x152 true)))
 (let ((?x104 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x104)))
 (let (($x220 (= ?x128 input.dst.llvm-%n)))
 (let (($x142 (= $x220 true)))
 (let (($x213 (= ?x128 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x180 (= $x213 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x97)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x28 $x27)))
 (let (($x176 (and $x114 $x13)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x25 $x176)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x123 $x189)))))))
 (let (($x91 (and $x41 $x47)))
 (let (($x183 (= $x91 true)))
 (let ((?x147 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x147)))
 (let (($x214 (= ?x77 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x121 (= $x214 true)))
 (let (($x66 (and $x121 $x183)))
 (let (($x35 (and $x66 $x180)))
 (let (($x143 (and $x35 $x142)))
 (let (($x108 (and $x143 $x150)))
 (let (($x95 (forall ((input.ind-%var1895X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1895X)))
 (=> $x16 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1895X) (_ bv0 32)))))
 ))
 (let (($x162 (forall ((input.ind-%var1894X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1894X)))
 (= $x16 false)))
 ))
 (let (($x207 (and $x162 $x95)))
 (let (($x130 (and $x207 $x108)))
 (let (($x221 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x212 (and $x221 $x130)))
 (let (($x65 (forall ((input.ind-%var1913X (_ BitVec 32)) (input.ind-%var1915X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1913X input.ind-%var1915X)))
 (let (($x190 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1913X)))
 (=> (and $x190 $x217) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1913X input.ind-%var1915X) (_ bv0 32))))))
 ))
 (let (($x48 (forall ((input.ind-%var1913X (_ BitVec 32)) (input.ind-%var1914X (_ BitVec 32)) )(let (($x190 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1913X)))
 (=> $x190 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1913X input.ind-%var1914X) false))))
 ))
 (let (($x71 (forall ((input.ind-%var1912X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1912X)))
 (= $x74 false)))
 ))
 (let (($x200 (and (and $x71 $x48) $x65)))
 (let (($x40 (and $x200 $x212)))
 (let (($x51 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x171 (and $x51 $x40)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x5 (and $x9 $x171)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x161 (and $x158 $x5)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x145 (and $x140 $x161)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x55 (and $x63 $x145)))
 (let (($x159 (forall ((input.ind-%var1933X (_ BitVec 32)) (input.ind-%var1935X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1933X input.ind-%var1935X)))
 (let (($x190 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1933X)))
 (=> (and $x190 $x217) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1933X input.ind-%var1935X) (_ bv0 32))))))
 ))
 (let (($x86 (forall ((input.ind-%var1933X (_ BitVec 32)) (input.ind-%var1934X (_ BitVec 32)) )(let (($x190 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1933X)))
 (=> $x190 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1933X input.ind-%var1934X) false))))
 ))
 (let (($x146 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1932X)))
 (= $x74 false)))
 ))
 (let (($x160 (and (and $x146 $x86) $x159)))
 (let (($x199 (and $x160 $x55)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x206 (and $x174 $x199)))
 (let (($x119 (forall ((input.ind-%var1945X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1945X)))
 (=> $x16 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1945X) (_ bv0 32)))))
 ))
 (let (($x10 (forall ((input.ind-%var1944X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1944X)))
 (= $x16 false)))
 ))
 (let (($x219 (and $x10 $x119)))
 (let (($x137 (and $x219 $x206)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x186 (and $x11 $x137)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x15 (and $x83 $x186)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x168 (and $x79 $x15)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x80 (and $x223 $x168)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x196 (and $x187 $x80)))
 (let (($x76 (=> $x196 $x197)))
 (not $x76)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x127 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (not $x127)))
 (let (($x61 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x78 (not $x61)))
 (let (($x54 (or $x78 $x208)))
 (let (($x197 (= $x54 true)))
 (let ((?x141 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x141)))
 (let (($x152 (= ?x50 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x150 (= $x152 true)))
 (let ((?x104 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x104)))
 (let (($x220 (= ?x128 input.dst.llvm-%n)))
 (let (($x142 (= $x220 true)))
 (let (($x213 (= ?x128 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x180 (= $x213 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x97)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x28 $x27)))
 (let (($x176 (and $x114 $x13)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x25 $x176)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x123 $x189)))))))
 (let (($x91 (and $x41 $x47)))
 (let (($x183 (= $x91 true)))
 (let ((?x147 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x147)))
 (let (($x214 (= ?x77 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x121 (= $x214 true)))
 (let (($x66 (and $x121 $x183)))
 (let (($x35 (and $x66 $x180)))
 (let (($x143 (and $x35 $x142)))
 (let (($x108 (and $x143 $x150)))
 (let (($x95 (forall ((input.ind-%var1895X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1895X)))
 (=> $x16 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1895X) (_ bv0 32)))))
 ))
 (let (($x162 (forall ((input.ind-%var1894X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1894X)))
 (= $x16 false)))
 ))
 (let (($x207 (and $x162 $x95)))
 (let (($x130 (and $x207 $x108)))
 (let (($x221 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x212 (and $x221 $x130)))
 (let (($x65 (forall ((input.ind-%var1913X (_ BitVec 32)) (input.ind-%var1915X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1913X input.ind-%var1915X)))
 (let (($x190 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1913X)))
 (=> (and $x190 $x217) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1913X input.ind-%var1915X) (_ bv0 32))))))
 ))
 (let (($x48 (forall ((input.ind-%var1913X (_ BitVec 32)) (input.ind-%var1914X (_ BitVec 32)) )(let (($x190 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1913X)))
 (=> $x190 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1913X input.ind-%var1914X) false))))
 ))
 (let (($x71 (forall ((input.ind-%var1912X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1912X)))
 (= $x74 false)))
 ))
 (let (($x200 (and (and $x71 $x48) $x65)))
 (let (($x40 (and $x200 $x212)))
 (let (($x51 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x171 (and $x51 $x40)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x5 (and $x9 $x171)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x161 (and $x158 $x5)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x145 (and $x140 $x161)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x55 (and $x63 $x145)))
 (let (($x159 (forall ((input.ind-%var1933X (_ BitVec 32)) (input.ind-%var1935X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1933X input.ind-%var1935X)))
 (let (($x190 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1933X)))
 (=> (and $x190 $x217) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1933X input.ind-%var1935X) (_ bv0 32))))))
 ))
 (let (($x86 (forall ((input.ind-%var1933X (_ BitVec 32)) (input.ind-%var1934X (_ BitVec 32)) )(let (($x190 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1933X)))
 (=> $x190 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1933X input.ind-%var1934X) false))))
 ))
 (let (($x146 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1932X)))
 (= $x74 false)))
 ))
 (let (($x160 (and (and $x146 $x86) $x159)))
 (let (($x199 (and $x160 $x55)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x206 (and $x174 $x199)))
 (let (($x119 (forall ((input.ind-%var1945X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1945X)))
 (=> $x16 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1945X) (_ bv0 32)))))
 ))
 (let (($x10 (forall ((input.ind-%var1944X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1944X)))
 (= $x16 false)))
 ))
 (let (($x219 (and $x10 $x119)))
 (let (($x137 (and $x219 $x206)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x186 (and $x11 $x137)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x15 (and $x83 $x186)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x168 (and $x79 $x15)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x80 (and $x223 $x168)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x196 (and $x187 $x80)))
 (let (($x76 (=> $x196 $x197)))
 (not $x76)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 134 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x52 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x169 (bvmul ?x156 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x169)))
 (let (($x184 (= ?x45 ?x52)))
 (let (($x8 (= $x184 true)))
 (let ((?x70 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x211 (bvneg ?x70)))
 (let (($x111 (= ?x211 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x111 true)))
 (let (($x72 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (= $x72 true)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x178)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x203 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x38 $x203)))
 (let (($x204 (and $x193 $x6)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x215 $x204)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x205 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x120 $x138)))))))
 (let (($x18 (and $x205 $x30)))
 (let (($x81 (= $x18 true)))
 (let ((?x186 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x186)))
 (let (($x78 (= ?x15 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x127 (= $x78 true)))
 (let (($x80 (= ?x15 input.dst.llvm-%n)))
 (let (($x196 (= $x80 true)))
 (let ((?x145 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x145)))
 (let (($x206 (= ?x55 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x137 (= $x206 true)))
 (let (($x61 (and $x137 $x196)))
 (let (($x208 (and $x61 $x127)))
 (let (($x87 (and $x208 $x81)))
 (let (($x134 (and $x87 $x194)))
 (let (($x210 (and $x134 $x177)))
 (let (($x171 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x75 (and (not $x171) $x210)))
 (let (($x130 (forall ((input.ind-%var1955X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1955X)))
 (=> $x10 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1955X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var1954X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1954X)))
 (= $x10 false)))
 ))
 (let (($x212 (and $x141 $x130)))
 (let (($x33 (and $x212 $x75)))
 (let (($x220 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x222 (and $x220 $x33)))
 (let (($x180 (forall ((input.ind-%var1973X (_ BitVec 32)) (input.ind-%var1975X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1973X input.ind-%var1975X)))
 (let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1973X)))
 (=> (and $x88 $x64) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1973X input.ind-%var1975X) (_ bv0 32))))))
 ))
 (let (($x47 (forall ((input.ind-%var1973X (_ BitVec 32)) (input.ind-%var1974X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1973X)))
 (=> $x88 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1973X input.ind-%var1974X) false))))
 ))
 (let (($x148 (forall ((input.ind-%var1972X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1972X)))
 (= $x155 false)))
 ))
 (let (($x102 (and (and $x148 $x47) $x180)))
 (let (($x82 (and $x102 $x222)))
 (let (($x41 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x154 (and $x41 $x82)))
 (let (($x105 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x163 (and $x105 $x154)))
 (let (($x191 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x93 (and $x191 $x163)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x202 (and $x39 $x93)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x113 (and $x101 $x202)))
 (let (($x32 (forall ((input.ind-%var1993X (_ BitVec 32)) (input.ind-%var1995X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1993X input.ind-%var1995X)))
 (let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1993X)))
 (=> (and $x88 $x64) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1993X input.ind-%var1995X) (_ bv0 32))))))
 ))
 (let (($x200 (forall ((input.ind-%var1993X (_ BitVec 32)) (input.ind-%var1994X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1993X)))
 (=> $x88 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1993X input.ind-%var1994X) false))))
 ))
 (let (($x26 (forall ((input.ind-%var1992X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1992X)))
 (= $x155 false)))
 ))
 (let (($x139 (and (and $x26 $x200) $x32)))
 (let (($x100 (and $x139 $x113)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x90 (and $x92 $x100)))
 (let (($x172 (forall ((input.ind-%var2005X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2005X)))
 (=> $x10 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var2005X) (_ bv0 32)))))
 ))
 (let (($x119 (forall ((input.ind-%var2004X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2004X)))
 (= $x10 false)))
 ))
 (let (($x59 (and $x119 $x172)))
 (let (($x198 (and $x59 $x90)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x149 (and $x11 $x198)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x85 (and $x83 $x149)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x12 (and $x79 $x85)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x170 (and $x223 $x12)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x126 (and $x187 $x170)))
 (let (($x62 (=> $x126 $x8)))
 (not $x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x52 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x169 (bvmul ?x156 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x169)))
 (let (($x184 (= ?x45 ?x52)))
 (let (($x8 (= $x184 true)))
 (let ((?x70 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x211 (bvneg ?x70)))
 (let (($x111 (= ?x211 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x111 true)))
 (let (($x72 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (= $x72 true)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x178)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x203 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x38 $x203)))
 (let (($x204 (and $x193 $x6)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x215 $x204)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x205 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x120 $x138)))))))
 (let (($x18 (and $x205 $x30)))
 (let (($x81 (= $x18 true)))
 (let ((?x186 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x186)))
 (let (($x78 (= ?x15 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x127 (= $x78 true)))
 (let (($x80 (= ?x15 input.dst.llvm-%n)))
 (let (($x196 (= $x80 true)))
 (let ((?x145 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x145)))
 (let (($x206 (= ?x55 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x137 (= $x206 true)))
 (let (($x61 (and $x137 $x196)))
 (let (($x208 (and $x61 $x127)))
 (let (($x87 (and $x208 $x81)))
 (let (($x134 (and $x87 $x194)))
 (let (($x210 (and $x134 $x177)))
 (let (($x171 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x75 (and (not $x171) $x210)))
 (let (($x130 (forall ((input.ind-%var1955X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1955X)))
 (=> $x10 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1955X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var1954X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1954X)))
 (= $x10 false)))
 ))
 (let (($x212 (and $x141 $x130)))
 (let (($x33 (and $x212 $x75)))
 (let (($x220 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x222 (and $x220 $x33)))
 (let (($x180 (forall ((input.ind-%var1973X (_ BitVec 32)) (input.ind-%var1975X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1973X input.ind-%var1975X)))
 (let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1973X)))
 (=> (and $x88 $x64) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1973X input.ind-%var1975X) (_ bv0 32))))))
 ))
 (let (($x47 (forall ((input.ind-%var1973X (_ BitVec 32)) (input.ind-%var1974X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1973X)))
 (=> $x88 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1973X input.ind-%var1974X) false))))
 ))
 (let (($x148 (forall ((input.ind-%var1972X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1972X)))
 (= $x155 false)))
 ))
 (let (($x102 (and (and $x148 $x47) $x180)))
 (let (($x82 (and $x102 $x222)))
 (let (($x41 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x154 (and $x41 $x82)))
 (let (($x105 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x163 (and $x105 $x154)))
 (let (($x191 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x93 (and $x191 $x163)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x202 (and $x39 $x93)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x113 (and $x101 $x202)))
 (let (($x32 (forall ((input.ind-%var1993X (_ BitVec 32)) (input.ind-%var1995X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1993X input.ind-%var1995X)))
 (let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1993X)))
 (=> (and $x88 $x64) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1993X input.ind-%var1995X) (_ bv0 32))))))
 ))
 (let (($x200 (forall ((input.ind-%var1993X (_ BitVec 32)) (input.ind-%var1994X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1993X)))
 (=> $x88 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1993X input.ind-%var1994X) false))))
 ))
 (let (($x26 (forall ((input.ind-%var1992X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1992X)))
 (= $x155 false)))
 ))
 (let (($x139 (and (and $x26 $x200) $x32)))
 (let (($x100 (and $x139 $x113)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x90 (and $x92 $x100)))
 (let (($x172 (forall ((input.ind-%var2005X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2005X)))
 (=> $x10 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var2005X) (_ bv0 32)))))
 ))
 (let (($x119 (forall ((input.ind-%var2004X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2004X)))
 (= $x10 false)))
 ))
 (let (($x59 (and $x119 $x172)))
 (let (($x198 (and $x59 $x90)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x149 (and $x11 $x198)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x85 (and $x83 $x149)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x12 (and $x79 $x85)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x170 (and $x223 $x12)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x126 (and $x187 $x170)))
 (let (($x62 (=> $x126 $x8)))
 (not $x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x71 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x112 (bvmul ?x71 (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x112)))
 (let (($x77 (= ?x162 ?x95)))
 (let (($x24 (= $x77 true)))
 (let ((?x25 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x25)))
 (let (($x91 (= ?x28 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x91 true)))
 (let ((?x16 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x16)))
 (let (($x49 (= ?x195 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x27 (= $x49 true)))
 (let (($x115 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x115 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x9)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x54 $x175)))
 (let (($x152 (and $x165 $x218)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x198 $x152)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x169)))))))
 (let (($x143 (and $x53 $x142)))
 (let (($x57 (= $x143 true)))
 (let ((?x75 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x75)))
 (let (($x163 (= ?x33 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x93 (= $x163 true)))
 (let (($x82 (= ?x33 input.dst.llvm-%n)))
 (let (($x154 (= $x82 true)))
 (let (($x202 (and $x154 $x93)))
 (let (($x150 (and $x202 $x57)))
 (let (($x174 (and $x150 $x108)))
 (let (($x157 (and $x174 $x27)))
 (let (($x13 (and $x157 $x97)))
 (let (($x177 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x128 (and (not $x177) $x13)))
 (let (($x70 (forall ((input.ind-%var2015X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2015X)))
 (=> $x119 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var2015X) (_ bv0 32)))))
 ))
 (let (($x81 (forall ((input.ind-%var2014X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2014X)))
 (= $x119 false)))
 ))
 (let (($x211 (and $x81 $x70)))
 (let (($x114 (and $x211 $x128)))
 (let (($x6 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x176 (and $x6 $x114)))
 (let (($x203 (forall ((input.ind-%var2033X (_ BitVec 32)) (input.ind-%var2035X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2033X input.ind-%var2035X)))
 (let (($x35 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2033X)))
 (=> (and $x35 $x131) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var2033X input.ind-%var2035X) (_ bv0 32))))))
 ))
 (let (($x188 (forall ((input.ind-%var2033X (_ BitVec 32)) (input.ind-%var2034X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2033X)))
 (=> $x35 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2033X input.ind-%var2034X) false))))
 ))
 (let (($x7 (forall ((input.ind-%var2032X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2032X)))
 (= $x89 false)))
 ))
 (let (($x178 (and (and $x7 $x188) $x203)))
 (let (($x63 (and $x178 $x176)))
 (let (($x36 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x69 (and $x36 $x63)))
 (let (($x208 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x122 (and $x208 $x69)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x37 (and $x61 $x122)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x159 (and $x80 $x37)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x221 (and $x15 $x159)))
 (let (($x199 (forall ((input.ind-%var2053X (_ BitVec 32)) (input.ind-%var2055X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2053X input.ind-%var2055X)))
 (let (($x35 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2053X)))
 (=> (and $x35 $x131) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var2053X input.ind-%var2055X) (_ bv0 32))))))
 ))
 (let (($x102 (forall ((input.ind-%var2053X (_ BitVec 32)) (input.ind-%var2054X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2053X)))
 (=> $x35 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2053X input.ind-%var2054X) false))))
 ))
 (let (($x129 (forall ((input.ind-%var2052X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2052X)))
 (= $x89 false)))
 ))
 (let (($x137 (and (and $x129 $x102) $x199)))
 (let (($x183 (and $x137 $x221)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x66 (and $x181 $x183)))
 (let (($x48 (forall ((input.ind-%var2065X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2065X)))
 (=> $x119 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var2065X) (_ bv0 32)))))
 ))
 (let (($x172 (forall ((input.ind-%var2064X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2064X)))
 (= $x119 false)))
 ))
 (let (($x65 (and $x172 $x48)))
 (let (($x213 (and $x65 $x66)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x158 (and $x11 $x213)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x51 (and $x83 $x158)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x207 (and $x79 $x51)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x147 (and $x223 $x207)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x140 (and $x187 $x147)))
 (let (($x192 (=> $x140 $x24)))
 (not $x192))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x71 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x112 (bvmul ?x71 (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x112)))
 (let (($x77 (= ?x162 ?x95)))
 (let (($x24 (= $x77 true)))
 (let ((?x25 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x25)))
 (let (($x91 (= ?x28 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x91 true)))
 (let ((?x16 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x16)))
 (let (($x49 (= ?x195 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x27 (= $x49 true)))
 (let (($x115 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x115 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x9)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x54 $x175)))
 (let (($x152 (and $x165 $x218)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x198 $x152)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x169)))))))
 (let (($x143 (and $x53 $x142)))
 (let (($x57 (= $x143 true)))
 (let ((?x75 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x75)))
 (let (($x163 (= ?x33 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x93 (= $x163 true)))
 (let (($x82 (= ?x33 input.dst.llvm-%n)))
 (let (($x154 (= $x82 true)))
 (let (($x202 (and $x154 $x93)))
 (let (($x150 (and $x202 $x57)))
 (let (($x174 (and $x150 $x108)))
 (let (($x157 (and $x174 $x27)))
 (let (($x13 (and $x157 $x97)))
 (let (($x177 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x128 (and (not $x177) $x13)))
 (let (($x70 (forall ((input.ind-%var2015X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2015X)))
 (=> $x119 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var2015X) (_ bv0 32)))))
 ))
 (let (($x81 (forall ((input.ind-%var2014X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2014X)))
 (= $x119 false)))
 ))
 (let (($x211 (and $x81 $x70)))
 (let (($x114 (and $x211 $x128)))
 (let (($x6 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x176 (and $x6 $x114)))
 (let (($x203 (forall ((input.ind-%var2033X (_ BitVec 32)) (input.ind-%var2035X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2033X input.ind-%var2035X)))
 (let (($x35 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2033X)))
 (=> (and $x35 $x131) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var2033X input.ind-%var2035X) (_ bv0 32))))))
 ))
 (let (($x188 (forall ((input.ind-%var2033X (_ BitVec 32)) (input.ind-%var2034X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2033X)))
 (=> $x35 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2033X input.ind-%var2034X) false))))
 ))
 (let (($x7 (forall ((input.ind-%var2032X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2032X)))
 (= $x89 false)))
 ))
 (let (($x178 (and (and $x7 $x188) $x203)))
 (let (($x63 (and $x178 $x176)))
 (let (($x36 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x69 (and $x36 $x63)))
 (let (($x208 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x122 (and $x208 $x69)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x37 (and $x61 $x122)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x159 (and $x80 $x37)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x221 (and $x15 $x159)))
 (let (($x199 (forall ((input.ind-%var2053X (_ BitVec 32)) (input.ind-%var2055X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2053X input.ind-%var2055X)))
 (let (($x35 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2053X)))
 (=> (and $x35 $x131) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var2053X input.ind-%var2055X) (_ bv0 32))))))
 ))
 (let (($x102 (forall ((input.ind-%var2053X (_ BitVec 32)) (input.ind-%var2054X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2053X)))
 (=> $x35 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2053X input.ind-%var2054X) false))))
 ))
 (let (($x129 (forall ((input.ind-%var2052X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2052X)))
 (= $x89 false)))
 ))
 (let (($x137 (and (and $x129 $x102) $x199)))
 (let (($x183 (and $x137 $x221)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x66 (and $x181 $x183)))
 (let (($x48 (forall ((input.ind-%var2065X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2065X)))
 (=> $x119 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var2065X) (_ bv0 32)))))
 ))
 (let (($x172 (forall ((input.ind-%var2064X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2064X)))
 (= $x119 false)))
 ))
 (let (($x65 (and $x172 $x48)))
 (let (($x213 (and $x65 $x66)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x158 (and $x11 $x213)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x51 (and $x83 $x158)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x207 (and $x79 $x51)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x147 (and $x223 $x207)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x140 (and $x187 $x147)))
 (let (($x192 (=> $x140 $x24)))
 (not $x192))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 139 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x20 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x191 (not $x20)))
 (let (($x41 (= $x191 false)))
 (let (($x212 (= $x41 true)))
 (let ((?x190 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x190)))
 (let (($x132 (= ?x26 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x125 (= $x132 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x69)))
 (let (($x134 (= ?x122 input.dst.llvm-%n)))
 (let (($x92 (= $x134 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x171)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x100 $x121)))
 (let (($x204 (and $x105 $x72)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x158 $x204)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x162)))))))
 (let (($x18 (and $x113 $x30)))
 (let (($x194 (= $x18 true)))
 (let (($x37 (= ?x122 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x159 (= $x37 true)))
 (let ((?x13 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x13)))
 (let (($x176 (= ?x128 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x63 (= $x176 true)))
 (let (($x221 (and $x63 $x159)))
 (let (($x59 (and $x221 $x194)))
 (let (($x99 (and $x59 $x92)))
 (let (($x118 (and $x99 $x125)))
 (let (($x25 (forall ((input.ind-%var2075X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2075X)))
 (=> $x172 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var2075X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var2074X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2074X)))
 (= $x172 false)))
 ))
 (let (($x28 (and $x16 $x25)))
 (let (($x164 (and $x28 $x118)))
 (let (($x115 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x205 (and $x115 $x164)))
 (let (($x57 (forall ((input.ind-%var2093X (_ BitVec 32)) (input.ind-%var2095X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2093X input.ind-%var2095X)))
 (let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2093X)))
 (=> (and $x193 $x127) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var2093X input.ind-%var2095X) (_ bv0 32))))))
 ))
 (let (($x175 (forall ((input.ind-%var2093X (_ BitVec 32)) (input.ind-%var2094X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2093X)))
 (=> $x193 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2093X input.ind-%var2094X) false))))
 ))
 (let (($x8 (forall ((input.ind-%var2092X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2092X)))
 (= $x161 false)))
 ))
 (let (($x219 (and (and $x8 $x175) $x57)))
 (let (($x201 (and $x219 $x205)))
 (let (($x169 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x34 (and $x169 $x201)))
 (let (($x170 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x38 (and $x170 $x34)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x144 (and $x12 $x38)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x138 (and $x85 $x144)))
 (let (($x202 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x153 (and $x202 $x138)))
 (let (($x82 (forall ((input.ind-%var2113X (_ BitVec 32)) (input.ind-%var2115X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2113X input.ind-%var2115X)))
 (let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2113X)))
 (=> (and $x193 $x127) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var2113X input.ind-%var2115X) (_ bv0 32))))))
 ))
 (let (($x178 (forall ((input.ind-%var2113X (_ BitVec 32)) (input.ind-%var2114X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2113X)))
 (=> $x193 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2113X input.ind-%var2114X) false))))
 ))
 (let (($x186 (forall ((input.ind-%var2112X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2112X)))
 (= $x161 false)))
 ))
 (let (($x163 (and (and $x186 $x178) $x82)))
 (let (($x101 (and $x163 $x153)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x123 (and $x206 $x101)))
 (let (($x47 (forall ((input.ind-%var2125X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2125X)))
 (=> $x172 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var2125X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var2124X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2124X)))
 (= $x172 false)))
 ))
 (let (($x180 (and $x48 $x47)))
 (let (($x214 (and $x180 $x123)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x42 (and $x11 $x214)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x32 (and $x83 $x42)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x220 (and $x79 $x32)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x76 (and $x223 $x220)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x215 (and $x187 $x76)))
 (let (($x22 (=> $x215 $x212)))
 (not $x22)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x20 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x191 (not $x20)))
 (let (($x41 (= $x191 false)))
 (let (($x212 (= $x41 true)))
 (let ((?x190 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x190)))
 (let (($x132 (= ?x26 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x125 (= $x132 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x69)))
 (let (($x134 (= ?x122 input.dst.llvm-%n)))
 (let (($x92 (= $x134 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x171)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x100 $x121)))
 (let (($x204 (and $x105 $x72)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x158 $x204)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x162)))))))
 (let (($x18 (and $x113 $x30)))
 (let (($x194 (= $x18 true)))
 (let (($x37 (= ?x122 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x159 (= $x37 true)))
 (let ((?x13 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x13)))
 (let (($x176 (= ?x128 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x63 (= $x176 true)))
 (let (($x221 (and $x63 $x159)))
 (let (($x59 (and $x221 $x194)))
 (let (($x99 (and $x59 $x92)))
 (let (($x118 (and $x99 $x125)))
 (let (($x25 (forall ((input.ind-%var2075X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2075X)))
 (=> $x172 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var2075X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var2074X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2074X)))
 (= $x172 false)))
 ))
 (let (($x28 (and $x16 $x25)))
 (let (($x164 (and $x28 $x118)))
 (let (($x115 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x205 (and $x115 $x164)))
 (let (($x57 (forall ((input.ind-%var2093X (_ BitVec 32)) (input.ind-%var2095X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2093X input.ind-%var2095X)))
 (let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2093X)))
 (=> (and $x193 $x127) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var2093X input.ind-%var2095X) (_ bv0 32))))))
 ))
 (let (($x175 (forall ((input.ind-%var2093X (_ BitVec 32)) (input.ind-%var2094X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2093X)))
 (=> $x193 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2093X input.ind-%var2094X) false))))
 ))
 (let (($x8 (forall ((input.ind-%var2092X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2092X)))
 (= $x161 false)))
 ))
 (let (($x219 (and (and $x8 $x175) $x57)))
 (let (($x201 (and $x219 $x205)))
 (let (($x169 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x34 (and $x169 $x201)))
 (let (($x170 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x38 (and $x170 $x34)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x144 (and $x12 $x38)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x138 (and $x85 $x144)))
 (let (($x202 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x153 (and $x202 $x138)))
 (let (($x82 (forall ((input.ind-%var2113X (_ BitVec 32)) (input.ind-%var2115X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2113X input.ind-%var2115X)))
 (let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2113X)))
 (=> (and $x193 $x127) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var2113X input.ind-%var2115X) (_ bv0 32))))))
 ))
 (let (($x178 (forall ((input.ind-%var2113X (_ BitVec 32)) (input.ind-%var2114X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2113X)))
 (=> $x193 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var2113X input.ind-%var2114X) false))))
 ))
 (let (($x186 (forall ((input.ind-%var2112X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var2112X)))
 (= $x161 false)))
 ))
 (let (($x163 (and (and $x186 $x178) $x82)))
 (let (($x101 (and $x163 $x153)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x123 (and $x206 $x101)))
 (let (($x47 (forall ((input.ind-%var2125X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2125X)))
 (=> $x172 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var2125X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var2124X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var2124X)))
 (= $x172 false)))
 ))
 (let (($x180 (and $x48 $x47)))
 (let (($x214 (and $x180 $x123)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x42 (and $x11 $x214)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x32 (and $x83 $x42)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x220 (and $x79 $x32)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x76 (and $x223 $x220)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x215 (and $x187 $x76)))
 (let (($x22 (=> $x215 $x212)))
 (not $x22)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00064000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00064003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00001100)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00001103)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00001100)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x81 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x210 (or $x81 $x70)))
 (let (($x56 (= $x210 true)))
 (let ((?x54 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x54)))
 (let (($x142 (= ?x197 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x198 (= $x142 true)))
 (let ((?x43 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x43)))
 (let (($x45 (= ?x119 input.dst.llvm-%n)))
 (let (($x52 (= $x45 true)))
 (let (($x88 (= ?x119 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x129 (= $x88 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x174)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x55 $x49)))
 (let (($x27 (and $x108 $x14)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x42 $x27)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x191 $x41)))))))
 (let (($x146 (and $x139 $x65)))
 (let (($x157 (= $x146 true)))
 (let ((?x34 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x34)))
 (let (($x138 (= ?x38 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x138 true)))
 (let (($x181 (and $x153 $x157)))
 (let (($x53 (and $x181 $x129)))
 (let (($x184 (and $x53 $x52)))
 (let (($x209 (and $x184 $x198)))
 (let (($x118 (forall ((input.ind-%var4667X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4667X)))
 (=> $x64 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4667X) (_ bv0 32)))))
 ))
 (let (($x10 (forall ((input.ind-%var4666X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4666X)))
 (= $x64 false)))
 ))
 (let (($x164 (and $x10 $x118)))
 (let (($x15 (and $x164 $x209)))
 (let (($x166 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x168 (and $x166 $x15)))
 (let (($x18 (forall ((input.ind-%var4685X (_ BitVec 32)) (input.ind-%var4687X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4685X input.ind-%var4687X)))
 (let (($x175 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4685X)))
 (=> (and $x175 $x126) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4685X input.ind-%var4687X) (_ bv0 32))))))
 ))
 (let (($x160 (forall ((input.ind-%var4685X (_ BitVec 32)) (input.ind-%var4686X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4685X)))
 (=> $x175 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4685X input.ind-%var4686X) false))))
 ))
 (let (($x24 (forall ((input.ind-%var4684X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4684X)))
 (= $x111 false)))
 ))
 (let (($x59 (and (and $x24 $x160) $x18)))
 (let (($x145 (and $x59 $x168)))
 (let (($x140 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x40 (and $x140 $x145)))
 (let (($x112 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x199 (and $x112 $x40)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x6 (and $x21 $x199)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x9 (and $x51 $x6)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x218 (and $x159 $x9)))
 (let (($x63 (forall ((input.ind-%var4705X (_ BitVec 32)) (input.ind-%var4707X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4705X input.ind-%var4707X)))
 (let (($x175 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4705X)))
 (=> (and $x175 $x126) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4705X input.ind-%var4707X) (_ bv0 32))))))
 ))
 (let (($x57 (forall ((input.ind-%var4705X (_ BitVec 32)) (input.ind-%var4706X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4705X)))
 (=> $x175 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4705X input.ind-%var4706X) false))))
 ))
 (let (($x163 (forall ((input.ind-%var4704X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4704X)))
 (= $x111 false)))
 ))
 (let (($x122 (and (and $x163 $x57) $x63)))
 (let (($x143 (and $x122 $x218)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x61 (and $x178 $x143)))
 (let (($x127 (forall ((input.ind-%var4717X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4717X)))
 (=> $x64 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4717X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var4716X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4716X)))
 (= $x64 false)))
 ))
 (let (($x188 (and $x131 $x127)))
 (let (($x36 (and $x188 $x61)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x211 (and $x116 $x36)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x104 (and $x84 $x211)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x80 (and $x223 $x104)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x7 (and $x167 $x80)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x200 (and $x29 $x7)))
 (let (($x87 (=> $x200 $x56)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x81 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x210 (or $x81 $x70)))
 (let (($x56 (= $x210 true)))
 (let ((?x54 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x54)))
 (let (($x142 (= ?x197 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x198 (= $x142 true)))
 (let ((?x43 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x43)))
 (let (($x45 (= ?x119 input.dst.llvm-%n)))
 (let (($x52 (= $x45 true)))
 (let (($x88 (= ?x119 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x129 (= $x88 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x174)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x55 $x49)))
 (let (($x27 (and $x108 $x14)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x42 $x27)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x191 $x41)))))))
 (let (($x146 (and $x139 $x65)))
 (let (($x157 (= $x146 true)))
 (let ((?x34 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x34)))
 (let (($x138 (= ?x38 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x138 true)))
 (let (($x181 (and $x153 $x157)))
 (let (($x53 (and $x181 $x129)))
 (let (($x184 (and $x53 $x52)))
 (let (($x209 (and $x184 $x198)))
 (let (($x118 (forall ((input.ind-%var4667X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4667X)))
 (=> $x64 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4667X) (_ bv0 32)))))
 ))
 (let (($x10 (forall ((input.ind-%var4666X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4666X)))
 (= $x64 false)))
 ))
 (let (($x164 (and $x10 $x118)))
 (let (($x15 (and $x164 $x209)))
 (let (($x166 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x168 (and $x166 $x15)))
 (let (($x18 (forall ((input.ind-%var4685X (_ BitVec 32)) (input.ind-%var4687X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4685X input.ind-%var4687X)))
 (let (($x175 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4685X)))
 (=> (and $x175 $x126) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4685X input.ind-%var4687X) (_ bv0 32))))))
 ))
 (let (($x160 (forall ((input.ind-%var4685X (_ BitVec 32)) (input.ind-%var4686X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4685X)))
 (=> $x175 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4685X input.ind-%var4686X) false))))
 ))
 (let (($x24 (forall ((input.ind-%var4684X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4684X)))
 (= $x111 false)))
 ))
 (let (($x59 (and (and $x24 $x160) $x18)))
 (let (($x145 (and $x59 $x168)))
 (let (($x140 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x40 (and $x140 $x145)))
 (let (($x112 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x199 (and $x112 $x40)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x6 (and $x21 $x199)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x9 (and $x51 $x6)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x218 (and $x159 $x9)))
 (let (($x63 (forall ((input.ind-%var4705X (_ BitVec 32)) (input.ind-%var4707X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4705X input.ind-%var4707X)))
 (let (($x175 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4705X)))
 (=> (and $x175 $x126) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4705X input.ind-%var4707X) (_ bv0 32))))))
 ))
 (let (($x57 (forall ((input.ind-%var4705X (_ BitVec 32)) (input.ind-%var4706X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4705X)))
 (=> $x175 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4705X input.ind-%var4706X) false))))
 ))
 (let (($x163 (forall ((input.ind-%var4704X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4704X)))
 (= $x111 false)))
 ))
 (let (($x122 (and (and $x163 $x57) $x63)))
 (let (($x143 (and $x122 $x218)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x61 (and $x178 $x143)))
 (let (($x127 (forall ((input.ind-%var4717X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4717X)))
 (=> $x64 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4717X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var4716X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4716X)))
 (= $x64 false)))
 ))
 (let (($x188 (and $x131 $x127)))
 (let (($x36 (and $x188 $x61)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x211 (and $x116 $x36)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x104 (and $x84 $x211)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x80 (and $x223 $x104)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x7 (and $x167 $x80)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x200 (and $x29 $x7)))
 (let (($x87 (=> $x200 $x56)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 132 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x86 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x141 (ite $x86 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x148 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x130 (ite $x148 ?x141 (_ bv0 32))))
 (let (($x5 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x130)))
 (let (($x19 (= $x5 true)))
 (let ((?x74 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x74)))
 (let (($x154 (= ?x93 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x33 (= $x154 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x95)))
 (let ((?x192 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x192)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (and $x89 $x113)))
 (let (($x121 (and $x162 $x77)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x75 $x121)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x217 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x132)))))))
 (let (($x100 (and $x217 $x158)))
 (let (($x72 (= $x100 true)))
 (let ((?x7 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x7)))
 (let (($x56 (= ?x200 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x87 (= $x56 true)))
 (let (($x81 (= ?x200 input.dst.llvm-%n)))
 (let (($x70 (= $x81 true)))
 (let ((?x61 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x61)))
 (let (($x211 (= ?x36 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x211 true)))
 (let (($x6 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (not $x6)))
 (let (($x218 (= $x9 true)))
 (let (($x80 (and $x218 $x104)))
 (let (($x210 (and $x80 $x70)))
 (let (($x196 (and $x210 $x87)))
 (let (($x204 (and $x196 $x72)))
 (let (($x222 (and $x204 $x33)))
 (let (($x145 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x219 (and $x145 $x222)))
 (let (($x209 (forall ((input.ind-%var4869X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4869X)))
 (=> $x35 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4869X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var4868X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4868X)))
 (= $x35 false)))
 ))
 (let (($x15 (and $x165 $x209)))
 (let (($x105 (and $x15 $x219)))
 (let (($x90 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x171 (and $x90 $x105)))
 (let (($x88 (forall ((input.ind-%var4887X (_ BitVec 32)) (input.ind-%var4889X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4887X input.ind-%var4889X)))
 (let (($x160 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4887X)))
 (=> (and $x160 $x147) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4887X input.ind-%var4889X) (_ bv0 32))))))
 ))
 (let (($x27 (forall ((input.ind-%var4887X (_ BitVec 32)) (input.ind-%var4888X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4887X)))
 (=> $x160 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4887X input.ind-%var4888X) false))))
 ))
 (let (($x55 (forall ((input.ind-%var4886X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4886X)))
 (= $x28 false)))
 ))
 (let (($x53 (and (and $x55 $x27) $x88)))
 (let (($x30 (and $x53 $x171)))
 (let (($x66 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x62 (and $x66 $x30)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x170 (and $x39 $x62)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x25 (and $x41 $x170)))
 (let (($x191 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x97 (and $x191 $x25)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x149 (and $x76 $x97)))
 (let (($x153 (forall ((input.ind-%var4907X (_ BitVec 32)) (input.ind-%var4909X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4907X input.ind-%var4909X)))
 (let (($x160 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4907X)))
 (=> (and $x160 $x147) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4907X input.ind-%var4909X) (_ bv0 32))))))
 ))
 (let (($x18 (forall ((input.ind-%var4907X (_ BitVec 32)) (input.ind-%var4908X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4907X)))
 (=> $x160 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4907X input.ind-%var4908X) false))))
 ))
 (let (($x122 (forall ((input.ind-%var4906X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4906X)))
 (= $x28 false)))
 ))
 (let (($x220 (and (and $x122 $x18) $x153)))
 (let (($x169 (and $x220 $x149)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x180 (and $x57 $x169)))
 (let (($x126 (forall ((input.ind-%var4919X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4919X)))
 (=> $x35 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4919X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var4918X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4918X)))
 (= $x35 false)))
 ))
 (let (($x8 (and $x193 $x126)))
 (let (($x115 (and $x8 $x180)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x16 (and $x83 $x115)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x13 (and $x79 $x16)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x186 (and $x73 $x13)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x195 (and $x96 $x186)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x85 (and $x29 $x195)))
 (let (($x50 (=> $x85 $x19)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x86 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x141 (ite $x86 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x148 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x130 (ite $x148 ?x141 (_ bv0 32))))
 (let (($x5 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x130)))
 (let (($x19 (= $x5 true)))
 (let ((?x74 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x74)))
 (let (($x154 (= ?x93 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x33 (= $x154 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x95)))
 (let ((?x192 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x192)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (and $x89 $x113)))
 (let (($x121 (and $x162 $x77)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x75 $x121)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x217 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x132)))))))
 (let (($x100 (and $x217 $x158)))
 (let (($x72 (= $x100 true)))
 (let ((?x7 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x7)))
 (let (($x56 (= ?x200 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x87 (= $x56 true)))
 (let (($x81 (= ?x200 input.dst.llvm-%n)))
 (let (($x70 (= $x81 true)))
 (let ((?x61 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x61)))
 (let (($x211 (= ?x36 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x211 true)))
 (let (($x6 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (not $x6)))
 (let (($x218 (= $x9 true)))
 (let (($x80 (and $x218 $x104)))
 (let (($x210 (and $x80 $x70)))
 (let (($x196 (and $x210 $x87)))
 (let (($x204 (and $x196 $x72)))
 (let (($x222 (and $x204 $x33)))
 (let (($x145 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x219 (and $x145 $x222)))
 (let (($x209 (forall ((input.ind-%var4869X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4869X)))
 (=> $x35 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4869X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var4868X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4868X)))
 (= $x35 false)))
 ))
 (let (($x15 (and $x165 $x209)))
 (let (($x105 (and $x15 $x219)))
 (let (($x90 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x171 (and $x90 $x105)))
 (let (($x88 (forall ((input.ind-%var4887X (_ BitVec 32)) (input.ind-%var4889X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4887X input.ind-%var4889X)))
 (let (($x160 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4887X)))
 (=> (and $x160 $x147) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4887X input.ind-%var4889X) (_ bv0 32))))))
 ))
 (let (($x27 (forall ((input.ind-%var4887X (_ BitVec 32)) (input.ind-%var4888X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4887X)))
 (=> $x160 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4887X input.ind-%var4888X) false))))
 ))
 (let (($x55 (forall ((input.ind-%var4886X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4886X)))
 (= $x28 false)))
 ))
 (let (($x53 (and (and $x55 $x27) $x88)))
 (let (($x30 (and $x53 $x171)))
 (let (($x66 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x62 (and $x66 $x30)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x170 (and $x39 $x62)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x25 (and $x41 $x170)))
 (let (($x191 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x97 (and $x191 $x25)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x149 (and $x76 $x97)))
 (let (($x153 (forall ((input.ind-%var4907X (_ BitVec 32)) (input.ind-%var4909X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4907X input.ind-%var4909X)))
 (let (($x160 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4907X)))
 (=> (and $x160 $x147) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4907X input.ind-%var4909X) (_ bv0 32))))))
 ))
 (let (($x18 (forall ((input.ind-%var4907X (_ BitVec 32)) (input.ind-%var4908X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4907X)))
 (=> $x160 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4907X input.ind-%var4908X) false))))
 ))
 (let (($x122 (forall ((input.ind-%var4906X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4906X)))
 (= $x28 false)))
 ))
 (let (($x220 (and (and $x122 $x18) $x153)))
 (let (($x169 (and $x220 $x149)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x180 (and $x57 $x169)))
 (let (($x126 (forall ((input.ind-%var4919X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4919X)))
 (=> $x35 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4919X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var4918X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4918X)))
 (= $x35 false)))
 ))
 (let (($x8 (and $x193 $x126)))
 (let (($x115 (and $x8 $x180)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x16 (and $x83 $x115)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x13 (and $x79 $x16)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x186 (and $x73 $x13)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x195 (and $x96 $x186)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x85 (and $x29 $x195)))
 (let (($x50 (=> $x85 $x19)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (not $x119)))
 (let (($x112 (or $x119 $x207)))
 (let (($x118 (= $x112 true)))
 (let ((?x206 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x206)))
 (let (($x177 (= ?x82 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x139 (= $x177 true)))
 (let ((?x30 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x62 (bvneg ?x30)))
 (let (($x198 (= ?x62 input.dst.llvm-%n)))
 (let (($x203 (= $x198 true)))
 (let ((?x205 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x205)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x48 $x128)))
 (let (($x45 (and $x71 $x152)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x115 $x45)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x189 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x86)))))))
 (let (($x184 (and $x189 $x52)))
 (let (($x142 (= $x184 true)))
 (let (($x170 (= ?x62 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x25 (= $x170 true)))
 (let ((?x33 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x33)))
 (let (($x105 (= ?x222 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x171 (= $x105 true)))
 (let (($x97 (and $x171 $x25)))
 (let (($x127 (and $x97 $x142)))
 (let (($x116 (and $x127 $x203)))
 (let (($x214 (and $x116 $x139)))
 (let (($x74 (forall ((input.ind-%var5011X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5011X)))
 (=> $x78 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5011X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var5010X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5010X)))
 (= $x78 false)))
 ))
 (let (($x93 (and $x121 $x74)))
 (let (($x42 (and $x93 $x214)))
 (let (($x113 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x65 (and $x113 $x42)))
 (let (($x89 (forall ((input.ind-%var5029X (_ BitVec 32)) (input.ind-%var5031X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5029X input.ind-%var5031X)))
 (let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5029X)))
 (=> (and $x27 $x212) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5029X input.ind-%var5031X) (_ bv0 32))))))
 ))
 (let (($x47 (forall ((input.ind-%var5029X (_ BitVec 32)) (input.ind-%var5030X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5029X)))
 (=> $x27 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5029X input.ind-%var5030X) false))))
 ))
 (let (($x91 (forall ((input.ind-%var5028X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5028X)))
 (= $x164 false)))
 ))
 (let (($x192 (and (and $x91 $x47) $x89)))
 (let (($x108 (and $x192 $x65)))
 (let (($x56 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x174 (and $x56 $x108)))
 (let (($x210 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x181 (and $x210 $x174)))
 (let (($x200 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x43 (and $x200 $x181)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x49 (and $x80 $x43)))
 (let (($x211 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x14 (and $x211 $x49)))
 (let (($x218 (forall ((input.ind-%var5049X (_ BitVec 32)) (input.ind-%var5051X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5049X input.ind-%var5051X)))
 (let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5049X)))
 (=> (and $x27 $x212) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5049X input.ind-%var5051X) (_ bv0 32))))))
 ))
 (let (($x88 (forall ((input.ind-%var5049X (_ BitVec 32)) (input.ind-%var5050X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5049X)))
 (=> $x27 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5049X input.ind-%var5050X) false))))
 ))
 (let (($x220 (forall ((input.ind-%var5048X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5048X)))
 (= $x164 false)))
 ))
 (let (($x61 (and (and $x220 $x88) $x218)))
 (let (($x37 (and $x61 $x14)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x159 (and $x18 $x37)))
 (let (($x147 (forall ((input.ind-%var5061X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5061X)))
 (=> $x78 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5061X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var5060X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5060X)))
 (= $x78 false)))
 ))
 (let (($x24 (and $x175 $x147)))
 (let (($x69 (and $x24 $x159)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x114 (and $x84 $x69)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x176 (and $x223 $x114)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x59 (and $x167 $x176)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x146 (and $x23 $x59)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x157 (and $x187 $x146)))
 (let (($x201 (=> $x157 $x118)))
 (not $x201)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (not $x119)))
 (let (($x112 (or $x119 $x207)))
 (let (($x118 (= $x112 true)))
 (let ((?x206 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x206)))
 (let (($x177 (= ?x82 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x139 (= $x177 true)))
 (let ((?x30 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x62 (bvneg ?x30)))
 (let (($x198 (= ?x62 input.dst.llvm-%n)))
 (let (($x203 (= $x198 true)))
 (let ((?x205 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x205)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x48 $x128)))
 (let (($x45 (and $x71 $x152)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x115 $x45)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x189 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x86)))))))
 (let (($x184 (and $x189 $x52)))
 (let (($x142 (= $x184 true)))
 (let (($x170 (= ?x62 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x25 (= $x170 true)))
 (let ((?x33 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x33)))
 (let (($x105 (= ?x222 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x171 (= $x105 true)))
 (let (($x97 (and $x171 $x25)))
 (let (($x127 (and $x97 $x142)))
 (let (($x116 (and $x127 $x203)))
 (let (($x214 (and $x116 $x139)))
 (let (($x74 (forall ((input.ind-%var5011X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5011X)))
 (=> $x78 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5011X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var5010X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5010X)))
 (= $x78 false)))
 ))
 (let (($x93 (and $x121 $x74)))
 (let (($x42 (and $x93 $x214)))
 (let (($x113 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x65 (and $x113 $x42)))
 (let (($x89 (forall ((input.ind-%var5029X (_ BitVec 32)) (input.ind-%var5031X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5029X input.ind-%var5031X)))
 (let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5029X)))
 (=> (and $x27 $x212) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5029X input.ind-%var5031X) (_ bv0 32))))))
 ))
 (let (($x47 (forall ((input.ind-%var5029X (_ BitVec 32)) (input.ind-%var5030X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5029X)))
 (=> $x27 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5029X input.ind-%var5030X) false))))
 ))
 (let (($x91 (forall ((input.ind-%var5028X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5028X)))
 (= $x164 false)))
 ))
 (let (($x192 (and (and $x91 $x47) $x89)))
 (let (($x108 (and $x192 $x65)))
 (let (($x56 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x174 (and $x56 $x108)))
 (let (($x210 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x181 (and $x210 $x174)))
 (let (($x200 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x43 (and $x200 $x181)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x49 (and $x80 $x43)))
 (let (($x211 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x14 (and $x211 $x49)))
 (let (($x218 (forall ((input.ind-%var5049X (_ BitVec 32)) (input.ind-%var5051X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5049X input.ind-%var5051X)))
 (let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5049X)))
 (=> (and $x27 $x212) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5049X input.ind-%var5051X) (_ bv0 32))))))
 ))
 (let (($x88 (forall ((input.ind-%var5049X (_ BitVec 32)) (input.ind-%var5050X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5049X)))
 (=> $x27 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5049X input.ind-%var5050X) false))))
 ))
 (let (($x220 (forall ((input.ind-%var5048X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5048X)))
 (= $x164 false)))
 ))
 (let (($x61 (and (and $x220 $x88) $x218)))
 (let (($x37 (and $x61 $x14)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x159 (and $x18 $x37)))
 (let (($x147 (forall ((input.ind-%var5061X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5061X)))
 (=> $x78 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5061X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var5060X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5060X)))
 (= $x78 false)))
 ))
 (let (($x24 (and $x175 $x147)))
 (let (($x69 (and $x24 $x159)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x114 (and $x84 $x69)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x176 (and $x223 $x114)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x59 (and $x167 $x176)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x146 (and $x23 $x59)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x157 (and $x187 $x146)))
 (let (($x201 (=> $x157 $x118)))
 (not $x201)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 132 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x172)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x203 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (and $x127 $x203)))
 (let (($x82 (and $x116 $x206)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x142 $x82)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x111)))))))
 (let (($x162 (and $x52 $x208)))
 (let (($x95 (= $x162 true)))
 (let ((?x214 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x37 (concat ?x43 (concat ?x65 ?x214)))))
 (let (($x157 (= ?x159 input.dst.llvm-%n)))
 (let (($x119 (= $x157 true)))
 (let (($x69 (= input.dst.llvm-%n ?x159)))
 (let (($x59 (and (and (and $x52 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x208) $x69)))
 (let (($x146 (= $x59 true)))
 (let (($x207 (and $x146 $x119)))
 (let (($x195 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x112 (and $x195 $x207)))
 (let (($x186 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x118 (and $x186 $x112)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x201 (and $x13 $x118)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x221 (and $x97 $x201)))
 (let (($x30 (forall ((input.ind-%var5079X (_ BitVec 32)) (input.ind-%var5081X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5079X input.ind-%var5081X)))
 (let (($x137 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5079X)))
 (=> (and $x137 $x70) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5079X input.ind-%var5081X) (_ bv0 32))))))
 ))
 (let (($x192 (forall ((input.ind-%var5079X (_ BitVec 32)) (input.ind-%var5080X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5079X)))
 (=> $x137 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5079X input.ind-%var5080X) false))))
 ))
 (let (($x36 (forall ((input.ind-%var5078X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5078X)))
 (= $x199 false)))
 ))
 (let (($x170 (and (and $x36 $x192) $x30)))
 (let (($x149 (and $x170 $x221)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x169 (and $x143 $x149)))
 (let (($x55 (forall ((input.ind-%var5091X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5091X)))
 (=> $x175 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5091X) (_ bv0 32)))))
 ))
 (let (($x147 (forall ((input.ind-%var5090X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5090X)))
 (= $x175 false)))
 ))
 (let (($x129 (and $x147 $x55)))
 (let (($x193 (and $x129 $x169)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x28 (and $x84 $x193)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x38 (and $x223 $x28)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x22 (and $x167 $x38)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x168 (and $x23 $x22)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x72 (and $x187 $x168)))
 (let (($x77 (=> $x72 $x95)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x172)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x203 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (and $x127 $x203)))
 (let (($x82 (and $x116 $x206)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x142 $x82)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x111)))))))
 (let (($x162 (and $x52 $x208)))
 (let (($x95 (= $x162 true)))
 (let ((?x214 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x37 (concat ?x43 (concat ?x65 ?x214)))))
 (let (($x157 (= ?x159 input.dst.llvm-%n)))
 (let (($x119 (= $x157 true)))
 (let (($x69 (= input.dst.llvm-%n ?x159)))
 (let (($x59 (and (and (and $x52 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x208) $x69)))
 (let (($x146 (= $x59 true)))
 (let (($x207 (and $x146 $x119)))
 (let (($x195 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x112 (and $x195 $x207)))
 (let (($x186 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x118 (and $x186 $x112)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x201 (and $x13 $x118)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x221 (and $x97 $x201)))
 (let (($x30 (forall ((input.ind-%var5079X (_ BitVec 32)) (input.ind-%var5081X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5079X input.ind-%var5081X)))
 (let (($x137 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5079X)))
 (=> (and $x137 $x70) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5079X input.ind-%var5081X) (_ bv0 32))))))
 ))
 (let (($x192 (forall ((input.ind-%var5079X (_ BitVec 32)) (input.ind-%var5080X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5079X)))
 (=> $x137 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5079X input.ind-%var5080X) false))))
 ))
 (let (($x36 (forall ((input.ind-%var5078X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5078X)))
 (= $x199 false)))
 ))
 (let (($x170 (and (and $x36 $x192) $x30)))
 (let (($x149 (and $x170 $x221)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x169 (and $x143 $x149)))
 (let (($x55 (forall ((input.ind-%var5091X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5091X)))
 (=> $x175 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5091X) (_ bv0 32)))))
 ))
 (let (($x147 (forall ((input.ind-%var5090X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5090X)))
 (= $x175 false)))
 ))
 (let (($x129 (and $x147 $x55)))
 (let (($x193 (and $x129 $x169)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x28 (and $x84 $x193)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x38 (and $x223 $x28)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x22 (and $x167 $x38)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x168 (and $x23 $x22)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x72 (and $x187 $x168)))
 (let (($x77 (=> $x72 $x95)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x158 (bvneg ?x41)))
 (let (($x7 (= ?x158 input.dst.llvm-%n)))
 (let (($x126 (= $x7 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x210 (concat ?x9 (concat ?x139 (concat ?x77 ?x162)))))
 (let (($x21 (= ?x210 input.dst.llvm-%n)))
 (let (($x220 (= $x21 true)))
 (let (($x154 (= input.dst.llvm-%n ?x210)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x193)))
 (let ((?x221 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x221)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (and $x118 $x149)))
 (let (($x38 (and $x169 $x28)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x112 $x38)))
 (let (($x174 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x49)))))))
 (let (($x35 (and (and (and $x119 $x174) $x22) $x154)))
 (let (($x78 (= $x35 true)))
 (let (($x104 (and $x78 $x220)))
 (let (($x176 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x6 (and $x176 $x104)))
 (let (($x206 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x15 (and $x206 $x6)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x218 (and $x116 $x15)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x200 (and $x198 $x218)))
 (let (($x184 (forall ((input.ind-%var5109X (_ BitVec 32)) (input.ind-%var5111X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5109X input.ind-%var5111X)))
 (let (($x45 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5109X)))
 (=> (and $x45 $x85) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5109X input.ind-%var5111X) (_ bv0 32))))))
 ))
 (let (($x48 (forall ((input.ind-%var5109X (_ BitVec 32)) (input.ind-%var5110X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5109X)))
 (=> $x45 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5109X input.ind-%var5110X) false))))
 ))
 (let (($x170 (forall ((input.ind-%var5108X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5108X)))
 (= $x202 false)))
 ))
 (let (($x127 (and (and $x170 $x48) $x184)))
 (let (($x56 (and $x127 $x200)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x93 (and $x192 $x56)))
 (let (($x70 (forall ((input.ind-%var5121X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5121X)))
 (=> $x160 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5121X) (_ bv0 32)))))
 ))
 (let (($x212 (forall ((input.ind-%var5120X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5120X)))
 (= $x160 false)))
 ))
 (let (($x47 (and $x212 $x70)))
 (let (($x33 (and $x47 $x93)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x80 (and $x84 $x33)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x91 (and $x223 $x80)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x194 (and $x167 $x91)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x121 (and $x23 $x194)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x74 (and $x187 $x121)))
 (let (($x100 (=> $x74 $x126)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x158 (bvneg ?x41)))
 (let (($x7 (= ?x158 input.dst.llvm-%n)))
 (let (($x126 (= $x7 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x210 (concat ?x9 (concat ?x139 (concat ?x77 ?x162)))))
 (let (($x21 (= ?x210 input.dst.llvm-%n)))
 (let (($x220 (= $x21 true)))
 (let (($x154 (= input.dst.llvm-%n ?x210)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x193)))
 (let ((?x221 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x221)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (and $x118 $x149)))
 (let (($x38 (and $x169 $x28)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x112 $x38)))
 (let (($x174 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x49)))))))
 (let (($x35 (and (and (and $x119 $x174) $x22) $x154)))
 (let (($x78 (= $x35 true)))
 (let (($x104 (and $x78 $x220)))
 (let (($x176 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x6 (and $x176 $x104)))
 (let (($x206 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x15 (and $x206 $x6)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x218 (and $x116 $x15)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x200 (and $x198 $x218)))
 (let (($x184 (forall ((input.ind-%var5109X (_ BitVec 32)) (input.ind-%var5111X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5109X input.ind-%var5111X)))
 (let (($x45 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5109X)))
 (=> (and $x45 $x85) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5109X input.ind-%var5111X) (_ bv0 32))))))
 ))
 (let (($x48 (forall ((input.ind-%var5109X (_ BitVec 32)) (input.ind-%var5110X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5109X)))
 (=> $x45 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5109X input.ind-%var5110X) false))))
 ))
 (let (($x170 (forall ((input.ind-%var5108X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5108X)))
 (= $x202 false)))
 ))
 (let (($x127 (and (and $x170 $x48) $x184)))
 (let (($x56 (and $x127 $x200)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x93 (and $x192 $x56)))
 (let (($x70 (forall ((input.ind-%var5121X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5121X)))
 (=> $x160 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5121X) (_ bv0 32)))))
 ))
 (let (($x212 (forall ((input.ind-%var5120X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5120X)))
 (= $x160 false)))
 ))
 (let (($x47 (and $x212 $x70)))
 (let (($x33 (and $x47 $x93)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x80 (and $x84 $x33)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x91 (and $x223 $x80)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x194 (and $x167 $x91)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x121 (and $x23 $x194)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x74 (and $x187 $x121)))
 (let (($x100 (=> $x74 $x126)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x115 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x115)))
 (let (($x52 (= ?x111 input.spec-%var-n-1)))
 (let (($x36 (= $x52 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x78 (concat ?x57 (concat ?x95 ?x141)))))
 (let (($x148 (= input.dst.llvm-%n ?x21)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x72)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x213)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x100 $x177)))
 (let (($x199 (and $x14 $x147)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x200 $x199)))
 (let (($x218 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x194 $x121)))))))
 (let (($x88 (and (and (and $x126 $x218) $x219) $x148)))
 (let (($x12 (= $x88 true)))
 (let (($x104 (= ?x21 input.dst.llvm-%n)))
 (let (($x6 (= $x104 true)))
 (let (($x211 (and $x6 $x12)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x164 (and $x18 $x211)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x61 (and $x28 $x164)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x97 (and $x169 $x61)))
 (let (($x221 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x62 (and $x221 $x97)))
 (let (($x207 (forall ((input.ind-%var5139X (_ BitVec 32)) (input.ind-%var5141X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5139X input.ind-%var5141X)))
 (let (($x157 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5139X)))
 (=> (and $x157 $x82) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5139X input.ind-%var5141X) (_ bv0 32))))))
 ))
 (let (($x214 (forall ((input.ind-%var5139X (_ BitVec 32)) (input.ind-%var5140X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5139X)))
 (=> $x157 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5139X input.ind-%var5140X) false))))
 ))
 (let (($x127 (forall ((input.ind-%var5138X (_ BitVec 32)) )(let (($x71 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5138X)))
 (= $x71 false)))
 ))
 (let (($x118 (and (and $x127 $x214) $x207)))
 (let (($x105 (and $x118 $x62)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x171 (and $x48 $x105)))
 (let (($x85 (forall ((input.ind-%var5151X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5151X)))
 (=> $x27 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5151X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var5150X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5150X)))
 (= $x27 false)))
 ))
 (let (($x189 (and $x137 $x85)))
 (let (($x50 (and $x189 $x171)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x195 (and $x84 $x50)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x128 (and $x223 $x195)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x152 (and $x167 $x128)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x16 (and $x23 $x152)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x19 (and $x187 $x16)))
 (let (($x113 (=> $x19 $x36)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x115 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x115)))
 (let (($x52 (= ?x111 input.spec-%var-n-1)))
 (let (($x36 (= $x52 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x78 (concat ?x57 (concat ?x95 ?x141)))))
 (let (($x148 (= input.dst.llvm-%n ?x21)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x72)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x213)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x100 $x177)))
 (let (($x199 (and $x14 $x147)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x200 $x199)))
 (let (($x218 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x194 $x121)))))))
 (let (($x88 (and (and (and $x126 $x218) $x219) $x148)))
 (let (($x12 (= $x88 true)))
 (let (($x104 (= ?x21 input.dst.llvm-%n)))
 (let (($x6 (= $x104 true)))
 (let (($x211 (and $x6 $x12)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x164 (and $x18 $x211)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x61 (and $x28 $x164)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x97 (and $x169 $x61)))
 (let (($x221 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x62 (and $x221 $x97)))
 (let (($x207 (forall ((input.ind-%var5139X (_ BitVec 32)) (input.ind-%var5141X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5139X input.ind-%var5141X)))
 (let (($x157 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5139X)))
 (=> (and $x157 $x82) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5139X input.ind-%var5141X) (_ bv0 32))))))
 ))
 (let (($x214 (forall ((input.ind-%var5139X (_ BitVec 32)) (input.ind-%var5140X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5139X)))
 (=> $x157 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5139X input.ind-%var5140X) false))))
 ))
 (let (($x127 (forall ((input.ind-%var5138X (_ BitVec 32)) )(let (($x71 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5138X)))
 (= $x71 false)))
 ))
 (let (($x118 (and (and $x127 $x214) $x207)))
 (let (($x105 (and $x118 $x62)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x171 (and $x48 $x105)))
 (let (($x85 (forall ((input.ind-%var5151X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5151X)))
 (=> $x27 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5151X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var5150X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5150X)))
 (= $x27 false)))
 ))
 (let (($x189 (and $x137 $x85)))
 (let (($x50 (and $x189 $x171)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x195 (and $x84 $x50)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x128 (and $x223 $x195)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x152 (and $x167 $x128)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x16 (and $x23 $x152)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x19 (and $x187 $x16)))
 (let (($x113 (=> $x19 $x36)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x140 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x188 (bvmul ?x140 (_ bv4294967295 32))))
 (let ((?x166 (bvneg ?x188)))
 (let (($x34 (= ?x166 ?x10)))
 (let (($x163 (= $x34 true)))
 (let ((?x132 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x132)))
 (let (($x76 (= ?x155 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x32 (= $x76 true)))
 (let (($x217 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x161 (= $x217 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x11)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x150 $x178)))
 (let (($x87 (and $x63 $x120)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x114 $x87)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x47)))))))
 (let (($x156 (and $x116 $x196)))
 (let (($x26 (= $x156 true)))
 (let ((?x130 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x130)))
 (let (($x25 (= ?x208 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x143 (= $x25 true)))
 (let (($x70 (= ?x208 input.dst.llvm-%n)))
 (let (($x89 (= $x70 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x153)))
 (let (($x212 (= ?x15 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x202 (= $x212 true)))
 (let (($x175 (and $x202 $x89)))
 (let (($x30 (and $x175 $x143)))
 (let (($x99 (and $x30 $x26)))
 (let (($x92 (and $x99 $x161)))
 (let (($x144 (and $x92 $x32)))
 (let (($x36 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x53 (and (not $x36) $x144)))
 (let (($x115 (forall ((input.ind-%var5161X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5161X)))
 (=> $x81 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5161X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var5160X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5160X)))
 (= $x81 false)))
 ))
 (let (($x111 (and $x195 $x115)))
 (let (($x125 (and $x111 $x53)))
 (let (($x62 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x102 (and $x62 $x125)))
 (let (($x164 (forall ((input.ind-%var5179X (_ BitVec 32)) (input.ind-%var5181X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5179X input.ind-%var5181X)))
 (let (($x154 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5179X)))
 (=> (and $x154 $x38) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5179X input.ind-%var5181X) (_ bv0 32))))))
 ))
 (let (($x199 (forall ((input.ind-%var5179X (_ BitVec 32)) (input.ind-%var5180X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5179X)))
 (=> $x154 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5179X input.ind-%var5180X) false))))
 ))
 (let (($x200 (forall ((input.ind-%var5178X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5178X)))
 (= $x69 false)))
 ))
 (let (($x97 (and (and $x200 $x199) $x164)))
 (let (($x75 (and $x97 $x102)))
 (let (($x158 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x215 (and $x158 $x75)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x39 (and $x41 $x215)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x209 (and $x121 $x39)))
 (let (($x194 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x145 (and $x194 $x209)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x20 (and $x33 $x145)))
 (let (($x6 (forall ((input.ind-%var5199X (_ BitVec 32)) (input.ind-%var5201X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5199X input.ind-%var5201X)))
 (let (($x154 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5199X)))
 (=> (and $x154 $x38) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5199X input.ind-%var5201X) (_ bv0 32))))))
 ))
 (let (($x78 (forall ((input.ind-%var5199X (_ BitVec 32)) (input.ind-%var5200X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5199X)))
 (=> $x154 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5199X input.ind-%var5200X) false))))
 ))
 (let (($x118 (forall ((input.ind-%var5198X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5198X)))
 (= $x69 false)))
 ))
 (let (($x93 (and (and $x118 $x78) $x6)))
 (let (($x66 (and $x93 $x20)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x8 (and $x214 $x66)))
 (let (($x82 (forall ((input.ind-%var5211X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5211X)))
 (=> $x81 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5211X) (_ bv0 32)))))
 ))
 (let (($x45 (forall ((input.ind-%var5210X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5210X)))
 (= $x81 false)))
 ))
 (let (($x43 (and $x45 $x82)))
 (let (($x90 (and $x43 $x8)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x165 (and $x84 $x90)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x40 (and $x223 $x165)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x122 (and $x167 $x40)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x54 (and $x23 $x122)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x191 (and $x187 $x54)))
 (let (($x190 (=> $x191 $x163)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x140 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x188 (bvmul ?x140 (_ bv4294967295 32))))
 (let ((?x166 (bvneg ?x188)))
 (let (($x34 (= ?x166 ?x10)))
 (let (($x163 (= $x34 true)))
 (let ((?x132 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x132)))
 (let (($x76 (= ?x155 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x32 (= $x76 true)))
 (let (($x217 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x161 (= $x217 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x11)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x150 $x178)))
 (let (($x87 (and $x63 $x120)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x114 $x87)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x47)))))))
 (let (($x156 (and $x116 $x196)))
 (let (($x26 (= $x156 true)))
 (let ((?x130 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x130)))
 (let (($x25 (= ?x208 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x143 (= $x25 true)))
 (let (($x70 (= ?x208 input.dst.llvm-%n)))
 (let (($x89 (= $x70 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x153)))
 (let (($x212 (= ?x15 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x202 (= $x212 true)))
 (let (($x175 (and $x202 $x89)))
 (let (($x30 (and $x175 $x143)))
 (let (($x99 (and $x30 $x26)))
 (let (($x92 (and $x99 $x161)))
 (let (($x144 (and $x92 $x32)))
 (let (($x36 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x53 (and (not $x36) $x144)))
 (let (($x115 (forall ((input.ind-%var5161X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5161X)))
 (=> $x81 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5161X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var5160X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5160X)))
 (= $x81 false)))
 ))
 (let (($x111 (and $x195 $x115)))
 (let (($x125 (and $x111 $x53)))
 (let (($x62 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x102 (and $x62 $x125)))
 (let (($x164 (forall ((input.ind-%var5179X (_ BitVec 32)) (input.ind-%var5181X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5179X input.ind-%var5181X)))
 (let (($x154 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5179X)))
 (=> (and $x154 $x38) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5179X input.ind-%var5181X) (_ bv0 32))))))
 ))
 (let (($x199 (forall ((input.ind-%var5179X (_ BitVec 32)) (input.ind-%var5180X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5179X)))
 (=> $x154 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5179X input.ind-%var5180X) false))))
 ))
 (let (($x200 (forall ((input.ind-%var5178X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5178X)))
 (= $x69 false)))
 ))
 (let (($x97 (and (and $x200 $x199) $x164)))
 (let (($x75 (and $x97 $x102)))
 (let (($x158 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x215 (and $x158 $x75)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x39 (and $x41 $x215)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x209 (and $x121 $x39)))
 (let (($x194 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x145 (and $x194 $x209)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x20 (and $x33 $x145)))
 (let (($x6 (forall ((input.ind-%var5199X (_ BitVec 32)) (input.ind-%var5201X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5199X input.ind-%var5201X)))
 (let (($x154 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5199X)))
 (=> (and $x154 $x38) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5199X input.ind-%var5201X) (_ bv0 32))))))
 ))
 (let (($x78 (forall ((input.ind-%var5199X (_ BitVec 32)) (input.ind-%var5200X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5199X)))
 (=> $x154 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5199X input.ind-%var5200X) false))))
 ))
 (let (($x118 (forall ((input.ind-%var5198X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5198X)))
 (= $x69 false)))
 ))
 (let (($x93 (and (and $x118 $x78) $x6)))
 (let (($x66 (and $x93 $x20)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x8 (and $x214 $x66)))
 (let (($x82 (forall ((input.ind-%var5211X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5211X)))
 (=> $x81 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5211X) (_ bv0 32)))))
 ))
 (let (($x45 (forall ((input.ind-%var5210X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5210X)))
 (= $x81 false)))
 ))
 (let (($x43 (and $x45 $x82)))
 (let (($x90 (and $x43 $x8)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x165 (and $x84 $x90)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x40 (and $x223 $x165)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x122 (and $x167 $x40)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x54 (and $x23 $x122)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x191 (and $x187 $x54)))
 (let (($x190 (=> $x191 $x163)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x57 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x168 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x189 (bvmul ?x168 (_ bv4294967295 32))))
 (let ((?x204 (bvneg ?x189)))
 (let (($x210 (= ?x204 ?x57)))
 (let (($x127 (= $x210 true)))
 (let ((?x218 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x218)))
 (let (($x219 (= ?x205 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x14 (= $x219 true)))
 (let ((?x197 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x197)))
 (let (($x100 (= ?x192 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x100 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (= $x152 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x22)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x198 $x71)))
 (let (($x16 (and $x37 $x141)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x90 $x16)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x140 $x188)))))))
 (let (($x171 (and $x51 $x105)))
 (let (($x50 (= $x171 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x53)))
 (let (($x39 (= ?x125 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x209 (= $x39 true)))
 (let (($x75 (= ?x125 input.dst.llvm-%n)))
 (let (($x215 (= $x75 true)))
 (let (($x145 (and $x215 $x209)))
 (let (($x19 (and $x145 $x50)))
 (let (($x180 (and $x19 $x129)))
 (let (($x126 (and $x180 $x213)))
 (let (($x72 (and $x126 $x14)))
 (let (($x32 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x12 (and (not $x32) $x72)))
 (let (($x132 (forall ((input.ind-%var5221X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5221X)))
 (=> $x45 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5221X) (_ bv0 32)))))
 ))
 (let (($x26 (forall ((input.ind-%var5220X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5220X)))
 (= $x45 false)))
 ))
 (let (($x155 (and $x26 $x132)))
 (let (($x177 (and $x155 $x12)))
 (let (($x120 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x147 (and $x120 $x177)))
 (let (($x178 (forall ((input.ind-%var5239X (_ BitVec 32)) (input.ind-%var5241X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5239X input.ind-%var5241X)))
 (let (($x61 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5239X)))
 (=> (and $x61 $x222) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5239X input.ind-%var5241X) (_ bv0 32))))))
 ))
 (let (($x170 (forall ((input.ind-%var5239X (_ BitVec 32)) (input.ind-%var5240X (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5239X)))
 (=> $x61 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5239X input.ind-%var5240X) false))))
 ))
 (let (($x203 (forall ((input.ind-%var5238X (_ BitVec 32)) )(let (($x21 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5238X)))
 (= $x21 false)))
 ))
 (let (($x11 (and (and $x203 $x170) $x178)))
 (let (($x201 (and $x11 $x147)))
 (let (($x172 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x221 (and $x172 $x201)))
 (let (($x30 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x112 (and $x30 $x221)))
 (let (($x175 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x174 (and $x175 $x112)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x24 (and $x70 $x174)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x162 (and $x208 $x24)))
 (let (($x9 (forall ((input.ind-%var5259X (_ BitVec 32)) (input.ind-%var5261X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5259X input.ind-%var5261X)))
 (let (($x61 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5259X)))
 (=> (and $x61 $x222) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5259X input.ind-%var5261X) (_ bv0 32))))))
 ))
 (let (($x97 (forall ((input.ind-%var5259X (_ BitVec 32)) (input.ind-%var5260X (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5259X)))
 (=> $x61 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5259X input.ind-%var5260X) false))))
 ))
 (let (($x7 (forall ((input.ind-%var5258X (_ BitVec 32)) )(let (($x21 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5258X)))
 (= $x21 false)))
 ))
 (let (($x202 (and (and $x7 $x97) $x9)))
 (let (($x55 (and $x202 $x162)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x148 (and $x56 $x55)))
 (let (($x86 (forall ((input.ind-%var5271X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5271X)))
 (=> $x45 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5271X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var5270X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5270X)))
 (= $x45 false)))
 ))
 (let (($x35 (and $x82 $x86)))
 (let (($x211 (and $x35 $x148)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x193 (and $x84 $x211)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x18 (and $x223 $x193)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x139 (and $x167 $x18)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x77 (and $x23 $x139)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x149 (and $x187 $x77)))
 (let (($x108 (=> $x149 $x127)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x57 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x168 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x189 (bvmul ?x168 (_ bv4294967295 32))))
 (let ((?x204 (bvneg ?x189)))
 (let (($x210 (= ?x204 ?x57)))
 (let (($x127 (= $x210 true)))
 (let ((?x218 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x218)))
 (let (($x219 (= ?x205 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x14 (= $x219 true)))
 (let ((?x197 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x197)))
 (let (($x100 (= ?x192 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x100 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (= $x152 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x22)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x198 $x71)))
 (let (($x16 (and $x37 $x141)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x90 $x16)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x140 $x188)))))))
 (let (($x171 (and $x51 $x105)))
 (let (($x50 (= $x171 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x53)))
 (let (($x39 (= ?x125 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x209 (= $x39 true)))
 (let (($x75 (= ?x125 input.dst.llvm-%n)))
 (let (($x215 (= $x75 true)))
 (let (($x145 (and $x215 $x209)))
 (let (($x19 (and $x145 $x50)))
 (let (($x180 (and $x19 $x129)))
 (let (($x126 (and $x180 $x213)))
 (let (($x72 (and $x126 $x14)))
 (let (($x32 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x12 (and (not $x32) $x72)))
 (let (($x132 (forall ((input.ind-%var5221X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5221X)))
 (=> $x45 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5221X) (_ bv0 32)))))
 ))
 (let (($x26 (forall ((input.ind-%var5220X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5220X)))
 (= $x45 false)))
 ))
 (let (($x155 (and $x26 $x132)))
 (let (($x177 (and $x155 $x12)))
 (let (($x120 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x147 (and $x120 $x177)))
 (let (($x178 (forall ((input.ind-%var5239X (_ BitVec 32)) (input.ind-%var5241X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5239X input.ind-%var5241X)))
 (let (($x61 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5239X)))
 (=> (and $x61 $x222) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5239X input.ind-%var5241X) (_ bv0 32))))))
 ))
 (let (($x170 (forall ((input.ind-%var5239X (_ BitVec 32)) (input.ind-%var5240X (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5239X)))
 (=> $x61 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5239X input.ind-%var5240X) false))))
 ))
 (let (($x203 (forall ((input.ind-%var5238X (_ BitVec 32)) )(let (($x21 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5238X)))
 (= $x21 false)))
 ))
 (let (($x11 (and (and $x203 $x170) $x178)))
 (let (($x201 (and $x11 $x147)))
 (let (($x172 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x221 (and $x172 $x201)))
 (let (($x30 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x112 (and $x30 $x221)))
 (let (($x175 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x174 (and $x175 $x112)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x24 (and $x70 $x174)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x162 (and $x208 $x24)))
 (let (($x9 (forall ((input.ind-%var5259X (_ BitVec 32)) (input.ind-%var5261X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5259X input.ind-%var5261X)))
 (let (($x61 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5259X)))
 (=> (and $x61 $x222) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5259X input.ind-%var5261X) (_ bv0 32))))))
 ))
 (let (($x97 (forall ((input.ind-%var5259X (_ BitVec 32)) (input.ind-%var5260X (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5259X)))
 (=> $x61 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5259X input.ind-%var5260X) false))))
 ))
 (let (($x7 (forall ((input.ind-%var5258X (_ BitVec 32)) )(let (($x21 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5258X)))
 (= $x21 false)))
 ))
 (let (($x202 (and (and $x7 $x97) $x9)))
 (let (($x55 (and $x202 $x162)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x148 (and $x56 $x55)))
 (let (($x86 (forall ((input.ind-%var5271X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5271X)))
 (=> $x45 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5271X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var5270X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5270X)))
 (= $x45 false)))
 ))
 (let (($x35 (and $x82 $x86)))
 (let (($x211 (and $x35 $x148)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x193 (and $x84 $x211)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x18 (and $x223 $x193)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x139 (and $x167 $x18)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x77 (and $x23 $x139)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x149 (and $x187 $x77)))
 (let (($x108 (=> $x149 $x127)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 139 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x158 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (not $x158)))
 (let (($x64 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x121 (not $x64)))
 (let (($x138 (or $x121 $x111)))
 (let (($x194 (= $x138 true)))
 (let ((?x206 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x206)))
 (let (($x146 (= ?x118 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x176 (= $x146 true)))
 (let ((?x87 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x196 (bvneg ?x87)))
 (let (($x92 (= ?x196 input.dst.llvm-%n)))
 (let (($x214 (= $x92 true)))
 (let (($x156 (= ?x196 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x161 (= $x156 true)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x66)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x210 $x169)))
 (let (($x207 (and $x20 $x48)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x24 $x207)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x139)))))))
 (let (($x41 (and $x57 $x104)))
 (let (($x36 (= $x41 true)))
 (let ((?x72 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x72)))
 (let (($x147 (= ?x12 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x201 (= $x147 true)))
 (let (($x217 (and $x201 $x36)))
 (let (($x43 (and $x217 $x161)))
 (let (($x27 (and $x43 $x214)))
 (let (($x131 (and $x27 $x176)))
 (let (($x218 (forall ((input.ind-%var5281X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5281X)))
 (=> $x82 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5281X) (_ bv0 32)))))
 ))
 (let (($x197 (forall ((input.ind-%var5280X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5280X)))
 (= $x82 false)))
 ))
 (let (($x205 (and $x197 $x218)))
 (let (($x159 (and $x205 $x131)))
 (let (($x152 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x116 (and $x152 $x159)))
 (let (($x50 (forall ((input.ind-%var5299X (_ BitVec 32)) (input.ind-%var5301X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5299X input.ind-%var5301X)))
 (let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5299X)))
 (=> (and $x63 $x143) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5299X input.ind-%var5301X) (_ bv0 32))))))
 ))
 (let (($x71 (forall ((input.ind-%var5299X (_ BitVec 32)) (input.ind-%var5300X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5299X)))
 (=> $x63 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5299X input.ind-%var5300X) false))))
 ))
 (let (($x163 (forall ((input.ind-%var5298X (_ BitVec 32)) )(let (($x13 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5298X)))
 (= $x13 false)))
 ))
 (let (($x85 (and (and $x163 $x71) $x50)))
 (let (($x65 (and $x85 $x116)))
 (let (($x188 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x49 (and $x188 $x65)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x150 (and $x54 $x49)))
 (let (($x122 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x83 (and $x122 $x150)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x47 (and $x40 $x83)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x119 (and $x145 $x47)))
 (let (($x75 (forall ((input.ind-%var5319X (_ BitVec 32)) (input.ind-%var5321X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5319X input.ind-%var5321X)))
 (let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5319X)))
 (=> (and $x63 $x143) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5319X input.ind-%var5321X) (_ bv0 32))))))
 ))
 (let (($x11 (forall ((input.ind-%var5319X (_ BitVec 32)) (input.ind-%var5320X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5319X)))
 (=> $x63 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5319X input.ind-%var5320X) false))))
 ))
 (let (($x130 (forall ((input.ind-%var5318X (_ BitVec 32)) )(let (($x13 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5318X)))
 (= $x13 false)))
 ))
 (let (($x39 (and (and $x130 $x11) $x75)))
 (let (($x33 (and $x39 $x119)))
 (let (($x212 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x91 (and $x212 $x33)))
 (let (($x199 (forall ((input.ind-%var5331X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5331X)))
 (=> $x82 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5331X) (_ bv0 32)))))
 ))
 (let (($x86 (forall ((input.ind-%var5330X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5330X)))
 (= $x82 false)))
 ))
 (let (($x164 (and $x86 $x199)))
 (let (($x220 (and $x164 $x91)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x95 (and $x84 $x220)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x6 (and $x223 $x95)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x62 (and $x167 $x6)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x5 (and $x23 $x62)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x114 (and $x187 $x5)))
 (let (($x200 (=> $x114 $x194)))
 (not $x200)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x158 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (not $x158)))
 (let (($x64 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x121 (not $x64)))
 (let (($x138 (or $x121 $x111)))
 (let (($x194 (= $x138 true)))
 (let ((?x206 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x206)))
 (let (($x146 (= ?x118 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x176 (= $x146 true)))
 (let ((?x87 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x196 (bvneg ?x87)))
 (let (($x92 (= ?x196 input.dst.llvm-%n)))
 (let (($x214 (= $x92 true)))
 (let (($x156 (= ?x196 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x161 (= $x156 true)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x66)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x210 $x169)))
 (let (($x207 (and $x20 $x48)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x24 $x207)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x139)))))))
 (let (($x41 (and $x57 $x104)))
 (let (($x36 (= $x41 true)))
 (let ((?x72 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x72)))
 (let (($x147 (= ?x12 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x201 (= $x147 true)))
 (let (($x217 (and $x201 $x36)))
 (let (($x43 (and $x217 $x161)))
 (let (($x27 (and $x43 $x214)))
 (let (($x131 (and $x27 $x176)))
 (let (($x218 (forall ((input.ind-%var5281X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5281X)))
 (=> $x82 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5281X) (_ bv0 32)))))
 ))
 (let (($x197 (forall ((input.ind-%var5280X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5280X)))
 (= $x82 false)))
 ))
 (let (($x205 (and $x197 $x218)))
 (let (($x159 (and $x205 $x131)))
 (let (($x152 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x116 (and $x152 $x159)))
 (let (($x50 (forall ((input.ind-%var5299X (_ BitVec 32)) (input.ind-%var5301X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5299X input.ind-%var5301X)))
 (let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5299X)))
 (=> (and $x63 $x143) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5299X input.ind-%var5301X) (_ bv0 32))))))
 ))
 (let (($x71 (forall ((input.ind-%var5299X (_ BitVec 32)) (input.ind-%var5300X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5299X)))
 (=> $x63 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5299X input.ind-%var5300X) false))))
 ))
 (let (($x163 (forall ((input.ind-%var5298X (_ BitVec 32)) )(let (($x13 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5298X)))
 (= $x13 false)))
 ))
 (let (($x85 (and (and $x163 $x71) $x50)))
 (let (($x65 (and $x85 $x116)))
 (let (($x188 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x49 (and $x188 $x65)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x150 (and $x54 $x49)))
 (let (($x122 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x83 (and $x122 $x150)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x47 (and $x40 $x83)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x119 (and $x145 $x47)))
 (let (($x75 (forall ((input.ind-%var5319X (_ BitVec 32)) (input.ind-%var5321X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5319X input.ind-%var5321X)))
 (let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5319X)))
 (=> (and $x63 $x143) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5319X input.ind-%var5321X) (_ bv0 32))))))
 ))
 (let (($x11 (forall ((input.ind-%var5319X (_ BitVec 32)) (input.ind-%var5320X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5319X)))
 (=> $x63 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5319X input.ind-%var5320X) false))))
 ))
 (let (($x130 (forall ((input.ind-%var5318X (_ BitVec 32)) )(let (($x13 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5318X)))
 (= $x13 false)))
 ))
 (let (($x39 (and (and $x130 $x11) $x75)))
 (let (($x33 (and $x39 $x119)))
 (let (($x212 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x91 (and $x212 $x33)))
 (let (($x199 (forall ((input.ind-%var5331X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5331X)))
 (=> $x82 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5331X) (_ bv0 32)))))
 ))
 (let (($x86 (forall ((input.ind-%var5330X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5330X)))
 (= $x82 false)))
 ))
 (let (($x164 (and $x86 $x199)))
 (let (($x220 (and $x164 $x91)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x95 (and $x84 $x220)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x6 (and $x223 $x95)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x62 (and $x167 $x6)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x5 (and $x23 $x62)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x114 (and $x187 $x5)))
 (let (($x200 (=> $x114 $x194)))
 (not $x200)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 134 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x78 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x26 (or $x203 $x78)))
 (let (($x132 (= $x26 true)))
 (let ((?x34 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x34)))
 (let (($x142 (= ?x37 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x16 (= $x142 true)))
 (let ((?x126 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x126)))
 (let (($x51 (= ?x56 input.dst.llvm-%n)))
 (let (($x8 (= $x51 true)))
 (let (($x186 (= ?x56 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x45 (= $x186 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x100)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x69 $x30)))
 (let (($x180 (and $x32 $x129)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x6 $x180)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x111)))))))
 (let (($x213 (and $x112 $x160)))
 (let (($x35 (= $x213 true)))
 (let ((?x150 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x150)))
 (let (($x119 (= ?x83 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x33 (= $x119 true)))
 (let (($x184 (and $x33 $x35)))
 (let (($x154 (and $x184 $x45)))
 (let (($x166 (and $x154 $x8)))
 (let (($x105 (and $x166 $x16)))
 (let (($x159 (forall ((input.ind-%var5341X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5341X)))
 (=> $x86 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5341X) (_ bv0 32)))))
 ))
 (let (($x206 (forall ((input.ind-%var5340X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5340X)))
 (= $x86 false)))
 ))
 (let (($x116 (and $x206 $x159)))
 (let (($x90 (and $x116 $x105)))
 (let (($x92 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x137 (and $x92 $x90)))
 (let (($x161 (forall ((input.ind-%var5359X (_ BitVec 32)) (input.ind-%var5361X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5359X input.ind-%var5361X)))
 (let (($x19 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5359X)))
 (=> (and $x19 $x140) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5359X input.ind-%var5361X) (_ bv0 32))))))
 ))
 (let (($x104 (forall ((input.ind-%var5359X (_ BitVec 32)) (input.ind-%var5360X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5359X)))
 (=> $x19 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5359X input.ind-%var5360X) false))))
 ))
 (let (($x127 (forall ((input.ind-%var5358X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5358X)))
 (= $x53 false)))
 ))
 (let (($x134 (and (and $x127 $x104) $x161)))
 (let (($x208 (and $x134 $x137)))
 (let (($x57 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x59 (and $x57 $x208)))
 (let (($x189 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x153 (and $x189 $x59)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x52 (and $x77 $x153)))
 (let (($x211 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x9 (and $x211 $x52)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x120 (and $x193 $x9)))
 (let (($x162 (forall ((input.ind-%var5379X (_ BitVec 32)) (input.ind-%var5381X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5379X input.ind-%var5381X)))
 (let (($x19 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5379X)))
 (=> (and $x19 $x140) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5379X input.ind-%var5381X) (_ bv0 32))))))
 ))
 (let (($x85 (forall ((input.ind-%var5379X (_ BitVec 32)) (input.ind-%var5380X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5379X)))
 (=> $x19 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5379X input.ind-%var5380X) false))))
 ))
 (let (($x209 (forall ((input.ind-%var5378X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5378X)))
 (= $x53 false)))
 ))
 (let (($x204 (and (and $x209 $x85) $x162)))
 (let (($x22 (and $x204 $x120)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x141 (and $x215 $x22)))
 (let (($x170 (forall ((input.ind-%var5391X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5391X)))
 (=> $x86 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5391X) (_ bv0 32)))))
 ))
 (let (($x199 (forall ((input.ind-%var5390X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5390X)))
 (= $x86 false)))
 ))
 (let (($x178 (and $x199 $x170)))
 (let (($x171 (and $x178 $x141)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x175 (and $x84 $x171)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x172 (and $x223 $x175)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x155 (and $x167 $x172)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x88 (and $x23 $x155)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x70 (and $x187 $x88)))
 (let (($x144 (=> $x70 $x132)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x78 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x26 (or $x203 $x78)))
 (let (($x132 (= $x26 true)))
 (let ((?x34 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x34)))
 (let (($x142 (= ?x37 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x16 (= $x142 true)))
 (let ((?x126 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x126)))
 (let (($x51 (= ?x56 input.dst.llvm-%n)))
 (let (($x8 (= $x51 true)))
 (let (($x186 (= ?x56 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x45 (= $x186 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x100)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x69 $x30)))
 (let (($x180 (and $x32 $x129)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x6 $x180)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x111)))))))
 (let (($x213 (and $x112 $x160)))
 (let (($x35 (= $x213 true)))
 (let ((?x150 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x150)))
 (let (($x119 (= ?x83 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x33 (= $x119 true)))
 (let (($x184 (and $x33 $x35)))
 (let (($x154 (and $x184 $x45)))
 (let (($x166 (and $x154 $x8)))
 (let (($x105 (and $x166 $x16)))
 (let (($x159 (forall ((input.ind-%var5341X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5341X)))
 (=> $x86 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5341X) (_ bv0 32)))))
 ))
 (let (($x206 (forall ((input.ind-%var5340X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5340X)))
 (= $x86 false)))
 ))
 (let (($x116 (and $x206 $x159)))
 (let (($x90 (and $x116 $x105)))
 (let (($x92 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x137 (and $x92 $x90)))
 (let (($x161 (forall ((input.ind-%var5359X (_ BitVec 32)) (input.ind-%var5361X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5359X input.ind-%var5361X)))
 (let (($x19 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5359X)))
 (=> (and $x19 $x140) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5359X input.ind-%var5361X) (_ bv0 32))))))
 ))
 (let (($x104 (forall ((input.ind-%var5359X (_ BitVec 32)) (input.ind-%var5360X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5359X)))
 (=> $x19 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5359X input.ind-%var5360X) false))))
 ))
 (let (($x127 (forall ((input.ind-%var5358X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5358X)))
 (= $x53 false)))
 ))
 (let (($x134 (and (and $x127 $x104) $x161)))
 (let (($x208 (and $x134 $x137)))
 (let (($x57 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x59 (and $x57 $x208)))
 (let (($x189 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x153 (and $x189 $x59)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x52 (and $x77 $x153)))
 (let (($x211 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x9 (and $x211 $x52)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x120 (and $x193 $x9)))
 (let (($x162 (forall ((input.ind-%var5379X (_ BitVec 32)) (input.ind-%var5381X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5379X input.ind-%var5381X)))
 (let (($x19 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5379X)))
 (=> (and $x19 $x140) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5379X input.ind-%var5381X) (_ bv0 32))))))
 ))
 (let (($x85 (forall ((input.ind-%var5379X (_ BitVec 32)) (input.ind-%var5380X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5379X)))
 (=> $x19 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5379X input.ind-%var5380X) false))))
 ))
 (let (($x209 (forall ((input.ind-%var5378X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5378X)))
 (= $x53 false)))
 ))
 (let (($x204 (and (and $x209 $x85) $x162)))
 (let (($x22 (and $x204 $x120)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x141 (and $x215 $x22)))
 (let (($x170 (forall ((input.ind-%var5391X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5391X)))
 (=> $x86 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5391X) (_ bv0 32)))))
 ))
 (let (($x199 (forall ((input.ind-%var5390X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5390X)))
 (= $x86 false)))
 ))
 (let (($x178 (and $x199 $x170)))
 (let (($x171 (and $x178 $x141)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x175 (and $x84 $x171)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x172 (and $x223 $x175)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x155 (and $x167 $x172)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x88 (and $x23 $x155)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x70 (and $x187 $x88)))
 (let (($x144 (=> $x70 $x132)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 132 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x89 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x195 (ite $x89 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x99 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x115 (ite $x99 ?x195 (_ bv0 32))))
 (let (($x113 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x115)))
 (let (($x28 (= $x113 true)))
 (let ((?x207 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x207)))
 (let (($x125 (= ?x145 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x125 true)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x24)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (and $x61 $x169)))
 (let (($x41 (and $x174 $x210)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x102 $x41)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x176)))))))
 (let (($x48 (and $x82 $x66)))
 (let (($x87 (= $x48 true)))
 (let ((?x70 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x70)))
 (let (($x144 (= ?x203 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x74 (= $x144 true)))
 (let (($x78 (= ?x203 input.dst.llvm-%n)))
 (let (($x26 (= $x78 true)))
 (let ((?x171 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x175 (bvneg ?x171)))
 (let (($x172 (= ?x175 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x155 (= $x172 true)))
 (let (($x9 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (not $x9)))
 (let (($x22 (= $x120 true)))
 (let (($x88 (and $x22 $x155)))
 (let (($x132 (and $x88 $x26)))
 (let (($x91 (and $x132 $x74)))
 (let (($x196 (and $x91 $x87)))
 (let (($x75 (and $x196 $x76)))
 (let (($x59 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x152 (and $x59 $x75)))
 (let (($x90 (forall ((input.ind-%var5461X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5461X)))
 (=> $x199 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5461X) (_ bv0 32)))))
 ))
 (let (($x34 (forall ((input.ind-%var5460X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5460X)))
 (= $x199 false)))
 ))
 (let (($x137 (and $x34 $x90)))
 (let (($x36 (and $x137 $x152)))
 (let (($x51 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x217 (and $x51 $x36)))
 (let (($x45 (forall ((input.ind-%var5479X (_ BitVec 32)) (input.ind-%var5481X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5479X input.ind-%var5481X)))
 (let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5479X)))
 (=> (and $x43 $x168) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5479X input.ind-%var5481X) (_ bv0 32))))))
 ))
 (let (($x160 (forall ((input.ind-%var5479X (_ BitVec 32)) (input.ind-%var5480X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5479X)))
 (=> $x43 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5479X input.ind-%var5480X) false))))
 ))
 (let (($x93 (forall ((input.ind-%var5478X (_ BitVec 32)) )(let (($x177 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5478X)))
 (= $x177 false)))
 ))
 (let (($x7 (and (and $x93 $x160) $x45)))
 (let (($x156 (and $x7 $x217)))
 (let (($x112 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x122 (and $x112 $x156)))
 (let (($x42 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x188 (and $x42 $x122)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x205 (and $x138 $x188)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x72 (and $x64 $x205)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x40 (and $x121 $x72)))
 (let (($x62 (forall ((input.ind-%var5499X (_ BitVec 32)) (input.ind-%var5501X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5499X input.ind-%var5501X)))
 (let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5499X)))
 (=> (and $x43 $x168) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5499X input.ind-%var5501X) (_ bv0 32))))))
 ))
 (let (($x134 (forall ((input.ind-%var5499X (_ BitVec 32)) (input.ind-%var5500X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5499X)))
 (=> $x43 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5499X input.ind-%var5500X) false))))
 ))
 (let (($x148 (forall ((input.ind-%var5498X (_ BitVec 32)) )(let (($x177 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5498X)))
 (= $x177 false)))
 ))
 (let (($x221 (and (and $x148 $x134) $x62)))
 (let (($x163 (and $x221 $x40)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x97 (and $x55 $x163)))
 (let (($x71 (forall ((input.ind-%var5511X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5511X)))
 (=> $x199 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5511X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var5510X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5510X)))
 (= $x199 false)))
 ))
 (let (($x50 (and $x170 $x71)))
 (let (($x197 (and $x50 $x97)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x218 (and $x84 $x197)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x12 (and $x223 $x218)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x25 (and $x167 $x12)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x192 (and $x23 $x25)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x190 (and $x187 $x192)))
 (let (($x128 (=> $x190 $x28)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x89 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x195 (ite $x89 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x99 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x115 (ite $x99 ?x195 (_ bv0 32))))
 (let (($x113 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x115)))
 (let (($x28 (= $x113 true)))
 (let ((?x207 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x207)))
 (let (($x125 (= ?x145 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x125 true)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x24)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (and $x61 $x169)))
 (let (($x41 (and $x174 $x210)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x102 $x41)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x176)))))))
 (let (($x48 (and $x82 $x66)))
 (let (($x87 (= $x48 true)))
 (let ((?x70 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x70)))
 (let (($x144 (= ?x203 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x74 (= $x144 true)))
 (let (($x78 (= ?x203 input.dst.llvm-%n)))
 (let (($x26 (= $x78 true)))
 (let ((?x171 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x175 (bvneg ?x171)))
 (let (($x172 (= ?x175 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x155 (= $x172 true)))
 (let (($x9 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (not $x9)))
 (let (($x22 (= $x120 true)))
 (let (($x88 (and $x22 $x155)))
 (let (($x132 (and $x88 $x26)))
 (let (($x91 (and $x132 $x74)))
 (let (($x196 (and $x91 $x87)))
 (let (($x75 (and $x196 $x76)))
 (let (($x59 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x152 (and $x59 $x75)))
 (let (($x90 (forall ((input.ind-%var5461X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5461X)))
 (=> $x199 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5461X) (_ bv0 32)))))
 ))
 (let (($x34 (forall ((input.ind-%var5460X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5460X)))
 (= $x199 false)))
 ))
 (let (($x137 (and $x34 $x90)))
 (let (($x36 (and $x137 $x152)))
 (let (($x51 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x217 (and $x51 $x36)))
 (let (($x45 (forall ((input.ind-%var5479X (_ BitVec 32)) (input.ind-%var5481X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5479X input.ind-%var5481X)))
 (let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5479X)))
 (=> (and $x43 $x168) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5479X input.ind-%var5481X) (_ bv0 32))))))
 ))
 (let (($x160 (forall ((input.ind-%var5479X (_ BitVec 32)) (input.ind-%var5480X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5479X)))
 (=> $x43 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5479X input.ind-%var5480X) false))))
 ))
 (let (($x93 (forall ((input.ind-%var5478X (_ BitVec 32)) )(let (($x177 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5478X)))
 (= $x177 false)))
 ))
 (let (($x7 (and (and $x93 $x160) $x45)))
 (let (($x156 (and $x7 $x217)))
 (let (($x112 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x122 (and $x112 $x156)))
 (let (($x42 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x188 (and $x42 $x122)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x205 (and $x138 $x188)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x72 (and $x64 $x205)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x40 (and $x121 $x72)))
 (let (($x62 (forall ((input.ind-%var5499X (_ BitVec 32)) (input.ind-%var5501X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5499X input.ind-%var5501X)))
 (let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5499X)))
 (=> (and $x43 $x168) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var5499X input.ind-%var5501X) (_ bv0 32))))))
 ))
 (let (($x134 (forall ((input.ind-%var5499X (_ BitVec 32)) (input.ind-%var5500X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5499X)))
 (=> $x43 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var5499X input.ind-%var5500X) false))))
 ))
 (let (($x148 (forall ((input.ind-%var5498X (_ BitVec 32)) )(let (($x177 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var5498X)))
 (= $x177 false)))
 ))
 (let (($x221 (and (and $x148 $x134) $x62)))
 (let (($x163 (and $x221 $x40)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x97 (and $x55 $x163)))
 (let (($x71 (forall ((input.ind-%var5511X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5511X)))
 (=> $x199 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var5511X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var5510X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var5510X)))
 (= $x199 false)))
 ))
 (let (($x50 (and $x170 $x71)))
 (let (($x197 (and $x50 $x97)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x218 (and $x84 $x197)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x12 (and $x223 $x218)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x25 (and $x167 $x12)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x192 (and $x23 $x25)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x190 (and $x187 $x192)))
 (let (($x128 (=> $x190 $x28)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791742/query
