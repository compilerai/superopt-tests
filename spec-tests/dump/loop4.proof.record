==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= ?x14 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x8 $x11)))
 (let (($x19 (and $x5 $x12)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= ?x14 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x8 $x11)))
 (let (($x19 (and $x5 $x12)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x281 (= true false)))
 (let (($x282 (= $x281 true)))
 (let ((?x254 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x256 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x264 (concat ?x263 (concat ?x260 (concat ?x256 ?x254)))))
 (let (($x265 (= ?x264 input.dst.llvm-%n)))
 (let (($x266 (= $x265 true)))
 (let (($x267 (= $x266 true)))
 (let (($x246 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x249 (= $x248 true)))
 (let ((?x238 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x238)))
 (let ((?x235 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x235)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x233 $x236)))
 (let (($x240 (and $x237 $x239)))
 (let (($x231 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x231 $x240)))
 (let (($x242 (= $x241 true)))
 (let (($x243 (= $x242 true)))
 (let (($x244 (= $x243 true)))
 (let (($x250 (and $x244 $x249)))
 (let (($x268 (and $x250 $x267)))
 (let (($x228 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x269 (and $x228 $x268)))
 (let (($x225 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x270 (and $x225 $x269)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x271 (and $x223 $x270)))
 (let (($x221 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x272 (and $x221 $x271)))
 (let (($x218 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x180 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x175 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x175 (_ bv1 32))))
 (=> (and $x199 $x180) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x203 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x38 (_ bv1 32))))
 (let ((?x175 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x175 (_ bv1 32))))
 (let (($x180 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x180 (= $x199 $x60))))))))
 ))
 (let (($x188 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x50 (= false false)))
 (let (($x180 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x175 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x175 (_ bv0 32))))
 (=> (and $x176 $x180) $x50))))))
 ))
 (let (($x182 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x38 (_ bv0 32))))
 (let ((?x175 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x175 (_ bv0 32))))
 (let (($x180 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x180 (= $x176 $x16))))))))
 ))
 (let (($x139 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x38 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x60))))
 ))
 (let (($x128 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x50 (= false false)))
 (let ((?x122 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (=> $x123 $x50)))))
 ))
 (let (($x125 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x38 (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (= $x123 $x16))))))
 ))
 (let (($x129 (and $x125 $x128)))
 (let (($x140 (and $x129 $x139)))
 (let (($x183 (and $x140 $x182)))
 (let (($x189 (and $x183 $x188)))
 (let (($x204 (and $x189 $x203)))
 (let (($x219 (and $x204 $x218)))
 (let (($x273 (and $x219 $x272)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x274 (and $x79 $x273)))
 (let (($x76 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x41 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x41 (_ bv1 32))))
 (=> $x63 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x65 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x38 (_ bv1 32))))
 (let ((?x41 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x41 (_ bv1 32))))
 (= $x63 $x60))))))
 ))
 (let (($x53 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x50 (= false false)))
 (let ((?x41 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x41 (_ bv0 32))))
 (=> $x31 $x50)))))
 ))
 (let (($x49 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x38 (_ bv0 32))))
 (let ((?x41 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x41 (_ bv0 32))))
 (= $x31 $x16))))))
 ))
 (let (($x54 (and $x49 $x53)))
 (let (($x66 (and $x54 $x65)))
 (let (($x77 (and $x66 $x76)))
 (let (($x275 (and $x77 $x274)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x276 (and $x47 $x275)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x277 (and $x7 $x276)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x278 (and $x45 $x277)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x279 (and $x5 $x278)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x280 (and $x19 $x279)))
 (let (($x283 (=> $x280 $x282)))
 (not $x283)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x281 (= true false)))
 (let (($x282 (= $x281 true)))
 (let ((?x254 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x256 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x264 (concat ?x263 (concat ?x260 (concat ?x256 ?x254)))))
 (let (($x265 (= ?x264 input.dst.llvm-%n)))
 (let (($x266 (= $x265 true)))
 (let (($x267 (= $x266 true)))
 (let (($x246 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x249 (= $x248 true)))
 (let ((?x238 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x238)))
 (let ((?x235 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x235)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x233 $x236)))
 (let (($x240 (and $x237 $x239)))
 (let (($x231 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x231 $x240)))
 (let (($x242 (= $x241 true)))
 (let (($x243 (= $x242 true)))
 (let (($x244 (= $x243 true)))
 (let (($x250 (and $x244 $x249)))
 (let (($x268 (and $x250 $x267)))
 (let (($x228 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x269 (and $x228 $x268)))
 (let (($x225 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x270 (and $x225 $x269)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x271 (and $x223 $x270)))
 (let (($x221 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x272 (and $x221 $x271)))
 (let (($x218 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x180 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x175 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x175 (_ bv1 32))))
 (=> (and $x199 $x180) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x203 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x38 (_ bv1 32))))
 (let ((?x175 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x175 (_ bv1 32))))
 (let (($x180 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x180 (= $x199 $x60))))))))
 ))
 (let (($x188 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x50 (= false false)))
 (let (($x180 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x175 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x175 (_ bv0 32))))
 (=> (and $x176 $x180) $x50))))))
 ))
 (let (($x182 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x38 (_ bv0 32))))
 (let ((?x175 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x175 (_ bv0 32))))
 (let (($x180 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x180 (= $x176 $x16))))))))
 ))
 (let (($x139 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x38 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x60))))
 ))
 (let (($x128 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x50 (= false false)))
 (let ((?x122 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (=> $x123 $x50)))))
 ))
 (let (($x125 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x38 (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (= $x123 $x16))))))
 ))
 (let (($x129 (and $x125 $x128)))
 (let (($x140 (and $x129 $x139)))
 (let (($x183 (and $x140 $x182)))
 (let (($x189 (and $x183 $x188)))
 (let (($x204 (and $x189 $x203)))
 (let (($x219 (and $x204 $x218)))
 (let (($x273 (and $x219 $x272)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x274 (and $x79 $x273)))
 (let (($x76 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x41 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x41 (_ bv1 32))))
 (=> $x63 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x65 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x38 (_ bv1 32))))
 (let ((?x41 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x41 (_ bv1 32))))
 (= $x63 $x60))))))
 ))
 (let (($x53 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x50 (= false false)))
 (let ((?x41 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x41 (_ bv0 32))))
 (=> $x31 $x50)))))
 ))
 (let (($x49 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x38 (_ bv0 32))))
 (let ((?x41 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x41 (_ bv0 32))))
 (= $x31 $x16))))))
 ))
 (let (($x54 (and $x49 $x53)))
 (let (($x66 (and $x54 $x65)))
 (let (($x77 (and $x66 $x76)))
 (let (($x275 (and $x77 $x274)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x276 (and $x47 $x275)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x277 (and $x7 $x276)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x278 (and $x45 $x277)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x279 (and $x5 $x278)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x280 (and $x19 $x279)))
 (let (($x283 (=> $x280 $x282)))
 (not $x283)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe5406250)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe5406253)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe5406250)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x196 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x196)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x190 $x195)))
 (let (($x200 (and $x192 $x193)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x168 $x200)))
 (let (($x61 (= $x59 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x206 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x30 (concat ?x212 (concat ?x209 ?x206)))))
 (let (($x22 (= input.dst.llvm-%n ?x46)))
 (let (($x20 (and (and (and $x168 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x200) $x22)))
 (let (($x10 (= $x20 true)))
 (let (($x18 (= $x10 true)))
 (let (($x25 (= $x18 true)))
 (let (($x171 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x15 (and $x171 $x25)))
 (let (($x164 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x6 (and $x164 $x15)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x8 (and $x167 $x6)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x13 (and $x156 $x8)))
 (let (($x153 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x99 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x89 (_ bv1 32))))
 (=> (and $x134 $x99) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x142 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x129 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x129 (_ bv1 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x89 (_ bv1 32))))
 (let (($x99 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x99 (= $x134 $x177))))))))
 ))
 (let (($x117 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x79 (= false false)))
 (let (($x99 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x89 (_ bv0 32))))
 (=> (and $x90 $x99) $x79))))))
 ))
 (let (($x95 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x129 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x129 (_ bv0 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x89 (_ bv0 32))))
 (let (($x99 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x99 (= $x90 $x66))))))))
 ))
 (let (($x282 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x129 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x129 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x177))))
 ))
 (let (($x271 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x79 (= false false)))
 (let ((?x265 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x265 (_ bv0 32))))
 (=> $x266 $x79)))))
 ))
 (let (($x268 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x129 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x129 (_ bv0 32))))
 (let ((?x265 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x265 (_ bv0 32))))
 (= $x266 $x66))))))
 ))
 (let (($x272 (and $x268 $x271)))
 (let (($x283 (and $x272 $x282)))
 (let (($x93 (and $x283 $x95)))
 (let (($x114 (and $x93 $x117)))
 (let (($x146 (and $x114 $x142)))
 (let (($x160 (and $x146 $x153)))
 (let (($x17 (and $x160 $x13)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x23 (and $x220 $x17)))
 (let (($x217 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x75 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x75 (_ bv1 32))))
 (=> $x183 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x187 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x129 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x129 (_ bv1 32))))
 (let ((?x75 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x75 (_ bv1 32))))
 (= $x183 $x177))))))
 ))
 (let (($x41 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x79 (= false false)))
 (let ((?x75 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x75 (_ bv0 32))))
 (=> $x28 $x79)))))
 ))
 (let (($x139 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x129 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x129 (_ bv0 32))))
 (let ((?x75 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x75 (_ bv0 32))))
 (= $x28 $x66))))))
 ))
 (let (($x54 (and $x139 $x41)))
 (let (($x188 (and $x54 $x187)))
 (let (($x218 (and $x188 $x217)))
 (let (($x34 (and $x218 $x23)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x51 (and $x44 $x34)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x55 (and $x65 $x51)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x56 (and $x52 $x55)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x57 (and $x9 $x56)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x58 (and $x21 $x57)))
 (let (($x67 (=> $x58 $x62)))
 (not $x67))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x196 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x196)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x190 $x195)))
 (let (($x200 (and $x192 $x193)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x168 $x200)))
 (let (($x61 (= $x59 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x206 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x30 (concat ?x212 (concat ?x209 ?x206)))))
 (let (($x22 (= input.dst.llvm-%n ?x46)))
 (let (($x20 (and (and (and $x168 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x200) $x22)))
 (let (($x10 (= $x20 true)))
 (let (($x18 (= $x10 true)))
 (let (($x25 (= $x18 true)))
 (let (($x171 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x15 (and $x171 $x25)))
 (let (($x164 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x6 (and $x164 $x15)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x8 (and $x167 $x6)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x13 (and $x156 $x8)))
 (let (($x153 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x99 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x89 (_ bv1 32))))
 (=> (and $x134 $x99) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x142 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x129 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x129 (_ bv1 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x89 (_ bv1 32))))
 (let (($x99 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x99 (= $x134 $x177))))))))
 ))
 (let (($x117 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x79 (= false false)))
 (let (($x99 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x89 (_ bv0 32))))
 (=> (and $x90 $x99) $x79))))))
 ))
 (let (($x95 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x129 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x129 (_ bv0 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x89 (_ bv0 32))))
 (let (($x99 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x99 (= $x90 $x66))))))))
 ))
 (let (($x282 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x129 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x129 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x177))))
 ))
 (let (($x271 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x79 (= false false)))
 (let ((?x265 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x265 (_ bv0 32))))
 (=> $x266 $x79)))))
 ))
 (let (($x268 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x129 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x129 (_ bv0 32))))
 (let ((?x265 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x265 (_ bv0 32))))
 (= $x266 $x66))))))
 ))
 (let (($x272 (and $x268 $x271)))
 (let (($x283 (and $x272 $x282)))
 (let (($x93 (and $x283 $x95)))
 (let (($x114 (and $x93 $x117)))
 (let (($x146 (and $x114 $x142)))
 (let (($x160 (and $x146 $x153)))
 (let (($x17 (and $x160 $x13)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x23 (and $x220 $x17)))
 (let (($x217 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x75 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x75 (_ bv1 32))))
 (=> $x183 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x187 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x129 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x129 (_ bv1 32))))
 (let ((?x75 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x75 (_ bv1 32))))
 (= $x183 $x177))))))
 ))
 (let (($x41 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x79 (= false false)))
 (let ((?x75 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x75 (_ bv0 32))))
 (=> $x28 $x79)))))
 ))
 (let (($x139 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x129 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x129 (_ bv0 32))))
 (let ((?x75 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x75 (_ bv0 32))))
 (= $x28 $x66))))))
 ))
 (let (($x54 (and $x139 $x41)))
 (let (($x188 (and $x54 $x187)))
 (let (($x218 (and $x188 $x217)))
 (let (($x34 (and $x218 $x23)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x51 (and $x44 $x34)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x55 (and $x65 $x51)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x56 (and $x52 $x55)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x57 (and $x9 $x56)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x58 (and $x21 $x57)))
 (let (($x67 (=> $x58 $x62)))
 (not $x67))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x199 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x201 (= $x199 true)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x49 (concat ?x178 (concat ?x152 ?x151)))))
 (let (($x64 (= input.dst.llvm-%n ?x50)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x133)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x119 $x135)))
 (let (($x147 (and $x132 $x144)))
 (let (($x126 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and (and (and $x115 $x126) $x147) $x64)))
 (let (($x36 (= $x74 true)))
 (let (($x127 (= $x36 true)))
 (let (($x78 (= $x127 true)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x48 (and $x35 $x78)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x77 (and $x141 $x48)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x123 (and $x107 $x77)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x124 (and $x109 $x123)))
 (let (($x111 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x237 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x238 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x238 (_ bv1 32))))
 (=> (and $x252 $x237) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x87 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x216 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x216 (_ bv1 32))))
 (let ((?x238 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x238 (_ bv1 32))))
 (let (($x237 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x237 (= $x252 $x94))))))))
 ))
 (let (($x257 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x281 (= false false)))
 (let (($x237 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x238 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (= ?x238 (_ bv0 32))))
 (=> (and $x240 $x237) $x281))))))
 ))
 (let (($x263 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x216 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x216 (_ bv0 32))))
 (let ((?x238 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (= ?x238 (_ bv0 32))))
 (let (($x237 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x237 (= $x240 $x219))))))))
 ))
 (let (($x205 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x216 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x216 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x94))))
 ))
 (let (($x51 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x281 (= false false)))
 (let ((?x6 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x6 (_ bv0 32))))
 (=> $x8 $x281)))))
 ))
 (let (($x17 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x216 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x216 (_ bv0 32))))
 (let ((?x6 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x6 (_ bv0 32))))
 (= $x8 $x219))))))
 ))
 (let (($x55 (and $x17 $x51)))
 (let (($x7 (and $x55 $x205)))
 (let (($x255 (and $x7 $x263)))
 (let (($x261 (and $x255 $x257)))
 (let (($x100 (and $x261 $x87)))
 (let (($x40 (and $x100 $x111)))
 (let (($x179 (and $x40 $x124)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x180 (and $x161 $x179)))
 (let (($x159 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x270 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x270 (_ bv1 32))))
 (=> $x93 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x116 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x216 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x216 (_ bv1 32))))
 (let ((?x270 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x270 (_ bv1 32))))
 (= $x93 $x94))))))
 ))
 (let (($x11 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x281 (= false false)))
 (let ((?x270 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x270 (_ bv0 32))))
 (=> $x271 $x281)))))
 ))
 (let (($x280 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x216 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x216 (_ bv0 32))))
 (let ((?x270 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x270 (_ bv0 32))))
 (= $x271 $x219))))))
 ))
 (let (($x98 (and $x280 $x11)))
 (let (($x117 (and $x98 $x116)))
 (let (($x153 (and $x117 $x159)))
 (let (($x174 (and $x153 $x180)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x175 (and $x44 $x174)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x176 (and $x65 $x175)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x181 (and $x52 $x176)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x182 (and $x9 $x181)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x189 (and $x21 $x182)))
 (let (($x202 (=> $x189 $x201)))
 (not $x202))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x199 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x201 (= $x199 true)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x49 (concat ?x178 (concat ?x152 ?x151)))))
 (let (($x64 (= input.dst.llvm-%n ?x50)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x133)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x119 $x135)))
 (let (($x147 (and $x132 $x144)))
 (let (($x126 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and (and (and $x115 $x126) $x147) $x64)))
 (let (($x36 (= $x74 true)))
 (let (($x127 (= $x36 true)))
 (let (($x78 (= $x127 true)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x48 (and $x35 $x78)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x77 (and $x141 $x48)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x123 (and $x107 $x77)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x124 (and $x109 $x123)))
 (let (($x111 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x237 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x238 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x238 (_ bv1 32))))
 (=> (and $x252 $x237) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x87 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x216 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x216 (_ bv1 32))))
 (let ((?x238 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x238 (_ bv1 32))))
 (let (($x237 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x237 (= $x252 $x94))))))))
 ))
 (let (($x257 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x281 (= false false)))
 (let (($x237 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x238 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (= ?x238 (_ bv0 32))))
 (=> (and $x240 $x237) $x281))))))
 ))
 (let (($x263 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x216 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x216 (_ bv0 32))))
 (let ((?x238 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (= ?x238 (_ bv0 32))))
 (let (($x237 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x237 (= $x240 $x219))))))))
 ))
 (let (($x205 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x216 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x216 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x94))))
 ))
 (let (($x51 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x281 (= false false)))
 (let ((?x6 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x6 (_ bv0 32))))
 (=> $x8 $x281)))))
 ))
 (let (($x17 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x216 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x216 (_ bv0 32))))
 (let ((?x6 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x6 (_ bv0 32))))
 (= $x8 $x219))))))
 ))
 (let (($x55 (and $x17 $x51)))
 (let (($x7 (and $x55 $x205)))
 (let (($x255 (and $x7 $x263)))
 (let (($x261 (and $x255 $x257)))
 (let (($x100 (and $x261 $x87)))
 (let (($x40 (and $x100 $x111)))
 (let (($x179 (and $x40 $x124)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x180 (and $x161 $x179)))
 (let (($x159 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x270 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x270 (_ bv1 32))))
 (=> $x93 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x116 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x216 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x216 (_ bv1 32))))
 (let ((?x270 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x270 (_ bv1 32))))
 (= $x93 $x94))))))
 ))
 (let (($x11 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x281 (= false false)))
 (let ((?x270 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x270 (_ bv0 32))))
 (=> $x271 $x281)))))
 ))
 (let (($x280 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x216 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x216 (_ bv0 32))))
 (let ((?x270 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x270 (_ bv0 32))))
 (= $x271 $x219))))))
 ))
 (let (($x98 (and $x280 $x11)))
 (let (($x117 (and $x98 $x116)))
 (let (($x153 (and $x117 $x159)))
 (let (($x174 (and $x153 $x180)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x175 (and $x44 $x174)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x176 (and $x65 $x175)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x181 (and $x52 $x176)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x182 (and $x9 $x181)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x189 (and $x21 $x182)))
 (let (($x202 (=> $x189 $x201)))
 (not $x202))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffeffffc)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffefffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffeffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x143)))
 (let (($x146 (= ?x142 input.spec-%var-n-1)))
 (let (($x204 (= $x146 true)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x41 (concat ?x137 (concat ?x104 ?x39)))))
 (let (($x183 (= input.dst.llvm-%n ?x54)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x81)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x279 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x278 $x279)))
 (let (($x85 (and $x253 $x82)))
 (let (($x277 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x273 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and (and (and $x273 $x277) $x85) $x183)))
 (let (($x218 (= $x215 true)))
 (let (($x220 (= $x218 true)))
 (let (($x264 (= $x220 true)))
 (let (($x256 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x265 (and $x256 $x264)))
 (let (($x235 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x266 (and $x235 $x265)))
 (let (($x230 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x282 (and $x230 $x266)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x97 (and $x60 $x282)))
 (let (($x221 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x207 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x192 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (bvuge ?x192 (_ bv1 32))))
 (=> (and $x224 $x207) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x245 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x158 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x158 (_ bv1 32))))
 (let ((?x192 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (bvuge ?x192 (_ bv1 32))))
 (let (($x207 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x207 (= $x224 $x233))))))))
 ))
 (let (($x25 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x198 (= false false)))
 (let (($x207 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x192 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (= ?x192 (_ bv0 32))))
 (=> (and $x184 $x207) $x198))))))
 ))
 (let (($x22 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x158 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x158 (_ bv0 32))))
 (let ((?x192 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (= ?x192 (_ bv0 32))))
 (let (($x207 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x207 (= $x184 $x160))))))))
 ))
 (let (($x16 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x158 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x158 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x233))))
 ))
 (let (($x175 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x198 (= false false)))
 (let ((?x77 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x77 (_ bv0 32))))
 (=> $x123 $x198)))))
 ))
 (let (($x179 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x158 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x158 (_ bv0 32))))
 (let ((?x77 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x77 (_ bv0 32))))
 (= $x123 $x160))))))
 ))
 (let (($x176 (and $x179 $x175)))
 (let (($x75 (and $x176 $x16)))
 (let (($x20 (and $x75 $x22)))
 (let (($x23 (and $x20 $x25)))
 (let (($x226 (and $x23 $x245)))
 (let (($x121 (and $x226 $x221)))
 (let (($x99 (and $x121 $x97)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x88 (and $x108 $x99)))
 (let (($x101 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x34 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x34 (_ bv1 32))))
 (=> $x255 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x254 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x158 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x158 (_ bv1 32))))
 (let ((?x34 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x34 (_ bv1 32))))
 (= $x255 $x233))))))
 ))
 (let (($x229 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x198 (= false false)))
 (let ((?x34 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x34 (_ bv0 32))))
 (=> $x51 $x198)))))
 ))
 (let (($x68 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x158 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x158 (_ bv0 32))))
 (let ((?x34 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x34 (_ bv0 32))))
 (= $x51 $x160))))))
 ))
 (let (($x236 (and $x68 $x229)))
 (let (($x257 (and $x236 $x254)))
 (let (($x111 (and $x257 $x101)))
 (let (($x89 (and $x111 $x88)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x90 (and $x44 $x89)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x92 (and $x65 $x90)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x95 (and $x52 $x92)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x114 (and $x32 $x95)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x134 (and $x37 $x114)))
 (let (($x69 (=> $x134 $x204)))
 (not $x69))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x143)))
 (let (($x146 (= ?x142 input.spec-%var-n-1)))
 (let (($x204 (= $x146 true)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x41 (concat ?x137 (concat ?x104 ?x39)))))
 (let (($x183 (= input.dst.llvm-%n ?x54)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x81)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x279 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x278 $x279)))
 (let (($x85 (and $x253 $x82)))
 (let (($x277 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x273 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and (and (and $x273 $x277) $x85) $x183)))
 (let (($x218 (= $x215 true)))
 (let (($x220 (= $x218 true)))
 (let (($x264 (= $x220 true)))
 (let (($x256 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x265 (and $x256 $x264)))
 (let (($x235 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x266 (and $x235 $x265)))
 (let (($x230 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x282 (and $x230 $x266)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x97 (and $x60 $x282)))
 (let (($x221 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x207 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x192 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (bvuge ?x192 (_ bv1 32))))
 (=> (and $x224 $x207) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x245 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x158 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x158 (_ bv1 32))))
 (let ((?x192 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (bvuge ?x192 (_ bv1 32))))
 (let (($x207 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x207 (= $x224 $x233))))))))
 ))
 (let (($x25 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x198 (= false false)))
 (let (($x207 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x192 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (= ?x192 (_ bv0 32))))
 (=> (and $x184 $x207) $x198))))))
 ))
 (let (($x22 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x158 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x158 (_ bv0 32))))
 (let ((?x192 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (= ?x192 (_ bv0 32))))
 (let (($x207 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x207 (= $x184 $x160))))))))
 ))
 (let (($x16 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x158 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x158 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x233))))
 ))
 (let (($x175 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x198 (= false false)))
 (let ((?x77 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x77 (_ bv0 32))))
 (=> $x123 $x198)))))
 ))
 (let (($x179 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x158 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x158 (_ bv0 32))))
 (let ((?x77 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x77 (_ bv0 32))))
 (= $x123 $x160))))))
 ))
 (let (($x176 (and $x179 $x175)))
 (let (($x75 (and $x176 $x16)))
 (let (($x20 (and $x75 $x22)))
 (let (($x23 (and $x20 $x25)))
 (let (($x226 (and $x23 $x245)))
 (let (($x121 (and $x226 $x221)))
 (let (($x99 (and $x121 $x97)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x88 (and $x108 $x99)))
 (let (($x101 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x34 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x34 (_ bv1 32))))
 (=> $x255 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x254 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x158 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x158 (_ bv1 32))))
 (let ((?x34 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x34 (_ bv1 32))))
 (= $x255 $x233))))))
 ))
 (let (($x229 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x198 (= false false)))
 (let ((?x34 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x34 (_ bv0 32))))
 (=> $x51 $x198)))))
 ))
 (let (($x68 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x158 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x158 (_ bv0 32))))
 (let ((?x34 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x34 (_ bv0 32))))
 (= $x51 $x160))))))
 ))
 (let (($x236 (and $x68 $x229)))
 (let (($x257 (and $x236 $x254)))
 (let (($x111 (and $x257 $x101)))
 (let (($x89 (and $x111 $x88)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x90 (and $x44 $x89)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x92 (and $x65 $x90)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x95 (and $x52 $x92)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x114 (and $x32 $x95)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x134 (and $x37 $x114)))
 (let (($x69 (=> $x134 $x204)))
 (not $x69))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x261 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x252 (bvneg ?x261)))
 (let (($x43 (= ?x252 input.dst.llvm-%n)))
 (let (($x14 (= $x43 true)))
 (let ((?x223 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x280 (concat ?x272 (concat ?x267 (concat ?x248 ?x223)))))
 (let (($x283 (= input.dst.llvm-%n ?x280)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x222)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x61 $x67)))
 (let (($x170 (and $x59 $x138)))
 (let (($x56 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x213 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and (and (and $x213 $x56) $x170) $x283)))
 (let (($x94 (= $x93 true)))
 (let (($x159 (= $x94 true)))
 (let (($x150 (= $x159 true)))
 (let (($x195 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x153 (and $x195 $x150)))
 (let (($x186 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x161 (and $x186 $x153)))
 (let (($x188 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x15 (and $x188 $x161)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x6 (and $x125 $x15)))
 (let (($x209 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x130 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x130 (_ bv1 32))))
 (=> (and $x203 $x119) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x167 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x106 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x106 (_ bv1 32))))
 (let ((?x130 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x130 (_ bv1 32))))
 (let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x119 (= $x203 $x190))))))))
 ))
 (let (($x50 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x154 (= false false)))
 (let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x130 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x130 (_ bv0 32))))
 (=> (and $x135 $x119) $x154))))))
 ))
 (let (($x131 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x106 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x106 (_ bv0 32))))
 (let ((?x130 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x130 (_ bv0 32))))
 (let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x119 (= $x135 $x40))))))))
 ))
 (let (($x70 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x106 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x106 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x190))))
 ))
 (let (($x90 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x154 (= false false)))
 (let ((?x266 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x266 (_ bv0 32))))
 (=> $x282 $x154)))))
 ))
 (let (($x99 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x106 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x106 (_ bv0 32))))
 (let ((?x266 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x266 (_ bv0 32))))
 (= $x282 $x40))))))
 ))
 (let (($x92 (and $x99 $x90)))
 (let (($x84 (and $x92 $x70)))
 (let (($x157 (and $x84 $x131)))
 (let (($x36 (and $x157 $x50)))
 (let (($x165 (and $x36 $x167)))
 (let (($x30 (and $x165 $x209)))
 (let (($x8 (and $x30 $x6)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x205 (and $x63 $x8)))
 (let (($x122 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x174 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x174 (_ bv1 32))))
 (=> $x20 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x18 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x106 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x106 (_ bv1 32))))
 (let ((?x174 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x174 (_ bv1 32))))
 (= $x20 $x190))))))
 ))
 (let (($x173 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x154 (= false false)))
 (let ((?x174 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (= ?x174 (_ bv0 32))))
 (=> $x175 $x154)))))
 ))
 (let (($x148 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x106 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x106 (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (= ?x174 (_ bv0 32))))
 (= $x175 $x40))))))
 ))
 (let (($x24 (and $x148 $x173)))
 (let (($x25 (and $x24 $x18)))
 (let (($x221 (and $x25 $x122)))
 (let (($x234 (and $x221 $x205)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x237 (and $x44 $x234)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x239 (and $x65 $x237)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x238 (and $x52 $x239)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x240 (and $x32 $x238)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x258 (and $x37 $x240)))
 (let (($x87 (=> $x258 $x14)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x261 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x252 (bvneg ?x261)))
 (let (($x43 (= ?x252 input.dst.llvm-%n)))
 (let (($x14 (= $x43 true)))
 (let ((?x223 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x280 (concat ?x272 (concat ?x267 (concat ?x248 ?x223)))))
 (let (($x283 (= input.dst.llvm-%n ?x280)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x222)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x61 $x67)))
 (let (($x170 (and $x59 $x138)))
 (let (($x56 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x213 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and (and (and $x213 $x56) $x170) $x283)))
 (let (($x94 (= $x93 true)))
 (let (($x159 (= $x94 true)))
 (let (($x150 (= $x159 true)))
 (let (($x195 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x153 (and $x195 $x150)))
 (let (($x186 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x161 (and $x186 $x153)))
 (let (($x188 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x15 (and $x188 $x161)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x6 (and $x125 $x15)))
 (let (($x209 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x130 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x130 (_ bv1 32))))
 (=> (and $x203 $x119) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x167 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x106 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x106 (_ bv1 32))))
 (let ((?x130 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x130 (_ bv1 32))))
 (let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x119 (= $x203 $x190))))))))
 ))
 (let (($x50 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x154 (= false false)))
 (let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x130 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x130 (_ bv0 32))))
 (=> (and $x135 $x119) $x154))))))
 ))
 (let (($x131 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x106 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x106 (_ bv0 32))))
 (let ((?x130 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x130 (_ bv0 32))))
 (let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x119 (= $x135 $x40))))))))
 ))
 (let (($x70 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x106 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x106 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x190))))
 ))
 (let (($x90 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x154 (= false false)))
 (let ((?x266 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x266 (_ bv0 32))))
 (=> $x282 $x154)))))
 ))
 (let (($x99 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x106 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x106 (_ bv0 32))))
 (let ((?x266 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x266 (_ bv0 32))))
 (= $x282 $x40))))))
 ))
 (let (($x92 (and $x99 $x90)))
 (let (($x84 (and $x92 $x70)))
 (let (($x157 (and $x84 $x131)))
 (let (($x36 (and $x157 $x50)))
 (let (($x165 (and $x36 $x167)))
 (let (($x30 (and $x165 $x209)))
 (let (($x8 (and $x30 $x6)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x205 (and $x63 $x8)))
 (let (($x122 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x174 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x174 (_ bv1 32))))
 (=> $x20 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x18 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x106 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x106 (_ bv1 32))))
 (let ((?x174 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x174 (_ bv1 32))))
 (= $x20 $x190))))))
 ))
 (let (($x173 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x154 (= false false)))
 (let ((?x174 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (= ?x174 (_ bv0 32))))
 (=> $x175 $x154)))))
 ))
 (let (($x148 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x106 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x106 (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (= ?x174 (_ bv0 32))))
 (= $x175 $x40))))))
 ))
 (let (($x24 (and $x148 $x173)))
 (let (($x25 (and $x24 $x18)))
 (let (($x221 (and $x25 $x122)))
 (let (($x234 (and $x221 $x205)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x237 (and $x44 $x234)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x239 (and $x65 $x237)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x238 (and $x52 $x239)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x240 (and $x32 $x238)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x258 (and $x37 $x240)))
 (let (($x87 (=> $x258 $x14)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x22 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x23 (= $x22 true)))
 (let (($x224 (= $x23 true)))
 (let ((?x193 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x55 (concat ?x13 (concat ?x211 ?x193)))))
 (let (($x7 (= input.dst.llvm-%n ?x68)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x166)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x180)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x182 $x199)))
 (let (($x202 (and $x181 $x201)))
 (let (($x127 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and (and (and $x151 $x127) $x202) $x7)))
 (let (($x233 (= $x255 true)))
 (let (($x101 (= $x233 true)))
 (let (($x105 (= $x101 true)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x111 (and $x113 $x105)))
 (let (($x178 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x108 (and $x178 $x111)))
 (let (($x152 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x48 (and $x152 $x108)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x77 (and $x117 $x48)))
 (let (($x128 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x278 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x274 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (bvuge ?x274 (_ bv1 32))))
 (=> (and $x146 $x278) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x271 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x246 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x246 (_ bv1 32))))
 (let ((?x274 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (bvuge ?x274 (_ bv1 32))))
 (let (($x278 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x278 (= $x146 $x120))))))))
 ))
 (let (($x54 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x69 (= false false)))
 (let (($x278 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x274 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x274 (_ bv0 32))))
 (=> (and $x279 $x278) $x69))))))
 ))
 (let (($x275 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x246 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x246 (_ bv0 32))))
 (let ((?x274 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x274 (_ bv0 32))))
 (let (($x278 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x278 (= $x279 $x121))))))))
 ))
 (let (($x100 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x246 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x246 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x120))))
 ))
 (let (($x237 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x69 (= false false)))
 (let ((?x161 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x161 (_ bv0 32))))
 (=> $x15 $x69)))))
 ))
 (let (($x8 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x246 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x246 (_ bv0 32))))
 (let ((?x161 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x161 (_ bv0 32))))
 (= $x15 $x121))))))
 ))
 (let (($x239 (and $x8 $x237)))
 (let (($x241 (and $x239 $x100)))
 (let (($x73 (and $x241 $x275)))
 (let (($x218 (and $x73 $x54)))
 (let (($x107 (and $x218 $x271)))
 (let (($x47 (and $x107 $x128)))
 (let (($x123 (and $x47 $x77)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x16 (and $x156 $x123)))
 (let (($x208 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x89 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x89 (_ bv1 32))))
 (=> $x157 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x31 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x246 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x246 (_ bv1 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x89 (_ bv1 32))))
 (= $x157 $x120))))))
 ))
 (let (($x28 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x69 (= false false)))
 (let ((?x89 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x89 (_ bv0 32))))
 (=> $x90 $x69)))))
 ))
 (let (($x204 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x246 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x246 (_ bv0 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x89 (_ bv0 32))))
 (= $x90 $x121))))))
 ))
 (let (($x132 (and $x204 $x28)))
 (let (($x50 (and $x132 $x31)))
 (let (($x209 (and $x50 $x208)))
 (let (($x191 (and $x209 $x16)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x207 (and $x44 $x191)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x194 (and $x65 $x207)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x192 (and $x52 $x194)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x184 (and $x32 $x192)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x206 (and $x37 $x184)))
 (let (($x225 (=> $x206 $x224)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x22 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x23 (= $x22 true)))
 (let (($x224 (= $x23 true)))
 (let ((?x193 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x55 (concat ?x13 (concat ?x211 ?x193)))))
 (let (($x7 (= input.dst.llvm-%n ?x68)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x166)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x180)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x182 $x199)))
 (let (($x202 (and $x181 $x201)))
 (let (($x127 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and (and (and $x151 $x127) $x202) $x7)))
 (let (($x233 (= $x255 true)))
 (let (($x101 (= $x233 true)))
 (let (($x105 (= $x101 true)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x111 (and $x113 $x105)))
 (let (($x178 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x108 (and $x178 $x111)))
 (let (($x152 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x48 (and $x152 $x108)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x77 (and $x117 $x48)))
 (let (($x128 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x278 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x274 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (bvuge ?x274 (_ bv1 32))))
 (=> (and $x146 $x278) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x271 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x246 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x246 (_ bv1 32))))
 (let ((?x274 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (bvuge ?x274 (_ bv1 32))))
 (let (($x278 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x278 (= $x146 $x120))))))))
 ))
 (let (($x54 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x69 (= false false)))
 (let (($x278 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x274 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x274 (_ bv0 32))))
 (=> (and $x279 $x278) $x69))))))
 ))
 (let (($x275 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x246 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x246 (_ bv0 32))))
 (let ((?x274 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x274 (_ bv0 32))))
 (let (($x278 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x278 (= $x279 $x121))))))))
 ))
 (let (($x100 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x246 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x246 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x120))))
 ))
 (let (($x237 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x69 (= false false)))
 (let ((?x161 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x161 (_ bv0 32))))
 (=> $x15 $x69)))))
 ))
 (let (($x8 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x246 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x246 (_ bv0 32))))
 (let ((?x161 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x161 (_ bv0 32))))
 (= $x15 $x121))))))
 ))
 (let (($x239 (and $x8 $x237)))
 (let (($x241 (and $x239 $x100)))
 (let (($x73 (and $x241 $x275)))
 (let (($x218 (and $x73 $x54)))
 (let (($x107 (and $x218 $x271)))
 (let (($x47 (and $x107 $x128)))
 (let (($x123 (and $x47 $x77)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x16 (and $x156 $x123)))
 (let (($x208 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x89 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x89 (_ bv1 32))))
 (=> $x157 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x31 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x246 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x246 (_ bv1 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x89 (_ bv1 32))))
 (= $x157 $x120))))))
 ))
 (let (($x28 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x69 (= false false)))
 (let ((?x89 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x89 (_ bv0 32))))
 (=> $x90 $x69)))))
 ))
 (let (($x204 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x246 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x246 (_ bv0 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x89 (_ bv0 32))))
 (= $x90 $x121))))))
 ))
 (let (($x132 (and $x204 $x28)))
 (let (($x50 (and $x132 $x31)))
 (let (($x209 (and $x50 $x208)))
 (let (($x191 (and $x209 $x16)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x207 (and $x44 $x191)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x194 (and $x65 $x207)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x192 (and $x52 $x194)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x184 (and $x32 $x192)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x206 (and $x37 $x184)))
 (let (($x225 (=> $x206 $x224)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x350 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x351 (= $x350 false)))
 (let (($x352 (= $x351 true)))
 (let ((?x126 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x126)))
 (let (($x330 (= ?x119 input.dst.llvm-%n)))
 (let (($x331 (= $x330 true)))
 (let (($x332 (= $x331 true)))
 (let (($x325 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x326 (= $x325 true)))
 (let (($x327 (= $x326 true)))
 (let (($x320 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x321 (= $x320 true)))
 (let (($x322 (= $x321 true)))
 (let (($x323 (= $x322 true)))
 (let (($x315 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x316 (= $x315 true)))
 (let (($x317 (= $x316 true)))
 (let (($x318 (= $x317 true)))
 (let (($x310 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x311 (= $x310 true)))
 (let (($x312 (= $x311 true)))
 (let (($x313 (= $x312 true)))
 (let (($x305 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x306 (= $x305 true)))
 (let (($x307 (= $x306 true)))
 (let (($x308 (= $x307 true)))
 (let (($x300 (= (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let (($x301 (= $x300 true)))
 (let (($x302 (= $x301 true)))
 (let ((?x292 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x293 (= (_ bv0 32) ?x292)))
 (let ((?x289 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x290 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x289)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (and $x287 $x290)))
 (let (($x294 (and $x291 $x293)))
 (let (($x285 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (and $x285 $x294)))
 (let (($x296 (= $x295 true)))
 (let (($x297 (= $x296 true)))
 (let (($x298 (= $x297 true)))
 (let (($x167 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x167 true)))
 (let (($x245 (= $x165 true)))
 (let (($x131 (= (_ bv0 32) input.spec-%var-r-0.L2%31%bbentry)))
 (let (($x36 (= $x131 true)))
 (let (($x203 (= $x36 true)))
 (let (($x115 (= ?x119 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x130 (= $x115 true)))
 (let (($x135 (= $x130 true)))
 (let (($x221 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x63 (= $x221 true)))
 (let (($x265 (= $x63 true)))
 (let (($x266 (= $x265 true)))
 (let (($x24 (bvule input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x20 (= $x24 true)))
 (let (($x190 (= $x20 true)))
 (let (($x122 (= $x190 true)))
 (let (($x40 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x176 (= $x40 true)))
 (let (($x148 (= $x176 true)))
 (let (($x75 (= $x148 true)))
 (let (($x35 (bvsle input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x216 (= $x35 true)))
 (let (($x91 (= $x216 true)))
 (let (($x124 (= $x91 true)))
 (let (($x144 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x147 (= $x144 true)))
 (let (($x141 (= $x147 true)))
 (let (($x26 (= $x141 true)))
 (let (($x136 (bvsle input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x95 (= $x136 true)))
 (let (($x270 (= $x95 true)))
 (let (($x143 (= $x270 true)))
 (let (($x264 (bvule input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x114 (= $x264 true)))
 (let (($x134 (= $x114 true)))
 (let (($x88 (= $x134 true)))
 (let (($x142 (and $x88 $x143)))
 (let (($x80 (and $x142 $x26)))
 (let (($x154 (and $x80 $x124)))
 (let (($x173 (and $x154 $x75)))
 (let (($x251 (and $x173 $x122)))
 (let (($x282 (and $x251 $x266)))
 (let (($x45 (and $x282 $x135)))
 (let (($x129 (and $x45 $x203)))
 (let (($x226 (and $x129 $x245)))
 (let (($x299 (and $x226 $x298)))
 (let (($x303 (and $x299 $x302)))
 (let (($x309 (and $x303 $x308)))
 (let (($x314 (and $x309 $x313)))
 (let (($x319 (and $x314 $x318)))
 (let (($x324 (and $x319 $x323)))
 (let (($x328 (and $x324 $x327)))
 (let (($x333 (and $x328 $x332)))
 (let (($x76 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x234 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x234 (_ bv1 32))))
 (=> $x73 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x139 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x27 (_ bv1 32))))
 (let ((?x234 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x234 (_ bv1 32))))
 (= $x73 $x12))))))
 ))
 (let (($x83 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x87 (= false false)))
 (let ((?x234 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x234 (_ bv0 32))))
 (=> $x237 $x87)))))
 ))
 (let (($x14 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x27 (_ bv0 32))))
 (let ((?x234 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x234 (_ bv0 32))))
 (= $x237 $x30))))))
 ))
 (let (($x253 (and $x14 $x83)))
 (let (($x54 (and $x253 $x139)))
 (let (($x128 (and $x54 $x76)))
 (let (($x334 (and $x128 $x333)))
 (let (($x183 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x335 (and $x183 $x334)))
 (let (($x254 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x62 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x58 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x58 (_ bv1 32))))
 (=> (and $x17 $x62) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x82 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x27 (_ bv1 32))))
 (let ((?x58 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x58 (_ bv1 32))))
 (let (($x62 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x62 (= $x17 $x12))))))))
 ))
 (let (($x159 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x87 (= false false)))
 (let (($x62 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x58 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x58 (_ bv0 32))))
 (=> (and $x59 $x62) $x87))))))
 ))
 (let (($x223 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x27 (_ bv0 32))))
 (let ((?x58 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x58 (_ bv0 32))))
 (let (($x62 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x62 (= $x59 $x30))))))))
 ))
 (let (($x171 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x27 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x12))))
 ))
 (let (($x207 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x87 (= false false)))
 (let ((?x108 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x108 (_ bv0 32))))
 (=> $x48 $x87)))))
 ))
 (let (($x123 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x27 (_ bv0 32))))
 (let ((?x108 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x108 (_ bv0 32))))
 (= $x48 $x30))))))
 ))
 (let (($x194 (and $x123 $x207)))
 (let (($x179 (and $x194 $x171)))
 (let (($x283 (and $x179 $x223)))
 (let (($x150 (and $x283 $x159)))
 (let (($x85 (and $x150 $x82)))
 (let (($x257 (and $x85 $x254)))
 (let (($x336 (and $x257 $x335)))
 (let (($x39 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x337 (and $x39 $x336)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x338 (and $x60 $x337)))
 (let (($x259 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x339 (and $x259 $x338)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x340 (and $x137 $x339)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x341 (and $x104 $x340)))
 (let (($x342 (and $x257 $x341)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x343 (and $x116 $x342)))
 (let (($x344 (and $x128 $x343)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x345 (and $x44 $x344)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x346 (and $x32 $x345)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x347 (and $x19 $x346)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x348 (and $x9 $x347)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x349 (and $x65 $x348)))
 (let (($x353 (=> $x349 $x352)))
 (not $x353)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x350 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x351 (= $x350 false)))
 (let (($x352 (= $x351 true)))
 (let ((?x126 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x126)))
 (let (($x330 (= ?x119 input.dst.llvm-%n)))
 (let (($x331 (= $x330 true)))
 (let (($x332 (= $x331 true)))
 (let (($x325 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x326 (= $x325 true)))
 (let (($x327 (= $x326 true)))
 (let (($x320 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x321 (= $x320 true)))
 (let (($x322 (= $x321 true)))
 (let (($x323 (= $x322 true)))
 (let (($x315 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x316 (= $x315 true)))
 (let (($x317 (= $x316 true)))
 (let (($x318 (= $x317 true)))
 (let (($x310 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x311 (= $x310 true)))
 (let (($x312 (= $x311 true)))
 (let (($x313 (= $x312 true)))
 (let (($x305 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x306 (= $x305 true)))
 (let (($x307 (= $x306 true)))
 (let (($x308 (= $x307 true)))
 (let (($x300 (= (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let (($x301 (= $x300 true)))
 (let (($x302 (= $x301 true)))
 (let ((?x292 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x293 (= (_ bv0 32) ?x292)))
 (let ((?x289 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x290 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x289)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (and $x287 $x290)))
 (let (($x294 (and $x291 $x293)))
 (let (($x285 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (and $x285 $x294)))
 (let (($x296 (= $x295 true)))
 (let (($x297 (= $x296 true)))
 (let (($x298 (= $x297 true)))
 (let (($x167 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x167 true)))
 (let (($x245 (= $x165 true)))
 (let (($x131 (= (_ bv0 32) input.spec-%var-r-0.L2%31%bbentry)))
 (let (($x36 (= $x131 true)))
 (let (($x203 (= $x36 true)))
 (let (($x115 (= ?x119 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x130 (= $x115 true)))
 (let (($x135 (= $x130 true)))
 (let (($x221 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x63 (= $x221 true)))
 (let (($x265 (= $x63 true)))
 (let (($x266 (= $x265 true)))
 (let (($x24 (bvule input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x20 (= $x24 true)))
 (let (($x190 (= $x20 true)))
 (let (($x122 (= $x190 true)))
 (let (($x40 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x176 (= $x40 true)))
 (let (($x148 (= $x176 true)))
 (let (($x75 (= $x148 true)))
 (let (($x35 (bvsle input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x216 (= $x35 true)))
 (let (($x91 (= $x216 true)))
 (let (($x124 (= $x91 true)))
 (let (($x144 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x147 (= $x144 true)))
 (let (($x141 (= $x147 true)))
 (let (($x26 (= $x141 true)))
 (let (($x136 (bvsle input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x95 (= $x136 true)))
 (let (($x270 (= $x95 true)))
 (let (($x143 (= $x270 true)))
 (let (($x264 (bvule input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x114 (= $x264 true)))
 (let (($x134 (= $x114 true)))
 (let (($x88 (= $x134 true)))
 (let (($x142 (and $x88 $x143)))
 (let (($x80 (and $x142 $x26)))
 (let (($x154 (and $x80 $x124)))
 (let (($x173 (and $x154 $x75)))
 (let (($x251 (and $x173 $x122)))
 (let (($x282 (and $x251 $x266)))
 (let (($x45 (and $x282 $x135)))
 (let (($x129 (and $x45 $x203)))
 (let (($x226 (and $x129 $x245)))
 (let (($x299 (and $x226 $x298)))
 (let (($x303 (and $x299 $x302)))
 (let (($x309 (and $x303 $x308)))
 (let (($x314 (and $x309 $x313)))
 (let (($x319 (and $x314 $x318)))
 (let (($x324 (and $x319 $x323)))
 (let (($x328 (and $x324 $x327)))
 (let (($x333 (and $x328 $x332)))
 (let (($x76 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x234 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x234 (_ bv1 32))))
 (=> $x73 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x139 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x27 (_ bv1 32))))
 (let ((?x234 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x234 (_ bv1 32))))
 (= $x73 $x12))))))
 ))
 (let (($x83 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x87 (= false false)))
 (let ((?x234 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x234 (_ bv0 32))))
 (=> $x237 $x87)))))
 ))
 (let (($x14 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x27 (_ bv0 32))))
 (let ((?x234 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x234 (_ bv0 32))))
 (= $x237 $x30))))))
 ))
 (let (($x253 (and $x14 $x83)))
 (let (($x54 (and $x253 $x139)))
 (let (($x128 (and $x54 $x76)))
 (let (($x334 (and $x128 $x333)))
 (let (($x183 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x335 (and $x183 $x334)))
 (let (($x254 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x62 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x58 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x58 (_ bv1 32))))
 (=> (and $x17 $x62) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x82 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x27 (_ bv1 32))))
 (let ((?x58 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x58 (_ bv1 32))))
 (let (($x62 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x62 (= $x17 $x12))))))))
 ))
 (let (($x159 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x87 (= false false)))
 (let (($x62 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x58 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x58 (_ bv0 32))))
 (=> (and $x59 $x62) $x87))))))
 ))
 (let (($x223 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x27 (_ bv0 32))))
 (let ((?x58 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x58 (_ bv0 32))))
 (let (($x62 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x62 (= $x59 $x30))))))))
 ))
 (let (($x171 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x27 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x12))))
 ))
 (let (($x207 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x87 (= false false)))
 (let ((?x108 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x108 (_ bv0 32))))
 (=> $x48 $x87)))))
 ))
 (let (($x123 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x27 (_ bv0 32))))
 (let ((?x108 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x108 (_ bv0 32))))
 (= $x48 $x30))))))
 ))
 (let (($x194 (and $x123 $x207)))
 (let (($x179 (and $x194 $x171)))
 (let (($x283 (and $x179 $x223)))
 (let (($x150 (and $x283 $x159)))
 (let (($x85 (and $x150 $x82)))
 (let (($x257 (and $x85 $x254)))
 (let (($x336 (and $x257 $x335)))
 (let (($x39 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x337 (and $x39 $x336)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x338 (and $x60 $x337)))
 (let (($x259 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x339 (and $x259 $x338)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x340 (and $x137 $x339)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x341 (and $x104 $x340)))
 (let (($x342 (and $x257 $x341)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x343 (and $x116 $x342)))
 (let (($x344 (and $x128 $x343)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x345 (and $x44 $x344)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x346 (and $x32 $x345)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x347 (and $x19 $x346)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x348 (and $x9 $x347)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x349 (and $x65 $x348)))
 (let (($x353 (=> $x349 $x352)))
 (not $x353)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000080)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (not $x102)))
 (let (($x235 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x256 (not $x235)))
 (let (($x284 (or $x256 $x232)))
 (let (($x158 (= $x284 true)))
 (let (($x29 (= $x158 true)))
 (let ((?x10 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x10)))
 (let (($x25 (= ?x18 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x25 true)))
 (let (($x172 (= $x248 true)))
 (let ((?x272 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x188 (bvneg ?x272)))
 (let (($x242 (= ?x188 input.dst.llvm-%n)))
 (let (($x219 (= $x242 true)))
 (let (($x250 (= $x219 true)))
 (let (($x195 (= ?x188 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x249 (= $x195 true)))
 (let (($x243 (= $x249 true)))
 (let (($x227 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x168 (= $x227 true)))
 (let (($x185 (= $x168 true)))
 (let (($x222 (= $x185 true)))
 (let (($x175 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x214 (= $x175 true)))
 (let (($x187 (= $x214 true)))
 (let (($x186 (= $x187 true)))
 (let (($x206 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x22 (= $x206 true)))
 (let (($x23 (= $x22 true)))
 (let (($x224 (= $x23 true)))
 (let (($x101 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x105 (= $x101 true)))
 (let (($x16 (= $x105 true)))
 (let (($x192 (= $x16 true)))
 (let ((?x229 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x229)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x181)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x199 $x127)))
 (let (($x200 (and $x182 $x189)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x151 $x200)))
 (let (($x7 (= $x193 true)))
 (let (($x255 (= $x7 true)))
 (let (($x198 (= $x255 true)))
 (let (($x50 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x210 (= $x50 true)))
 (let (($x117 (= $x210 true)))
 (let (($x174 (= $x117 true)))
 (let ((?x196 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x196)))
 (let (($x211 (= ?x13 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x211 true)))
 (let (($x31 (= $x74 true)))
 (let (($x64 (and $x31 $x174)))
 (let (($x68 (and $x64 $x198)))
 (let (($x184 (and $x68 $x192)))
 (let (($x225 (and $x184 $x224)))
 (let (($x98 (and $x225 $x186)))
 (let (($x138 (and $x98 $x222)))
 (let (($x170 (and $x138 $x243)))
 (let (($x125 (and $x170 $x250)))
 (let (($x213 (and $x125 $x172)))
 (let (($x239 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x169 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x169 (_ bv1 32))))
 (=> $x230 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x85 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x123 (_ bv1 32))))
 (let ((?x169 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x169 (_ bv1 32))))
 (= $x230 $x150))))))
 ))
 (let (($x56 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x67 (= false false)))
 (let ((?x169 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x169 (_ bv0 32))))
 (=> $x61 $x67)))))
 ))
 (let (($x62 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x123 (_ bv0 32))))
 (let ((?x169 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x169 (_ bv0 32))))
 (= $x61 $x207))))))
 ))
 (let (($x228 (and $x62 $x56)))
 (let (($x81 (and $x228 $x85)))
 (let (($x14 (and $x81 $x239)))
 (let (($x57 (and $x14 $x213)))
 (let (($x160 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x247 (and $x160 $x57)))
 (let (($x149 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x316 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x340 (bvuge ?x316 (_ bv1 32))))
 (=> (and $x340 $x321) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x344 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x123 (_ bv1 32))))
 (let ((?x316 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x340 (bvuge ?x316 (_ bv1 32))))
 (let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x321 (= $x340 $x150))))))))
 ))
 (let (($x329 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x67 (= false false)))
 (let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x316 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x317 (= ?x316 (_ bv0 32))))
 (=> (and $x317 $x321) $x67))))))
 ))
 (let (($x323 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x123 (_ bv0 32))))
 (let ((?x316 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x317 (= ?x316 (_ bv0 32))))
 (let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x321 (= $x317 $x207))))))))
 ))
 (let (($x165 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x123 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x150))))
 ))
 (let (($x119 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x67 (= false false)))
 (let ((?x63 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x63 (_ bv0 32))))
 (=> $x265 $x67)))))
 ))
 (let (($x282 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x123 (_ bv0 32))))
 (let ((?x63 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x63 (_ bv0 32))))
 (= $x265 $x207))))))
 ))
 (let (($x115 (and $x282 $x119)))
 (let (($x245 (and $x115 $x165)))
 (let (($x324 (and $x245 $x323)))
 (let (($x330 (and $x324 $x329)))
 (let (($x345 (and $x330 $x344)))
 (let (($x152 (and $x345 $x149)))
 (let (($x46 (and $x152 $x247)))
 (let (($x197 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x93 (and $x197 $x46)))
 (let (($x236 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x281 (and $x236 $x93)))
 (let (($x166 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x205 (and $x166 $x281)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x238 (and $x96 $x205)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x263 (and $x178 $x238)))
 (let (($x261 (and $x152 $x263)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x240 (and $x83 $x261)))
 (let (($x252 (and $x14 $x240)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x258 (and $x53 $x252)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x262 (and $x5 $x258)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x43 (and $x140 $x262)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x34 (and $x259 $x43)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x231 (and $x44 $x34)))
 (let (($x41 (=> $x231 $x29)))
 (not $x41)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (not $x102)))
 (let (($x235 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x256 (not $x235)))
 (let (($x284 (or $x256 $x232)))
 (let (($x158 (= $x284 true)))
 (let (($x29 (= $x158 true)))
 (let ((?x10 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x10)))
 (let (($x25 (= ?x18 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x25 true)))
 (let (($x172 (= $x248 true)))
 (let ((?x272 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x188 (bvneg ?x272)))
 (let (($x242 (= ?x188 input.dst.llvm-%n)))
 (let (($x219 (= $x242 true)))
 (let (($x250 (= $x219 true)))
 (let (($x195 (= ?x188 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x249 (= $x195 true)))
 (let (($x243 (= $x249 true)))
 (let (($x227 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x168 (= $x227 true)))
 (let (($x185 (= $x168 true)))
 (let (($x222 (= $x185 true)))
 (let (($x175 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x214 (= $x175 true)))
 (let (($x187 (= $x214 true)))
 (let (($x186 (= $x187 true)))
 (let (($x206 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x22 (= $x206 true)))
 (let (($x23 (= $x22 true)))
 (let (($x224 (= $x23 true)))
 (let (($x101 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x105 (= $x101 true)))
 (let (($x16 (= $x105 true)))
 (let (($x192 (= $x16 true)))
 (let ((?x229 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x229)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x181)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x199 $x127)))
 (let (($x200 (and $x182 $x189)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x151 $x200)))
 (let (($x7 (= $x193 true)))
 (let (($x255 (= $x7 true)))
 (let (($x198 (= $x255 true)))
 (let (($x50 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x210 (= $x50 true)))
 (let (($x117 (= $x210 true)))
 (let (($x174 (= $x117 true)))
 (let ((?x196 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x196)))
 (let (($x211 (= ?x13 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x211 true)))
 (let (($x31 (= $x74 true)))
 (let (($x64 (and $x31 $x174)))
 (let (($x68 (and $x64 $x198)))
 (let (($x184 (and $x68 $x192)))
 (let (($x225 (and $x184 $x224)))
 (let (($x98 (and $x225 $x186)))
 (let (($x138 (and $x98 $x222)))
 (let (($x170 (and $x138 $x243)))
 (let (($x125 (and $x170 $x250)))
 (let (($x213 (and $x125 $x172)))
 (let (($x239 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x169 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x169 (_ bv1 32))))
 (=> $x230 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x85 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x123 (_ bv1 32))))
 (let ((?x169 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x169 (_ bv1 32))))
 (= $x230 $x150))))))
 ))
 (let (($x56 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x67 (= false false)))
 (let ((?x169 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x169 (_ bv0 32))))
 (=> $x61 $x67)))))
 ))
 (let (($x62 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x123 (_ bv0 32))))
 (let ((?x169 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x169 (_ bv0 32))))
 (= $x61 $x207))))))
 ))
 (let (($x228 (and $x62 $x56)))
 (let (($x81 (and $x228 $x85)))
 (let (($x14 (and $x81 $x239)))
 (let (($x57 (and $x14 $x213)))
 (let (($x160 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x247 (and $x160 $x57)))
 (let (($x149 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x316 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x340 (bvuge ?x316 (_ bv1 32))))
 (=> (and $x340 $x321) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x344 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x123 (_ bv1 32))))
 (let ((?x316 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x340 (bvuge ?x316 (_ bv1 32))))
 (let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x321 (= $x340 $x150))))))))
 ))
 (let (($x329 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x67 (= false false)))
 (let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x316 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x317 (= ?x316 (_ bv0 32))))
 (=> (and $x317 $x321) $x67))))))
 ))
 (let (($x323 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x123 (_ bv0 32))))
 (let ((?x316 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x317 (= ?x316 (_ bv0 32))))
 (let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x321 (= $x317 $x207))))))))
 ))
 (let (($x165 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x123 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x150))))
 ))
 (let (($x119 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x67 (= false false)))
 (let ((?x63 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x63 (_ bv0 32))))
 (=> $x265 $x67)))))
 ))
 (let (($x282 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x123 (_ bv0 32))))
 (let ((?x63 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x63 (_ bv0 32))))
 (= $x265 $x207))))))
 ))
 (let (($x115 (and $x282 $x119)))
 (let (($x245 (and $x115 $x165)))
 (let (($x324 (and $x245 $x323)))
 (let (($x330 (and $x324 $x329)))
 (let (($x345 (and $x330 $x344)))
 (let (($x152 (and $x345 $x149)))
 (let (($x46 (and $x152 $x247)))
 (let (($x197 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x93 (and $x197 $x46)))
 (let (($x236 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x281 (and $x236 $x93)))
 (let (($x166 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x205 (and $x166 $x281)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x238 (and $x96 $x205)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x263 (and $x178 $x238)))
 (let (($x261 (and $x152 $x263)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x240 (and $x83 $x261)))
 (let (($x252 (and $x14 $x240)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x258 (and $x53 $x252)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x262 (and $x5 $x258)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x43 (and $x140 $x262)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x34 (and $x259 $x43)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x231 (and $x44 $x34)))
 (let (($x41 (=> $x231 $x29)))
 (not $x41)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 196 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd input.spec-%var-i-0.L2%31%bbentry input.spec-%var-r-0.L2%31%bbentry)))
 (let ((?x69 (bvmul ?x183 (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x69)))
 (let (($x204 (= ?x121 ?x92)))
 (let (($x84 (= $x204 true)))
 (let ((?x86 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x60 (bvneg ?x86)))
 (let (($x6 (= ?x60 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x111 (= $x6 true)))
 (let (($x87 (= $x111 true)))
 (let ((?x354 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x354)))
 (let (($x269 (= ?x9 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x269 true)))
 (let (($x104 (= $x103 true)))
 (let (($x350 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x348 (= $x350 true)))
 (let (($x352 (= $x348 true)))
 (let (($x351 (= $x352 true)))
 (let (($x338 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x339 (= $x338 true)))
 (let (($x346 (= $x339 true)))
 (let (($x347 (= $x346 true)))
 (let (($x336 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x333 (= $x336 true)))
 (let (($x337 (= $x333 true)))
 (let (($x334 (= $x337 true)))
 (let (($x310 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x325 (= $x310 true)))
 (let (($x326 (= $x325 true)))
 (let (($x331 (= $x326 true)))
 (let (($x303 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x312 (= $x303 true)))
 (let (($x313 (= $x312 true)))
 (let (($x314 (= $x313 true)))
 (let (($x307 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x308 (= $x307 true)))
 (let (($x304 (= $x308 true)))
 (let (($x305 (= $x304 true)))
 (let ((?x298 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x286 (= (_ bv0 32) ?x298)))
 (let ((?x290 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x292 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x290)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x296 $x292)))
 (let (($x291 (and $x293 $x286)))
 (let (($x288 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (and $x288 $x291)))
 (let (($x300 (= $x299 true)))
 (let (($x294 (= $x300 true)))
 (let (($x301 (= $x294 true)))
 (let ((?x70 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x70)))
 (let (($x203 (= ?x130 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x129 (= $x203 true)))
 (let (($x72 (= $x129 true)))
 (let (($x45 (= ?x130 input.dst.llvm-%n)))
 (let (($x131 (= $x45 true)))
 (let (($x36 (= $x131 true)))
 (let (($x71 (and $x36 $x72)))
 (let (($x302 (and $x71 $x301)))
 (let (($x306 (and $x302 $x305)))
 (let (($x309 (and $x306 $x314)))
 (let (($x332 (and $x309 $x331)))
 (let (($x341 (and $x332 $x334)))
 (let (($x349 (and $x341 $x347)))
 (let (($x353 (and $x349 $x351)))
 (let (($x260 (and $x353 $x104)))
 (let (($x77 (and $x260 $x87)))
 (let (($x122 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x194 (and (not $x122) $x77)))
 (let (($x11 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x311 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (bvuge ?x311 (_ bv1 32))))
 (=> $x343 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x345 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x282 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x282 (_ bv1 32))))
 (let ((?x311 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (bvuge ?x311 (_ bv1 32))))
 (= $x343 $x330))))))
 ))
 (let (($x318 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x315 (= false false)))
 (let ((?x311 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (= ?x311 (_ bv0 32))))
 (=> $x319 $x315)))))
 ))
 (let (($x321 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x282 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x282 (_ bv0 32))))
 (let ((?x311 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (= ?x311 (_ bv0 32))))
 (= $x319 $x119))))))
 ))
 (let (($x322 (and $x321 $x318)))
 (let (($x99 (and $x322 $x345)))
 (let (($x62 (and $x99 $x11)))
 (let (($x244 (and $x62 $x194)))
 (let (($x173 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x12 (and $x173 $x244)))
 (let (($x143 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x158 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x235 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x235 (_ bv1 32))))
 (=> (and $x80 $x158) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x91 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x282 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x282 (_ bv1 32))))
 (let ((?x235 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x235 (_ bv1 32))))
 (let (($x158 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x158 (= $x80 $x330))))))))
 ))
 (let (($x73 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x315 (= false false)))
 (let (($x158 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x235 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x235 (_ bv0 32))))
 (=> (and $x256 $x158) $x315))))))
 ))
 (let (($x41 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x282 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x282 (_ bv0 32))))
 (let ((?x235 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x235 (_ bv0 32))))
 (let (($x158 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x158 (= $x256 $x119))))))))
 ))
 (let (($x185 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x282 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x282 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x330))))
 ))
 (let (($x23 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x315 (= false false)))
 (let ((?x105 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x105 (_ bv0 32))))
 (=> $x16 $x315)))))
 ))
 (let (($x184 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x282 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x282 (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x105 (_ bv0 32))))
 (= $x16 $x119))))))
 ))
 (let (($x224 (and $x184 $x23)))
 (let (($x222 (and $x224 $x185)))
 (let (($x97 (and $x222 $x41)))
 (let (($x215 (and $x97 $x73)))
 (let (($x124 (and $x215 $x91)))
 (let (($x270 (and $x124 $x143)))
 (let (($x42 (and $x270 $x12)))
 (let (($x75 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x58 (and $x75 $x42)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x223 (and $x20 $x58)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x283 (and $x148 $x223)))
 (let (($x134 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x280 (and $x134 $x283)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x94 (and $x114 $x280)))
 (let (($x159 (and $x270 $x94)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x17 (and $x56 $x159)))
 (let (($x51 (and $x62 $x17)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x79 (and $x241 $x51)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x66 (and $x65 $x79)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x217 (and $x137 $x66)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x254 (and $x140 $x217)))
 (let (($x259 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x257 (and $x259 $x254)))
 (let (($x28 (=> $x257 $x84)))
 (not $x28)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd input.spec-%var-i-0.L2%31%bbentry input.spec-%var-r-0.L2%31%bbentry)))
 (let ((?x69 (bvmul ?x183 (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x69)))
 (let (($x204 (= ?x121 ?x92)))
 (let (($x84 (= $x204 true)))
 (let ((?x86 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x60 (bvneg ?x86)))
 (let (($x6 (= ?x60 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x111 (= $x6 true)))
 (let (($x87 (= $x111 true)))
 (let ((?x354 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x354)))
 (let (($x269 (= ?x9 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x269 true)))
 (let (($x104 (= $x103 true)))
 (let (($x350 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x348 (= $x350 true)))
 (let (($x352 (= $x348 true)))
 (let (($x351 (= $x352 true)))
 (let (($x338 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x339 (= $x338 true)))
 (let (($x346 (= $x339 true)))
 (let (($x347 (= $x346 true)))
 (let (($x336 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x333 (= $x336 true)))
 (let (($x337 (= $x333 true)))
 (let (($x334 (= $x337 true)))
 (let (($x310 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x325 (= $x310 true)))
 (let (($x326 (= $x325 true)))
 (let (($x331 (= $x326 true)))
 (let (($x303 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x312 (= $x303 true)))
 (let (($x313 (= $x312 true)))
 (let (($x314 (= $x313 true)))
 (let (($x307 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x308 (= $x307 true)))
 (let (($x304 (= $x308 true)))
 (let (($x305 (= $x304 true)))
 (let ((?x298 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x286 (= (_ bv0 32) ?x298)))
 (let ((?x290 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x292 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x290)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x296 $x292)))
 (let (($x291 (and $x293 $x286)))
 (let (($x288 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (and $x288 $x291)))
 (let (($x300 (= $x299 true)))
 (let (($x294 (= $x300 true)))
 (let (($x301 (= $x294 true)))
 (let ((?x70 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x70)))
 (let (($x203 (= ?x130 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x129 (= $x203 true)))
 (let (($x72 (= $x129 true)))
 (let (($x45 (= ?x130 input.dst.llvm-%n)))
 (let (($x131 (= $x45 true)))
 (let (($x36 (= $x131 true)))
 (let (($x71 (and $x36 $x72)))
 (let (($x302 (and $x71 $x301)))
 (let (($x306 (and $x302 $x305)))
 (let (($x309 (and $x306 $x314)))
 (let (($x332 (and $x309 $x331)))
 (let (($x341 (and $x332 $x334)))
 (let (($x349 (and $x341 $x347)))
 (let (($x353 (and $x349 $x351)))
 (let (($x260 (and $x353 $x104)))
 (let (($x77 (and $x260 $x87)))
 (let (($x122 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x194 (and (not $x122) $x77)))
 (let (($x11 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x311 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (bvuge ?x311 (_ bv1 32))))
 (=> $x343 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x345 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x282 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x282 (_ bv1 32))))
 (let ((?x311 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (bvuge ?x311 (_ bv1 32))))
 (= $x343 $x330))))))
 ))
 (let (($x318 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x315 (= false false)))
 (let ((?x311 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (= ?x311 (_ bv0 32))))
 (=> $x319 $x315)))))
 ))
 (let (($x321 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x282 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x282 (_ bv0 32))))
 (let ((?x311 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (= ?x311 (_ bv0 32))))
 (= $x319 $x119))))))
 ))
 (let (($x322 (and $x321 $x318)))
 (let (($x99 (and $x322 $x345)))
 (let (($x62 (and $x99 $x11)))
 (let (($x244 (and $x62 $x194)))
 (let (($x173 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x12 (and $x173 $x244)))
 (let (($x143 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x158 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x235 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x235 (_ bv1 32))))
 (=> (and $x80 $x158) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x91 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x282 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x282 (_ bv1 32))))
 (let ((?x235 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x235 (_ bv1 32))))
 (let (($x158 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x158 (= $x80 $x330))))))))
 ))
 (let (($x73 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x315 (= false false)))
 (let (($x158 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x235 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x235 (_ bv0 32))))
 (=> (and $x256 $x158) $x315))))))
 ))
 (let (($x41 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x282 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x282 (_ bv0 32))))
 (let ((?x235 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x235 (_ bv0 32))))
 (let (($x158 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x158 (= $x256 $x119))))))))
 ))
 (let (($x185 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x282 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x282 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x330))))
 ))
 (let (($x23 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x315 (= false false)))
 (let ((?x105 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x105 (_ bv0 32))))
 (=> $x16 $x315)))))
 ))
 (let (($x184 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x282 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x282 (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x105 (_ bv0 32))))
 (= $x16 $x119))))))
 ))
 (let (($x224 (and $x184 $x23)))
 (let (($x222 (and $x224 $x185)))
 (let (($x97 (and $x222 $x41)))
 (let (($x215 (and $x97 $x73)))
 (let (($x124 (and $x215 $x91)))
 (let (($x270 (and $x124 $x143)))
 (let (($x42 (and $x270 $x12)))
 (let (($x75 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x58 (and $x75 $x42)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x223 (and $x20 $x58)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x283 (and $x148 $x223)))
 (let (($x134 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x280 (and $x134 $x283)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x94 (and $x114 $x280)))
 (let (($x159 (and $x270 $x94)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x17 (and $x56 $x159)))
 (let (($x51 (and $x62 $x17)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x79 (and $x241 $x51)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x66 (and $x65 $x79)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x217 (and $x137 $x66)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x254 (and $x140 $x217)))
 (let (($x259 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x257 (and $x259 $x254)))
 (let (($x28 (=> $x257 $x84)))
 (not $x28)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 202 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x340 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let ((?x342 (bvmul ?x340 (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x342)))
 (let (($x246 (= ?x89 ?x90)))
 (let (($x149 (= $x246 true)))
 (let ((?x264 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x264)))
 (let (($x201 (= ?x5 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x201 true)))
 (let (($x113 (= $x96 true)))
 (let (($x27 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x108 (= $x27 true)))
 (let (($x253 (= $x108 true)))
 (let (($x30 (= $x253 true)))
 (let (($x141 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x26 (= $x141 true)))
 (let (($x154 (= $x26 true)))
 (let (($x40 (= $x154 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x38 (= $x144 true)))
 (let (($x147 (= $x38 true)))
 (let (($x49 (= $x147 true)))
 (let (($x19 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x47 (= $x19 true)))
 (let (($x139 (= $x47 true)))
 (let (($x54 (= $x139 true)))
 (let (($x262 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (= $x262 true)))
 (let (($x34 (= $x43 true)))
 (let (($x240 (= $x34 true)))
 (let ((?x247 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x247)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x213)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x249 $x57)))
 (let (($x248 (and $x10 $x46)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (and $x125 $x248)))
 (let (($x261 (= $x263 true)))
 (let (($x281 (= $x261 true)))
 (let (($x205 (= $x281 true)))
 (let ((?x206 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x206)))
 (let (($x170 (= ?x225 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x18 (= $x170 true)))
 (let (($x25 (= $x18 true)))
 (let (($x98 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x188 (= $x98 true)))
 (let (($x272 (= $x188 true)))
 (let (($x243 (= $x272 true)))
 (let (($x175 (= ?x225 input.dst.llvm-%n)))
 (let (($x214 (= $x175 true)))
 (let (($x187 (= $x214 true)))
 (let ((?x255 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x255)))
 (let (($x198 (= ?x200 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x198 true)))
 (let (($x233 (= $x68 true)))
 (let (($x186 (and $x233 $x187)))
 (let (($x195 (and $x186 $x243)))
 (let (($x267 (and $x195 $x25)))
 (let (($x238 (and $x267 $x205)))
 (let (($x252 (and $x238 $x240)))
 (let (($x133 (and $x252 $x54)))
 (let (($x155 (and $x133 $x49)))
 (let (($x48 (and $x155 $x40)))
 (let (($x226 (and $x48 $x30)))
 (let (($x166 (and $x226 $x113)))
 (let (($x189 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x236 (and (not $x189) $x166)))
 (let (($x320 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x258 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x258 (_ bv1 32))))
 (=> $x216 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x124 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x184 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x215 (bvuge ?x184 (_ bv1 32))))
 (let ((?x258 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x258 (_ bv1 32))))
 (= $x216 $x215))))))
 ))
 (let (($x102 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x231 (= false false)))
 (let ((?x258 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x258 (_ bv0 32))))
 (=> $x232 $x231)))))
 ))
 (let (($x158 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x184 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x184 (_ bv0 32))))
 (let ((?x258 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x258 (_ bv0 32))))
 (= $x232 $x23))))))
 ))
 (let (($x29 (and $x158 $x102)))
 (let (($x76 (and $x29 $x124)))
 (let (($x321 (and $x76 $x320)))
 (let (($x197 (and $x321 $x236)))
 (let (($x13 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x171 (and $x13 $x197)))
 (let (($x228 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x217 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x159 (_ bv1 32))))
 (=> (and $x8 $x217) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x174 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x184 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x215 (bvuge ?x184 (_ bv1 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x159 (_ bv1 32))))
 (let (($x217 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x217 (= $x8 $x215))))))))
 ))
 (let (($x84 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x231 (= false false)))
 (let (($x217 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x159 (_ bv0 32))))
 (=> (and $x17 $x217) $x231))))))
 ))
 (let (($x257 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x184 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x184 (_ bv0 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x159 (_ bv0 32))))
 (let (($x217 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x217 (= $x17 $x23))))))))
 ))
 (let (($x333 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x184 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x215 (bvuge ?x184 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x215))))
 ))
 (let (($x312 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x231 (= false false)))
 (let ((?x307 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x307 (_ bv0 32))))
 (=> $x308 $x231)))))
 ))
 (let (($x305 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x184 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x184 (_ bv0 32))))
 (let ((?x307 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x307 (_ bv0 32))))
 (= $x308 $x23))))))
 ))
 (let (($x313 (and $x305 $x312)))
 (let (($x337 (and $x313 $x333)))
 (let (($x183 (and $x337 $x257)))
 (let (($x28 (and $x183 $x84)))
 (let (($x64 (and $x28 $x174)))
 (let (($x138 (and $x64 $x228)))
 (let (($x221 (and $x138 $x171)))
 (let (($x211 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x67 (and $x211 $x221)))
 (let (($x196 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x266 (and $x196 $x67)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x126 (and $x50 $x266)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x115 (and $x55 $x126)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x164 (and $x239 $x115)))
 (let (($x150 (and $x138 $x164)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x167 (and $x318 $x150)))
 (let (($x316 (and $x321 $x167)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x323 (and $x59 $x316)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x324 (and $x137 $x323)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x327 (and $x65 $x324)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x328 (and $x259 $x327)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x329 (and $x33 $x328)))
 (let (($x152 (=> $x329 $x149)))
 (not $x152)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x340 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let ((?x342 (bvmul ?x340 (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x342)))
 (let (($x246 (= ?x89 ?x90)))
 (let (($x149 (= $x246 true)))
 (let ((?x264 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x264)))
 (let (($x201 (= ?x5 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x201 true)))
 (let (($x113 (= $x96 true)))
 (let (($x27 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x108 (= $x27 true)))
 (let (($x253 (= $x108 true)))
 (let (($x30 (= $x253 true)))
 (let (($x141 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x26 (= $x141 true)))
 (let (($x154 (= $x26 true)))
 (let (($x40 (= $x154 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x38 (= $x144 true)))
 (let (($x147 (= $x38 true)))
 (let (($x49 (= $x147 true)))
 (let (($x19 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x47 (= $x19 true)))
 (let (($x139 (= $x47 true)))
 (let (($x54 (= $x139 true)))
 (let (($x262 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (= $x262 true)))
 (let (($x34 (= $x43 true)))
 (let (($x240 (= $x34 true)))
 (let ((?x247 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x247)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x213)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x249 $x57)))
 (let (($x248 (and $x10 $x46)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (and $x125 $x248)))
 (let (($x261 (= $x263 true)))
 (let (($x281 (= $x261 true)))
 (let (($x205 (= $x281 true)))
 (let ((?x206 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x206)))
 (let (($x170 (= ?x225 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x18 (= $x170 true)))
 (let (($x25 (= $x18 true)))
 (let (($x98 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x188 (= $x98 true)))
 (let (($x272 (= $x188 true)))
 (let (($x243 (= $x272 true)))
 (let (($x175 (= ?x225 input.dst.llvm-%n)))
 (let (($x214 (= $x175 true)))
 (let (($x187 (= $x214 true)))
 (let ((?x255 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x255)))
 (let (($x198 (= ?x200 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x198 true)))
 (let (($x233 (= $x68 true)))
 (let (($x186 (and $x233 $x187)))
 (let (($x195 (and $x186 $x243)))
 (let (($x267 (and $x195 $x25)))
 (let (($x238 (and $x267 $x205)))
 (let (($x252 (and $x238 $x240)))
 (let (($x133 (and $x252 $x54)))
 (let (($x155 (and $x133 $x49)))
 (let (($x48 (and $x155 $x40)))
 (let (($x226 (and $x48 $x30)))
 (let (($x166 (and $x226 $x113)))
 (let (($x189 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x236 (and (not $x189) $x166)))
 (let (($x320 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x258 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x258 (_ bv1 32))))
 (=> $x216 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x124 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x184 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x215 (bvuge ?x184 (_ bv1 32))))
 (let ((?x258 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x258 (_ bv1 32))))
 (= $x216 $x215))))))
 ))
 (let (($x102 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x231 (= false false)))
 (let ((?x258 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x258 (_ bv0 32))))
 (=> $x232 $x231)))))
 ))
 (let (($x158 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x184 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x184 (_ bv0 32))))
 (let ((?x258 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x258 (_ bv0 32))))
 (= $x232 $x23))))))
 ))
 (let (($x29 (and $x158 $x102)))
 (let (($x76 (and $x29 $x124)))
 (let (($x321 (and $x76 $x320)))
 (let (($x197 (and $x321 $x236)))
 (let (($x13 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x171 (and $x13 $x197)))
 (let (($x228 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x217 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x159 (_ bv1 32))))
 (=> (and $x8 $x217) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x174 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x184 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x215 (bvuge ?x184 (_ bv1 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x159 (_ bv1 32))))
 (let (($x217 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x217 (= $x8 $x215))))))))
 ))
 (let (($x84 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x231 (= false false)))
 (let (($x217 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x159 (_ bv0 32))))
 (=> (and $x17 $x217) $x231))))))
 ))
 (let (($x257 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x184 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x184 (_ bv0 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x159 (_ bv0 32))))
 (let (($x217 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x217 (= $x17 $x23))))))))
 ))
 (let (($x333 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x184 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x215 (bvuge ?x184 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x215))))
 ))
 (let (($x312 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x231 (= false false)))
 (let ((?x307 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x307 (_ bv0 32))))
 (=> $x308 $x231)))))
 ))
 (let (($x305 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x184 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x184 (_ bv0 32))))
 (let ((?x307 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x307 (_ bv0 32))))
 (= $x308 $x23))))))
 ))
 (let (($x313 (and $x305 $x312)))
 (let (($x337 (and $x313 $x333)))
 (let (($x183 (and $x337 $x257)))
 (let (($x28 (and $x183 $x84)))
 (let (($x64 (and $x28 $x174)))
 (let (($x138 (and $x64 $x228)))
 (let (($x221 (and $x138 $x171)))
 (let (($x211 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x67 (and $x211 $x221)))
 (let (($x196 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x266 (and $x196 $x67)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x126 (and $x50 $x266)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x115 (and $x55 $x126)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x164 (and $x239 $x115)))
 (let (($x150 (and $x138 $x164)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x167 (and $x318 $x150)))
 (let (($x316 (and $x321 $x167)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x323 (and $x59 $x316)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x324 (and $x137 $x323)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x327 (and $x65 $x324)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x328 (and $x259 $x327)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x329 (and $x33 $x328)))
 (let (($x152 (=> $x329 $x149)))
 (not $x152)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 202 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let (($x35 (bvuge ?x80 (_ bv1 32))))
 (let (($x128 (= $x35 true)))
 (let (($x220 (= $x128 true)))
 (let ((?x182 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x182)))
 (let (($x176 (= ?x56 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x134 (= $x176 true)))
 (let (($x95 (= $x134 true)))
 (let (($x199 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x151 (= $x199 true)))
 (let (($x181 (= $x151 true)))
 (let (($x180 (= $x181 true)))
 (let (($x85 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x81 (= $x85 true)))
 (let (($x145 (= $x81 true)))
 (let (($x109 (= $x145 true)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x132)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x280 $x69)))
 (let (($x118 (and $x121 $x83)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x223 $x118)))
 (let (($x112 (= $x230 true)))
 (let (($x82 (= $x112 true)))
 (let (($x178 (= $x82 true)))
 (let ((?x332 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x338 (bvneg ?x332)))
 (let (($x194 (= ?x338 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x244 (= $x194 true)))
 (let (($x111 (= $x244 true)))
 (let (($x86 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x354 (= $x86 true)))
 (let (($x60 (= $x354 true)))
 (let (($x39 (= $x60 true)))
 (let (($x353 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x104 (= $x353 true)))
 (let (($x346 (= $x104 true)))
 (let (($x352 (= $x346 true)))
 (let (($x9 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x269 (= $x9 true)))
 (let (($x350 (= $x269 true)))
 (let (($x348 (= $x350 true)))
 (let (($x341 (= ?x338 input.dst.llvm-%n)))
 (let (($x347 (= $x341 true)))
 (let (($x339 (= $x347 true)))
 (let ((?x306 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x314 (bvneg ?x306)))
 (let (($x310 (= ?x314 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x325 (= $x310 true)))
 (let (($x326 (= $x325 true)))
 (let (($x300 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x286 (= $x300 true)))
 (let (($x291 (= $x286 true)))
 (let (($x294 (= $x291 true)))
 (let (($x331 (and $x294 $x326)))
 (let (($x349 (and $x331 $x339)))
 (let (($x351 (and $x349 $x348)))
 (let (($x260 (and $x351 $x352)))
 (let (($x103 (and $x260 $x39)))
 (let (($x87 (and $x103 $x111)))
 (let (($x234 (and $x87 $x178)))
 (let (($x78 (and $x234 $x109)))
 (let (($x127 (and $x78 $x180)))
 (let (($x148 (and $x127 $x95)))
 (let (($x298 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x20 (and (not $x298) $x148)))
 (let (($x284 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x58 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x58 (_ bv1 32))))
 (=> $x117 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x64 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x305 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x305 (_ bv1 32))))
 (let ((?x58 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x58 (_ bv1 32))))
 (= $x117 $x28))))))
 ))
 (let (($x51 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x94 (= false false)))
 (let ((?x58 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x58 (_ bv0 32))))
 (=> $x79 $x94)))))
 ))
 (let (($x217 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x305 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x305 (_ bv0 32))))
 (let ((?x58 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x58 (_ bv0 32))))
 (= $x79 $x312))))))
 ))
 (let (($x254 (and $x217 $x51)))
 (let (($x63 (and $x254 $x64)))
 (let (($x158 (and $x63 $x284)))
 (let (($x75 (and $x158 $x20)))
 (let (($x251 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x165 (and $x251 $x75)))
 (let (($x322 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x327 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x150 (_ bv1 32))))
 (=> (and $x179 $x327) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x129 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x305 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x305 (_ bv1 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x150 (_ bv1 32))))
 (let (($x327 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x327 (= $x179 $x28))))))))
 ))
 (let (($x149 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x94 (= false false)))
 (let (($x327 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x150 (_ bv0 32))))
 (=> (and $x167 $x327) $x94))))))
 ))
 (let (($x329 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x305 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x305 (_ bv0 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x150 (_ bv0 32))))
 (let (($x327 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x327 (= $x167 $x312))))))))
 ))
 (let (($x252 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x305 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x305 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x28))))
 ))
 (let (($x248 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x94 (= false false)))
 (let ((?x219 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x219 (_ bv0 32))))
 (=> $x213 $x94)))))
 ))
 (let (($x10 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x305 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x305 (_ bv0 32))))
 (let ((?x219 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x219 (_ bv0 32))))
 (= $x213 $x312))))))
 ))
 (let (($x263 (and $x10 $x248)))
 (let (($x19 (and $x263 $x252)))
 (let (($x340 (and $x19 $x329)))
 (let (($x152 (and $x340 $x149)))
 (let (($x72 (and $x152 $x129)))
 (let (($x334 (and $x72 $x322)))
 (let (($x101 (and $x334 $x165)))
 (let (($x130 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x315 (and $x130 $x101)))
 (let (($x191 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x192 (and $x191 $x315)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x22 (and $x131 $x192)))
 (let (($x190 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x224 (and $x190 $x22)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x227 (and $x11 $x224)))
 (let (($x330 (and $x334 $x227)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x168 (and $x102 $x330)))
 (let (($x235 (and $x158 $x168)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x41 (and $x59 $x235)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x97 (and $x137 $x41)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x32 (and $x65 $x97)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x37 (and $x259 $x32)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x73 (and $x33 $x37)))
 (let (($x88 (=> $x73 $x220)))
 (not $x88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let (($x35 (bvuge ?x80 (_ bv1 32))))
 (let (($x128 (= $x35 true)))
 (let (($x220 (= $x128 true)))
 (let ((?x182 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x182)))
 (let (($x176 (= ?x56 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x134 (= $x176 true)))
 (let (($x95 (= $x134 true)))
 (let (($x199 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x151 (= $x199 true)))
 (let (($x181 (= $x151 true)))
 (let (($x180 (= $x181 true)))
 (let (($x85 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x81 (= $x85 true)))
 (let (($x145 (= $x81 true)))
 (let (($x109 (= $x145 true)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x132)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x280 $x69)))
 (let (($x118 (and $x121 $x83)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x223 $x118)))
 (let (($x112 (= $x230 true)))
 (let (($x82 (= $x112 true)))
 (let (($x178 (= $x82 true)))
 (let ((?x332 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x338 (bvneg ?x332)))
 (let (($x194 (= ?x338 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x244 (= $x194 true)))
 (let (($x111 (= $x244 true)))
 (let (($x86 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x354 (= $x86 true)))
 (let (($x60 (= $x354 true)))
 (let (($x39 (= $x60 true)))
 (let (($x353 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x104 (= $x353 true)))
 (let (($x346 (= $x104 true)))
 (let (($x352 (= $x346 true)))
 (let (($x9 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x269 (= $x9 true)))
 (let (($x350 (= $x269 true)))
 (let (($x348 (= $x350 true)))
 (let (($x341 (= ?x338 input.dst.llvm-%n)))
 (let (($x347 (= $x341 true)))
 (let (($x339 (= $x347 true)))
 (let ((?x306 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x314 (bvneg ?x306)))
 (let (($x310 (= ?x314 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x325 (= $x310 true)))
 (let (($x326 (= $x325 true)))
 (let (($x300 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x286 (= $x300 true)))
 (let (($x291 (= $x286 true)))
 (let (($x294 (= $x291 true)))
 (let (($x331 (and $x294 $x326)))
 (let (($x349 (and $x331 $x339)))
 (let (($x351 (and $x349 $x348)))
 (let (($x260 (and $x351 $x352)))
 (let (($x103 (and $x260 $x39)))
 (let (($x87 (and $x103 $x111)))
 (let (($x234 (and $x87 $x178)))
 (let (($x78 (and $x234 $x109)))
 (let (($x127 (and $x78 $x180)))
 (let (($x148 (and $x127 $x95)))
 (let (($x298 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x20 (and (not $x298) $x148)))
 (let (($x284 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x58 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x58 (_ bv1 32))))
 (=> $x117 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x64 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x305 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x305 (_ bv1 32))))
 (let ((?x58 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x58 (_ bv1 32))))
 (= $x117 $x28))))))
 ))
 (let (($x51 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x94 (= false false)))
 (let ((?x58 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x58 (_ bv0 32))))
 (=> $x79 $x94)))))
 ))
 (let (($x217 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x305 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x305 (_ bv0 32))))
 (let ((?x58 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x58 (_ bv0 32))))
 (= $x79 $x312))))))
 ))
 (let (($x254 (and $x217 $x51)))
 (let (($x63 (and $x254 $x64)))
 (let (($x158 (and $x63 $x284)))
 (let (($x75 (and $x158 $x20)))
 (let (($x251 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x165 (and $x251 $x75)))
 (let (($x322 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x327 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x150 (_ bv1 32))))
 (=> (and $x179 $x327) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x129 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x305 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x305 (_ bv1 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x150 (_ bv1 32))))
 (let (($x327 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x327 (= $x179 $x28))))))))
 ))
 (let (($x149 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x94 (= false false)))
 (let (($x327 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x150 (_ bv0 32))))
 (=> (and $x167 $x327) $x94))))))
 ))
 (let (($x329 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x305 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x305 (_ bv0 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x150 (_ bv0 32))))
 (let (($x327 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x327 (= $x167 $x312))))))))
 ))
 (let (($x252 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x305 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x305 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x28))))
 ))
 (let (($x248 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x94 (= false false)))
 (let ((?x219 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x219 (_ bv0 32))))
 (=> $x213 $x94)))))
 ))
 (let (($x10 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x305 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x305 (_ bv0 32))))
 (let ((?x219 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x219 (_ bv0 32))))
 (= $x213 $x312))))))
 ))
 (let (($x263 (and $x10 $x248)))
 (let (($x19 (and $x263 $x252)))
 (let (($x340 (and $x19 $x329)))
 (let (($x152 (and $x340 $x149)))
 (let (($x72 (and $x152 $x129)))
 (let (($x334 (and $x72 $x322)))
 (let (($x101 (and $x334 $x165)))
 (let (($x130 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x315 (and $x130 $x101)))
 (let (($x191 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x192 (and $x191 $x315)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x22 (and $x131 $x192)))
 (let (($x190 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x224 (and $x190 $x22)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x227 (and $x11 $x224)))
 (let (($x330 (and $x334 $x227)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x168 (and $x102 $x330)))
 (let (($x235 (and $x158 $x168)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x41 (and $x59 $x235)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x97 (and $x137 $x41)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x32 (and $x65 $x97)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x37 (and $x259 $x32)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x73 (and $x33 $x37)))
 (let (($x88 (=> $x73 $x220)))
 (not $x88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 200 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x265 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let (($x123 (bvsge ?x265 (_ bv1 32))))
 (let (($x207 (= $x123 true)))
 (let (($x228 (= $x207 true)))
 (let ((?x31 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x31)))
 (let (($x162 (= ?x55 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x162 true)))
 (let (($x210 (= $x50 true)))
 (let (($x289 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x296 (= $x289 true)))
 (let (($x290 (= $x296 true)))
 (let (($x292 (= $x290 true)))
 (let (($x71 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x287 (= $x71 true)))
 (let (($x288 (= $x287 true)))
 (let (($x295 (= $x288 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x343 (= (_ bv0 32) ?x136)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x221 $x160)))
 (let (($x142 (and $x53 $x343)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (and $x115 $x142)))
 (let (($x114 (= $x344 true)))
 (let (($x169 (= $x114 true)))
 (let (($x345 (= $x169 true)))
 (let ((?x139 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x139)))
 (let (($x96 (= ?x38 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x113 (= $x96 true)))
 (let (($x166 (= $x113 true)))
 (let (($x264 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x5 (= $x264 true)))
 (let (($x108 (= $x5 true)))
 (let (($x236 (= $x108 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x141 (= $x144 true)))
 (let (($x30 (= $x141 true)))
 (let (($x226 (= $x30 true)))
 (let (($x49 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x155 (= $x49 true)))
 (let (($x26 (= $x155 true)))
 (let (($x154 (= $x26 true)))
 (let (($x133 (= ?x38 input.dst.llvm-%n)))
 (let (($x147 (= $x133 true)))
 (let (($x48 (= $x147 true)))
 (let ((?x281 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x281)))
 (let (($x93 (= ?x205 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x262 (= $x93 true)))
 (let (($x43 (= $x262 true)))
 (let (($x25 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x250 (= $x25 true)))
 (let (($x125 (= $x250 true)))
 (let (($x172 (= $x125 true)))
 (let (($x54 (and $x172 $x43)))
 (let (($x27 (and $x54 $x48)))
 (let (($x253 (and $x27 $x154)))
 (let (($x40 (and $x253 $x226)))
 (let (($x197 (and $x40 $x236)))
 (let (($x201 (and $x197 $x166)))
 (let (($x99 (and $x201 $x345)))
 (let (($x285 (and $x99 $x295)))
 (let (($x317 (and $x285 $x292)))
 (let (($x196 (and $x317 $x210)))
 (let (($x267 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x185 (and (not $x267) $x196)))
 (let (($x66 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x67 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x67 (_ bv1 32))))
 (=> $x203 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x72 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x10 (_ bv1 32))))
 (let ((?x67 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x67 (_ bv1 32))))
 (= $x203 $x152))))))
 ))
 (let (($x316 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x164 (= false false)))
 (let ((?x67 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x323 (= ?x67 (_ bv0 32))))
 (=> $x323 $x164)))))
 ))
 (let (($x327 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x10 (_ bv0 32))))
 (let ((?x67 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x323 (= ?x67 (_ bv0 32))))
 (= $x323 $x248))))))
 ))
 (let (($x328 (and $x327 $x316)))
 (let (($x105 (and $x328 $x72)))
 (let (($x217 (and $x105 $x66)))
 (let (($x297 (and $x217 $x185)))
 (let (($x170 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x231 (and $x170 $x297)))
 (let (($x189 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x32 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x330 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (bvuge ?x330 (_ bv1 32))))
 (=> (and $x319 $x32) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x106 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x10 (_ bv1 32))))
 (let ((?x330 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (bvuge ?x330 (_ bv1 32))))
 (let (($x32 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x32 (= $x319 $x152))))))))
 ))
 (let (($x143 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x164 (= false false)))
 (let (($x32 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x330 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x330 (_ bv0 32))))
 (=> (and $x168 $x32) $x164))))))
 ))
 (let (($x73 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x10 (_ bv0 32))))
 (let ((?x330 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x330 (_ bv0 32))))
 (let (($x32 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x32 (= $x168 $x248))))))))
 ))
 (let (($x42 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x10 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x152))))
 ))
 (let (($x103 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x164 (= false false)))
 (let ((?x352 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x352 (_ bv0 32))))
 (=> $x260 $x164)))))
 ))
 (let (($x354 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x10 (_ bv0 32))))
 (let ((?x352 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x352 (_ bv0 32))))
 (= $x260 $x248))))))
 ))
 (let (($x194 (and $x354 $x103)))
 (let (($x69 (and $x194 $x42)))
 (let (($x80 (and $x69 $x73)))
 (let (($x318 (and $x80 $x143)))
 (let (($x175 (and $x318 $x106)))
 (let (($x320 (and $x175 $x189)))
 (let (($x304 (and $x320 $x231)))
 (let (($x200 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x303 (and $x200 $x304)))
 (let (($x229 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x313 (and $x229 $x303)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x335 (and $x68 $x313)))
 (let (($x198 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x215 (and $x198 $x335)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x336 (and $x74 $x215)))
 (let (($x159 (and $x320 $x336)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x257 (and $x51 $x159)))
 (let (($x183 (and $x217 $x257)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x92 (and $x59 $x183)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x204 (and $x137 $x92)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x84 (and $x65 $x204)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x8 (and $x259 $x84)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x237 (and $x33 $x8)))
 (let (($x138 (=> $x237 $x228)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x265 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let (($x123 (bvsge ?x265 (_ bv1 32))))
 (let (($x207 (= $x123 true)))
 (let (($x228 (= $x207 true)))
 (let ((?x31 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x31)))
 (let (($x162 (= ?x55 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x162 true)))
 (let (($x210 (= $x50 true)))
 (let (($x289 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x296 (= $x289 true)))
 (let (($x290 (= $x296 true)))
 (let (($x292 (= $x290 true)))
 (let (($x71 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x287 (= $x71 true)))
 (let (($x288 (= $x287 true)))
 (let (($x295 (= $x288 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x343 (= (_ bv0 32) ?x136)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x221 $x160)))
 (let (($x142 (and $x53 $x343)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (and $x115 $x142)))
 (let (($x114 (= $x344 true)))
 (let (($x169 (= $x114 true)))
 (let (($x345 (= $x169 true)))
 (let ((?x139 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x139)))
 (let (($x96 (= ?x38 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x113 (= $x96 true)))
 (let (($x166 (= $x113 true)))
 (let (($x264 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x5 (= $x264 true)))
 (let (($x108 (= $x5 true)))
 (let (($x236 (= $x108 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x141 (= $x144 true)))
 (let (($x30 (= $x141 true)))
 (let (($x226 (= $x30 true)))
 (let (($x49 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x155 (= $x49 true)))
 (let (($x26 (= $x155 true)))
 (let (($x154 (= $x26 true)))
 (let (($x133 (= ?x38 input.dst.llvm-%n)))
 (let (($x147 (= $x133 true)))
 (let (($x48 (= $x147 true)))
 (let ((?x281 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x281)))
 (let (($x93 (= ?x205 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x262 (= $x93 true)))
 (let (($x43 (= $x262 true)))
 (let (($x25 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x250 (= $x25 true)))
 (let (($x125 (= $x250 true)))
 (let (($x172 (= $x125 true)))
 (let (($x54 (and $x172 $x43)))
 (let (($x27 (and $x54 $x48)))
 (let (($x253 (and $x27 $x154)))
 (let (($x40 (and $x253 $x226)))
 (let (($x197 (and $x40 $x236)))
 (let (($x201 (and $x197 $x166)))
 (let (($x99 (and $x201 $x345)))
 (let (($x285 (and $x99 $x295)))
 (let (($x317 (and $x285 $x292)))
 (let (($x196 (and $x317 $x210)))
 (let (($x267 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x185 (and (not $x267) $x196)))
 (let (($x66 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x67 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x67 (_ bv1 32))))
 (=> $x203 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x72 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x10 (_ bv1 32))))
 (let ((?x67 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x67 (_ bv1 32))))
 (= $x203 $x152))))))
 ))
 (let (($x316 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x164 (= false false)))
 (let ((?x67 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x323 (= ?x67 (_ bv0 32))))
 (=> $x323 $x164)))))
 ))
 (let (($x327 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x10 (_ bv0 32))))
 (let ((?x67 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x323 (= ?x67 (_ bv0 32))))
 (= $x323 $x248))))))
 ))
 (let (($x328 (and $x327 $x316)))
 (let (($x105 (and $x328 $x72)))
 (let (($x217 (and $x105 $x66)))
 (let (($x297 (and $x217 $x185)))
 (let (($x170 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x231 (and $x170 $x297)))
 (let (($x189 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x32 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x330 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (bvuge ?x330 (_ bv1 32))))
 (=> (and $x319 $x32) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x106 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x10 (_ bv1 32))))
 (let ((?x330 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (bvuge ?x330 (_ bv1 32))))
 (let (($x32 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x32 (= $x319 $x152))))))))
 ))
 (let (($x143 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x164 (= false false)))
 (let (($x32 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x330 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x330 (_ bv0 32))))
 (=> (and $x168 $x32) $x164))))))
 ))
 (let (($x73 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x10 (_ bv0 32))))
 (let ((?x330 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x330 (_ bv0 32))))
 (let (($x32 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x32 (= $x168 $x248))))))))
 ))
 (let (($x42 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x10 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x152))))
 ))
 (let (($x103 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x164 (= false false)))
 (let ((?x352 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x352 (_ bv0 32))))
 (=> $x260 $x164)))))
 ))
 (let (($x354 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x10 (_ bv0 32))))
 (let ((?x352 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x352 (_ bv0 32))))
 (= $x260 $x248))))))
 ))
 (let (($x194 (and $x354 $x103)))
 (let (($x69 (and $x194 $x42)))
 (let (($x80 (and $x69 $x73)))
 (let (($x318 (and $x80 $x143)))
 (let (($x175 (and $x318 $x106)))
 (let (($x320 (and $x175 $x189)))
 (let (($x304 (and $x320 $x231)))
 (let (($x200 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x303 (and $x200 $x304)))
 (let (($x229 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x313 (and $x229 $x303)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x335 (and $x68 $x313)))
 (let (($x198 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x215 (and $x198 $x335)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x336 (and $x74 $x215)))
 (let (($x159 (and $x320 $x336)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x257 (and $x51 $x159)))
 (let (($x183 (and $x217 $x257)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x92 (and $x59 $x183)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x204 (and $x137 $x92)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x84 (and $x65 $x204)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x8 (and $x259 $x84)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x237 (and $x33 $x8)))
 (let (($x138 (=> $x237 $x228)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00008200)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00008203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00008200)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3fc3fdfc)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3fc3fdff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3fc3fdfc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd input.spec-%var-i-0.L2%31%bbentry input.spec-%var-r-0.L2%31%bbentry)))
 (let (($x240 (bvsge ?x28 (_ bv0 32))))
 (let (($x150 (= $x240 true)))
 (let (($x329 (= $x150 true)))
 (let ((?x311 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x214 (bvneg ?x311)))
 (let (($x98 (= ?x214 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x188 (= $x98 true)))
 (let (($x186 (= $x188 true)))
 (let ((?x124 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x124)))
 (let (($x76 (= ?x14 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x216 (= $x76 true)))
 (let (($x233 (= $x216 true)))
 (let (($x35 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x128 (= $x35 true)))
 (let (($x163 (= $x128 true)))
 (let (($x239 (= $x163 true)))
 (let (($x192 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x22 (= $x192 true)))
 (let (($x224 (= $x22 true)))
 (let (($x165 (= $x224 true)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x182)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x180)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x230 $x127)))
 (let (($x151 (and $x109 $x56)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x145 $x151)))
 (let (($x75 (= $x20 true)))
 (let (($x134 (= $x75 true)))
 (let (($x95 (= $x134 true)))
 (let ((?x244 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x244)))
 (let (($x82 (= ?x111 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x78 (= $x82 true)))
 (let (($x199 (= $x78 true)))
 (let (($x283 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x83 (= $x283 true)))
 (let (($x132 (= $x83 true)))
 (let (($x112 (= $x132 true)))
 (let (($x87 (= ?x111 input.dst.llvm-%n)))
 (let (($x77 (= $x87 true)))
 (let (($x6 (= $x77 true)))
 (let (($x269 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x351 (= $x269 true)))
 (let (($x353 (= $x351 true)))
 (let (($x104 (= $x353 true)))
 (let (($x223 (and $x104 $x6)))
 (let (($x118 (and $x223 $x112)))
 (let (($x178 (and $x118 $x199)))
 (let (($x148 (and $x178 $x95)))
 (let (($x101 (and $x148 $x165)))
 (let (($x91 (and $x101 $x239)))
 (let (($x245 (and $x91 $x233)))
 (let (($x243 (and $x245 $x186)))
 (let (($x350 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x307 (and (not $x350) $x243)))
 (let (($x324 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x315 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x315 (_ bv1 32))))
 (=> $x225 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x175 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x354 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x354 (_ bv1 32))))
 (let ((?x315 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x315 (_ bv1 32))))
 (= $x225 $x318))))))
 ))
 (let (($x235 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x227 (= false false)))
 (let ((?x315 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x315 (_ bv0 32))))
 (=> $x41 $x227)))))
 ))
 (let (($x32 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x354 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x354 (_ bv0 32))))
 (let ((?x315 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x315 (_ bv0 32))))
 (= $x41 $x103))))))
 ))
 (let (($x37 (and $x32 $x235)))
 (let (($x184 (and $x37 $x175)))
 (let (($x327 (and $x184 $x324)))
 (let (($x308 (and $x327 $x307)))
 (let (($x349 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x256 (and $x349 $x308)))
 (let (($x298 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x84 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x159 (_ bv1 32))))
 (=> (and $x232 $x84) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x309 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x354 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x354 (_ bv1 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x159 (_ bv1 32))))
 (let (($x84 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x84 (= $x232 $x318))))))))
 ))
 (let (($x13 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x227 (= false false)))
 (let (($x84 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x159 (_ bv0 32))))
 (=> (and $x257 $x84) $x227))))))
 ))
 (let (($x237 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x354 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x354 (_ bv0 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x159 (_ bv0 32))))
 (let (($x84 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x84 (= $x257 $x103))))))))
 ))
 (let (($x89 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x354 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x354 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x318))))
 ))
 (let (($x197 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x227 (= false false)))
 (let ((?x226 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x226 (_ bv0 32))))
 (=> $x40 $x227)))))
 ))
 (let (($x5 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x354 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x354 (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x226 (_ bv0 32))))
 (= $x40 $x103))))))
 ))
 (let (($x96 (and $x5 $x197)))
 (let (($x160 (and $x96 $x89)))
 (let (($x265 (and $x160 $x237)))
 (let (($x102 (and $x265 $x13)))
 (let (($x310 (and $x102 $x309)))
 (let (($x284 (and $x310 $x298)))
 (let (($x45 (and $x284 $x256)))
 (let (($x286 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x190 (and $x286 $x45)))
 (let (($x293 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x70 (and $x293 $x190)))
 (let (($x301 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x131 (and $x301 $x70)))
 (let (($x294 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x36 (and $x294 $x131)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x191 (and $x135 $x36)))
 (let (($x130 (and $x284 $x191)))
 (let (($x316 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x333 (and $x316 $x130)))
 (let (($x249 (and $x327 $x333)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x94 (and $x59 $x249)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x57 (and $x137 $x94)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x46 (and $x65 $x57)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x263 (and $x259 $x46)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x34 (and $x33 $x263)))
 (let (($x340 (=> $x34 $x329)))
 (not $x340)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd input.spec-%var-i-0.L2%31%bbentry input.spec-%var-r-0.L2%31%bbentry)))
 (let (($x240 (bvsge ?x28 (_ bv0 32))))
 (let (($x150 (= $x240 true)))
 (let (($x329 (= $x150 true)))
 (let ((?x311 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x214 (bvneg ?x311)))
 (let (($x98 (= ?x214 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x188 (= $x98 true)))
 (let (($x186 (= $x188 true)))
 (let ((?x124 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x124)))
 (let (($x76 (= ?x14 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x216 (= $x76 true)))
 (let (($x233 (= $x216 true)))
 (let (($x35 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x128 (= $x35 true)))
 (let (($x163 (= $x128 true)))
 (let (($x239 (= $x163 true)))
 (let (($x192 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x22 (= $x192 true)))
 (let (($x224 (= $x22 true)))
 (let (($x165 (= $x224 true)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x182)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x180)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x230 $x127)))
 (let (($x151 (and $x109 $x56)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x145 $x151)))
 (let (($x75 (= $x20 true)))
 (let (($x134 (= $x75 true)))
 (let (($x95 (= $x134 true)))
 (let ((?x244 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x244)))
 (let (($x82 (= ?x111 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x78 (= $x82 true)))
 (let (($x199 (= $x78 true)))
 (let (($x283 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x83 (= $x283 true)))
 (let (($x132 (= $x83 true)))
 (let (($x112 (= $x132 true)))
 (let (($x87 (= ?x111 input.dst.llvm-%n)))
 (let (($x77 (= $x87 true)))
 (let (($x6 (= $x77 true)))
 (let (($x269 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x351 (= $x269 true)))
 (let (($x353 (= $x351 true)))
 (let (($x104 (= $x353 true)))
 (let (($x223 (and $x104 $x6)))
 (let (($x118 (and $x223 $x112)))
 (let (($x178 (and $x118 $x199)))
 (let (($x148 (and $x178 $x95)))
 (let (($x101 (and $x148 $x165)))
 (let (($x91 (and $x101 $x239)))
 (let (($x245 (and $x91 $x233)))
 (let (($x243 (and $x245 $x186)))
 (let (($x350 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x307 (and (not $x350) $x243)))
 (let (($x324 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x315 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x315 (_ bv1 32))))
 (=> $x225 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x175 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x354 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x354 (_ bv1 32))))
 (let ((?x315 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x315 (_ bv1 32))))
 (= $x225 $x318))))))
 ))
 (let (($x235 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x227 (= false false)))
 (let ((?x315 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x315 (_ bv0 32))))
 (=> $x41 $x227)))))
 ))
 (let (($x32 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x354 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x354 (_ bv0 32))))
 (let ((?x315 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x315 (_ bv0 32))))
 (= $x41 $x103))))))
 ))
 (let (($x37 (and $x32 $x235)))
 (let (($x184 (and $x37 $x175)))
 (let (($x327 (and $x184 $x324)))
 (let (($x308 (and $x327 $x307)))
 (let (($x349 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x256 (and $x349 $x308)))
 (let (($x298 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x84 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x159 (_ bv1 32))))
 (=> (and $x232 $x84) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x309 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x354 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x354 (_ bv1 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x159 (_ bv1 32))))
 (let (($x84 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x84 (= $x232 $x318))))))))
 ))
 (let (($x13 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x227 (= false false)))
 (let (($x84 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x159 (_ bv0 32))))
 (=> (and $x257 $x84) $x227))))))
 ))
 (let (($x237 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x354 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x354 (_ bv0 32))))
 (let ((?x159 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x159 (_ bv0 32))))
 (let (($x84 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x84 (= $x257 $x103))))))))
 ))
 (let (($x89 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x354 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x354 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x318))))
 ))
 (let (($x197 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x227 (= false false)))
 (let ((?x226 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x226 (_ bv0 32))))
 (=> $x40 $x227)))))
 ))
 (let (($x5 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x354 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x354 (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x226 (_ bv0 32))))
 (= $x40 $x103))))))
 ))
 (let (($x96 (and $x5 $x197)))
 (let (($x160 (and $x96 $x89)))
 (let (($x265 (and $x160 $x237)))
 (let (($x102 (and $x265 $x13)))
 (let (($x310 (and $x102 $x309)))
 (let (($x284 (and $x310 $x298)))
 (let (($x45 (and $x284 $x256)))
 (let (($x286 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x190 (and $x286 $x45)))
 (let (($x293 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x70 (and $x293 $x190)))
 (let (($x301 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x131 (and $x301 $x70)))
 (let (($x294 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x36 (and $x294 $x131)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x191 (and $x135 $x36)))
 (let (($x130 (and $x284 $x191)))
 (let (($x316 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x333 (and $x316 $x130)))
 (let (($x249 (and $x327 $x333)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x94 (and $x59 $x249)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x57 (and $x137 $x94)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x46 (and $x65 $x57)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x263 (and $x259 $x46)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x34 (and $x33 $x263)))
 (let (($x340 (=> $x34 $x329)))
 (not $x340)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x90000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x90000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x90000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x220 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (bvuge ?x220 (_ bv1 32))))
 (let (($x143 (= $x88 true)))
 (let (($x319 (= $x143 true)))
 (let ((?x347 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x341 (bvneg ?x347)))
 (let (($x219 (= ?x341 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x219 true)))
 (let (($x17 (= $x213 true)))
 (let (($x325 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x326 (= $x325 true)))
 (let (($x332 (= $x326 true)))
 (let (($x338 (= $x332 true)))
 (let (($x63 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (= $x63 true)))
 (let (($x302 (= $x117 true)))
 (let (($x222 (= $x302 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x304 (= (_ bv0 32) ?x231)))
 (let ((?x313 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x335 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x313)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x196 $x335)))
 (let (($x123 (and $x215 $x304)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x50 $x123)))
 (let (($x122 (= $x207 true)))
 (let (($x11 (= $x122 true)))
 (let (($x174 (= $x11 true)))
 (let ((?x169 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x285 (bvneg ?x169)))
 (let (($x295 (= ?x285 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x31 (= $x295 true)))
 (let (($x55 (= $x31 true)))
 (let (($x290 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x344 (= $x290 true)))
 (let (($x71 (= $x344 true)))
 (let (($x292 (= $x71 true)))
 (let (($x345 (= ?x285 input.dst.llvm-%n)))
 (let (($x99 (= $x345 true)))
 (let (($x287 (= $x99 true)))
 (let ((?x115 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x171 (bvneg ?x115)))
 (let (($x136 (= ?x171 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x136 true)))
 (let (($x142 (= $x114 true)))
 (let (($x288 (and $x142 $x287)))
 (let (($x317 (and $x288 $x292)))
 (let (($x296 (and $x317 $x55)))
 (let (($x64 (and $x296 $x174)))
 (let (($x258 (and $x64 $x222)))
 (let (($x331 (and $x258 $x338)))
 (let (($x202 (and $x331 $x17)))
 (let (($x201 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x193 (and (not $x201) $x202)))
 (let (($x97 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x303 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x303 (_ bv1 32))))
 (=> $x314 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x310 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x5 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x5 (_ bv1 32))))
 (let ((?x303 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x303 (_ bv1 32))))
 (= $x314 $x102))))))
 ))
 (let (($x183 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x336 (= false false)))
 (let ((?x303 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x303 (_ bv0 32))))
 (=> $x92 $x336)))))
 ))
 (let (($x84 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x5 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x5 (_ bv0 32))))
 (let ((?x303 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x303 (_ bv0 32))))
 (= $x92 $x197))))))
 ))
 (let (($x8 (and $x84 $x183)))
 (let (($x305 (and $x8 $x310)))
 (let (($x32 (and $x305 $x97)))
 (let (($x68 (and $x32 $x193)))
 (let (($x113 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x255 (and $x113 $x68)))
 (let (($x242 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x150 (_ bv1 32))))
 (=> (and $x38 $x321) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x260 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x5 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x5 (_ bv1 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x150 (_ bv1 32))))
 (let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x321 (= $x38 $x102))))))))
 ))
 (let (($x58 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x336 (= false false)))
 (let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x150 (_ bv0 32))))
 (=> (and $x329 $x321) $x336))))))
 ))
 (let (($x7 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x5 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x5 (_ bv0 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x150 (_ bv0 32))))
 (let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x321 (= $x329 $x197))))))))
 ))
 (let (($x128 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x5 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x5 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x102))))
 ))
 (let (($x75 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x336 (= false false)))
 (let ((?x127 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x127 (_ bv0 32))))
 (=> $x109 $x336)))))
 ))
 (let (($x56 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x5 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x5 (_ bv0 32))))
 (let ((?x127 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x127 (_ bv0 32))))
 (= $x109 $x197))))))
 ))
 (let (($x134 (and $x56 $x75)))
 (let (($x163 (and $x134 $x128)))
 (let (($x203 (and $x163 $x7)))
 (let (($x79 (and $x203 $x58)))
 (let (($x10 (and $x79 $x260)))
 (let (($x250 (and $x10 $x242)))
 (let (($x229 (and $x250 $x255)))
 (let (($x108 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x200 (and $x108 $x229)))
 (let (($x141 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x252 (and $x141 $x200)))
 (let (($x155 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x346 (and $x155 $x252)))
 (let (($x154 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x164 (and $x154 $x346)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x86 (and $x48 $x164)))
 (let (($x39 (and $x250 $x86)))
 (let (($x235 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x194 (and $x235 $x39)))
 (let (($x280 (and $x32 $x194)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x152 (and $x59 $x280)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x12 (and $x137 $x152)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x330 (and $x65 $x12)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x73 (and $x259 $x330)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x80 (and $x33 $x73)))
 (let (($x206 (=> $x80 $x319)))
 (not $x206))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x220 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (bvuge ?x220 (_ bv1 32))))
 (let (($x143 (= $x88 true)))
 (let (($x319 (= $x143 true)))
 (let ((?x347 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x341 (bvneg ?x347)))
 (let (($x219 (= ?x341 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x219 true)))
 (let (($x17 (= $x213 true)))
 (let (($x325 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x326 (= $x325 true)))
 (let (($x332 (= $x326 true)))
 (let (($x338 (= $x332 true)))
 (let (($x63 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (= $x63 true)))
 (let (($x302 (= $x117 true)))
 (let (($x222 (= $x302 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x304 (= (_ bv0 32) ?x231)))
 (let ((?x313 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x335 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x313)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x196 $x335)))
 (let (($x123 (and $x215 $x304)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x50 $x123)))
 (let (($x122 (= $x207 true)))
 (let (($x11 (= $x122 true)))
 (let (($x174 (= $x11 true)))
 (let ((?x169 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x285 (bvneg ?x169)))
 (let (($x295 (= ?x285 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x31 (= $x295 true)))
 (let (($x55 (= $x31 true)))
 (let (($x290 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x344 (= $x290 true)))
 (let (($x71 (= $x344 true)))
 (let (($x292 (= $x71 true)))
 (let (($x345 (= ?x285 input.dst.llvm-%n)))
 (let (($x99 (= $x345 true)))
 (let (($x287 (= $x99 true)))
 (let ((?x115 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x171 (bvneg ?x115)))
 (let (($x136 (= ?x171 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x136 true)))
 (let (($x142 (= $x114 true)))
 (let (($x288 (and $x142 $x287)))
 (let (($x317 (and $x288 $x292)))
 (let (($x296 (and $x317 $x55)))
 (let (($x64 (and $x296 $x174)))
 (let (($x258 (and $x64 $x222)))
 (let (($x331 (and $x258 $x338)))
 (let (($x202 (and $x331 $x17)))
 (let (($x201 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x193 (and (not $x201) $x202)))
 (let (($x97 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x303 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x303 (_ bv1 32))))
 (=> $x314 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x310 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x5 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x5 (_ bv1 32))))
 (let ((?x303 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x303 (_ bv1 32))))
 (= $x314 $x102))))))
 ))
 (let (($x183 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x336 (= false false)))
 (let ((?x303 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x303 (_ bv0 32))))
 (=> $x92 $x336)))))
 ))
 (let (($x84 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x5 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x5 (_ bv0 32))))
 (let ((?x303 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x303 (_ bv0 32))))
 (= $x92 $x197))))))
 ))
 (let (($x8 (and $x84 $x183)))
 (let (($x305 (and $x8 $x310)))
 (let (($x32 (and $x305 $x97)))
 (let (($x68 (and $x32 $x193)))
 (let (($x113 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x255 (and $x113 $x68)))
 (let (($x242 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x150 (_ bv1 32))))
 (=> (and $x38 $x321) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x260 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x5 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x5 (_ bv1 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x150 (_ bv1 32))))
 (let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x321 (= $x38 $x102))))))))
 ))
 (let (($x58 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x336 (= false false)))
 (let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x150 (_ bv0 32))))
 (=> (and $x329 $x321) $x336))))))
 ))
 (let (($x7 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x5 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x5 (_ bv0 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x150 (_ bv0 32))))
 (let (($x321 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x321 (= $x329 $x197))))))))
 ))
 (let (($x128 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x5 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x5 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x102))))
 ))
 (let (($x75 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x336 (= false false)))
 (let ((?x127 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x127 (_ bv0 32))))
 (=> $x109 $x336)))))
 ))
 (let (($x56 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x5 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x5 (_ bv0 32))))
 (let ((?x127 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x127 (_ bv0 32))))
 (= $x109 $x197))))))
 ))
 (let (($x134 (and $x56 $x75)))
 (let (($x163 (and $x134 $x128)))
 (let (($x203 (and $x163 $x7)))
 (let (($x79 (and $x203 $x58)))
 (let (($x10 (and $x79 $x260)))
 (let (($x250 (and $x10 $x242)))
 (let (($x229 (and $x250 $x255)))
 (let (($x108 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x200 (and $x108 $x229)))
 (let (($x141 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x252 (and $x141 $x200)))
 (let (($x155 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x346 (and $x155 $x252)))
 (let (($x154 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x164 (and $x154 $x346)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x86 (and $x48 $x164)))
 (let (($x39 (and $x250 $x86)))
 (let (($x235 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x194 (and $x235 $x39)))
 (let (($x280 (and $x32 $x194)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x152 (and $x59 $x280)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x12 (and $x137 $x152)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x330 (and $x65 $x12)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x73 (and $x259 $x330)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x80 (and $x33 $x73)))
 (let (($x206 (=> $x80 $x319)))
 (not $x206))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x237 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x318 (bvadd input.spec-%var-i-0.L2%31%bbentry input.spec-%var-r-0.L2%31%bbentry)))
 (let ((?x342 (bvmul ?x318 (_ bv4294967295 32))))
 (let ((?x159 (bvneg ?x342)))
 (let (($x265 (= ?x159 ?x237)))
 (let (($x228 (= $x265 true)))
 (let ((?x139 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x139)))
 (let (($x267 (= ?x248 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x267 true)))
 (let (($x53 (= $x66 true)))
 (let ((?x93 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x262 (bvneg ?x93)))
 (let (($x205 (= ?x262 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x205 true)))
 (let (($x238 (= $x43 true)))
 (let (($x57 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (= $x57 true)))
 (let (($x72 (= $x129 true)))
 (let (($x261 (= $x72 true)))
 (let ((?x249 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x249)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x307 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (and $x188 $x307)))
 (let (($x191 (and $x333 $x36)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x256 $x191)))
 (let (($x131 (= $x130 true)))
 (let (($x263 (= $x131 true)))
 (let (($x34 (= $x263 true)))
 (let ((?x216 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x216)))
 (let (($x311 (= ?x14 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x187 (= $x311 true)))
 (let (($x98 (= $x187 true)))
 (let (($x186 (= ?x14 input.dst.llvm-%n)))
 (let (($x243 (= $x186 true)))
 (let (($x245 (= $x243 true)))
 (let (($x308 (and $x245 $x98)))
 (let (($x28 (and $x308 $x34)))
 (let (($x281 (and $x28 $x261)))
 (let (($x133 (and $x281 $x238)))
 (let (($x195 (and $x133 $x53)))
 (let (($x124 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x18 (and (not $x124) $x195)))
 (let (($x204 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x46 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x46 (_ bv1 32))))
 (=> $x352 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x10 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x56 (_ bv1 32))))
 (let ((?x46 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x46 (_ bv1 32))))
 (= $x352 $x79))))))
 ))
 (let (($x340 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x240 (= false false)))
 (let ((?x46 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x46 (_ bv0 32))))
 (=> $x90 $x240)))))
 ))
 (let (($x321 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x56 (_ bv0 32))))
 (let ((?x46 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x46 (_ bv0 32))))
 (= $x90 $x75))))))
 ))
 (let (($x74 (and $x321 $x340)))
 (let (($x125 (and $x74 $x10)))
 (let (($x84 (and $x125 $x204)))
 (let (($x172 (and $x84 $x18)))
 (let (($x224 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x167 (and $x224 $x172)))
 (let (($x145 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x175 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x158 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x158 (_ bv1 32))))
 (=> (and $x354 $x175) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x350 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x56 (_ bv1 32))))
 (let ((?x158 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x158 (_ bv1 32))))
 (let (($x175 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x175 (= $x354 $x79))))))))
 ))
 (let (($x77 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x240 (= false false)))
 (let (($x175 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x158 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x158 (_ bv0 32))))
 (=> (and $x135 $x175) $x240))))))
 ))
 (let (($x19 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x56 (_ bv0 32))))
 (let ((?x158 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x158 (_ bv0 32))))
 (let (($x175 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x175 (= $x135 $x75))))))))
 ))
 (let (($x258 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x56 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x79))))
 ))
 (let (($x123 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x240 (= false false)))
 (let ((?x162 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x162 (_ bv0 32))))
 (=> $x313 $x240)))))
 ))
 (let (($x215 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x56 (_ bv0 32))))
 (let ((?x162 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x162 (_ bv0 32))))
 (= $x313 $x75))))))
 ))
 (let (($x207 (and $x215 $x123)))
 (let (($x325 (and $x207 $x258)))
 (let (($x67 (and $x325 $x19)))
 (let (($x6 (and $x67 $x77)))
 (let (($x324 (and $x6 $x350)))
 (let (($x178 (and $x324 $x145)))
 (let (($x24 (and $x178 $x167)))
 (let (($x22 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x294 (and $x22 $x24)))
 (let (($x192 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x291 (and $x192 $x294)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x301 (and $x95 $x291)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x300 (and $x85 $x301)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x293 (and $x181 $x300)))
 (let (($x286 (and $x178 $x293)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x42 (and $x183 $x286)))
 (let (($x30 (and $x84 $x42)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x227 (and $x59 $x30)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x264 (and $x137 $x227)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x236 (and $x65 $x264)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x96 (and $x259 $x236)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x221 (and $x33 $x96)))
 (let (($x138 (=> $x221 $x228)))
 (not $x138))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x237 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x318 (bvadd input.spec-%var-i-0.L2%31%bbentry input.spec-%var-r-0.L2%31%bbentry)))
 (let ((?x342 (bvmul ?x318 (_ bv4294967295 32))))
 (let ((?x159 (bvneg ?x342)))
 (let (($x265 (= ?x159 ?x237)))
 (let (($x228 (= $x265 true)))
 (let ((?x139 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x139)))
 (let (($x267 (= ?x248 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x267 true)))
 (let (($x53 (= $x66 true)))
 (let ((?x93 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x262 (bvneg ?x93)))
 (let (($x205 (= ?x262 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x205 true)))
 (let (($x238 (= $x43 true)))
 (let (($x57 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (= $x57 true)))
 (let (($x72 (= $x129 true)))
 (let (($x261 (= $x72 true)))
 (let ((?x249 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x249)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x307 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (and $x188 $x307)))
 (let (($x191 (and $x333 $x36)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x256 $x191)))
 (let (($x131 (= $x130 true)))
 (let (($x263 (= $x131 true)))
 (let (($x34 (= $x263 true)))
 (let ((?x216 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x216)))
 (let (($x311 (= ?x14 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x187 (= $x311 true)))
 (let (($x98 (= $x187 true)))
 (let (($x186 (= ?x14 input.dst.llvm-%n)))
 (let (($x243 (= $x186 true)))
 (let (($x245 (= $x243 true)))
 (let (($x308 (and $x245 $x98)))
 (let (($x28 (and $x308 $x34)))
 (let (($x281 (and $x28 $x261)))
 (let (($x133 (and $x281 $x238)))
 (let (($x195 (and $x133 $x53)))
 (let (($x124 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x18 (and (not $x124) $x195)))
 (let (($x204 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x46 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x46 (_ bv1 32))))
 (=> $x352 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x10 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x56 (_ bv1 32))))
 (let ((?x46 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x46 (_ bv1 32))))
 (= $x352 $x79))))))
 ))
 (let (($x340 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x240 (= false false)))
 (let ((?x46 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x46 (_ bv0 32))))
 (=> $x90 $x240)))))
 ))
 (let (($x321 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x56 (_ bv0 32))))
 (let ((?x46 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x46 (_ bv0 32))))
 (= $x90 $x75))))))
 ))
 (let (($x74 (and $x321 $x340)))
 (let (($x125 (and $x74 $x10)))
 (let (($x84 (and $x125 $x204)))
 (let (($x172 (and $x84 $x18)))
 (let (($x224 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x167 (and $x224 $x172)))
 (let (($x145 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x175 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x158 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x158 (_ bv1 32))))
 (=> (and $x354 $x175) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x350 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x56 (_ bv1 32))))
 (let ((?x158 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x158 (_ bv1 32))))
 (let (($x175 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x175 (= $x354 $x79))))))))
 ))
 (let (($x77 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x240 (= false false)))
 (let (($x175 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x158 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x158 (_ bv0 32))))
 (=> (and $x135 $x175) $x240))))))
 ))
 (let (($x19 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x56 (_ bv0 32))))
 (let ((?x158 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x158 (_ bv0 32))))
 (let (($x175 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x175 (= $x135 $x75))))))))
 ))
 (let (($x258 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x56 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x79))))
 ))
 (let (($x123 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x240 (= false false)))
 (let ((?x162 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x162 (_ bv0 32))))
 (=> $x313 $x240)))))
 ))
 (let (($x215 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x56 (_ bv0 32))))
 (let ((?x162 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x162 (_ bv0 32))))
 (= $x313 $x75))))))
 ))
 (let (($x207 (and $x215 $x123)))
 (let (($x325 (and $x207 $x258)))
 (let (($x67 (and $x325 $x19)))
 (let (($x6 (and $x67 $x77)))
 (let (($x324 (and $x6 $x350)))
 (let (($x178 (and $x324 $x145)))
 (let (($x24 (and $x178 $x167)))
 (let (($x22 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x294 (and $x22 $x24)))
 (let (($x192 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x291 (and $x192 $x294)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x301 (and $x95 $x291)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x300 (and $x85 $x301)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x293 (and $x181 $x300)))
 (let (($x286 (and $x178 $x293)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x42 (and $x183 $x286)))
 (let (($x30 (and $x84 $x42)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x227 (and $x59 $x30)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x264 (and $x137 $x227)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x236 (and $x65 $x264)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x96 (and $x259 $x236)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x221 (and $x33 $x96)))
 (let (($x138 (=> $x221 $x228)))
 (not $x138))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 177 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x211 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x38 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let ((?x147 (bvmul ?x38 (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x147)))
 (let (($x25 (= ?x247 ?x211)))
 (let (($x242 (= $x25 true)))
 (let ((?x348 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x168 (bvneg ?x348)))
 (let (($x253 (= ?x168 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x154 (= $x253 true)))
 (let (($x49 (= $x154 true)))
 (let (($x353 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (= $x353 true)))
 (let (($x272 (= $x9 true)))
 (let (($x60 (= $x272 true)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x83)))
 (let ((?x283 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x283)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x244 $x112)))
 (let (($x132 (and $x118 $x82)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x88 $x132)))
 (let (($x226 (= $x103 true)))
 (let (($x40 (= $x226 true)))
 (let (($x327 (= $x40 true)))
 (let ((?x39 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x194 (bvneg ?x39)))
 (let (($x330 (= ?x194 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x280 (= $x330 true)))
 (let (($x319 (= $x280 true)))
 (let (($x73 (= ?x194 input.dst.llvm-%n)))
 (let (($x80 (= $x73 true)))
 (let (($x152 (= $x80 true)))
 (let ((?x346 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x347 (bvneg ?x346)))
 (let (($x164 (= ?x347 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x164 true)))
 (let (($x255 (= $x86 true)))
 (let (($x12 (and $x255 $x152)))
 (let (($x206 (and $x12 $x319)))
 (let (($x339 (and $x206 $x327)))
 (let (($x269 (and $x339 $x60)))
 (let (($x155 (and $x269 $x49)))
 (let (($x17 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x141 (and (not $x17) $x155)))
 (let (($x51 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x143 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x143 (_ bv1 32))))
 (=> $x239 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x324 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x215 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x215 (_ bv1 32))))
 (let ((?x143 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x143 (_ bv1 32))))
 (= $x239 $x6))))))
 ))
 (let (($x299 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x316 (= false false)))
 (let ((?x143 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x143 (_ bv0 32))))
 (=> $x225 $x316)))))
 ))
 (let (($x175 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x215 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x215 (_ bv0 32))))
 (let ((?x143 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x143 (_ bv0 32))))
 (= $x225 $x123))))))
 ))
 (let (($x184 (and $x175 $x299)))
 (let (($x351 (and $x184 $x324)))
 (let (($x321 (and $x351 $x51)))
 (let (($x108 (and $x321 $x141)))
 (let (($x200 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x89 (and $x200 $x108)))
 (let (($x11 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x289 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x315 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x315 (_ bv1 32))))
 (=> (and $x126 $x289) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x198 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x215 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x215 (_ bv1 32))))
 (let ((?x315 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x315 (_ bv1 32))))
 (let (($x289 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x289 (= $x126 $x6))))))))
 ))
 (let (($x292 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x316 (= false false)))
 (let (($x289 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x315 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x315 (_ bv0 32))))
 (=> (and $x41 $x289) $x316))))))
 ))
 (let (($x99 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x215 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x215 (_ bv0 32))))
 (let ((?x315 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x315 (_ bv0 32))))
 (let (($x289 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x289 (= $x41 $x123))))))))
 ))
 (let (($x53 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x215 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x215 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x6))))
 ))
 (let (($x262 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x316 (= false false)))
 (let ((?x57 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x57 (_ bv0 32))))
 (=> $x129 $x316)))))
 ))
 (let (($x261 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x215 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x215 (_ bv0 32))))
 (let ((?x57 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x57 (_ bv0 32))))
 (= $x129 $x123))))))
 ))
 (let (($x205 (and $x261 $x262)))
 (let (($x195 (and $x205 $x53)))
 (let (($x287 (and $x195 $x99)))
 (let (($x127 (and $x287 $x292)))
 (let (($x115 (and $x127 $x198)))
 (let (($x174 (and $x115 $x11)))
 (let (($x180 (and $x174 $x89)))
 (let (($x229 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x336 (and $x229 $x180)))
 (let (($x219 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x182 (and $x219 $x336)))
 (let (($x332 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x20 (and $x332 $x182)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x134 (and $x117 $x20)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x101 (and $x62 $x134)))
 (let (($x102 (and $x174 $x101)))
 (let (($x340 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x35 (and $x340 $x102)))
 (let (($x150 (and $x321 $x35)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x7 (and $x59 $x150)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x203 (and $x137 $x7)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x105 (and $x65 $x203)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x337 (and $x259 $x105)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x58 (and $x33 $x337)))
 (let (($x250 (=> $x58 $x242)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x211 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x38 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let ((?x147 (bvmul ?x38 (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x147)))
 (let (($x25 (= ?x247 ?x211)))
 (let (($x242 (= $x25 true)))
 (let ((?x348 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x168 (bvneg ?x348)))
 (let (($x253 (= ?x168 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x154 (= $x253 true)))
 (let (($x49 (= $x154 true)))
 (let (($x353 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (= $x353 true)))
 (let (($x272 (= $x9 true)))
 (let (($x60 (= $x272 true)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x83)))
 (let ((?x283 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x283)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x244 $x112)))
 (let (($x132 (and $x118 $x82)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x88 $x132)))
 (let (($x226 (= $x103 true)))
 (let (($x40 (= $x226 true)))
 (let (($x327 (= $x40 true)))
 (let ((?x39 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x194 (bvneg ?x39)))
 (let (($x330 (= ?x194 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x280 (= $x330 true)))
 (let (($x319 (= $x280 true)))
 (let (($x73 (= ?x194 input.dst.llvm-%n)))
 (let (($x80 (= $x73 true)))
 (let (($x152 (= $x80 true)))
 (let ((?x346 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x347 (bvneg ?x346)))
 (let (($x164 (= ?x347 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x164 true)))
 (let (($x255 (= $x86 true)))
 (let (($x12 (and $x255 $x152)))
 (let (($x206 (and $x12 $x319)))
 (let (($x339 (and $x206 $x327)))
 (let (($x269 (and $x339 $x60)))
 (let (($x155 (and $x269 $x49)))
 (let (($x17 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x141 (and (not $x17) $x155)))
 (let (($x51 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x143 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x143 (_ bv1 32))))
 (=> $x239 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x324 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x215 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x215 (_ bv1 32))))
 (let ((?x143 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x143 (_ bv1 32))))
 (= $x239 $x6))))))
 ))
 (let (($x299 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x316 (= false false)))
 (let ((?x143 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x143 (_ bv0 32))))
 (=> $x225 $x316)))))
 ))
 (let (($x175 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x215 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x215 (_ bv0 32))))
 (let ((?x143 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x143 (_ bv0 32))))
 (= $x225 $x123))))))
 ))
 (let (($x184 (and $x175 $x299)))
 (let (($x351 (and $x184 $x324)))
 (let (($x321 (and $x351 $x51)))
 (let (($x108 (and $x321 $x141)))
 (let (($x200 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x89 (and $x200 $x108)))
 (let (($x11 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x289 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x315 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x315 (_ bv1 32))))
 (=> (and $x126 $x289) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x198 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x215 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x215 (_ bv1 32))))
 (let ((?x315 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x315 (_ bv1 32))))
 (let (($x289 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x289 (= $x126 $x6))))))))
 ))
 (let (($x292 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x316 (= false false)))
 (let (($x289 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x315 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x315 (_ bv0 32))))
 (=> (and $x41 $x289) $x316))))))
 ))
 (let (($x99 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x215 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x215 (_ bv0 32))))
 (let ((?x315 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x315 (_ bv0 32))))
 (let (($x289 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x289 (= $x41 $x123))))))))
 ))
 (let (($x53 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x215 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x215 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x6))))
 ))
 (let (($x262 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x316 (= false false)))
 (let ((?x57 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x57 (_ bv0 32))))
 (=> $x129 $x316)))))
 ))
 (let (($x261 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x215 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x215 (_ bv0 32))))
 (let ((?x57 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x57 (_ bv0 32))))
 (= $x129 $x123))))))
 ))
 (let (($x205 (and $x261 $x262)))
 (let (($x195 (and $x205 $x53)))
 (let (($x287 (and $x195 $x99)))
 (let (($x127 (and $x287 $x292)))
 (let (($x115 (and $x127 $x198)))
 (let (($x174 (and $x115 $x11)))
 (let (($x180 (and $x174 $x89)))
 (let (($x229 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x336 (and $x229 $x180)))
 (let (($x219 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x182 (and $x219 $x336)))
 (let (($x332 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x20 (and $x332 $x182)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x134 (and $x117 $x20)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x101 (and $x62 $x134)))
 (let (($x102 (and $x174 $x101)))
 (let (($x340 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x35 (and $x340 $x102)))
 (let (($x150 (and $x321 $x35)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x7 (and $x59 $x150)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x203 (and $x137 $x7)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x105 (and $x65 $x203)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x337 (and $x259 $x105)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x58 (and $x33 $x337)))
 (let (($x250 (=> $x58 $x242)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 177 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x158 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x19 (not $x158)))
 (let (($x79 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x222 (not $x79)))
 (let (($x67 (or $x222 $x19)))
 (let (($x111 (= $x67 true)))
 (let (($x87 (= $x111 true)))
 (let ((?x171 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x317 (bvneg ?x171)))
 (let (($x295 (= ?x317 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x31 (= $x295 true)))
 (let (($x185 (= $x31 true)))
 (let ((?x290 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x290)))
 (let (($x8 (= ?x109 input.dst.llvm-%n)))
 (let (($x136 (= $x8 true)))
 (let (($x32 (= $x136 true)))
 (let (($x5 (= ?x109 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x326 (= $x5 true)))
 (let (($x201 (= $x326 true)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x265 (= (_ bv0 32) ?x13)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x96 $x228)))
 (let (($x309 (and $x138 $x265)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x310 (and $x159 $x309)))
 (let (($x305 (= $x310 true)))
 (let (($x48 (= $x305 true)))
 (let (($x26 (= $x48 true)))
 (let ((?x42 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x42)))
 (let (($x294 (= ?x30 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x294 true)))
 (let (($x318 (= $x286 true)))
 (let (($x288 (and $x318 $x26)))
 (let (($x197 (and $x288 $x201)))
 (let (($x166 (and $x197 $x32)))
 (let (($x55 (and $x166 $x185)))
 (let (($x106 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x314 (_ bv1 32))))
 (=> $x114 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x115 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x261 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x261 (_ bv1 32))))
 (let ((?x314 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x314 (_ bv1 32))))
 (= $x114 $x127))))))
 ))
 (let (($x142 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x69 (= false false)))
 (let ((?x314 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x314 (_ bv0 32))))
 (=> $x169 $x69)))))
 ))
 (let (($x289 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x261 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x261 (_ bv0 32))))
 (let ((?x314 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x314 (_ bv0 32))))
 (= $x169 $x262))))))
 ))
 (let (($x345 (and $x289 $x142)))
 (let (($x50 (and $x345 $x115)))
 (let (($x175 (and $x50 $x106)))
 (let (($x297 (and $x175 $x55)))
 (let (($x236 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x257 (and $x236 $x297)))
 (let (($x238 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x308 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x303 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x303 (_ bv1 32))))
 (=> (and $x216 $x308) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x217 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x261 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x261 (_ bv1 32))))
 (let ((?x303 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x303 (_ bv1 32))))
 (let (($x308 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x308 (= $x216 $x127))))))))
 ))
 (let (($x307 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x69 (= false false)))
 (let (($x308 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x303 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x303 (_ bv0 32))))
 (=> (and $x92 $x308) $x69))))))
 ))
 (let (($x214 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x261 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x261 (_ bv0 32))))
 (let ((?x303 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x303 (_ bv0 32))))
 (let (($x308 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x308 (= $x92 $x262))))))))
 ))
 (let (($x49 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x261 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x261 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x127))))
 ))
 (let (($x339 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x69 (= false false)))
 (let ((?x82 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x82 (_ bv0 32))))
 (=> $x132 $x69)))))
 ))
 (let (($x226 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x261 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x261 (_ bv0 32))))
 (let ((?x82 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x82 (_ bv0 32))))
 (= $x132 $x262))))))
 ))
 (let (($x104 (and $x226 $x339)))
 (let (($x155 (and $x104 $x49)))
 (let (($x256 (and $x155 $x214)))
 (let (($x162 (and $x256 $x307)))
 (let (($x14 (and $x162 $x217)))
 (let (($x133 (and $x14 $x238)))
 (let (($x148 (and $x133 $x257)))
 (let (($x264 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x85 (and $x264 $x148)))
 (let (($x301 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x151 (and $x301 $x85)))
 (let (($x172 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x95 (and $x172 $x151)))
 (let (($x328 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x176 (and $x328 $x95)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x192 (and $x139 $x176)))
 (let (($x22 (and $x133 $x192)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x128 (and $x299 $x22)))
 (let (($x196 (and $x175 $x128)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x240 (and $x59 $x196)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x335 (and $x137 $x240)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x304 (and $x65 $x335)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x207 (and $x259 $x304)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x302 (and $x33 $x207)))
 (let (($x77 (=> $x302 $x87)))
 (not $x77))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x158 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x19 (not $x158)))
 (let (($x79 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x222 (not $x79)))
 (let (($x67 (or $x222 $x19)))
 (let (($x111 (= $x67 true)))
 (let (($x87 (= $x111 true)))
 (let ((?x171 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x317 (bvneg ?x171)))
 (let (($x295 (= ?x317 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x31 (= $x295 true)))
 (let (($x185 (= $x31 true)))
 (let ((?x290 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x290)))
 (let (($x8 (= ?x109 input.dst.llvm-%n)))
 (let (($x136 (= $x8 true)))
 (let (($x32 (= $x136 true)))
 (let (($x5 (= ?x109 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x326 (= $x5 true)))
 (let (($x201 (= $x326 true)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x265 (= (_ bv0 32) ?x13)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x96 $x228)))
 (let (($x309 (and $x138 $x265)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x310 (and $x159 $x309)))
 (let (($x305 (= $x310 true)))
 (let (($x48 (= $x305 true)))
 (let (($x26 (= $x48 true)))
 (let ((?x42 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x42)))
 (let (($x294 (= ?x30 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x294 true)))
 (let (($x318 (= $x286 true)))
 (let (($x288 (and $x318 $x26)))
 (let (($x197 (and $x288 $x201)))
 (let (($x166 (and $x197 $x32)))
 (let (($x55 (and $x166 $x185)))
 (let (($x106 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x314 (_ bv1 32))))
 (=> $x114 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x115 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x261 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x261 (_ bv1 32))))
 (let ((?x314 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x314 (_ bv1 32))))
 (= $x114 $x127))))))
 ))
 (let (($x142 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x69 (= false false)))
 (let ((?x314 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x314 (_ bv0 32))))
 (=> $x169 $x69)))))
 ))
 (let (($x289 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x261 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x261 (_ bv0 32))))
 (let ((?x314 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x314 (_ bv0 32))))
 (= $x169 $x262))))))
 ))
 (let (($x345 (and $x289 $x142)))
 (let (($x50 (and $x345 $x115)))
 (let (($x175 (and $x50 $x106)))
 (let (($x297 (and $x175 $x55)))
 (let (($x236 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x257 (and $x236 $x297)))
 (let (($x238 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x308 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x303 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x303 (_ bv1 32))))
 (=> (and $x216 $x308) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x217 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x261 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x261 (_ bv1 32))))
 (let ((?x303 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x303 (_ bv1 32))))
 (let (($x308 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x308 (= $x216 $x127))))))))
 ))
 (let (($x307 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x69 (= false false)))
 (let (($x308 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x303 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x303 (_ bv0 32))))
 (=> (and $x92 $x308) $x69))))))
 ))
 (let (($x214 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x261 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x261 (_ bv0 32))))
 (let ((?x303 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x303 (_ bv0 32))))
 (let (($x308 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x308 (= $x92 $x262))))))))
 ))
 (let (($x49 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x261 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x261 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x127))))
 ))
 (let (($x339 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x69 (= false false)))
 (let ((?x82 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x82 (_ bv0 32))))
 (=> $x132 $x69)))))
 ))
 (let (($x226 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x261 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x261 (_ bv0 32))))
 (let ((?x82 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x82 (_ bv0 32))))
 (= $x132 $x262))))))
 ))
 (let (($x104 (and $x226 $x339)))
 (let (($x155 (and $x104 $x49)))
 (let (($x256 (and $x155 $x214)))
 (let (($x162 (and $x256 $x307)))
 (let (($x14 (and $x162 $x217)))
 (let (($x133 (and $x14 $x238)))
 (let (($x148 (and $x133 $x257)))
 (let (($x264 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x85 (and $x264 $x148)))
 (let (($x301 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x151 (and $x301 $x85)))
 (let (($x172 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x95 (and $x172 $x151)))
 (let (($x328 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x176 (and $x328 $x95)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x192 (and $x139 $x176)))
 (let (($x22 (and $x133 $x192)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x128 (and $x299 $x22)))
 (let (($x196 (and $x175 $x128)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x240 (and $x59 $x196)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x335 (and $x137 $x240)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x304 (and $x65 $x335)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x207 (and $x259 $x304)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x302 (and $x33 $x207)))
 (let (($x77 (=> $x302 $x87)))
 (not $x77))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x292 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x126 (not $x292)))
 (let (($x343 (= $x126 false)))
 (let (($x210 (= $x343 true)))
 (let ((?x263 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x329 (bvneg ?x263)))
 (let (($x117 (= ?x329 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x338 (= $x117 true)))
 (let (($x332 (= $x338 true)))
 (let ((?x242 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x242)))
 (let (($x130 (= ?x250 input.dst.llvm-%n)))
 (let (($x249 (= $x130 true)))
 (let (($x36 (= $x249 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x75)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x188 $x18)))
 (let (($x74 (and $x124 $x204)))
 (let (($x230 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x230 $x74)))
 (let (($x84 (= $x243 true)))
 (let (($x165 (= $x84 true)))
 (let (($x91 (= $x165 true)))
 (let (($x113 (= ?x250 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x25 (= $x113 true)))
 (let (($x260 (= $x25 true)))
 (let ((?x7 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x7)))
 (let (($x337 (= ?x247 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x183 (= $x337 true)))
 (let (($x234 (= $x183 true)))
 (let (($x10 (and $x234 $x260)))
 (let (($x233 (and $x10 $x91)))
 (let (($x131 (and $x233 $x36)))
 (let (($x331 (and $x131 $x332)))
 (let (($x285 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x352 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x352 (_ bv1 32))))
 (=> $x245 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x14 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x226 (_ bv1 32))))
 (let ((?x352 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x352 (_ bv1 32))))
 (= $x245 $x162))))))
 ))
 (let (($x311 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x352 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x352 (_ bv0 32))))
 (=> $x187 $x160)))))
 ))
 (let (($x308 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x226 (_ bv0 32))))
 (let ((?x352 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x352 (_ bv0 32))))
 (= $x187 $x339))))))
 ))
 (let (($x76 (and $x308 $x311)))
 (let (($x34 (and $x76 $x14)))
 (let (($x289 (and $x34 $x285)))
 (let (($x219 (and $x289 $x331)))
 (let (($x102 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x229 (and $x102 $x219)))
 (let (($x108 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x319 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x80 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x80 (_ bv1 32))))
 (=> (and $x347 $x319) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x223 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x226 (_ bv1 32))))
 (let ((?x80 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x80 (_ bv1 32))))
 (let (($x319 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x319 (= $x347 $x162))))))))
 ))
 (let (($x17 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let (($x319 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x80 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x152 (= ?x80 (_ bv0 32))))
 (=> (and $x152 $x319) $x160))))))
 ))
 (let (($x57 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x226 (_ bv0 32))))
 (let ((?x80 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x152 (= ?x80 (_ bv0 32))))
 (let (($x319 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x319 (= $x152 $x339))))))))
 ))
 (let (($x95 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x226 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x162))))
 ))
 (let (($x317 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x8 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x8 (_ bv0 32))))
 (=> $x136 $x160)))))
 ))
 (let (($x166 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x226 (_ bv0 32))))
 (let ((?x8 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x8 (_ bv0 32))))
 (= $x136 $x339))))))
 ))
 (let (($x296 (and $x166 $x317)))
 (let (($x176 (and $x296 $x95)))
 (let (($x129 (and $x176 $x57)))
 (let (($x51 (and $x129 $x17)))
 (let (($x88 (and $x51 $x223)))
 (let (($x182 (and $x88 $x108)))
 (let (($x258 (and $x182 $x229)))
 (let (($x336 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x94 (and $x336 $x258)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x316 (and $x58 $x94)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x72 (and $x101 $x316)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x93 (and $x105 $x72)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x205 (and $x20 $x93)))
 (let (($x267 (and $x182 $x205)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x6 (and $x142 $x267)))
 (let (($x66 (and $x289 $x6)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x315 (and $x59 $x66)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x99 (and $x137 $x315)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x287 (and $x65 $x99)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x344 (and $x259 $x287)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x71 (and $x33 $x344)))
 (let (($x231 (=> $x71 $x210)))
 (not $x231)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x292 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x126 (not $x292)))
 (let (($x343 (= $x126 false)))
 (let (($x210 (= $x343 true)))
 (let ((?x263 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x329 (bvneg ?x263)))
 (let (($x117 (= ?x329 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x338 (= $x117 true)))
 (let (($x332 (= $x338 true)))
 (let ((?x242 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x242)))
 (let (($x130 (= ?x250 input.dst.llvm-%n)))
 (let (($x249 (= $x130 true)))
 (let (($x36 (= $x249 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x75)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x188 $x18)))
 (let (($x74 (and $x124 $x204)))
 (let (($x230 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x230 $x74)))
 (let (($x84 (= $x243 true)))
 (let (($x165 (= $x84 true)))
 (let (($x91 (= $x165 true)))
 (let (($x113 (= ?x250 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x25 (= $x113 true)))
 (let (($x260 (= $x25 true)))
 (let ((?x7 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x7)))
 (let (($x337 (= ?x247 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x183 (= $x337 true)))
 (let (($x234 (= $x183 true)))
 (let (($x10 (and $x234 $x260)))
 (let (($x233 (and $x10 $x91)))
 (let (($x131 (and $x233 $x36)))
 (let (($x331 (and $x131 $x332)))
 (let (($x285 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x352 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x352 (_ bv1 32))))
 (=> $x245 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x14 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x226 (_ bv1 32))))
 (let ((?x352 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x352 (_ bv1 32))))
 (= $x245 $x162))))))
 ))
 (let (($x311 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x352 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x352 (_ bv0 32))))
 (=> $x187 $x160)))))
 ))
 (let (($x308 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x226 (_ bv0 32))))
 (let ((?x352 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x352 (_ bv0 32))))
 (= $x187 $x339))))))
 ))
 (let (($x76 (and $x308 $x311)))
 (let (($x34 (and $x76 $x14)))
 (let (($x289 (and $x34 $x285)))
 (let (($x219 (and $x289 $x331)))
 (let (($x102 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x229 (and $x102 $x219)))
 (let (($x108 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x319 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x80 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x80 (_ bv1 32))))
 (=> (and $x347 $x319) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x223 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x226 (_ bv1 32))))
 (let ((?x80 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x80 (_ bv1 32))))
 (let (($x319 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x319 (= $x347 $x162))))))))
 ))
 (let (($x17 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let (($x319 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x80 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x152 (= ?x80 (_ bv0 32))))
 (=> (and $x152 $x319) $x160))))))
 ))
 (let (($x57 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x226 (_ bv0 32))))
 (let ((?x80 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x152 (= ?x80 (_ bv0 32))))
 (let (($x319 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x319 (= $x152 $x339))))))))
 ))
 (let (($x95 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x226 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x162))))
 ))
 (let (($x317 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x8 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x8 (_ bv0 32))))
 (=> $x136 $x160)))))
 ))
 (let (($x166 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x226 (_ bv0 32))))
 (let ((?x8 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x8 (_ bv0 32))))
 (= $x136 $x339))))))
 ))
 (let (($x296 (and $x166 $x317)))
 (let (($x176 (and $x296 $x95)))
 (let (($x129 (and $x176 $x57)))
 (let (($x51 (and $x129 $x17)))
 (let (($x88 (and $x51 $x223)))
 (let (($x182 (and $x88 $x108)))
 (let (($x258 (and $x182 $x229)))
 (let (($x336 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x94 (and $x336 $x258)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x316 (and $x58 $x94)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x72 (and $x101 $x316)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x93 (and $x105 $x72)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x205 (and $x20 $x93)))
 (let (($x267 (and $x182 $x205)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x6 (and $x142 $x267)))
 (let (($x66 (and $x289 $x6)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x315 (and $x59 $x66)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x99 (and $x137 $x315)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x287 (and $x65 $x99)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x344 (and $x259 $x287)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x71 (and $x33 $x344)))
 (let (($x231 (=> $x71 $x210)))
 (not $x231)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x10000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00ee8090)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00ee8093)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00ee8090)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x405 (ite (ite (= (_ bv0 32) (_ bv0 32)) (or false (= (_ bv1 32) (_ bv1 32))) false) (_ bv1 32) (_ bv0 32))))
 (let (($x399 (or (bvuge ?x405 (_ bv1 32)) (= ?x405 (_ bv0 32)))))
 (let (($x409 (and (bvuge (ite (or false (= (_ bv0 32) (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x399)))
 (let (($x411 (or (= (ite (or false (= (_ bv0 32) (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)) $x409)))
 (let (($x281 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x412 (and $x281 $x411)))
 (let (($x28 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x413 (or $x28 $x412)))
 (let (($x414 (= $x413 true)))
 (let (($x415 (= $x414 true)))
 (let ((?x328 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x328)))
 (let (($x24 (= ?x167 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x301 (= $x24 true)))
 (let (($x264 (= $x301 true)))
 (let ((?x40 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x40)))
 (let (($x353 (= ?x112 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x272 (= $x353 true)))
 (let (($x60 (= $x272 true)))
 (let ((?x213 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x213)))
 (let (($x346 (= ?x202 input.dst.llvm-%n)))
 (let (($x193 (= $x346 true)))
 (let (($x323 (= $x193 true)))
 (let (($x86 (= ?x202 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x68 (= $x86 true)))
 (let (($x144 (= $x68 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x39)))
 (let ((?x350 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x324 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x350)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x163 $x324)))
 (let (($x252 (and $x63 $x194)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x87 $x252)))
 (let (($x90 (= $x46 true)))
 (let (($x215 (= $x90 true)))
 (let (($x123 (= $x215 true)))
 (let (($x164 (and $x123 $x144)))
 (let (($x283 (and $x164 $x323)))
 (let (($x135 (and $x283 $x60)))
 (let (($x53 (and $x135 $x264)))
 (let (($x98 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x255 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x255 (_ bv1 32))))
 (=> $x244 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x88 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x166 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x166 (_ bv1 32))))
 (let ((?x255 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x255 (_ bv1 32))))
 (= $x244 $x51))))))
 ))
 (let (($x12 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x73 (= false false)))
 (let ((?x255 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x255 (_ bv0 32))))
 (=> $x330 $x73)))))
 ))
 (let (($x319 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x166 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x317 (= ?x166 (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x255 (_ bv0 32))))
 (= $x330 $x317))))))
 ))
 (let (($x206 (and $x319 $x12)))
 (let (($x269 (and $x206 $x88)))
 (let (($x308 (and $x269 $x98)))
 (let (($x83 (and $x308 $x53)))
 (let (($x19 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x69 (and $x19 $x83)))
 (let (($x304 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x132 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x265 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x265 (_ bv1 32))))
 (=> (and $x109 $x132) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x326 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x166 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x166 (_ bv1 32))))
 (let ((?x265 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x265 (_ bv1 32))))
 (let (($x132 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x132 (= $x109 $x51))))))))
 ))
 (let (($x300 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x73 (= false false)))
 (let (($x132 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x265 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x265 (_ bv0 32))))
 (=> (and $x309 $x132) $x73))))))
 ))
 (let (($x262 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x166 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x317 (= ?x166 (_ bv0 32))))
 (let ((?x265 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x265 (_ bv0 32))))
 (let (($x132 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x132 (= $x309 $x317))))))))
 ))
 (let (($x72 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x166 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x166 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x51))))
 ))
 (let (($x329 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x73 (= false false)))
 (let ((?x130 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x249 (= ?x130 (_ bv0 32))))
 (=> $x249 $x73)))))
 ))
 (let (($x131 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x166 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x317 (= ?x166 (_ bv0 32))))
 (let ((?x130 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x249 (= ?x130 (_ bv0 32))))
 (= $x249 $x317))))))
 ))
 (let (($x341 (and $x131 $x329)))
 (let (($x93 (and $x341 $x72)))
 (let (($x345 (and $x93 $x262)))
 (let (($x221 (and $x345 $x300)))
 (let (($x201 (and $x221 $x326)))
 (let (($x67 (and $x201 $x304)))
 (let (($x103 (and $x67 $x69)))
 (let (($x340 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x327 (and $x340 $x103)))
 (let (($x354 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x104 (and $x354 $x327)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x253 (and $x77 $x104)))
 (let (($x222 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x127 (and $x222 $x253)))
 (let (($x207 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x154 (and $x207 $x127)))
 (let (($x303 (and $x67 $x154)))
 (let (($x311 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x214 (and $x311 $x303)))
 (let (($x256 (and $x308 $x214)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x190 (and $x241 $x256)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x70 (and $x116 $x190)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x307 (and $x140 $x70)))
 (let (($x276 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x216 (and $x276 $x307)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x186 (and $x21 $x216)))
 (let (($x416 (=> $x186 $x415)))
 (not $x416)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x405 (ite (ite (= (_ bv0 32) (_ bv0 32)) (or false (= (_ bv1 32) (_ bv1 32))) false) (_ bv1 32) (_ bv0 32))))
 (let (($x399 (or (bvuge ?x405 (_ bv1 32)) (= ?x405 (_ bv0 32)))))
 (let (($x409 (and (bvuge (ite (or false (= (_ bv0 32) (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x399)))
 (let (($x411 (or (= (ite (or false (= (_ bv0 32) (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)) $x409)))
 (let (($x281 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x412 (and $x281 $x411)))
 (let (($x28 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x413 (or $x28 $x412)))
 (let (($x414 (= $x413 true)))
 (let (($x415 (= $x414 true)))
 (let ((?x328 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x328)))
 (let (($x24 (= ?x167 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x301 (= $x24 true)))
 (let (($x264 (= $x301 true)))
 (let ((?x40 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x40)))
 (let (($x353 (= ?x112 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x272 (= $x353 true)))
 (let (($x60 (= $x272 true)))
 (let ((?x213 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x213)))
 (let (($x346 (= ?x202 input.dst.llvm-%n)))
 (let (($x193 (= $x346 true)))
 (let (($x323 (= $x193 true)))
 (let (($x86 (= ?x202 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x68 (= $x86 true)))
 (let (($x144 (= $x68 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x39)))
 (let ((?x350 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x324 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x350)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x163 $x324)))
 (let (($x252 (and $x63 $x194)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x87 $x252)))
 (let (($x90 (= $x46 true)))
 (let (($x215 (= $x90 true)))
 (let (($x123 (= $x215 true)))
 (let (($x164 (and $x123 $x144)))
 (let (($x283 (and $x164 $x323)))
 (let (($x135 (and $x283 $x60)))
 (let (($x53 (and $x135 $x264)))
 (let (($x98 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x255 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x255 (_ bv1 32))))
 (=> $x244 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x88 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x166 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x166 (_ bv1 32))))
 (let ((?x255 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x255 (_ bv1 32))))
 (= $x244 $x51))))))
 ))
 (let (($x12 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x73 (= false false)))
 (let ((?x255 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x255 (_ bv0 32))))
 (=> $x330 $x73)))))
 ))
 (let (($x319 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x166 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x317 (= ?x166 (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x255 (_ bv0 32))))
 (= $x330 $x317))))))
 ))
 (let (($x206 (and $x319 $x12)))
 (let (($x269 (and $x206 $x88)))
 (let (($x308 (and $x269 $x98)))
 (let (($x83 (and $x308 $x53)))
 (let (($x19 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x69 (and $x19 $x83)))
 (let (($x304 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x132 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x265 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x265 (_ bv1 32))))
 (=> (and $x109 $x132) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x326 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x166 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x166 (_ bv1 32))))
 (let ((?x265 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x265 (_ bv1 32))))
 (let (($x132 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x132 (= $x109 $x51))))))))
 ))
 (let (($x300 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x73 (= false false)))
 (let (($x132 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x265 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x265 (_ bv0 32))))
 (=> (and $x309 $x132) $x73))))))
 ))
 (let (($x262 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x166 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x317 (= ?x166 (_ bv0 32))))
 (let ((?x265 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x265 (_ bv0 32))))
 (let (($x132 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x132 (= $x309 $x317))))))))
 ))
 (let (($x72 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x166 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x166 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x51))))
 ))
 (let (($x329 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x73 (= false false)))
 (let ((?x130 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x249 (= ?x130 (_ bv0 32))))
 (=> $x249 $x73)))))
 ))
 (let (($x131 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x166 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x317 (= ?x166 (_ bv0 32))))
 (let ((?x130 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x249 (= ?x130 (_ bv0 32))))
 (= $x249 $x317))))))
 ))
 (let (($x341 (and $x131 $x329)))
 (let (($x93 (and $x341 $x72)))
 (let (($x345 (and $x93 $x262)))
 (let (($x221 (and $x345 $x300)))
 (let (($x201 (and $x221 $x326)))
 (let (($x67 (and $x201 $x304)))
 (let (($x103 (and $x67 $x69)))
 (let (($x340 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x327 (and $x340 $x103)))
 (let (($x354 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x104 (and $x354 $x327)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x253 (and $x77 $x104)))
 (let (($x222 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x127 (and $x222 $x253)))
 (let (($x207 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x154 (and $x207 $x127)))
 (let (($x303 (and $x67 $x154)))
 (let (($x311 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x214 (and $x311 $x303)))
 (let (($x256 (and $x308 $x214)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x190 (and $x241 $x256)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x70 (and $x116 $x190)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x307 (and $x140 $x70)))
 (let (($x276 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x216 (and $x276 $x307)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x186 (and $x21 $x216)))
 (let (($x416 (=> $x186 $x415)))
 (not $x416)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x364 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x390 (= $x364 true)))
 (let (($x392 (= $x390 true)))
 (let ((?x380 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x384 (bvneg ?x380)))
 (let (($x371 (= ?x384 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x366 (= $x371 true)))
 (let (($x370 (= $x366 true)))
 (let ((?x271 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x271)))
 (let ((?x356 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x357 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x356)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x358 (and $x218 $x357)))
 (let (($x359 (and $x358 $x110)))
 (let (($x268 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x360 (and $x268 $x359)))
 (let (($x361 (= $x360 true)))
 (let (($x275 (= $x361 true)))
 (let (($x377 (= $x275 true)))
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x179)))
 (let (($x251 (= ?x246 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x334 (= $x251 true)))
 (let (($x212 (= $x334 true)))
 (let (($x170 (= ?x246 input.dst.llvm-%n)))
 (let (($x157 (= $x170 true)))
 (let (($x120 (= $x157 true)))
 (let ((?x348 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x168 (bvneg ?x348)))
 (let (($x89 (= ?x168 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x108 (= $x89 true)))
 (let (($x182 (= $x108 true)))
 (let (($x129 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x184 (not $x129)))
 (let (($x141 (= $x184 true)))
 (let (($x17 (= $x141 true)))
 (let (($x347 (= $x17 true)))
 (let (($x102 (and $x347 $x182)))
 (let (($x224 (and $x102 $x120)))
 (let (($x209 (and $x224 $x212)))
 (let (($x385 (and $x209 $x377)))
 (let (($x372 (and $x385 $x370)))
 (let ((?x85 (ite (ite (= (_ bv0 32) (_ bv0 32)) (or false (= (_ bv1 32) (_ bv1 32))) false) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (and (bvuge (ite (or false (= (_ bv0 32) (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) (= ?x85 (_ bv0 32)))))
 (let (($x160 (or (= (ite (or false (= (_ bv0 32) (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)) $x49)))
 (let (($x153 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x151 (and $x153 $x160)))
 (let (($x367 (and $x151 $x372)))
 (let (($x280 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x235 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x235 (_ bv1 32))))
 (=> $x290 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x201 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x131 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x131 (_ bv1 32))))
 (let ((?x235 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x235 (_ bv1 32))))
 (= $x290 $x221))))))
 ))
 (let (($x310 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x13 (= false false)))
 (let ((?x235 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (= ?x235 (_ bv0 32))))
 (=> $x305 $x13)))))
 ))
 (let (($x132 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x131 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x131 (_ bv0 32))))
 (let ((?x235 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (= ?x235 (_ bv0 32))))
 (= $x305 $x329))))))
 ))
 (let (($x261 (and $x132 $x310)))
 (let (($x128 (and $x261 $x201)))
 (let (($x319 (and $x128 $x280)))
 (let (($x368 (and $x319 $x367)))
 (let (($x121 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x373 (and $x121 $x368)))
 (let (($x29 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x203 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x203 (_ bv1 32))))
 (=> (and $x133 $x195) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x199 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x131 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x131 (_ bv1 32))))
 (let ((?x203 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x203 (_ bv1 32))))
 (let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x195 (= $x133 $x221))))))))
 ))
 (let (($x181 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x13 (= false false)))
 (let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x203 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x203 (_ bv0 32))))
 (=> (and $x245 $x195) $x13))))))
 ))
 (let (($x169 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x131 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x131 (_ bv0 32))))
 (let ((?x203 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x203 (_ bv0 32))))
 (let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x195 (= $x245 $x329))))))))
 ))
 (let (($x253 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x131 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x131 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x221))))
 ))
 (let (($x167 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x13 (= false false)))
 (let ((?x353 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x353 (_ bv0 32))))
 (=> $x272 $x13)))))
 ))
 (let (($x135 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x131 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x131 (_ bv0 32))))
 (let ((?x353 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x353 (_ bv0 32))))
 (= $x272 $x329))))))
 ))
 (let (($x172 (and $x135 $x167)))
 (let (($x127 (and $x172 $x253)))
 (let (($x113 (and $x127 $x169)))
 (let (($x230 (and $x113 $x181)))
 (let (($x200 (and $x230 $x199)))
 (let (($x47 (and $x200 $x29)))
 (let (($x374 (and $x47 $x373)))
 (let (($x306 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x386 (and $x306 $x374)))
 (let (($x232 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x381 (and $x232 $x386)))
 (let (($x173 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x382 (and $x173 $x381)))
 (let (($x284 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x387 (and $x284 $x382)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x365 (and $x189 $x387)))
 (let (($x355 (and $x47 $x365)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x369 (and $x12 $x355)))
 (let (($x379 (and $x319 $x369)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x383 (and $x241 $x379)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x375 (and $x116 $x383)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x388 (and $x140 $x375)))
 (let (($x276 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x378 (and $x276 $x388)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x362 (and $x52 $x378)))
 (let (($x391 (=> $x362 $x392)))
 (not $x391))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x364 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x390 (= $x364 true)))
 (let (($x392 (= $x390 true)))
 (let ((?x380 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x384 (bvneg ?x380)))
 (let (($x371 (= ?x384 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x366 (= $x371 true)))
 (let (($x370 (= $x366 true)))
 (let ((?x271 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x271)))
 (let ((?x356 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x357 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x356)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x358 (and $x218 $x357)))
 (let (($x359 (and $x358 $x110)))
 (let (($x268 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x360 (and $x268 $x359)))
 (let (($x361 (= $x360 true)))
 (let (($x275 (= $x361 true)))
 (let (($x377 (= $x275 true)))
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x179)))
 (let (($x251 (= ?x246 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x334 (= $x251 true)))
 (let (($x212 (= $x334 true)))
 (let (($x170 (= ?x246 input.dst.llvm-%n)))
 (let (($x157 (= $x170 true)))
 (let (($x120 (= $x157 true)))
 (let ((?x348 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x168 (bvneg ?x348)))
 (let (($x89 (= ?x168 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x108 (= $x89 true)))
 (let (($x182 (= $x108 true)))
 (let (($x129 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x184 (not $x129)))
 (let (($x141 (= $x184 true)))
 (let (($x17 (= $x141 true)))
 (let (($x347 (= $x17 true)))
 (let (($x102 (and $x347 $x182)))
 (let (($x224 (and $x102 $x120)))
 (let (($x209 (and $x224 $x212)))
 (let (($x385 (and $x209 $x377)))
 (let (($x372 (and $x385 $x370)))
 (let ((?x85 (ite (ite (= (_ bv0 32) (_ bv0 32)) (or false (= (_ bv1 32) (_ bv1 32))) false) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (and (bvuge (ite (or false (= (_ bv0 32) (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) (= ?x85 (_ bv0 32)))))
 (let (($x160 (or (= (ite (or false (= (_ bv0 32) (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)) $x49)))
 (let (($x153 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x151 (and $x153 $x160)))
 (let (($x367 (and $x151 $x372)))
 (let (($x280 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x235 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x235 (_ bv1 32))))
 (=> $x290 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x201 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x131 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x131 (_ bv1 32))))
 (let ((?x235 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x235 (_ bv1 32))))
 (= $x290 $x221))))))
 ))
 (let (($x310 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x13 (= false false)))
 (let ((?x235 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (= ?x235 (_ bv0 32))))
 (=> $x305 $x13)))))
 ))
 (let (($x132 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x131 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x131 (_ bv0 32))))
 (let ((?x235 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (= ?x235 (_ bv0 32))))
 (= $x305 $x329))))))
 ))
 (let (($x261 (and $x132 $x310)))
 (let (($x128 (and $x261 $x201)))
 (let (($x319 (and $x128 $x280)))
 (let (($x368 (and $x319 $x367)))
 (let (($x121 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x373 (and $x121 $x368)))
 (let (($x29 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x203 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x203 (_ bv1 32))))
 (=> (and $x133 $x195) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x199 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x131 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x131 (_ bv1 32))))
 (let ((?x203 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x203 (_ bv1 32))))
 (let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x195 (= $x133 $x221))))))))
 ))
 (let (($x181 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x13 (= false false)))
 (let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x203 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x203 (_ bv0 32))))
 (=> (and $x245 $x195) $x13))))))
 ))
 (let (($x169 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x131 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x131 (_ bv0 32))))
 (let ((?x203 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x203 (_ bv0 32))))
 (let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x195 (= $x245 $x329))))))))
 ))
 (let (($x253 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x131 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x131 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x221))))
 ))
 (let (($x167 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x13 (= false false)))
 (let ((?x353 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x353 (_ bv0 32))))
 (=> $x272 $x13)))))
 ))
 (let (($x135 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x131 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x131 (_ bv0 32))))
 (let ((?x353 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x353 (_ bv0 32))))
 (= $x272 $x329))))))
 ))
 (let (($x172 (and $x135 $x167)))
 (let (($x127 (and $x172 $x253)))
 (let (($x113 (and $x127 $x169)))
 (let (($x230 (and $x113 $x181)))
 (let (($x200 (and $x230 $x199)))
 (let (($x47 (and $x200 $x29)))
 (let (($x374 (and $x47 $x373)))
 (let (($x306 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x386 (and $x306 $x374)))
 (let (($x232 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x381 (and $x232 $x386)))
 (let (($x173 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x382 (and $x173 $x381)))
 (let (($x284 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x387 (and $x284 $x382)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x365 (and $x189 $x387)))
 (let (($x355 (and $x47 $x365)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x369 (and $x12 $x355)))
 (let (($x379 (and $x319 $x369)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x383 (and $x241 $x379)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x375 (and $x116 $x383)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x388 (and $x140 $x375)))
 (let (($x276 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x378 (and $x276 $x388)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x362 (and $x52 $x378)))
 (let (($x391 (=> $x362 $x392)))
 (not $x391))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 179 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x185 (ite $x188 (ite (= (_ bv1 32) (_ bv1 32)) input.spec-%var-r-0.L2%31%bbentry (_ bv0 32)) (_ bv0 32))))
 (let (($x227 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x185)))
 (let (($x96 (= $x227 true)))
 (let (($x293 (= $x96 true)))
 (let ((?x50 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x50)))
 (let (($x27 (= ?x143 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x27 true)))
 (let (($x225 (= $x159 true)))
 (let ((?x331 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x331)))
 (let ((?x267 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x267)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (and $x204 $x38)))
 (let (($x287 (and $x219 $x66)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x91 $x287)))
 (let (($x99 (= $x231 true)))
 (let (($x299 (= $x99 true)))
 (let (($x198 (= $x299 true)))
 (let ((?x345 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x345)))
 (let (($x22 (= ?x106 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x335 (= $x22 true)))
 (let (($x196 (= $x335 true)))
 (let (($x175 (= ?x106 input.dst.llvm-%n)))
 (let (($x300 (= $x175 true)))
 (let (($x109 (= $x300 true)))
 (let ((?x341 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x341)))
 (let (($x51 (= ?x94 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x316 (= $x51 true)))
 (let (($x265 (= $x316 true)))
 (let (($x340 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x95 (not $x340)))
 (let (($x333 (= $x95 true)))
 (let (($x73 (= $x333 true)))
 (let (($x36 (= $x73 true)))
 (let (($x262 (and $x36 $x265)))
 (let (($x288 (and $x262 $x109)))
 (let (($x304 (and $x288 $x196)))
 (let (($x114 (and $x304 $x198)))
 (let (($x228 (and $x114 $x225)))
 (let (($x354 (bvuge (ite (ite $x188 (or false (= (_ bv1 32) (_ bv1 32))) false) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x211 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x349 (and (and $x211 (bvuge (ite (or false $x188) (_ bv1 32) (_ bv0 32)) (_ bv1 32))) $x354)))
 (let (($x138 (and $x349 $x228)))
 (let (($x82 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x416 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x416 (_ bv1 32))))
 (=> $x11 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x200 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x135 (_ bv1 32))))
 (let ((?x416 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x416 (_ bv1 32))))
 (= $x11 $x230))))))
 ))
 (let (($x217 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x20 (= false false)))
 (let ((?x416 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x416 (_ bv0 32))))
 (=> $x14 $x20)))))
 ))
 (let (($x195 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x135 (_ bv0 32))))
 (let ((?x416 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x416 (_ bv0 32))))
 (= $x14 $x167))))))
 ))
 (let (($x314 (and $x195 $x217)))
 (let (($x16 (and $x314 $x200)))
 (let (($x132 (and $x16 $x82)))
 (let (($x237 (and $x132 $x138)))
 (let (($x277 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x210 (and $x277 $x237)))
 (let (($x191 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x244 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x395 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x395 (_ bv1 32))))
 (=> (and $x130 $x244) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x273 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x135 (_ bv1 32))))
 (let ((?x395 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x395 (_ bv1 32))))
 (let (($x244 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x244 (= $x130 $x230))))))))
 ))
 (let (($x252 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x20 (= false false)))
 (let (($x244 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x395 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x395 (_ bv0 32))))
 (=> (and $x311 $x244) $x20))))))
 ))
 (let (($x88 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x135 (_ bv0 32))))
 (let ((?x395 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x395 (_ bv0 32))))
 (let (($x244 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x244 (= $x311 $x167))))))))
 ))
 (let (($x110 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x135 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x230))))
 ))
 (let (($x209 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x20 (= false false)))
 (let ((?x157 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x157 (_ bv0 32))))
 (=> $x120 $x20)))))
 ))
 (let (($x251 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x135 (_ bv0 32))))
 (let ((?x157 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x157 (_ bv0 32))))
 (= $x120 $x167))))))
 ))
 (let (($x156 (and $x251 $x209)))
 (let (($x359 (and $x156 $x110)))
 (let (($x269 (and $x359 $x88)))
 (let (($x46 (and $x269 $x252)))
 (let (($x278 (and $x46 $x273)))
 (let (($x337 (and $x278 $x191)))
 (let (($x31 (and $x337 $x210)))
 (let (($x258 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x35 (and $x258 $x31)))
 (let (($x233 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x297 (and $x233 $x35)))
 (let (($x243 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x41 (and $x243 $x297)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x192 (and $x124 $x41)))
 (let (($x332 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x42 (and $x332 $x192)))
 (let (($x318 (and $x337 $x42)))
 (let (($x310 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x286 (and $x310 $x318)))
 (let (($x5 (and $x132 $x286)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x294 (and $x241 $x5)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x30 (and $x116 $x294)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x26 (and $x140 $x30)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x48 (and $x33 $x26)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x105 (and $x59 $x48)))
 (let (($x396 (=> $x105 $x293)))
 (not $x396))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x185 (ite $x188 (ite (= (_ bv1 32) (_ bv1 32)) input.spec-%var-r-0.L2%31%bbentry (_ bv0 32)) (_ bv0 32))))
 (let (($x227 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x185)))
 (let (($x96 (= $x227 true)))
 (let (($x293 (= $x96 true)))
 (let ((?x50 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x50)))
 (let (($x27 (= ?x143 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x27 true)))
 (let (($x225 (= $x159 true)))
 (let ((?x331 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x331)))
 (let ((?x267 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x267)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (and $x204 $x38)))
 (let (($x287 (and $x219 $x66)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x91 $x287)))
 (let (($x99 (= $x231 true)))
 (let (($x299 (= $x99 true)))
 (let (($x198 (= $x299 true)))
 (let ((?x345 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x345)))
 (let (($x22 (= ?x106 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x335 (= $x22 true)))
 (let (($x196 (= $x335 true)))
 (let (($x175 (= ?x106 input.dst.llvm-%n)))
 (let (($x300 (= $x175 true)))
 (let (($x109 (= $x300 true)))
 (let ((?x341 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x341)))
 (let (($x51 (= ?x94 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x316 (= $x51 true)))
 (let (($x265 (= $x316 true)))
 (let (($x340 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x95 (not $x340)))
 (let (($x333 (= $x95 true)))
 (let (($x73 (= $x333 true)))
 (let (($x36 (= $x73 true)))
 (let (($x262 (and $x36 $x265)))
 (let (($x288 (and $x262 $x109)))
 (let (($x304 (and $x288 $x196)))
 (let (($x114 (and $x304 $x198)))
 (let (($x228 (and $x114 $x225)))
 (let (($x354 (bvuge (ite (ite $x188 (or false (= (_ bv1 32) (_ bv1 32))) false) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x211 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x349 (and (and $x211 (bvuge (ite (or false $x188) (_ bv1 32) (_ bv0 32)) (_ bv1 32))) $x354)))
 (let (($x138 (and $x349 $x228)))
 (let (($x82 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x416 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x416 (_ bv1 32))))
 (=> $x11 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x200 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x135 (_ bv1 32))))
 (let ((?x416 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x416 (_ bv1 32))))
 (= $x11 $x230))))))
 ))
 (let (($x217 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x20 (= false false)))
 (let ((?x416 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x416 (_ bv0 32))))
 (=> $x14 $x20)))))
 ))
 (let (($x195 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x135 (_ bv0 32))))
 (let ((?x416 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x416 (_ bv0 32))))
 (= $x14 $x167))))))
 ))
 (let (($x314 (and $x195 $x217)))
 (let (($x16 (and $x314 $x200)))
 (let (($x132 (and $x16 $x82)))
 (let (($x237 (and $x132 $x138)))
 (let (($x277 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x210 (and $x277 $x237)))
 (let (($x191 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x244 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x395 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x395 (_ bv1 32))))
 (=> (and $x130 $x244) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x273 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x135 (_ bv1 32))))
 (let ((?x395 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x395 (_ bv1 32))))
 (let (($x244 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x244 (= $x130 $x230))))))))
 ))
 (let (($x252 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x20 (= false false)))
 (let (($x244 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x395 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x395 (_ bv0 32))))
 (=> (and $x311 $x244) $x20))))))
 ))
 (let (($x88 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x135 (_ bv0 32))))
 (let ((?x395 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x395 (_ bv0 32))))
 (let (($x244 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x244 (= $x311 $x167))))))))
 ))
 (let (($x110 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x135 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x230))))
 ))
 (let (($x209 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x20 (= false false)))
 (let ((?x157 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x157 (_ bv0 32))))
 (=> $x120 $x20)))))
 ))
 (let (($x251 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x135 (_ bv0 32))))
 (let ((?x157 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x157 (_ bv0 32))))
 (= $x120 $x167))))))
 ))
 (let (($x156 (and $x251 $x209)))
 (let (($x359 (and $x156 $x110)))
 (let (($x269 (and $x359 $x88)))
 (let (($x46 (and $x269 $x252)))
 (let (($x278 (and $x46 $x273)))
 (let (($x337 (and $x278 $x191)))
 (let (($x31 (and $x337 $x210)))
 (let (($x258 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x35 (and $x258 $x31)))
 (let (($x233 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x297 (and $x233 $x35)))
 (let (($x243 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x41 (and $x243 $x297)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x192 (and $x124 $x41)))
 (let (($x332 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x42 (and $x332 $x192)))
 (let (($x318 (and $x337 $x42)))
 (let (($x310 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x286 (and $x310 $x318)))
 (let (($x5 (and $x132 $x286)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x294 (and $x241 $x5)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x30 (and $x116 $x294)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x26 (and $x140 $x30)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x48 (and $x33 $x26)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x105 (and $x59 $x48)))
 (let (($x396 (=> $x105 $x293)))
 (not $x396))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 179 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x386 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x381 (not $x386)))
 (let (($x372 (or $x386 $x381)))
 (let (($x382 (= $x372 true)))
 (let (($x387 (= $x382 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x334 (bvneg ?x246)))
 (let (($x268 (= ?x334 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x146 (= $x268 true)))
 (let (($x218 (= $x146 true)))
 (let ((?x216 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x216)))
 (let (($x182 (= ?x186 input.dst.llvm-%n)))
 (let (($x168 (= $x182 true)))
 (let (($x89 (= $x168 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x32)))
 (let ((?x161 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x161)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x280 $x58)))
 (let (($x266 (and $x171 $x296)))
 (let (($x360 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x360 $x266)))
 (let (($x150 (= $x97 true)))
 (let (($x336 (= $x150 true)))
 (let (($x348 (= $x336 true)))
 (let (($x401 (= ?x186 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x307 (= $x401 true)))
 (let (($x281 (= $x307 true)))
 (let ((?x98 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x163 (bvneg ?x98)))
 (let (($x70 (= ?x163 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x301 (= $x70 true)))
 (let (($x410 (= $x301 true)))
 (let (($x394 (and $x410 $x281)))
 (let (($x23 (and $x394 $x348)))
 (let (($x102 (and $x23 $x89)))
 (let (($x107 (and $x102 $x218)))
 (let (($x34 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x362 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x317 (bvuge ?x362 (_ bv1 32))))
 (=> $x317 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x278 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x251 (_ bv1 32))))
 (let ((?x362 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x317 (bvuge ?x362 (_ bv1 32))))
 (= $x317 $x46))))))
 ))
 (let (($x111 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x391 (= false false)))
 (let ((?x362 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x362 (_ bv0 32))))
 (=> $x207 $x391)))))
 ))
 (let (($x244 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x251 (_ bv0 32))))
 (let ((?x362 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x362 (_ bv0 32))))
 (= $x207 $x209))))))
 ))
 (let (($x223 (and $x244 $x111)))
 (let (($x289 (and $x223 $x278)))
 (let (($x195 (and $x289 $x34)))
 (let (($x356 (and $x195 $x107)))
 (let (($x7 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x357 (and $x7 $x356)))
 (let (($x193 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x290 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x397 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x397 (_ bv1 32))))
 (=> (and $x353 $x290) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x122 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x251 (_ bv1 32))))
 (let ((?x397 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x397 (_ bv1 32))))
 (let (($x290 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x290 (= $x353 $x46))))))))
 ))
 (let (($x162 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x391 (= false false)))
 (let (($x290 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x397 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (= ?x397 (_ bv0 32))))
 (=> (and $x12 $x290) $x391))))))
 ))
 (let (($x201 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x251 (_ bv0 32))))
 (let ((?x397 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (= ?x397 (_ bv0 32))))
 (let (($x290 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x290 (= $x12 $x209))))))))
 ))
 (let (($x231 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x251 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x46))))
 ))
 (let (($x19 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x391 (= false false)))
 (let ((?x288 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x288 (_ bv0 32))))
 (=> $x22 $x391)))))
 ))
 (let (($x196 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x251 (_ bv0 32))))
 (let ((?x288 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x288 (_ bv0 32))))
 (= $x22 $x209))))))
 ))
 (let (($x91 (and $x196 $x19)))
 (let (($x99 (and $x91 $x231)))
 (let (($x128 (and $x99 $x201)))
 (let (($x49 (and $x128 $x162)))
 (let (($x344 (and $x49 $x122)))
 (let (($x63 (and $x344 $x193)))
 (let (($x275 (and $x63 $x357)))
 (let (($x264 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x361 (and $x264 $x275)))
 (let (($x346 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x270 (and $x346 $x361)))
 (let (($x351 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x377 (and $x351 $x270)))
 (let (($x239 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x380 (and $x239 $x377)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x367 (and $x112 $x380)))
 (let (($x368 (and $x63 $x367)))
 (let (($x217 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x384 (and $x217 $x368)))
 (let (($x363 (and $x195 $x384)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x366 (and $x241 $x363)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x370 (and $x116 $x366)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x374 (and $x140 $x370)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x385 (and $x33 $x374)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x371 (and $x59 $x385)))
 (let (($x373 (=> $x371 $x387)))
 (not $x373))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x386 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x381 (not $x386)))
 (let (($x372 (or $x386 $x381)))
 (let (($x382 (= $x372 true)))
 (let (($x387 (= $x382 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x334 (bvneg ?x246)))
 (let (($x268 (= ?x334 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x146 (= $x268 true)))
 (let (($x218 (= $x146 true)))
 (let ((?x216 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x216)))
 (let (($x182 (= ?x186 input.dst.llvm-%n)))
 (let (($x168 (= $x182 true)))
 (let (($x89 (= $x168 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x32)))
 (let ((?x161 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x161)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x280 $x58)))
 (let (($x266 (and $x171 $x296)))
 (let (($x360 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x360 $x266)))
 (let (($x150 (= $x97 true)))
 (let (($x336 (= $x150 true)))
 (let (($x348 (= $x336 true)))
 (let (($x401 (= ?x186 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x307 (= $x401 true)))
 (let (($x281 (= $x307 true)))
 (let ((?x98 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x163 (bvneg ?x98)))
 (let (($x70 (= ?x163 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x301 (= $x70 true)))
 (let (($x410 (= $x301 true)))
 (let (($x394 (and $x410 $x281)))
 (let (($x23 (and $x394 $x348)))
 (let (($x102 (and $x23 $x89)))
 (let (($x107 (and $x102 $x218)))
 (let (($x34 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x362 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x317 (bvuge ?x362 (_ bv1 32))))
 (=> $x317 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x278 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x251 (_ bv1 32))))
 (let ((?x362 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x317 (bvuge ?x362 (_ bv1 32))))
 (= $x317 $x46))))))
 ))
 (let (($x111 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x391 (= false false)))
 (let ((?x362 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x362 (_ bv0 32))))
 (=> $x207 $x391)))))
 ))
 (let (($x244 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x251 (_ bv0 32))))
 (let ((?x362 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x362 (_ bv0 32))))
 (= $x207 $x209))))))
 ))
 (let (($x223 (and $x244 $x111)))
 (let (($x289 (and $x223 $x278)))
 (let (($x195 (and $x289 $x34)))
 (let (($x356 (and $x195 $x107)))
 (let (($x7 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x357 (and $x7 $x356)))
 (let (($x193 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x290 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x397 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x397 (_ bv1 32))))
 (=> (and $x353 $x290) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x122 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x251 (_ bv1 32))))
 (let ((?x397 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x397 (_ bv1 32))))
 (let (($x290 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x290 (= $x353 $x46))))))))
 ))
 (let (($x162 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x391 (= false false)))
 (let (($x290 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x397 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (= ?x397 (_ bv0 32))))
 (=> (and $x12 $x290) $x391))))))
 ))
 (let (($x201 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x251 (_ bv0 32))))
 (let ((?x397 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (= ?x397 (_ bv0 32))))
 (let (($x290 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x290 (= $x12 $x209))))))))
 ))
 (let (($x231 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x251 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x46))))
 ))
 (let (($x19 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x391 (= false false)))
 (let ((?x288 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x288 (_ bv0 32))))
 (=> $x22 $x391)))))
 ))
 (let (($x196 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x251 (_ bv0 32))))
 (let ((?x288 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x288 (_ bv0 32))))
 (= $x22 $x209))))))
 ))
 (let (($x91 (and $x196 $x19)))
 (let (($x99 (and $x91 $x231)))
 (let (($x128 (and $x99 $x201)))
 (let (($x49 (and $x128 $x162)))
 (let (($x344 (and $x49 $x122)))
 (let (($x63 (and $x344 $x193)))
 (let (($x275 (and $x63 $x357)))
 (let (($x264 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x361 (and $x264 $x275)))
 (let (($x346 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x270 (and $x346 $x361)))
 (let (($x351 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x377 (and $x351 $x270)))
 (let (($x239 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x380 (and $x239 $x377)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x367 (and $x112 $x380)))
 (let (($x368 (and $x63 $x367)))
 (let (($x217 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x384 (and $x217 $x368)))
 (let (($x363 (and $x195 $x384)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x366 (and $x241 $x363)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x370 (and $x116 $x366)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x374 (and $x140 $x370)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x385 (and $x33 $x374)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x371 (and $x59 $x385)))
 (let (($x373 (=> $x371 $x387)))
 (not $x373))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 169 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x286 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x286)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x294 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x26 $x294)))
 (let (($x96 (and $x30 $x227)))
 (let (($x237 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x237 $x96)))
 (let (($x358 (= $x156 true)))
 (let (($x230 (= $x358 true)))
 (let ((?x176 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x17 (concat ?x272 (concat ?x80 (concat ?x160 ?x176)))))
 (let (($x292 (= ?x17 input.dst.llvm-%n)))
 (let (($x54 (= $x292 true)))
 (let (($x248 (= $x54 true)))
 (let (($x347 (= input.dst.llvm-%n ?x17)))
 (let (($x315 (and (and (and $x237 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x96) $x347)))
 (let (($x126 (= $x315 true)))
 (let (($x71 (= $x126 true)))
 (let (($x139 (= $x71 true)))
 (let (($x309 (and $x139 $x248)))
 (let (($x225 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x84 (and $x225 $x309)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x124 (and $x138 $x84)))
 (let (($x159 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x117 (and $x159 $x124)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x243 (and $x31 $x117)))
 (let (($x242 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x157 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x333 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x333 (_ bv1 32))))
 (=> (and $x94 $x157) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x265 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x196 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x196 (_ bv1 32))))
 (let ((?x333 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x333 (_ bv1 32))))
 (let (($x157 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x157 (= $x94 $x49))))))))
 ))
 (let (($x132 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x396 (= false false)))
 (let (($x157 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x333 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x333 (_ bv0 32))))
 (=> (and $x73 $x157) $x396))))))
 ))
 (let (($x135 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x196 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x196 (_ bv0 32))))
 (let ((?x333 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x333 (_ bv0 32))))
 (let (($x157 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x157 (= $x73 $x19))))))))
 ))
 (let (($x377 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x196 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x196 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x49))))
 ))
 (let (($x334 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x396 (= false false)))
 (let ((?x182 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x182 (_ bv0 32))))
 (=> $x168 $x396)))))
 ))
 (let (($x102 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x196 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x196 (_ bv0 32))))
 (let ((?x182 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x182 (_ bv0 32))))
 (= $x168 $x19))))))
 ))
 (let (($x208 (and $x102 $x334)))
 (let (($x380 (and $x208 $x377)))
 (let (($x167 (and $x380 $x135)))
 (let (($x250 (and $x167 $x132)))
 (let (($x106 (and $x250 $x265)))
 (let (($x115 (and $x106 $x242)))
 (let (($x247 (and $x115 $x243)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x233 (and $x111 $x247)))
 (let (($x302 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x185 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x185 (_ bv1 32))))
 (=> $x329 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x344 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x196 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x196 (_ bv1 32))))
 (let ((?x185 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x185 (_ bv1 32))))
 (= $x329 $x49))))))
 ))
 (let (($x282 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x396 (= false false)))
 (let ((?x185 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x185 (_ bv0 32))))
 (=> $x189 $x396)))))
 ))
 (let (($x290 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x196 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x196 (_ bv0 32))))
 (let ((?x185 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x185 (_ bv0 32))))
 (= $x189 $x19))))))
 ))
 (let (($x326 (and $x290 $x282)))
 (let (($x206 (and $x326 $x344)))
 (let (($x244 (and $x206 $x302)))
 (let (($x258 (and $x244 $x233)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x253 (and $x241 $x258)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x170 (and $x116 $x253)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x20 (and $x140 $x170)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x224 (and $x33 $x20)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x212 (and $x59 $x224)))
 (let (($x271 (=> $x212 $x230)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x286 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x286)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x294 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x26 $x294)))
 (let (($x96 (and $x30 $x227)))
 (let (($x237 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x237 $x96)))
 (let (($x358 (= $x156 true)))
 (let (($x230 (= $x358 true)))
 (let ((?x176 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x17 (concat ?x272 (concat ?x80 (concat ?x160 ?x176)))))
 (let (($x292 (= ?x17 input.dst.llvm-%n)))
 (let (($x54 (= $x292 true)))
 (let (($x248 (= $x54 true)))
 (let (($x347 (= input.dst.llvm-%n ?x17)))
 (let (($x315 (and (and (and $x237 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x96) $x347)))
 (let (($x126 (= $x315 true)))
 (let (($x71 (= $x126 true)))
 (let (($x139 (= $x71 true)))
 (let (($x309 (and $x139 $x248)))
 (let (($x225 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x84 (and $x225 $x309)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x124 (and $x138 $x84)))
 (let (($x159 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x117 (and $x159 $x124)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x243 (and $x31 $x117)))
 (let (($x242 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x157 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x333 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x333 (_ bv1 32))))
 (=> (and $x94 $x157) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x265 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x196 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x196 (_ bv1 32))))
 (let ((?x333 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x333 (_ bv1 32))))
 (let (($x157 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x157 (= $x94 $x49))))))))
 ))
 (let (($x132 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x396 (= false false)))
 (let (($x157 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x333 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x333 (_ bv0 32))))
 (=> (and $x73 $x157) $x396))))))
 ))
 (let (($x135 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x196 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x196 (_ bv0 32))))
 (let ((?x333 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x333 (_ bv0 32))))
 (let (($x157 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x157 (= $x73 $x19))))))))
 ))
 (let (($x377 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x196 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x196 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x49))))
 ))
 (let (($x334 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x396 (= false false)))
 (let ((?x182 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x182 (_ bv0 32))))
 (=> $x168 $x396)))))
 ))
 (let (($x102 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x196 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x196 (_ bv0 32))))
 (let ((?x182 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x182 (_ bv0 32))))
 (= $x168 $x19))))))
 ))
 (let (($x208 (and $x102 $x334)))
 (let (($x380 (and $x208 $x377)))
 (let (($x167 (and $x380 $x135)))
 (let (($x250 (and $x167 $x132)))
 (let (($x106 (and $x250 $x265)))
 (let (($x115 (and $x106 $x242)))
 (let (($x247 (and $x115 $x243)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x233 (and $x111 $x247)))
 (let (($x302 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x185 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x185 (_ bv1 32))))
 (=> $x329 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x344 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x196 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x196 (_ bv1 32))))
 (let ((?x185 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x185 (_ bv1 32))))
 (= $x329 $x49))))))
 ))
 (let (($x282 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x396 (= false false)))
 (let ((?x185 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x185 (_ bv0 32))))
 (=> $x189 $x396)))))
 ))
 (let (($x290 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x196 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x196 (_ bv0 32))))
 (let ((?x185 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x185 (_ bv0 32))))
 (= $x189 $x19))))))
 ))
 (let (($x326 (and $x290 $x282)))
 (let (($x206 (and $x326 $x344)))
 (let (($x244 (and $x206 $x302)))
 (let (($x258 (and $x244 $x233)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x253 (and $x241 $x258)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x170 (and $x116 $x253)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x20 (and $x140 $x170)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x224 (and $x33 $x20)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x212 (and $x59 $x224)))
 (let (($x271 (=> $x212 $x230)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x193 (bvneg ?x39)))
 (let (($x63 (= ?x193 input.dst.llvm-%n)))
 (let (($x7 (= $x63 true)))
 (let ((?x300 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x350 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x239 (concat ?x350 (concat ?x38 (concat ?x204 ?x300)))))
 (let (($x391 (= ?x239 input.dst.llvm-%n)))
 (let (($x335 (= $x391 true)))
 (let (($x67 (= $x335 true)))
 (let (($x118 (= input.dst.llvm-%n ?x239)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x81)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (and $x149 $x178)))
 (let (($x262 (and $x222 $x77)))
 (let (($x314 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x346 (and (and (and $x79 $x314) $x262) $x118)))
 (let (($x264 (= $x346 true)))
 (let (($x110 (= $x264 true)))
 (let (($x109 (= $x110 true)))
 (let (($x91 (and $x109 $x67)))
 (let (($x92 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x66 (and $x92 $x91)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x46 (and $x16 $x66)))
 (let (($x305 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x287 (and $x305 $x46)))
 (let (($x383 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x397 (and $x383 $x287)))
 (let (($x382 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x186 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x195 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x195 (_ bv1 32))))
 (=> (and $x356 $x186) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x368 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x207 (_ bv1 32))))
 (let ((?x195 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x195 (_ bv1 32))))
 (let (($x186 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x186 (= $x356 $x36))))))))
 ))
 (let (($x150 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x270 (= false false)))
 (let (($x186 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x195 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x195 (_ bv0 32))))
 (=> (and $x64 $x186) $x270))))))
 ))
 (let (($x70 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x207 (_ bv0 32))))
 (let ((?x195 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x195 (_ bv0 32))))
 (let (($x186 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x186 (= $x64 $x311))))))))
 ))
 (let (($x230 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x207 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x36))))
 ))
 (let (($x243 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x270 (= false false)))
 (let ((?x54 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x54 (_ bv0 32))))
 (=> $x248 $x270)))))
 ))
 (let (($x84 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x207 (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x54 (_ bv0 32))))
 (= $x248 $x311))))))
 ))
 (let (($x247 (and $x84 $x243)))
 (let (($x271 (and $x247 $x230)))
 (let (($x163 (and $x271 $x70)))
 (let (($x296 (and $x163 $x150)))
 (let (($x370 (and $x296 $x368)))
 (let (($x75 (and $x370 $x382)))
 (let (($x201 (and $x75 $x397)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x128 (and $x210 $x201)))
 (let (($x143 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x246 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x246 (_ bv1 32))))
 (=> $x167 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x82 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x207 (_ bv1 32))))
 (let ((?x246 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x246 (_ bv1 32))))
 (= $x167 $x36))))))
 ))
 (let (($x349 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x270 (= false false)))
 (let ((?x246 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x334 (= ?x246 (_ bv0 32))))
 (=> $x334 $x270)))))
 ))
 (let (($x361 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x207 (_ bv0 32))))
 (let ((?x246 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x334 (= ?x246 (_ bv0 32))))
 (= $x334 $x311))))))
 ))
 (let (($x263 (and $x361 $x349)))
 (let (($x132 (and $x263 $x82)))
 (let (($x242 (and $x132 $x143)))
 (let (($x330 (and $x242 $x128)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x85 (and $x241 $x330)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x162 (and $x116 $x85)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x353 (and $x140 $x162)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x131 (and $x33 $x353)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x323 (and $x59 $x131)))
 (let (($x88 (=> $x323 $x7)))
 (not $x88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x193 (bvneg ?x39)))
 (let (($x63 (= ?x193 input.dst.llvm-%n)))
 (let (($x7 (= $x63 true)))
 (let ((?x300 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x350 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x239 (concat ?x350 (concat ?x38 (concat ?x204 ?x300)))))
 (let (($x391 (= ?x239 input.dst.llvm-%n)))
 (let (($x335 (= $x391 true)))
 (let (($x67 (= $x335 true)))
 (let (($x118 (= input.dst.llvm-%n ?x239)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x81)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (and $x149 $x178)))
 (let (($x262 (and $x222 $x77)))
 (let (($x314 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x346 (and (and (and $x79 $x314) $x262) $x118)))
 (let (($x264 (= $x346 true)))
 (let (($x110 (= $x264 true)))
 (let (($x109 (= $x110 true)))
 (let (($x91 (and $x109 $x67)))
 (let (($x92 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x66 (and $x92 $x91)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x46 (and $x16 $x66)))
 (let (($x305 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x287 (and $x305 $x46)))
 (let (($x383 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x397 (and $x383 $x287)))
 (let (($x382 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x186 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x195 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x195 (_ bv1 32))))
 (=> (and $x356 $x186) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x368 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x207 (_ bv1 32))))
 (let ((?x195 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x195 (_ bv1 32))))
 (let (($x186 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x186 (= $x356 $x36))))))))
 ))
 (let (($x150 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x270 (= false false)))
 (let (($x186 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x195 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x195 (_ bv0 32))))
 (=> (and $x64 $x186) $x270))))))
 ))
 (let (($x70 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x207 (_ bv0 32))))
 (let ((?x195 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x195 (_ bv0 32))))
 (let (($x186 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x186 (= $x64 $x311))))))))
 ))
 (let (($x230 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x207 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x36))))
 ))
 (let (($x243 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x270 (= false false)))
 (let ((?x54 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x54 (_ bv0 32))))
 (=> $x248 $x270)))))
 ))
 (let (($x84 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x207 (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x54 (_ bv0 32))))
 (= $x248 $x311))))))
 ))
 (let (($x247 (and $x84 $x243)))
 (let (($x271 (and $x247 $x230)))
 (let (($x163 (and $x271 $x70)))
 (let (($x296 (and $x163 $x150)))
 (let (($x370 (and $x296 $x368)))
 (let (($x75 (and $x370 $x382)))
 (let (($x201 (and $x75 $x397)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x128 (and $x210 $x201)))
 (let (($x143 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x246 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x246 (_ bv1 32))))
 (=> $x167 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x82 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x207 (_ bv1 32))))
 (let ((?x246 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x246 (_ bv1 32))))
 (= $x167 $x36))))))
 ))
 (let (($x349 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x270 (= false false)))
 (let ((?x246 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x334 (= ?x246 (_ bv0 32))))
 (=> $x334 $x270)))))
 ))
 (let (($x361 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x207 (_ bv0 32))))
 (let ((?x246 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x334 (= ?x246 (_ bv0 32))))
 (= $x334 $x311))))))
 ))
 (let (($x263 (and $x361 $x349)))
 (let (($x132 (and $x263 $x82)))
 (let (($x242 (and $x132 $x143)))
 (let (($x330 (and $x242 $x128)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x85 (and $x241 $x330)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x162 (and $x116 $x85)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x353 (and $x140 $x162)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x131 (and $x33 $x353)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x323 (and $x59 $x131)))
 (let (($x88 (=> $x323 $x7)))
 (not $x88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x250 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x250)))
 (let (($x345 (= ?x94 input.spec-%var-n-1)))
 (let (($x316 (= $x345 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x301 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x357 (concat ?x23 (concat ?x179 (concat ?x301 ?x22)))))
 (let (($x290 (= input.dst.llvm-%n ?x357)))
 (let ((?x396 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x396)))
 (let ((?x372 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x310 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x372)))
 (let (($x371 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (and $x371 $x310)))
 (let (($x320 (and $x231 $x19)))
 (let (($x387 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x385 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x326 (and (and (and $x385 $x387) $x320) $x290)))
 (let (($x329 (= $x326 true)))
 (let (($x49 (= $x329 true)))
 (let (($x302 (= $x49 true)))
 (let (($x107 (= ?x357 input.dst.llvm-%n)))
 (let (($x363 (= $x107 true)))
 (let (($x374 (= $x363 true)))
 (let (($x362 (and $x374 $x302)))
 (let (($x161 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x244 (and $x161 $x362)))
 (let (($x288 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x111 (and $x288 $x244)))
 (let (($x307 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x108 (and $x307 $x111)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x182 (and $x261 $x108)))
 (let (($x394 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x294 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x42 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x42 (_ bv1 32))))
 (=> (and $x253 $x294) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x212 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x198 (_ bv1 32))))
 (let ((?x42 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x42 (_ bv1 32))))
 (let (($x294 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x294 (= $x253 $x256))))))))
 ))
 (let (($x176 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x358 (= false false)))
 (let (($x294 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x42 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x42 (_ bv0 32))))
 (=> (and $x41 $x294) $x358))))))
 ))
 (let (($x30 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x198 (_ bv0 32))))
 (let ((?x42 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x42 (_ bv0 32))))
 (let (($x294 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x294 (= $x41 $x115))))))))
 ))
 (let (($x193 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x198 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x256))))
 ))
 (let (($x397 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x358 (= false false)))
 (let ((?x335 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x335 (_ bv0 32))))
 (=> $x67 $x358)))))
 ))
 (let (($x66 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x198 (_ bv0 32))))
 (let ((?x335 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x335 (_ bv0 32))))
 (= $x67 $x115))))))
 ))
 (let (($x201 (and $x66 $x397)))
 (let (($x63 (and $x201 $x193)))
 (let (($x318 (and $x63 $x30)))
 (let (($x347 (and $x318 $x176)))
 (let (($x101 (and $x347 $x212)))
 (let (($x402 (and $x101 $x394)))
 (let (($x168 (and $x402 $x182)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x377 (and $x11 $x168)))
 (let (($x332 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x117 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x117 (_ bv1 32))))
 (=> $x163 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x97 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x198 (_ bv1 32))))
 (let ((?x117 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x117 (_ bv1 32))))
 (= $x163 $x256))))))
 ))
 (let (($x209 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x358 (= false false)))
 (let ((?x117 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x117 (_ bv0 32))))
 (=> $x243 $x358)))))
 ))
 (let (($x156 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x198 (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x117 (_ bv0 32))))
 (= $x243 $x115))))))
 ))
 (let (($x216 (and $x156 $x209)))
 (let (($x150 (and $x216 $x97)))
 (let (($x382 (and $x150 $x332)))
 (let (($x341 (and $x382 $x377)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x157 (and $x241 $x341)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x95 (and $x116 $x157)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x333 (and $x140 $x95)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x73 (and $x33 $x333)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x120 (and $x59 $x73)))
 (let (($x265 (=> $x120 $x316)))
 (not $x265))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x250 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x250)))
 (let (($x345 (= ?x94 input.spec-%var-n-1)))
 (let (($x316 (= $x345 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x301 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x357 (concat ?x23 (concat ?x179 (concat ?x301 ?x22)))))
 (let (($x290 (= input.dst.llvm-%n ?x357)))
 (let ((?x396 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x396)))
 (let ((?x372 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x310 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x372)))
 (let (($x371 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (and $x371 $x310)))
 (let (($x320 (and $x231 $x19)))
 (let (($x387 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x385 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x326 (and (and (and $x385 $x387) $x320) $x290)))
 (let (($x329 (= $x326 true)))
 (let (($x49 (= $x329 true)))
 (let (($x302 (= $x49 true)))
 (let (($x107 (= ?x357 input.dst.llvm-%n)))
 (let (($x363 (= $x107 true)))
 (let (($x374 (= $x363 true)))
 (let (($x362 (and $x374 $x302)))
 (let (($x161 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x244 (and $x161 $x362)))
 (let (($x288 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x111 (and $x288 $x244)))
 (let (($x307 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x108 (and $x307 $x111)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x182 (and $x261 $x108)))
 (let (($x394 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x294 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x42 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x42 (_ bv1 32))))
 (=> (and $x253 $x294) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda74Var Lambda75Var) (_ bv0 32)))))))
 ))
 (let (($x212 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x198 (_ bv1 32))))
 (let ((?x42 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x42 (_ bv1 32))))
 (let (($x294 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x294 (= $x253 $x256))))))))
 ))
 (let (($x176 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let (($x358 (= false false)))
 (let (($x294 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x42 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x42 (_ bv0 32))))
 (=> (and $x41 $x294) $x358))))))
 ))
 (let (($x30 (forall ((Lambda74Var (_ BitVec 32)) (Lambda75Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x198 (_ bv0 32))))
 (let ((?x42 (ite (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda74Var Lambda75Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x42 (_ bv0 32))))
 (let (($x294 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x294 (= $x41 $x115))))))))
 ))
 (let (($x193 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x198 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x256))))
 ))
 (let (($x397 (forall ((Lambda74Var (_ BitVec 32)) )(let (($x358 (= false false)))
 (let ((?x335 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x335 (_ bv0 32))))
 (=> $x67 $x358)))))
 ))
 (let (($x66 (forall ((Lambda74Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x198 (_ bv0 32))))
 (let ((?x335 (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda74Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x335 (_ bv0 32))))
 (= $x67 $x115))))))
 ))
 (let (($x201 (and $x66 $x397)))
 (let (($x63 (and $x201 $x193)))
 (let (($x318 (and $x63 $x30)))
 (let (($x347 (and $x318 $x176)))
 (let (($x101 (and $x347 $x212)))
 (let (($x402 (and $x101 $x394)))
 (let (($x168 (and $x402 $x182)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x377 (and $x11 $x168)))
 (let (($x332 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x117 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x117 (_ bv1 32))))
 (=> $x163 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda77Var) (_ bv0 32))))))
 ))
 (let (($x97 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x198 (_ bv1 32))))
 (let ((?x117 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x117 (_ bv1 32))))
 (= $x163 $x256))))))
 ))
 (let (($x209 (forall ((Lambda77Var (_ BitVec 32)) )(let (($x358 (= false false)))
 (let ((?x117 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x117 (_ bv0 32))))
 (=> $x243 $x358)))))
 ))
 (let (($x156 (forall ((Lambda77Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x198 (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda77Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x117 (_ bv0 32))))
 (= $x243 $x115))))))
 ))
 (let (($x216 (and $x156 $x209)))
 (let (($x150 (and $x216 $x97)))
 (let (($x382 (and $x150 $x332)))
 (let (($x341 (and $x382 $x377)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x157 (and $x241 $x341)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x95 (and $x116 $x157)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x333 (and $x140 $x95)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x73 (and $x33 $x333)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x120 (and $x59 $x73)))
 (let (($x265 (=> $x120 $x316)))
 (not $x265))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285812/query
