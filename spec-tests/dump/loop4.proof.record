==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= ?x8 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x7 $x6)))
 (let (($x19 (and $x9 $x12)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= ?x8 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x7 $x6)))
 (let (($x19 (and $x9 $x12)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (= true false)))
 (let (($x189 (= $x188 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x172 (concat ?x171 (concat ?x168 (concat ?x164 ?x162)))))
 (let (($x173 (= ?x172 input.dst.llvm-%n)))
 (let (($x174 (= $x173 true)))
 (let (($x156 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x148)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (and $x143 $x146)))
 (let (($x150 (and $x147 $x149)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x129 $x150)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x142 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x136)))))))
 (let (($x152 (and $x142 $x151)))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x159 (and $x154 $x158)))
 (let (($x175 (and $x159 $x174)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x176 (and $x125 $x175)))
 (let (($x122 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x177 (and $x122 $x176)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x178 (and $x120 $x177)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x179 (and $x118 $x178)))
 (let (($x115 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x88 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x77 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x83 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x83 (_ bv1 32))))
 (=> (and $x101 $x88) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x104 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x83 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x83 (_ bv1 32))))
 (let (($x88 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x88 (= $x101 false)))))))
 ))
 (let (($x96 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x42 (= false false)))
 (let (($x88 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x77 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x83 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x83 (_ bv0 32))))
 (=> (and $x84 $x88) $x42)))))))
 ))
 (let (($x90 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x83 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x83 (_ bv0 32))))
 (let (($x88 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x88 (= $x84 true)))))))
 ))
 (let (($x71 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x65 (forall ((Lambda68 (_ BitVec 32)) )(let (($x42 (= false false)))
 (let (($x54 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x59 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x59 (_ bv0 32))))
 (=> $x60 $x42))))))
 ))
 (let (($x62 (forall ((Lambda68 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x59 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x59 (_ bv0 32))))
 (= $x60 true)))))
 ))
 (let (($x66 (and $x62 $x65)))
 (let (($x72 (and $x66 $x71)))
 (let (($x91 (and $x72 $x90)))
 (let (($x97 (and $x91 $x96)))
 (let (($x105 (and $x97 $x104)))
 (let (($x116 (and $x105 $x115)))
 (let (($x180 (and $x116 $x179)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x181 (and $x51 $x180)))
 (let (($x31 (forall ((Lambda79 (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x30 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x30 (_ bv1 32))))
 (=> $x5 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x16 (forall ((Lambda79 (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x30 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x30 (_ bv1 32))))
 (= $x5 false)))))
 ))
 (let (($x28 (forall ((Lambda79 (_ BitVec 32)) )(let (($x42 (= false false)))
 (let (($x17 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x30 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x30 (_ bv0 32))))
 (=> $x29 $x42))))))
 ))
 (let (($x19 (forall ((Lambda79 (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x30 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x30 (_ bv0 32))))
 (= $x29 true)))))
 ))
 (let (($x8 (and $x19 $x28)))
 (let (($x37 (and $x8 $x16)))
 (let (($x49 (and $x37 $x31)))
 (let (($x182 (and $x49 $x181)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x183 (and $x39 $x182)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x184 (and $x26 $x183)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x185 (and $x12 $x184)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x186 (and $x20 $x185)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x187 (and $x18 $x186)))
 (let (($x190 (=> $x187 $x189)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (= true false)))
 (let (($x189 (= $x188 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x172 (concat ?x171 (concat ?x168 (concat ?x164 ?x162)))))
 (let (($x173 (= ?x172 input.dst.llvm-%n)))
 (let (($x174 (= $x173 true)))
 (let (($x156 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x148)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (and $x143 $x146)))
 (let (($x150 (and $x147 $x149)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x129 $x150)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x142 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x136)))))))
 (let (($x152 (and $x142 $x151)))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x159 (and $x154 $x158)))
 (let (($x175 (and $x159 $x174)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x176 (and $x125 $x175)))
 (let (($x122 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x177 (and $x122 $x176)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x178 (and $x120 $x177)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x179 (and $x118 $x178)))
 (let (($x115 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x88 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x77 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x83 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x83 (_ bv1 32))))
 (=> (and $x101 $x88) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x104 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x83 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x83 (_ bv1 32))))
 (let (($x88 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x88 (= $x101 false)))))))
 ))
 (let (($x96 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x42 (= false false)))
 (let (($x88 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x77 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x83 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x83 (_ bv0 32))))
 (=> (and $x84 $x88) $x42)))))))
 ))
 (let (($x90 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x83 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x83 (_ bv0 32))))
 (let (($x88 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x88 (= $x84 true)))))))
 ))
 (let (($x71 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x65 (forall ((Lambda68 (_ BitVec 32)) )(let (($x42 (= false false)))
 (let (($x54 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x59 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x59 (_ bv0 32))))
 (=> $x60 $x42))))))
 ))
 (let (($x62 (forall ((Lambda68 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x59 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x59 (_ bv0 32))))
 (= $x60 true)))))
 ))
 (let (($x66 (and $x62 $x65)))
 (let (($x72 (and $x66 $x71)))
 (let (($x91 (and $x72 $x90)))
 (let (($x97 (and $x91 $x96)))
 (let (($x105 (and $x97 $x104)))
 (let (($x116 (and $x105 $x115)))
 (let (($x180 (and $x116 $x179)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x181 (and $x51 $x180)))
 (let (($x31 (forall ((Lambda79 (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x30 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x30 (_ bv1 32))))
 (=> $x5 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x16 (forall ((Lambda79 (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x30 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x30 (_ bv1 32))))
 (= $x5 false)))))
 ))
 (let (($x28 (forall ((Lambda79 (_ BitVec 32)) )(let (($x42 (= false false)))
 (let (($x17 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x30 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x30 (_ bv0 32))))
 (=> $x29 $x42))))))
 ))
 (let (($x19 (forall ((Lambda79 (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x30 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x30 (_ bv0 32))))
 (= $x29 true)))))
 ))
 (let (($x8 (and $x19 $x28)))
 (let (($x37 (and $x8 $x16)))
 (let (($x49 (and $x37 $x31)))
 (let (($x182 (and $x49 $x181)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x183 (and $x39 $x182)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x184 (and $x26 $x183)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x185 (and $x12 $x184)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x186 (and $x20 $x185)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x187 (and $x18 $x186)))
 (let (($x190 (=> $x187 $x189)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7e1ec50)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7e1ec53)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7e1ec50)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x191)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x186 $x189)))
 (let (($x161 (and $x190 $x127)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x185 $x161)))
 (let (($x177 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x183 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x176 $x177)))))))
 (let (($x98 (and $x183 $x41)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x9 (concat ?x38 (concat ?x25 ?x48)))))
 (let (($x40 (= input.dst.llvm-%n ?x13)))
 (let (($x108 (and (and (and $x183 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x41) $x40)))
 (let (($x53 (= $x108 true)))
 (let (($x56 (= $x53 true)))
 (let (($x168 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x57 (and $x168 $x56)))
 (let (($x171 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x58 (and $x171 $x57)))
 (let (($x160 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x63 (and $x160 $x58)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x67 (and $x158 $x63)))
 (let (($x155 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x130 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x115 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x121 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x121 (_ bv1 32))))
 (=> (and $x128 $x130) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x144 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x121 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x121 (_ bv1 32))))
 (let (($x130 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x130 (= $x128 false)))))))
 ))
 (let (($x137 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x130 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x115 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x121 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x121 (_ bv0 32))))
 (=> (and $x122 $x130) $x33)))))))
 ))
 (let (($x141 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x121 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x121 (_ bv0 32))))
 (let (($x130 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x130 (= $x122 true)))))))
 ))
 (let (($x104 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x95 (forall ((Lambda68 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x51 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x84 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x84 (_ bv0 32))))
 (=> $x85 $x33))))))
 ))
 (let (($x90 (forall ((Lambda68 (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x84 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x84 (_ bv0 32))))
 (= $x85 true)))))
 ))
 (let (($x96 (and $x90 $x95)))
 (let (($x105 (and $x96 $x104)))
 (let (($x132 (and $x105 $x141)))
 (let (($x138 (and $x132 $x137)))
 (let (($x145 (and $x138 $x144)))
 (let (($x156 (and $x145 $x155)))
 (let (($x68 (and $x156 $x67)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x75 (and $x65 $x68)))
 (let (($x17 (forall ((Lambda79 (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x39 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x16 (bvuge ?x39 (_ bv1 32))))
 (=> $x16 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x61 (forall ((Lambda79 (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x39 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x16 (bvuge ?x39 (_ bv1 32))))
 (= $x16 false)))))
 ))
 (let (($x43 (forall ((Lambda79 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x28 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x39 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (= ?x39 (_ bv0 32))))
 (=> $x35 $x33))))))
 ))
 (let (($x37 (forall ((Lambda79 (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x39 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (= ?x39 (_ bv0 32))))
 (= $x35 true)))))
 ))
 (let (($x30 (and $x37 $x43)))
 (let (($x72 (and $x30 $x61)))
 (let (($x59 (and $x72 $x17)))
 (let (($x79 (and $x59 $x75)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x80 (and $x19 $x79)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x81 (and $x36 $x80)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x82 (and $x11 $x81)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x92 (and $x126 $x82)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x93 (and $x21 $x92)))
 (let (($x106 (=> $x93 $x100)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x191)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x186 $x189)))
 (let (($x161 (and $x190 $x127)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x185 $x161)))
 (let (($x177 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x183 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x176 $x177)))))))
 (let (($x98 (and $x183 $x41)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x9 (concat ?x38 (concat ?x25 ?x48)))))
 (let (($x40 (= input.dst.llvm-%n ?x13)))
 (let (($x108 (and (and (and $x183 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x41) $x40)))
 (let (($x53 (= $x108 true)))
 (let (($x56 (= $x53 true)))
 (let (($x168 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x57 (and $x168 $x56)))
 (let (($x171 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x58 (and $x171 $x57)))
 (let (($x160 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x63 (and $x160 $x58)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x67 (and $x158 $x63)))
 (let (($x155 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x130 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x115 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x121 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x121 (_ bv1 32))))
 (=> (and $x128 $x130) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x144 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x121 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x121 (_ bv1 32))))
 (let (($x130 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x130 (= $x128 false)))))))
 ))
 (let (($x137 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x130 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x115 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x121 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x121 (_ bv0 32))))
 (=> (and $x122 $x130) $x33)))))))
 ))
 (let (($x141 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x121 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x121 (_ bv0 32))))
 (let (($x130 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x130 (= $x122 true)))))))
 ))
 (let (($x104 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x95 (forall ((Lambda68 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x51 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x84 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x84 (_ bv0 32))))
 (=> $x85 $x33))))))
 ))
 (let (($x90 (forall ((Lambda68 (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x84 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x84 (_ bv0 32))))
 (= $x85 true)))))
 ))
 (let (($x96 (and $x90 $x95)))
 (let (($x105 (and $x96 $x104)))
 (let (($x132 (and $x105 $x141)))
 (let (($x138 (and $x132 $x137)))
 (let (($x145 (and $x138 $x144)))
 (let (($x156 (and $x145 $x155)))
 (let (($x68 (and $x156 $x67)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x75 (and $x65 $x68)))
 (let (($x17 (forall ((Lambda79 (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x39 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x16 (bvuge ?x39 (_ bv1 32))))
 (=> $x16 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x61 (forall ((Lambda79 (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x39 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x16 (bvuge ?x39 (_ bv1 32))))
 (= $x16 false)))))
 ))
 (let (($x43 (forall ((Lambda79 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x28 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x39 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (= ?x39 (_ bv0 32))))
 (=> $x35 $x33))))))
 ))
 (let (($x37 (forall ((Lambda79 (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x39 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (= ?x39 (_ bv0 32))))
 (= $x35 true)))))
 ))
 (let (($x30 (and $x37 $x43)))
 (let (($x72 (and $x30 $x61)))
 (let (($x59 (and $x72 $x17)))
 (let (($x79 (and $x59 $x75)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x80 (and $x19 $x79)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x81 (and $x36 $x80)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x82 (and $x11 $x81)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x92 (and $x126 $x82)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x93 (and $x21 $x92)))
 (let (($x106 (=> $x93 $x100)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x146 (= $x142 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x31 (concat ?x22 (concat ?x86 ?x52)))))
 (let (($x116 (= input.dst.llvm-%n ?x26)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x32)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x100 $x163)))
 (let (($x8 (and $x164 $x42)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x99 $x8)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x75)))))))
 (let (($x44 (and (and (and $x93 $x53) $x73) $x116)))
 (let (($x69 (= $x44 true)))
 (let (($x83 (= $x69 true)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x91 (and $x14 $x83)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x97 (and $x25 $x91)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x101 (and $x38 $x97)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x113 (and $x47 $x101)))
 (let (($x15 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x172 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x156 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x171 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x171 (_ bv1 32))))
 (=> (and $x165 $x172) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x185 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x171 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x171 (_ bv1 32))))
 (let (($x172 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x172 (= $x165 false)))))))
 ))
 (let (($x179 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x54 (= false false)))
 (let (($x172 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x156 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x171 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x171 (_ bv0 32))))
 (=> (and $x166 $x172) $x54)))))))
 ))
 (let (($x173 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x171 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x171 (_ bv0 32))))
 (let (($x172 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x172 (= $x166 true)))))))
 ))
 (let (($x145 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x137 (forall ((Lambda68 (_ BitVec 32)) )(let (($x54 (= false false)))
 (let (($x125 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x123 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x123 (_ bv0 32))))
 (=> $x131 $x54))))))
 ))
 (let (($x132 (forall ((Lambda68 (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x123 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x123 (_ bv0 32))))
 (= $x131 true)))))
 ))
 (let (($x138 (and $x132 $x137)))
 (let (($x147 (and $x138 $x145)))
 (let (($x175 (and $x147 $x173)))
 (let (($x180 (and $x175 $x179)))
 (let (($x186 (and $x180 $x185)))
 (let (($x7 (and $x186 $x15)))
 (let (($x117 (and $x7 $x113)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x118 (and $x105 $x117)))
 (let (($x102 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x12 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x12 (_ bv1 32))))
 (=> $x59 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x65 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x12 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x12 (_ bv1 32))))
 (= $x59 false)))))
 ))
 (let (($x70 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (= false false)))
 (let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x12 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x12 (_ bv0 32))))
 (=> $x43 $x54))))))
 ))
 (let (($x16 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x12 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x12 (_ bv0 32))))
 (= $x43 true)))))
 ))
 (let (($x60 (and $x16 $x70)))
 (let (($x51 (and $x60 $x65)))
 (let (($x103 (and $x51 $x102)))
 (let (($x119 (and $x103 $x118)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x120 (and $x19 $x119)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x134 (and $x36 $x120)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x135 (and $x11 $x134)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x139 (and $x126 $x135)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x140 (and $x21 $x139)))
 (let (($x149 (=> $x140 $x146)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x146 (= $x142 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x31 (concat ?x22 (concat ?x86 ?x52)))))
 (let (($x116 (= input.dst.llvm-%n ?x26)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x32)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x100 $x163)))
 (let (($x8 (and $x164 $x42)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x99 $x8)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x75)))))))
 (let (($x44 (and (and (and $x93 $x53) $x73) $x116)))
 (let (($x69 (= $x44 true)))
 (let (($x83 (= $x69 true)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x91 (and $x14 $x83)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x97 (and $x25 $x91)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x101 (and $x38 $x97)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x113 (and $x47 $x101)))
 (let (($x15 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x172 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x156 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x171 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x171 (_ bv1 32))))
 (=> (and $x165 $x172) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x185 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x171 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x171 (_ bv1 32))))
 (let (($x172 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x172 (= $x165 false)))))))
 ))
 (let (($x179 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x54 (= false false)))
 (let (($x172 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x156 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x171 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x171 (_ bv0 32))))
 (=> (and $x166 $x172) $x54)))))))
 ))
 (let (($x173 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x171 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x171 (_ bv0 32))))
 (let (($x172 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x172 (= $x166 true)))))))
 ))
 (let (($x145 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x137 (forall ((Lambda68 (_ BitVec 32)) )(let (($x54 (= false false)))
 (let (($x125 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x123 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x123 (_ bv0 32))))
 (=> $x131 $x54))))))
 ))
 (let (($x132 (forall ((Lambda68 (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x123 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x123 (_ bv0 32))))
 (= $x131 true)))))
 ))
 (let (($x138 (and $x132 $x137)))
 (let (($x147 (and $x138 $x145)))
 (let (($x175 (and $x147 $x173)))
 (let (($x180 (and $x175 $x179)))
 (let (($x186 (and $x180 $x185)))
 (let (($x7 (and $x186 $x15)))
 (let (($x117 (and $x7 $x113)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x118 (and $x105 $x117)))
 (let (($x102 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x12 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x12 (_ bv1 32))))
 (=> $x59 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x65 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x12 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x12 (_ bv1 32))))
 (= $x59 false)))))
 ))
 (let (($x70 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (= false false)))
 (let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x12 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x12 (_ bv0 32))))
 (=> $x43 $x54))))))
 ))
 (let (($x16 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x12 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x12 (_ bv0 32))))
 (= $x43 true)))))
 ))
 (let (($x60 (and $x16 $x70)))
 (let (($x51 (and $x60 $x65)))
 (let (($x103 (and $x51 $x102)))
 (let (($x119 (and $x103 $x118)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x120 (and $x19 $x119)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x134 (and $x36 $x120)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x135 (and $x11 $x134)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x139 (and $x126 $x135)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x140 (and $x21 $x139)))
 (let (($x149 (=> $x140 $x146)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x190 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x190)))
 (let (($x127 (= ?x191 input.dst.llvm-%n)))
 (let (($x151 (= $x127 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x130 (concat ?x84 (concat ?x33 ?x62)))))
 (let (($x189 (= input.dst.llvm-%n ?x157)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x71)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x149 $x40)))
 (let (($x107 (and $x112 $x35)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x146 $x107)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x118)))))))
 (let (($x121 (and (and (and $x140 $x69) $x89) $x189)))
 (let (($x122 (= $x121 true)))
 (let (($x133 (= $x122 true)))
 (let (($x66 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x128 (and $x66 $x133)))
 (let (($x86 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x129 (and $x86 $x128)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x154 (and $x22 $x129)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x158 (and $x34 $x154)))
 (let (($x76 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x57 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x15 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x74 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x74 (_ bv1 32))))
 (=> (and $x53 $x57) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x99 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x74 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x74 (_ bv1 32))))
 (let (($x57 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x57 (= $x53 false)))))))
 ))
 (let (($x80 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x59 (= false false)))
 (let (($x57 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x15 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x74 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x74 (_ bv0 32))))
 (=> (and $x25 $x57) $x59)))))))
 ))
 (let (($x58 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x74 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x74 (_ bv0 32))))
 (let (($x57 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x57 (= $x25 true)))))))
 ))
 (let (($x185 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x178 (forall ((Lambda68 (_ BitVec 32)) )(let (($x59 (= false false)))
 (let (($x168 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x166 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x166 (_ bv0 32))))
 (=> $x167 $x59))))))
 ))
 (let (($x173 (forall ((Lambda68 (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x166 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x166 (_ bv0 32))))
 (= $x167 true)))))
 ))
 (let (($x179 (and $x173 $x178)))
 (let (($x186 (and $x179 $x185)))
 (let (($x67 (and $x186 $x58)))
 (let (($x81 (and $x67 $x80)))
 (let (($x100 (and $x81 $x99)))
 (let (($x50 (and $x100 $x76)))
 (let (($x159 (and $x50 $x158)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x160 (and $x145 $x159)))
 (let (($x138 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x54 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x54 (_ bv1 32))))
 (=> $x102 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x104 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x54 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x54 (_ bv1 32))))
 (= $x102 false)))))
 ))
 (let (($x51 (forall ((Lambda79 (_ BitVec 32)) )(let (($x59 (= false false)))
 (let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x54 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x54 (_ bv0 32))))
 (=> $x72 $x59))))))
 ))
 (let (($x60 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x54 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x54 (_ bv0 32))))
 (= $x72 true)))))
 ))
 (let (($x85 (and $x60 $x51)))
 (let (($x105 (and $x85 $x104)))
 (let (($x143 (and $x105 $x138)))
 (let (($x170 (and $x143 $x160)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x176 (and $x45 $x170)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x174 (and $x5 $x176)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x181 (and $x10 $x174)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x183 (and $x18 $x181)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x162 (and $x48 $x183)))
 (let (($x110 (=> $x162 $x151)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x190 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x190)))
 (let (($x127 (= ?x191 input.dst.llvm-%n)))
 (let (($x151 (= $x127 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x130 (concat ?x84 (concat ?x33 ?x62)))))
 (let (($x189 (= input.dst.llvm-%n ?x157)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x71)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x149 $x40)))
 (let (($x107 (and $x112 $x35)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x146 $x107)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x118)))))))
 (let (($x121 (and (and (and $x140 $x69) $x89) $x189)))
 (let (($x122 (= $x121 true)))
 (let (($x133 (= $x122 true)))
 (let (($x66 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x128 (and $x66 $x133)))
 (let (($x86 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x129 (and $x86 $x128)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x154 (and $x22 $x129)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x158 (and $x34 $x154)))
 (let (($x76 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x57 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x15 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x74 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x74 (_ bv1 32))))
 (=> (and $x53 $x57) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x99 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x74 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x74 (_ bv1 32))))
 (let (($x57 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x57 (= $x53 false)))))))
 ))
 (let (($x80 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x59 (= false false)))
 (let (($x57 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x15 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x74 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x74 (_ bv0 32))))
 (=> (and $x25 $x57) $x59)))))))
 ))
 (let (($x58 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x74 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x74 (_ bv0 32))))
 (let (($x57 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x57 (= $x25 true)))))))
 ))
 (let (($x185 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x178 (forall ((Lambda68 (_ BitVec 32)) )(let (($x59 (= false false)))
 (let (($x168 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x166 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x166 (_ bv0 32))))
 (=> $x167 $x59))))))
 ))
 (let (($x173 (forall ((Lambda68 (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x166 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x166 (_ bv0 32))))
 (= $x167 true)))))
 ))
 (let (($x179 (and $x173 $x178)))
 (let (($x186 (and $x179 $x185)))
 (let (($x67 (and $x186 $x58)))
 (let (($x81 (and $x67 $x80)))
 (let (($x100 (and $x81 $x99)))
 (let (($x50 (and $x100 $x76)))
 (let (($x159 (and $x50 $x158)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x160 (and $x145 $x159)))
 (let (($x138 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x54 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x54 (_ bv1 32))))
 (=> $x102 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x104 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x54 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x54 (_ bv1 32))))
 (= $x102 false)))))
 ))
 (let (($x51 (forall ((Lambda79 (_ BitVec 32)) )(let (($x59 (= false false)))
 (let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x54 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x54 (_ bv0 32))))
 (=> $x72 $x59))))))
 ))
 (let (($x60 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x54 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x54 (_ bv0 32))))
 (= $x72 true)))))
 ))
 (let (($x85 (and $x60 $x51)))
 (let (($x105 (and $x85 $x104)))
 (let (($x143 (and $x105 $x138)))
 (let (($x170 (and $x143 $x160)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x176 (and $x45 $x170)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x174 (and $x5 $x176)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x181 (and $x10 $x174)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x183 (and $x18 $x181)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x162 (and $x48 $x183)))
 (let (($x110 (=> $x162 $x151)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x93)))
 (let (($x106 (= ?x108 input.spec-%var-n-1)))
 (let (($x164 (= $x106 true)))
 (let ((?x161 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x125 (concat ?x6 (concat ?x114 ?x161)))))
 (let (($x132 (= input.dst.llvm-%n ?x141)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x26)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x191 $x110)))
 (let (($x88 (and $x111 $x116)))
 (let (($x190 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x190 $x88)))
 (let (($x122 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x159 $x160)))))))
 (let (($x163 (and (and (and $x162 $x122) $x19) $x132)))
 (let (($x155 (= $x163 true)))
 (let (($x172 (= $x155 true)))
 (let (($x90 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x156 (and $x90 $x172)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x171 (and $x33 $x156)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x175 (and $x84 $x171)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x180 (and $x64 $x175)))
 (let (($x153 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x91 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x50 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x86 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x86 (_ bv1 32))))
 (=> (and $x69 $x91) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x146 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x86 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x86 (_ bv1 32))))
 (let (($x91 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x91 (= $x69 false)))))))
 ))
 (let (($x120 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x103 (= false false)))
 (let (($x91 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x50 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x86 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x86 (_ bv0 32))))
 (=> (and $x52 $x91) $x103)))))))
 ))
 (let (($x97 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x86 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x86 (_ bv0 32))))
 (let (($x91 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x91 (= $x52 true)))))))
 ))
 (let (($x100 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x80 (forall ((Lambda68 (_ BitVec 32)) )(let (($x103 (= false false)))
 (let (($x56 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x46 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x46 (_ bv0 32))))
 (=> $x92 $x103))))))
 ))
 (let (($x67 (forall ((Lambda68 (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x46 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x46 (_ bv0 32))))
 (= $x92 true)))))
 ))
 (let (($x81 (and $x67 $x80)))
 (let (($x109 (and $x81 $x100)))
 (let (($x113 (and $x109 $x97)))
 (let (($x134 (and $x113 $x120)))
 (let (($x149 (and $x134 $x146)))
 (let (($x94 (and $x149 $x153)))
 (let (($x165 (and $x94 $x180)))
 (let (($x186 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x41 (and $x186 $x165)))
 (let (($x55 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x65 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x65 (_ bv1 32))))
 (=> $x143 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x145 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x65 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x65 (_ bv1 32))))
 (= $x143 false)))))
 ))
 (let (($x123 (forall ((Lambda79 (_ BitVec 32)) )(let (($x103 (= false false)))
 (let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x65 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x65 (_ bv0 32))))
 (=> $x51 $x103))))))
 ))
 (let (($x102 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x65 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x65 (_ bv0 32))))
 (= $x51 true)))))
 ))
 (let (($x136 (and $x102 $x123)))
 (let (($x168 (and $x136 $x145)))
 (let (($x184 (and $x168 $x55)))
 (let (($x9 (and $x184 $x41)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x47 (and $x45 $x9)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x27 (and $x5 $x47)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x38 (and $x10 $x27)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x68 (and $x18 $x38)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x63 (and $x48 $x68)))
 (let (($x32 (=> $x63 $x164)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x93)))
 (let (($x106 (= ?x108 input.spec-%var-n-1)))
 (let (($x164 (= $x106 true)))
 (let ((?x161 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x125 (concat ?x6 (concat ?x114 ?x161)))))
 (let (($x132 (= input.dst.llvm-%n ?x141)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x26)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x191 $x110)))
 (let (($x88 (and $x111 $x116)))
 (let (($x190 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x190 $x88)))
 (let (($x122 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x159 $x160)))))))
 (let (($x163 (and (and (and $x162 $x122) $x19) $x132)))
 (let (($x155 (= $x163 true)))
 (let (($x172 (= $x155 true)))
 (let (($x90 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x156 (and $x90 $x172)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x171 (and $x33 $x156)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x175 (and $x84 $x171)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x180 (and $x64 $x175)))
 (let (($x153 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x91 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x50 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x86 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x86 (_ bv1 32))))
 (=> (and $x69 $x91) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x146 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x86 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x86 (_ bv1 32))))
 (let (($x91 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x91 (= $x69 false)))))))
 ))
 (let (($x120 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x103 (= false false)))
 (let (($x91 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x50 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x86 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x86 (_ bv0 32))))
 (=> (and $x52 $x91) $x103)))))))
 ))
 (let (($x97 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x86 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x86 (_ bv0 32))))
 (let (($x91 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x91 (= $x52 true)))))))
 ))
 (let (($x100 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x80 (forall ((Lambda68 (_ BitVec 32)) )(let (($x103 (= false false)))
 (let (($x56 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x46 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x46 (_ bv0 32))))
 (=> $x92 $x103))))))
 ))
 (let (($x67 (forall ((Lambda68 (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x46 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x46 (_ bv0 32))))
 (= $x92 true)))))
 ))
 (let (($x81 (and $x67 $x80)))
 (let (($x109 (and $x81 $x100)))
 (let (($x113 (and $x109 $x97)))
 (let (($x134 (and $x113 $x120)))
 (let (($x149 (and $x134 $x146)))
 (let (($x94 (and $x149 $x153)))
 (let (($x165 (and $x94 $x180)))
 (let (($x186 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x41 (and $x186 $x165)))
 (let (($x55 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x65 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x65 (_ bv1 32))))
 (=> $x143 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x145 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x65 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x65 (_ bv1 32))))
 (= $x143 false)))))
 ))
 (let (($x123 (forall ((Lambda79 (_ BitVec 32)) )(let (($x103 (= false false)))
 (let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x65 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x65 (_ bv0 32))))
 (=> $x51 $x103))))))
 ))
 (let (($x102 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x65 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x65 (_ bv0 32))))
 (= $x51 true)))))
 ))
 (let (($x136 (and $x102 $x123)))
 (let (($x168 (and $x136 $x145)))
 (let (($x184 (and $x168 $x55)))
 (let (($x9 (and $x184 $x41)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x47 (and $x45 $x9)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x27 (and $x5 $x47)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x38 (and $x10 $x27)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x68 (and $x18 $x38)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x63 (and $x48 $x68)))
 (let (($x32 (=> $x63 $x164)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x135 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x140 (= $x135 true)))
 (let (($x44 (= $x140 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x173 (concat ?x166 (concat ?x104 (concat ?x147 ?x73)))))
 (let (($x177 (= input.dst.llvm-%n ?x173)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x42)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x93 $x164)))
 (let (($x152 (and $x32 $x189)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x82 $x152)))
 (let (($x163 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x180 $x165)))))))
 (let (($x40 (and (and (and $x68 $x163) $x28) $x177)))
 (let (($x14 (= $x40 true)))
 (let (($x15 (= $x14 true)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x74 (and $x43 $x15)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x25 (and $x131 $x74)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x75 (and $x16 $x25)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x53 (and $x125 $x75)))
 (let (($x7 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x133 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x153 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x37 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x37 (_ bv1 32))))
 (=> (and $x121 $x133) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x187 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x37 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x37 (_ bv1 32))))
 (let (($x133 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x133 (= $x121 false)))))))
 ))
 (let (($x170 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x143 (= false false)))
 (let (($x133 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x153 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x37 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x37 (_ bv0 32))))
 (=> (and $x33 $x133) $x143)))))))
 ))
 (let (($x183 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x37 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x37 (_ bv0 32))))
 (let (($x133 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x133 (= $x33 true)))))))
 ))
 (let (($x146 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x119 (forall ((Lambda68 (_ BitVec 32)) )(let (($x143 (= false false)))
 (let (($x66 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x52 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x52 (_ bv0 32))))
 (=> $x77 $x143))))))
 ))
 (let (($x97 (forall ((Lambda68 (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x52 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x52 (_ bv0 32))))
 (= $x77 true)))))
 ))
 (let (($x120 (and $x97 $x119)))
 (let (($x149 (and $x120 $x146)))
 (let (($x129 (and $x149 $x183)))
 (let (($x176 (and $x129 $x170)))
 (let (($x190 (and $x176 $x187)))
 (let (($x12 (and $x190 $x7)))
 (let (($x148 (and $x12 $x53)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x49 (and $x100 $x148)))
 (let (($x81 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x103 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x103 (_ bv1 32))))
 (=> $x55 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x185 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x103 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x103 (_ bv1 32))))
 (= $x55 false)))))
 ))
 (let (($x168 (forall ((Lambda79 (_ BitVec 32)) )(let (($x143 (= false false)))
 (let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x103 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x103 (_ bv0 32))))
 (=> $x105 $x143))))))
 ))
 (let (($x136 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x103 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x103 (_ bv0 32))))
 (= $x105 true)))))
 ))
 (let (($x167 (and $x136 $x168)))
 (let (($x186 (and $x167 $x185)))
 (let (($x98 (and $x186 $x81)))
 (let (($x34 (and $x98 $x49)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x29 (and $x36 $x34)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x22 (and $x11 $x29)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x24 (and $x126 $x22)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x117 (and $x21 $x24)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x101 (and $x20 $x117)))
 (let (($x150 (=> $x101 $x44)))
 (not $x150))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x135 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x140 (= $x135 true)))
 (let (($x44 (= $x140 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x173 (concat ?x166 (concat ?x104 (concat ?x147 ?x73)))))
 (let (($x177 (= input.dst.llvm-%n ?x173)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x42)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x93 $x164)))
 (let (($x152 (and $x32 $x189)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x82 $x152)))
 (let (($x163 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x180 $x165)))))))
 (let (($x40 (and (and (and $x68 $x163) $x28) $x177)))
 (let (($x14 (= $x40 true)))
 (let (($x15 (= $x14 true)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x74 (and $x43 $x15)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x25 (and $x131 $x74)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x75 (and $x16 $x25)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x53 (and $x125 $x75)))
 (let (($x7 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x133 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x153 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x37 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x37 (_ bv1 32))))
 (=> (and $x121 $x133) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x187 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x37 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x37 (_ bv1 32))))
 (let (($x133 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x133 (= $x121 false)))))))
 ))
 (let (($x170 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x143 (= false false)))
 (let (($x133 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x153 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x37 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x37 (_ bv0 32))))
 (=> (and $x33 $x133) $x143)))))))
 ))
 (let (($x183 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x37 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x37 (_ bv0 32))))
 (let (($x133 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x133 (= $x33 true)))))))
 ))
 (let (($x146 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x119 (forall ((Lambda68 (_ BitVec 32)) )(let (($x143 (= false false)))
 (let (($x66 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x52 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x52 (_ bv0 32))))
 (=> $x77 $x143))))))
 ))
 (let (($x97 (forall ((Lambda68 (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x52 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x52 (_ bv0 32))))
 (= $x77 true)))))
 ))
 (let (($x120 (and $x97 $x119)))
 (let (($x149 (and $x120 $x146)))
 (let (($x129 (and $x149 $x183)))
 (let (($x176 (and $x129 $x170)))
 (let (($x190 (and $x176 $x187)))
 (let (($x12 (and $x190 $x7)))
 (let (($x148 (and $x12 $x53)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x49 (and $x100 $x148)))
 (let (($x81 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x103 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x103 (_ bv1 32))))
 (=> $x55 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x185 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x103 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x103 (_ bv1 32))))
 (= $x55 false)))))
 ))
 (let (($x168 (forall ((Lambda79 (_ BitVec 32)) )(let (($x143 (= false false)))
 (let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x103 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x103 (_ bv0 32))))
 (=> $x105 $x143))))))
 ))
 (let (($x136 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x103 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x103 (_ bv0 32))))
 (= $x105 true)))))
 ))
 (let (($x167 (and $x136 $x168)))
 (let (($x186 (and $x167 $x185)))
 (let (($x98 (and $x186 $x81)))
 (let (($x34 (and $x98 $x49)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x29 (and $x36 $x34)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x22 (and $x11 $x29)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x24 (and $x126 $x22)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x117 (and $x21 $x24)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x101 (and $x20 $x117)))
 (let (($x150 (=> $x101 $x44)))
 (not $x150))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x243 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (= $x243 false)))
 (let (($x245 (= $x244 true)))
 (let ((?x40 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x40)))
 (let (($x224 (= ?x14 input.dst.llvm-%n)))
 (let (($x225 (= $x224 true)))
 (let (($x220 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x221 (= $x220 true)))
 (let (($x216 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x217 (= $x216 true)))
 (let (($x218 (= $x217 true)))
 (let (($x212 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x213 (= $x212 true)))
 (let (($x214 (= $x213 true)))
 (let (($x208 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x209 (= $x208 true)))
 (let (($x210 (= $x209 true)))
 (let (($x204 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x205 (= $x204 true)))
 (let (($x206 (= $x205 true)))
 (let ((?x195 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x195)))
 (let ((?x192 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x192)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x71 $x193)))
 (let (($x197 (and $x194 $x196)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (and $x89 $x197)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x159 $x174)))))))
 (let (($x199 (and $x26 $x198)))
 (let (($x200 (= $x199 true)))
 (let (($x201 (= $x200 true)))
 (let (($x91 (= (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let (($x50 (= $x91 true)))
 (let (($x94 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x151 (= $x94 true)))
 (let (($x56 (= (_ bv0 32) input.spec-%var-r-0.L2%31%bbentry)))
 (let (($x58 (= $x56 true)))
 (let (($x102 (bvsle input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x144 (= $x102 true)))
 (let (($x178 (= $x144 true)))
 (let (($x92 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x78 (= $x92 true)))
 (let (($x51 (= $x78 true)))
 (let (($x45 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x65 (= $x45 true)))
 (let (($x8 (= $x65 true)))
 (let (($x150 (bvule input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x112 (= $x150 true)))
 (let (($x141 (= $x112 true)))
 (let (($x117 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x101 (= $x117 true)))
 (let (($x135 (= $x101 true)))
 (let (($x34 (bvsle input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x29 (= $x34 true)))
 (let (($x22 (= $x29 true)))
 (let (($x75 (bvule input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x53 (= $x75 true)))
 (let (($x148 (= $x53 true)))
 (let (($x15 (= ?x14 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x74 (= $x15 true)))
 (let (($x49 (and $x74 $x148)))
 (let (($x24 (and $x49 $x22)))
 (let (($x140 (and $x24 $x135)))
 (let (($x188 (and $x140 $x141)))
 (let (($x107 (and $x188 $x8)))
 (let (($x85 (and $x107 $x51)))
 (let (($x179 (and $x85 $x178)))
 (let (($x67 (and $x179 $x58)))
 (let (($x76 (and $x67 $x151)))
 (let (($x86 (and $x76 $x50)))
 (let (($x202 (and $x86 $x201)))
 (let (($x207 (and $x202 $x206)))
 (let (($x211 (and $x207 $x210)))
 (let (($x215 (and $x211 $x214)))
 (let (($x219 (and $x215 $x218)))
 (let (($x222 (and $x219 $x221)))
 (let (($x226 (and $x222 $x225)))
 (let (($x120 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x143 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x143 (_ bv1 32))))
 (=> $x81 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x99 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x143 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x143 (_ bv1 32))))
 (= $x81 false)))))
 ))
 (let (($x186 (forall ((Lambda79 (_ BitVec 32)) )(let (($x55 (= false false)))
 (let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x143 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x143 (_ bv0 32))))
 (=> $x145 $x55))))))
 ))
 (let (($x167 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x143 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x143 (_ bv0 32))))
 (= $x145 true)))))
 ))
 (let (($x46 (and $x167 $x186)))
 (let (($x100 (and $x46 $x99)))
 (let (($x124 (and $x100 $x120)))
 (let (($x227 (and $x124 $x226)))
 (let (($x173 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x228 (and $x173 $x227)))
 (let (($x31 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x7 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x6 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x6 (_ bv1 32))))
 (=> (and $x132 $x155) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x63 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x6 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x6 (_ bv1 32))))
 (let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x155 (= $x132 false)))))))
 ))
 (let (($x41 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x55 (= false false)))
 (let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x7 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x6 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x6 (_ bv0 32))))
 (=> (and $x131 $x155) $x55)))))))
 ))
 (let (($x38 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x6 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x6 (_ bv0 32))))
 (let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x155 (= $x131 true)))))))
 ))
 (let (($x187 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x160 (forall ((Lambda68 (_ BitVec 32)) )(let (($x55 (= false false)))
 (let (($x61 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x33 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x33 (_ bv0 32))))
 (=> $x62 $x55))))))
 ))
 (let (($x183 (forall ((Lambda68 (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x33 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x33 (_ bv0 32))))
 (= $x62 true)))))
 ))
 (let (($x170 (and $x183 $x160)))
 (let (($x190 (and $x170 $x187)))
 (let (($x156 (and $x190 $x38)))
 (let (($x9 (and $x156 $x41)))
 (let (($x82 (and $x9 $x63)))
 (let (($x72 (and $x82 $x31)))
 (let (($x229 (and $x72 $x228)))
 (let (($x137 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x230 (and $x137 $x229)))
 (let (($x70 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x231 (and $x70 $x230)))
 (let (($x182 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x232 (and $x182 $x231)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x233 (and $x59 $x232)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x234 (and $x166 $x233)))
 (let (($x235 (and $x72 $x234)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x236 (and $x146 $x235)))
 (let (($x237 (and $x124 $x236)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x238 (and $x5 $x237)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x239 (and $x10 $x238)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x240 (and $x87 $x239)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x241 (and $x20 $x240)))
 (let (($x157 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x242 (and $x157 $x241)))
 (let (($x246 (=> $x242 $x245)))
 (not $x246)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x243 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (= $x243 false)))
 (let (($x245 (= $x244 true)))
 (let ((?x40 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x40)))
 (let (($x224 (= ?x14 input.dst.llvm-%n)))
 (let (($x225 (= $x224 true)))
 (let (($x220 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x221 (= $x220 true)))
 (let (($x216 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x217 (= $x216 true)))
 (let (($x218 (= $x217 true)))
 (let (($x212 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x213 (= $x212 true)))
 (let (($x214 (= $x213 true)))
 (let (($x208 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x209 (= $x208 true)))
 (let (($x210 (= $x209 true)))
 (let (($x204 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x205 (= $x204 true)))
 (let (($x206 (= $x205 true)))
 (let ((?x195 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x195)))
 (let ((?x192 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x192)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x71 $x193)))
 (let (($x197 (and $x194 $x196)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (and $x89 $x197)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x159 $x174)))))))
 (let (($x199 (and $x26 $x198)))
 (let (($x200 (= $x199 true)))
 (let (($x201 (= $x200 true)))
 (let (($x91 (= (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let (($x50 (= $x91 true)))
 (let (($x94 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x151 (= $x94 true)))
 (let (($x56 (= (_ bv0 32) input.spec-%var-r-0.L2%31%bbentry)))
 (let (($x58 (= $x56 true)))
 (let (($x102 (bvsle input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x144 (= $x102 true)))
 (let (($x178 (= $x144 true)))
 (let (($x92 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x78 (= $x92 true)))
 (let (($x51 (= $x78 true)))
 (let (($x45 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x65 (= $x45 true)))
 (let (($x8 (= $x65 true)))
 (let (($x150 (bvule input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x112 (= $x150 true)))
 (let (($x141 (= $x112 true)))
 (let (($x117 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x101 (= $x117 true)))
 (let (($x135 (= $x101 true)))
 (let (($x34 (bvsle input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x29 (= $x34 true)))
 (let (($x22 (= $x29 true)))
 (let (($x75 (bvule input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x53 (= $x75 true)))
 (let (($x148 (= $x53 true)))
 (let (($x15 (= ?x14 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x74 (= $x15 true)))
 (let (($x49 (and $x74 $x148)))
 (let (($x24 (and $x49 $x22)))
 (let (($x140 (and $x24 $x135)))
 (let (($x188 (and $x140 $x141)))
 (let (($x107 (and $x188 $x8)))
 (let (($x85 (and $x107 $x51)))
 (let (($x179 (and $x85 $x178)))
 (let (($x67 (and $x179 $x58)))
 (let (($x76 (and $x67 $x151)))
 (let (($x86 (and $x76 $x50)))
 (let (($x202 (and $x86 $x201)))
 (let (($x207 (and $x202 $x206)))
 (let (($x211 (and $x207 $x210)))
 (let (($x215 (and $x211 $x214)))
 (let (($x219 (and $x215 $x218)))
 (let (($x222 (and $x219 $x221)))
 (let (($x226 (and $x222 $x225)))
 (let (($x120 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x143 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x143 (_ bv1 32))))
 (=> $x81 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x99 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x143 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x143 (_ bv1 32))))
 (= $x81 false)))))
 ))
 (let (($x186 (forall ((Lambda79 (_ BitVec 32)) )(let (($x55 (= false false)))
 (let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x143 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x143 (_ bv0 32))))
 (=> $x145 $x55))))))
 ))
 (let (($x167 (forall ((Lambda79 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x143 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x143 (_ bv0 32))))
 (= $x145 true)))))
 ))
 (let (($x46 (and $x167 $x186)))
 (let (($x100 (and $x46 $x99)))
 (let (($x124 (and $x100 $x120)))
 (let (($x227 (and $x124 $x226)))
 (let (($x173 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x228 (and $x173 $x227)))
 (let (($x31 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x7 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x6 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x6 (_ bv1 32))))
 (=> (and $x132 $x155) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x63 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x6 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x6 (_ bv1 32))))
 (let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x155 (= $x132 false)))))))
 ))
 (let (($x41 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x55 (= false false)))
 (let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x7 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x6 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x6 (_ bv0 32))))
 (=> (and $x131 $x155) $x55)))))))
 ))
 (let (($x38 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x6 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x6 (_ bv0 32))))
 (let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x155 (= $x131 true)))))))
 ))
 (let (($x187 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x160 (forall ((Lambda68 (_ BitVec 32)) )(let (($x55 (= false false)))
 (let (($x61 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x33 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x33 (_ bv0 32))))
 (=> $x62 $x55))))))
 ))
 (let (($x183 (forall ((Lambda68 (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x33 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x33 (_ bv0 32))))
 (= $x62 true)))))
 ))
 (let (($x170 (and $x183 $x160)))
 (let (($x190 (and $x170 $x187)))
 (let (($x156 (and $x190 $x38)))
 (let (($x9 (and $x156 $x41)))
 (let (($x82 (and $x9 $x63)))
 (let (($x72 (and $x82 $x31)))
 (let (($x229 (and $x72 $x228)))
 (let (($x137 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x230 (and $x137 $x229)))
 (let (($x70 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x231 (and $x70 $x230)))
 (let (($x182 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x232 (and $x182 $x231)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x233 (and $x59 $x232)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x234 (and $x166 $x233)))
 (let (($x235 (and $x72 $x234)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x236 (and $x146 $x235)))
 (let (($x237 (and $x124 $x236)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x238 (and $x5 $x237)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x239 (and $x10 $x238)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x240 (and $x87 $x239)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x241 (and $x20 $x240)))
 (let (($x157 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x242 (and $x157 $x241)))
 (let (($x246 (=> $x242 $x245)))
 (not $x246)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00800000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00800000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00800000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (not $x79)))
 (let (($x136 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x184 (not $x136)))
 (let (($x66 (or $x184 $x80)))
 (let (($x139 (= $x66 true)))
 (let (($x97 (= $x139 true)))
 (let ((?x232 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x233 (bvneg ?x232)))
 (let (($x238 (= ?x233 input.dst.llvm-%n)))
 (let (($x239 (= $x238 true)))
 (let (($x234 (= ?x233 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x235 (= $x234 true)))
 (let ((?x227 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x228 (bvneg ?x227)))
 (let (($x229 (= ?x228 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x230 (= $x229 true)))
 (let (($x223 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x224 (= $x223 true)))
 (let (($x225 (= $x224 true)))
 (let (($x219 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x220 (= $x219 true)))
 (let (($x221 (= $x220 true)))
 (let (($x214 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x215 (= $x214 true)))
 (let (($x216 (= $x215 true)))
 (let (($x210 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x211 (= $x210 true)))
 (let (($x212 (= $x211 true)))
 (let ((?x201 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x201)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x196 $x199)))
 (let (($x203 (and $x200 $x202)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x174 $x203)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x89)))))))
 (let (($x205 (and $x195 $x204)))
 (let (($x206 (= $x205 true)))
 (let (($x207 (= $x206 true)))
 (let (($x130 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x64 (= $x130 true)))
 (let (($x111 (= $x64 true)))
 (let ((?x151 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x151)))
 (let (($x50 (= ?x76 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x50 true)))
 (let (($x17 (and $x86 $x111)))
 (let (($x208 (and $x17 $x207)))
 (let (($x213 (and $x208 $x212)))
 (let (($x217 (and $x213 $x216)))
 (let (($x222 (and $x217 $x221)))
 (let (($x226 (and $x222 $x225)))
 (let (($x231 (and $x226 $x230)))
 (let (($x236 (and $x231 $x235)))
 (let (($x240 (and $x236 $x239)))
 (let (($x43 (forall ((Lambda79 (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x166 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x166 (_ bv1 32))))
 (=> $x183 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x154 (forall ((Lambda79 (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x166 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x166 (_ bv1 32))))
 (= $x183 false)))))
 ))
 (let (($x61 (forall ((Lambda79 (_ BitVec 32)) )(let (($x70 (= false false)))
 (let (($x5 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x166 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x166 (_ bv0 32))))
 (=> $x182 $x70))))))
 ))
 (let (($x73 (forall ((Lambda79 (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x166 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x166 (_ bv0 32))))
 (= $x182 true)))))
 ))
 (let (($x33 (and $x73 $x61)))
 (let (($x160 (and $x33 $x154)))
 (let (($x155 (and $x160 $x43)))
 (let (($x241 (and $x155 $x240)))
 (let (($x67 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x242 (and $x67 $x241)))
 (let (($x8 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x167 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x99 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x99 (_ bv1 32))))
 (=> (and $x29 $x120) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x117 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x99 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x99 (_ bv1 32))))
 (let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x120 (= $x29 false)))))))
 ))
 (let (($x75 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x70 (= false false)))
 (let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x167 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x99 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x99 (_ bv0 32))))
 (=> (and $x100 $x120) $x70)))))))
 ))
 (let (($x177 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x99 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x99 (_ bv0 32))))
 (let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x120 (= $x100 true)))))))
 ))
 (let (($x72 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x82 (forall ((Lambda68 (_ BitVec 32)) )(let (($x70 (= false false)))
 (let (($x172 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x41 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x41 (_ bv0 32))))
 (=> $x9 $x70))))))
 ))
 (let (($x163 (forall ((Lambda68 (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x41 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x41 (_ bv0 32))))
 (= $x9 true)))))
 ))
 (let (($x108 (and $x163 $x82)))
 (let (($x173 (and $x108 $x72)))
 (let (($x40 (and $x173 $x177)))
 (let (($x53 (and $x40 $x75)))
 (let (($x101 (and $x53 $x117)))
 (let (($x107 (and $x101 $x8)))
 (let (($x243 (and $x107 $x242)))
 (let (($x58 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x244 (and $x58 $x243)))
 (let (($x56 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x245 (and $x56 $x244)))
 (let (($x144 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x246 (and $x144 $x245)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x247 (and $x85 $x246)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x134 (and $x78 $x247)))
 (let (($x36 (and $x107 $x134)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x103 (and $x6 $x36)))
 (let (($x13 (and $x155 $x103)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x116 (and $x157 $x13)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x77 (and $x48 $x116)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x109 (and $x11 $x77)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x105 (and $x21 $x109)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x123 (and $x113 $x105)))
 (let (($x90 (=> $x123 $x97)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (not $x79)))
 (let (($x136 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x184 (not $x136)))
 (let (($x66 (or $x184 $x80)))
 (let (($x139 (= $x66 true)))
 (let (($x97 (= $x139 true)))
 (let ((?x232 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x233 (bvneg ?x232)))
 (let (($x238 (= ?x233 input.dst.llvm-%n)))
 (let (($x239 (= $x238 true)))
 (let (($x234 (= ?x233 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x235 (= $x234 true)))
 (let ((?x227 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x228 (bvneg ?x227)))
 (let (($x229 (= ?x228 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x230 (= $x229 true)))
 (let (($x223 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x224 (= $x223 true)))
 (let (($x225 (= $x224 true)))
 (let (($x219 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x220 (= $x219 true)))
 (let (($x221 (= $x220 true)))
 (let (($x214 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x215 (= $x214 true)))
 (let (($x216 (= $x215 true)))
 (let (($x210 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x211 (= $x210 true)))
 (let (($x212 (= $x211 true)))
 (let ((?x201 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x201)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x196 $x199)))
 (let (($x203 (and $x200 $x202)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x174 $x203)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x89)))))))
 (let (($x205 (and $x195 $x204)))
 (let (($x206 (= $x205 true)))
 (let (($x207 (= $x206 true)))
 (let (($x130 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x64 (= $x130 true)))
 (let (($x111 (= $x64 true)))
 (let ((?x151 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x151)))
 (let (($x50 (= ?x76 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x50 true)))
 (let (($x17 (and $x86 $x111)))
 (let (($x208 (and $x17 $x207)))
 (let (($x213 (and $x208 $x212)))
 (let (($x217 (and $x213 $x216)))
 (let (($x222 (and $x217 $x221)))
 (let (($x226 (and $x222 $x225)))
 (let (($x231 (and $x226 $x230)))
 (let (($x236 (and $x231 $x235)))
 (let (($x240 (and $x236 $x239)))
 (let (($x43 (forall ((Lambda79 (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x166 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x166 (_ bv1 32))))
 (=> $x183 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x154 (forall ((Lambda79 (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x166 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x166 (_ bv1 32))))
 (= $x183 false)))))
 ))
 (let (($x61 (forall ((Lambda79 (_ BitVec 32)) )(let (($x70 (= false false)))
 (let (($x5 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x166 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x166 (_ bv0 32))))
 (=> $x182 $x70))))))
 ))
 (let (($x73 (forall ((Lambda79 (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x166 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x166 (_ bv0 32))))
 (= $x182 true)))))
 ))
 (let (($x33 (and $x73 $x61)))
 (let (($x160 (and $x33 $x154)))
 (let (($x155 (and $x160 $x43)))
 (let (($x241 (and $x155 $x240)))
 (let (($x67 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x242 (and $x67 $x241)))
 (let (($x8 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x167 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x99 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x99 (_ bv1 32))))
 (=> (and $x29 $x120) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x117 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x99 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x99 (_ bv1 32))))
 (let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x120 (= $x29 false)))))))
 ))
 (let (($x75 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x70 (= false false)))
 (let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x167 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x99 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x99 (_ bv0 32))))
 (=> (and $x100 $x120) $x70)))))))
 ))
 (let (($x177 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x99 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x99 (_ bv0 32))))
 (let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x120 (= $x100 true)))))))
 ))
 (let (($x72 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x82 (forall ((Lambda68 (_ BitVec 32)) )(let (($x70 (= false false)))
 (let (($x172 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x41 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x41 (_ bv0 32))))
 (=> $x9 $x70))))))
 ))
 (let (($x163 (forall ((Lambda68 (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x41 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x41 (_ bv0 32))))
 (= $x9 true)))))
 ))
 (let (($x108 (and $x163 $x82)))
 (let (($x173 (and $x108 $x72)))
 (let (($x40 (and $x173 $x177)))
 (let (($x53 (and $x40 $x75)))
 (let (($x101 (and $x53 $x117)))
 (let (($x107 (and $x101 $x8)))
 (let (($x243 (and $x107 $x242)))
 (let (($x58 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x244 (and $x58 $x243)))
 (let (($x56 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x245 (and $x56 $x244)))
 (let (($x144 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x246 (and $x144 $x245)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x247 (and $x85 $x246)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x134 (and $x78 $x247)))
 (let (($x36 (and $x107 $x134)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x103 (and $x6 $x36)))
 (let (($x13 (and $x155 $x103)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x116 (and $x157 $x13)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x77 (and $x48 $x116)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x109 (and $x11 $x77)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x105 (and $x21 $x109)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x123 (and $x113 $x105)))
 (let (($x90 (=> $x123 $x97)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 188 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x115 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let ((?x141 (bvmul ?x112 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x141)))
 (let (($x133 (= ?x106 ?x115)))
 (let (($x153 (= $x133 true)))
 (let ((?x190 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x190)))
 (let (($x185 (= ?x38 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x44 (= $x185 true)))
 (let (($x62 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x128 (= $x62 true)))
 (let (($x170 (= $x128 true)))
 (let (($x20 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x146 (= $x20 true)))
 (let (($x138 (= $x146 true)))
 (let (($x127 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x143 (= $x127 true)))
 (let (($x169 (= $x143 true)))
 (let (($x158 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x159 (= $x158 true)))
 (let (($x23 (= $x159 true)))
 (let (($x139 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (= $x139 true)))
 (let (($x90 (= $x97 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x77)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (and $x134 $x13)))
 (let (($x105 (and $x116 $x109)))
 (let (($x234 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x234 $x105)))
 (let (($x241 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x247 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x240 $x241)))))))
 (let (($x136 (and $x247 $x123)))
 (let (($x184 (= $x136 true)))
 (let (($x79 (= $x184 true)))
 (let (($x227 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x228 (= $x227 true)))
 (let (($x229 (= $x228 true)))
 (let ((?x218 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x218)))
 (let (($x224 (= ?x219 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x225 (= $x224 true)))
 (let (($x221 (= ?x219 input.dst.llvm-%n)))
 (let (($x222 (= $x221 true)))
 (let ((?x213 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x214 (bvneg ?x213)))
 (let (($x216 (= ?x214 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x217 (= $x216 true)))
 (let (($x223 (and $x217 $x222)))
 (let (($x226 (and $x223 $x225)))
 (let (($x230 (and $x226 $x229)))
 (let (($x80 (and $x230 $x79)))
 (let (($x12 (and $x80 $x90)))
 (let (($x126 (and $x12 $x23)))
 (let (($x149 (and $x126 $x169)))
 (let (($x137 (and $x149 $x138)))
 (let (($x187 (and $x137 $x170)))
 (let (($x114 (and $x187 $x44)))
 (let (($x210 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x171 (and (not $x210) $x114)))
 (let (($x120 (forall ((Lambda79 (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x144 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x144 (_ bv1 32))))
 (=> $x70 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x82 (forall ((Lambda79 (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x144 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x144 (_ bv1 32))))
 (= $x70 false)))))
 ))
 (let (($x41 (forall ((Lambda79 (_ BitVec 32)) )(let (($x58 (= false false)))
 (let (($x92 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x144 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x144 (_ bv0 32))))
 (=> $x178 $x58))))))
 ))
 (let (($x56 (forall ((Lambda79 (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x144 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x144 (_ bv0 32))))
 (= $x178 true)))))
 ))
 (let (($x9 (and $x56 $x41)))
 (let (($x108 (and $x9 $x82)))
 (let (($x167 (and $x108 $x120)))
 (let (($x165 (and $x167 $x171)))
 (let (($x208 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x57 (and $x208 $x165)))
 (let (($x196 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x39 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x160 (_ bv1 32))))
 (=> (and $x162 $x155) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x26 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x160 (_ bv1 32))))
 (let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x155 (= $x162 false)))))))
 ))
 (let (($x130 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x58 (= false false)))
 (let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x39 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x160 (_ bv0 32))))
 (=> (and $x122 $x155) $x58)))))))
 ))
 (let (($x94 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x160 (_ bv0 32))))
 (let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x155 (= $x122 true)))))))
 ))
 (let (($x67 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x140 (forall ((Lambda68 (_ BitVec 32)) )(let (($x58 (= false false)))
 (let (($x177 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x53 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x53 (_ bv0 32))))
 (=> $x29 $x58))))))
 ))
 (let (($x24 (forall ((Lambda68 (_ BitVec 32)) )(let (($x177 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x53 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x53 (_ bv0 32))))
 (= $x29 true)))))
 ))
 (let (($x188 (and $x24 $x140)))
 (let (($x5 (and $x188 $x67)))
 (let (($x151 (and $x5 $x94)))
 (let (($x64 (and $x151 $x130)))
 (let (($x69 (and $x64 $x26)))
 (let (($x197 (and $x69 $x196)))
 (let (($x189 (and $x197 $x57)))
 (let (($x207 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x152 (and $x207 $x189)))
 (let (($x206 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x145 (and $x206 $x152)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x186 (and $x203 $x145)))
 (let (($x201 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x46 (and $x201 $x186)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x81 (and $x199 $x46)))
 (let (($x98 (and $x197 $x81)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x14 (and $x100 $x98)))
 (let (($x15 (and $x167 $x14)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x148 (and $x7 $x15)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x49 (and $x11 $x148)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x34 (and $x48 $x49)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x135 (and $x113 $x34)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x150 (and $x95 $x135)))
 (let (($x37 (=> $x150 $x153)))
 (not $x37))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x115 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let ((?x141 (bvmul ?x112 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x141)))
 (let (($x133 (= ?x106 ?x115)))
 (let (($x153 (= $x133 true)))
 (let ((?x190 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x190)))
 (let (($x185 (= ?x38 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x44 (= $x185 true)))
 (let (($x62 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x128 (= $x62 true)))
 (let (($x170 (= $x128 true)))
 (let (($x20 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x146 (= $x20 true)))
 (let (($x138 (= $x146 true)))
 (let (($x127 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x143 (= $x127 true)))
 (let (($x169 (= $x143 true)))
 (let (($x158 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x159 (= $x158 true)))
 (let (($x23 (= $x159 true)))
 (let (($x139 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (= $x139 true)))
 (let (($x90 (= $x97 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x77)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (and $x134 $x13)))
 (let (($x105 (and $x116 $x109)))
 (let (($x234 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x234 $x105)))
 (let (($x241 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x247 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x240 $x241)))))))
 (let (($x136 (and $x247 $x123)))
 (let (($x184 (= $x136 true)))
 (let (($x79 (= $x184 true)))
 (let (($x227 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x228 (= $x227 true)))
 (let (($x229 (= $x228 true)))
 (let ((?x218 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x218)))
 (let (($x224 (= ?x219 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x225 (= $x224 true)))
 (let (($x221 (= ?x219 input.dst.llvm-%n)))
 (let (($x222 (= $x221 true)))
 (let ((?x213 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x214 (bvneg ?x213)))
 (let (($x216 (= ?x214 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x217 (= $x216 true)))
 (let (($x223 (and $x217 $x222)))
 (let (($x226 (and $x223 $x225)))
 (let (($x230 (and $x226 $x229)))
 (let (($x80 (and $x230 $x79)))
 (let (($x12 (and $x80 $x90)))
 (let (($x126 (and $x12 $x23)))
 (let (($x149 (and $x126 $x169)))
 (let (($x137 (and $x149 $x138)))
 (let (($x187 (and $x137 $x170)))
 (let (($x114 (and $x187 $x44)))
 (let (($x210 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x171 (and (not $x210) $x114)))
 (let (($x120 (forall ((Lambda79 (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x144 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x144 (_ bv1 32))))
 (=> $x70 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x82 (forall ((Lambda79 (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x144 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x144 (_ bv1 32))))
 (= $x70 false)))))
 ))
 (let (($x41 (forall ((Lambda79 (_ BitVec 32)) )(let (($x58 (= false false)))
 (let (($x92 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x144 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x144 (_ bv0 32))))
 (=> $x178 $x58))))))
 ))
 (let (($x56 (forall ((Lambda79 (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x144 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x144 (_ bv0 32))))
 (= $x178 true)))))
 ))
 (let (($x9 (and $x56 $x41)))
 (let (($x108 (and $x9 $x82)))
 (let (($x167 (and $x108 $x120)))
 (let (($x165 (and $x167 $x171)))
 (let (($x208 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x57 (and $x208 $x165)))
 (let (($x196 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x39 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x160 (_ bv1 32))))
 (=> (and $x162 $x155) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x26 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x160 (_ bv1 32))))
 (let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x155 (= $x162 false)))))))
 ))
 (let (($x130 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x58 (= false false)))
 (let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x39 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x160 (_ bv0 32))))
 (=> (and $x122 $x155) $x58)))))))
 ))
 (let (($x94 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x160 (_ bv0 32))))
 (let (($x155 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x155 (= $x122 true)))))))
 ))
 (let (($x67 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x140 (forall ((Lambda68 (_ BitVec 32)) )(let (($x58 (= false false)))
 (let (($x177 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x53 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x53 (_ bv0 32))))
 (=> $x29 $x58))))))
 ))
 (let (($x24 (forall ((Lambda68 (_ BitVec 32)) )(let (($x177 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x53 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x53 (_ bv0 32))))
 (= $x29 true)))))
 ))
 (let (($x188 (and $x24 $x140)))
 (let (($x5 (and $x188 $x67)))
 (let (($x151 (and $x5 $x94)))
 (let (($x64 (and $x151 $x130)))
 (let (($x69 (and $x64 $x26)))
 (let (($x197 (and $x69 $x196)))
 (let (($x189 (and $x197 $x57)))
 (let (($x207 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x152 (and $x207 $x189)))
 (let (($x206 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x145 (and $x206 $x152)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x186 (and $x203 $x145)))
 (let (($x201 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x46 (and $x201 $x186)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x81 (and $x199 $x46)))
 (let (($x98 (and $x197 $x81)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x14 (and $x100 $x98)))
 (let (($x15 (and $x167 $x14)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x148 (and $x7 $x15)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x49 (and $x11 $x148)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x34 (and $x48 $x49)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x135 (and $x113 $x34)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x150 (and $x95 $x135)))
 (let (($x37 (=> $x150 $x153)))
 (not $x37))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x181 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x91 (bvadd input.spec-%var-i-0.L2%31%bbentry input.spec-%var-r-0.L2%31%bbentry)))
 (let ((?x111 (bvmul ?x91 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x111)))
 (let (($x110 (= ?x17 ?x181)))
 (let (($x35 (= $x110 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x85)))
 (let (($x132 (= ?x102 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x163 (= $x132 true)))
 (let ((?x54 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x54)))
 (let (($x72 (= ?x182 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x131 (= $x72 true)))
 (let (($x231 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x232 (= $x231 true)))
 (let (($x6 (= $x232 true)))
 (let (($x133 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x153 (= $x133 true)))
 (let (($x37 (= $x153 true)))
 (let (($x112 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x141 (= $x112 true)))
 (let (($x106 (= $x141 true)))
 (let (($x148 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x49 (= $x148 true)))
 (let (($x34 (= $x49 true)))
 (let (($x81 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x98 (= $x81 true)))
 (let (($x14 (= $x98 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (= $x152 true)))
 (let (($x186 (= $x145 true)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x190)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x137 $x170)))
 (let (($x185 (and $x187 $x38)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x97 $x185)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x127)))))))
 (let (($x114 (and $x138 $x44)))
 (let (($x171 (= $x114 true)))
 (let (($x165 (= $x171 true)))
 (let ((?x116 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x116)))
 (let (($x136 (= ?x77 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x184 (= $x136 true)))
 (let (($x105 (= ?x77 input.dst.llvm-%n)))
 (let (($x123 (= $x105 true)))
 (let (($x79 (and $x123 $x184)))
 (let (($x57 (and $x79 $x165)))
 (let (($x46 (and $x57 $x186)))
 (let (($x15 (and $x46 $x14)))
 (let (($x135 (and $x15 $x34)))
 (let (($x115 (and $x135 $x106)))
 (let (($x129 (and $x115 $x37)))
 (let (($x78 (and $x129 $x6)))
 (let (($x51 (and $x78 $x131)))
 (let (($x28 (and $x51 $x163)))
 (let (($x103 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x168 (and (not $x103) $x28)))
 (let (($x43 (forall ((Lambda79 (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x202 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x202 (_ bv1 32))))
 (=> $x24 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x101 (forall ((Lambda79 (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x202 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x202 (_ bv1 32))))
 (= $x24 false)))))
 ))
 (let (($x177 (forall ((Lambda79 (_ BitVec 32)) )(let (($x206 (= false false)))
 (let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x202 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x202 (_ bv0 32))))
 (=> $x203 $x206))))))
 ))
 (let (($x205 (forall ((Lambda79 (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x202 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x202 (_ bv0 32))))
 (= $x203 true)))))
 ))
 (let (($x53 (and $x205 $x177)))
 (let (($x140 (and $x53 $x101)))
 (let (($x155 (and $x140 $x43)))
 (let (($x40 (and $x155 $x168)))
 (let (($x134 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x61 (and $x134 $x40)))
 (let (($x237 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x56 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x82 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x82 (_ bv1 32))))
 (=> (and $x220 $x120) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x223 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x82 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x82 (_ bv1 32))))
 (let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x120 (= $x220 false)))))))
 ))
 (let (($x215 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x206 (= false false)))
 (let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x56 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x82 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x82 (_ bv0 32))))
 (=> (and $x108 $x120) $x206)))))))
 ))
 (let (($x210 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x82 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x82 (_ bv0 32))))
 (let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x120 (= $x108 true)))))))
 ))
 (let (($x197 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x69 (forall ((Lambda68 (_ BitVec 32)) )(let (($x206 (= false false)))
 (let (($x83 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x130 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x130 (_ bv0 32))))
 (=> $x64 $x206))))))
 ))
 (let (($x194 (forall ((Lambda68 (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x130 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x130 (_ bv0 32))))
 (= $x64 true)))))
 ))
 (let (($x89 (and $x194 $x69)))
 (let (($x208 (and $x89 $x197)))
 (let (($x156 (and $x208 $x210)))
 (let (($x216 (and $x156 $x215)))
 (let (($x224 (and $x216 $x223)))
 (let (($x239 (and $x224 $x237)))
 (let (($x71 (and $x239 $x61)))
 (let (($x234 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x124 (and $x234 $x71)))
 (let (($x233 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x74 (and $x233 $x124)))
 (let (($x244 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x25 (and $x244 $x74)))
 (let (($x242 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x75 (and $x242 $x25)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x117 (and $x238 $x75)))
 (let (($x45 (and $x239 $x117)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x65 (and $x160 $x45)))
 (let (($x147 (and $x155 $x65)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x33 (and $x7 $x147)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x183 (and $x11 $x33)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x55 (and $x18 $x183)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x154 (and $x21 $x55)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x76 (and $x95 $x154)))
 (let (($x192 (=> $x76 $x35)))
 (not $x192))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x181 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x91 (bvadd input.spec-%var-i-0.L2%31%bbentry input.spec-%var-r-0.L2%31%bbentry)))
 (let ((?x111 (bvmul ?x91 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x111)))
 (let (($x110 (= ?x17 ?x181)))
 (let (($x35 (= $x110 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x85)))
 (let (($x132 (= ?x102 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x163 (= $x132 true)))
 (let ((?x54 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x54)))
 (let (($x72 (= ?x182 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x131 (= $x72 true)))
 (let (($x231 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x232 (= $x231 true)))
 (let (($x6 (= $x232 true)))
 (let (($x133 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x153 (= $x133 true)))
 (let (($x37 (= $x153 true)))
 (let (($x112 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x141 (= $x112 true)))
 (let (($x106 (= $x141 true)))
 (let (($x148 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x49 (= $x148 true)))
 (let (($x34 (= $x49 true)))
 (let (($x81 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x98 (= $x81 true)))
 (let (($x14 (= $x98 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (= $x152 true)))
 (let (($x186 (= $x145 true)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x190)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x137 $x170)))
 (let (($x185 (and $x187 $x38)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x97 $x185)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x127)))))))
 (let (($x114 (and $x138 $x44)))
 (let (($x171 (= $x114 true)))
 (let (($x165 (= $x171 true)))
 (let ((?x116 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x116)))
 (let (($x136 (= ?x77 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x184 (= $x136 true)))
 (let (($x105 (= ?x77 input.dst.llvm-%n)))
 (let (($x123 (= $x105 true)))
 (let (($x79 (and $x123 $x184)))
 (let (($x57 (and $x79 $x165)))
 (let (($x46 (and $x57 $x186)))
 (let (($x15 (and $x46 $x14)))
 (let (($x135 (and $x15 $x34)))
 (let (($x115 (and $x135 $x106)))
 (let (($x129 (and $x115 $x37)))
 (let (($x78 (and $x129 $x6)))
 (let (($x51 (and $x78 $x131)))
 (let (($x28 (and $x51 $x163)))
 (let (($x103 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x168 (and (not $x103) $x28)))
 (let (($x43 (forall ((Lambda79 (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x202 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x202 (_ bv1 32))))
 (=> $x24 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x101 (forall ((Lambda79 (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x202 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x202 (_ bv1 32))))
 (= $x24 false)))))
 ))
 (let (($x177 (forall ((Lambda79 (_ BitVec 32)) )(let (($x206 (= false false)))
 (let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x202 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x202 (_ bv0 32))))
 (=> $x203 $x206))))))
 ))
 (let (($x205 (forall ((Lambda79 (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x202 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x202 (_ bv0 32))))
 (= $x203 true)))))
 ))
 (let (($x53 (and $x205 $x177)))
 (let (($x140 (and $x53 $x101)))
 (let (($x155 (and $x140 $x43)))
 (let (($x40 (and $x155 $x168)))
 (let (($x134 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x61 (and $x134 $x40)))
 (let (($x237 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x56 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x82 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x82 (_ bv1 32))))
 (=> (and $x220 $x120) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x223 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x82 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x82 (_ bv1 32))))
 (let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x120 (= $x220 false)))))))
 ))
 (let (($x215 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x206 (= false false)))
 (let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x56 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x82 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x82 (_ bv0 32))))
 (=> (and $x108 $x120) $x206)))))))
 ))
 (let (($x210 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x82 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x82 (_ bv0 32))))
 (let (($x120 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x120 (= $x108 true)))))))
 ))
 (let (($x197 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x69 (forall ((Lambda68 (_ BitVec 32)) )(let (($x206 (= false false)))
 (let (($x83 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x130 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x130 (_ bv0 32))))
 (=> $x64 $x206))))))
 ))
 (let (($x194 (forall ((Lambda68 (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x130 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x130 (_ bv0 32))))
 (= $x64 true)))))
 ))
 (let (($x89 (and $x194 $x69)))
 (let (($x208 (and $x89 $x197)))
 (let (($x156 (and $x208 $x210)))
 (let (($x216 (and $x156 $x215)))
 (let (($x224 (and $x216 $x223)))
 (let (($x239 (and $x224 $x237)))
 (let (($x71 (and $x239 $x61)))
 (let (($x234 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x124 (and $x234 $x71)))
 (let (($x233 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x74 (and $x233 $x124)))
 (let (($x244 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x25 (and $x244 $x74)))
 (let (($x242 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x75 (and $x242 $x25)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x117 (and $x238 $x75)))
 (let (($x45 (and $x239 $x117)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x65 (and $x160 $x45)))
 (let (($x147 (and $x155 $x65)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x33 (and $x7 $x147)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x183 (and $x11 $x33)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x55 (and $x18 $x183)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x154 (and $x21 $x55)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x76 (and $x95 $x154)))
 (let (($x192 (=> $x76 $x35)))
 (not $x192))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x212 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let (($x217 (bvuge ?x212 (_ bv1 32))))
 (let (($x218 (= $x217 true)))
 (let (($x219 (= $x218 true)))
 (let ((?x201 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x207 (bvneg ?x201)))
 (let (($x29 (= ?x207 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x22 (= $x29 true)))
 (let (($x107 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x52 (= $x107 true)))
 (let (($x199 (= $x52 true)))
 (let (($x87 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x198 (= $x87 true)))
 (let (($x166 (= $x198 true)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x111)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x183 $x76)))
 (let (($x181 (and $x91 $x17)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x28 $x181)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x25)))))))
 (let (($x35 (and $x33 $x110)))
 (let (($x192 (= $x35 true)))
 (let (($x193 (= $x192 true)))
 (let (($x131 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x51 (= $x131 true)))
 (let (($x85 (= $x51 true)))
 (let (($x78 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x54 (= $x78 true)))
 (let (($x182 (= $x54 true)))
 (let (($x129 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x231 (= $x129 true)))
 (let (($x232 (= $x231 true)))
 (let ((?x150 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x150)))
 (let (($x133 (= ?x112 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x153 (= $x133 true)))
 (let (($x141 (= ?x112 input.dst.llvm-%n)))
 (let (($x106 (= $x141 true)))
 (let ((?x14 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x14)))
 (let (($x49 (= ?x15 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x34 (= $x49 true)))
 (let (($x145 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (= $x145 true)))
 (let (($x46 (= $x186 true)))
 (let (($x135 (and $x46 $x34)))
 (let (($x115 (and $x135 $x106)))
 (let (($x37 (and $x115 $x153)))
 (let (($x6 (and $x37 $x232)))
 (let (($x72 (and $x6 $x182)))
 (let (($x102 (and $x72 $x85)))
 (let (($x66 (and $x102 $x193)))
 (let (($x144 (and $x66 $x166)))
 (let (($x200 (and $x144 $x199)))
 (let (($x188 (and $x200 $x22)))
 (let (($x57 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x5 (and (not $x57) $x188)))
 (let (($x119 (forall ((Lambda79 (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x243 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x243 (_ bv1 32))))
 (=> $x194 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x26 (forall ((Lambda79 (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x243 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x243 (_ bv1 32))))
 (= $x194 false)))))
 ))
 (let (($x83 (forall ((Lambda79 (_ BitVec 32)) )(let (($x233 (= false false)))
 (let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x243 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x243 (_ bv0 32))))
 (=> $x244 $x233))))))
 ))
 (let (($x247 (forall ((Lambda79 (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x243 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x243 (_ bv0 32))))
 (= $x244 true)))))
 ))
 (let (($x130 (and $x247 $x83)))
 (let (($x69 (and $x130 $x26)))
 (let (($x120 (and $x69 $x119)))
 (let (($x94 (and $x120 $x5)))
 (let (($x171 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x172 (and $x171 $x94)))
 (let (($x139 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x101 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x101 (_ bv1 32))))
 (=> (and $x79 $x43) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x146 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x101 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x101 (_ bv1 32))))
 (let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x43 (= $x79 false)))))))
 ))
 (let (($x109 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x233 (= false false)))
 (let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x101 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (= ?x101 (_ bv0 32))))
 (=> (and $x140 $x43) $x233)))))))
 ))
 (let (($x36 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x101 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (= ?x101 (_ bv0 32))))
 (let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x43 (= $x140 true)))))))
 ))
 (let (($x239 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x224 (forall ((Lambda68 (_ BitVec 32)) )(let (($x233 (= false false)))
 (let (($x167 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x215 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x215 (_ bv0 32))))
 (=> $x216 $x233))))))
 ))
 (let (($x221 (forall ((Lambda68 (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x215 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x215 (_ bv0 32))))
 (= $x216 true)))))
 ))
 (let (($x226 (and $x221 $x224)))
 (let (($x134 (and $x226 $x239)))
 (let (($x103 (and $x134 $x36)))
 (let (($x105 (and $x103 $x109)))
 (let (($x158 (and $x105 $x146)))
 (let (($x97 (and $x158 $x139)))
 (let (($x227 (and $x97 $x172)))
 (let (($x114 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x19 (and $x114 $x227)))
 (let (($x44 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x151 (and $x44 $x19)))
 (let (($x190 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x50 (and $x190 $x151)))
 (let (($x170 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x86 (and $x170 $x50)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x191 (and $x62 $x86)))
 (let (($x195 (and $x97 $x191)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x84 (and $x82 $x195)))
 (let (($x178 (and $x120 $x84)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x41 (and $x157 $x178)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x9 (and $x48 $x41)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x70 (and $x10 $x9)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x63 (and $x113 $x70)))
 (let (($x209 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x211 (and $x209 $x63)))
 (let (($x225 (=> $x211 $x219)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x212 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let (($x217 (bvuge ?x212 (_ bv1 32))))
 (let (($x218 (= $x217 true)))
 (let (($x219 (= $x218 true)))
 (let ((?x201 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x207 (bvneg ?x201)))
 (let (($x29 (= ?x207 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x22 (= $x29 true)))
 (let (($x107 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x52 (= $x107 true)))
 (let (($x199 (= $x52 true)))
 (let (($x87 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x198 (= $x87 true)))
 (let (($x166 (= $x198 true)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x111)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x183 $x76)))
 (let (($x181 (and $x91 $x17)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x28 $x181)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x25)))))))
 (let (($x35 (and $x33 $x110)))
 (let (($x192 (= $x35 true)))
 (let (($x193 (= $x192 true)))
 (let (($x131 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x51 (= $x131 true)))
 (let (($x85 (= $x51 true)))
 (let (($x78 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x54 (= $x78 true)))
 (let (($x182 (= $x54 true)))
 (let (($x129 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x231 (= $x129 true)))
 (let (($x232 (= $x231 true)))
 (let ((?x150 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x150)))
 (let (($x133 (= ?x112 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x153 (= $x133 true)))
 (let (($x141 (= ?x112 input.dst.llvm-%n)))
 (let (($x106 (= $x141 true)))
 (let ((?x14 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x14)))
 (let (($x49 (= ?x15 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x34 (= $x49 true)))
 (let (($x145 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (= $x145 true)))
 (let (($x46 (= $x186 true)))
 (let (($x135 (and $x46 $x34)))
 (let (($x115 (and $x135 $x106)))
 (let (($x37 (and $x115 $x153)))
 (let (($x6 (and $x37 $x232)))
 (let (($x72 (and $x6 $x182)))
 (let (($x102 (and $x72 $x85)))
 (let (($x66 (and $x102 $x193)))
 (let (($x144 (and $x66 $x166)))
 (let (($x200 (and $x144 $x199)))
 (let (($x188 (and $x200 $x22)))
 (let (($x57 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x5 (and (not $x57) $x188)))
 (let (($x119 (forall ((Lambda79 (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x243 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x243 (_ bv1 32))))
 (=> $x194 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x26 (forall ((Lambda79 (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x243 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x243 (_ bv1 32))))
 (= $x194 false)))))
 ))
 (let (($x83 (forall ((Lambda79 (_ BitVec 32)) )(let (($x233 (= false false)))
 (let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x243 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x243 (_ bv0 32))))
 (=> $x244 $x233))))))
 ))
 (let (($x247 (forall ((Lambda79 (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x243 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x243 (_ bv0 32))))
 (= $x244 true)))))
 ))
 (let (($x130 (and $x247 $x83)))
 (let (($x69 (and $x130 $x26)))
 (let (($x120 (and $x69 $x119)))
 (let (($x94 (and $x120 $x5)))
 (let (($x171 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x172 (and $x171 $x94)))
 (let (($x139 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x101 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x101 (_ bv1 32))))
 (=> (and $x79 $x43) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x146 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x101 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x101 (_ bv1 32))))
 (let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x43 (= $x79 false)))))))
 ))
 (let (($x109 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x233 (= false false)))
 (let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x101 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (= ?x101 (_ bv0 32))))
 (=> (and $x140 $x43) $x233)))))))
 ))
 (let (($x36 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x101 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (= ?x101 (_ bv0 32))))
 (let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x43 (= $x140 true)))))))
 ))
 (let (($x239 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x224 (forall ((Lambda68 (_ BitVec 32)) )(let (($x233 (= false false)))
 (let (($x167 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x215 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x215 (_ bv0 32))))
 (=> $x216 $x233))))))
 ))
 (let (($x221 (forall ((Lambda68 (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x215 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x215 (_ bv0 32))))
 (= $x216 true)))))
 ))
 (let (($x226 (and $x221 $x224)))
 (let (($x134 (and $x226 $x239)))
 (let (($x103 (and $x134 $x36)))
 (let (($x105 (and $x103 $x109)))
 (let (($x158 (and $x105 $x146)))
 (let (($x97 (and $x158 $x139)))
 (let (($x227 (and $x97 $x172)))
 (let (($x114 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x19 (and $x114 $x227)))
 (let (($x44 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x151 (and $x44 $x19)))
 (let (($x190 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x50 (and $x190 $x151)))
 (let (($x170 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x86 (and $x170 $x50)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x191 (and $x62 $x86)))
 (let (($x195 (and $x97 $x191)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x84 (and $x82 $x195)))
 (let (($x178 (and $x120 $x84)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x41 (and $x157 $x178)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x9 (and $x48 $x41)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x70 (and $x10 $x9)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x63 (and $x113 $x70)))
 (let (($x209 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x211 (and $x209 $x63)))
 (let (($x225 (=> $x211 $x219)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 191 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x136 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let (($x184 (bvsge ?x136 (_ bv1 32))))
 (let (($x23 (= $x184 true)))
 (let (($x127 (= $x23 true)))
 (let ((?x64 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x64)))
 (let (($x89 (= ?x162 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x197 (= $x89 true)))
 (let (($x238 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x241 (= $x238 true)))
 (let (($x242 (= $x241 true)))
 (let (($x92 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x202 (= $x92 true)))
 (let (($x196 (= $x202 true)))
 (let ((?x217 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x217)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x9 $x211)))
 (let (($x219 (and $x212 $x218)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x188 $x219)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x151 $x50)))))))
 (let (($x228 (and $x41 $x225)))
 (let (($x132 (= $x228 true)))
 (let (($x7 (= $x132 true)))
 (let (($x52 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x199 (= $x52 true)))
 (let (($x200 (= $x199 true)))
 (let (($x198 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x166 (= $x198 true)))
 (let (($x144 (= $x166 true)))
 (let (($x192 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x193 (= $x192 true)))
 (let (($x66 (= $x193 true)))
 (let ((?x154 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x154)))
 (let (($x181 (= ?x76 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x110 (= $x181 true)))
 (let (($x91 (= ?x76 input.dst.llvm-%n)))
 (let (($x111 (= $x91 true)))
 (let ((?x65 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x65)))
 (let (($x28 (= ?x33 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x183 (= $x28 true)))
 (let (($x71 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (= $x71 true)))
 (let (($x75 (= $x25 true)))
 (let (($x55 (and $x75 $x183)))
 (let (($x17 (and $x55 $x111)))
 (let (($x35 (and $x17 $x110)))
 (let (($x87 (and $x35 $x66)))
 (let (($x107 (and $x87 $x144)))
 (let (($x201 (and $x107 $x200)))
 (let (($x240 (and $x201 $x7)))
 (let (($x122 (and $x240 $x196)))
 (let (($x234 (and $x122 $x242)))
 (let (($x208 (and $x234 $x197)))
 (let (($x61 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x59 (and (not $x61) $x208)))
 (let (($x161 (forall ((Lambda79 (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x187 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x187 (_ bv1 32))))
 (=> $x221 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x223 (forall ((Lambda79 (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x187 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x187 (_ bv1 32))))
 (= $x221 false)))))
 ))
 (let (($x167 (forall ((Lambda79 (_ BitVec 32)) )(let (($x44 (= false false)))
 (let (($x82 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x187 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x187 (_ bv0 32))))
 (=> $x190 $x44))))))
 ))
 (let (($x185 (forall ((Lambda79 (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x187 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x187 (_ bv0 32))))
 (= $x190 true)))))
 ))
 (let (($x215 (and $x185 $x167)))
 (let (($x224 (and $x215 $x223)))
 (let (($x43 (and $x224 $x161)))
 (let (($x159 (and $x43 $x59)))
 (let (($x40 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x31 (and $x40 $x159)))
 (let (($x231 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x247 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x26 (ite $x247 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x26 (_ bv1 32))))
 (=> (and $x15 $x119) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x34 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x247 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x26 (ite $x247 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x26 (_ bv1 32))))
 (let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x119 (= $x15 false)))))))
 ))
 (let (($x186 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x44 (= false false)))
 (let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x247 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x26 (ite $x247 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x26 (_ bv0 32))))
 (=> (and $x69 $x119) $x44)))))))
 ))
 (let (($x165 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x247 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x26 (ite $x247 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x26 (_ bv0 32))))
 (let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x119 (= $x69 true)))))))
 ))
 (let (($x97 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x158 (forall ((Lambda68 (_ BitVec 32)) )(let (($x44 (= false false)))
 (let (($x155 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x109 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x109 (_ bv0 32))))
 (=> $x105 $x44))))))
 ))
 (let (($x90 (forall ((Lambda68 (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x109 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x109 (_ bv0 32))))
 (= $x105 true)))))
 ))
 (let (($x126 (and $x90 $x158)))
 (let (($x171 (and $x126 $x97)))
 (let (($x57 (and $x171 $x165)))
 (let (($x46 (and $x57 $x186)))
 (let (($x135 (and $x46 $x34)))
 (let (($x232 (and $x135 $x231)))
 (let (($x156 (and $x232 $x31)))
 (let (($x168 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x213 (and $x168 $x156)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x214 (and $x102 $x213)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x222 (and $x131 $x214)))
 (let (($x182 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x235 (and $x182 $x222)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x236 (and $x78 $x235)))
 (let (($x203 (and $x232 $x236)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x177 (and $x101 $x203)))
 (let (($x53 (and $x43 $x177)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x24 (and $x11 $x53)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x58 (and $x18 $x24)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x173 (and $x21 $x58)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x13 (and $x104 $x173)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x123 (and $x80 $x13)))
 (let (($x143 (=> $x123 $x127)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x136 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let (($x184 (bvsge ?x136 (_ bv1 32))))
 (let (($x23 (= $x184 true)))
 (let (($x127 (= $x23 true)))
 (let ((?x64 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x64)))
 (let (($x89 (= ?x162 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x197 (= $x89 true)))
 (let (($x238 (bvsge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x241 (= $x238 true)))
 (let (($x242 (= $x241 true)))
 (let (($x92 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x202 (= $x92 true)))
 (let (($x196 (= $x202 true)))
 (let ((?x217 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x217)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x9 $x211)))
 (let (($x219 (and $x212 $x218)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x188 $x219)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x151 $x50)))))))
 (let (($x228 (and $x41 $x225)))
 (let (($x132 (= $x228 true)))
 (let (($x7 (= $x132 true)))
 (let (($x52 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x199 (= $x52 true)))
 (let (($x200 (= $x199 true)))
 (let (($x198 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x166 (= $x198 true)))
 (let (($x144 (= $x166 true)))
 (let (($x192 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x193 (= $x192 true)))
 (let (($x66 (= $x193 true)))
 (let ((?x154 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x154)))
 (let (($x181 (= ?x76 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x110 (= $x181 true)))
 (let (($x91 (= ?x76 input.dst.llvm-%n)))
 (let (($x111 (= $x91 true)))
 (let ((?x65 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x65)))
 (let (($x28 (= ?x33 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x183 (= $x28 true)))
 (let (($x71 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (= $x71 true)))
 (let (($x75 (= $x25 true)))
 (let (($x55 (and $x75 $x183)))
 (let (($x17 (and $x55 $x111)))
 (let (($x35 (and $x17 $x110)))
 (let (($x87 (and $x35 $x66)))
 (let (($x107 (and $x87 $x144)))
 (let (($x201 (and $x107 $x200)))
 (let (($x240 (and $x201 $x7)))
 (let (($x122 (and $x240 $x196)))
 (let (($x234 (and $x122 $x242)))
 (let (($x208 (and $x234 $x197)))
 (let (($x61 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x59 (and (not $x61) $x208)))
 (let (($x161 (forall ((Lambda79 (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x187 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x187 (_ bv1 32))))
 (=> $x221 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x223 (forall ((Lambda79 (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x187 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x187 (_ bv1 32))))
 (= $x221 false)))))
 ))
 (let (($x167 (forall ((Lambda79 (_ BitVec 32)) )(let (($x44 (= false false)))
 (let (($x82 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x187 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x187 (_ bv0 32))))
 (=> $x190 $x44))))))
 ))
 (let (($x185 (forall ((Lambda79 (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x187 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x187 (_ bv0 32))))
 (= $x190 true)))))
 ))
 (let (($x215 (and $x185 $x167)))
 (let (($x224 (and $x215 $x223)))
 (let (($x43 (and $x224 $x161)))
 (let (($x159 (and $x43 $x59)))
 (let (($x40 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x31 (and $x40 $x159)))
 (let (($x231 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x247 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x26 (ite $x247 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x26 (_ bv1 32))))
 (=> (and $x15 $x119) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x34 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x247 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x26 (ite $x247 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x26 (_ bv1 32))))
 (let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x119 (= $x15 false)))))))
 ))
 (let (($x186 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x44 (= false false)))
 (let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x247 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x26 (ite $x247 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x26 (_ bv0 32))))
 (=> (and $x69 $x119) $x44)))))))
 ))
 (let (($x165 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x247 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x26 (ite $x247 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x26 (_ bv0 32))))
 (let (($x119 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x119 (= $x69 true)))))))
 ))
 (let (($x97 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x158 (forall ((Lambda68 (_ BitVec 32)) )(let (($x44 (= false false)))
 (let (($x155 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x109 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x109 (_ bv0 32))))
 (=> $x105 $x44))))))
 ))
 (let (($x90 (forall ((Lambda68 (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x109 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x109 (_ bv0 32))))
 (= $x105 true)))))
 ))
 (let (($x126 (and $x90 $x158)))
 (let (($x171 (and $x126 $x97)))
 (let (($x57 (and $x171 $x165)))
 (let (($x46 (and $x57 $x186)))
 (let (($x135 (and $x46 $x34)))
 (let (($x232 (and $x135 $x231)))
 (let (($x156 (and $x232 $x31)))
 (let (($x168 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x213 (and $x168 $x156)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x214 (and $x102 $x213)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x222 (and $x131 $x214)))
 (let (($x182 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x235 (and $x182 $x222)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x236 (and $x78 $x235)))
 (let (($x203 (and $x232 $x236)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x177 (and $x101 $x203)))
 (let (($x53 (and $x43 $x177)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x24 (and $x11 $x53)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x58 (and $x18 $x24)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x173 (and $x21 $x58)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x13 (and $x104 $x173)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x123 (and $x80 $x13)))
 (let (($x143 (=> $x123 $x127)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000083)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x244 (bvadd input.spec-%var-i-0.L2%31%bbentry input.spec-%var-r-0.L2%31%bbentry)))
 (let (($x83 (bvsge ?x244 (_ bv0 32))))
 (let (($x130 (= $x83 true)))
 (let (($x194 (= $x130 true)))
 (let ((?x137 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x137)))
 (let (($x237 (= ?x100 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x108 (= $x237 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x127)))
 (let (($x169 (= ?x143 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x169 true)))
 (let (($x123 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x136 (= $x123 true)))
 (let (($x184 (= $x136 true)))
 (let (($x24 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x58 (= $x24 true)))
 (let (($x173 (= $x58 true)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x213 (= (_ bv0 32) ?x156)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x197 $x159)))
 (let (($x214 (and $x31 $x213)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x132 $x214)))
 (let (($x238 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x238)))))))
 (let (($x235 (and $x89 $x222)))
 (let (($x236 (= $x235 true)))
 (let (($x203 (= $x236 true)))
 (let (($x211 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x212 (= $x211 true)))
 (let (($x217 (= $x212 true)))
 (let ((?x195 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x195)))
 (let (($x9 (= ?x84 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x70 (= $x9 true)))
 (let (($x41 (= ?x84 input.dst.llvm-%n)))
 (let (($x22 (= $x41 true)))
 (let (($x227 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (= $x227 true)))
 (let (($x86 (= $x50 true)))
 (let (($x188 (and $x86 $x22)))
 (let (($x63 (and $x188 $x70)))
 (let (($x218 (and $x63 $x217)))
 (let (($x177 (and $x218 $x203)))
 (let (($x13 (and $x177 $x173)))
 (let (($x23 (and $x13 $x184)))
 (let (($x157 (and $x23 $x29)))
 (let (($x62 (and $x157 $x108)))
 (let (($x172 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x170 (and (not $x172) $x62)))
 (let (($x118 (forall ((Lambda79 (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x72 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x72 (_ bv1 32))))
 (=> $x90 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x146 (forall ((Lambda79 (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x72 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x72 (_ bv1 32))))
 (= $x90 false)))))
 ))
 (let (($x155 (forall ((Lambda79 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x101 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x72 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x72 (_ bv0 32))))
 (=> $x131 $x102))))))
 ))
 (let (($x85 (forall ((Lambda79 (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x72 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x72 (_ bv0 32))))
 (= $x131 true)))))
 ))
 (let (($x109 (and $x85 $x155)))
 (let (($x158 (and $x109 $x146)))
 (let (($x119 (and $x158 $x118)))
 (let (($x114 (and $x119 $x170)))
 (let (($x94 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x216 (and $x94 $x114)))
 (let (($x193 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x185 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x223 (ite $x185 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x223 (_ bv1 32))))
 (=> (and $x33 $x161) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x183 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x223 (ite $x185 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x223 (_ bv1 32))))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x161 (= $x33 false)))))))
 ))
 (let (($x25 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x185 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x223 (ite $x185 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x223 (_ bv0 32))))
 (=> (and $x224 $x161) $x102)))))))
 ))
 (let (($x147 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x223 (ite $x185 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x223 (_ bv0 32))))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x161 (= $x224 true)))))))
 ))
 (let (($x232 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x135 (forall ((Lambda68 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x120 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x186 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (= ?x186 (_ bv0 32))))
 (=> $x46 $x102))))))
 ))
 (let (($x148 (forall ((Lambda68 (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x186 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (= ?x186 (_ bv0 32))))
 (= $x46 true)))))
 ))
 (let (($x112 (and $x148 $x135)))
 (let (($x40 (and $x112 $x232)))
 (let (($x61 (and $x40 $x147)))
 (let (($x75 (and $x61 $x25)))
 (let (($x55 (and $x75 $x183)))
 (let (($x66 (and $x55 $x193)))
 (let (($x220 (and $x66 $x216)))
 (let (($x5 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x226 (and $x5 $x220)))
 (let (($x201 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x239 (and $x201 $x226)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x134 (and $x52 $x239)))
 (let (($x144 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x36 (and $x144 $x134)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x99 (and $x198 $x36)))
 (let (($x141 (and $x66 $x99)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x8 (and $x26 $x141)))
 (let (($x103 (and $x119 $x8)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x116 (and $x48 $x103)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x77 (and $x10 $x116)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x12 (and $x113 $x77)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x149 (and $x95 $x12)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x20 (and $x60 $x149)))
 (let (($x206 (=> $x20 $x194)))
 (not $x206))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x244 (bvadd input.spec-%var-i-0.L2%31%bbentry input.spec-%var-r-0.L2%31%bbentry)))
 (let (($x83 (bvsge ?x244 (_ bv0 32))))
 (let (($x130 (= $x83 true)))
 (let (($x194 (= $x130 true)))
 (let ((?x137 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x137)))
 (let (($x237 (= ?x100 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x108 (= $x237 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x127)))
 (let (($x169 (= ?x143 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x169 true)))
 (let (($x123 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x136 (= $x123 true)))
 (let (($x184 (= $x136 true)))
 (let (($x24 (bvsge input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x58 (= $x24 true)))
 (let (($x173 (= $x58 true)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x213 (= (_ bv0 32) ?x156)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x197 $x159)))
 (let (($x214 (and $x31 $x213)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x132 $x214)))
 (let (($x238 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x238)))))))
 (let (($x235 (and $x89 $x222)))
 (let (($x236 (= $x235 true)))
 (let (($x203 (= $x236 true)))
 (let (($x211 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x212 (= $x211 true)))
 (let (($x217 (= $x212 true)))
 (let ((?x195 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x195)))
 (let (($x9 (= ?x84 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x70 (= $x9 true)))
 (let (($x41 (= ?x84 input.dst.llvm-%n)))
 (let (($x22 (= $x41 true)))
 (let (($x227 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (= $x227 true)))
 (let (($x86 (= $x50 true)))
 (let (($x188 (and $x86 $x22)))
 (let (($x63 (and $x188 $x70)))
 (let (($x218 (and $x63 $x217)))
 (let (($x177 (and $x218 $x203)))
 (let (($x13 (and $x177 $x173)))
 (let (($x23 (and $x13 $x184)))
 (let (($x157 (and $x23 $x29)))
 (let (($x62 (and $x157 $x108)))
 (let (($x172 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x170 (and (not $x172) $x62)))
 (let (($x118 (forall ((Lambda79 (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x72 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x72 (_ bv1 32))))
 (=> $x90 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x146 (forall ((Lambda79 (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x72 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x72 (_ bv1 32))))
 (= $x90 false)))))
 ))
 (let (($x155 (forall ((Lambda79 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x101 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x72 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x72 (_ bv0 32))))
 (=> $x131 $x102))))))
 ))
 (let (($x85 (forall ((Lambda79 (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x72 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x72 (_ bv0 32))))
 (= $x131 true)))))
 ))
 (let (($x109 (and $x85 $x155)))
 (let (($x158 (and $x109 $x146)))
 (let (($x119 (and $x158 $x118)))
 (let (($x114 (and $x119 $x170)))
 (let (($x94 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x216 (and $x94 $x114)))
 (let (($x193 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x185 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x223 (ite $x185 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x223 (_ bv1 32))))
 (=> (and $x33 $x161) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x183 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x223 (ite $x185 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x223 (_ bv1 32))))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x161 (= $x33 false)))))))
 ))
 (let (($x25 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x185 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x223 (ite $x185 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x223 (_ bv0 32))))
 (=> (and $x224 $x161) $x102)))))))
 ))
 (let (($x147 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x223 (ite $x185 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x223 (_ bv0 32))))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x161 (= $x224 true)))))))
 ))
 (let (($x232 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x135 (forall ((Lambda68 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x120 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x186 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (= ?x186 (_ bv0 32))))
 (=> $x46 $x102))))))
 ))
 (let (($x148 (forall ((Lambda68 (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x186 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (= ?x186 (_ bv0 32))))
 (= $x46 true)))))
 ))
 (let (($x112 (and $x148 $x135)))
 (let (($x40 (and $x112 $x232)))
 (let (($x61 (and $x40 $x147)))
 (let (($x75 (and $x61 $x25)))
 (let (($x55 (and $x75 $x183)))
 (let (($x66 (and $x55 $x193)))
 (let (($x220 (and $x66 $x216)))
 (let (($x5 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x226 (and $x5 $x220)))
 (let (($x201 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x239 (and $x201 $x226)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x134 (and $x52 $x239)))
 (let (($x144 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x36 (and $x144 $x134)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x99 (and $x198 $x36)))
 (let (($x141 (and $x66 $x99)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x8 (and $x26 $x141)))
 (let (($x103 (and $x119 $x8)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x116 (and $x48 $x103)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x77 (and $x10 $x116)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x12 (and $x113 $x77)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x149 (and $x95 $x12)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x20 (and $x60 $x149)))
 (let (($x206 (=> $x20 $x194)))
 (not $x206))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x233 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x210 (bvuge ?x233 (_ bv1 32))))
 (let (($x124 (= $x210 true)))
 (let (($x117 (= $x124 true)))
 (let ((?x78 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x78)))
 (let (($x182 (= ?x54 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x168 (= $x182 true)))
 (let (($x160 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x187 (= $x160 true)))
 (let (($x139 (= $x187 true)))
 (let (($x67 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x225 (= $x67 true)))
 (let (($x11 (= $x225 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x77)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (and $x99 $x103)))
 (let (($x149 (and $x116 $x12)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x137 $x149)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x170 $x114)))))))
 (let (($x244 (and $x36 $x20)))
 (let (($x83 (= $x244 true)))
 (let (($x130 (= $x83 true)))
 (let (($x184 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x23 (= $x184 true)))
 (let (($x127 (= $x23 true)))
 (let ((?x203 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x203)))
 (let (($x13 (= ?x177 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x123 (= $x13 true)))
 (let (($x24 (= ?x177 input.dst.llvm-%n)))
 (let (($x58 (= $x24 true)))
 (let ((?x213 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x214 (bvneg ?x213)))
 (let (($x235 (= ?x214 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x235 true)))
 (let (($x173 (and $x236 $x58)))
 (let (($x136 (and $x173 $x123)))
 (let (($x143 (and $x136 $x127)))
 (let (($x194 (and $x143 $x130)))
 (let (($x6 (and $x194 $x11)))
 (let (($x140 (and $x6 $x139)))
 (let (($x105 (and $x140 $x168)))
 (let (($x159 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x126 (and (not $x159) $x105)))
 (let (($x73 (forall ((Lambda79 (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x107 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x107 (_ bv1 32))))
 (=> $x148 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x34 (forall ((Lambda79 (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x107 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x107 (_ bv1 32))))
 (= $x148 false)))))
 ))
 (let (($x120 (forall ((Lambda79 (_ BitVec 32)) )(let (($x201 (= false false)))
 (let (($x26 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x107 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x107 (_ bv0 32))))
 (=> $x52 $x201))))))
 ))
 (let (($x200 (forall ((Lambda79 (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x107 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x107 (_ bv0 32))))
 (= $x52 true)))))
 ))
 (let (($x186 (and $x200 $x120)))
 (let (($x135 (and $x186 $x34)))
 (let (($x161 (and $x135 $x73)))
 (let (($x97 (and $x161 $x126)))
 (let (($x208 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x171 (and $x208 $x97)))
 (let (($x196 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x118 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x85 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x146 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x146 (_ bv1 32))))
 (=> (and $x41 $x118) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x9 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x146 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x146 (_ bv1 32))))
 (let (($x118 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x118 (= $x41 false)))))))
 ))
 (let (($x50 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x201 (= false false)))
 (let (($x118 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x85 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x146 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x146 (_ bv0 32))))
 (=> (and $x158 $x118) $x201)))))))
 ))
 (let (($x178 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x146 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x146 (_ bv0 32))))
 (let (($x118 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x118 (= $x158 true)))))))
 ))
 (let (($x66 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x55 (forall ((Lambda68 (_ BitVec 32)) )(let (($x201 (= false false)))
 (let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x25 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x25 (_ bv0 32))))
 (=> $x75 $x201))))))
 ))
 (let (($x163 (forall ((Lambda68 (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x25 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x25 (_ bv0 32))))
 (= $x75 true)))))
 ))
 (let (($x76 (and $x163 $x55)))
 (let (($x94 (and $x76 $x66)))
 (let (($x172 (and $x94 $x178)))
 (let (($x86 (and $x172 $x50)))
 (let (($x70 (and $x86 $x9)))
 (let (($x122 (and $x70 $x196)))
 (let (($x165 (and $x122 $x171)))
 (let (($x197 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x39 (and $x197 $x165)))
 (let (($x132 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x91 (and $x132 $x39)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x174 (and $x64 $x91)))
 (let (($x242 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x57 (and $x242 $x174)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x152 (and $x238 $x57)))
 (let (($x145 (and $x122 $x152)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x49 (and $x223 $x145)))
 (let (($x153 (and $x161 $x49)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x37 (and $x18 $x153)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x190 (and $x21 $x37)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x167 (and $x104 $x190)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x215 (and $x209 $x167)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x221 (and $x207 $x215)))
 (let (($x45 (=> $x221 $x117)))
 (not $x45))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x233 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x210 (bvuge ?x233 (_ bv1 32))))
 (let (($x124 (= $x210 true)))
 (let (($x117 (= $x124 true)))
 (let ((?x78 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x78)))
 (let (($x182 (= ?x54 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x168 (= $x182 true)))
 (let (($x160 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x187 (= $x160 true)))
 (let (($x139 (= $x187 true)))
 (let (($x67 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x225 (= $x67 true)))
 (let (($x11 (= $x225 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x77)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (and $x99 $x103)))
 (let (($x149 (and $x116 $x12)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x137 $x149)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x170 $x114)))))))
 (let (($x244 (and $x36 $x20)))
 (let (($x83 (= $x244 true)))
 (let (($x130 (= $x83 true)))
 (let (($x184 (bvuge input.spec-%var-i-0.L2%31%bbentry (_ bv1 32))))
 (let (($x23 (= $x184 true)))
 (let (($x127 (= $x23 true)))
 (let ((?x203 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x203)))
 (let (($x13 (= ?x177 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x123 (= $x13 true)))
 (let (($x24 (= ?x177 input.dst.llvm-%n)))
 (let (($x58 (= $x24 true)))
 (let ((?x213 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x214 (bvneg ?x213)))
 (let (($x235 (= ?x214 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x235 true)))
 (let (($x173 (and $x236 $x58)))
 (let (($x136 (and $x173 $x123)))
 (let (($x143 (and $x136 $x127)))
 (let (($x194 (and $x143 $x130)))
 (let (($x6 (and $x194 $x11)))
 (let (($x140 (and $x6 $x139)))
 (let (($x105 (and $x140 $x168)))
 (let (($x159 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x126 (and (not $x159) $x105)))
 (let (($x73 (forall ((Lambda79 (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x107 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x107 (_ bv1 32))))
 (=> $x148 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x34 (forall ((Lambda79 (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x107 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x107 (_ bv1 32))))
 (= $x148 false)))))
 ))
 (let (($x120 (forall ((Lambda79 (_ BitVec 32)) )(let (($x201 (= false false)))
 (let (($x26 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x107 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x107 (_ bv0 32))))
 (=> $x52 $x201))))))
 ))
 (let (($x200 (forall ((Lambda79 (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x107 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x107 (_ bv0 32))))
 (= $x52 true)))))
 ))
 (let (($x186 (and $x200 $x120)))
 (let (($x135 (and $x186 $x34)))
 (let (($x161 (and $x135 $x73)))
 (let (($x97 (and $x161 $x126)))
 (let (($x208 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x171 (and $x208 $x97)))
 (let (($x196 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x118 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x85 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x146 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x146 (_ bv1 32))))
 (=> (and $x41 $x118) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x9 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x146 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x146 (_ bv1 32))))
 (let (($x118 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x118 (= $x41 false)))))))
 ))
 (let (($x50 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x201 (= false false)))
 (let (($x118 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x85 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x146 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x146 (_ bv0 32))))
 (=> (and $x158 $x118) $x201)))))))
 ))
 (let (($x178 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x146 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x146 (_ bv0 32))))
 (let (($x118 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x118 (= $x158 true)))))))
 ))
 (let (($x66 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x55 (forall ((Lambda68 (_ BitVec 32)) )(let (($x201 (= false false)))
 (let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x25 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x25 (_ bv0 32))))
 (=> $x75 $x201))))))
 ))
 (let (($x163 (forall ((Lambda68 (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x25 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x25 (_ bv0 32))))
 (= $x75 true)))))
 ))
 (let (($x76 (and $x163 $x55)))
 (let (($x94 (and $x76 $x66)))
 (let (($x172 (and $x94 $x178)))
 (let (($x86 (and $x172 $x50)))
 (let (($x70 (and $x86 $x9)))
 (let (($x122 (and $x70 $x196)))
 (let (($x165 (and $x122 $x171)))
 (let (($x197 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x39 (and $x197 $x165)))
 (let (($x132 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x91 (and $x132 $x39)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x174 (and $x64 $x91)))
 (let (($x242 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x57 (and $x242 $x174)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x152 (and $x238 $x57)))
 (let (($x145 (and $x122 $x152)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x49 (and $x223 $x145)))
 (let (($x153 (and $x161 $x49)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x37 (and $x18 $x153)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x190 (and $x21 $x37)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x167 (and $x104 $x190)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x215 (and $x209 $x167)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x221 (and $x207 $x215)))
 (let (($x45 (=> $x221 $x117)))
 (not $x45))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x131 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let ((?x155 (bvmul ?x131 (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x155)))
 (let (($x44 (= ?x109 ?x90)))
 (let (($x128 (= $x44 true)))
 (let ((?x82 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x82)))
 (let (($x231 (= ?x72 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x231 true)))
 (let (($x169 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (= $x169 true)))
 (let (($x48 (= $x29 true)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x215 (= (_ bv0 32) ?x167)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x153)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x145 $x37)))
 (let (($x221 (and $x190 $x215)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x78 $x221)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x97 $x171)))))))
 (let (($x210 (and $x152 $x233)))
 (let (($x124 (= $x210 true)))
 (let (($x117 (= $x124 true)))
 (let ((?x83 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x83)))
 (let (($x11 (= ?x130 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x6 (= $x11 true)))
 (let (($x206 (= ?x130 input.dst.llvm-%n)))
 (let (($x67 (= $x206 true)))
 (let ((?x77 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x77)))
 (let (($x20 (= ?x12 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x244 (= $x20 true)))
 (let (($x225 (and $x244 $x67)))
 (let (($x160 (and $x225 $x6)))
 (let (($x45 (and $x160 $x117)))
 (let (($x87 (and $x45 $x48)))
 (let (($x198 (and $x87 $x69)))
 (let (($x8 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x144 (and (not $x8) $x198)))
 (let (($x118 (forall ((Lambda79 (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x64 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x64 (_ bv1 32))))
 (=> $x201 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x55 (forall ((Lambda79 (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x64 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x64 (_ bv1 32))))
 (= $x201 false)))))
 ))
 (let (($x25 (forall ((Lambda79 (_ BitVec 32)) )(let (($x197 (= false false)))
 (let (($x202 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x64 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x64 (_ bv0 32))))
 (=> $x89 $x197))))))
 ))
 (let (($x132 (forall ((Lambda79 (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x64 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x64 (_ bv0 32))))
 (= $x89 true)))))
 ))
 (let (($x75 (and $x132 $x25)))
 (let (($x76 (and $x75 $x55)))
 (let (($x85 (and $x76 $x118)))
 (let (($x5 (and $x85 $x144)))
 (let (($x99 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x46 (and $x99 $x5)))
 (let (($x237 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x135 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x135 (_ bv1 32))))
 (=> (and $x53 $x161) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x173 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x135 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x135 (_ bv1 32))))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x161 (= $x53 false)))))))
 ))
 (let (($x222 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x197 (= false false)))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x135 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x135 (_ bv0 32))))
 (=> (and $x129 $x161) $x197)))))))
 ))
 (let (($x159 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x135 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x135 (_ bv0 32))))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x161 (= $x129 true)))))))
 ))
 (let (($x208 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x211 (forall ((Lambda68 (_ BitVec 32)) )(let (($x197 (= false false)))
 (let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x86 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x86 (_ bv0 32))))
 (=> $x41 $x197))))))
 ))
 (let (($x188 (forall ((Lambda68 (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x86 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x86 (_ bv0 32))))
 (= $x41 true)))))
 ))
 (let (($x240 (and $x188 $x211)))
 (let (($x26 (and $x240 $x208)))
 (let (($x79 (and $x26 $x159)))
 (let (($x235 (and $x79 $x222)))
 (let (($x13 (and $x235 $x173)))
 (let (($x62 (and $x13 $x237)))
 (let (($x15 (and $x62 $x46)))
 (let (($x137 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x112 (and $x137 $x15)))
 (let (($x157 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x232 (and $x157 $x112)))
 (let (($x226 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x40 (and $x226 $x232)))
 (let (($x216 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x147 (and $x216 $x40)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x56 (and $x108 $x147)))
 (let (($x212 (and $x62 $x56)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x246 (and $x158 $x212)))
 (let (($x61 (and $x85 $x246)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x74 (and $x18 $x61)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x71 (and $x21 $x74)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x28 (and $x104 $x71)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x110 (and $x209 $x28)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x35 (and $x207 $x110)))
 (let (($x19 (=> $x35 $x128)))
 (not $x19))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x131 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%31%bbentry)))
 (let ((?x155 (bvmul ?x131 (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x155)))
 (let (($x44 (= ?x109 ?x90)))
 (let (($x128 (= $x44 true)))
 (let ((?x82 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x82)))
 (let (($x231 (= ?x72 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x231 true)))
 (let (($x169 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (= $x169 true)))
 (let (($x48 (= $x29 true)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x215 (= (_ bv0 32) ?x167)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x153)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x145 $x37)))
 (let (($x221 (and $x190 $x215)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x78 $x221)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x97 $x171)))))))
 (let (($x210 (and $x152 $x233)))
 (let (($x124 (= $x210 true)))
 (let (($x117 (= $x124 true)))
 (let ((?x83 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x83)))
 (let (($x11 (= ?x130 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x6 (= $x11 true)))
 (let (($x206 (= ?x130 input.dst.llvm-%n)))
 (let (($x67 (= $x206 true)))
 (let ((?x77 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x77)))
 (let (($x20 (= ?x12 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x244 (= $x20 true)))
 (let (($x225 (and $x244 $x67)))
 (let (($x160 (and $x225 $x6)))
 (let (($x45 (and $x160 $x117)))
 (let (($x87 (and $x45 $x48)))
 (let (($x198 (and $x87 $x69)))
 (let (($x8 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x144 (and (not $x8) $x198)))
 (let (($x118 (forall ((Lambda79 (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x64 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x64 (_ bv1 32))))
 (=> $x201 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x55 (forall ((Lambda79 (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x64 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x64 (_ bv1 32))))
 (= $x201 false)))))
 ))
 (let (($x25 (forall ((Lambda79 (_ BitVec 32)) )(let (($x197 (= false false)))
 (let (($x202 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x64 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x64 (_ bv0 32))))
 (=> $x89 $x197))))))
 ))
 (let (($x132 (forall ((Lambda79 (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x64 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x64 (_ bv0 32))))
 (= $x89 true)))))
 ))
 (let (($x75 (and $x132 $x25)))
 (let (($x76 (and $x75 $x55)))
 (let (($x85 (and $x76 $x118)))
 (let (($x5 (and $x85 $x144)))
 (let (($x99 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x46 (and $x99 $x5)))
 (let (($x237 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x135 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x135 (_ bv1 32))))
 (=> (and $x53 $x161) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x173 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x135 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x135 (_ bv1 32))))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x161 (= $x53 false)))))))
 ))
 (let (($x222 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x197 (= false false)))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x135 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x135 (_ bv0 32))))
 (=> (and $x129 $x161) $x197)))))))
 ))
 (let (($x159 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x135 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x135 (_ bv0 32))))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x161 (= $x129 true)))))))
 ))
 (let (($x208 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x211 (forall ((Lambda68 (_ BitVec 32)) )(let (($x197 (= false false)))
 (let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x86 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x86 (_ bv0 32))))
 (=> $x41 $x197))))))
 ))
 (let (($x188 (forall ((Lambda68 (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x86 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x86 (_ bv0 32))))
 (= $x41 true)))))
 ))
 (let (($x240 (and $x188 $x211)))
 (let (($x26 (and $x240 $x208)))
 (let (($x79 (and $x26 $x159)))
 (let (($x235 (and $x79 $x222)))
 (let (($x13 (and $x235 $x173)))
 (let (($x62 (and $x13 $x237)))
 (let (($x15 (and $x62 $x46)))
 (let (($x137 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x112 (and $x137 $x15)))
 (let (($x157 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x232 (and $x157 $x112)))
 (let (($x226 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x40 (and $x226 $x232)))
 (let (($x216 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x147 (and $x216 $x40)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x56 (and $x108 $x147)))
 (let (($x212 (and $x62 $x56)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x246 (and $x158 $x212)))
 (let (($x61 (and $x85 $x246)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x74 (and $x18 $x61)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x71 (and $x21 $x74)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x28 (and $x104 $x71)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x110 (and $x209 $x28)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x35 (and $x207 $x110)))
 (let (($x19 (=> $x35 $x128)))
 (not $x19))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 173 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x177 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvadd input.spec-%var-i-0.L2%31%bbentry input.spec-%var-r-0.L2%31%bbentry)))
 (let ((?x236 (bvmul ?x156 (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x236)))
 (let (($x123 (= ?x203 ?x177)))
 (let (($x23 (= $x123 true)))
 (let ((?x242 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x234 (bvneg ?x242)))
 (let (($x33 (= ?x234 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x163 (= $x33 true)))
 (let ((?x238 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x238)))
 (let (($x52 (= ?x101 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x52 true)))
 (let (($x191 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x187 (= $x191 true)))
 (let (($x139 (= $x187 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x110)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x246 $x71)))
 (let (($x131 (and $x28 $x35)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x72 $x131)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x15)))))))
 (let (($x109 (and $x212 $x155)))
 (let (($x90 (= $x109 true)))
 (let (($x44 (= $x90 true)))
 (let ((?x233 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x210 (bvneg ?x233)))
 (let (($x65 (= ?x210 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x169 (= $x65 true)))
 (let (($x117 (= ?x210 input.dst.llvm-%n)))
 (let (($x45 (= $x117 true)))
 (let (($x29 (and $x45 $x169)))
 (let (($x128 (and $x29 $x44)))
 (let (($x185 (and $x128 $x139)))
 (let (($x224 (and $x185 $x66)))
 (let (($x192 (and $x224 $x163)))
 (let (($x215 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x51 (and (not $x215) $x192)))
 (let (($x161 (forall ((Lambda79 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x226 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x226 (_ bv1 32))))
 (=> $x197 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x211 (forall ((Lambda79 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x226 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x226 (_ bv1 32))))
 (= $x197 false)))))
 ))
 (let (($x86 (forall ((Lambda79 (_ BitVec 32)) )(let (($x137 (= false false)))
 (let (($x170 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x226 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x226 (_ bv0 32))))
 (=> $x239 $x137))))))
 ))
 (let (($x157 (forall ((Lambda79 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x226 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x226 (_ bv0 32))))
 (= $x239 true)))))
 ))
 (let (($x41 (and $x157 $x86)))
 (let (($x240 (and $x41 $x211)))
 (let (($x205 (and $x240 $x161)))
 (let (($x172 (and $x205 $x51)))
 (let (($x190 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x120 (and $x190 $x172)))
 (let (($x171 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x76 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x76 (_ bv1 32))))
 (=> (and $x194 $x85) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x225 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x76 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x76 (_ bv1 32))))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x85 (= $x194 false)))))))
 ))
 (let (($x149 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x137 (= false false)))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x76 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x76 (_ bv0 32))))
 (=> (and $x193 $x85) $x137)))))))
 ))
 (let (($x8 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x76 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x76 (_ bv0 32))))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x85 (= $x193 true)))))))
 ))
 (let (($x99 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x136 (forall ((Lambda68 (_ BitVec 32)) )(let (($x137 (= false false)))
 (let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x235 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x235 (_ bv0 32))))
 (=> $x53 $x137))))))
 ))
 (let (($x58 (forall ((Lambda68 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x235 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x235 (_ bv0 32))))
 (= $x53 true)))))
 ))
 (let (($x100 (and $x58 $x136)))
 (let (($x202 (and $x100 $x99)))
 (let (($x166 (and $x202 $x8)))
 (let (($x20 (and $x166 $x149)))
 (let (($x11 (and $x20 $x225)))
 (let (($x165 (and $x11 $x171)))
 (let (($x184 (and $x165 $x120)))
 (let (($x37 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x119 (and $x37 $x184)))
 (let (($x153 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x151 (and $x153 $x119)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x227 (and $x78 $x151)))
 (let (($x152 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x50 (and $x152 $x227)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x9 (and $x91 $x50)))
 (let (($x162 (and $x165 $x9)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x92 (and $x129 $x162)))
 (let (($x199 (and $x205 $x92)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x186 (and $x18 $x199)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x148 (and $x21 $x186)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x102 (and $x104 $x148)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x34 (and $x209 $x102)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x31 (and $x207 $x34)))
 (let (($x127 (=> $x31 $x23)))
 (not $x127))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x177 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvadd input.spec-%var-i-0.L2%31%bbentry input.spec-%var-r-0.L2%31%bbentry)))
 (let ((?x236 (bvmul ?x156 (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x236)))
 (let (($x123 (= ?x203 ?x177)))
 (let (($x23 (= $x123 true)))
 (let ((?x242 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x234 (bvneg ?x242)))
 (let (($x33 (= ?x234 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x163 (= $x33 true)))
 (let ((?x238 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x238)))
 (let (($x52 (= ?x101 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x52 true)))
 (let (($x191 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x187 (= $x191 true)))
 (let (($x139 (= $x187 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x110)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x246 $x71)))
 (let (($x131 (and $x28 $x35)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x72 $x131)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x15)))))))
 (let (($x109 (and $x212 $x155)))
 (let (($x90 (= $x109 true)))
 (let (($x44 (= $x90 true)))
 (let ((?x233 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x210 (bvneg ?x233)))
 (let (($x65 (= ?x210 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x169 (= $x65 true)))
 (let (($x117 (= ?x210 input.dst.llvm-%n)))
 (let (($x45 (= $x117 true)))
 (let (($x29 (and $x45 $x169)))
 (let (($x128 (and $x29 $x44)))
 (let (($x185 (and $x128 $x139)))
 (let (($x224 (and $x185 $x66)))
 (let (($x192 (and $x224 $x163)))
 (let (($x215 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x51 (and (not $x215) $x192)))
 (let (($x161 (forall ((Lambda79 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x226 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x226 (_ bv1 32))))
 (=> $x197 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x211 (forall ((Lambda79 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x226 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x226 (_ bv1 32))))
 (= $x197 false)))))
 ))
 (let (($x86 (forall ((Lambda79 (_ BitVec 32)) )(let (($x137 (= false false)))
 (let (($x170 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x226 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x226 (_ bv0 32))))
 (=> $x239 $x137))))))
 ))
 (let (($x157 (forall ((Lambda79 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x226 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x226 (_ bv0 32))))
 (= $x239 true)))))
 ))
 (let (($x41 (and $x157 $x86)))
 (let (($x240 (and $x41 $x211)))
 (let (($x205 (and $x240 $x161)))
 (let (($x172 (and $x205 $x51)))
 (let (($x190 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x120 (and $x190 $x172)))
 (let (($x171 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x76 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x76 (_ bv1 32))))
 (=> (and $x194 $x85) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x225 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x76 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x76 (_ bv1 32))))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x85 (= $x194 false)))))))
 ))
 (let (($x149 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x137 (= false false)))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x76 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x76 (_ bv0 32))))
 (=> (and $x193 $x85) $x137)))))))
 ))
 (let (($x8 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x76 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x76 (_ bv0 32))))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x85 (= $x193 true)))))))
 ))
 (let (($x99 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x136 (forall ((Lambda68 (_ BitVec 32)) )(let (($x137 (= false false)))
 (let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x235 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x235 (_ bv0 32))))
 (=> $x53 $x137))))))
 ))
 (let (($x58 (forall ((Lambda68 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x235 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x235 (_ bv0 32))))
 (= $x53 true)))))
 ))
 (let (($x100 (and $x58 $x136)))
 (let (($x202 (and $x100 $x99)))
 (let (($x166 (and $x202 $x8)))
 (let (($x20 (and $x166 $x149)))
 (let (($x11 (and $x20 $x225)))
 (let (($x165 (and $x11 $x171)))
 (let (($x184 (and $x165 $x120)))
 (let (($x37 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x119 (and $x37 $x184)))
 (let (($x153 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x151 (and $x153 $x119)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x227 (and $x78 $x151)))
 (let (($x152 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x50 (and $x152 $x227)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x9 (and $x91 $x50)))
 (let (($x162 (and $x165 $x9)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x92 (and $x129 $x162)))
 (let (($x199 (and $x205 $x92)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x186 (and $x18 $x199)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x148 (and $x21 $x186)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x102 (and $x104 $x148)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x34 (and $x209 $x102)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x31 (and $x207 $x34)))
 (let (($x127 (=> $x31 $x23)))
 (not $x127))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x75 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x201 (not $x75)))
 (let (($x134 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x228 (not $x134)))
 (let (($x183 (or $x228 $x201)))
 (let (($x55 (= $x183 true)))
 (let (($x103 (= $x55 true)))
 (let ((?x87 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x87)))
 (let (($x138 (= ?x146 input.dst.llvm-%n)))
 (let (($x114 (= $x138 true)))
 (let (($x108 (= ?x146 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x107 (= $x108 true)))
 (let ((?x177 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x177)))
 (let (($x127 (= ?x123 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x143 (= $x127 true)))
 (let ((?x199 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x199)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x227 $x162)))
 (let (($x148 (and $x92 $x186)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x224 $x148)))
 (let (($x192 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x163 $x192)))))))
 (let (($x34 (and $x151 $x102)))
 (let (($x31 (= $x34 true)))
 (let (($x156 (= $x31 true)))
 (let ((?x191 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x191)))
 (let (($x185 (= ?x187 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x238 (= $x185 true)))
 (let (($x236 (and $x238 $x156)))
 (let (($x48 (and $x236 $x143)))
 (let (($x89 (and $x48 $x107)))
 (let (($x216 (and $x89 $x114)))
 (let (($x85 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x78 (_ bv1 32))))
 (=> $x137 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x136 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x78 (_ bv1 32))))
 (= $x137 false)))))
 ))
 (let (($x235 (forall ((Lambda79 (_ BitVec 32)) )(let (($x37 (= false false)))
 (let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x78 (_ bv0 32))))
 (=> $x145 $x37))))))
 ))
 (let (($x153 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x78 (_ bv0 32))))
 (= $x145 true)))))
 ))
 (let (($x53 (and $x153 $x235)))
 (let (($x100 (and $x53 $x136)))
 (let (($x43 (and $x100 $x85)))
 (let (($x220 (and $x43 $x216)))
 (let (($x44 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x223 (and $x44 $x220)))
 (let (($x72 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x240 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x240 (_ bv1 32))))
 (=> (and $x231 $x205) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x198 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x240 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x240 (_ bv1 32))))
 (let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x205 (= $x231 false)))))))
 ))
 (let (($x117 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x37 (= false false)))
 (let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x240 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x240 (_ bv0 32))))
 (=> (and $x122 $x205) $x37)))))))
 ))
 (let (($x215 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x240 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x240 (_ bv0 32))))
 (let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x205 (= $x122 true)))))))
 ))
 (let (($x190 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x160 (forall ((Lambda68 (_ BitVec 32)) )(let (($x37 (= false false)))
 (let (($x8 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x20 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x20 (_ bv0 32))))
 (=> $x194 $x37))))))
 ))
 (let (($x67 (forall ((Lambda68 (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x20 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x20 (_ bv0 32))))
 (= $x194 true)))))
 ))
 (let (($x126 (and $x67 $x160)))
 (let (($x170 (and $x126 $x190)))
 (let (($x94 (and $x170 $x215)))
 (let (($x45 (and $x94 $x117)))
 (let (($x5 (and $x45 $x198)))
 (let (($x246 (and $x5 $x72)))
 (let (($x22 (and $x246 $x223)))
 (let (($x90 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x188 (and $x90 $x22)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x196 (and $x109 $x188)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x26 (and $x35 $x196)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x200 (and $x28 $x26)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x79 (and $x74 $x200)))
 (let (($x25 (and $x246 $x79)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x54 (and $x193 $x25)))
 (let (($x59 (and $x43 $x54)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x213 (and $x18 $x59)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x214 (and $x21 $x213)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x222 (and $x104 $x214)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x173 (and $x209 $x222)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x243 (and $x207 $x173)))
 (let (($x116 (=> $x243 $x103)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x75 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x201 (not $x75)))
 (let (($x134 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x228 (not $x134)))
 (let (($x183 (or $x228 $x201)))
 (let (($x55 (= $x183 true)))
 (let (($x103 (= $x55 true)))
 (let ((?x87 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x87)))
 (let (($x138 (= ?x146 input.dst.llvm-%n)))
 (let (($x114 (= $x138 true)))
 (let (($x108 (= ?x146 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x107 (= $x108 true)))
 (let ((?x177 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x177)))
 (let (($x127 (= ?x123 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x143 (= $x127 true)))
 (let ((?x199 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x199)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x227 $x162)))
 (let (($x148 (and $x92 $x186)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x224 $x148)))
 (let (($x192 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x163 $x192)))))))
 (let (($x34 (and $x151 $x102)))
 (let (($x31 (= $x34 true)))
 (let (($x156 (= $x31 true)))
 (let ((?x191 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x191)))
 (let (($x185 (= ?x187 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x238 (= $x185 true)))
 (let (($x236 (and $x238 $x156)))
 (let (($x48 (and $x236 $x143)))
 (let (($x89 (and $x48 $x107)))
 (let (($x216 (and $x89 $x114)))
 (let (($x85 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x78 (_ bv1 32))))
 (=> $x137 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x136 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x78 (_ bv1 32))))
 (= $x137 false)))))
 ))
 (let (($x235 (forall ((Lambda79 (_ BitVec 32)) )(let (($x37 (= false false)))
 (let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x78 (_ bv0 32))))
 (=> $x145 $x37))))))
 ))
 (let (($x153 (forall ((Lambda79 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x78 (_ bv0 32))))
 (= $x145 true)))))
 ))
 (let (($x53 (and $x153 $x235)))
 (let (($x100 (and $x53 $x136)))
 (let (($x43 (and $x100 $x85)))
 (let (($x220 (and $x43 $x216)))
 (let (($x44 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x223 (and $x44 $x220)))
 (let (($x72 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x240 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x240 (_ bv1 32))))
 (=> (and $x231 $x205) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x198 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x240 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x240 (_ bv1 32))))
 (let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x205 (= $x231 false)))))))
 ))
 (let (($x117 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x37 (= false false)))
 (let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x240 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x240 (_ bv0 32))))
 (=> (and $x122 $x205) $x37)))))))
 ))
 (let (($x215 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x240 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x240 (_ bv0 32))))
 (let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x205 (= $x122 true)))))))
 ))
 (let (($x190 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x160 (forall ((Lambda68 (_ BitVec 32)) )(let (($x37 (= false false)))
 (let (($x8 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x20 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x20 (_ bv0 32))))
 (=> $x194 $x37))))))
 ))
 (let (($x67 (forall ((Lambda68 (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x20 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x20 (_ bv0 32))))
 (= $x194 true)))))
 ))
 (let (($x126 (and $x67 $x160)))
 (let (($x170 (and $x126 $x190)))
 (let (($x94 (and $x170 $x215)))
 (let (($x45 (and $x94 $x117)))
 (let (($x5 (and $x45 $x198)))
 (let (($x246 (and $x5 $x72)))
 (let (($x22 (and $x246 $x223)))
 (let (($x90 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x188 (and $x90 $x22)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x196 (and $x109 $x188)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x26 (and $x35 $x196)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x200 (and $x28 $x26)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x79 (and $x74 $x200)))
 (let (($x25 (and $x246 $x79)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x54 (and $x193 $x25)))
 (let (($x59 (and $x43 $x54)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x213 (and $x18 $x59)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x214 (and $x21 $x213)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x222 (and $x104 $x214)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x173 (and $x209 $x222)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x243 (and $x207 $x173)))
 (let (($x116 (=> $x243 $x103)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 168 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x221 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (not $x221)))
 (let (($x65 (= $x233 false)))
 (let (($x169 (= $x65 true)))
 (let ((?x89 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x89)))
 (let (($x58 (= ?x208 input.dst.llvm-%n)))
 (let (($x237 (= $x58 true)))
 (let ((?x99 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x99)))
 (let (($x152 (= ?x38 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x152 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x103)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x228 $x183)))
 (let (($x244 (and $x55 $x116)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x188 $x244)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x59)))))))
 (let (($x52 (and $x134 $x101)))
 (let (($x135 (= $x52 true)))
 (let (($x91 (= $x135 true)))
 (let (($x138 (= ?x208 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x114 (= $x138 true)))
 (let ((?x48 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x48)))
 (let (($x108 (= ?x87 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x107 (= $x108 true)))
 (let (($x216 (and $x107 $x114)))
 (let (($x64 (and $x216 $x91)))
 (let (($x158 (and $x64 $x140)))
 (let (($x202 (and $x158 $x237)))
 (let (($x205 (forall ((Lambda79 (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x35 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x35 (_ bv1 32))))
 (=> $x37 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x160 (forall ((Lambda79 (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x35 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x35 (_ bv1 32))))
 (= $x37 false)))))
 ))
 (let (($x20 (forall ((Lambda79 (_ BitVec 32)) )(let (($x90 (= false false)))
 (let (($x61 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x35 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x35 (_ bv0 32))))
 (=> $x131 $x90))))))
 ))
 (let (($x109 (forall ((Lambda79 (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x35 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x35 (_ bv0 32))))
 (= $x131 true)))))
 ))
 (let (($x194 (and $x109 $x20)))
 (let (($x126 (and $x194 $x160)))
 (let (($x178 (and $x126 $x205)))
 (let (($x132 (and $x178 $x202)))
 (let (($x23 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x166 (and $x23 $x132)))
 (let (($x92 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x100 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x100 (_ bv1 32))))
 (=> (and $x163 $x43) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x51 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x100 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x100 (_ bv1 32))))
 (let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x43 (= $x163 false)))))))
 ))
 (let (($x241 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x90 (= false false)))
 (let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x100 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x100 (_ bv0 32))))
 (=> (and $x62 $x43) $x90)))))))
 ))
 (let (($x19 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x100 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x100 (_ bv0 32))))
 (let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x43 (= $x62 true)))))))
 ))
 (let (($x44 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x144 (forall ((Lambda68 (_ BitVec 32)) )(let (($x90 (= false false)))
 (let (($x215 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x45 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x45 (_ bv0 32))))
 (=> $x231 $x90))))))
 ))
 (let (($x56 (forall ((Lambda68 (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x45 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x45 (_ bv0 32))))
 (= $x231 true)))))
 ))
 (let (($x147 (and $x56 $x144)))
 (let (($x39 (and $x147 $x44)))
 (let (($x191 (and $x39 $x19)))
 (let (($x242 (and $x191 $x241)))
 (let (($x172 (and $x242 $x51)))
 (let (($x199 (and $x172 $x92)))
 (let (($x86 (and $x199 $x166)))
 (let (($x123 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x15 (and $x123 $x86)))
 (let (($x177 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x141 (and $x177 $x15)))
 (let (($x156 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x77 (and $x156 $x141)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x12 (and $x34 $x77)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x149 (and $x148 $x12)))
 (let (($x225 (and $x199 $x149)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x97 (and $x122 $x225)))
 (let (($x105 (and $x178 $x97)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x36 (and $x18 $x105)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x41 (and $x21 $x36)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x197 (and $x104 $x41)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x70 (and $x209 $x197)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x211 (and $x207 $x70)))
 (let (($x29 (=> $x211 $x169)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x221 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (not $x221)))
 (let (($x65 (= $x233 false)))
 (let (($x169 (= $x65 true)))
 (let ((?x89 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x89)))
 (let (($x58 (= ?x208 input.dst.llvm-%n)))
 (let (($x237 (= $x58 true)))
 (let ((?x99 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x99)))
 (let (($x152 (= ?x38 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x152 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x103)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x228 $x183)))
 (let (($x244 (and $x55 $x116)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x188 $x244)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x59)))))))
 (let (($x52 (and $x134 $x101)))
 (let (($x135 (= $x52 true)))
 (let (($x91 (= $x135 true)))
 (let (($x138 (= ?x208 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x114 (= $x138 true)))
 (let ((?x48 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x48)))
 (let (($x108 (= ?x87 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x107 (= $x108 true)))
 (let (($x216 (and $x107 $x114)))
 (let (($x64 (and $x216 $x91)))
 (let (($x158 (and $x64 $x140)))
 (let (($x202 (and $x158 $x237)))
 (let (($x205 (forall ((Lambda79 (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x35 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x35 (_ bv1 32))))
 (=> $x37 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x160 (forall ((Lambda79 (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x35 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x35 (_ bv1 32))))
 (= $x37 false)))))
 ))
 (let (($x20 (forall ((Lambda79 (_ BitVec 32)) )(let (($x90 (= false false)))
 (let (($x61 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x35 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x35 (_ bv0 32))))
 (=> $x131 $x90))))))
 ))
 (let (($x109 (forall ((Lambda79 (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x35 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x35 (_ bv0 32))))
 (= $x131 true)))))
 ))
 (let (($x194 (and $x109 $x20)))
 (let (($x126 (and $x194 $x160)))
 (let (($x178 (and $x126 $x205)))
 (let (($x132 (and $x178 $x202)))
 (let (($x23 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x166 (and $x23 $x132)))
 (let (($x92 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x100 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x100 (_ bv1 32))))
 (=> (and $x163 $x43) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x51 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x100 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x100 (_ bv1 32))))
 (let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x43 (= $x163 false)))))))
 ))
 (let (($x241 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x90 (= false false)))
 (let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x100 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x100 (_ bv0 32))))
 (=> (and $x62 $x43) $x90)))))))
 ))
 (let (($x19 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x100 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x100 (_ bv0 32))))
 (let (($x43 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x43 (= $x62 true)))))))
 ))
 (let (($x44 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x144 (forall ((Lambda68 (_ BitVec 32)) )(let (($x90 (= false false)))
 (let (($x215 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x45 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x45 (_ bv0 32))))
 (=> $x231 $x90))))))
 ))
 (let (($x56 (forall ((Lambda68 (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x45 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x45 (_ bv0 32))))
 (= $x231 true)))))
 ))
 (let (($x147 (and $x56 $x144)))
 (let (($x39 (and $x147 $x44)))
 (let (($x191 (and $x39 $x19)))
 (let (($x242 (and $x191 $x241)))
 (let (($x172 (and $x242 $x51)))
 (let (($x199 (and $x172 $x92)))
 (let (($x86 (and $x199 $x166)))
 (let (($x123 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x15 (and $x123 $x86)))
 (let (($x177 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x141 (and $x177 $x15)))
 (let (($x156 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x77 (and $x156 $x141)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x12 (and $x34 $x77)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x149 (and $x148 $x12)))
 (let (($x225 (and $x199 $x149)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x97 (and $x122 $x225)))
 (let (($x105 (and $x178 $x97)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x36 (and $x18 $x105)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x41 (and $x21 $x36)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x197 (and $x104 $x41)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x70 (and $x209 $x197)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x211 (and $x207 $x70)))
 (let (($x29 (=> $x211 $x169)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x013b8080)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x013b8083)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x013b8080)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x33 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x234 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x120 (or $x234 $x33)))
 (let (($x66 (= $x120 true)))
 (let (($x224 (= $x66 true)))
 (let ((?x110 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x129 (bvneg ?x110)))
 (let (($x157 (= ?x129 input.dst.llvm-%n)))
 (let (($x94 (= $x157 true)))
 (let (($x206 (= ?x129 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x67 (= $x206 true)))
 (let ((?x226 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x226)))
 (let (($x245 (= ?x145 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x71 (= $x245 true)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x233 (= (_ bv0 32) ?x221)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x197)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (and $x36 $x70)))
 (let (($x65 (and $x211 $x233)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x58 $x65)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x141)))))))
 (let (($x29 (and $x105 $x169)))
 (let (($x46 (= $x29 true)))
 (let (($x223 (= $x46 true)))
 (let ((?x239 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x239)))
 (let (($x174 (= ?x99 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x174 true)))
 (let (($x76 (and $x152 $x223)))
 (let (($x28 (and $x76 $x71)))
 (let (($x171 (and $x28 $x67)))
 (let (($x235 (and $x171 $x94)))
 (let (($x85 (forall ((Lambda79 (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x31 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x31 (_ bv1 32))))
 (=> $x56 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x5 (forall ((Lambda79 (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x31 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x31 (_ bv1 32))))
 (= $x56 false)))))
 ))
 (let (($x215 (forall ((Lambda79 (_ BitVec 32)) )(let (($x177 (= false false)))
 (let (($x122 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x31 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x31 (_ bv0 32))))
 (=> $x156 $x177))))))
 ))
 (let (($x203 (forall ((Lambda79 (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x31 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x31 (_ bv0 32))))
 (= $x156 true)))))
 ))
 (let (($x45 (and $x203 $x215)))
 (let (($x144 (and $x45 $x5)))
 (let (($x43 (and $x144 $x85)))
 (let (($x151 (and $x43 $x235)))
 (let (($x135 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x167 (and $x135 $x151)))
 (let (($x22 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x109 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x160 (_ bv1 32))))
 (=> (and $x216 $x205) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x243 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x160 (_ bv1 32))))
 (let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x205 (= $x216 false)))))))
 ))
 (let (($x107 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x177 (= false false)))
 (let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x109 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x160 (_ bv0 32))))
 (=> (and $x126 $x205) $x177)))))))
 ))
 (let (($x127 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x160 (_ bv0 32))))
 (let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x205 (= $x126 true)))))))
 ))
 (let (($x199 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x172 (forall ((Lambda68 (_ BitVec 32)) )(let (($x177 (= false false)))
 (let (($x128 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x241 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x241 (_ bv0 32))))
 (=> $x242 $x177))))))
 ))
 (let (($x247 (forall ((Lambda68 (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x241 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x241 (_ bv0 32))))
 (= $x242 true)))))
 ))
 (let (($x184 (and $x247 $x172)))
 (let (($x23 (and $x184 $x199)))
 (let (($x143 (and $x23 $x127)))
 (let (($x89 (and $x143 $x107)))
 (let (($x200 (and $x89 $x243)))
 (let (($x188 (and $x200 $x22)))
 (let (($x210 (and $x188 $x167)))
 (let (($x52 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x124 (and $x52 $x210)))
 (let (($x101 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x117 (and $x101 $x124)))
 (let (($x103 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x198 (and $x103 $x117)))
 (let (($x183 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x212 (and $x183 $x198)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x82 (and $x75 $x212)))
 (let (($x49 (and $x188 $x82)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x53 (and $x100 $x49)))
 (let (($x137 (and $x43 $x53)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x13 (and $x10 $x137)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x136 (and $x113 $x13)))
 (let (($x209 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x187 (and $x209 $x136)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x139 (and $x142 $x187)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x119 (and $x80 $x139)))
 (let (($x227 (=> $x119 $x224)))
 (not $x227)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x33 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x234 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x120 (or $x234 $x33)))
 (let (($x66 (= $x120 true)))
 (let (($x224 (= $x66 true)))
 (let ((?x110 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x129 (bvneg ?x110)))
 (let (($x157 (= ?x129 input.dst.llvm-%n)))
 (let (($x94 (= $x157 true)))
 (let (($x206 (= ?x129 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x67 (= $x206 true)))
 (let ((?x226 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x226)))
 (let (($x245 (= ?x145 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x71 (= $x245 true)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x233 (= (_ bv0 32) ?x221)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x197)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (and $x36 $x70)))
 (let (($x65 (and $x211 $x233)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x58 $x65)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x141)))))))
 (let (($x29 (and $x105 $x169)))
 (let (($x46 (= $x29 true)))
 (let (($x223 (= $x46 true)))
 (let ((?x239 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x239)))
 (let (($x174 (= ?x99 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x174 true)))
 (let (($x76 (and $x152 $x223)))
 (let (($x28 (and $x76 $x71)))
 (let (($x171 (and $x28 $x67)))
 (let (($x235 (and $x171 $x94)))
 (let (($x85 (forall ((Lambda79 (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x31 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x31 (_ bv1 32))))
 (=> $x56 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x5 (forall ((Lambda79 (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x31 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x31 (_ bv1 32))))
 (= $x56 false)))))
 ))
 (let (($x215 (forall ((Lambda79 (_ BitVec 32)) )(let (($x177 (= false false)))
 (let (($x122 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x31 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x31 (_ bv0 32))))
 (=> $x156 $x177))))))
 ))
 (let (($x203 (forall ((Lambda79 (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x31 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x31 (_ bv0 32))))
 (= $x156 true)))))
 ))
 (let (($x45 (and $x203 $x215)))
 (let (($x144 (and $x45 $x5)))
 (let (($x43 (and $x144 $x85)))
 (let (($x151 (and $x43 $x235)))
 (let (($x135 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x167 (and $x135 $x151)))
 (let (($x22 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x109 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x160 (_ bv1 32))))
 (=> (and $x216 $x205) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x243 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x160 (_ bv1 32))))
 (let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x205 (= $x216 false)))))))
 ))
 (let (($x107 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x177 (= false false)))
 (let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x109 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x160 (_ bv0 32))))
 (=> (and $x126 $x205) $x177)))))))
 ))
 (let (($x127 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x160 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x160 (_ bv0 32))))
 (let (($x205 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x205 (= $x126 true)))))))
 ))
 (let (($x199 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x172 (forall ((Lambda68 (_ BitVec 32)) )(let (($x177 (= false false)))
 (let (($x128 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x241 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x241 (_ bv0 32))))
 (=> $x242 $x177))))))
 ))
 (let (($x247 (forall ((Lambda68 (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x241 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x241 (_ bv0 32))))
 (= $x242 true)))))
 ))
 (let (($x184 (and $x247 $x172)))
 (let (($x23 (and $x184 $x199)))
 (let (($x143 (and $x23 $x127)))
 (let (($x89 (and $x143 $x107)))
 (let (($x200 (and $x89 $x243)))
 (let (($x188 (and $x200 $x22)))
 (let (($x210 (and $x188 $x167)))
 (let (($x52 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x124 (and $x52 $x210)))
 (let (($x101 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x117 (and $x101 $x124)))
 (let (($x103 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x198 (and $x103 $x117)))
 (let (($x183 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x212 (and $x183 $x198)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x82 (and $x75 $x212)))
 (let (($x49 (and $x188 $x82)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x53 (and $x100 $x49)))
 (let (($x137 (and $x43 $x53)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x13 (and $x10 $x137)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x136 (and $x113 $x13)))
 (let (($x209 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x187 (and $x209 $x136)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x139 (and $x142 $x187)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x119 (and $x80 $x139)))
 (let (($x227 (=> $x119 $x224)))
 (not $x227)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 166 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x40 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x83 (ite $x40 input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x232 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x130 (ite $x232 ?x83 (_ bv0 32))))
 (let (($x6 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x130)))
 (let (($x182 (= $x6 true)))
 (let (($x57 (= $x182 true)))
 (let ((?x8 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x8)))
 (let (($x191 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x185 (= $x191 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x102)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x246)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x78 $x204)))
 (let (($x123 (and $x148 $x34)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x136 $x123)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x186 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x120 $x66)))))))
 (let (($x69 (and $x186 $x231)))
 (let (($x147 (= $x69 true)))
 (let (($x44 (= $x147 true)))
 (let ((?x117 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x117)))
 (let (($x212 (= ?x198 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x212 true)))
 (let ((?x170 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x170)))
 (let (($x167 (= ?x157 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x210 (= $x167 true)))
 (let (($x94 (= ?x157 input.dst.llvm-%n)))
 (let (($x235 (= $x94 true)))
 (let (($x110 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (not $x110)))
 (let (($x206 (= $x129 true)))
 (let (($x67 (= $x206 true)))
 (let (($x151 (and $x67 $x235)))
 (let (($x124 (and $x151 $x210)))
 (let (($x49 (and $x124 $x82)))
 (let (($x39 (and $x49 $x44)))
 (let (($x238 (and $x39 $x185)))
 (let (($x245 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x192 (and $x245 $x238)))
 (let (($x161 (forall ((Lambda79 (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x55 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x55 (_ bv1 32))))
 (=> $x247 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x51 (forall ((Lambda79 (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x55 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x55 (_ bv1 32))))
 (= $x247 false)))))
 ))
 (let (($x128 (forall ((Lambda79 (_ BitVec 32)) )(let (($x101 (= false false)))
 (let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x55 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x55 (_ bv0 32))))
 (=> $x103 $x101))))))
 ))
 (let (($x244 (forall ((Lambda79 (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x55 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x55 (_ bv0 32))))
 (= $x103 true)))))
 ))
 (let (($x241 (and $x244 $x128)))
 (let (($x172 (and $x241 $x51)))
 (let (($x205 (and $x172 $x161)))
 (let (($x50 (and $x205 $x192)))
 (let (($x145 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x9 (and $x145 $x50)))
 (let (($x70 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x203 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x5 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x5 (_ bv1 32))))
 (=> (and $x86 $x85) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x141 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x5 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x5 (_ bv1 32))))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x85 (= $x86 false)))))))
 ))
 (let (($x152 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x101 (= false false)))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x203 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x5 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x5 (_ bv0 32))))
 (=> (and $x144 $x85) $x101)))))))
 ))
 (let (($x91 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x5 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x5 (_ bv0 32))))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x85 (= $x144 true)))))))
 ))
 (let (($x188 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x200 (forall ((Lambda68 (_ BitVec 32)) )(let (($x101 (= false false)))
 (let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x107 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x107 (_ bv0 32))))
 (=> $x89 $x101))))))
 ))
 (let (($x196 (forall ((Lambda68 (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x107 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x107 (_ bv0 32))))
 (= $x89 true)))))
 ))
 (let (($x54 (and $x196 $x200)))
 (let (($x135 (and $x54 $x188)))
 (let (($x64 (and $x135 $x91)))
 (let (($x237 (and $x64 $x152)))
 (let (($x77 (and $x237 $x141)))
 (let (($x211 (and $x77 $x70)))
 (let (($x131 (and $x211 $x9)))
 (let (($x226 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x20 (and $x226 $x131)))
 (let (($x74 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x194 (and $x74 $x20)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x37 (and $x46 $x194)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x11 (and $x169 $x37)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x48 (and $x233 $x11)))
 (let (($x87 (and $x211 $x48)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x208 (and $x160 $x87)))
 (let (($x138 (and $x205 $x208)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x114 (and $x21 $x138)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x25 (and $x104 $x114)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x59 (and $x60 $x25)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x213 (and $x219 $x59)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x214 (and $x207 $x213)))
 (let (($x168 (=> $x214 $x57)))
 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x40 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x83 (ite $x40 input.spec-%var-r-0.L2%31%bbentry (_ bv0 32))))
 (let (($x232 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x130 (ite $x232 ?x83 (_ bv0 32))))
 (let (($x6 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x130)))
 (let (($x182 (= $x6 true)))
 (let (($x57 (= $x182 true)))
 (let ((?x8 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x8)))
 (let (($x191 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x185 (= $x191 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x102)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x246)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x78 $x204)))
 (let (($x123 (and $x148 $x34)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x136 $x123)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x186 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x120 $x66)))))))
 (let (($x69 (and $x186 $x231)))
 (let (($x147 (= $x69 true)))
 (let (($x44 (= $x147 true)))
 (let ((?x117 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x117)))
 (let (($x212 (= ?x198 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x212 true)))
 (let ((?x170 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x170)))
 (let (($x167 (= ?x157 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x210 (= $x167 true)))
 (let (($x94 (= ?x157 input.dst.llvm-%n)))
 (let (($x235 (= $x94 true)))
 (let (($x110 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (not $x110)))
 (let (($x206 (= $x129 true)))
 (let (($x67 (= $x206 true)))
 (let (($x151 (and $x67 $x235)))
 (let (($x124 (and $x151 $x210)))
 (let (($x49 (and $x124 $x82)))
 (let (($x39 (and $x49 $x44)))
 (let (($x238 (and $x39 $x185)))
 (let (($x245 (bvsgt input.spec-%var-i-0.L2%31%bbentry input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x192 (and $x245 $x238)))
 (let (($x161 (forall ((Lambda79 (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x55 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x55 (_ bv1 32))))
 (=> $x247 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x51 (forall ((Lambda79 (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x55 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x55 (_ bv1 32))))
 (= $x247 false)))))
 ))
 (let (($x128 (forall ((Lambda79 (_ BitVec 32)) )(let (($x101 (= false false)))
 (let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x55 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x55 (_ bv0 32))))
 (=> $x103 $x101))))))
 ))
 (let (($x244 (forall ((Lambda79 (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x55 (ite $x100 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x55 (_ bv0 32))))
 (= $x103 true)))))
 ))
 (let (($x241 (and $x244 $x128)))
 (let (($x172 (and $x241 $x51)))
 (let (($x205 (and $x172 $x161)))
 (let (($x50 (and $x205 $x192)))
 (let (($x145 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x9 (and $x145 $x50)))
 (let (($x70 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x203 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x5 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x5 (_ bv1 32))))
 (=> (and $x86 $x85) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x141 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x5 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x5 (_ bv1 32))))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x85 (= $x86 false)))))))
 ))
 (let (($x152 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x101 (= false false)))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x203 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x5 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x5 (_ bv0 32))))
 (=> (and $x144 $x85) $x101)))))))
 ))
 (let (($x91 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x5 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x5 (_ bv0 32))))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x85 (= $x144 true)))))))
 ))
 (let (($x188 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x200 (forall ((Lambda68 (_ BitVec 32)) )(let (($x101 (= false false)))
 (let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x107 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x107 (_ bv0 32))))
 (=> $x89 $x101))))))
 ))
 (let (($x196 (forall ((Lambda68 (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x107 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x107 (_ bv0 32))))
 (= $x89 true)))))
 ))
 (let (($x54 (and $x196 $x200)))
 (let (($x135 (and $x54 $x188)))
 (let (($x64 (and $x135 $x91)))
 (let (($x237 (and $x64 $x152)))
 (let (($x77 (and $x237 $x141)))
 (let (($x211 (and $x77 $x70)))
 (let (($x131 (and $x211 $x9)))
 (let (($x226 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x20 (and $x226 $x131)))
 (let (($x74 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x194 (and $x74 $x20)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x37 (and $x46 $x194)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x11 (and $x169 $x37)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x48 (and $x233 $x11)))
 (let (($x87 (and $x211 $x48)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x208 (and $x160 $x87)))
 (let (($x138 (and $x205 $x208)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x114 (and $x21 $x138)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x25 (and $x104 $x114)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x59 (and $x60 $x25)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x213 (and $x219 $x59)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x214 (and $x207 $x213)))
 (let (($x168 (=> $x214 $x57)))
 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 175 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x222 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (not $x222)))
 (let (($x156 (or $x222 $x173)))
 (let (($x215 (= $x156 true)))
 (let (($x45 (= $x215 true)))
 (let ((?x231 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x231)))
 (let (($x92 (= ?x69 input.dst.llvm-%n)))
 (let (($x62 (= $x92 true)))
 (let ((?x168 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x168)))
 (let (($x10 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x228 (= $x10 true)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x214 (= (_ bv0 32) ?x213)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x208 $x25)))
 (let (($x232 (and $x59 $x214)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x179 $x232)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x131)))))))
 (let (($x83 (and $x87 $x40)))
 (let (($x130 (= $x83 true)))
 (let (($x6 (= $x130 true)))
 (let (($x147 (= ?x69 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x44 (= $x147 true)))
 (let ((?x204 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x204)))
 (let (($x34 (= ?x148 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x34 true)))
 (let (($x39 (and $x123 $x44)))
 (let (($x182 (and $x39 $x6)))
 (let (($x61 (and $x182 $x228)))
 (let (($x75 (and $x61 $x62)))
 (let (($x118 (forall ((Lambda79 (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x29 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x196 (bvuge ?x29 (_ bv1 32))))
 (=> $x196 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x243 (forall ((Lambda79 (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x29 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x196 (bvuge ?x29 (_ bv1 32))))
 (= $x196 false)))))
 ))
 (let (($x178 (forall ((Lambda79 (_ BitVec 32)) )(let (($x74 (= false false)))
 (let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x29 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (= ?x29 (_ bv0 32))))
 (=> $x46 $x74))))))
 ))
 (let (($x76 (forall ((Lambda79 (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x29 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (= ?x29 (_ bv0 32))))
 (= $x46 true)))))
 ))
 (let (($x107 (and $x76 $x178)))
 (let (($x200 (and $x107 $x243)))
 (let (($x85 (and $x200 $x118)))
 (let (($x201 (and $x85 $x75)))
 (let (($x78 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x183 (and $x78 $x201)))
 (let (($x119 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x244 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x51 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x51 (_ bv1 32))))
 (=> (and $x94 $x161) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x167 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x51 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x51 (_ bv1 32))))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x161 (= $x94 false)))))))
 ))
 (let (($x206 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x74 (= false false)))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x244 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x51 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x51 (_ bv0 32))))
 (=> (and $x172 $x161) $x74)))))))
 ))
 (let (($x190 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x51 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x51 (_ bv0 32))))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x161 (= $x172 true)))))))
 ))
 (let (($x211 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x77 (forall ((Lambda68 (_ BitVec 32)) )(let (($x74 (= false false)))
 (let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x152 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x152 (_ bv0 32))))
 (=> $x237 $x74))))))
 ))
 (let (($x15 (forall ((Lambda68 (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x152 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x152 (_ bv0 32))))
 (= $x237 true)))))
 ))
 (let (($x149 (and $x15 $x77)))
 (let (($x145 (and $x149 $x211)))
 (let (($x245 (and $x145 $x190)))
 (let (($x67 (and $x245 $x206)))
 (let (($x210 (and $x67 $x167)))
 (let (($x33 (and $x210 $x119)))
 (let (($x52 (and $x33 $x183)))
 (let (($x136 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x242 (and $x136 $x52)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x163 (and $x13 $x242)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x184 (and $x112 $x163)))
 (let (($x224 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x199 (and $x224 $x184)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x23 (and $x234 $x199)))
 (let (($x127 (and $x33 $x23)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x193 (and $x5 $x127)))
 (let (($x225 (and $x85 $x193)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x165 (and $x113 $x225)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x143 (and $x209 $x165)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x146 (and $x142 $x143)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x108 (and $x95 $x146)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x26 (and $x140 $x108)))
 (let (($x56 (=> $x26 $x45)))
 (not $x56)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x222 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (not $x222)))
 (let (($x156 (or $x222 $x173)))
 (let (($x215 (= $x156 true)))
 (let (($x45 (= $x215 true)))
 (let ((?x231 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x231)))
 (let (($x92 (= ?x69 input.dst.llvm-%n)))
 (let (($x62 (= $x92 true)))
 (let ((?x168 (bvmul input.spec-%var-i-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x168)))
 (let (($x10 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x228 (= $x10 true)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x214 (= (_ bv0 32) ?x213)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x208 $x25)))
 (let (($x232 (and $x59 $x214)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x179 $x232)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x131)))))))
 (let (($x83 (and $x87 $x40)))
 (let (($x130 (= $x83 true)))
 (let (($x6 (= $x130 true)))
 (let (($x147 (= ?x69 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x44 (= $x147 true)))
 (let ((?x204 (bvmul input.spec-%var-r-0.L2%31%bbentry (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x204)))
 (let (($x34 (= ?x148 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x34 true)))
 (let (($x39 (and $x123 $x44)))
 (let (($x182 (and $x39 $x6)))
 (let (($x61 (and $x182 $x228)))
 (let (($x75 (and $x61 $x62)))
 (let (($x118 (forall ((Lambda79 (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x29 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x196 (bvuge ?x29 (_ bv1 32))))
 (=> $x196 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x243 (forall ((Lambda79 (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x29 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x196 (bvuge ?x29 (_ bv1 32))))
 (= $x196 false)))))
 ))
 (let (($x178 (forall ((Lambda79 (_ BitVec 32)) )(let (($x74 (= false false)))
 (let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x29 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (= ?x29 (_ bv0 32))))
 (=> $x46 $x74))))))
 ))
 (let (($x76 (forall ((Lambda79 (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x29 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (= ?x29 (_ bv0 32))))
 (= $x46 true)))))
 ))
 (let (($x107 (and $x76 $x178)))
 (let (($x200 (and $x107 $x243)))
 (let (($x85 (and $x200 $x118)))
 (let (($x201 (and $x85 $x75)))
 (let (($x78 (= input.spec-%tmpvar-10.L2%31%bbentry (_ bv1 32))))
 (let (($x183 (and $x78 $x201)))
 (let (($x119 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x244 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x51 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x51 (_ bv1 32))))
 (=> (and $x94 $x161) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x167 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x51 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x51 (_ bv1 32))))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x161 (= $x94 false)))))))
 ))
 (let (($x206 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x74 (= false false)))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x244 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x51 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x51 (_ bv0 32))))
 (=> (and $x172 $x161) $x74)))))))
 ))
 (let (($x190 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x244 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x51 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x51 (_ bv0 32))))
 (let (($x161 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x161 (= $x172 true)))))))
 ))
 (let (($x211 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x77 (forall ((Lambda68 (_ BitVec 32)) )(let (($x74 (= false false)))
 (let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x152 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x152 (_ bv0 32))))
 (=> $x237 $x74))))))
 ))
 (let (($x15 (forall ((Lambda68 (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x152 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x152 (_ bv0 32))))
 (= $x237 true)))))
 ))
 (let (($x149 (and $x15 $x77)))
 (let (($x145 (and $x149 $x211)))
 (let (($x245 (and $x145 $x190)))
 (let (($x67 (and $x245 $x206)))
 (let (($x210 (and $x67 $x167)))
 (let (($x33 (and $x210 $x119)))
 (let (($x52 (and $x33 $x183)))
 (let (($x136 (= input.spec-%tmpvar-8.L2%31%bbentry (_ bv0 32))))
 (let (($x242 (and $x136 $x52)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x163 (and $x13 $x242)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x184 (and $x112 $x163)))
 (let (($x224 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x199 (and $x224 $x184)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x23 (and $x234 $x199)))
 (let (($x127 (and $x33 $x23)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x193 (and $x5 $x127)))
 (let (($x225 (and $x85 $x193)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x165 (and $x113 $x225)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x143 (and $x209 $x165)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x146 (and $x142 $x143)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x108 (and $x95 $x146)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x26 (and $x140 $x108)))
 (let (($x56 (=> $x26 $x45)))
 (not $x56)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 166 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x225)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x184 $x127)))
 (let (($x143 (and $x193 $x165)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x163 $x143)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x31)))))))
 (let (($x36 (and $x52 $x146)))
 (let (($x41 (= $x36 true)))
 (let (($x103 (= $x41 true)))
 (let ((?x222 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x221 (concat ?x21 (concat ?x90 (concat ?x156 ?x222)))))
 (let (($x169 (= ?x221 input.dst.llvm-%n)))
 (let (($x226 (= $x169 true)))
 (let (($x122 (= input.dst.llvm-%n ?x221)))
 (let (($x126 (and (and (and $x52 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x146) $x122)))
 (let (($x233 (= $x126 true)))
 (let (($x65 (= $x233 true)))
 (let (($x89 (and $x65 $x226)))
 (let (($x83 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x216 (and $x83 $x89)))
 (let (($x214 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x54 (and $x214 $x216)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x188 (and $x59 $x54)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x135 (and $x114 $x188)))
 (let (($x179 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x200 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x200 (_ bv1 32))))
 (=> (and $x191 $x85) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x238 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x200 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x200 (_ bv1 32))))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x85 (= $x191 false)))))))
 ))
 (let (($x231 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x136 (= false false)))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x200 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (= ?x200 (_ bv0 32))))
 (=> (and $x134 $x85) $x136)))))))
 ))
 (let (($x246 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x200 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (= ?x200 (_ bv0 32))))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x85 (= $x134 true)))))))
 ))
 (let (($x78 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x117 (forall ((Lambda68 (_ BitVec 32)) )(let (($x136 (= false false)))
 (let (($x190 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x67 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x67 (_ bv0 32))))
 (=> $x94 $x136))))))
 ))
 (let (($x151 (forall ((Lambda68 (_ BitVec 32)) )(let (($x190 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x67 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x67 (_ bv0 32))))
 (= $x94 true)))))
 ))
 (let (($x187 (and $x151 $x117)))
 (let (($x160 (and $x187 $x78)))
 (let (($x204 (and $x160 $x246)))
 (let (($x69 (and $x204 $x231)))
 (let (($x50 (and $x69 $x238)))
 (let (($x208 (and $x50 $x179)))
 (let (($x91 (and $x208 $x135)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x240 (and $x172 $x91)))
 (let (($x161 (forall ((Lambda79 (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x112 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x112 (_ bv1 32))))
 (=> $x74 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x77 (forall ((Lambda79 (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x112 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x112 (_ bv1 32))))
 (= $x74 false)))))
 ))
 (let (($x152 (forall ((Lambda79 (_ BitVec 32)) )(let (($x136 (= false false)))
 (let (($x120 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x112 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x112 (_ bv0 32))))
 (=> $x158 $x136))))))
 ))
 (let (($x13 (forall ((Lambda79 (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x112 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x112 (_ bv0 32))))
 (= $x158 true)))))
 ))
 (let (($x237 (and $x13 $x152)))
 (let (($x149 (and $x237 $x77)))
 (let (($x244 (and $x149 $x161)))
 (let (($x198 (and $x244 $x240)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x72 (and $x113 $x198)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x64 (and $x209 $x72)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x38 (and $x142 $x64)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x174 (and $x95 $x38)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x166 (and $x140 $x174)))
 (let (($x128 (=> $x166 $x103)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x225)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x184 $x127)))
 (let (($x143 (and $x193 $x165)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x163 $x143)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x31)))))))
 (let (($x36 (and $x52 $x146)))
 (let (($x41 (= $x36 true)))
 (let (($x103 (= $x41 true)))
 (let ((?x222 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x221 (concat ?x21 (concat ?x90 (concat ?x156 ?x222)))))
 (let (($x169 (= ?x221 input.dst.llvm-%n)))
 (let (($x226 (= $x169 true)))
 (let (($x122 (= input.dst.llvm-%n ?x221)))
 (let (($x126 (and (and (and $x52 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x146) $x122)))
 (let (($x233 (= $x126 true)))
 (let (($x65 (= $x233 true)))
 (let (($x89 (and $x65 $x226)))
 (let (($x83 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x216 (and $x83 $x89)))
 (let (($x214 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x54 (and $x214 $x216)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x188 (and $x59 $x54)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x135 (and $x114 $x188)))
 (let (($x179 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x200 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x200 (_ bv1 32))))
 (=> (and $x191 $x85) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x238 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x200 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x200 (_ bv1 32))))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x85 (= $x191 false)))))))
 ))
 (let (($x231 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x136 (= false false)))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x200 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (= ?x200 (_ bv0 32))))
 (=> (and $x134 $x85) $x136)))))))
 ))
 (let (($x246 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x200 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (= ?x200 (_ bv0 32))))
 (let (($x85 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x85 (= $x134 true)))))))
 ))
 (let (($x78 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x117 (forall ((Lambda68 (_ BitVec 32)) )(let (($x136 (= false false)))
 (let (($x190 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x67 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x67 (_ bv0 32))))
 (=> $x94 $x136))))))
 ))
 (let (($x151 (forall ((Lambda68 (_ BitVec 32)) )(let (($x190 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x67 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x67 (_ bv0 32))))
 (= $x94 true)))))
 ))
 (let (($x187 (and $x151 $x117)))
 (let (($x160 (and $x187 $x78)))
 (let (($x204 (and $x160 $x246)))
 (let (($x69 (and $x204 $x231)))
 (let (($x50 (and $x69 $x238)))
 (let (($x208 (and $x50 $x179)))
 (let (($x91 (and $x208 $x135)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x240 (and $x172 $x91)))
 (let (($x161 (forall ((Lambda79 (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x112 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x112 (_ bv1 32))))
 (=> $x74 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x77 (forall ((Lambda79 (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x112 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x112 (_ bv1 32))))
 (= $x74 false)))))
 ))
 (let (($x152 (forall ((Lambda79 (_ BitVec 32)) )(let (($x136 (= false false)))
 (let (($x120 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x112 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x112 (_ bv0 32))))
 (=> $x158 $x136))))))
 ))
 (let (($x13 (forall ((Lambda79 (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x112 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x112 (_ bv0 32))))
 (= $x158 true)))))
 ))
 (let (($x237 (and $x13 $x152)))
 (let (($x149 (and $x237 $x77)))
 (let (($x244 (and $x149 $x161)))
 (let (($x198 (and $x244 $x240)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x72 (and $x113 $x198)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x64 (and $x209 $x72)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x38 (and $x142 $x64)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x174 (and $x95 $x38)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x166 (and $x140 $x174)))
 (let (($x128 (=> $x166 $x103)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x9)))
 (let (($x194 (= ?x20 input.dst.llvm-%n)))
 (let (($x37 (= $x194 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x197 (concat ?x15 (concat ?x227 (concat ?x211 ?x100)))))
 (let (($x110 (= ?x197 input.dst.llvm-%n)))
 (let (($x129 (= $x110 true)))
 (let (($x145 (= input.dst.llvm-%n ?x197)))
 (let ((?x241 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x241)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x166 $x103)))
 (let (($x6 (and $x128 $x130)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x174 $x6)))
 (let (($x233 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x188)))))))
 (let (($x178 (and (and (and $x64 $x233) $x26) $x145)))
 (let (($x131 (= $x178 true)))
 (let (($x205 (= $x131 true)))
 (let (($x206 (and $x205 $x129)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x167 (and $x19 $x206)))
 (let (($x156 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x139 (and $x156 $x167)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x18 (and $x90 $x139)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x223 (and $x45 $x18)))
 (let (($x108 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x208 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x214 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x214 (_ bv1 32))))
 (=> (and $x57 $x195) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x163 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x214 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x214 (_ bv1 32))))
 (let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x195 (= $x57 false)))))))
 ))
 (let (($x62 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x141 (= false false)))
 (let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x208 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x214 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x214 (_ bv0 32))))
 (=> (and $x232 $x195) $x141)))))))
 ))
 (let (($x137 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x214 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x214 (_ bv0 32))))
 (let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x195 (= $x232 true)))))))
 ))
 (let (($x50 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x231 (forall ((Lambda68 (_ BitVec 32)) )(let (($x141 (= false false)))
 (let (($x118 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x236 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (= ?x236 (_ bv0 32))))
 (=> $x35 $x141))))))
 ))
 (let (($x204 (forall ((Lambda68 (_ BitVec 32)) )(let (($x118 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x236 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (= ?x236 (_ bv0 32))))
 (= $x35 true)))))
 ))
 (let (($x69 (and $x204 $x231)))
 (let (($x192 (and $x69 $x50)))
 (let (($x228 (and $x192 $x137)))
 (let (($x75 (and $x228 $x62)))
 (let (($x184 (and $x75 $x163)))
 (let (($x8 (and $x184 $x108)))
 (let (($x107 (and $x8 $x223)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x196 (and $x160 $x107)))
 (let (($x119 (forall ((Lambda79 (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x43 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x43 (_ bv1 32))))
 (=> $x244 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x172 (forall ((Lambda79 (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x43 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x43 (_ bv1 32))))
 (= $x244 false)))))
 ))
 (let (($x70 (forall ((Lambda79 (_ BitVec 32)) )(let (($x141 (= false false)))
 (let (($x112 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x43 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (= ?x43 (_ bv0 32))))
 (=> $x152 $x141))))))
 ))
 (let (($x74 (forall ((Lambda79 (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x43 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (= ?x43 (_ bv0 32))))
 (= $x152 true)))))
 ))
 (let (($x155 (and $x74 $x70)))
 (let (($x190 (and $x155 $x172)))
 (let (($x33 (and $x190 $x119)))
 (let (($x101 (and $x33 $x196)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x243 (and $x113 $x101)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x148 (and $x209 $x243)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x102 (and $x142 $x148)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x147 (and $x95 $x102)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x44 (and $x140 $x147)))
 (let (($x247 (=> $x44 $x37)))
 (not $x247))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x9)))
 (let (($x194 (= ?x20 input.dst.llvm-%n)))
 (let (($x37 (= $x194 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x197 (concat ?x15 (concat ?x227 (concat ?x211 ?x100)))))
 (let (($x110 (= ?x197 input.dst.llvm-%n)))
 (let (($x129 (= $x110 true)))
 (let (($x145 (= input.dst.llvm-%n ?x197)))
 (let ((?x241 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x241)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x166 $x103)))
 (let (($x6 (and $x128 $x130)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x174 $x6)))
 (let (($x233 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x188)))))))
 (let (($x178 (and (and (and $x64 $x233) $x26) $x145)))
 (let (($x131 (= $x178 true)))
 (let (($x205 (= $x131 true)))
 (let (($x206 (and $x205 $x129)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x167 (and $x19 $x206)))
 (let (($x156 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x139 (and $x156 $x167)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x18 (and $x90 $x139)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x223 (and $x45 $x18)))
 (let (($x108 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x208 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x214 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x214 (_ bv1 32))))
 (=> (and $x57 $x195) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x163 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x214 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x214 (_ bv1 32))))
 (let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x195 (= $x57 false)))))))
 ))
 (let (($x62 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x141 (= false false)))
 (let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x208 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x214 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x214 (_ bv0 32))))
 (=> (and $x232 $x195) $x141)))))))
 ))
 (let (($x137 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x214 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x214 (_ bv0 32))))
 (let (($x195 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x195 (= $x232 true)))))))
 ))
 (let (($x50 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x231 (forall ((Lambda68 (_ BitVec 32)) )(let (($x141 (= false false)))
 (let (($x118 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x236 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (= ?x236 (_ bv0 32))))
 (=> $x35 $x141))))))
 ))
 (let (($x204 (forall ((Lambda68 (_ BitVec 32)) )(let (($x118 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x236 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (= ?x236 (_ bv0 32))))
 (= $x35 true)))))
 ))
 (let (($x69 (and $x204 $x231)))
 (let (($x192 (and $x69 $x50)))
 (let (($x228 (and $x192 $x137)))
 (let (($x75 (and $x228 $x62)))
 (let (($x184 (and $x75 $x163)))
 (let (($x8 (and $x184 $x108)))
 (let (($x107 (and $x8 $x223)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x196 (and $x160 $x107)))
 (let (($x119 (forall ((Lambda79 (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x43 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x43 (_ bv1 32))))
 (=> $x244 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x172 (forall ((Lambda79 (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x43 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x43 (_ bv1 32))))
 (= $x244 false)))))
 ))
 (let (($x70 (forall ((Lambda79 (_ BitVec 32)) )(let (($x141 (= false false)))
 (let (($x112 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x43 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (= ?x43 (_ bv0 32))))
 (=> $x152 $x141))))))
 ))
 (let (($x74 (forall ((Lambda79 (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x43 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (= ?x43 (_ bv0 32))))
 (= $x152 true)))))
 ))
 (let (($x155 (and $x74 $x70)))
 (let (($x190 (and $x155 $x172)))
 (let (($x33 (and $x190 $x119)))
 (let (($x101 (and $x33 $x196)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x243 (and $x113 $x101)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x148 (and $x209 $x243)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x102 (and $x142 $x148)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x147 (and $x95 $x102)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x44 (and $x140 $x147)))
 (let (($x247 (=> $x44 $x37)))
 (not $x247))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x52 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x52)))
 (let (($x199 (= ?x182 input.spec-%var-n-1)))
 (let (($x193 (= $x199 true)))
 (let ((?x205 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x243 (concat ?x101 (concat ?x18 (concat ?x129 ?x205)))))
 (let (($x151 (= input.dst.llvm-%n ?x243)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x77)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x162 $x13)))
 (let (($x161 (and $x136 $x73)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x9 $x161)))
 (let (($x39 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x235 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x221 $x122)))))))
 (let (($x138 (and (and (and $x235 $x39) $x67) $x151)))
 (let (($x127 (= $x138 true)))
 (let (($x153 (= $x127 true)))
 (let (($x102 (= ?x243 input.dst.llvm-%n)))
 (let (($x147 (= $x102 true)))
 (let (($x159 (and $x147 $x153)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x200 (and $x109 $x159)))
 (let (($x211 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x134 (and $x211 $x200)))
 (let (($x227 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x34 (and $x227 $x134)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x191 (and $x66 $x34)))
 (let (($x203 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x169 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x8 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x156 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x156 (_ bv1 32))))
 (=> (and $x233 $x169) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x174 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x156 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x156 (_ bv1 32))))
 (let (($x169 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x169 (= $x233 false)))))))
 ))
 (let (($x91 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x51 (= false false)))
 (let (($x169 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x8 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x156 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x156 (_ bv0 32))))
 (=> (and $x222 $x169) $x51)))))))
 ))
 (let (($x226 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x156 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x156 (_ bv0 32))))
 (let (($x169 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x169 (= $x222 true)))))))
 ))
 (let (($x184 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x62 (forall ((Lambda68 (_ BitVec 32)) )(let (($x51 (= false false)))
 (let (($x168 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x40 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (= ?x40 (_ bv0 32))))
 (=> $x183 $x51))))))
 ))
 (let (($x228 (forall ((Lambda68 (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x40 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (= ?x40 (_ bv0 32))))
 (= $x183 true)))))
 ))
 (let (($x75 (and $x228 $x62)))
 (let (($x23 (and $x75 $x184)))
 (let (($x216 (and $x23 $x226)))
 (let (($x240 (and $x216 $x91)))
 (let (($x166 (and $x240 $x174)))
 (let (($x86 (and $x166 $x203)))
 (let (($x185 (and $x86 $x191)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x79 (and $x192 $x185)))
 (let (($x48 (forall ((Lambda79 (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x149 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x149 (_ bv1 32))))
 (=> $x33 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x160 (forall ((Lambda79 (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x149 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x149 (_ bv1 32))))
 (= $x33 false)))))
 ))
 (let (($x94 (forall ((Lambda79 (_ BitVec 32)) )(let (($x51 (= false false)))
 (let (($x43 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x149 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x149 (_ bv0 32))))
 (=> $x70 $x51))))))
 ))
 (let (($x244 (forall ((Lambda79 (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x149 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x149 (_ bv0 32))))
 (= $x70 true)))))
 ))
 (let (($x117 (and $x244 $x94)))
 (let (($x118 (and $x117 $x160)))
 (let (($x238 (and $x118 $x48)))
 (let (($x114 (and $x238 $x79)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x25 (and $x113 $x114)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x59 (and $x209 $x25)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x213 (and $x142 $x59)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x61 (and $x95 $x213)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x10 (and $x140 $x61)))
 (let (($x225 (=> $x10 $x193)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L2%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%31%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-21.L2%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x52 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x52)))
 (let (($x199 (= ?x182 input.spec-%var-n-1)))
 (let (($x193 (= $x199 true)))
 (let ((?x205 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x243 (concat ?x101 (concat ?x18 (concat ?x129 ?x205)))))
 (let (($x151 (= input.dst.llvm-%n ?x243)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x77)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x162 $x13)))
 (let (($x161 (and $x136 $x73)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x9 $x161)))
 (let (($x39 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x235 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x221 $x122)))))))
 (let (($x138 (and (and (and $x235 $x39) $x67) $x151)))
 (let (($x127 (= $x138 true)))
 (let (($x153 (= $x127 true)))
 (let (($x102 (= ?x243 input.dst.llvm-%n)))
 (let (($x147 (= $x102 true)))
 (let (($x159 (and $x147 $x153)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%31%bbentry)))
 (let (($x200 (and $x109 $x159)))
 (let (($x211 (= (_ bv1 32) input.spec-%tmpvar-19.L2%20%d)))
 (let (($x134 (and $x211 $x200)))
 (let (($x227 (= (_ bv1 32) input.spec-%tmpvar-10.L2%31%bbentry)))
 (let (($x34 (and $x227 $x134)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-16.L2%13%d)))
 (let (($x191 (and $x66 $x34)))
 (let (($x203 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x169 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x8 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x156 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x156 (_ bv1 32))))
 (=> (and $x233 $x169) (= (input.spec-%tmpvar-7.L2%31%bbentry.1.1.1.1 Lambda68 Lambda69) (_ bv0 32))))))))
 ))
 (let (($x174 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x156 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x156 (_ bv1 32))))
 (let (($x169 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x169 (= $x233 false)))))))
 ))
 (let (($x91 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x51 (= false false)))
 (let (($x169 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x8 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x156 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x156 (_ bv0 32))))
 (=> (and $x222 $x169) $x51)))))))
 ))
 (let (($x226 (forall ((Lambda68 (_ BitVec 32)) (Lambda69 (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-7.L2%31%bbentry.1.1.0.1 Lambda68 Lambda69)))
 (let ((?x156 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x156 (_ bv0 32))))
 (let (($x169 (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x169 (= $x222 true)))))))
 ))
 (let (($x184 (forall ((Lambda68 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x62 (forall ((Lambda68 (_ BitVec 32)) )(let (($x51 (= false false)))
 (let (($x168 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x40 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (= ?x40 (_ bv0 32))))
 (=> $x183 $x51))))))
 ))
 (let (($x228 (forall ((Lambda68 (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-7.L2%31%bbentry.0.1 Lambda68)))
 (let ((?x40 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (= ?x40 (_ bv0 32))))
 (= $x183 true)))))
 ))
 (let (($x75 (and $x228 $x62)))
 (let (($x23 (and $x75 $x184)))
 (let (($x216 (and $x23 $x226)))
 (let (($x240 (and $x216 $x91)))
 (let (($x166 (and $x240 $x174)))
 (let (($x86 (and $x166 $x203)))
 (let (($x185 (and $x86 $x191)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-8.L2%31%bbentry)))
 (let (($x79 (and $x192 $x185)))
 (let (($x48 (forall ((Lambda79 (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x149 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x149 (_ bv1 32))))
 (=> $x33 (= (input.spec-%tmpvar-9.L2%31%bbentry.1.1 Lambda79) (_ bv0 32)))))))
 ))
 (let (($x160 (forall ((Lambda79 (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x149 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x149 (_ bv1 32))))
 (= $x33 false)))))
 ))
 (let (($x94 (forall ((Lambda79 (_ BitVec 32)) )(let (($x51 (= false false)))
 (let (($x43 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x149 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x149 (_ bv0 32))))
 (=> $x70 $x51))))))
 ))
 (let (($x244 (forall ((Lambda79 (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-9.L2%31%bbentry.0.1 Lambda79)))
 (let ((?x149 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x149 (_ bv0 32))))
 (= $x70 true)))))
 ))
 (let (($x117 (and $x244 $x94)))
 (let (($x118 (and $x117 $x160)))
 (let (($x238 (and $x118 $x48)))
 (let (($x114 (and $x238 $x79)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-21.L2%26%bbentry)))
 (let (($x25 (and $x113 $x114)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-18.L2%27%bbentry)))
 (let (($x59 (and $x209 $x25)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-11.L2%31%bbentry)))
 (let (($x213 (and $x142 $x59)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-12.L2%31%bbentry)))
 (let (($x61 (and $x95 $x213)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L2%31%bbentry)))
 (let (($x10 (and $x140 $x61)))
 (let (($x225 (=> $x10 $x193)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460653/query
