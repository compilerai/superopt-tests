=TFG_SSA:
=TFG_LLVM dst.llvm.make_node:
=TFG:
=Nodes: L0%0%d Lentry%1%intermediateVal1 Lentry%1%fcallStart Lentry%1%fcallEnd Lentry%2%d E0%0%d
=Edges:
L0%0%d => Lentry%1%fcallStart
Lentry%1%fcallStart => Lentry%1%fcallEnd
Lentry%1%fcallEnd => Lentry%1%intermediateVal1
Lentry%1%intermediateVal1 => Lentry%2%d
Lentry%2%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%val
1 : input.dst.llvm-%val : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%intermediateVal1
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%fcallStart
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%fcallEnd
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: make_node
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%val : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : make_node : 9 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%val : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;make_node}
=memlabel_map.0 for call-context {*;make_node}
mlcall.dst.llvm.make_node.2 : memlabel-mem-
=memlabel_map.1 for call-context {*;make_node}
mlcall.dst.llvm.make_node.3 : memlabel-mem-
=memlabel_map.2 for call-context {*;make_node}
mlheap.dst.llvm.make_node : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.3 for call-context {*;make_node}
mlvar.dst.llvm.make_node.0 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=memlabel_map.4 for call-context {*;make_node}
mlvar.dst.llvm.make_node.1 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Edge: L0%0%d => Lentry%1%fcallStart
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.local_alloc_count.Lentry%1%fcallStart
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(start_pc_edge*fcall_edge_start)
tfg_edge_comment end

=Edge: Lentry%1%fcallStart => Lentry%1%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-mem.Lentry%1%fcallEnd
1 : func.call30eccc4aa0775a3174483e053ab761b.mem : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> ARRAY[BV:32 -> BV:8]]
2 : mlcall.dst.llvm.make_node.2 : MEMLABEL
3 : mlcall.dst.llvm.make_node.3 : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 0 { 0x0 +1.0e129 } : REGID
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : ARRAY[BV:32 -> BV:8]
=dst.llvm-%call.Lentry%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : mlcall.dst.llvm.make_node.2 : MEMLABEL
3 : mlcall.dst.llvm.make_node.3 : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*  %call = call i8* @malloc(i32 8), !dbg !22)
tfg_edge_comment end

=Edge: Lentry%1%fcallEnd => Lentry%1%intermediateVal1
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_end*  %call = call i8* @malloc(i32 8), !dbg !22)
tfg_edge_comment end

=Edge: Lentry%1%intermediateVal1 => Lentry%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%call.Lentry%2%d
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(1, 4) : BV:32
6 : ite(3, 2, 5) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%val.Lentry%2%d
1 : input.dst.llvm-%val : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-mem.alloc.Lentry%2%d
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : heap_alloc(4, 5, 1, 6) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(3, 4, 7) : ARRAY[BV:32 -> MEMLABEL]
=dst.llvm-mem.Lentry%2%d
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 1, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
10 : store_uninit(4, 8, 6, 1, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
2 : increment_count(1) : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : eq(4, 2) : BOOL
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc_ptr(1, 6) : BV:32
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : bvadd(7, 9) : BV:32
11 : bvule(7, 10) : BOOL
12 : or(5, 11) : BOOL
13 : or(3, 12) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : mlheap.dst.llvm.make_node : MEMLABEL
7 : region_agrees_with_memlabel(4, 1, 5, 6) : BOOL
8 : or(3, 7) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:  %call = call i8* @malloc(i32 8), !dbg !22
tfg_edge_comment end

=Edge: Lentry%2%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%0.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvadd(4, 5) : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : bvadd(4, 1) : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%next.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=dst.llvm-%val1.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.llvm-mem.E0%0%d
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.make_node.0 : MEMLABEL
4 : input.dst.llvm-%call.Lentry%2%d : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(8, 5) : BV:32
10 : bvadd(4, 9) : BV:32
11 : input.dst.llvm-%val.Lentry%2%d : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : store(1, 2, 3, 10, 11, 12, 13) : ARRAY[BV:32 -> BV:8]
15 : mlvar.dst.llvm.make_node.1 : MEMLABEL
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvadd(8, 16) : BV:32
18 : bvadd(4, 17) : BV:32
19 : store(14, 2, 15, 18, 5, 12, 13) : ARRAY[BV:32 -> BV:8]
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(1, 5) : BV:32
7 : isgepoffset(6, 4) : BOOL
8 : bvslt(2, 2) : BOOL
9 : 32 { 0x20 +1.0e1025 } : INT
10 : bvsign_ext(2, 9) : BV:64
11 : bvzero_ext(3, 9) : BV:64
12 : bvmul(10, 11) : BV:64
13 : 63 { 0x3f +1.0e1025 } : INT
14 : bvextract(12, 13, 9) : BV:32
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : eq(14, 15) : BOOL
17 : eq(14, 2) : BOOL
18 : ite(8, 16, 17) : BOOL
19 : 8 { 0x8 +1.0e1025 } : INT
20 : isindexforsize(18, 19) : BOOL
21 : and(7, 20) : BOOL
22 : bvadd(5, 2) : BV:32
23 : bvadd(1, 22) : BV:32
24 : isgepoffset(23, 2) : BOOL
25 : and(21, 24) : BOOL
26 : 4 { 0x4 +1.0e1025 } : INT
27 : islangaligned(23, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvadd(5, 29) : BV:32
31 : bvadd(1, 30) : BV:32
32 : isgepoffset(31, 29) : BOOL
33 : and(21, 32) : BOOL
34 : and(28, 33) : BOOL
35 : islangaligned(31, 26) : BOOL
36 : and(34, 35) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((((  %0 = bitcast i8* %call to %struct.list*, !dbg !22*  %val1 = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !24)*  %val1 = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !24)*(  %val1 = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !24*  %val1 = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !24))*  store i32 %val, i32* %val1, align 4, !dbg !25)*((  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !26*  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !26)*(  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !26*  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !26)))*  store %struct.list* null, %struct.list** %next, align 4, !dbg !27)*  ret %struct.list* %0, !dbg !28)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%val : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.make_node
=Loc 100002 in dst.llvm.make_node.
REGMEM
dst.llvm-%val
1 : input.dst.llvm-%val : BV:32
=Loc 100017 in dst.llvm.make_node.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100019 in dst.llvm.make_node.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100020 in dst.llvm.make_node.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100021 in dst.llvm.make_node.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100022 in dst.llvm.make_node.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100025 in dst.llvm.make_node.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100026 in dst.llvm.make_node.
REGMEM
dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
=Loc 100028 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100029 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100030 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Loc 100031 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/
=Loc 100032 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Loc 100033 in dst.llvm.make_node.
REGMEM
dst.llvm-%call.Lentry%1%fcallEnd
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=Loc 100034 in dst.llvm.make_node.
REGMEM
dst.llvm-%call.Lentry%2%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=Loc 100035 in dst.llvm.make_node.
REGMEM
dst.llvm-%val.Lentry%2%d
1 : input.dst.llvm-%val.Lentry%2%d : BV:32
=Loc 100036 in dst.llvm.make_node.
REGMEM
dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
=Loc 100037 in dst.llvm.make_node.
REGMEM
dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d : BV:32
=Loc 100038 in dst.llvm.make_node.
REGMEM
dst.llvm-%0.E0%0%d
1 : input.dst.llvm-%0.E0%0%d : BV:32
=Loc 100039 in dst.llvm.make_node.
REGMEM
dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100040 in dst.llvm.make_node.
REGMEM
dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100041 in dst.llvm.make_node.
REGMEM
dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d : BV:32
=Loc 100042 in dst.llvm.make_node.
REGMEM
dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100043 in dst.llvm.make_node.
REGMEM
dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=Loc 100044 in dst.llvm.make_node.
REGMEM
dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100045 in dst.llvm.make_node.
REGMEM
dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100046 in dst.llvm.make_node.
REGMEM
dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d : BV:32
=Loc 100047 in dst.llvm.make_node.
REGMEM
dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100048 in dst.llvm.make_node.
REGMEM
dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=Loc 100049 in dst.llvm.make_node.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100050 in dst.llvm.make_node.
REGMEM
dst.llvm-%next.E0%0%d
1 : input.dst.llvm-%next.E0%0%d : BV:32
=Loc 100051 in dst.llvm.make_node.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100052 in dst.llvm.make_node.
REGMEM
dst.llvm-%val1.E0%0%d
1 : input.dst.llvm-%val1.E0%0%d : BV:32
=Loc 100053 in dst.llvm.make_node.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100054 in dst.llvm.make_node.
REGMEM
dst.local_alloc_count.Lentry%1%fcallStart
1 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
=Loc 100055 in dst.llvm.make_node.
REGMEM
dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=Loc 100056 in dst.llvm.make_node.
REGMEM
dst.cur_rounding_mode.Lentry%1%fcallStart
1 : input.dst.cur_rounding_mode.Lentry%1%fcallStart : ROUNDING_MODE
=Loc 100057 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100058 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100059 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Loc 100060 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/
=Loc 100061 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Loc 100062 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100063 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100064 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Loc 100065 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/
=Loc 100066 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Loc 100067 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100068 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100069 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Loc 100070 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/
=Loc 100071 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Locs end
=Liveness in dst.llvm.make_node
=live locs at L0%0%d
100002, 100029, 100030, 100031, 100032, 
=live locs at Lentry%1%intermediateVal1
100002, 100033, 100058, 
=live locs at Lentry%1%fcallStart
100002, 100029, 100030, 100031, 100032, 
=live locs at Lentry%1%fcallEnd
100002, 100033, 100058, 
=live locs at Lentry%2%d
100034[f], 100035, 100063, 
=live locs at E0%0%d
100034[f], 100068, 

=Definedness in dst.llvm.make_node
=loc definedness at L0%0%d
100002, 100026, 100028, 100029, 100030, 100031, 100032
=loc definedness at Lentry%1%intermediateVal1
100002, 100026, 100028, 100029, 100030, 100031, 100032, 100033, 100036, 100054, 100056, 100057, 100058, 100059, 100060, 100061
=loc definedness at Lentry%1%fcallStart
100002, 100026, 100028, 100029, 100030, 100031, 100032, 100054, 100056
=loc definedness at Lentry%1%fcallEnd
100002, 100026, 100028, 100029, 100030, 100031, 100032, 100033, 100036, 100054, 100056, 100057, 100058, 100059, 100060, 100061
=loc definedness at Lentry%2%d
100002, 100026, 100028, 100029, 100030, 100031, 100032, 100033, 100034, 100035, 100036, 100037, 100054, 100055, 100056, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100064, 100065, 100066
=loc definedness at E0%0%d
100002, 100026, 100028, 100029, 100030, 100031, 100032, 100033, 100034, 100035, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100071

=Branch affecting variable locs in dst.llvm.make_node
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at Lentry%1%intermediateVal1

=branch affecting variable locs at Lentry%1%fcallStart

=branch affecting variable locs at Lentry%1%fcallEnd

=branch affecting variable locs at Lentry%2%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.make_node
=relevant memlabels
=function: make_node
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/
memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart for loc_id 100054 {input.dst.local_alloc_count.Lentry%1%fcallStart }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart for loc_id 100056 {input.dst.cur_rounding_mode.Lentry%1%fcallStart }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100034 {input.dst.llvm-%call.Lentry%2%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100035 {input.dst.llvm-%val.Lentry%2%d }
1 : input.dst.llvm-%val : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100037 {input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d }
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100055 {input.dst.local_alloc_count.Lentry%2%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
2 : increment_count(1) : COUNT
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100062 {memmask(input.dst.llvm-mem.Lentry%2%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--arg.0) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--arg.0 : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100063 {memmask(input.dst.llvm-mem.Lentry%2%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem-may-straddle-symbol.1-heap) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100064 {memmask(input.dst.llvm-mem.Lentry%2%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memmask(13, 12, 6) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100065 {memmask(input.dst.llvm-mem.Lentry%2%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100066 {memmask(input.dst.llvm-mem.Lentry%2%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100033 {input.dst.llvm-%call.Lentry%1%fcallEnd }
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100036 {input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd }
1 : 8 { 0x8 +1.95e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100057 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100058 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100059 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100060 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100061 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100038 {input.dst.llvm-%0.E0%0%d }
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100039 {input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100040 {input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100041 {input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100042 {input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100043 {input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100044 {input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100045 {input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100046 {input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d }
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100047 {input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100048 {input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100049 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100050 {input.dst.llvm-%next.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100051 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100052 {input.dst.llvm-%val1.E0%0%d }
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100053 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100067 {memmask(input.dst.llvm-mem.E0%0%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100068 {memmask(input.dst.llvm-mem.E0%0%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100069 {memmask(input.dst.llvm-mem.E0%0%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : input.dst.llvm-%call.Lentry%2%d : BV:32
5 : input.dst.llvm-%val.Lentry%2%d : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : store(8, 2, 3, 10, 11, 6, 7) : ARRAY[BV:32 -> BV:8]
13 : memmask(12, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100070 {memmask(input.dst.llvm-mem.E0%0%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100071 {memmask(input.dst.llvm-mem.E0%0%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lentry%1%intermediateVal1:
vacuous mls at Lentry%1%fcallStart:
vacuous mls at Lentry%1%fcallEnd:
vacuous mls at Lentry%2%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lentry%1%intermediateVal1:
non-vacuous mls at Lentry%1%fcallStart:
non-vacuous mls at Lentry%1%fcallEnd:
non-vacuous mls at Lentry%2%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.make_node
=avail_exprs begin
=loc 100002
=loc_expr
140417 : input.dst.llvm-%val : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100017
=loc_expr
140496 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100019
=loc_expr
140497 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100020
=loc_expr
140499 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100021
=loc_expr
140501 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100022
=loc_expr
140503 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100025
=loc_expr
140424 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100026
=loc_expr
140420 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140554 : input.dst.llvm-%call.Lentry%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=avail_exprs_val.end
=loc 100035
=loc_expr
140559 : input.dst.llvm-%val.Lentry%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%val : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=avail_exprs_val.end
=loc 100036
=loc_expr
140402 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
=avail_exprs_val.end
=loc 100037
=loc_expr
140576 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=avail_exprs_val.end
=loc 100038
=loc_expr
140577 : input.dst.llvm-%0.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=avail_exprs_val.end
=loc 100039
=loc_expr
140578 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100040
=loc_expr
140579 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100041
=loc_expr
140580 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100042
=loc_expr
140581 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100043
=loc_expr
140582 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100044
=loc_expr
140583 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100045
=loc_expr
140584 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100046
=loc_expr
140585 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=avail_exprs_val.end
=loc 100047
=loc_expr
140586 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100048
=loc_expr
140587 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100049
=loc_expr
140588 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100050
=loc_expr
140589 : input.dst.llvm-%next.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100051
=loc_expr
140590 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=avail_exprs_val.end
=loc 100052
=loc_expr
140591 : input.dst.llvm-%val1.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=avail_exprs_val.end
=loc 100053
=loc_expr
140592 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140408 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100055
=loc_expr
140593 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
2 : increment_count(1) : COUNT
=avail_exprs_val.end
=loc 100056
=loc_expr
140594 : input.dst.cur_rounding_mode.Lentry%1%fcallStart : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=loc 100057
=loc_expr
140404 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140419 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140290 : memlabel-mem--arg.0 : MEMLABEL
140595 : memmask(140404, 140419, 140290) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100058
=loc_expr
140404 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140419 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140421 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140597 : memmask(140404, 140419, 140421) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100059
=loc_expr
140404 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140419 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140438 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140598 : memmask(140404, 140419, 140438) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100060
=loc_expr
140404 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140419 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140505 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
140599 : memmask(140404, 140419, 140505) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100061
=loc_expr
140404 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140419 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140520 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140600 : memmask(140404, 140419, 140520) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100062
=loc_expr
140557 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
140558 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140290 : memlabel-mem--arg.0 : MEMLABEL
140601 : memmask(140557, 140558, 140290) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--arg.0 : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100063
=loc_expr
140557 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
140558 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140421 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140602 : memmask(140557, 140558, 140421) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100064
=loc_expr
140557 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
140558 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140438 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140603 : memmask(140557, 140558, 140438) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memmask(13, 12, 6) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100065
=loc_expr
140557 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
140558 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140505 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
140604 : memmask(140557, 140558, 140505) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100066
=loc_expr
140557 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
140558 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140520 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140605 : memmask(140557, 140558, 140520) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100067
=loc_expr
140574 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
140558 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140290 : memlabel-mem--arg.0 : MEMLABEL
140606 : memmask(140574, 140558, 140290) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--arg.0 : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100068
=loc_expr
140574 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
140558 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140421 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140575 : memmask(140574, 140558, 140421) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100069
=loc_expr
140574 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
140558 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140438 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140607 : memmask(140574, 140558, 140438) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : input.dst.llvm-%call.Lentry%2%d : BV:32
5 : input.dst.llvm-%val.Lentry%2%d : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : store(8, 2, 3, 10, 11, 6, 7) : ARRAY[BV:32 -> BV:8]
13 : memmask(12, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100070
=loc_expr
140574 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
140558 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140505 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
140608 : memmask(140574, 140558, 140505) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100071
=loc_expr
140574 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
140558 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140520 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140609 : memmask(140574, 140558, 140520) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.make_node
=loc 100036 expr
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
=loc 100036 spreled-expr
140426 : 8 { 0x8 +1.95e129 } : BV:32
=loc 100039 expr
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100039 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100040 expr
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d : BV:32
=loc 100040 spreled-expr
140400 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100042 expr
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100042 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100043 expr
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=loc 100043 spreled-expr
140400 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100044 expr
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100044 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100045 expr
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d : BV:32
=loc 100045 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100047 expr
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100047 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100048 expr
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=loc 100048 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100053 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100053 spreled-expr
140267 : retaddr_const : BV:32
=loc 100054 expr
1 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
=loc 100054 spreled-expr
140424 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100055 expr
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=loc 100055 spreled-expr
140424 : input.dst.local_alloc_count.=L0%0%d= : COUNT
140660 : increment_count(140424) : COUNT
=loc 100056 expr
1 : input.dst.cur_rounding_mode.Lentry%1%fcallStart : ROUNDING_MODE
=loc 100056 spreled-expr
140425 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;make_node}
=loc_id 100002 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100017 lr-status in lr-status-map at call-context {*;make_node}
lr_status_top
=loc_id 100019 lr-status in lr-status-map at call-context {*;make_node}
lr_status_top
=loc_id 100020 lr-status in lr-status-map at call-context {*;make_node}
lr_status_top
=loc_id 100021 lr-status in lr-status-map at call-context {*;make_node}
lr_status_top
=loc_id 100022 lr-status in lr-status-map at call-context {*;make_node}
lr_status_top
=loc_id 100025 lr-status in lr-status-map at call-context {*;make_node}
lr_status_top
=loc_id 100026 lr-status in lr-status-map at call-context {*;make_node}
lr_status_top
=loc_id 100028 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100029 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100030 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100032 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100033 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(; )
=loc_id 100034 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=loc_id 100035 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100036 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100037 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100038 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=loc_id 100039 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=loc_id 100042 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100045 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100046 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=loc_id 100047 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100049 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100050 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=loc_id 100051 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=loc_id 100052 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=loc_id 100053 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100055 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100056 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100058 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100059 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100060 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100061 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100062 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100063 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(local./*___y___make_node__x__=L0%0%argnum0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100065 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100066 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100067 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100068 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100069 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(local./*___y___make_node__x__=L0%0%argnum0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100070 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100071 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100036 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100045 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100047 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100053 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100055 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100056 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lentry%1%fcallStart
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%1%intermediateVal1=>Lentry%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%1%fcallStart=>Lentry%1%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lentry%1%fcallStart
=dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.local_alloc_count.Lentry%1%fcallStart
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%1%intermediateVal1=>Lentry%2%d
=dst.llvm-%call.Lentry%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=dst.llvm-%val.Lentry%2%d
1 : input.dst.llvm-%val : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-mem.alloc.Lentry%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : heap_alloc(4, 5, 2, 6) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(3, 4, 7) : ARRAY[BV:32 -> MEMLABEL]
=dst.llvm-mem.Lentry%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
2 : increment_count(1) : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%1%fcallStart=>Lentry%1%fcallEnd
=dst.llvm-mem.Lentry%1%fcallEnd
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-%call.Lentry%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>E0%0%d
=dst.llvm-%0.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%next.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=dst.llvm-%val1.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.llvm-mem.E0%0%d
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : input.dst.llvm-%call.Lentry%2%d : BV:32
5 : input.dst.llvm-%val.Lentry%2%d : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : store(8, 2, 3, 10, 11, 6, 7) : ARRAY[BV:32 -> BV:8]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%1%fcallStart
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%1%fcallStart done
=graph_with_simplified_assets.simplified_assumes at Lentry%1%intermediateVal1=>Lentry%2%d
=graph_with_simplified_assets.simplified_assumes at Lentry%1%intermediateVal1=>Lentry%2%d assume# 0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
7 : region_agrees_with_memlabel(4, 2, 5, 6) : BOOL
8 : or(3, 7) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lentry%1%intermediateVal1=>Lentry%2%d assume# 1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
6 : heap_alloc_ptr(2, 5) : BV:32
7 : 7 { 0x7 +1.83e129 } : BV:32
8 : bvadd(6, 7) : BV:32
9 : bvule(6, 8) : BOOL
10 : or(4, 9) : BOOL
11 : or(3, 10) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lentry%1%intermediateVal1=>Lentry%2%d done
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallStart=>Lentry%1%fcallEnd
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallStart=>Lentry%1%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 assume# 0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>E0%0%d assume# 0
1 : 1 { 0x1 } : BOOL
2 : input.dst.llvm-%call.Lentry%2%d : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : isgepoffset(2, 3) : BOOL
5 : and(1, 4) : BOOL
6 : and(4, 5) : BOOL
7 : 4 { 0x4 +1.0e1025 } : INT
8 : islangaligned(2, 7) : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 2) : BV:32
11 : isgepoffset(10, 9) : BOOL
12 : and(5, 6, 8, 11) : BOOL
13 : islangaligned(10, 7) : BOOL
14 : and(12, 13) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
4
=String-contents:
=Nextpc-map:
C_NEXTPC1 : malloc
=Nextpc-map done
=suffixpaths for dst.llvm.make_node
=suffixpath_at_L0%0%d for dst.llvm.make_node
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lentry%1%intermediateVal1 for dst.llvm.make_node
=suffixpath_at_Lentry%1%intermediateVal1.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*((Lentry%1%fcallStart=>Lentry%1%fcallEnd)*(Lentry%1%fcallEnd=>Lentry%1%intermediateVal1)))
=suffixpath_at_Lentry%1%fcallStart for dst.llvm.make_node
=suffixpath_at_Lentry%1%fcallStart.graph_edge_composition
(L0%0%d=>Lentry%1%fcallStart)
=suffixpath_at_Lentry%1%fcallEnd for dst.llvm.make_node
=suffixpath_at_Lentry%1%fcallEnd.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*(Lentry%1%fcallStart=>Lentry%1%fcallEnd))
=suffixpath_at_Lentry%2%d for dst.llvm.make_node
=suffixpath_at_Lentry%2%d.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*((Lentry%1%fcallStart=>Lentry%1%fcallEnd)*((Lentry%1%fcallEnd=>Lentry%1%intermediateVal1)*(Lentry%1%intermediateVal1=>Lentry%2%d))))
=suffixpath_at_E0%0%d for dst.llvm.make_node
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*((Lentry%1%fcallStart=>Lentry%1%fcallEnd)*((Lentry%1%fcallEnd=>Lentry%1%intermediateVal1)*((Lentry%1%intermediateVal1=>Lentry%2%d)*(Lentry%2%d=>E0%0%d)))))
=suffixpaths for dst.llvm.make_node done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart
tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart done
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #0
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #0.ec
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #0.pred
=Comment
undef-behavioursome.edge.Lentry%1%intermediateVal1=>Lentry%2%d
=LhsExpr
140287 : 0 { 0x0 +1.0e129 } : BV:32
140385 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140633 : eq(140287, 140385) : BOOL
140419 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140426 : 8 { 0x8 +1.95e129 } : BV:32
140421 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140829 : region_agrees_with_memlabel(140419, 140385, 140426, 140421) : BOOL
140838 : or(140633, 140829) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #1
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #1.ec
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #1.pred
=Comment
undef-behavioursome.edge.Lentry%1%intermediateVal1=>Lentry%2%d
=LhsExpr
140287 : 0 { 0x0 +1.0e129 } : BV:32
140385 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140633 : eq(140287, 140385) : BOOL
140363 : 0 { 0x0 } : BOOL
140438 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140391 : heap_alloc_ptr(140385, 140438) : BV:32
140548 : 7 { 0x7 +1.83e129 } : BV:32
140662 : bvadd(140391, 140548) : BV:32
140666 : bvule(140391, 140662) : BOOL
140670 : or(140363, 140666) : BOOL
140674 : or(140633, 140670) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d done
tfg.assumes_around_edge at Lentry%1%fcallStart=>Lentry%1%fcallEnd
tfg.assumes_around_edge at Lentry%1%fcallStart=>Lentry%1%fcallEnd done
tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1
tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 assume #0
tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 assume #0.ec
tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lentry%1%fcallEnd=>Lentry%1%intermediateVal1
=LhsExpr
140385 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140283 : 1 { 0x1 +1.0e1025 } : INT
140544 : islangaligned(140385, 140283) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 done
tfg.assumes_around_edge at Lentry%2%d=>E0%0%d
tfg.assumes_around_edge at Lentry%2%d=>E0%0%d assume #0
tfg.assumes_around_edge at Lentry%2%d=>E0%0%d assume #0.ec
tfg.assumes_around_edge at Lentry%2%d=>E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lentry%2%d=>E0%0%d assume #0.pred
=Comment
undef-behavioursome.edge.Lentry%2%d=>E0%0%d
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140554 : input.dst.llvm-%call.Lentry%2%d : BV:32
140287 : 0 { 0x0 +1.0e129 } : BV:32
140771 : isgepoffset(140554, 140287) : BOOL
140782 : and(140275, 140771) : BOOL
140785 : and(140771, 140782) : BOOL
140362 : 4 { 0x4 +1.0e1025 } : INT
140787 : islangaligned(140554, 140362) : BOOL
140400 : 4 { 0x4 +1.47e129 } : BV:32
140763 : bvadd(140400, 140554) : BV:32
140791 : isgepoffset(140763, 140400) : BOOL
140798 : and(140782, 140785, 140787, 140791) : BOOL
140800 : islangaligned(140763, 140362) : BOOL
140803 : and(140798, 140800) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lentry%2%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 7
=pc
Lentry%2%d
=linename
line 7
=pc
Lentry%3%d
=linename
line 8
=pc
Lentry%4%d
=linename
line 8
=pc
Lentry%5%d
=linename
line 9
=pc
Lentry%6%d
=linename
line 9
=pc
Lentry%7%d
=linename
line 10
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 16
=pc
Lentry%2%d
=column_name
 at column 16
=pc
Lentry%3%d
=column_name
 at column 9
=pc
Lentry%4%d
=column_name
 at column 13
=pc
Lentry%5%d
=column_name
 at column 9
=pc
Lentry%6%d
=column_name
 at column 14
=pc
Lentry%7%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
line 7
=pc
Lentry%2%d
=line_and_column
line 7
=pc
Lentry%3%d
=line_and_column
(line 8 at column 9)
=pc
Lentry%4%d
=line_and_column
(line 8 at column 13)
=pc
Lentry%5%d
=line_and_column
(line 9 at column 9)
=pc
Lentry%6%d
=line_and_column
(line 9 at column 14)
=pc
Lentry%7%d
=line_and_column
line 10
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d : L0%0%d : 4
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%next.E0%0%d : L0%0%d : (4 + input.dst.llvm-%call.Lentry%2%d)
input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d : L0%0%d : (4 + input.dst.llvm-%call.Lentry%2%d)
input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%call.Lentry%2%d
input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d : L0%0%d : 4
input.dst.llvm-%val1.E0%0%d : L0%0%d : input.dst.llvm-%call.Lentry%2%d
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d : L0%0%d : 0
input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : L0%0%d : 8
input.dst.llvm-%val.Lentry%2%d : L0%0%d : malloc_side_effect(val', ite(input.dst.llvm-%call.Lentry%1%fcallEnd = 0, input.dst.llvm-mem.alloc, heap_alloc(input.dst.llvm-mem.alloc, memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, input.dst.llvm-%call.Lentry%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/)
input.dst.llvm-%0.E0%0%d : L0%0%d : input.dst.llvm-%call.Lentry%2%d
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d : L0%0%d : input.dst.llvm-%call.Lentry%2%d
input.dst.llvm-%call.Lentry%2%d : L0%0%d : ite(input.dst.llvm-%call.Lentry%1%fcallEnd = 0, 0, heap_alloc_ptr(input.dst.llvm-%call.Lentry%1%fcallEnd, memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/))
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d : L0%0%d : 0
input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d : L0%0%d : malloc_side_effect(8, ite(input.dst.llvm-%call.Lentry%1%fcallEnd = 0, input.dst.llvm-mem.alloc, heap_alloc(input.dst.llvm-mem.alloc, memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, input.dst.llvm-%call.Lentry%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/)
input.dst.llvm-%val : L0%0%d : val'
input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.local_alloc_count.Lentry%1%fcallStart : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset : L0%0%d : 0
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset : L0%0%d : input.dst.llvm-%0
input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset : L0%0%d : 4
input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset : L0%0%d : (input.dst.llvm-%0 + 4)
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%0 : Lentry%3%bbentry : node'
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset : L0%0%d : 0
input.dst.llvm-%val1 : L0%0%d : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset
input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset : L0%0%d : 4
input.dst.llvm-%next : L0%0%d : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.local_alloc_count.Lentry%2%d : L0%0%d : increment_count(input.dst.local_alloc_count.=L0%0%d=)
input.dst.cur_rounding_mode.Lentry%1%fcallStart : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%call
=dst.llvm-%call loop pc: L0%0%d
=dst.llvm-%call val_scevb
=dst.llvm-%call val_scevb scev
=dst.llvm-%call val_scevb scev loop: L0%0%d
=dst.llvm-%call val_scevb scev scev_overflow_flag: 
=dst.llvm-%call val_scevb scev scev_expr
1 : input.dst.llvm-%call : BV32
=dst.llvm-%call val_scevb scev scev_expr done
=dst.llvm-%call val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call val_scevb signed lower bound: 32:4294967295
=dst.llvm-%call val_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb
=dst.llvm-%call atuse_scevb scev
=dst.llvm-%call atuse_scevb scev loop: L0%0%d
=dst.llvm-%call atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%call atuse_scevb scev scev_expr
1 : input.dst.llvm-%call : BV32
=dst.llvm-%call atuse_scevb scev scev_expr done
=dst.llvm-%call atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atexit_scev nullptr
=dst.llvm-%0
=dst.llvm-%0 loop pc: L0%0%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
1 : input.dst.llvm-%call : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
1 : input.dst.llvm-%call : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev nullptr
=dst.llvm-%val1
=dst.llvm-%val1 loop pc: L0%0%d
=dst.llvm-%val1 val_scevb
=dst.llvm-%val1 val_scevb scev
=dst.llvm-%val1 val_scevb scev loop: L0%0%d
=dst.llvm-%val1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%val1 val_scevb scev scev_expr
1 : input.dst.llvm-%call : BV32
=dst.llvm-%val1 val_scevb scev scev_expr done
=dst.llvm-%val1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%val1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%val1 atuse_scevb
=dst.llvm-%val1 atuse_scevb scev
=dst.llvm-%val1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%val1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%val1 atuse_scevb scev scev_expr
1 : input.dst.llvm-%call : BV32
=dst.llvm-%val1 atuse_scevb scev scev_expr done
=dst.llvm-%val1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%val1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%val1 atexit_scev nullptr
=dst.llvm-%next
=dst.llvm-%next loop pc: L0%0%d
=dst.llvm-%next val_scevb
=dst.llvm-%next val_scevb scev
=dst.llvm-%next val_scevb scev loop: L0%0%d
=dst.llvm-%next val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next val_scevb scev scev_expr
2 : 00000000000000000000000000000100b
1 : input.dst.llvm-%call : BV32
3 : scev_op_add(2, 1) : loop L0%0%d : nsw
=dst.llvm-%next val_scevb scev scev_expr done
=dst.llvm-%next val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next val_scevb signed lower bound: 32:2147483652
=dst.llvm-%next val_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb
=dst.llvm-%next atuse_scevb scev
=dst.llvm-%next atuse_scevb scev loop: L0%0%d
=dst.llvm-%next atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next atuse_scevb scev scev_expr
2 : 00000000000000000000000000000100b
1 : input.dst.llvm-%call : BV32
3 : scev_op_add(2, 1) : loop L0%0%d : nsw
=dst.llvm-%next atuse_scevb scev scev_expr done
=dst.llvm-%next atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%intermediateVal1
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%fcallStart
=reaching defns for expr 0
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%fcallEnd
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns done
=Reaching Definitions at Lentry%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal1=>Lentry%2%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%val.Lentry%2%d : BV:32
=reaching defns for expr 3 edges
  Lentry%1%intermediateVal1=>Lentry%2%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d : BV:32
=reaching defns for expr 4 edges
  Lentry%1%intermediateVal1=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal1=>Lentry%2%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%val.Lentry%2%d : BV:32
=reaching defns for expr 3 edges
  Lentry%1%intermediateVal1=>Lentry%2%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%0.E0%0%d : BV:32
=reaching defns for expr 4 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d : BV:32
=reaching defns for expr 5 edges
  Lentry%1%intermediateVal1=>Lentry%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 6 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 7 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 8 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d : BV:32
=reaching defns for expr 9 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=reaching defns for expr 11 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d : BV:32
=reaching defns for expr 12 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 13 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=reaching defns for expr 14 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 15 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%next.E0%0%d : BV:32
=reaching defns for expr 16 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 17 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%val1.E0%0%d : BV:32
=reaching defns for expr 18 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 19 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 20 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 22 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 23 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 24 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 25 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 26 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 26 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%next.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%val1.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%call.Lentry%1%fcallEnd
lr_status_bottom(; )
=LR status for var input.dst.llvm-%val.Lentry%2%d
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%0.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%call.Lentry%2%d
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%val
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.local_alloc_count.Lentry%1%fcallStart
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.local_alloc_count.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lentry%1%fcallStart
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
