=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%5%bbentry L3%5%d L3%6%bbentry L3%8%bbentry E0%0%d
=Edges:
L0%0%d => L3%5%bbentry
L3%5%bbentry => L3%5%d
L3%5%d => L3%8%bbentry
L3%5%d => L3%6%bbentry
L3%6%bbentry => E0%0%d
L3%8%bbentry => L3%5%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%5%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%5%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%8%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-7.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L3%5%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-l-0.L3%5%bbentry
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((func_head*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%5%bbentry => L3%5%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:bb_entry
tfg_edge_comment end

=Edge: L3%5%d => L3%8%bbentry
=Edge.EdgeCond: 
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%5%d => L3%6%bbentry
=Edge.EdgeCond: 
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:3:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%6%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-u-0.E0%0%d
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-7.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=spec-%tmpvar-3.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=spec-%tmpvar-4.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%8%bbentry => L3%5%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-l2-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-n-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%tmpvar-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
6 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
7 : bvadd(5, 6) : BV:32
=spec-%var-l-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-sum-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
6 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
7 : bvadd(5, 6) : BV:32
=src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%5%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-val-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((bb_entry*match_sum_val_1)*match_prod_0)*match_prod_1)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-l-1
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 15 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 16 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 17 in src.spec.foo.
REGMEM
spec-%var-l-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 18 in src.spec.foo.
REGMEM
spec-%tmpvar-3.E0%0%d
1 : input.spec-%tmpvar-3.E0%0%d : BV:32
=Loc 19 in src.spec.foo.
REGMEM
spec-%tmpvar-4.E0%0%d
1 : input.spec-%tmpvar-4.E0%0%d : BV:32
=Loc 20 in src.spec.foo.
REGMEM
spec-%tmpvar-6.E0%0%d
1 : input.spec-%tmpvar-6.E0%0%d : BV:32
=Loc 21 in src.spec.foo.
REGMEM
spec-%tmpvar-7.E0%0%d
1 : input.spec-%tmpvar-7.E0%0%d : BV:32
=Loc 22 in src.spec.foo.
REGMEM
spec-%var-sum-0.L3%5%bbentry
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=Loc 23 in src.spec.foo.
REGMEM
spec-%var-u-0.E0%0%d
1 : input.spec-%var-u-0.E0%0%d : UNIT
=Loc 24 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L3%5%bbentry
1 : input.spec-%tmpvar-5.L3%5%bbentry : BV:32
=Loc 25 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%5%bbentry : BV:32
=Loc 26 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%5%bbentry
1 : input.spec-%tmpvar-0.L3%5%bbentry : BV:32
=Loc 27 in src.spec.foo.
REGMEM
spec-%var-l2-0.L3%5%bbentry
1 : input.spec-%var-l2-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 28 in src.spec.foo.
REGMEM
spec-%var-n-0.L3%5%bbentry
1 : input.spec-%var-n-0.L3%5%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=Loc 29 in src.spec.foo.
REGMEM
spec-%var-val-0.L3%5%bbentry
1 : input.spec-%var-val-0.L3%5%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%5%bbentry
17, 22, 
=live locs at L3%5%d
17, 22, 
=live locs at L3%6%bbentry
22, 
=live locs at L3%8%bbentry
17, 22, 
=live locs at E0%0%d
21[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 15, 16
=loc definedness at L3%5%bbentry
1, 15, 16, 17, 22, 24, 25
=loc definedness at L3%5%d
1, 15, 16, 17, 22, 24, 25
=loc definedness at L3%6%bbentry
1, 15, 16, 17, 22, 24, 25
=loc definedness at L3%8%bbentry
1, 15, 16, 17, 22, 24, 25
=loc definedness at E0%0%d
1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%5%bbentry
17
=branch affecting variable locs at L3%5%d
17
=branch affecting variable locs at L3%6%bbentry

=branch affecting variable locs at L3%8%bbentry
17
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%5%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%5%bbentry for loc_id 17 {input.spec-%var-l-0.L3%5%bbentry }
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%5%bbentry for loc_id 22 {input.spec-%var-sum-0.L3%5%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%5%bbentry for loc_id 24 {input.spec-%tmpvar-5.L3%5%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%5%bbentry for loc_id 25 {input.src.spec-ghostvar.itervar.1.L3%5%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%5%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%5%bbentry=>L3%5%d
=graph_with_edge_structures.loc_to_expr_map at L3%5%bbentry=>L3%5%d done
=graph_with_edge_structures.loc_to_expr_map at L3%5%d=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%5%d=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%5%d=>L3%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%5%d=>L3%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>E0%0%d for loc_id 18 {input.spec-%tmpvar-3.E0%0%d }
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>E0%0%d for loc_id 19 {input.spec-%tmpvar-4.E0%0%d }
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>E0%0%d for loc_id 20 {input.spec-%tmpvar-6.E0%0%d }
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>E0%0%d for loc_id 21 {input.spec-%tmpvar-7.E0%0%d }
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>E0%0%d for loc_id 23 {input.spec-%var-u-0.E0%0%d }
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry for loc_id 17 {input.spec-%var-l-0.L3%5%bbentry }
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry for loc_id 22 {input.spec-%var-sum-0.L3%5%bbentry }
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
2 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : 0 { 0x0 +1.0e1025 } : INT
6 : prod_get(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry for loc_id 25 {input.src.spec-ghostvar.itervar.1.L3%5%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%5%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry for loc_id 26 {input.spec-%tmpvar-0.L3%5%bbentry }
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
2 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : 0 { 0x0 +1.0e1025 } : INT
6 : prod_get(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry for loc_id 27 {input.spec-%var-l2-0.L3%5%bbentry }
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry for loc_id 28 {input.spec-%var-n-0.L3%5%bbentry }
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry for loc_id 29 {input.spec-%var-val-0.L3%5%bbentry }
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%5%bbentry:
vacuous mls at L3%5%d:
vacuous mls at L3%6%bbentry:
vacuous mls at L3%8%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%5%bbentry:
non-vacuous mls at L3%5%d:
non-vacuous mls at L3%6%bbentry:
non-vacuous mls at L3%8%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 24
=loc_expr
140467 : input.spec-%tmpvar-5.L3%5%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 24 expr
1 : input.spec-%tmpvar-5.L3%5%bbentry : BV:32
=loc 24 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 15 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 16 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 17 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 18 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 19 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 20 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 21 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 22 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 26 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 27 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 28 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 29 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 24 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%5%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%5%bbentry=>L3%5%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%5%d=>L3%6%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%5%d=>L3%8%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%6%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%bbentry=>L3%5%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%5%bbentry
=spec-%var-l-0.L3%5%bbentry
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%5%bbentry=>L3%5%d
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%5%d=>L3%6%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%5%d=>L3%8%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%6%bbentry=>E0%0%d
=spec-%var-u-0.E0%0%d
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-7.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=spec-%tmpvar-3.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=spec-%tmpvar-4.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%bbentry=>L3%5%bbentry
=spec-%var-l2-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-n-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%tmpvar-0.L3%5%bbentry
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
2 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : 0 { 0x0 +1.0e1025 } : INT
6 : prod_get(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=spec-%var-l-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-sum-0.L3%5%bbentry
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
2 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : 0 { 0x0 +1.0e1025 } : INT
6 : prod_get(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%5%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-val-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%5%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%5%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%5%bbentry=>L3%5%d
=graph_with_simplified_assets.simplified_assumes at L3%5%bbentry=>L3%5%d done
=graph_with_simplified_assets.simplified_assumes at L3%5%d=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%5%d=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%5%d=>L3%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%5%d=>L3%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>L3%5%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>L3%5%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%5%bbentry for src.spec.foo
=suffixpath_at_L3%5%bbentry.graph_edge_composition
(L0%0%d=>L3%5%bbentry)
=suffixpath_at_L3%5%d for src.spec.foo
=suffixpath_at_L3%5%d.graph_edge_composition
((L0%0%d=>L3%5%bbentry)*(L3%5%bbentry=>L3%5%d))
=suffixpath_at_L3%6%bbentry for src.spec.foo
=suffixpath_at_L3%6%bbentry.graph_edge_composition
((L0%0%d=>L3%5%bbentry)*((L3%5%bbentry=>L3%5%d)*(L3%5%d=>L3%6%bbentry)))
=suffixpath_at_L3%8%bbentry for src.spec.foo
=suffixpath_at_L3%8%bbentry.graph_edge_composition
((L0%0%d=>L3%5%bbentry)*((L3%5%bbentry=>L3%5%d)*(L3%5%d=>L3%8%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%5%bbentry)*((L3%5%bbentry=>L3%5%d)*((L3%5%d=>L3%6%bbentry)*(L3%6%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%5%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%5%bbentry done
tfg.assumes_around_edge at L3%5%bbentry=>L3%5%d
tfg.assumes_around_edge at L3%5%bbentry=>L3%5%d done
tfg.assumes_around_edge at L3%5%d=>L3%6%bbentry
tfg.assumes_around_edge at L3%5%d=>L3%6%bbentry done
tfg.assumes_around_edge at L3%5%d=>L3%8%bbentry
tfg.assumes_around_edge at L3%5%d=>L3%8%bbentry done
tfg.assumes_around_edge at L3%6%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%6%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%8%bbentry=>L3%5%bbentry
tfg.assumes_around_edge at L3%8%bbentry=>L3%5%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
