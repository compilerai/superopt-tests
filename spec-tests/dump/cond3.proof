=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L2%3%d L2%4%bbentry L2%5%bbentry L2%10%bbentry L2%10%d L2%11%bbentry L2%14%bbentry L2%16%bbentry E0%0%d
=Edges:
L0%0%d => L2%3%d
L2%3%d => L2%5%bbentry
L2%3%d => L2%4%bbentry
L2%4%bbentry => L2%10%bbentry
L2%5%bbentry => L2%10%bbentry
L2%10%bbentry => L2%10%d
L2%10%d => L2%14%bbentry
L2%10%d => L2%11%bbentry
L2%11%bbentry => L2%16%bbentry
L2%14%bbentry => L2%16%bbentry
L2%16%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%3%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%4%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%5%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%10%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%10%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%11%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%14%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%16%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-0 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-9.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L2%3%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L2%3%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-1.L2%3%d
1 : input.spec-%var-x-0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsgt(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((func_head*ctor_bv)*intrinsic_app_bvsgt)
tfg_edge_comment end

=Edge: L2%3%d => L2%5%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-1.L2%3%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:ite_false_split
tfg_edge_comment end

=Edge: L2%3%d => L2%4%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-1.L2%3%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:ite_true_split
tfg_edge_comment end

=Edge: L2%4%bbentry => L2%10%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-2.L2%10%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-3.L2%10%bbentry
1 : SORT2EXPR.VAR : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : sum_init(1, 2, 3) : SUM[UNIT,BV:32]
=spec-%tmpvar-6.L2%10%bbentry
1 : SORT2EXPR.VAR : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : sum_init(1, 2, 3) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*ctor_bv)*ctor_sum)*ite_true_merge)
tfg_edge_comment end

=Edge: L2%5%bbentry => L2%10%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-6.L2%10%bbentry
1 : SORT2EXPR.VAR : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 2 { 0x2 +1.23e129 } : BV:32
4 : sum_init(1, 2, 3) : SUM[UNIT,BV:32]
=spec-%tmpvar-4.L2%10%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=spec-%tmpvar-5.L2%10%bbentry
1 : SORT2EXPR.VAR : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 2 { 0x2 +1.23e129 } : BV:32
4 : sum_init(1, 2, 3) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*ctor_bv)*ctor_sum)*ite_false_merge)
tfg_edge_comment end

=Edge: L2%10%bbentry => L2%10%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:bb_entry
tfg_edge_comment end

=Edge: L2%10%d => L2%14%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-6.L2%10%bbentry : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:15:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%10%d => L2%11%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-6.L2%10%bbentry : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:12:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%11%bbentry => L2%16%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-7.L2%16%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L2%16%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u-0.L2%16%bbentry
1 : input.spec-%tmpvar-6.L2%10%bbentry : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%14%bbentry => L2%16%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-8.L2%16%bbentry
1 : input.spec-%tmpvar-6.L2%10%bbentry : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-y-0.L2%16%bbentry
1 : input.spec-%tmpvar-6.L2%10%bbentry : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%16%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-8.L2%16%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*func_ret)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-0
1 : input.spec-%var-x-0 : BV:32
=Loc 14 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 15 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 16 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L2%3%d
1 : input.spec-%tmpvar-1.L2%3%d : BOOL
=Loc 17 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L2%10%bbentry
1 : input.spec-%tmpvar-6.L2%10%bbentry : SUM[UNIT,BV:32]
=Loc 18 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L2%3%d
1 : input.spec-%tmpvar-0.L2%3%d : BV:32
=Loc 19 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L2%16%bbentry
1 : input.spec-%tmpvar-8.L2%16%bbentry : BV:32
=Loc 20 in src.spec.foo.
REGMEM
spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-9.E0%0%d : BV:32
=Loc 21 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L2%10%bbentry
1 : input.spec-%tmpvar-2.L2%10%bbentry : BV:32
=Loc 22 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L2%10%bbentry
1 : input.spec-%tmpvar-3.L2%10%bbentry : SUM[UNIT,BV:32]
=Loc 23 in src.spec.foo.
REGMEM
spec-%tmpvar-4.L2%10%bbentry
1 : input.spec-%tmpvar-4.L2%10%bbentry : BV:32
=Loc 24 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L2%10%bbentry
1 : input.spec-%tmpvar-5.L2%10%bbentry : SUM[UNIT,BV:32]
=Loc 25 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L2%16%bbentry
1 : input.spec-%tmpvar-7.L2%16%bbentry : BV:32
=Loc 26 in src.spec.foo.
REGMEM
spec-%var-u-0.L2%16%bbentry
1 : input.spec-%var-u-0.L2%16%bbentry : UNIT
=Loc 27 in src.spec.foo.
REGMEM
spec-%var-y-0.L2%16%bbentry
1 : input.spec-%var-y-0.L2%16%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d

=live locs at L2%3%d

=live locs at L2%4%bbentry

=live locs at L2%5%bbentry

=live locs at L2%10%bbentry
17, 
=live locs at L2%10%d
17, 
=live locs at L2%11%bbentry

=live locs at L2%14%bbentry
17, 
=live locs at L2%16%bbentry
19, 
=live locs at E0%0%d
20[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 14, 15
=loc definedness at L2%3%d
1, 14, 15, 16, 18
=loc definedness at L2%4%bbentry
1, 14, 15, 16, 18
=loc definedness at L2%5%bbentry
1, 14, 15, 16, 18
=loc definedness at L2%10%bbentry
1, 14, 15, 16, 17, 18
=loc definedness at L2%10%d
1, 14, 15, 16, 17, 18
=loc definedness at L2%11%bbentry
1, 14, 15, 16, 17, 18
=loc definedness at L2%14%bbentry
1, 14, 15, 16, 17, 18
=loc definedness at L2%16%bbentry
1, 14, 15, 16, 17, 18, 19
=loc definedness at E0%0%d
1, 14, 15, 16, 17, 18, 19, 20

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L2%3%d
16
=branch affecting variable locs at L2%4%bbentry

=branch affecting variable locs at L2%5%bbentry

=branch affecting variable locs at L2%10%bbentry
17
=branch affecting variable locs at L2%10%d
17
=branch affecting variable locs at L2%11%bbentry

=branch affecting variable locs at L2%14%bbentry

=branch affecting variable locs at L2%16%bbentry

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%3%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%3%d for loc_id 16 {input.spec-%tmpvar-1.L2%3%d }
1 : input.spec-%var-x-0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsgt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%3%d for loc_id 18 {input.spec-%tmpvar-0.L2%3%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%3%d done
=graph_with_edge_structures.loc_to_expr_map at L2%3%d=>L2%4%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%3%d=>L2%4%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%3%d=>L2%5%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%3%d=>L2%5%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%10%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%10%bbentry for loc_id 17 {input.spec-%tmpvar-6.L2%10%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%10%bbentry for loc_id 21 {input.spec-%tmpvar-2.L2%10%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%10%bbentry for loc_id 22 {input.spec-%tmpvar-3.L2%10%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%10%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%5%bbentry=>L2%10%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%5%bbentry=>L2%10%bbentry for loc_id 17 {input.spec-%tmpvar-6.L2%10%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 2 { 0x2 +1.23e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%5%bbentry=>L2%10%bbentry for loc_id 23 {input.spec-%tmpvar-4.L2%10%bbentry }
1 : 2 { 0x2 +1.23e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%5%bbentry=>L2%10%bbentry for loc_id 24 {input.spec-%tmpvar-5.L2%10%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 2 { 0x2 +1.23e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%5%bbentry=>L2%10%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%10%d
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%10%d done
=graph_with_edge_structures.loc_to_expr_map at L2%10%d=>L2%11%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%10%d=>L2%11%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%10%d=>L2%14%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%10%d=>L2%14%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%16%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%16%bbentry for loc_id 19 {input.spec-%tmpvar-8.L2%16%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%16%bbentry for loc_id 25 {input.spec-%tmpvar-7.L2%16%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%16%bbentry for loc_id 26 {input.spec-%var-u-0.L2%16%bbentry }
1 : input.spec-%tmpvar-6.L2%10%bbentry : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%16%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%16%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%16%bbentry for loc_id 19 {input.spec-%tmpvar-8.L2%16%bbentry }
1 : input.spec-%tmpvar-6.L2%10%bbentry : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%16%bbentry for loc_id 27 {input.spec-%var-y-0.L2%16%bbentry }
1 : input.spec-%tmpvar-6.L2%10%bbentry : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%16%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>E0%0%d for loc_id 20 {input.spec-%tmpvar-9.E0%0%d }
1 : input.spec-%tmpvar-8.L2%16%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L2%3%d:
vacuous mls at L2%4%bbentry:
vacuous mls at L2%5%bbentry:
vacuous mls at L2%10%bbentry:
vacuous mls at L2%10%d:
vacuous mls at L2%11%bbentry:
vacuous mls at L2%14%bbentry:
vacuous mls at L2%16%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L2%3%d:
non-vacuous mls at L2%4%bbentry:
non-vacuous mls at L2%5%bbentry:
non-vacuous mls at L2%10%bbentry:
non-vacuous mls at L2%10%d:
non-vacuous mls at L2%11%bbentry:
non-vacuous mls at L2%14%bbentry:
non-vacuous mls at L2%16%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 16
=loc_expr
140313 : input.spec-%tmpvar-1.L2%3%d : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsgt(1, 2) : BOOL
=avail_exprs_val.end
=loc 18
=loc_expr
140322 : input.spec-%tmpvar-0.L2%3%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 21
=loc_expr
140323 : input.spec-%tmpvar-2.L2%10%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 22
=loc_expr
140324 : input.spec-%tmpvar-3.L2%10%bbentry : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=avail_exprs_val.end
=loc 23
=loc_expr
140325 : input.spec-%tmpvar-4.L2%10%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 2 { 0x2 +1.23e129 } : BV:32
=avail_exprs_val.end
=loc 24
=loc_expr
140365 : input.spec-%tmpvar-5.L2%10%bbentry : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 2 { 0x2 +1.23e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=avail_exprs_val.end
=loc 25
=loc_expr
140366 : input.spec-%tmpvar-7.L2%16%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 18 expr
1 : input.spec-%tmpvar-0.L2%3%d : BV:32
=loc 18 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 21 expr
1 : input.spec-%tmpvar-2.L2%10%bbentry : BV:32
=loc 21 spreled-expr
140287 : 1 { 0x1 +1.11e129 } : BV:32
=loc 22 expr
1 : input.spec-%tmpvar-3.L2%10%bbentry : SUM[UNIT,BV:32]
=loc 22 spreled-expr
140287 : 1 { 0x1 +1.11e129 } : BV:32
140306 : unit : UNIT
140307 : sum(140287, 140306, 140287) : SUM[UNIT,BV:32]
140308 : sym_const(140307) : SUM[UNIT,BV:32]
=loc 23 expr
1 : input.spec-%tmpvar-4.L2%10%bbentry : BV:32
=loc 23 spreled-expr
140281 : 2 { 0x2 +1.23e129 } : BV:32
=loc 24 expr
1 : input.spec-%tmpvar-5.L2%10%bbentry : SUM[UNIT,BV:32]
=loc 24 spreled-expr
140287 : 1 { 0x1 +1.11e129 } : BV:32
140306 : unit : UNIT
140281 : 2 { 0x2 +1.23e129 } : BV:32
140309 : sum(140287, 140306, 140281) : SUM[UNIT,BV:32]
140310 : sym_const(140309) : SUM[UNIT,BV:32]
=loc 25 expr
1 : input.spec-%tmpvar-7.L2%16%bbentry : BV:32
=loc 25 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 14 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 15 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 16 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 17 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 18 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 19 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 20 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 21 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 22 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 26 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 27 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 18 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 21 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 22 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 23 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 24 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 25 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L2%3%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%3%d=>L2%4%bbentry
1 : input.spec-%tmpvar-1.L2%3%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%3%d=>L2%5%bbentry
1 : input.spec-%tmpvar-1.L2%3%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%4%bbentry=>L2%10%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%5%bbentry=>L2%10%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%10%bbentry=>L2%10%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%10%d=>L2%11%bbentry
1 : input.spec-%tmpvar-6.L2%10%bbentry : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%10%d=>L2%14%bbentry
1 : input.spec-%tmpvar-6.L2%10%bbentry : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%11%bbentry=>L2%16%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%14%bbentry=>L2%16%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%16%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L2%3%d
=spec-%tmpvar-0.L2%3%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-1.L2%3%d
1 : input.spec-%var-x-0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsgt(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%3%d=>L2%4%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%3%d=>L2%5%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%4%bbentry=>L2%10%bbentry
=spec-%tmpvar-2.L2%10%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-3.L2%10%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=spec-%tmpvar-6.L2%10%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%5%bbentry=>L2%10%bbentry
=spec-%tmpvar-6.L2%10%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 2 { 0x2 +1.23e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=spec-%tmpvar-4.L2%10%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=spec-%tmpvar-5.L2%10%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 2 { 0x2 +1.23e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%10%bbentry=>L2%10%d
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%10%d=>L2%11%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%10%d=>L2%14%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%11%bbentry=>L2%16%bbentry
=spec-%tmpvar-7.L2%16%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L2%16%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u-0.L2%16%bbentry
1 : input.spec-%tmpvar-6.L2%10%bbentry : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%14%bbentry=>L2%16%bbentry
=spec-%tmpvar-8.L2%16%bbentry
1 : input.spec-%tmpvar-6.L2%10%bbentry : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-y-0.L2%16%bbentry
1 : input.spec-%tmpvar-6.L2%10%bbentry : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%16%bbentry=>E0%0%d
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-8.L2%16%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%3%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%3%d done
=graph_with_simplified_assets.simplified_assumes at L2%3%d=>L2%4%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%3%d=>L2%4%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%3%d=>L2%5%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%3%d=>L2%5%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%4%bbentry=>L2%10%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%4%bbentry=>L2%10%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%5%bbentry=>L2%10%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%5%bbentry=>L2%10%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%10%bbentry=>L2%10%d
=graph_with_simplified_assets.simplified_assumes at L2%10%bbentry=>L2%10%d done
=graph_with_simplified_assets.simplified_assumes at L2%10%d=>L2%11%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%10%d=>L2%11%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%10%d=>L2%14%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%10%d=>L2%14%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%11%bbentry=>L2%16%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%11%bbentry=>L2%16%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%14%bbentry=>L2%16%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%14%bbentry=>L2%16%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%16%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L2%16%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L2%3%d for src.spec.foo
=suffixpath_at_L2%3%d.graph_edge_composition
(L0%0%d=>L2%3%d)
=suffixpath_at_L2%4%bbentry for src.spec.foo
=suffixpath_at_L2%4%bbentry.graph_edge_composition
((L0%0%d=>L2%3%d)*(L2%3%d=>L2%4%bbentry))
=suffixpath_at_L2%5%bbentry for src.spec.foo
=suffixpath_at_L2%5%bbentry.graph_edge_composition
((L0%0%d=>L2%3%d)*(L2%3%d=>L2%5%bbentry))
=suffixpath_at_L2%10%bbentry for src.spec.foo
=suffixpath_at_L2%10%bbentry.graph_edge_composition
(((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%10%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%5%bbentry)*(L2%5%bbentry=>L2%10%bbentry))))
=suffixpath_at_L2%10%d for src.spec.foo
=suffixpath_at_L2%10%d.graph_edge_composition
((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%10%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%5%bbentry)*(L2%5%bbentry=>L2%10%bbentry))))*(L2%10%bbentry=>L2%10%d))
=suffixpath_at_L2%11%bbentry for src.spec.foo
=suffixpath_at_L2%11%bbentry.graph_edge_composition
((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%10%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%5%bbentry)*(L2%5%bbentry=>L2%10%bbentry))))*((L2%10%bbentry=>L2%10%d)*(L2%10%d=>L2%11%bbentry)))
=suffixpath_at_L2%14%bbentry for src.spec.foo
=suffixpath_at_L2%14%bbentry.graph_edge_composition
((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%10%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%5%bbentry)*(L2%5%bbentry=>L2%10%bbentry))))*((L2%10%bbentry=>L2%10%d)*(L2%10%d=>L2%14%bbentry)))
=suffixpath_at_L2%16%bbentry for src.spec.foo
=suffixpath_at_L2%16%bbentry.graph_edge_composition
(((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%10%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%5%bbentry)*(L2%5%bbentry=>L2%10%bbentry))))*((L2%10%bbentry=>L2%10%d)*((L2%10%d=>L2%11%bbentry)*(L2%11%bbentry=>L2%16%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%10%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%5%bbentry)*(L2%5%bbentry=>L2%10%bbentry))))*((L2%10%bbentry=>L2%10%d)*((L2%10%d=>L2%14%bbentry)*(L2%14%bbentry=>L2%16%bbentry)))))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%10%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%5%bbentry)*(L2%5%bbentry=>L2%10%bbentry))))*((L2%10%bbentry=>L2%10%d)*((L2%10%d=>L2%11%bbentry)*(L2%11%bbentry=>L2%16%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%10%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%5%bbentry)*(L2%5%bbentry=>L2%10%bbentry))))*((L2%10%bbentry=>L2%10%d)*((L2%10%d=>L2%14%bbentry)*(L2%14%bbentry=>L2%16%bbentry)))))*(L2%16%bbentry=>E0%0%d))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L2%3%d
tfg.assumes_around_edge at L0%0%d=>L2%3%d done
tfg.assumes_around_edge at L2%3%d=>L2%4%bbentry
tfg.assumes_around_edge at L2%3%d=>L2%4%bbentry done
tfg.assumes_around_edge at L2%3%d=>L2%5%bbentry
tfg.assumes_around_edge at L2%3%d=>L2%5%bbentry done
tfg.assumes_around_edge at L2%4%bbentry=>L2%10%bbentry
tfg.assumes_around_edge at L2%4%bbentry=>L2%10%bbentry done
tfg.assumes_around_edge at L2%5%bbentry=>L2%10%bbentry
tfg.assumes_around_edge at L2%5%bbentry=>L2%10%bbentry done
tfg.assumes_around_edge at L2%10%bbentry=>L2%10%d
tfg.assumes_around_edge at L2%10%bbentry=>L2%10%d done
tfg.assumes_around_edge at L2%10%d=>L2%11%bbentry
tfg.assumes_around_edge at L2%10%d=>L2%11%bbentry done
tfg.assumes_around_edge at L2%10%d=>L2%14%bbentry
tfg.assumes_around_edge at L2%10%d=>L2%14%bbentry done
tfg.assumes_around_edge at L2%11%bbentry=>L2%16%bbentry
tfg.assumes_around_edge at L2%11%bbentry=>L2%16%bbentry done
tfg.assumes_around_edge at L2%14%bbentry=>L2%16%bbentry
tfg.assumes_around_edge at L2%14%bbentry=>L2%16%bbentry done
tfg.assumes_around_edge at L2%16%bbentry=>E0%0%d
tfg.assumes_around_edge at L2%16%bbentry=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lentry%2%d Lif.else%1%intermediateVal0 Lif.then%1%intermediateVal0 Lreturn%1%bbentry E0%0%d
=Edges:
L0%0%d => Lentry%2%d
Lentry%2%d => Lif.then%1%intermediateVal0
Lentry%2%d => Lif.else%1%intermediateVal0
Lif.else%1%intermediateVal0 => Lreturn%1%bbentry
Lif.then%1%intermediateVal0 => Lreturn%1%bbentry
Lreturn%1%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.else%1%intermediateVal0
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.then%1%intermediateVal0
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lreturn%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 7 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=Edge: L0%0%d => Lentry%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%cmp.Lentry%2%d
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsgt(1, 2) : BOOL
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(start_pc_edge*  %cmp = icmp sgt i32 %x, 0, !dbg !15)
tfg_edge_comment end

=Edge: Lentry%2%d => Lif.then%1%intermediateVal0
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((  br i1 %cmp, label %if.then, label %if.else, !dbg !17*  br i1 %cmp, label %if.then, label %if.else, !dbg !17)*  br i1 %cmp, label %if.then, label %if.else, !dbg !17)*  br label %return, !dbg !18)
tfg_edge_comment end

=Edge: Lentry%2%d => Lif.else%1%intermediateVal0
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((  br i1 %cmp, label %if.then, label %if.else, !dbg !17*  br i1 %cmp, label %if.then, label %if.else, !dbg !17)*  br i1 %cmp, label %if.then, label %if.else, !dbg !17)*  br label %return, !dbg !19)
tfg_edge_comment end

=Edge: Lif.else%1%intermediateVal0 => Lreturn%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%retval.0.Lreturn%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:((  %retval.0 = phi i32 [ 1, %if.then ], [ 2, %if.else ], !dbg !20*  br label %return, !dbg !19)*(  br label %return, !dbg !19*  br label %return, !dbg !19))
tfg_edge_comment end

=Edge: Lif.then%1%intermediateVal0 => Lreturn%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%retval.0.Lreturn%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:((  %retval.0 = phi i32 [ 1, %if.then ], [ 2, %if.else ], !dbg !20*  br label %return, !dbg !18)*(  br label %return, !dbg !18*  br label %return, !dbg !18))
tfg_edge_comment end

=Edge: Lreturn%1%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  ret i32 %retval.0, !dbg !21)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100002 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100008 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100009 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100010 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100011 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100014 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100015 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100017 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100018 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100019 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100020 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lentry%2%d
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=Loc 100021 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100022 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100023 in dst.llvm.foo.
REGMEM
dst.llvm-%retval.0.Lreturn%1%bbentry
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=Loc 100024 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100025 in dst.llvm.foo.
REGMEM
dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : BV:32
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : BV:32
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lentry%2%d
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100002, 100019, 
=live locs at Lentry%2%d
100019, 100020, 
=live locs at Lif.else%1%intermediateVal0
100019, 
=live locs at Lif.then%1%intermediateVal0
100019, 
=live locs at Lreturn%1%bbentry
100019, 100023[f], 
=live locs at E0%0%d
100019, 100023[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100002, 100015, 100017, 100018, 100019
=loc definedness at Lentry%2%d
100002, 100015, 100017, 100018, 100019, 100020, 100027, 100028
=loc definedness at Lif.else%1%intermediateVal0
100002, 100015, 100017, 100018, 100019, 100020, 100027, 100028
=loc definedness at Lif.then%1%intermediateVal0
100002, 100015, 100017, 100018, 100019, 100020, 100027, 100028
=loc definedness at Lreturn%1%bbentry
100002, 100015, 100017, 100018, 100019, 100020, 100023, 100027, 100028
=loc definedness at E0%0%d
100002, 100015, 100017, 100018, 100019, 100020, 100021, 100022, 100023, 100024, 100027, 100028

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100002
=branch affecting variable locs at Lentry%2%d
100020
=branch affecting variable locs at Lif.else%1%intermediateVal0

=branch affecting variable locs at Lif.then%1%intermediateVal0

=branch affecting variable locs at Lreturn%1%bbentry

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100020 {input.dst.llvm-%cmp.Lentry%2%d }
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsgt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100027 {input.dst.local_alloc_count.Lentry%2%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100028 {input.dst.cur_rounding_mode.Lentry%2%d }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.else%1%intermediateVal0
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.else%1%intermediateVal0 done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.then%1%intermediateVal0
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.then%1%intermediateVal0 done
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%intermediateVal0=>Lreturn%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%intermediateVal0=>Lreturn%1%bbentry for loc_id 100023 {input.dst.llvm-%retval.0.Lreturn%1%bbentry }
1 : 2 { 0x2 +1.23e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%intermediateVal0=>Lreturn%1%bbentry for loc_id 100025 {input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry }
1 : 2 { 0x2 +1.23e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%intermediateVal0=>Lreturn%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%intermediateVal0=>Lreturn%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%intermediateVal0=>Lreturn%1%bbentry for loc_id 100023 {input.dst.llvm-%retval.0.Lreturn%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%intermediateVal0=>Lreturn%1%bbentry for loc_id 100026 {input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%intermediateVal0=>Lreturn%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d for loc_id 100021 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d for loc_id 100022 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d for loc_id 100024 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lreturn%1%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lentry%2%d:
vacuous mls at Lif.else%1%intermediateVal0:
vacuous mls at Lif.then%1%intermediateVal0:
vacuous mls at Lreturn%1%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lentry%2%d:
non-vacuous mls at Lif.else%1%intermediateVal0:
non-vacuous mls at Lif.then%1%intermediateVal0:
non-vacuous mls at Lreturn%1%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100002
=loc_expr
140332 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100006
=loc_expr
140346 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100008
=loc_expr
140347 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100009
=loc_expr
140349 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100010
=loc_expr
140351 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100011
=loc_expr
140353 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100014
=loc_expr
140340 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100015
=loc_expr
140335 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100020
=loc_expr
140395 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsgt(1, 2) : BOOL
=avail_exprs_val.end
=loc 100021
=loc_expr
140398 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100022
=loc_expr
140399 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100024
=loc_expr
140400 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100025
=loc_expr
140401 : input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 2 { 0x2 +1.23e129 } : BV:32
=avail_exprs_val.end
=loc 100026
=loc_expr
140402 : input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 100027
=loc_expr
140403 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100028
=loc_expr
140404 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100024 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100024 spreled-expr
140267 : retaddr_const : BV:32
=loc 100025 expr
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : BV:32
=loc 100025 spreled-expr
140281 : 2 { 0x2 +1.23e129 } : BV:32
=loc 100026 expr
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : BV:32
=loc 100026 spreled-expr
140287 : 1 { 0x1 +1.11e129 } : BV:32
=loc 100027 expr
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=loc 100027 spreled-expr
140340 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100028 expr
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=loc 100028 spreled-expr
140339 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100002 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100008 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100009 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100010 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100011 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100014 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100015 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100017 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100018 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100019 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100020 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100022 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100023 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100024 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100025 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100024 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100025 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100026 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100027 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100028 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lentry%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lif.else%1%intermediateVal0
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lif.then%1%intermediateVal0
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.else%1%intermediateVal0=>Lreturn%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.then%1%intermediateVal0=>Lreturn%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lreturn%1%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lentry%2%d
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%cmp.Lentry%2%d
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsgt(1, 2) : BOOL
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lif.else%1%intermediateVal0
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lif.then%1%intermediateVal0
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.else%1%intermediateVal0=>Lreturn%1%bbentry
=dst.llvm-%retval.0.Lreturn%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.then%1%intermediateVal0=>Lreturn%1%bbentry
=dst.llvm-%retval.0.Lreturn%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lreturn%1%bbentry=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.else%1%intermediateVal0
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.else%1%intermediateVal0 done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.then%1%intermediateVal0
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.then%1%intermediateVal0 done
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%intermediateVal0=>Lreturn%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%intermediateVal0=>Lreturn%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%intermediateVal0=>Lreturn%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%intermediateVal0=>Lreturn%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lreturn%1%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lreturn%1%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lentry%2%d for dst.llvm.foo
=suffixpath_at_Lentry%2%d.graph_edge_composition
(L0%0%d=>Lentry%2%d)
=suffixpath_at_Lif.else%1%intermediateVal0 for dst.llvm.foo
=suffixpath_at_Lif.else%1%intermediateVal0.graph_edge_composition
((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lif.else%1%intermediateVal0))
=suffixpath_at_Lif.then%1%intermediateVal0 for dst.llvm.foo
=suffixpath_at_Lif.then%1%intermediateVal0.graph_edge_composition
((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lif.then%1%intermediateVal0))
=suffixpath_at_Lreturn%1%bbentry for dst.llvm.foo
=suffixpath_at_Lreturn%1%bbentry.graph_edge_composition
(((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.else%1%intermediateVal0)*(Lif.else%1%intermediateVal0=>Lreturn%1%bbentry)))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lreturn%1%bbentry))))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.else%1%intermediateVal0)*(Lif.else%1%intermediateVal0=>Lreturn%1%bbentry)))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lreturn%1%bbentry))))*(Lreturn%1%bbentry=>E0%0%d))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d done
tfg.assumes_around_edge at Lentry%2%d=>Lif.else%1%intermediateVal0
tfg.assumes_around_edge at Lentry%2%d=>Lif.else%1%intermediateVal0 done
tfg.assumes_around_edge at Lentry%2%d=>Lif.then%1%intermediateVal0
tfg.assumes_around_edge at Lentry%2%d=>Lif.then%1%intermediateVal0 done
tfg.assumes_around_edge at Lif.else%1%intermediateVal0=>Lreturn%1%bbentry
tfg.assumes_around_edge at Lif.else%1%intermediateVal0=>Lreturn%1%bbentry done
tfg.assumes_around_edge at Lif.then%1%intermediateVal0=>Lreturn%1%bbentry
tfg.assumes_around_edge at Lif.then%1%intermediateVal0=>Lreturn%1%bbentry done
tfg.assumes_around_edge at Lreturn%1%bbentry=>E0%0%d
tfg.assumes_around_edge at Lreturn%1%bbentry=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 2
=pc
Lentry%2%d
=linename
line 2
=pc
Lif.else%1%d
=linename
line 5
=pc
Lif.then%1%d
=linename
line 3
=pc
Lreturn%1%d
=linename
line 6
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 9
=pc
Lentry%2%d
=column_name
 at column 7
=pc
Lif.else%1%d
=column_name
 at column 5
=pc
Lif.then%1%d
=column_name
 at column 5
=pc
Lreturn%1%d
=column_name
 at column 1
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 2 at column 9)
=pc
Lentry%2%d
=line_and_column
(line 2 at column 7)
=pc
Lif.else%1%d
=line_and_column
line 5
=pc
Lif.then%1%d
=line_and_column
line 3
=pc
Lreturn%1%d
=line_and_column
line 6
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%x : L0%0%d : x'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%cmp : L0%0%d : (x' >_s 0)
input.dst.llvm-%retval.0.phi.tmpvar.if.then : L0%0%d : 1
input.dst.llvm-%retval.0.phi.tmpvar.if.else : L0%0%d : 2
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%retval.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%cmp.Lentry%2%d : L0%0%d : (x' >_s 0)
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%retval.0.Lreturn%1%bbentry
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : L0%0%d : 2
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : L0%0%d : 1
input.dst.local_alloc_count.Lentry%2%d : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lentry%2%d : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%retval.0
=dst.llvm-%retval.0 loop pc: L0%0%d
=dst.llvm-%retval.0 val_scevb
=dst.llvm-%retval.0 val_scevb scev
=dst.llvm-%retval.0 val_scevb scev loop: L0%0%d
=dst.llvm-%retval.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%retval.0 val_scevb scev scev_expr
1 : input.dst.llvm-%retval.0 : BV32
=dst.llvm-%retval.0 val_scevb scev scev_expr done
=dst.llvm-%retval.0 val_scevb unsigned lower bound: 32:1
=dst.llvm-%retval.0 val_scevb unsigned upper bound: 32:3
=dst.llvm-%retval.0 val_scevb signed lower bound: 32:1
=dst.llvm-%retval.0 val_scevb signed upper bound: 32:3
=dst.llvm-%retval.0 atuse_scevb
=dst.llvm-%retval.0 atuse_scevb scev
=dst.llvm-%retval.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%retval.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%retval.0 atuse_scevb scev scev_expr
1 : input.dst.llvm-%retval.0 : BV32
=dst.llvm-%retval.0 atuse_scevb scev scev_expr done
=dst.llvm-%retval.0 atuse_scevb unsigned lower bound: 32:1
=dst.llvm-%retval.0 atuse_scevb unsigned upper bound: 32:3
=dst.llvm-%retval.0 atuse_scevb signed lower bound: 32:1
=dst.llvm-%retval.0 atuse_scevb signed upper bound: 32:3
=dst.llvm-%retval.0 atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at Lentry%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lif.else%1%intermediateVal0
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lif.then%1%intermediateVal0
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lreturn%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=reaching defns for expr 5 edges
  Lif.else%1%intermediateVal0=>Lreturn%1%bbentry
  Lif.then%1%intermediateVal0=>Lreturn%1%bbentry
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : BV:32
=reaching defns for expr 6 edges
  Lif.else%1%intermediateVal0=>Lreturn%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : BV:32
=reaching defns for expr 7 edges
  Lif.then%1%intermediateVal0=>Lreturn%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%cmp.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
=reaching defns for expr 5 edges
  Lif.else%1%intermediateVal0=>Lreturn%1%bbentry
  Lif.then%1%intermediateVal0=>Lreturn%1%bbentry
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 6 edges
  Lreturn%1%bbentry=>E0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 7 edges
  Lreturn%1%bbentry=>E0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 8 edges
  Lreturn%1%bbentry=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry : BV:32
=reaching defns for expr 9 edges
  Lif.else%1%intermediateVal0=>Lreturn%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lif.then%1%intermediateVal0=>Lreturn%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%cmp.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%retval.0.Lreturn%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%retval.0.phi.tmpvar.if.else.Lreturn%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%retval.0.phi.tmpvar.if.then.Lreturn%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lentry%2%d
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename cond3.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
equal-arg0
=LhsExpr
1 : $spec-arg-0 : BV:32
2 : $llvm-arg-0 : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 7 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>L2%3%d#{0,0})*((((L2%3%d#{0,0}=>L2%4%bbentry#{0,0})*(L2%4%bbentry#{0,0}=>L2%10%bbentry#{0,0}))+((L2%3%d#{0,0}=>L2%5%bbentry#{0,0})*(L2%5%bbentry#{0,0}=>L2%10%bbentry#{0,0})))*((L2%10%bbentry#{0,0}=>L2%10%d#{0,0})*((((L2%10%d#{0,0}=>L2%11%bbentry#{0,0})*(L2%11%bbentry#{0,0}=>L2%16%bbentry#{0,0}))+((L2%10%d#{0,0}=>L2%14%bbentry#{0,0})*(L2%14%bbentry#{0,0}=>L2%16%bbentry#{0,0})))*(L2%16%bbentry#{0,0}=>E0%0%d#{0,0})))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>Lentry%2%d#{0,0})*((((Lentry%2%d#{0,0}=>Lif.else%1%intermediateVal0#{0,0})*(Lif.else%1%intermediateVal0#{0,0}=>Lreturn%1%bbentry#{0,0}))+((Lentry%2%d#{0,0}=>Lif.then%1%intermediateVal0#{0,0})*(Lif.then%1%intermediateVal0#{0,0}=>Lreturn%1%bbentry#{0,0})))*(Lreturn%1%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
equal-arg0
=LhsExpr
1 : input.spec-%var-x-0 : BV:32
2 : input.dst.llvm-%x : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1
=Locs end
=Liveness in foo.A1
=live locs at L0%0%d_L0%0%d

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1

=Branch affecting variable locs in foo.A1

=Relevant Memlabels in foo.A1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece cvc4.ce3.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin cvc4.ce3 f149556b58dba86676c01b421dbe92ec
=input.spec-%var-x-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%3%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 262143 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 262144; 262147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 262148; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
=input.spec-%tmpvar-2.L2%10%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L2%10%bbentry
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-0.L2%3%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%16%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L2%10%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
2 : unit : UNIT
3 : 2 { 0x2 +1.23e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-4.L2%10%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 262147 { 0x40003 +1.3125035e129 } : BV:32
=input.spec-%tmpvar-3.L2%10%bbentry.0
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.spec-%tmpvar-3.L2%10%bbentry.2
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-5.L2%10%bbentry.0
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%tmpvar-5.L2%10%bbentry.2
1 : 2 { 0x2 +1.23e129 } : BV:32
=counter_example.random_seed
4211717139
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 9b8fb1dbb9e7c3ac4f1381da1bb19a2
=input.spec-%var-x-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%3%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 12; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%tmpvar-2.L2%10%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L2%10%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-0.L2%3%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%16%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L2%10%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 2 { 0x2 +1.23e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-4.L2%10%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%tmpvar-3.L2%10%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-3.L2%10%bbentry.2
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-5.L2%10%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-5.L2%10%bbentry.2
1 : 2 { 0x2 +1.23e129 } : BV:32
=counter_example.random_seed
1502059761
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece yices.ce5.num_edges_traversed0
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(epsilon)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin yices.ce5 a752117c7298d14e6582517bb3e6b16
=input.spec-%var-x-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%3%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-2.L2%10%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L2%10%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-0.L2%3%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L2%16%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L2%10%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 2 { 0x2 +1.23e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-4.L2%10%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-3.L2%10%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-3.L2%10%bbentry.2
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-5.L2%10%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-5.L2%10%bbentry.2
1 : 2 { 0x2 +1.23e129 } : BV:32
=counter_example.random_seed
1770023583
=counter_example_end
=global nodece 2 num_edges_traversed 0
=global nodece 2 nodece_visted_pcs: 
L0%0%d_L0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-9.E0%0%d : BV:32
2 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL0%0%d_L0%0%d.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsgt(1, 2) : BOOL
4 : not(3) : BOOL
5 : or(3, 4) : BOOL
6 : not(5) : BOOL
7 : input.spec-%var-x-0 : BV:32
8 : bvsgt(7, 2) : BOOL
9 : not(8) : BOOL
10 : or(8, 9) : BOOL
11 : or(6, 10) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L0%0%d_L0%0%d=>E0%0%d_E0%0%d)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-9.E0%0%d : BV:32
2 : input.dst.llvm-%retval.0.Lreturn%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140333 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140334 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140355 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140335 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140356 : 4 { 0x4 +1.0e1025 } : INT
140357 : 0 { 0x0 } : BOOL
140358 : select(140333, 140334, 140355, 140335, 140356, 140357) : BV:32
=RhsExpr
140332 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.pred
=Comment
equal-arg0
=LhsExpr
140273 : input.spec-%var-x-0 : BV:32
140332 : input.dst.llvm-%x : BV:32
140432 : eq(140273, 140332) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.pred
=Comment
precond-mlasserts
=LhsExpr
140416 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140417 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140418 : bvule(140416, 140417) : BOOL
140405 : 4 { 0x4 +1.47e129 } : BV:32
140419 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140420 : bvadd(140405, 140419) : BV:32
140421 : bvadd(140416, 140420) : BV:32
140422 : eq(140417, 140421) : BOOL
140423 : and(140418, 140422) : BOOL
140335 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140424 : 3 { 0x3 +1.35e129 } : BV:32
140425 : bvand(140335, 140424) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140426 : eq(140425, 140276) : BOOL
140427 : and(140423, 140426) : BOOL
140428 : eq(140335, 140416) : BOOL
140429 : and(140427, 140428) : BOOL
140334 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140287 : 1 { 0x1 +1.11e129 } : BV:32
140336 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140430 : region_agrees_with_memlabel(140334, 140276, 140287, 140336) : BOOL
140431 : and(140429, 140430) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
